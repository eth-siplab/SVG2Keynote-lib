// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSTArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSTArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSDArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCEArchives.pb.h"
#include "TSWPArchives.pb.h"
#include "TSTStylePropertyArchiving.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSTArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSTArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[147]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSTArchives_2eproto;
namespace TST {
class AccumulatorArchive;
struct AccumulatorArchiveDefaultTypeInternal;
extern AccumulatorArchiveDefaultTypeInternal _AccumulatorArchive_default_instance_;
class ArgumentPlaceholderNodeArchive;
struct ArgumentPlaceholderNodeArchiveDefaultTypeInternal;
extern ArgumentPlaceholderNodeArchiveDefaultTypeInternal _ArgumentPlaceholderNodeArchive_default_instance_;
class ArrayNodeArchive;
struct ArrayNodeArchiveDefaultTypeInternal;
extern ArrayNodeArchiveDefaultTypeInternal _ArrayNodeArchive_default_instance_;
class AutofillSelectionArchive;
struct AutofillSelectionArchiveDefaultTypeInternal;
extern AutofillSelectionArchiveDefaultTypeInternal _AutofillSelectionArchive_default_instance_;
class BooleanNodeArchive;
struct BooleanNodeArchiveDefaultTypeInternal;
extern BooleanNodeArchiveDefaultTypeInternal _BooleanNodeArchive_default_instance_;
class CategoryInfoArchive;
struct CategoryInfoArchiveDefaultTypeInternal;
extern CategoryInfoArchiveDefaultTypeInternal _CategoryInfoArchive_default_instance_;
class CategoryOrderArchive;
struct CategoryOrderArchiveDefaultTypeInternal;
extern CategoryOrderArchiveDefaultTypeInternal _CategoryOrderArchive_default_instance_;
class CategoryOwnerArchive;
struct CategoryOwnerArchiveDefaultTypeInternal;
extern CategoryOwnerArchiveDefaultTypeInternal _CategoryOwnerArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive;
struct CategoryOwnerArchive_GroupByArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive_AggNodeArchive;
struct CategoryOwnerArchive_GroupByArchive_AggNodeArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchive_AggNodeArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_AggNodeArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive_AggregatorArchive;
struct CategoryOwnerArchive_GroupByArchive_AggregatorArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchive_AggregatorArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_AggregatorArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive;
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive;
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive;
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive_default_instance_;
class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive;
struct CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveDefaultTypeInternal;
extern CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveDefaultTypeInternal _CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive_default_instance_;
class Cell;
struct CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class CellBorderArchive;
struct CellBorderArchiveDefaultTypeInternal;
extern CellBorderArchiveDefaultTypeInternal _CellBorderArchive_default_instance_;
class CellDiffArchive;
struct CellDiffArchiveDefaultTypeInternal;
extern CellDiffArchiveDefaultTypeInternal _CellDiffArchive_default_instance_;
class CellDiffArray;
struct CellDiffArrayDefaultTypeInternal;
extern CellDiffArrayDefaultTypeInternal _CellDiffArray_default_instance_;
class CellDiffArraySegment;
struct CellDiffArraySegmentDefaultTypeInternal;
extern CellDiffArraySegmentDefaultTypeInternal _CellDiffArraySegment_default_instance_;
class CellDiffMapArchive;
struct CellDiffMapArchiveDefaultTypeInternal;
extern CellDiffMapArchiveDefaultTypeInternal _CellDiffMapArchive_default_instance_;
class CellFillStandIn;
struct CellFillStandInDefaultTypeInternal;
extern CellFillStandInDefaultTypeInternal _CellFillStandIn_default_instance_;
class CellFormatAndValueArchive;
struct CellFormatAndValueArchiveDefaultTypeInternal;
extern CellFormatAndValueArchiveDefaultTypeInternal _CellFormatAndValueArchive_default_instance_;
class CellID;
struct CellIDDefaultTypeInternal;
extern CellIDDefaultTypeInternal _CellID_default_instance_;
class CellListArchive;
struct CellListArchiveDefaultTypeInternal;
extern CellListArchiveDefaultTypeInternal _CellListArchive_default_instance_;
class CellListArchive_OptionalCell;
struct CellListArchive_OptionalCellDefaultTypeInternal;
extern CellListArchive_OptionalCellDefaultTypeInternal _CellListArchive_OptionalCell_default_instance_;
class CellMapArchive;
struct CellMapArchiveDefaultTypeInternal;
extern CellMapArchiveDefaultTypeInternal _CellMapArchive_default_instance_;
class CellRange;
struct CellRangeDefaultTypeInternal;
extern CellRangeDefaultTypeInternal _CellRange_default_instance_;
class CellRefImportWarningSetPairArchive;
struct CellRefImportWarningSetPairArchiveDefaultTypeInternal;
extern CellRefImportWarningSetPairArchiveDefaultTypeInternal _CellRefImportWarningSetPairArchive_default_instance_;
class CellRegion;
struct CellRegionDefaultTypeInternal;
extern CellRegionDefaultTypeInternal _CellRegion_default_instance_;
class CellSpecArchive;
struct CellSpecArchiveDefaultTypeInternal;
extern CellSpecArchiveDefaultTypeInternal _CellSpecArchive_default_instance_;
class CellStyleArchive;
struct CellStyleArchiveDefaultTypeInternal;
extern CellStyleArchiveDefaultTypeInternal _CellStyleArchive_default_instance_;
class CellUIDListArchive;
struct CellUIDListArchiveDefaultTypeInternal;
extern CellUIDListArchiveDefaultTypeInternal _CellUIDListArchive_default_instance_;
class CellUIDLookupListArchive;
struct CellUIDLookupListArchiveDefaultTypeInternal;
extern CellUIDLookupListArchiveDefaultTypeInternal _CellUIDLookupListArchive_default_instance_;
class CellUIDRegionArchive;
struct CellUIDRegionArchiveDefaultTypeInternal;
extern CellUIDRegionArchiveDefaultTypeInternal _CellUIDRegionArchive_default_instance_;
class ChangePropagationMapWrapper;
struct ChangePropagationMapWrapperDefaultTypeInternal;
extern ChangePropagationMapWrapperDefaultTypeInternal _ChangePropagationMapWrapper_default_instance_;
class ColumnAggregateArchive;
struct ColumnAggregateArchiveDefaultTypeInternal;
extern ColumnAggregateArchiveDefaultTypeInternal _ColumnAggregateArchive_default_instance_;
class ColumnAggregateListArchive;
struct ColumnAggregateListArchiveDefaultTypeInternal;
extern ColumnAggregateListArchiveDefaultTypeInternal _ColumnAggregateListArchive_default_instance_;
class ColumnRowUIDMapArchive;
struct ColumnRowUIDMapArchiveDefaultTypeInternal;
extern ColumnRowUIDMapArchiveDefaultTypeInternal _ColumnRowUIDMapArchive_default_instance_;
class CommentStorageWrapperArchive;
struct CommentStorageWrapperArchiveDefaultTypeInternal;
extern CommentStorageWrapperArchiveDefaultTypeInternal _CommentStorageWrapperArchive_default_instance_;
class CompletionTokenAttachmentArchive;
struct CompletionTokenAttachmentArchiveDefaultTypeInternal;
extern CompletionTokenAttachmentArchiveDefaultTypeInternal _CompletionTokenAttachmentArchive_default_instance_;
class ConcurrentCellListArchive;
struct ConcurrentCellListArchiveDefaultTypeInternal;
extern ConcurrentCellListArchiveDefaultTypeInternal _ConcurrentCellListArchive_default_instance_;
class ConcurrentCellListArchive_OptionalCell;
struct ConcurrentCellListArchive_OptionalCellDefaultTypeInternal;
extern ConcurrentCellListArchive_OptionalCellDefaultTypeInternal _ConcurrentCellListArchive_OptionalCell_default_instance_;
class ConcurrentCellMapArchive;
struct ConcurrentCellMapArchiveDefaultTypeInternal;
extern ConcurrentCellMapArchiveDefaultTypeInternal _ConcurrentCellMapArchive_default_instance_;
class ConditionalStyleSetArchive;
struct ConditionalStyleSetArchiveDefaultTypeInternal;
extern ConditionalStyleSetArchiveDefaultTypeInternal _ConditionalStyleSetArchive_default_instance_;
class ConditionalStyleSetArchive_ConditionalStyleRule;
struct ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal;
extern ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal _ConditionalStyleSetArchive_ConditionalStyleRule_default_instance_;
class ControlCellSelectionArchive;
struct ControlCellSelectionArchiveDefaultTypeInternal;
extern ControlCellSelectionArchiveDefaultTypeInternal _ControlCellSelectionArchive_default_instance_;
class DataStore;
struct DataStoreDefaultTypeInternal;
extern DataStoreDefaultTypeInternal _DataStore_default_instance_;
class DateNodeArchive;
struct DateNodeArchiveDefaultTypeInternal;
extern DateNodeArchiveDefaultTypeInternal _DateNodeArchive_default_instance_;
class DeathhawkRdar39989167CellSelectionArchive;
struct DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal;
extern DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal _DeathhawkRdar39989167CellSelectionArchive_default_instance_;
class DefaultCellStylesContainerArchive;
struct DefaultCellStylesContainerArchiveDefaultTypeInternal;
extern DefaultCellStylesContainerArchiveDefaultTypeInternal _DefaultCellStylesContainerArchive_default_instance_;
class DoubleStyleMapArchive;
struct DoubleStyleMapArchiveDefaultTypeInternal;
extern DoubleStyleMapArchiveDefaultTypeInternal _DoubleStyleMapArchive_default_instance_;
class DoubleStyleMapArchive_DoubleStyleMapEntryArchive;
struct DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal;
extern DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal _DoubleStyleMapArchive_DoubleStyleMapEntryArchive_default_instance_;
class DurationNodeArchive;
struct DurationNodeArchiveDefaultTypeInternal;
extern DurationNodeArchiveDefaultTypeInternal _DurationNodeArchive_default_instance_;
class DurationWrapperArchive;
struct DurationWrapperArchiveDefaultTypeInternal;
extern DurationWrapperArchiveDefaultTypeInternal _DurationWrapperArchive_default_instance_;
class EmptyExpressionNodeArchive;
struct EmptyExpressionNodeArchiveDefaultTypeInternal;
extern EmptyExpressionNodeArchiveDefaultTypeInternal _EmptyExpressionNodeArchive_default_instance_;
class ExpandCollapseStateArchive;
struct ExpandCollapseStateArchiveDefaultTypeInternal;
extern ExpandCollapseStateArchiveDefaultTypeInternal _ExpandCollapseStateArchive_default_instance_;
class ExpandedCellRange;
struct ExpandedCellRangeDefaultTypeInternal;
extern ExpandedCellRangeDefaultTypeInternal _ExpandedCellRange_default_instance_;
class ExpandedTableSize;
struct ExpandedTableSizeDefaultTypeInternal;
extern ExpandedTableSizeDefaultTypeInternal _ExpandedTableSize_default_instance_;
class ExpressionNodeArchive;
struct ExpressionNodeArchiveDefaultTypeInternal;
extern ExpressionNodeArchiveDefaultTypeInternal _ExpressionNodeArchive_default_instance_;
class FilterRuleArchive;
struct FilterRuleArchiveDefaultTypeInternal;
extern FilterRuleArchiveDefaultTypeInternal _FilterRuleArchive_default_instance_;
class FilterSetArchive;
struct FilterSetArchiveDefaultTypeInternal;
extern FilterSetArchiveDefaultTypeInternal _FilterSetArchive_default_instance_;
class FormulaArchive;
struct FormulaArchiveDefaultTypeInternal;
extern FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
class FormulaEqualsTokenAttachmentArchive;
struct FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal;
extern FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal _FormulaEqualsTokenAttachmentArchive_default_instance_;
class FormulaPredicateArchive;
struct FormulaPredicateArchiveDefaultTypeInternal;
extern FormulaPredicateArchiveDefaultTypeInternal _FormulaPredicateArchive_default_instance_;
class FormulaSelectionArchive;
struct FormulaSelectionArchiveDefaultTypeInternal;
extern FormulaSelectionArchiveDefaultTypeInternal _FormulaSelectionArchive_default_instance_;
class FormulaStoreArchive;
struct FormulaStoreArchiveDefaultTypeInternal;
extern FormulaStoreArchiveDefaultTypeInternal _FormulaStoreArchive_default_instance_;
class FormulaStoreArchive_FormulaStorePair;
struct FormulaStoreArchive_FormulaStorePairDefaultTypeInternal;
extern FormulaStoreArchive_FormulaStorePairDefaultTypeInternal _FormulaStoreArchive_FormulaStorePair_default_instance_;
class FunctionEndNodeArchive;
struct FunctionEndNodeArchiveDefaultTypeInternal;
extern FunctionEndNodeArchiveDefaultTypeInternal _FunctionEndNodeArchive_default_instance_;
class FunctionNodeArchive;
struct FunctionNodeArchiveDefaultTypeInternal;
extern FunctionNodeArchiveDefaultTypeInternal _FunctionNodeArchive_default_instance_;
class GroupColumnArchive;
struct GroupColumnArchiveDefaultTypeInternal;
extern GroupColumnArchiveDefaultTypeInternal _GroupColumnArchive_default_instance_;
class GroupColumnListArchive;
struct GroupColumnListArchiveDefaultTypeInternal;
extern GroupColumnListArchiveDefaultTypeInternal _GroupColumnListArchive_default_instance_;
class HeaderNameMgrArchive;
struct HeaderNameMgrArchiveDefaultTypeInternal;
extern HeaderNameMgrArchiveDefaultTypeInternal _HeaderNameMgrArchive_default_instance_;
class HeaderNameMgrArchive_PerTableArchive;
struct HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal;
extern HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal _HeaderNameMgrArchive_PerTableArchive_default_instance_;
class HeaderNameMgrTileArchive;
struct HeaderNameMgrTileArchiveDefaultTypeInternal;
extern HeaderNameMgrTileArchiveDefaultTypeInternal _HeaderNameMgrTileArchive_default_instance_;
class HeaderNameMgrTileArchive_NameFragmentArchive;
struct HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal;
extern HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal _HeaderNameMgrTileArchive_NameFragmentArchive_default_instance_;
class HeaderStorage;
struct HeaderStorageDefaultTypeInternal;
extern HeaderStorageDefaultTypeInternal _HeaderStorage_default_instance_;
class HeaderStorageBucket;
struct HeaderStorageBucketDefaultTypeInternal;
extern HeaderStorageBucketDefaultTypeInternal _HeaderStorageBucket_default_instance_;
class HeaderStorageBucket_Header;
struct HeaderStorageBucket_HeaderDefaultTypeInternal;
extern HeaderStorageBucket_HeaderDefaultTypeInternal _HeaderStorageBucket_Header_default_instance_;
class HiddenStateExtentArchive;
struct HiddenStateExtentArchiveDefaultTypeInternal;
extern HiddenStateExtentArchiveDefaultTypeInternal _HiddenStateExtentArchive_default_instance_;
class HiddenStateExtentArchive_RowOrColumnState;
struct HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal;
extern HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal _HiddenStateExtentArchive_RowOrColumnState_default_instance_;
class HiddenStateFormulaOwnerArchive;
struct HiddenStateFormulaOwnerArchiveDefaultTypeInternal;
extern HiddenStateFormulaOwnerArchiveDefaultTypeInternal _HiddenStateFormulaOwnerArchive_default_instance_;
class HiddenStatesArchive;
struct HiddenStatesArchiveDefaultTypeInternal;
extern HiddenStatesArchiveDefaultTypeInternal _HiddenStatesArchive_default_instance_;
class HiddenStatesOwnerArchive;
struct HiddenStatesOwnerArchiveDefaultTypeInternal;
extern HiddenStatesOwnerArchiveDefaultTypeInternal _HiddenStatesOwnerArchive_default_instance_;
class IdentifierNodeArchive;
struct IdentifierNodeArchiveDefaultTypeInternal;
extern IdentifierNodeArchiveDefaultTypeInternal _IdentifierNodeArchive_default_instance_;
class ImportWarningSetArchive;
struct ImportWarningSetArchiveDefaultTypeInternal;
extern ImportWarningSetArchiveDefaultTypeInternal _ImportWarningSetArchive_default_instance_;
class ImportWarningSetArchive_FormulaImportWarning;
struct ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal;
extern ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal _ImportWarningSetArchive_FormulaImportWarning_default_instance_;
class ImportWarningSetByCellRefArchive;
struct ImportWarningSetByCellRefArchiveDefaultTypeInternal;
extern ImportWarningSetByCellRefArchiveDefaultTypeInternal _ImportWarningSetByCellRefArchive_default_instance_;
class InNodeArchive;
struct InNodeArchiveDefaultTypeInternal;
extern InNodeArchiveDefaultTypeInternal _InNodeArchive_default_instance_;
class LayoutEngineArchive;
struct LayoutEngineArchiveDefaultTypeInternal;
extern LayoutEngineArchiveDefaultTypeInternal _LayoutEngineArchive_default_instance_;
class LayoutHintArchive;
struct LayoutHintArchiveDefaultTypeInternal;
extern LayoutHintArchiveDefaultTypeInternal _LayoutHintArchive_default_instance_;
class LetNodeArchive;
struct LetNodeArchiveDefaultTypeInternal;
extern LetNodeArchiveDefaultTypeInternal _LetNodeArchive_default_instance_;
class ListNodeArchive;
struct ListNodeArchiveDefaultTypeInternal;
extern ListNodeArchiveDefaultTypeInternal _ListNodeArchive_default_instance_;
class MergeOperationArchive;
struct MergeOperationArchiveDefaultTypeInternal;
extern MergeOperationArchiveDefaultTypeInternal _MergeOperationArchive_default_instance_;
class MergeOwnerArchive;
struct MergeOwnerArchiveDefaultTypeInternal;
extern MergeOwnerArchiveDefaultTypeInternal _MergeOwnerArchive_default_instance_;
class MergeRegionMapArchive;
struct MergeRegionMapArchiveDefaultTypeInternal;
extern MergeRegionMapArchiveDefaultTypeInternal _MergeRegionMapArchive_default_instance_;
class MultiTableRemapperArchive;
struct MultiTableRemapperArchiveDefaultTypeInternal;
extern MultiTableRemapperArchiveDefaultTypeInternal _MultiTableRemapperArchive_default_instance_;
class NumberNodeArchive;
struct NumberNodeArchiveDefaultTypeInternal;
extern NumberNodeArchiveDefaultTypeInternal _NumberNodeArchive_default_instance_;
class OperatorNodeArchive;
struct OperatorNodeArchiveDefaultTypeInternal;
extern OperatorNodeArchiveDefaultTypeInternal _OperatorNodeArchive_default_instance_;
class PencilAnnotationArchive;
struct PencilAnnotationArchiveDefaultTypeInternal;
extern PencilAnnotationArchiveDefaultTypeInternal _PencilAnnotationArchive_default_instance_;
class PencilAnnotationOwnerArchive;
struct PencilAnnotationOwnerArchiveDefaultTypeInternal;
extern PencilAnnotationOwnerArchiveDefaultTypeInternal _PencilAnnotationOwnerArchive_default_instance_;
class PopUpMenuModel;
struct PopUpMenuModelDefaultTypeInternal;
extern PopUpMenuModelDefaultTypeInternal _PopUpMenuModel_default_instance_;
class PopUpMenuModel_CellValue;
struct PopUpMenuModel_CellValueDefaultTypeInternal;
extern PopUpMenuModel_CellValueDefaultTypeInternal _PopUpMenuModel_CellValue_default_instance_;
class PostfixOperatorNodeArchive;
struct PostfixOperatorNodeArchiveDefaultTypeInternal;
extern PostfixOperatorNodeArchiveDefaultTypeInternal _PostfixOperatorNodeArchive_default_instance_;
class PrefixOperatorNodeArchive;
struct PrefixOperatorNodeArchiveDefaultTypeInternal;
extern PrefixOperatorNodeArchiveDefaultTypeInternal _PrefixOperatorNodeArchive_default_instance_;
class ReferenceNodeArchive;
struct ReferenceNodeArchiveDefaultTypeInternal;
extern ReferenceNodeArchiveDefaultTypeInternal _ReferenceNodeArchive_default_instance_;
class RichTextPayloadArchive;
struct RichTextPayloadArchiveDefaultTypeInternal;
extern RichTextPayloadArchiveDefaultTypeInternal _RichTextPayloadArchive_default_instance_;
class SelectionArchive;
struct SelectionArchiveDefaultTypeInternal;
extern SelectionArchiveDefaultTypeInternal _SelectionArchive_default_instance_;
class SortRuleReferenceTrackerArchive;
struct SortRuleReferenceTrackerArchiveDefaultTypeInternal;
extern SortRuleReferenceTrackerArchiveDefaultTypeInternal _SortRuleReferenceTrackerArchive_default_instance_;
class StockCellSelectionArchive;
struct StockCellSelectionArchiveDefaultTypeInternal;
extern StockCellSelectionArchiveDefaultTypeInternal _StockCellSelectionArchive_default_instance_;
class StringNodeArchive;
struct StringNodeArchiveDefaultTypeInternal;
extern StringNodeArchiveDefaultTypeInternal _StringNodeArchive_default_instance_;
class StrokeLayerArchive;
struct StrokeLayerArchiveDefaultTypeInternal;
extern StrokeLayerArchiveDefaultTypeInternal _StrokeLayerArchive_default_instance_;
class StrokeLayerArchive_StrokeRunArchive;
struct StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal;
extern StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal _StrokeLayerArchive_StrokeRunArchive_default_instance_;
class StrokeSelectionArchive;
struct StrokeSelectionArchiveDefaultTypeInternal;
extern StrokeSelectionArchiveDefaultTypeInternal _StrokeSelectionArchive_default_instance_;
class StrokeSidecarArchive;
struct StrokeSidecarArchiveDefaultTypeInternal;
extern StrokeSidecarArchiveDefaultTypeInternal _StrokeSidecarArchive_default_instance_;
class StructuredTextImportRecord;
struct StructuredTextImportRecordDefaultTypeInternal;
extern StructuredTextImportRecordDefaultTypeInternal _StructuredTextImportRecord_default_instance_;
class StyleTableMapArchive;
struct StyleTableMapArchiveDefaultTypeInternal;
extern StyleTableMapArchiveDefaultTypeInternal _StyleTableMapArchive_default_instance_;
class StyleTableMapArchive_StyleTableMapEntryArchive;
struct StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal;
extern StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal _StyleTableMapArchive_StyleTableMapEntryArchive_default_instance_;
class SummaryCellVendorArchive;
struct SummaryCellVendorArchiveDefaultTypeInternal;
extern SummaryCellVendorArchiveDefaultTypeInternal _SummaryCellVendorArchive_default_instance_;
class SummaryCellVendorArchive_SummaryCellEntry;
struct SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal;
extern SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal _SummaryCellVendorArchive_SummaryCellEntry_default_instance_;
class SummaryModelArchive;
struct SummaryModelArchiveDefaultTypeInternal;
extern SummaryModelArchiveDefaultTypeInternal _SummaryModelArchive_default_instance_;
class SummaryModelGroupByChangeStateArchive;
struct SummaryModelGroupByChangeStateArchiveDefaultTypeInternal;
extern SummaryModelGroupByChangeStateArchiveDefaultTypeInternal _SummaryModelGroupByChangeStateArchive_default_instance_;
class TableDataList;
struct TableDataListDefaultTypeInternal;
extern TableDataListDefaultTypeInternal _TableDataList_default_instance_;
class TableDataListSegment;
struct TableDataListSegmentDefaultTypeInternal;
extern TableDataListSegmentDefaultTypeInternal _TableDataListSegment_default_instance_;
class TableDataList_ListEntry;
struct TableDataList_ListEntryDefaultTypeInternal;
extern TableDataList_ListEntryDefaultTypeInternal _TableDataList_ListEntry_default_instance_;
class TableInfoArchive;
struct TableInfoArchiveDefaultTypeInternal;
extern TableInfoArchiveDefaultTypeInternal _TableInfoArchive_default_instance_;
class TableModelArchive;
struct TableModelArchiveDefaultTypeInternal;
extern TableModelArchiveDefaultTypeInternal _TableModelArchive_default_instance_;
class TableNameSelectionArchive;
struct TableNameSelectionArchiveDefaultTypeInternal;
extern TableNameSelectionArchiveDefaultTypeInternal _TableNameSelectionArchive_default_instance_;
class TableRBTree;
struct TableRBTreeDefaultTypeInternal;
extern TableRBTreeDefaultTypeInternal _TableRBTree_default_instance_;
class TableRBTree_Node;
struct TableRBTree_NodeDefaultTypeInternal;
extern TableRBTree_NodeDefaultTypeInternal _TableRBTree_Node_default_instance_;
class TableSelection;
struct TableSelectionDefaultTypeInternal;
extern TableSelectionDefaultTypeInternal _TableSelection_default_instance_;
class TableSize;
struct TableSizeDefaultTypeInternal;
extern TableSizeDefaultTypeInternal _TableSize_default_instance_;
class TableSortOrderArchive;
struct TableSortOrderArchiveDefaultTypeInternal;
extern TableSortOrderArchiveDefaultTypeInternal _TableSortOrderArchive_default_instance_;
class TableSortOrderArchive_SortRuleArchive;
struct TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal;
extern TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal _TableSortOrderArchive_SortRuleArchive_default_instance_;
class TableSortOrderUIDArchive;
struct TableSortOrderUIDArchiveDefaultTypeInternal;
extern TableSortOrderUIDArchiveDefaultTypeInternal _TableSortOrderUIDArchive_default_instance_;
class TableSortOrderUIDArchive_SortRuleArchive;
struct TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal;
extern TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal _TableSortOrderUIDArchive_SortRuleArchive_default_instance_;
class TableStyleArchive;
struct TableStyleArchiveDefaultTypeInternal;
extern TableStyleArchiveDefaultTypeInternal _TableStyleArchive_default_instance_;
class TableStyleNetworkArchive;
struct TableStyleNetworkArchiveDefaultTypeInternal;
extern TableStyleNetworkArchiveDefaultTypeInternal _TableStyleNetworkArchive_default_instance_;
class Tile;
struct TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
class TileRowInfo;
struct TileRowInfoDefaultTypeInternal;
extern TileRowInfoDefaultTypeInternal _TileRowInfo_default_instance_;
class TileStorage;
struct TileStorageDefaultTypeInternal;
extern TileStorageDefaultTypeInternal _TileStorage_default_instance_;
class TileStorage_Tile;
struct TileStorage_TileDefaultTypeInternal;
extern TileStorage_TileDefaultTypeInternal _TileStorage_Tile_default_instance_;
class TokenAttachmentArchive;
struct TokenAttachmentArchiveDefaultTypeInternal;
extern TokenAttachmentArchiveDefaultTypeInternal _TokenAttachmentArchive_default_instance_;
class VariableNodeArchive;
struct VariableNodeArchiveDefaultTypeInternal;
extern VariableNodeArchiveDefaultTypeInternal _VariableNodeArchive_default_instance_;
class WPTableInfoArchive;
struct WPTableInfoArchiveDefaultTypeInternal;
extern WPTableInfoArchiveDefaultTypeInternal _WPTableInfoArchive_default_instance_;
class WidthHeightCache;
struct WidthHeightCacheDefaultTypeInternal;
extern WidthHeightCacheDefaultTypeInternal _WidthHeightCache_default_instance_;
class WidthHeightCacheFittingEntry;
struct WidthHeightCacheFittingEntryDefaultTypeInternal;
extern WidthHeightCacheFittingEntryDefaultTypeInternal _WidthHeightCacheFittingEntry_default_instance_;
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> ::TST::AccumulatorArchive* Arena::CreateMaybeMessage<::TST::AccumulatorArchive>(Arena*);
template<> ::TST::ArgumentPlaceholderNodeArchive* Arena::CreateMaybeMessage<::TST::ArgumentPlaceholderNodeArchive>(Arena*);
template<> ::TST::ArrayNodeArchive* Arena::CreateMaybeMessage<::TST::ArrayNodeArchive>(Arena*);
template<> ::TST::AutofillSelectionArchive* Arena::CreateMaybeMessage<::TST::AutofillSelectionArchive>(Arena*);
template<> ::TST::BooleanNodeArchive* Arena::CreateMaybeMessage<::TST::BooleanNodeArchive>(Arena*);
template<> ::TST::CategoryInfoArchive* Arena::CreateMaybeMessage<::TST::CategoryInfoArchive>(Arena*);
template<> ::TST::CategoryOrderArchive* Arena::CreateMaybeMessage<::TST::CategoryOrderArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive>(Arena*);
template<> ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* Arena::CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive>(Arena*);
template<> ::TST::Cell* Arena::CreateMaybeMessage<::TST::Cell>(Arena*);
template<> ::TST::CellBorderArchive* Arena::CreateMaybeMessage<::TST::CellBorderArchive>(Arena*);
template<> ::TST::CellDiffArchive* Arena::CreateMaybeMessage<::TST::CellDiffArchive>(Arena*);
template<> ::TST::CellDiffArray* Arena::CreateMaybeMessage<::TST::CellDiffArray>(Arena*);
template<> ::TST::CellDiffArraySegment* Arena::CreateMaybeMessage<::TST::CellDiffArraySegment>(Arena*);
template<> ::TST::CellDiffMapArchive* Arena::CreateMaybeMessage<::TST::CellDiffMapArchive>(Arena*);
template<> ::TST::CellFillStandIn* Arena::CreateMaybeMessage<::TST::CellFillStandIn>(Arena*);
template<> ::TST::CellFormatAndValueArchive* Arena::CreateMaybeMessage<::TST::CellFormatAndValueArchive>(Arena*);
template<> ::TST::CellID* Arena::CreateMaybeMessage<::TST::CellID>(Arena*);
template<> ::TST::CellListArchive* Arena::CreateMaybeMessage<::TST::CellListArchive>(Arena*);
template<> ::TST::CellListArchive_OptionalCell* Arena::CreateMaybeMessage<::TST::CellListArchive_OptionalCell>(Arena*);
template<> ::TST::CellMapArchive* Arena::CreateMaybeMessage<::TST::CellMapArchive>(Arena*);
template<> ::TST::CellRange* Arena::CreateMaybeMessage<::TST::CellRange>(Arena*);
template<> ::TST::CellRefImportWarningSetPairArchive* Arena::CreateMaybeMessage<::TST::CellRefImportWarningSetPairArchive>(Arena*);
template<> ::TST::CellRegion* Arena::CreateMaybeMessage<::TST::CellRegion>(Arena*);
template<> ::TST::CellSpecArchive* Arena::CreateMaybeMessage<::TST::CellSpecArchive>(Arena*);
template<> ::TST::CellStyleArchive* Arena::CreateMaybeMessage<::TST::CellStyleArchive>(Arena*);
template<> ::TST::CellUIDListArchive* Arena::CreateMaybeMessage<::TST::CellUIDListArchive>(Arena*);
template<> ::TST::CellUIDLookupListArchive* Arena::CreateMaybeMessage<::TST::CellUIDLookupListArchive>(Arena*);
template<> ::TST::CellUIDRegionArchive* Arena::CreateMaybeMessage<::TST::CellUIDRegionArchive>(Arena*);
template<> ::TST::ChangePropagationMapWrapper* Arena::CreateMaybeMessage<::TST::ChangePropagationMapWrapper>(Arena*);
template<> ::TST::ColumnAggregateArchive* Arena::CreateMaybeMessage<::TST::ColumnAggregateArchive>(Arena*);
template<> ::TST::ColumnAggregateListArchive* Arena::CreateMaybeMessage<::TST::ColumnAggregateListArchive>(Arena*);
template<> ::TST::ColumnRowUIDMapArchive* Arena::CreateMaybeMessage<::TST::ColumnRowUIDMapArchive>(Arena*);
template<> ::TST::CommentStorageWrapperArchive* Arena::CreateMaybeMessage<::TST::CommentStorageWrapperArchive>(Arena*);
template<> ::TST::CompletionTokenAttachmentArchive* Arena::CreateMaybeMessage<::TST::CompletionTokenAttachmentArchive>(Arena*);
template<> ::TST::ConcurrentCellListArchive* Arena::CreateMaybeMessage<::TST::ConcurrentCellListArchive>(Arena*);
template<> ::TST::ConcurrentCellListArchive_OptionalCell* Arena::CreateMaybeMessage<::TST::ConcurrentCellListArchive_OptionalCell>(Arena*);
template<> ::TST::ConcurrentCellMapArchive* Arena::CreateMaybeMessage<::TST::ConcurrentCellMapArchive>(Arena*);
template<> ::TST::ConditionalStyleSetArchive* Arena::CreateMaybeMessage<::TST::ConditionalStyleSetArchive>(Arena*);
template<> ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* Arena::CreateMaybeMessage<::TST::ConditionalStyleSetArchive_ConditionalStyleRule>(Arena*);
template<> ::TST::ControlCellSelectionArchive* Arena::CreateMaybeMessage<::TST::ControlCellSelectionArchive>(Arena*);
template<> ::TST::DataStore* Arena::CreateMaybeMessage<::TST::DataStore>(Arena*);
template<> ::TST::DateNodeArchive* Arena::CreateMaybeMessage<::TST::DateNodeArchive>(Arena*);
template<> ::TST::DeathhawkRdar39989167CellSelectionArchive* Arena::CreateMaybeMessage<::TST::DeathhawkRdar39989167CellSelectionArchive>(Arena*);
template<> ::TST::DefaultCellStylesContainerArchive* Arena::CreateMaybeMessage<::TST::DefaultCellStylesContainerArchive>(Arena*);
template<> ::TST::DoubleStyleMapArchive* Arena::CreateMaybeMessage<::TST::DoubleStyleMapArchive>(Arena*);
template<> ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* Arena::CreateMaybeMessage<::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive>(Arena*);
template<> ::TST::DurationNodeArchive* Arena::CreateMaybeMessage<::TST::DurationNodeArchive>(Arena*);
template<> ::TST::DurationWrapperArchive* Arena::CreateMaybeMessage<::TST::DurationWrapperArchive>(Arena*);
template<> ::TST::EmptyExpressionNodeArchive* Arena::CreateMaybeMessage<::TST::EmptyExpressionNodeArchive>(Arena*);
template<> ::TST::ExpandCollapseStateArchive* Arena::CreateMaybeMessage<::TST::ExpandCollapseStateArchive>(Arena*);
template<> ::TST::ExpandedCellRange* Arena::CreateMaybeMessage<::TST::ExpandedCellRange>(Arena*);
template<> ::TST::ExpandedTableSize* Arena::CreateMaybeMessage<::TST::ExpandedTableSize>(Arena*);
template<> ::TST::ExpressionNodeArchive* Arena::CreateMaybeMessage<::TST::ExpressionNodeArchive>(Arena*);
template<> ::TST::FilterRuleArchive* Arena::CreateMaybeMessage<::TST::FilterRuleArchive>(Arena*);
template<> ::TST::FilterSetArchive* Arena::CreateMaybeMessage<::TST::FilterSetArchive>(Arena*);
template<> ::TST::FormulaArchive* Arena::CreateMaybeMessage<::TST::FormulaArchive>(Arena*);
template<> ::TST::FormulaEqualsTokenAttachmentArchive* Arena::CreateMaybeMessage<::TST::FormulaEqualsTokenAttachmentArchive>(Arena*);
template<> ::TST::FormulaPredicateArchive* Arena::CreateMaybeMessage<::TST::FormulaPredicateArchive>(Arena*);
template<> ::TST::FormulaSelectionArchive* Arena::CreateMaybeMessage<::TST::FormulaSelectionArchive>(Arena*);
template<> ::TST::FormulaStoreArchive* Arena::CreateMaybeMessage<::TST::FormulaStoreArchive>(Arena*);
template<> ::TST::FormulaStoreArchive_FormulaStorePair* Arena::CreateMaybeMessage<::TST::FormulaStoreArchive_FormulaStorePair>(Arena*);
template<> ::TST::FunctionEndNodeArchive* Arena::CreateMaybeMessage<::TST::FunctionEndNodeArchive>(Arena*);
template<> ::TST::FunctionNodeArchive* Arena::CreateMaybeMessage<::TST::FunctionNodeArchive>(Arena*);
template<> ::TST::GroupColumnArchive* Arena::CreateMaybeMessage<::TST::GroupColumnArchive>(Arena*);
template<> ::TST::GroupColumnListArchive* Arena::CreateMaybeMessage<::TST::GroupColumnListArchive>(Arena*);
template<> ::TST::HeaderNameMgrArchive* Arena::CreateMaybeMessage<::TST::HeaderNameMgrArchive>(Arena*);
template<> ::TST::HeaderNameMgrArchive_PerTableArchive* Arena::CreateMaybeMessage<::TST::HeaderNameMgrArchive_PerTableArchive>(Arena*);
template<> ::TST::HeaderNameMgrTileArchive* Arena::CreateMaybeMessage<::TST::HeaderNameMgrTileArchive>(Arena*);
template<> ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* Arena::CreateMaybeMessage<::TST::HeaderNameMgrTileArchive_NameFragmentArchive>(Arena*);
template<> ::TST::HeaderStorage* Arena::CreateMaybeMessage<::TST::HeaderStorage>(Arena*);
template<> ::TST::HeaderStorageBucket* Arena::CreateMaybeMessage<::TST::HeaderStorageBucket>(Arena*);
template<> ::TST::HeaderStorageBucket_Header* Arena::CreateMaybeMessage<::TST::HeaderStorageBucket_Header>(Arena*);
template<> ::TST::HiddenStateExtentArchive* Arena::CreateMaybeMessage<::TST::HiddenStateExtentArchive>(Arena*);
template<> ::TST::HiddenStateExtentArchive_RowOrColumnState* Arena::CreateMaybeMessage<::TST::HiddenStateExtentArchive_RowOrColumnState>(Arena*);
template<> ::TST::HiddenStateFormulaOwnerArchive* Arena::CreateMaybeMessage<::TST::HiddenStateFormulaOwnerArchive>(Arena*);
template<> ::TST::HiddenStatesArchive* Arena::CreateMaybeMessage<::TST::HiddenStatesArchive>(Arena*);
template<> ::TST::HiddenStatesOwnerArchive* Arena::CreateMaybeMessage<::TST::HiddenStatesOwnerArchive>(Arena*);
template<> ::TST::IdentifierNodeArchive* Arena::CreateMaybeMessage<::TST::IdentifierNodeArchive>(Arena*);
template<> ::TST::ImportWarningSetArchive* Arena::CreateMaybeMessage<::TST::ImportWarningSetArchive>(Arena*);
template<> ::TST::ImportWarningSetArchive_FormulaImportWarning* Arena::CreateMaybeMessage<::TST::ImportWarningSetArchive_FormulaImportWarning>(Arena*);
template<> ::TST::ImportWarningSetByCellRefArchive* Arena::CreateMaybeMessage<::TST::ImportWarningSetByCellRefArchive>(Arena*);
template<> ::TST::InNodeArchive* Arena::CreateMaybeMessage<::TST::InNodeArchive>(Arena*);
template<> ::TST::LayoutEngineArchive* Arena::CreateMaybeMessage<::TST::LayoutEngineArchive>(Arena*);
template<> ::TST::LayoutHintArchive* Arena::CreateMaybeMessage<::TST::LayoutHintArchive>(Arena*);
template<> ::TST::LetNodeArchive* Arena::CreateMaybeMessage<::TST::LetNodeArchive>(Arena*);
template<> ::TST::ListNodeArchive* Arena::CreateMaybeMessage<::TST::ListNodeArchive>(Arena*);
template<> ::TST::MergeOperationArchive* Arena::CreateMaybeMessage<::TST::MergeOperationArchive>(Arena*);
template<> ::TST::MergeOwnerArchive* Arena::CreateMaybeMessage<::TST::MergeOwnerArchive>(Arena*);
template<> ::TST::MergeRegionMapArchive* Arena::CreateMaybeMessage<::TST::MergeRegionMapArchive>(Arena*);
template<> ::TST::MultiTableRemapperArchive* Arena::CreateMaybeMessage<::TST::MultiTableRemapperArchive>(Arena*);
template<> ::TST::NumberNodeArchive* Arena::CreateMaybeMessage<::TST::NumberNodeArchive>(Arena*);
template<> ::TST::OperatorNodeArchive* Arena::CreateMaybeMessage<::TST::OperatorNodeArchive>(Arena*);
template<> ::TST::PencilAnnotationArchive* Arena::CreateMaybeMessage<::TST::PencilAnnotationArchive>(Arena*);
template<> ::TST::PencilAnnotationOwnerArchive* Arena::CreateMaybeMessage<::TST::PencilAnnotationOwnerArchive>(Arena*);
template<> ::TST::PopUpMenuModel* Arena::CreateMaybeMessage<::TST::PopUpMenuModel>(Arena*);
template<> ::TST::PopUpMenuModel_CellValue* Arena::CreateMaybeMessage<::TST::PopUpMenuModel_CellValue>(Arena*);
template<> ::TST::PostfixOperatorNodeArchive* Arena::CreateMaybeMessage<::TST::PostfixOperatorNodeArchive>(Arena*);
template<> ::TST::PrefixOperatorNodeArchive* Arena::CreateMaybeMessage<::TST::PrefixOperatorNodeArchive>(Arena*);
template<> ::TST::ReferenceNodeArchive* Arena::CreateMaybeMessage<::TST::ReferenceNodeArchive>(Arena*);
template<> ::TST::RichTextPayloadArchive* Arena::CreateMaybeMessage<::TST::RichTextPayloadArchive>(Arena*);
template<> ::TST::SelectionArchive* Arena::CreateMaybeMessage<::TST::SelectionArchive>(Arena*);
template<> ::TST::SortRuleReferenceTrackerArchive* Arena::CreateMaybeMessage<::TST::SortRuleReferenceTrackerArchive>(Arena*);
template<> ::TST::StockCellSelectionArchive* Arena::CreateMaybeMessage<::TST::StockCellSelectionArchive>(Arena*);
template<> ::TST::StringNodeArchive* Arena::CreateMaybeMessage<::TST::StringNodeArchive>(Arena*);
template<> ::TST::StrokeLayerArchive* Arena::CreateMaybeMessage<::TST::StrokeLayerArchive>(Arena*);
template<> ::TST::StrokeLayerArchive_StrokeRunArchive* Arena::CreateMaybeMessage<::TST::StrokeLayerArchive_StrokeRunArchive>(Arena*);
template<> ::TST::StrokeSelectionArchive* Arena::CreateMaybeMessage<::TST::StrokeSelectionArchive>(Arena*);
template<> ::TST::StrokeSidecarArchive* Arena::CreateMaybeMessage<::TST::StrokeSidecarArchive>(Arena*);
template<> ::TST::StructuredTextImportRecord* Arena::CreateMaybeMessage<::TST::StructuredTextImportRecord>(Arena*);
template<> ::TST::StyleTableMapArchive* Arena::CreateMaybeMessage<::TST::StyleTableMapArchive>(Arena*);
template<> ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* Arena::CreateMaybeMessage<::TST::StyleTableMapArchive_StyleTableMapEntryArchive>(Arena*);
template<> ::TST::SummaryCellVendorArchive* Arena::CreateMaybeMessage<::TST::SummaryCellVendorArchive>(Arena*);
template<> ::TST::SummaryCellVendorArchive_SummaryCellEntry* Arena::CreateMaybeMessage<::TST::SummaryCellVendorArchive_SummaryCellEntry>(Arena*);
template<> ::TST::SummaryModelArchive* Arena::CreateMaybeMessage<::TST::SummaryModelArchive>(Arena*);
template<> ::TST::SummaryModelGroupByChangeStateArchive* Arena::CreateMaybeMessage<::TST::SummaryModelGroupByChangeStateArchive>(Arena*);
template<> ::TST::TableDataList* Arena::CreateMaybeMessage<::TST::TableDataList>(Arena*);
template<> ::TST::TableDataListSegment* Arena::CreateMaybeMessage<::TST::TableDataListSegment>(Arena*);
template<> ::TST::TableDataList_ListEntry* Arena::CreateMaybeMessage<::TST::TableDataList_ListEntry>(Arena*);
template<> ::TST::TableInfoArchive* Arena::CreateMaybeMessage<::TST::TableInfoArchive>(Arena*);
template<> ::TST::TableModelArchive* Arena::CreateMaybeMessage<::TST::TableModelArchive>(Arena*);
template<> ::TST::TableNameSelectionArchive* Arena::CreateMaybeMessage<::TST::TableNameSelectionArchive>(Arena*);
template<> ::TST::TableRBTree* Arena::CreateMaybeMessage<::TST::TableRBTree>(Arena*);
template<> ::TST::TableRBTree_Node* Arena::CreateMaybeMessage<::TST::TableRBTree_Node>(Arena*);
template<> ::TST::TableSelection* Arena::CreateMaybeMessage<::TST::TableSelection>(Arena*);
template<> ::TST::TableSize* Arena::CreateMaybeMessage<::TST::TableSize>(Arena*);
template<> ::TST::TableSortOrderArchive* Arena::CreateMaybeMessage<::TST::TableSortOrderArchive>(Arena*);
template<> ::TST::TableSortOrderArchive_SortRuleArchive* Arena::CreateMaybeMessage<::TST::TableSortOrderArchive_SortRuleArchive>(Arena*);
template<> ::TST::TableSortOrderUIDArchive* Arena::CreateMaybeMessage<::TST::TableSortOrderUIDArchive>(Arena*);
template<> ::TST::TableSortOrderUIDArchive_SortRuleArchive* Arena::CreateMaybeMessage<::TST::TableSortOrderUIDArchive_SortRuleArchive>(Arena*);
template<> ::TST::TableStyleArchive* Arena::CreateMaybeMessage<::TST::TableStyleArchive>(Arena*);
template<> ::TST::TableStyleNetworkArchive* Arena::CreateMaybeMessage<::TST::TableStyleNetworkArchive>(Arena*);
template<> ::TST::Tile* Arena::CreateMaybeMessage<::TST::Tile>(Arena*);
template<> ::TST::TileRowInfo* Arena::CreateMaybeMessage<::TST::TileRowInfo>(Arena*);
template<> ::TST::TileStorage* Arena::CreateMaybeMessage<::TST::TileStorage>(Arena*);
template<> ::TST::TileStorage_Tile* Arena::CreateMaybeMessage<::TST::TileStorage_Tile>(Arena*);
template<> ::TST::TokenAttachmentArchive* Arena::CreateMaybeMessage<::TST::TokenAttachmentArchive>(Arena*);
template<> ::TST::VariableNodeArchive* Arena::CreateMaybeMessage<::TST::VariableNodeArchive>(Arena*);
template<> ::TST::WPTableInfoArchive* Arena::CreateMaybeMessage<::TST::WPTableInfoArchive>(Arena*);
template<> ::TST::WidthHeightCache* Arena::CreateMaybeMessage<::TST::WidthHeightCache>(Arena*);
template<> ::TST::WidthHeightCacheFittingEntry* Arena::CreateMaybeMessage<::TST::WidthHeightCacheFittingEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TST {

enum PopUpMenuModel_CellValueType : int {
  PopUpMenuModel_CellValueType_NIL_TYPE = 1,
  PopUpMenuModel_CellValueType_BOOLEAN_TYPE = 2,
  PopUpMenuModel_CellValueType_DATE_TYPE = 3,
  PopUpMenuModel_CellValueType_NUMBER_TYPE = 4,
  PopUpMenuModel_CellValueType_STRING_TYPE = 5
};
bool PopUpMenuModel_CellValueType_IsValid(int value);
constexpr PopUpMenuModel_CellValueType PopUpMenuModel_CellValueType_CellValueType_MIN = PopUpMenuModel_CellValueType_NIL_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel_CellValueType_CellValueType_MAX = PopUpMenuModel_CellValueType_STRING_TYPE;
constexpr int PopUpMenuModel_CellValueType_CellValueType_ARRAYSIZE = PopUpMenuModel_CellValueType_CellValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopUpMenuModel_CellValueType_descriptor();
template<typename T>
inline const std::string& PopUpMenuModel_CellValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PopUpMenuModel_CellValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PopUpMenuModel_CellValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PopUpMenuModel_CellValueType_descriptor(), enum_t_value);
}
inline bool PopUpMenuModel_CellValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PopUpMenuModel_CellValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PopUpMenuModel_CellValueType>(
    PopUpMenuModel_CellValueType_descriptor(), name, value);
}
enum ImportWarningSetArchive_FormulaWarningType : int {
  ImportWarningSetArchive_FormulaWarningType_THREE_D_REFERENCE = 1,
  ImportWarningSetArchive_FormulaWarningType_ARRAYED_FORMULA = 2,
  ImportWarningSetArchive_FormulaWarningType_DIFFERENT_BEHAVIOR_FOR_FUNCTION = 3,
  ImportWarningSetArchive_FormulaWarningType_ERROR_TOKEN = 4,
  ImportWarningSetArchive_FormulaWarningType_EXTERNAL_REFERENCE = 5,
  ImportWarningSetArchive_FormulaWarningType_NATURAL_LANGUAGE_FORMULA = 6,
  ImportWarningSetArchive_FormulaWarningType_REFERENCE_OUT_OF_BOUNDS = 7,
  ImportWarningSetArchive_FormulaWarningType_SHARED_FORMULA_BASE_NOT_FOUND = 8,
  ImportWarningSetArchive_FormulaWarningType_UNKNOWN_NAME = 9,
  ImportWarningSetArchive_FormulaWarningType_UNSUPPORTED_FORMULA = 10,
  ImportWarningSetArchive_FormulaWarningType_UNSUPPORTED_FUNCTION = 11,
  ImportWarningSetArchive_FormulaWarningType_UNSUPPORTED_NAME = 12,
  ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_NO_ISSUES = 13,
  ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_WITH_ISSUES = 14,
  ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_WITH_ISSUES_UNCHANGED = 15
};
bool ImportWarningSetArchive_FormulaWarningType_IsValid(int value);
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_MIN = ImportWarningSetArchive_FormulaWarningType_THREE_D_REFERENCE;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_MAX = ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_WITH_ISSUES_UNCHANGED;
constexpr int ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_ARRAYSIZE = ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportWarningSetArchive_FormulaWarningType_descriptor();
template<typename T>
inline const std::string& ImportWarningSetArchive_FormulaWarningType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImportWarningSetArchive_FormulaWarningType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImportWarningSetArchive_FormulaWarningType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImportWarningSetArchive_FormulaWarningType_descriptor(), enum_t_value);
}
inline bool ImportWarningSetArchive_FormulaWarningType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImportWarningSetArchive_FormulaWarningType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImportWarningSetArchive_FormulaWarningType>(
    ImportWarningSetArchive_FormulaWarningType_descriptor(), name, value);
}
enum TableDataList_ListType : int {
  TableDataList_ListType_STRING = 1,
  TableDataList_ListType_FORMAT = 2,
  TableDataList_ListType_FORMULA = 3,
  TableDataList_ListType_STYLE = 4,
  TableDataList_ListType_FORMULA_ERROR = 5,
  TableDataList_ListType_CUSTOM_FORMAT = 6,
  TableDataList_ListType_MULTIPLE_CHOICE_LIST_FORMAT = 7,
  TableDataList_ListType_RICH_TEXT_PAYLOAD = 8,
  TableDataList_ListType_CONDITIONAL_STYLE = 9,
  TableDataList_ListType_COMMENT_STORAGE = 10,
  TableDataList_ListType_IMPORT_WARNING = 11,
  TableDataList_ListType_CONTROL_CELL_SPEC = 12
};
bool TableDataList_ListType_IsValid(int value);
constexpr TableDataList_ListType TableDataList_ListType_ListType_MIN = TableDataList_ListType_STRING;
constexpr TableDataList_ListType TableDataList_ListType_ListType_MAX = TableDataList_ListType_CONTROL_CELL_SPEC;
constexpr int TableDataList_ListType_ListType_ARRAYSIZE = TableDataList_ListType_ListType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableDataList_ListType_descriptor();
template<typename T>
inline const std::string& TableDataList_ListType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableDataList_ListType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableDataList_ListType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableDataList_ListType_descriptor(), enum_t_value);
}
inline bool TableDataList_ListType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableDataList_ListType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableDataList_ListType>(
    TableDataList_ListType_descriptor(), name, value);
}
enum TableSortOrderArchive_SortRuleArchive_Direction : int {
  TableSortOrderArchive_SortRuleArchive_Direction_ascending = 0,
  TableSortOrderArchive_SortRuleArchive_Direction_descending = 1
};
bool TableSortOrderArchive_SortRuleArchive_Direction_IsValid(int value);
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive_Direction_Direction_MIN = TableSortOrderArchive_SortRuleArchive_Direction_ascending;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive_Direction_Direction_MAX = TableSortOrderArchive_SortRuleArchive_Direction_descending;
constexpr int TableSortOrderArchive_SortRuleArchive_Direction_Direction_ARRAYSIZE = TableSortOrderArchive_SortRuleArchive_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderArchive_SortRuleArchive_Direction_descriptor();
template<typename T>
inline const std::string& TableSortOrderArchive_SortRuleArchive_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableSortOrderArchive_SortRuleArchive_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableSortOrderArchive_SortRuleArchive_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableSortOrderArchive_SortRuleArchive_Direction_descriptor(), enum_t_value);
}
inline bool TableSortOrderArchive_SortRuleArchive_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableSortOrderArchive_SortRuleArchive_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableSortOrderArchive_SortRuleArchive_Direction>(
    TableSortOrderArchive_SortRuleArchive_Direction_descriptor(), name, value);
}
enum TableSortOrderArchive_SortType : int {
  TableSortOrderArchive_SortType_entire_table = 0,
  TableSortOrderArchive_SortType_row_range = 1
};
bool TableSortOrderArchive_SortType_IsValid(int value);
constexpr TableSortOrderArchive_SortType TableSortOrderArchive_SortType_SortType_MIN = TableSortOrderArchive_SortType_entire_table;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive_SortType_SortType_MAX = TableSortOrderArchive_SortType_row_range;
constexpr int TableSortOrderArchive_SortType_SortType_ARRAYSIZE = TableSortOrderArchive_SortType_SortType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderArchive_SortType_descriptor();
template<typename T>
inline const std::string& TableSortOrderArchive_SortType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableSortOrderArchive_SortType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableSortOrderArchive_SortType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableSortOrderArchive_SortType_descriptor(), enum_t_value);
}
inline bool TableSortOrderArchive_SortType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableSortOrderArchive_SortType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableSortOrderArchive_SortType>(
    TableSortOrderArchive_SortType_descriptor(), name, value);
}
enum TableSortOrderUIDArchive_SortRuleArchive_Direction : int {
  TableSortOrderUIDArchive_SortRuleArchive_Direction_ascending = 0,
  TableSortOrderUIDArchive_SortRuleArchive_Direction_descending = 1
};
bool TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(int value);
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_MIN = TableSortOrderUIDArchive_SortRuleArchive_Direction_ascending;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_MAX = TableSortOrderUIDArchive_SortRuleArchive_Direction_descending;
constexpr int TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_ARRAYSIZE = TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor();
template<typename T>
inline const std::string& TableSortOrderUIDArchive_SortRuleArchive_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableSortOrderUIDArchive_SortRuleArchive_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableSortOrderUIDArchive_SortRuleArchive_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor(), enum_t_value);
}
inline bool TableSortOrderUIDArchive_SortRuleArchive_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableSortOrderUIDArchive_SortRuleArchive_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableSortOrderUIDArchive_SortRuleArchive_Direction>(
    TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor(), name, value);
}
enum TableSortOrderUIDArchive_SortType : int {
  TableSortOrderUIDArchive_SortType_entire_table = 0,
  TableSortOrderUIDArchive_SortType_row_range = 1
};
bool TableSortOrderUIDArchive_SortType_IsValid(int value);
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive_SortType_SortType_MIN = TableSortOrderUIDArchive_SortType_entire_table;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive_SortType_SortType_MAX = TableSortOrderUIDArchive_SortType_row_range;
constexpr int TableSortOrderUIDArchive_SortType_SortType_ARRAYSIZE = TableSortOrderUIDArchive_SortType_SortType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderUIDArchive_SortType_descriptor();
template<typename T>
inline const std::string& TableSortOrderUIDArchive_SortType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableSortOrderUIDArchive_SortType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableSortOrderUIDArchive_SortType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableSortOrderUIDArchive_SortType_descriptor(), enum_t_value);
}
inline bool TableSortOrderUIDArchive_SortType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableSortOrderUIDArchive_SortType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableSortOrderUIDArchive_SortType>(
    TableSortOrderUIDArchive_SortType_descriptor(), name, value);
}
enum FormulaPredicateArchive_FormulaPredicateType : int {
  FormulaPredicateArchive_FormulaPredicateType_PredNone = 0,
  FormulaPredicateArchive_FormulaPredicateType_TextStartsWith = 1,
  FormulaPredicateArchive_FormulaPredicateType_TextEndsWith = 2,
  FormulaPredicateArchive_FormulaPredicateType_TextContains = 3,
  FormulaPredicateArchive_FormulaPredicateType_TextDoesNotContain = 4,
  FormulaPredicateArchive_FormulaPredicateType_ValueEqual = 5,
  FormulaPredicateArchive_FormulaPredicateType_ValueNotEqual = 6,
  FormulaPredicateArchive_FormulaPredicateType_ValueGreaterThan = 7,
  FormulaPredicateArchive_FormulaPredicateType_ValueGreaterThanOrEqual = 8,
  FormulaPredicateArchive_FormulaPredicateType_ValueLessThan = 9,
  FormulaPredicateArchive_FormulaPredicateType_ValueLessThanOrEqual = 10,
  FormulaPredicateArchive_FormulaPredicateType_ValueAboveAverage = 11,
  FormulaPredicateArchive_FormulaPredicateType_ValueBelowAverage = 12,
  FormulaPredicateArchive_FormulaPredicateType_ValueBetween = 13,
  FormulaPredicateArchive_FormulaPredicateType_Formula = 14,
  FormulaPredicateArchive_FormulaPredicateType_Duplicates = 15,
  FormulaPredicateArchive_FormulaPredicateType_Uniques = 16,
  FormulaPredicateArchive_FormulaPredicateType_DateIsToday = 17,
  FormulaPredicateArchive_FormulaPredicateType_DateIsYesterday = 18,
  FormulaPredicateArchive_FormulaPredicateType_DateIsTomorrow = 19,
  FormulaPredicateArchive_FormulaPredicateType_DateIsTheDate = 20,
  FormulaPredicateArchive_FormulaPredicateType_DateBeforeTheDate = 21,
  FormulaPredicateArchive_FormulaPredicateType_DateAfterTheDate = 22,
  FormulaPredicateArchive_FormulaPredicateType_DateIsInTheRange = 23,
  FormulaPredicateArchive_FormulaPredicateType_DateInTheNext = 24,
  FormulaPredicateArchive_FormulaPredicateType_DateInTheLast = 25,
  FormulaPredicateArchive_FormulaPredicateType_DateIsExactly = 26,
  FormulaPredicateArchive_FormulaPredicateType_DateBeforeRelative = 27,
  FormulaPredicateArchive_FormulaPredicateType_DateAfterRelative = 28,
  FormulaPredicateArchive_FormulaPredicateType_DateBetweenRelative = 29,
  FormulaPredicateArchive_FormulaPredicateType_ValueTop = 30,
  FormulaPredicateArchive_FormulaPredicateType_ValueBottom = 31,
  FormulaPredicateArchive_FormulaPredicateType_ValueNotBetween = 32,
  FormulaPredicateArchive_FormulaPredicateType_DateInThis = 33,
  FormulaPredicateArchive_FormulaPredicateType_IsBlank = 34,
  FormulaPredicateArchive_FormulaPredicateType_IsNotBlank = 35,
  FormulaPredicateArchive_FormulaPredicateType_TextIs = 36,
  FormulaPredicateArchive_FormulaPredicateType_TextIsNot = 37,
  FormulaPredicateArchive_FormulaPredicateType_DurationEqual = 38,
  FormulaPredicateArchive_FormulaPredicateType_DurationNotEqual = 39,
  FormulaPredicateArchive_FormulaPredicateType_DurationGreaterThan = 40,
  FormulaPredicateArchive_FormulaPredicateType_DurationGreaterThanOrEqual = 41,
  FormulaPredicateArchive_FormulaPredicateType_DurationLessThan = 42,
  FormulaPredicateArchive_FormulaPredicateType_DurationLessThanOrEqual = 43,
  FormulaPredicateArchive_FormulaPredicateType_DurationBetween = 44,
  FormulaPredicateArchive_FormulaPredicateType_DurationNotBetween = 45,
  FormulaPredicateArchive_FormulaPredicateType_DurationAboveAverage = 46,
  FormulaPredicateArchive_FormulaPredicateType_DurationBelowAverage = 47,
  FormulaPredicateArchive_FormulaPredicateType_DurationTop = 48,
  FormulaPredicateArchive_FormulaPredicateType_DurationBottom = 49
};
bool FormulaPredicateArchive_FormulaPredicateType_IsValid(int value);
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_MIN = FormulaPredicateArchive_FormulaPredicateType_PredNone;
constexpr FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_MAX = FormulaPredicateArchive_FormulaPredicateType_DurationBottom;
constexpr int FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_ARRAYSIZE = FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaPredicateArchive_FormulaPredicateType_descriptor();
template<typename T>
inline const std::string& FormulaPredicateArchive_FormulaPredicateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FormulaPredicateArchive_FormulaPredicateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FormulaPredicateArchive_FormulaPredicateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FormulaPredicateArchive_FormulaPredicateType_descriptor(), enum_t_value);
}
inline bool FormulaPredicateArchive_FormulaPredicateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FormulaPredicateArchive_FormulaPredicateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FormulaPredicateArchive_FormulaPredicateType>(
    FormulaPredicateArchive_FormulaPredicateType_descriptor(), name, value);
}
enum FormulaPredicateArchive_QualifierType : int {
  FormulaPredicateArchive_QualifierType_QualNone = 0,
  FormulaPredicateArchive_QualifierType_Days = 2,
  FormulaPredicateArchive_QualifierType_Weeks = 3,
  FormulaPredicateArchive_QualifierType_Months = 4,
  FormulaPredicateArchive_QualifierType_Years = 5,
  FormulaPredicateArchive_QualifierType_Ago = 6,
  FormulaPredicateArchive_QualifierType_FromNow = 7,
  FormulaPredicateArchive_QualifierType_Quarters = 8,
  FormulaPredicateArchive_QualifierType_Percent = 9,
  FormulaPredicateArchive_QualifierType_Values = 10
};
bool FormulaPredicateArchive_QualifierType_IsValid(int value);
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive_QualifierType_QualifierType_MIN = FormulaPredicateArchive_QualifierType_QualNone;
constexpr FormulaPredicateArchive_QualifierType FormulaPredicateArchive_QualifierType_QualifierType_MAX = FormulaPredicateArchive_QualifierType_Values;
constexpr int FormulaPredicateArchive_QualifierType_QualifierType_ARRAYSIZE = FormulaPredicateArchive_QualifierType_QualifierType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaPredicateArchive_QualifierType_descriptor();
template<typename T>
inline const std::string& FormulaPredicateArchive_QualifierType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FormulaPredicateArchive_QualifierType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FormulaPredicateArchive_QualifierType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FormulaPredicateArchive_QualifierType_descriptor(), enum_t_value);
}
inline bool FormulaPredicateArchive_QualifierType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FormulaPredicateArchive_QualifierType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FormulaPredicateArchive_QualifierType>(
    FormulaPredicateArchive_QualifierType_descriptor(), name, value);
}
enum FilterSetArchive_FilterSetType : int {
  FilterSetArchive_FilterSetType_FilterSetArchiveTypeAll = 0,
  FilterSetArchive_FilterSetType_FilterSetArchiveTypeAny = 1
};
bool FilterSetArchive_FilterSetType_IsValid(int value);
constexpr FilterSetArchive_FilterSetType FilterSetArchive_FilterSetType_FilterSetType_MIN = FilterSetArchive_FilterSetType_FilterSetArchiveTypeAll;
constexpr FilterSetArchive_FilterSetType FilterSetArchive_FilterSetType_FilterSetType_MAX = FilterSetArchive_FilterSetType_FilterSetArchiveTypeAny;
constexpr int FilterSetArchive_FilterSetType_FilterSetType_ARRAYSIZE = FilterSetArchive_FilterSetType_FilterSetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterSetArchive_FilterSetType_descriptor();
template<typename T>
inline const std::string& FilterSetArchive_FilterSetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterSetArchive_FilterSetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterSetArchive_FilterSetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FilterSetArchive_FilterSetType_descriptor(), enum_t_value);
}
inline bool FilterSetArchive_FilterSetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilterSetArchive_FilterSetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FilterSetArchive_FilterSetType>(
    FilterSetArchive_FilterSetType_descriptor(), name, value);
}
enum HiddenStateExtentArchive_RowOrColumnDirection : int {
  HiddenStateExtentArchive_RowOrColumnDirection_ColumnDirection = 0,
  HiddenStateExtentArchive_RowOrColumnDirection_RowDirection = 1
};
bool HiddenStateExtentArchive_RowOrColumnDirection_IsValid(int value);
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_MIN = HiddenStateExtentArchive_RowOrColumnDirection_ColumnDirection;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_MAX = HiddenStateExtentArchive_RowOrColumnDirection_RowDirection;
constexpr int HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_ARRAYSIZE = HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiddenStateExtentArchive_RowOrColumnDirection_descriptor();
template<typename T>
inline const std::string& HiddenStateExtentArchive_RowOrColumnDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HiddenStateExtentArchive_RowOrColumnDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HiddenStateExtentArchive_RowOrColumnDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HiddenStateExtentArchive_RowOrColumnDirection_descriptor(), enum_t_value);
}
inline bool HiddenStateExtentArchive_RowOrColumnDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HiddenStateExtentArchive_RowOrColumnDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HiddenStateExtentArchive_RowOrColumnDirection>(
    HiddenStateExtentArchive_RowOrColumnDirection_descriptor(), name, value);
}
enum MultiTableRemapperArchive_Purpose : int {
  MultiTableRemapperArchive_Purpose_DEFAULT = 0,
  MultiTableRemapperArchive_Purpose_GROUPING = 1,
  MultiTableRemapperArchive_Purpose_PAGES_SECTION_DUPLICATION_NONCOLLAB = 2
};
bool MultiTableRemapperArchive_Purpose_IsValid(int value);
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive_Purpose_Purpose_MIN = MultiTableRemapperArchive_Purpose_DEFAULT;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive_Purpose_Purpose_MAX = MultiTableRemapperArchive_Purpose_PAGES_SECTION_DUPLICATION_NONCOLLAB;
constexpr int MultiTableRemapperArchive_Purpose_Purpose_ARRAYSIZE = MultiTableRemapperArchive_Purpose_Purpose_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiTableRemapperArchive_Purpose_descriptor();
template<typename T>
inline const std::string& MultiTableRemapperArchive_Purpose_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MultiTableRemapperArchive_Purpose>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MultiTableRemapperArchive_Purpose_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MultiTableRemapperArchive_Purpose_descriptor(), enum_t_value);
}
inline bool MultiTableRemapperArchive_Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MultiTableRemapperArchive_Purpose* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MultiTableRemapperArchive_Purpose>(
    MultiTableRemapperArchive_Purpose_descriptor(), name, value);
}
enum CellType : int {
  genericCellType = 0,
  spanCellType = 1,
  numberCellType = 2,
  textCellType = 3,
  formulaCellType = 4,
  dateCellType = 5,
  boolCellType = 6,
  durationCellType = 7,
  formulaErrorCellType = 8,
  automaticCellType = 9
};
bool CellType_IsValid(int value);
constexpr CellType CellType_MIN = genericCellType;
constexpr CellType CellType_MAX = automaticCellType;
constexpr int CellType_ARRAYSIZE = CellType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor();
template<typename T>
inline const std::string& CellType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellType_descriptor(), enum_t_value);
}
inline bool CellType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellType>(
    CellType_descriptor(), name, value);
}
enum CellValueType : int {
  emptyCellValueType = 0,
  numberCellValueType = 1,
  stringCellValueType = 2,
  providedCellValueType = 3,
  dateCellValueType = 4,
  boolCellValueType = 5,
  durationCellValueType = 6,
  errorCellValueType = 7,
  richTextCellType = 8,
  currencyCellValueType = 9
};
bool CellValueType_IsValid(int value);
constexpr CellValueType CellValueType_MIN = emptyCellValueType;
constexpr CellValueType CellValueType_MAX = currencyCellValueType;
constexpr int CellValueType_ARRAYSIZE = CellValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueType_descriptor();
template<typename T>
inline const std::string& CellValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellValueType_descriptor(), enum_t_value);
}
inline bool CellValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellValueType>(
    CellValueType_descriptor(), name, value);
}
enum TableDimensionArchive : int {
  dimensionRow = 0,
  dimensionColumn = 1
};
bool TableDimensionArchive_IsValid(int value);
constexpr TableDimensionArchive TableDimensionArchive_MIN = dimensionRow;
constexpr TableDimensionArchive TableDimensionArchive_MAX = dimensionColumn;
constexpr int TableDimensionArchive_ARRAYSIZE = TableDimensionArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableDimensionArchive_descriptor();
template<typename T>
inline const std::string& TableDimensionArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableDimensionArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableDimensionArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableDimensionArchive_descriptor(), enum_t_value);
}
inline bool TableDimensionArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TableDimensionArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableDimensionArchive>(
    TableDimensionArchive_descriptor(), name, value);
}
enum SelectionTypeArchive : int {
  deprecatedCellSelectionType = 0,
  rowSelectionType = 1,
  columnSelectionType = 2,
  deprecatedCellEditingSelectionType = 3,
  deprecatedTableNameSelectionType = 4,
  deprecatedTableSelectionType = 5,
  regionSelectionType = 6,
  noSelectionType = 7
};
bool SelectionTypeArchive_IsValid(int value);
constexpr SelectionTypeArchive SelectionTypeArchive_MIN = deprecatedCellSelectionType;
constexpr SelectionTypeArchive SelectionTypeArchive_MAX = noSelectionType;
constexpr int SelectionTypeArchive_ARRAYSIZE = SelectionTypeArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionTypeArchive_descriptor();
template<typename T>
inline const std::string& SelectionTypeArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelectionTypeArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelectionTypeArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelectionTypeArchive_descriptor(), enum_t_value);
}
inline bool SelectionTypeArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SelectionTypeArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelectionTypeArchive>(
    SelectionTypeArchive_descriptor(), name, value);
}
enum FillDirectionArchive : int {
  kTSTFillDownArchive = 1,
  kTSTFillUpArchive = 2,
  kTSTFillRightArchive = 3,
  kTSTFillLeftArchive = 4
};
bool FillDirectionArchive_IsValid(int value);
constexpr FillDirectionArchive FillDirectionArchive_MIN = kTSTFillDownArchive;
constexpr FillDirectionArchive FillDirectionArchive_MAX = kTSTFillLeftArchive;
constexpr int FillDirectionArchive_ARRAYSIZE = FillDirectionArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillDirectionArchive_descriptor();
template<typename T>
inline const std::string& FillDirectionArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FillDirectionArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FillDirectionArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FillDirectionArchive_descriptor(), enum_t_value);
}
inline bool FillDirectionArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FillDirectionArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FillDirectionArchive>(
    FillDirectionArchive_descriptor(), name, value);
}
enum MergeActionArchive : int {
  mergeActionInsert = 1,
  mergeActionRemove = 2,
  mergeActionShrink = 3,
  mergeActionGrow = 4
};
bool MergeActionArchive_IsValid(int value);
constexpr MergeActionArchive MergeActionArchive_MIN = mergeActionInsert;
constexpr MergeActionArchive MergeActionArchive_MAX = mergeActionGrow;
constexpr int MergeActionArchive_ARRAYSIZE = MergeActionArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeActionArchive_descriptor();
template<typename T>
inline const std::string& MergeActionArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MergeActionArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MergeActionArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MergeActionArchive_descriptor(), enum_t_value);
}
inline bool MergeActionArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MergeActionArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MergeActionArchive>(
    MergeActionArchive_descriptor(), name, value);
}
enum HideShowActionArchive : int {
  hideShowActionHide = 0,
  hideShowActionShow = 1
};
bool HideShowActionArchive_IsValid(int value);
constexpr HideShowActionArchive HideShowActionArchive_MIN = hideShowActionHide;
constexpr HideShowActionArchive HideShowActionArchive_MAX = hideShowActionShow;
constexpr int HideShowActionArchive_ARRAYSIZE = HideShowActionArchive_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HideShowActionArchive_descriptor();
template<typename T>
inline const std::string& HideShowActionArchive_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HideShowActionArchive>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HideShowActionArchive_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HideShowActionArchive_descriptor(), enum_t_value);
}
inline bool HideShowActionArchive_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HideShowActionArchive* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HideShowActionArchive>(
    HideShowActionArchive_descriptor(), name, value);
}
enum GroupingType : int {
  UNIQUE = 0,
  YEAR = 1,
  MONTH = 2,
  DAYOFWEEK = 3,
  DAY = 4,
  YEARWEEK = 5,
  YEARQUARTER = 6,
  ROUND_0 = 10
};
bool GroupingType_IsValid(int value);
constexpr GroupingType GroupingType_MIN = UNIQUE;
constexpr GroupingType GroupingType_MAX = ROUND_0;
constexpr int GroupingType_ARRAYSIZE = GroupingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupingType_descriptor();
template<typename T>
inline const std::string& GroupingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupingType_descriptor(), enum_t_value);
}
inline bool GroupingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupingType>(
    GroupingType_descriptor(), name, value);
}
enum AggregateType : int {
  NONE = 0,
  COUNT = 1,
  TOTAL = 2,
  AVERAGE = 3,
  MIN = 4,
  MAX = 5,
  GROUPVALUE = 9,
  BODYROWS = 10,
  INDIRECT = 11
};
bool AggregateType_IsValid(int value);
constexpr AggregateType AggregateType_MIN = NONE;
constexpr AggregateType AggregateType_MAX = INDIRECT;
constexpr int AggregateType_ARRAYSIZE = AggregateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregateType_descriptor();
template<typename T>
inline const std::string& AggregateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggregateType_descriptor(), enum_t_value);
}
inline bool AggregateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AggregateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregateType>(
    AggregateType_descriptor(), name, value);
}
// ===================================================================

class CellID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellID) */ {
 public:
  inline CellID() : CellID(nullptr) {}
  ~CellID() override;
  explicit constexpr CellID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellID(const CellID& from);
  CellID(CellID&& from) noexcept
    : CellID() {
    *this = ::std::move(from);
  }

  inline CellID& operator=(const CellID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellID& operator=(CellID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellID* internal_default_instance() {
    return reinterpret_cast<const CellID*>(
               &_CellID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CellID& a, CellID& b) {
    a.Swap(&b);
  }
  inline void Swap(CellID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellID* New() const final {
    return CreateMaybeMessage<CellID>(nullptr);
  }

  CellID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellID& from);
  void MergeFrom(const CellID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellID";
  }
  protected:
  explicit CellID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpandedCoordFieldNumber = 2,
    kPackedDataFieldNumber = 1,
  };
  // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
  bool has_expanded_coord() const;
  private:
  bool _internal_has_expanded_coord() const;
  public:
  void clear_expanded_coord();
  const ::TSCE::CellCoordinateArchive& expanded_coord() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_expanded_coord();
  ::TSCE::CellCoordinateArchive* mutable_expanded_coord();
  void set_allocated_expanded_coord(::TSCE::CellCoordinateArchive* expanded_coord);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_expanded_coord() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_expanded_coord();
  public:
  void unsafe_arena_set_allocated_expanded_coord(
      ::TSCE::CellCoordinateArchive* expanded_coord);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_expanded_coord();

  // required fixed32 packedData = 1;
  bool has_packeddata() const;
  private:
  bool _internal_has_packeddata() const;
  public:
  void clear_packeddata();
  ::PROTOBUF_NAMESPACE_ID::uint32 packeddata() const;
  void set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packeddata() const;
  void _internal_set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordinateArchive* expanded_coord_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packeddata_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellUIDLookupListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellUIDLookupListArchive) */ {
 public:
  inline CellUIDLookupListArchive() : CellUIDLookupListArchive(nullptr) {}
  ~CellUIDLookupListArchive() override;
  explicit constexpr CellUIDLookupListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellUIDLookupListArchive(const CellUIDLookupListArchive& from);
  CellUIDLookupListArchive(CellUIDLookupListArchive&& from) noexcept
    : CellUIDLookupListArchive() {
    *this = ::std::move(from);
  }

  inline CellUIDLookupListArchive& operator=(const CellUIDLookupListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellUIDLookupListArchive& operator=(CellUIDLookupListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellUIDLookupListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellUIDLookupListArchive* internal_default_instance() {
    return reinterpret_cast<const CellUIDLookupListArchive*>(
               &_CellUIDLookupListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CellUIDLookupListArchive& a, CellUIDLookupListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellUIDLookupListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellUIDLookupListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellUIDLookupListArchive* New() const final {
    return CreateMaybeMessage<CellUIDLookupListArchive>(nullptr);
  }

  CellUIDLookupListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellUIDLookupListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellUIDLookupListArchive& from);
  void MergeFrom(const CellUIDLookupListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellUIDLookupListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellUIDLookupListArchive";
  }
  protected:
  explicit CellUIDLookupListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnIndexesFieldNumber = 3,
    kRowIndexesFieldNumber = 4,
    kColumnUidsFieldNumber = 1,
    kRowUidsFieldNumber = 2,
  };
  // repeated int32 column_indexes = 3;
  int column_indexes_size() const;
  private:
  int _internal_column_indexes_size() const;
  public:
  void clear_column_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_column_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_column_indexes() const;
  void _internal_add_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_column_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 column_indexes(int index) const;
  void set_column_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      column_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_column_indexes();

  // repeated int32 row_indexes = 4;
  int row_indexes_size() const;
  private:
  int _internal_row_indexes_size() const;
  public:
  void clear_row_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_row_indexes() const;
  void _internal_add_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_row_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 row_indexes(int index) const;
  void set_row_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      row_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_row_indexes();

  // optional .TSCE.UidLookupListArchive column_uids = 1;
  bool has_column_uids() const;
  private:
  bool _internal_has_column_uids() const;
  public:
  void clear_column_uids();
  const ::TSCE::UidLookupListArchive& column_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::UidLookupListArchive* release_column_uids();
  ::TSCE::UidLookupListArchive* mutable_column_uids();
  void set_allocated_column_uids(::TSCE::UidLookupListArchive* column_uids);
  private:
  const ::TSCE::UidLookupListArchive& _internal_column_uids() const;
  ::TSCE::UidLookupListArchive* _internal_mutable_column_uids();
  public:
  void unsafe_arena_set_allocated_column_uids(
      ::TSCE::UidLookupListArchive* column_uids);
  ::TSCE::UidLookupListArchive* unsafe_arena_release_column_uids();

  // optional .TSCE.UidLookupListArchive row_uids = 2;
  bool has_row_uids() const;
  private:
  bool _internal_has_row_uids() const;
  public:
  void clear_row_uids();
  const ::TSCE::UidLookupListArchive& row_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::UidLookupListArchive* release_row_uids();
  ::TSCE::UidLookupListArchive* mutable_row_uids();
  void set_allocated_row_uids(::TSCE::UidLookupListArchive* row_uids);
  private:
  const ::TSCE::UidLookupListArchive& _internal_row_uids() const;
  ::TSCE::UidLookupListArchive* _internal_mutable_row_uids();
  public:
  void unsafe_arena_set_allocated_row_uids(
      ::TSCE::UidLookupListArchive* row_uids);
  ::TSCE::UidLookupListArchive* unsafe_arena_release_row_uids();

  // @@protoc_insertion_point(class_scope:TST.CellUIDLookupListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > column_indexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > row_indexes_;
  ::TSCE::UidLookupListArchive* column_uids_;
  ::TSCE::UidLookupListArchive* row_uids_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellUIDListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellUIDListArchive) */ {
 public:
  inline CellUIDListArchive() : CellUIDListArchive(nullptr) {}
  ~CellUIDListArchive() override;
  explicit constexpr CellUIDListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellUIDListArchive(const CellUIDListArchive& from);
  CellUIDListArchive(CellUIDListArchive&& from) noexcept
    : CellUIDListArchive() {
    *this = ::std::move(from);
  }

  inline CellUIDListArchive& operator=(const CellUIDListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellUIDListArchive& operator=(CellUIDListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellUIDListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellUIDListArchive* internal_default_instance() {
    return reinterpret_cast<const CellUIDListArchive*>(
               &_CellUIDListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CellUIDListArchive& a, CellUIDListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellUIDListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellUIDListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellUIDListArchive* New() const final {
    return CreateMaybeMessage<CellUIDListArchive>(nullptr);
  }

  CellUIDListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellUIDListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellUIDListArchive& from);
  void MergeFrom(const CellUIDListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellUIDListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellUIDListArchive";
  }
  protected:
  explicit CellUIDListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowUidsFieldNumber = 1,
    kColumnUidsFieldNumber = 2,
    kCompressedRowIndexesFieldNumber = 3,
    kCompressedColumnIndexesFieldNumber = 4,
    kUncompressedLookupListFieldNumber = 5,
  };
  // repeated .TSP.UUID row_uids = 1;
  int row_uids_size() const;
  private:
  int _internal_row_uids_size() const;
  public:
  void clear_row_uids();
  ::TSP::UUID* mutable_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_uids();
  private:
  const ::TSP::UUID& _internal_row_uids(int index) const;
  ::TSP::UUID* _internal_add_row_uids();
  public:
  const ::TSP::UUID& row_uids(int index) const;
  ::TSP::UUID* add_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_uids() const;

  // repeated .TSP.UUID column_uids = 2;
  int column_uids_size() const;
  private:
  int _internal_column_uids_size() const;
  public:
  void clear_column_uids();
  ::TSP::UUID* mutable_column_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_column_uids();
  private:
  const ::TSP::UUID& _internal_column_uids(int index) const;
  ::TSP::UUID* _internal_add_column_uids();
  public:
  const ::TSP::UUID& column_uids(int index) const;
  ::TSP::UUID* add_column_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      column_uids() const;

  // repeated int32 compressed_row_indexes = 3;
  int compressed_row_indexes_size() const;
  private:
  int _internal_compressed_row_indexes_size() const;
  public:
  void clear_compressed_row_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compressed_row_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_compressed_row_indexes() const;
  void _internal_add_compressed_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_compressed_row_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 compressed_row_indexes(int index) const;
  void set_compressed_row_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_compressed_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      compressed_row_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_compressed_row_indexes();

  // repeated int32 compressed_column_indexes = 4;
  int compressed_column_indexes_size() const;
  private:
  int _internal_compressed_column_indexes_size() const;
  public:
  void clear_compressed_column_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compressed_column_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_compressed_column_indexes() const;
  void _internal_add_compressed_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_compressed_column_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 compressed_column_indexes(int index) const;
  void set_compressed_column_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_compressed_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      compressed_column_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_compressed_column_indexes();

  // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
  bool has_uncompressed_lookup_list() const;
  private:
  bool _internal_has_uncompressed_lookup_list() const;
  public:
  void clear_uncompressed_lookup_list();
  const ::TST::CellUIDLookupListArchive& uncompressed_lookup_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDLookupListArchive* release_uncompressed_lookup_list();
  ::TST::CellUIDLookupListArchive* mutable_uncompressed_lookup_list();
  void set_allocated_uncompressed_lookup_list(::TST::CellUIDLookupListArchive* uncompressed_lookup_list);
  private:
  const ::TST::CellUIDLookupListArchive& _internal_uncompressed_lookup_list() const;
  ::TST::CellUIDLookupListArchive* _internal_mutable_uncompressed_lookup_list();
  public:
  void unsafe_arena_set_allocated_uncompressed_lookup_list(
      ::TST::CellUIDLookupListArchive* uncompressed_lookup_list);
  ::TST::CellUIDLookupListArchive* unsafe_arena_release_uncompressed_lookup_list();

  // @@protoc_insertion_point(class_scope:TST.CellUIDListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > column_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > compressed_row_indexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > compressed_column_indexes_;
  ::TST::CellUIDLookupListArchive* uncompressed_lookup_list_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSize) */ {
 public:
  inline TableSize() : TableSize(nullptr) {}
  ~TableSize() override;
  explicit constexpr TableSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSize(const TableSize& from);
  TableSize(TableSize&& from) noexcept
    : TableSize() {
    *this = ::std::move(from);
  }

  inline TableSize& operator=(const TableSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSize& operator=(TableSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSize* internal_default_instance() {
    return reinterpret_cast<const TableSize*>(
               &_TableSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TableSize& a, TableSize& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSize* New() const final {
    return CreateMaybeMessage<TableSize>(nullptr);
  }

  TableSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSize& from);
  void MergeFrom(const TableSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSize";
  }
  protected:
  explicit TableSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedDataFieldNumber = 1,
    kNumColumnsFieldNumber = 2,
    kNumRowsFieldNumber = 3,
  };
  // required fixed32 packedData = 1;
  bool has_packeddata() const;
  private:
  bool _internal_has_packeddata() const;
  public:
  void clear_packeddata();
  ::PROTOBUF_NAMESPACE_ID::uint32 packeddata() const;
  void set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packeddata() const;
  void _internal_set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_columns = 2;
  bool has_num_columns() const;
  private:
  bool _internal_has_num_columns() const;
  public:
  void clear_num_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_columns() const;
  void set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_columns() const;
  void _internal_set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_rows = 3;
  bool has_num_rows() const;
  private:
  bool _internal_has_num_rows() const;
  public:
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packeddata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandedTableSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ExpandedTableSize) */ {
 public:
  inline ExpandedTableSize() : ExpandedTableSize(nullptr) {}
  ~ExpandedTableSize() override;
  explicit constexpr ExpandedTableSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandedTableSize(const ExpandedTableSize& from);
  ExpandedTableSize(ExpandedTableSize&& from) noexcept
    : ExpandedTableSize() {
    *this = ::std::move(from);
  }

  inline ExpandedTableSize& operator=(const ExpandedTableSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandedTableSize& operator=(ExpandedTableSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandedTableSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandedTableSize* internal_default_instance() {
    return reinterpret_cast<const ExpandedTableSize*>(
               &_ExpandedTableSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExpandedTableSize& a, ExpandedTableSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandedTableSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandedTableSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandedTableSize* New() const final {
    return CreateMaybeMessage<ExpandedTableSize>(nullptr);
  }

  ExpandedTableSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandedTableSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandedTableSize& from);
  void MergeFrom(const ExpandedTableSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandedTableSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ExpandedTableSize";
  }
  protected:
  explicit ExpandedTableSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumColumnsFieldNumber = 1,
    kNumRowsFieldNumber = 2,
  };
  // required uint32 num_columns = 1;
  bool has_num_columns() const;
  private:
  bool _internal_has_num_columns() const;
  public:
  void clear_num_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_columns() const;
  void set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_columns() const;
  void _internal_set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 num_rows = 2;
  bool has_num_rows() const;
  private:
  bool _internal_has_num_rows() const;
  public:
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ExpandedTableSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_rows_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellRange) */ {
 public:
  inline CellRange() : CellRange(nullptr) {}
  ~CellRange() override;
  explicit constexpr CellRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRange(const CellRange& from);
  CellRange(CellRange&& from) noexcept
    : CellRange() {
    *this = ::std::move(from);
  }

  inline CellRange& operator=(const CellRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRange& operator=(CellRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRange* internal_default_instance() {
    return reinterpret_cast<const CellRange*>(
               &_CellRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CellRange& a, CellRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRange* New() const final {
    return CreateMaybeMessage<CellRange>(nullptr);
  }

  CellRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRange& from);
  void MergeFrom(const CellRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellRange";
  }
  protected:
  explicit CellRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required .TST.CellID origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::TST::CellID& origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellID* release_origin();
  ::TST::CellID* mutable_origin();
  void set_allocated_origin(::TST::CellID* origin);
  private:
  const ::TST::CellID& _internal_origin() const;
  ::TST::CellID* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::TST::CellID* origin);
  ::TST::CellID* unsafe_arena_release_origin();

  // required .TST.TableSize size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TST::TableSize& size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TableSize* release_size();
  ::TST::TableSize* mutable_size();
  void set_allocated_size(::TST::TableSize* size);
  private:
  const ::TST::TableSize& _internal_size() const;
  ::TST::TableSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TST::TableSize* size);
  ::TST::TableSize* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:TST.CellRange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::CellID* origin_;
  ::TST::TableSize* size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandedCellRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ExpandedCellRange) */ {
 public:
  inline ExpandedCellRange() : ExpandedCellRange(nullptr) {}
  ~ExpandedCellRange() override;
  explicit constexpr ExpandedCellRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandedCellRange(const ExpandedCellRange& from);
  ExpandedCellRange(ExpandedCellRange&& from) noexcept
    : ExpandedCellRange() {
    *this = ::std::move(from);
  }

  inline ExpandedCellRange& operator=(const ExpandedCellRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandedCellRange& operator=(ExpandedCellRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandedCellRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandedCellRange* internal_default_instance() {
    return reinterpret_cast<const ExpandedCellRange*>(
               &_ExpandedCellRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExpandedCellRange& a, ExpandedCellRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandedCellRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandedCellRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandedCellRange* New() const final {
    return CreateMaybeMessage<ExpandedCellRange>(nullptr);
  }

  ExpandedCellRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandedCellRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandedCellRange& from);
  void MergeFrom(const ExpandedCellRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandedCellRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ExpandedCellRange";
  }
  protected:
  explicit ExpandedCellRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required .TSCE.CellCoordinateArchive origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::TSCE::CellCoordinateArchive& origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_origin();
  ::TSCE::CellCoordinateArchive* mutable_origin();
  void set_allocated_origin(::TSCE::CellCoordinateArchive* origin);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_origin() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::TSCE::CellCoordinateArchive* origin);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_origin();

  // required .TST.ExpandedTableSize size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TST::ExpandedTableSize& size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpandedTableSize* release_size();
  ::TST::ExpandedTableSize* mutable_size();
  void set_allocated_size(::TST::ExpandedTableSize* size);
  private:
  const ::TST::ExpandedTableSize& _internal_size() const;
  ::TST::ExpandedTableSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TST::ExpandedTableSize* size);
  ::TST::ExpandedTableSize* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:TST.ExpandedCellRange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellCoordinateArchive* origin_;
  ::TST::ExpandedTableSize* size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSelection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSelection) */ {
 public:
  inline TableSelection() : TableSelection(nullptr) {}
  ~TableSelection() override;
  explicit constexpr TableSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSelection(const TableSelection& from);
  TableSelection(TableSelection&& from) noexcept
    : TableSelection() {
    *this = ::std::move(from);
  }

  inline TableSelection& operator=(const TableSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSelection& operator=(TableSelection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSelection* internal_default_instance() {
    return reinterpret_cast<const TableSelection*>(
               &_TableSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TableSelection& a, TableSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSelection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSelection* New() const final {
    return CreateMaybeMessage<TableSelection>(nullptr);
  }

  TableSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSelection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSelection& from);
  void MergeFrom(const TableSelection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSelection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSelection";
  }
  protected:
  explicit TableSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRangeFieldNumber = 1,
    kExtendedCellRangeFieldNumber = 2,
    kExtendedCellRangeValidFieldNumber = 3,
    kSelectionTypeFieldNumber = 4,
  };
  // required .TST.CellRange cellRange = 1;
  bool has_cellrange() const;
  private:
  bool _internal_has_cellrange() const;
  public:
  void clear_cellrange();
  const ::TST::CellRange& cellrange() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRange* release_cellrange();
  ::TST::CellRange* mutable_cellrange();
  void set_allocated_cellrange(::TST::CellRange* cellrange);
  private:
  const ::TST::CellRange& _internal_cellrange() const;
  ::TST::CellRange* _internal_mutable_cellrange();
  public:
  void unsafe_arena_set_allocated_cellrange(
      ::TST::CellRange* cellrange);
  ::TST::CellRange* unsafe_arena_release_cellrange();

  // required .TST.CellRange extendedCellRange = 2;
  bool has_extendedcellrange() const;
  private:
  bool _internal_has_extendedcellrange() const;
  public:
  void clear_extendedcellrange();
  const ::TST::CellRange& extendedcellrange() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRange* release_extendedcellrange();
  ::TST::CellRange* mutable_extendedcellrange();
  void set_allocated_extendedcellrange(::TST::CellRange* extendedcellrange);
  private:
  const ::TST::CellRange& _internal_extendedcellrange() const;
  ::TST::CellRange* _internal_mutable_extendedcellrange();
  public:
  void unsafe_arena_set_allocated_extendedcellrange(
      ::TST::CellRange* extendedcellrange);
  ::TST::CellRange* unsafe_arena_release_extendedcellrange();

  // required bool extendedCellRangeValid = 3;
  bool has_extendedcellrangevalid() const;
  private:
  bool _internal_has_extendedcellrangevalid() const;
  public:
  void clear_extendedcellrangevalid();
  bool extendedcellrangevalid() const;
  void set_extendedcellrangevalid(bool value);
  private:
  bool _internal_extendedcellrangevalid() const;
  void _internal_set_extendedcellrangevalid(bool value);
  public:

  // required .TST.SelectionTypeArchive selection_type = 4;
  bool has_selection_type() const;
  private:
  bool _internal_has_selection_type() const;
  public:
  void clear_selection_type();
  ::TST::SelectionTypeArchive selection_type() const;
  void set_selection_type(::TST::SelectionTypeArchive value);
  private:
  ::TST::SelectionTypeArchive _internal_selection_type() const;
  void _internal_set_selection_type(::TST::SelectionTypeArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableSelection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::CellRange* cellrange_;
  ::TST::CellRange* extendedcellrange_;
  bool extendedcellrangevalid_;
  int selection_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TileRowInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TileRowInfo) */ {
 public:
  inline TileRowInfo() : TileRowInfo(nullptr) {}
  ~TileRowInfo() override;
  explicit constexpr TileRowInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileRowInfo(const TileRowInfo& from);
  TileRowInfo(TileRowInfo&& from) noexcept
    : TileRowInfo() {
    *this = ::std::move(from);
  }

  inline TileRowInfo& operator=(const TileRowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileRowInfo& operator=(TileRowInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileRowInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileRowInfo* internal_default_instance() {
    return reinterpret_cast<const TileRowInfo*>(
               &_TileRowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TileRowInfo& a, TileRowInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TileRowInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileRowInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileRowInfo* New() const final {
    return CreateMaybeMessage<TileRowInfo>(nullptr);
  }

  TileRowInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileRowInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileRowInfo& from);
  void MergeFrom(const TileRowInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileRowInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TileRowInfo";
  }
  protected:
  explicit TileRowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellStorageBufferPreBncFieldNumber = 3,
    kCellOffsetsPreBncFieldNumber = 4,
    kCellStorageBufferFieldNumber = 6,
    kCellOffsetsFieldNumber = 7,
    kTileRowIndexFieldNumber = 1,
    kCellCountFieldNumber = 2,
    kStorageVersionFieldNumber = 5,
    kHasWideOffsetsFieldNumber = 8,
  };
  // required bytes cell_storage_buffer_pre_bnc = 3;
  bool has_cell_storage_buffer_pre_bnc() const;
  private:
  bool _internal_has_cell_storage_buffer_pre_bnc() const;
  public:
  void clear_cell_storage_buffer_pre_bnc();
  const std::string& cell_storage_buffer_pre_bnc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cell_storage_buffer_pre_bnc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cell_storage_buffer_pre_bnc();
  std::string* release_cell_storage_buffer_pre_bnc();
  void set_allocated_cell_storage_buffer_pre_bnc(std::string* cell_storage_buffer_pre_bnc);
  private:
  const std::string& _internal_cell_storage_buffer_pre_bnc() const;
  void _internal_set_cell_storage_buffer_pre_bnc(const std::string& value);
  std::string* _internal_mutable_cell_storage_buffer_pre_bnc();
  public:

  // required bytes cell_offsets_pre_bnc = 4;
  bool has_cell_offsets_pre_bnc() const;
  private:
  bool _internal_has_cell_offsets_pre_bnc() const;
  public:
  void clear_cell_offsets_pre_bnc();
  const std::string& cell_offsets_pre_bnc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cell_offsets_pre_bnc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cell_offsets_pre_bnc();
  std::string* release_cell_offsets_pre_bnc();
  void set_allocated_cell_offsets_pre_bnc(std::string* cell_offsets_pre_bnc);
  private:
  const std::string& _internal_cell_offsets_pre_bnc() const;
  void _internal_set_cell_offsets_pre_bnc(const std::string& value);
  std::string* _internal_mutable_cell_offsets_pre_bnc();
  public:

  // optional bytes cell_storage_buffer = 6;
  bool has_cell_storage_buffer() const;
  private:
  bool _internal_has_cell_storage_buffer() const;
  public:
  void clear_cell_storage_buffer();
  const std::string& cell_storage_buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cell_storage_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cell_storage_buffer();
  std::string* release_cell_storage_buffer();
  void set_allocated_cell_storage_buffer(std::string* cell_storage_buffer);
  private:
  const std::string& _internal_cell_storage_buffer() const;
  void _internal_set_cell_storage_buffer(const std::string& value);
  std::string* _internal_mutable_cell_storage_buffer();
  public:

  // optional bytes cell_offsets = 7;
  bool has_cell_offsets() const;
  private:
  bool _internal_has_cell_offsets() const;
  public:
  void clear_cell_offsets();
  const std::string& cell_offsets() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cell_offsets(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cell_offsets();
  std::string* release_cell_offsets();
  void set_allocated_cell_offsets(std::string* cell_offsets);
  private:
  const std::string& _internal_cell_offsets() const;
  void _internal_set_cell_offsets(const std::string& value);
  std::string* _internal_mutable_cell_offsets();
  public:

  // required uint32 tile_row_index = 1;
  bool has_tile_row_index() const;
  private:
  bool _internal_has_tile_row_index() const;
  public:
  void clear_tile_row_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_row_index() const;
  void set_tile_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tile_row_index() const;
  void _internal_set_tile_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cell_count = 2;
  bool has_cell_count() const;
  private:
  bool _internal_has_cell_count() const;
  public:
  void clear_cell_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_count() const;
  void set_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_count() const;
  void _internal_set_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 storage_version = 5;
  bool has_storage_version() const;
  private:
  bool _internal_has_storage_version() const;
  public:
  void clear_storage_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_version() const;
  void set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_version() const;
  void _internal_set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool has_wide_offsets = 8;
  bool has_has_wide_offsets() const;
  private:
  bool _internal_has_has_wide_offsets() const;
  public:
  void clear_has_wide_offsets();
  bool has_wide_offsets() const;
  void set_has_wide_offsets(bool value);
  private:
  bool _internal_has_wide_offsets() const;
  void _internal_set_has_wide_offsets(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TileRowInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_storage_buffer_pre_bnc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_offsets_pre_bnc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_storage_buffer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_offsets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_row_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_version_;
  bool has_wide_offsets_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class Tile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.Tile) */ {
 public:
  inline Tile() : Tile(nullptr) {}
  ~Tile() override;
  explicit constexpr Tile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tile(const Tile& from);
  Tile(Tile&& from) noexcept
    : Tile() {
    *this = ::std::move(from);
  }

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile& operator=(Tile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Tile& a, Tile& b) {
    a.Swap(&b);
  }
  inline void Swap(Tile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tile* New() const final {
    return CreateMaybeMessage<Tile>(nullptr);
  }

  Tile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.Tile";
  }
  protected:
  explicit Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowInfosFieldNumber = 5,
    kMaxColumnFieldNumber = 1,
    kMaxRowFieldNumber = 2,
    kNumCellsFieldNumber = 3,
    kNumrowsFieldNumber = 4,
    kStorageVersionFieldNumber = 6,
    kLastSavedInBNCFieldNumber = 7,
    kShouldUseWideRowsFieldNumber = 8,
  };
  // repeated .TST.TileRowInfo rowInfos = 5;
  int rowinfos_size() const;
  private:
  int _internal_rowinfos_size() const;
  public:
  void clear_rowinfos();
  ::TST::TileRowInfo* mutable_rowinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileRowInfo >*
      mutable_rowinfos();
  private:
  const ::TST::TileRowInfo& _internal_rowinfos(int index) const;
  ::TST::TileRowInfo* _internal_add_rowinfos();
  public:
  const ::TST::TileRowInfo& rowinfos(int index) const;
  ::TST::TileRowInfo* add_rowinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileRowInfo >&
      rowinfos() const;

  // required uint32 maxColumn = 1;
  bool has_maxcolumn() const;
  private:
  bool _internal_has_maxcolumn() const;
  public:
  void clear_maxcolumn();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxcolumn() const;
  void set_maxcolumn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxcolumn() const;
  void _internal_set_maxcolumn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 maxRow = 2;
  bool has_maxrow() const;
  private:
  bool _internal_has_maxrow() const;
  public:
  void clear_maxrow();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrow() const;
  void set_maxrow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxrow() const;
  void _internal_set_maxrow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 numCells = 3;
  bool has_numcells() const;
  private:
  bool _internal_has_numcells() const;
  public:
  void clear_numcells();
  ::PROTOBUF_NAMESPACE_ID::uint32 numcells() const;
  void set_numcells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numcells() const;
  void _internal_set_numcells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 numrows = 4;
  bool has_numrows() const;
  private:
  bool _internal_has_numrows() const;
  public:
  void clear_numrows();
  ::PROTOBUF_NAMESPACE_ID::uint32 numrows() const;
  void set_numrows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numrows() const;
  void _internal_set_numrows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 storage_version = 6;
  bool has_storage_version() const;
  private:
  bool _internal_has_storage_version() const;
  public:
  void clear_storage_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_version() const;
  void set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_version() const;
  void _internal_set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool last_saved_in_BNC = 7;
  bool has_last_saved_in_bnc() const;
  private:
  bool _internal_has_last_saved_in_bnc() const;
  public:
  void clear_last_saved_in_bnc();
  bool last_saved_in_bnc() const;
  void set_last_saved_in_bnc(bool value);
  private:
  bool _internal_last_saved_in_bnc() const;
  void _internal_set_last_saved_in_bnc(bool value);
  public:

  // optional bool should_use_wide_rows = 8;
  bool has_should_use_wide_rows() const;
  private:
  bool _internal_has_should_use_wide_rows() const;
  public:
  void clear_should_use_wide_rows();
  bool should_use_wide_rows() const;
  void set_should_use_wide_rows(bool value);
  private:
  bool _internal_should_use_wide_rows() const;
  void _internal_set_should_use_wide_rows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.Tile)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileRowInfo > rowinfos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxcolumn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numcells_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numrows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_version_;
  bool last_saved_in_bnc_;
  bool should_use_wide_rows_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TileStorage_Tile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TileStorage.Tile) */ {
 public:
  inline TileStorage_Tile() : TileStorage_Tile(nullptr) {}
  ~TileStorage_Tile() override;
  explicit constexpr TileStorage_Tile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileStorage_Tile(const TileStorage_Tile& from);
  TileStorage_Tile(TileStorage_Tile&& from) noexcept
    : TileStorage_Tile() {
    *this = ::std::move(from);
  }

  inline TileStorage_Tile& operator=(const TileStorage_Tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileStorage_Tile& operator=(TileStorage_Tile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileStorage_Tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileStorage_Tile* internal_default_instance() {
    return reinterpret_cast<const TileStorage_Tile*>(
               &_TileStorage_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TileStorage_Tile& a, TileStorage_Tile& b) {
    a.Swap(&b);
  }
  inline void Swap(TileStorage_Tile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileStorage_Tile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileStorage_Tile* New() const final {
    return CreateMaybeMessage<TileStorage_Tile>(nullptr);
  }

  TileStorage_Tile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileStorage_Tile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileStorage_Tile& from);
  void MergeFrom(const TileStorage_Tile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileStorage_Tile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TileStorage.Tile";
  }
  protected:
  explicit TileStorage_Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileFieldNumber = 2,
    kTileidFieldNumber = 1,
  };
  // required .TSP.Reference tile = 2;
  bool has_tile() const;
  private:
  bool _internal_has_tile() const;
  public:
  void clear_tile();
  const ::TSP::Reference& tile() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tile();
  ::TSP::Reference* mutable_tile();
  void set_allocated_tile(::TSP::Reference* tile);
  private:
  const ::TSP::Reference& _internal_tile() const;
  ::TSP::Reference* _internal_mutable_tile();
  public:
  void unsafe_arena_set_allocated_tile(
      ::TSP::Reference* tile);
  ::TSP::Reference* unsafe_arena_release_tile();

  // required uint32 tileid = 1;
  bool has_tileid() const;
  private:
  bool _internal_has_tileid() const;
  public:
  void clear_tileid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tileid() const;
  void set_tileid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tileid() const;
  void _internal_set_tileid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TileStorage.Tile)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* tile_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tileid_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TileStorage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TileStorage) */ {
 public:
  inline TileStorage() : TileStorage(nullptr) {}
  ~TileStorage() override;
  explicit constexpr TileStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileStorage(const TileStorage& from);
  TileStorage(TileStorage&& from) noexcept
    : TileStorage() {
    *this = ::std::move(from);
  }

  inline TileStorage& operator=(const TileStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileStorage& operator=(TileStorage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileStorage* internal_default_instance() {
    return reinterpret_cast<const TileStorage*>(
               &_TileStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TileStorage& a, TileStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(TileStorage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileStorage* New() const final {
    return CreateMaybeMessage<TileStorage>(nullptr);
  }

  TileStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileStorage& from);
  void MergeFrom(const TileStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TileStorage";
  }
  protected:
  explicit TileStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TileStorage_Tile Tile;

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 1,
    kTileSizeFieldNumber = 2,
    kShouldUseWideRowsFieldNumber = 3,
  };
  // repeated .TST.TileStorage.Tile tiles = 1;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  ::TST::TileStorage_Tile* mutable_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileStorage_Tile >*
      mutable_tiles();
  private:
  const ::TST::TileStorage_Tile& _internal_tiles(int index) const;
  ::TST::TileStorage_Tile* _internal_add_tiles();
  public:
  const ::TST::TileStorage_Tile& tiles(int index) const;
  ::TST::TileStorage_Tile* add_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileStorage_Tile >&
      tiles() const;

  // optional uint32 tile_size = 2;
  bool has_tile_size() const;
  private:
  bool _internal_has_tile_size() const;
  public:
  void clear_tile_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_size() const;
  void set_tile_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tile_size() const;
  void _internal_set_tile_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool should_use_wide_rows = 3;
  bool has_should_use_wide_rows() const;
  private:
  bool _internal_has_should_use_wide_rows() const;
  public:
  void clear_should_use_wide_rows();
  bool should_use_wide_rows() const;
  void set_should_use_wide_rows(bool value);
  private:
  bool _internal_should_use_wide_rows() const;
  void _internal_set_should_use_wide_rows(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TileStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileStorage_Tile > tiles_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_size_;
  bool should_use_wide_rows_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class PopUpMenuModel_CellValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.PopUpMenuModel.CellValue) */ {
 public:
  inline PopUpMenuModel_CellValue() : PopUpMenuModel_CellValue(nullptr) {}
  ~PopUpMenuModel_CellValue() override;
  explicit constexpr PopUpMenuModel_CellValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PopUpMenuModel_CellValue(const PopUpMenuModel_CellValue& from);
  PopUpMenuModel_CellValue(PopUpMenuModel_CellValue&& from) noexcept
    : PopUpMenuModel_CellValue() {
    *this = ::std::move(from);
  }

  inline PopUpMenuModel_CellValue& operator=(const PopUpMenuModel_CellValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PopUpMenuModel_CellValue& operator=(PopUpMenuModel_CellValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PopUpMenuModel_CellValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PopUpMenuModel_CellValue* internal_default_instance() {
    return reinterpret_cast<const PopUpMenuModel_CellValue*>(
               &_PopUpMenuModel_CellValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PopUpMenuModel_CellValue& a, PopUpMenuModel_CellValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PopUpMenuModel_CellValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PopUpMenuModel_CellValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PopUpMenuModel_CellValue* New() const final {
    return CreateMaybeMessage<PopUpMenuModel_CellValue>(nullptr);
  }

  PopUpMenuModel_CellValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PopUpMenuModel_CellValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PopUpMenuModel_CellValue& from);
  void MergeFrom(const PopUpMenuModel_CellValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PopUpMenuModel_CellValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.PopUpMenuModel.CellValue";
  }
  protected:
  explicit PopUpMenuModel_CellValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBooleanValueFieldNumber = 2,
    kDateValueFieldNumber = 3,
    kNumberValueFieldNumber = 4,
    kStringValueFieldNumber = 5,
    kCellValueTypeFieldNumber = 1,
  };
  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  bool has_boolean_value() const;
  private:
  bool _internal_has_boolean_value() const;
  public:
  void clear_boolean_value();
  const ::TSCE::BooleanCellValueArchive& boolean_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::BooleanCellValueArchive* release_boolean_value();
  ::TSCE::BooleanCellValueArchive* mutable_boolean_value();
  void set_allocated_boolean_value(::TSCE::BooleanCellValueArchive* boolean_value);
  private:
  const ::TSCE::BooleanCellValueArchive& _internal_boolean_value() const;
  ::TSCE::BooleanCellValueArchive* _internal_mutable_boolean_value();
  public:
  void unsafe_arena_set_allocated_boolean_value(
      ::TSCE::BooleanCellValueArchive* boolean_value);
  ::TSCE::BooleanCellValueArchive* unsafe_arena_release_boolean_value();

  // optional .TSCE.DateCellValueArchive date_value = 3;
  bool has_date_value() const;
  private:
  bool _internal_has_date_value() const;
  public:
  void clear_date_value();
  const ::TSCE::DateCellValueArchive& date_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::DateCellValueArchive* release_date_value();
  ::TSCE::DateCellValueArchive* mutable_date_value();
  void set_allocated_date_value(::TSCE::DateCellValueArchive* date_value);
  private:
  const ::TSCE::DateCellValueArchive& _internal_date_value() const;
  ::TSCE::DateCellValueArchive* _internal_mutable_date_value();
  public:
  void unsafe_arena_set_allocated_date_value(
      ::TSCE::DateCellValueArchive* date_value);
  ::TSCE::DateCellValueArchive* unsafe_arena_release_date_value();

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  bool has_number_value() const;
  private:
  bool _internal_has_number_value() const;
  public:
  void clear_number_value();
  const ::TSCE::NumberCellValueArchive& number_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::NumberCellValueArchive* release_number_value();
  ::TSCE::NumberCellValueArchive* mutable_number_value();
  void set_allocated_number_value(::TSCE::NumberCellValueArchive* number_value);
  private:
  const ::TSCE::NumberCellValueArchive& _internal_number_value() const;
  ::TSCE::NumberCellValueArchive* _internal_mutable_number_value();
  public:
  void unsafe_arena_set_allocated_number_value(
      ::TSCE::NumberCellValueArchive* number_value);
  ::TSCE::NumberCellValueArchive* unsafe_arena_release_number_value();

  // optional .TSCE.StringCellValueArchive string_value = 5;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const ::TSCE::StringCellValueArchive& string_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::StringCellValueArchive* release_string_value();
  ::TSCE::StringCellValueArchive* mutable_string_value();
  void set_allocated_string_value(::TSCE::StringCellValueArchive* string_value);
  private:
  const ::TSCE::StringCellValueArchive& _internal_string_value() const;
  ::TSCE::StringCellValueArchive* _internal_mutable_string_value();
  public:
  void unsafe_arena_set_allocated_string_value(
      ::TSCE::StringCellValueArchive* string_value);
  ::TSCE::StringCellValueArchive* unsafe_arena_release_string_value();

  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  bool has_cell_value_type() const;
  private:
  bool _internal_has_cell_value_type() const;
  public:
  void clear_cell_value_type();
  ::TST::PopUpMenuModel_CellValueType cell_value_type() const;
  void set_cell_value_type(::TST::PopUpMenuModel_CellValueType value);
  private:
  ::TST::PopUpMenuModel_CellValueType _internal_cell_value_type() const;
  void _internal_set_cell_value_type(::TST::PopUpMenuModel_CellValueType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.PopUpMenuModel.CellValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::BooleanCellValueArchive* boolean_value_;
  ::TSCE::DateCellValueArchive* date_value_;
  ::TSCE::NumberCellValueArchive* number_value_;
  ::TSCE::StringCellValueArchive* string_value_;
  int cell_value_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class PopUpMenuModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.PopUpMenuModel) */ {
 public:
  inline PopUpMenuModel() : PopUpMenuModel(nullptr) {}
  ~PopUpMenuModel() override;
  explicit constexpr PopUpMenuModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PopUpMenuModel(const PopUpMenuModel& from);
  PopUpMenuModel(PopUpMenuModel&& from) noexcept
    : PopUpMenuModel() {
    *this = ::std::move(from);
  }

  inline PopUpMenuModel& operator=(const PopUpMenuModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PopUpMenuModel& operator=(PopUpMenuModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PopUpMenuModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const PopUpMenuModel* internal_default_instance() {
    return reinterpret_cast<const PopUpMenuModel*>(
               &_PopUpMenuModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PopUpMenuModel& a, PopUpMenuModel& b) {
    a.Swap(&b);
  }
  inline void Swap(PopUpMenuModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PopUpMenuModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PopUpMenuModel* New() const final {
    return CreateMaybeMessage<PopUpMenuModel>(nullptr);
  }

  PopUpMenuModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PopUpMenuModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PopUpMenuModel& from);
  void MergeFrom(const PopUpMenuModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PopUpMenuModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.PopUpMenuModel";
  }
  protected:
  explicit PopUpMenuModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PopUpMenuModel_CellValue CellValue;

  typedef PopUpMenuModel_CellValueType CellValueType;
  static constexpr CellValueType NIL_TYPE =
    PopUpMenuModel_CellValueType_NIL_TYPE;
  static constexpr CellValueType BOOLEAN_TYPE =
    PopUpMenuModel_CellValueType_BOOLEAN_TYPE;
  static constexpr CellValueType DATE_TYPE =
    PopUpMenuModel_CellValueType_DATE_TYPE;
  static constexpr CellValueType NUMBER_TYPE =
    PopUpMenuModel_CellValueType_NUMBER_TYPE;
  static constexpr CellValueType STRING_TYPE =
    PopUpMenuModel_CellValueType_STRING_TYPE;
  static inline bool CellValueType_IsValid(int value) {
    return PopUpMenuModel_CellValueType_IsValid(value);
  }
  static constexpr CellValueType CellValueType_MIN =
    PopUpMenuModel_CellValueType_CellValueType_MIN;
  static constexpr CellValueType CellValueType_MAX =
    PopUpMenuModel_CellValueType_CellValueType_MAX;
  static constexpr int CellValueType_ARRAYSIZE =
    PopUpMenuModel_CellValueType_CellValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CellValueType_descriptor() {
    return PopUpMenuModel_CellValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& CellValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CellValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CellValueType_Name.");
    return PopUpMenuModel_CellValueType_Name(enum_t_value);
  }
  static inline bool CellValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CellValueType* value) {
    return PopUpMenuModel_CellValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kTsceItemFieldNumber = 2,
  };
  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_item();
  PROTOBUF_DEPRECATED ::TST::PopUpMenuModel_CellValue* mutable_item(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::PopUpMenuModel_CellValue >*
      mutable_item();
  private:
  const ::TST::PopUpMenuModel_CellValue& _internal_item(int index) const;
  ::TST::PopUpMenuModel_CellValue* _internal_add_item();
  public:
  PROTOBUF_DEPRECATED const ::TST::PopUpMenuModel_CellValue& item(int index) const;
  PROTOBUF_DEPRECATED ::TST::PopUpMenuModel_CellValue* add_item();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::PopUpMenuModel_CellValue >&
      item() const;

  // repeated .TSCE.CellValueArchive tsce_item = 2;
  int tsce_item_size() const;
  private:
  int _internal_tsce_item_size() const;
  public:
  void clear_tsce_item();
  ::TSCE::CellValueArchive* mutable_tsce_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
      mutable_tsce_item();
  private:
  const ::TSCE::CellValueArchive& _internal_tsce_item(int index) const;
  ::TSCE::CellValueArchive* _internal_add_tsce_item();
  public:
  const ::TSCE::CellValueArchive& tsce_item(int index) const;
  ::TSCE::CellValueArchive* add_tsce_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
      tsce_item() const;

  // @@protoc_insertion_point(class_scope:TST.PopUpMenuModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::PopUpMenuModel_CellValue > item_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive > tsce_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ImportWarningSetArchive_FormulaImportWarning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ImportWarningSetArchive.FormulaImportWarning) */ {
 public:
  inline ImportWarningSetArchive_FormulaImportWarning() : ImportWarningSetArchive_FormulaImportWarning(nullptr) {}
  ~ImportWarningSetArchive_FormulaImportWarning() override;
  explicit constexpr ImportWarningSetArchive_FormulaImportWarning(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportWarningSetArchive_FormulaImportWarning(const ImportWarningSetArchive_FormulaImportWarning& from);
  ImportWarningSetArchive_FormulaImportWarning(ImportWarningSetArchive_FormulaImportWarning&& from) noexcept
    : ImportWarningSetArchive_FormulaImportWarning() {
    *this = ::std::move(from);
  }

  inline ImportWarningSetArchive_FormulaImportWarning& operator=(const ImportWarningSetArchive_FormulaImportWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportWarningSetArchive_FormulaImportWarning& operator=(ImportWarningSetArchive_FormulaImportWarning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportWarningSetArchive_FormulaImportWarning& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportWarningSetArchive_FormulaImportWarning* internal_default_instance() {
    return reinterpret_cast<const ImportWarningSetArchive_FormulaImportWarning*>(
               &_ImportWarningSetArchive_FormulaImportWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ImportWarningSetArchive_FormulaImportWarning& a, ImportWarningSetArchive_FormulaImportWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportWarningSetArchive_FormulaImportWarning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportWarningSetArchive_FormulaImportWarning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportWarningSetArchive_FormulaImportWarning* New() const final {
    return CreateMaybeMessage<ImportWarningSetArchive_FormulaImportWarning>(nullptr);
  }

  ImportWarningSetArchive_FormulaImportWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportWarningSetArchive_FormulaImportWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportWarningSetArchive_FormulaImportWarning& from);
  void MergeFrom(const ImportWarningSetArchive_FormulaImportWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportWarningSetArchive_FormulaImportWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ImportWarningSetArchive.FormulaImportWarning";
  }
  protected:
  explicit ImportWarningSetArchive_FormulaImportWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalFormulaFieldNumber = 2,
    kSupplementaryTextFieldNumber = 3,
    kFormulaWarningTypeIntFieldNumber = 4,
    kFormulaWarningTypeFieldNumber = 1,
  };
  // optional string original_formula = 2;
  bool has_original_formula() const;
  private:
  bool _internal_has_original_formula() const;
  public:
  void clear_original_formula();
  const std::string& original_formula() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_formula(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_formula();
  std::string* release_original_formula();
  void set_allocated_original_formula(std::string* original_formula);
  private:
  const std::string& _internal_original_formula() const;
  void _internal_set_original_formula(const std::string& value);
  std::string* _internal_mutable_original_formula();
  public:

  // optional string supplementary_text = 3;
  bool has_supplementary_text() const;
  private:
  bool _internal_has_supplementary_text() const;
  public:
  void clear_supplementary_text();
  const std::string& supplementary_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_supplementary_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_supplementary_text();
  std::string* release_supplementary_text();
  void set_allocated_supplementary_text(std::string* supplementary_text);
  private:
  const std::string& _internal_supplementary_text() const;
  void _internal_set_supplementary_text(const std::string& value);
  std::string* _internal_mutable_supplementary_text();
  public:

  // optional int32 formula_warning_type_int = 4;
  bool has_formula_warning_type_int() const;
  private:
  bool _internal_has_formula_warning_type_int() const;
  public:
  void clear_formula_warning_type_int();
  ::PROTOBUF_NAMESPACE_ID::int32 formula_warning_type_int() const;
  void set_formula_warning_type_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_formula_warning_type_int() const;
  void _internal_set_formula_warning_type_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
  bool has_formula_warning_type() const;
  private:
  bool _internal_has_formula_warning_type() const;
  public:
  void clear_formula_warning_type();
  ::TST::ImportWarningSetArchive_FormulaWarningType formula_warning_type() const;
  void set_formula_warning_type(::TST::ImportWarningSetArchive_FormulaWarningType value);
  private:
  ::TST::ImportWarningSetArchive_FormulaWarningType _internal_formula_warning_type() const;
  void _internal_set_formula_warning_type(::TST::ImportWarningSetArchive_FormulaWarningType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ImportWarningSetArchive.FormulaImportWarning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_formula_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supplementary_text_;
  ::PROTOBUF_NAMESPACE_ID::int32 formula_warning_type_int_;
  int formula_warning_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ImportWarningSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ImportWarningSetArchive) */ {
 public:
  inline ImportWarningSetArchive() : ImportWarningSetArchive(nullptr) {}
  ~ImportWarningSetArchive() override;
  explicit constexpr ImportWarningSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportWarningSetArchive(const ImportWarningSetArchive& from);
  ImportWarningSetArchive(ImportWarningSetArchive&& from) noexcept
    : ImportWarningSetArchive() {
    *this = ::std::move(from);
  }

  inline ImportWarningSetArchive& operator=(const ImportWarningSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportWarningSetArchive& operator=(ImportWarningSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportWarningSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportWarningSetArchive* internal_default_instance() {
    return reinterpret_cast<const ImportWarningSetArchive*>(
               &_ImportWarningSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ImportWarningSetArchive& a, ImportWarningSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportWarningSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportWarningSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportWarningSetArchive* New() const final {
    return CreateMaybeMessage<ImportWarningSetArchive>(nullptr);
  }

  ImportWarningSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportWarningSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportWarningSetArchive& from);
  void MergeFrom(const ImportWarningSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportWarningSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ImportWarningSetArchive";
  }
  protected:
  explicit ImportWarningSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImportWarningSetArchive_FormulaImportWarning FormulaImportWarning;

  typedef ImportWarningSetArchive_FormulaWarningType FormulaWarningType;
  static constexpr FormulaWarningType THREE_D_REFERENCE =
    ImportWarningSetArchive_FormulaWarningType_THREE_D_REFERENCE;
  static constexpr FormulaWarningType ARRAYED_FORMULA =
    ImportWarningSetArchive_FormulaWarningType_ARRAYED_FORMULA;
  static constexpr FormulaWarningType DIFFERENT_BEHAVIOR_FOR_FUNCTION =
    ImportWarningSetArchive_FormulaWarningType_DIFFERENT_BEHAVIOR_FOR_FUNCTION;
  static constexpr FormulaWarningType ERROR_TOKEN =
    ImportWarningSetArchive_FormulaWarningType_ERROR_TOKEN;
  static constexpr FormulaWarningType EXTERNAL_REFERENCE =
    ImportWarningSetArchive_FormulaWarningType_EXTERNAL_REFERENCE;
  static constexpr FormulaWarningType NATURAL_LANGUAGE_FORMULA =
    ImportWarningSetArchive_FormulaWarningType_NATURAL_LANGUAGE_FORMULA;
  static constexpr FormulaWarningType REFERENCE_OUT_OF_BOUNDS =
    ImportWarningSetArchive_FormulaWarningType_REFERENCE_OUT_OF_BOUNDS;
  static constexpr FormulaWarningType SHARED_FORMULA_BASE_NOT_FOUND =
    ImportWarningSetArchive_FormulaWarningType_SHARED_FORMULA_BASE_NOT_FOUND;
  static constexpr FormulaWarningType UNKNOWN_NAME =
    ImportWarningSetArchive_FormulaWarningType_UNKNOWN_NAME;
  static constexpr FormulaWarningType UNSUPPORTED_FORMULA =
    ImportWarningSetArchive_FormulaWarningType_UNSUPPORTED_FORMULA;
  static constexpr FormulaWarningType UNSUPPORTED_FUNCTION =
    ImportWarningSetArchive_FormulaWarningType_UNSUPPORTED_FUNCTION;
  static constexpr FormulaWarningType UNSUPPORTED_NAME =
    ImportWarningSetArchive_FormulaWarningType_UNSUPPORTED_NAME;
  static constexpr FormulaWarningType TRANSPOSED_NO_ISSUES =
    ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_NO_ISSUES;
  static constexpr FormulaWarningType TRANSPOSED_WITH_ISSUES =
    ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_WITH_ISSUES;
  static constexpr FormulaWarningType TRANSPOSED_WITH_ISSUES_UNCHANGED =
    ImportWarningSetArchive_FormulaWarningType_TRANSPOSED_WITH_ISSUES_UNCHANGED;
  static inline bool FormulaWarningType_IsValid(int value) {
    return ImportWarningSetArchive_FormulaWarningType_IsValid(value);
  }
  static constexpr FormulaWarningType FormulaWarningType_MIN =
    ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_MIN;
  static constexpr FormulaWarningType FormulaWarningType_MAX =
    ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_MAX;
  static constexpr int FormulaWarningType_ARRAYSIZE =
    ImportWarningSetArchive_FormulaWarningType_FormulaWarningType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FormulaWarningType_descriptor() {
    return ImportWarningSetArchive_FormulaWarningType_descriptor();
  }
  template<typename T>
  static inline const std::string& FormulaWarningType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FormulaWarningType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FormulaWarningType_Name.");
    return ImportWarningSetArchive_FormulaWarningType_Name(enum_t_value);
  }
  static inline bool FormulaWarningType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FormulaWarningType* value) {
    return ImportWarningSetArchive_FormulaWarningType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalDataFormatFieldNumber = 15,
    kFormulaImportWarningFieldNumber = 1,
    kCondFormatAboveAvgEqualAvgFieldNumber = 2,
    kCondFormatAboveAvgStdDevFieldNumber = 3,
    kCondFormatComplexFormulaFieldNumber = 4,
    kCondFormatContainsErrorsFieldNumber = 5,
    kCondFormatExprFieldNumber = 6,
    kCondFormatNotContainsErrorsFieldNumber = 7,
    kCondFormatParametersNotAllSameTypeFieldNumber = 8,
    kCondFormatStopIfTrueFieldNumber = 9,
    kCondFormatUnsupportedOperatorFieldNumber = 10,
    kCondFormatUnsupportedStylingFieldNumber = 11,
    kCondFormatUnsupportedTimePeriodFieldNumber = 12,
    kErrorCellWithNoFormulaFieldNumber = 13,
    kUnsupportedCondFormatFieldNumber = 14,
    kFormulaWarningFilteredColumnFormulaNotCopiedFieldNumber = 16,
    kDurationFormatRangeChangedFieldNumber = 17,
  };
  // optional string original_data_format = 15;
  bool has_original_data_format() const;
  private:
  bool _internal_has_original_data_format() const;
  public:
  void clear_original_data_format();
  const std::string& original_data_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_original_data_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_original_data_format();
  std::string* release_original_data_format();
  void set_allocated_original_data_format(std::string* original_data_format);
  private:
  const std::string& _internal_original_data_format() const;
  void _internal_set_original_data_format(const std::string& value);
  std::string* _internal_mutable_original_data_format();
  public:

  // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
  bool has_formula_import_warning() const;
  private:
  bool _internal_has_formula_import_warning() const;
  public:
  void clear_formula_import_warning();
  const ::TST::ImportWarningSetArchive_FormulaImportWarning& formula_import_warning() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ImportWarningSetArchive_FormulaImportWarning* release_formula_import_warning();
  ::TST::ImportWarningSetArchive_FormulaImportWarning* mutable_formula_import_warning();
  void set_allocated_formula_import_warning(::TST::ImportWarningSetArchive_FormulaImportWarning* formula_import_warning);
  private:
  const ::TST::ImportWarningSetArchive_FormulaImportWarning& _internal_formula_import_warning() const;
  ::TST::ImportWarningSetArchive_FormulaImportWarning* _internal_mutable_formula_import_warning();
  public:
  void unsafe_arena_set_allocated_formula_import_warning(
      ::TST::ImportWarningSetArchive_FormulaImportWarning* formula_import_warning);
  ::TST::ImportWarningSetArchive_FormulaImportWarning* unsafe_arena_release_formula_import_warning();

  // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
  bool has_cond_format_above_avg_equal_avg() const;
  private:
  bool _internal_has_cond_format_above_avg_equal_avg() const;
  public:
  void clear_cond_format_above_avg_equal_avg();
  bool cond_format_above_avg_equal_avg() const;
  void set_cond_format_above_avg_equal_avg(bool value);
  private:
  bool _internal_cond_format_above_avg_equal_avg() const;
  void _internal_set_cond_format_above_avg_equal_avg(bool value);
  public:

  // optional bool cond_format_above_avg_std_dev = 3 [default = false];
  bool has_cond_format_above_avg_std_dev() const;
  private:
  bool _internal_has_cond_format_above_avg_std_dev() const;
  public:
  void clear_cond_format_above_avg_std_dev();
  bool cond_format_above_avg_std_dev() const;
  void set_cond_format_above_avg_std_dev(bool value);
  private:
  bool _internal_cond_format_above_avg_std_dev() const;
  void _internal_set_cond_format_above_avg_std_dev(bool value);
  public:

  // optional bool cond_format_complex_formula = 4 [default = false];
  bool has_cond_format_complex_formula() const;
  private:
  bool _internal_has_cond_format_complex_formula() const;
  public:
  void clear_cond_format_complex_formula();
  bool cond_format_complex_formula() const;
  void set_cond_format_complex_formula(bool value);
  private:
  bool _internal_cond_format_complex_formula() const;
  void _internal_set_cond_format_complex_formula(bool value);
  public:

  // optional bool cond_format_contains_errors = 5 [default = false];
  bool has_cond_format_contains_errors() const;
  private:
  bool _internal_has_cond_format_contains_errors() const;
  public:
  void clear_cond_format_contains_errors();
  bool cond_format_contains_errors() const;
  void set_cond_format_contains_errors(bool value);
  private:
  bool _internal_cond_format_contains_errors() const;
  void _internal_set_cond_format_contains_errors(bool value);
  public:

  // optional bool cond_format_expr = 6 [default = false];
  bool has_cond_format_expr() const;
  private:
  bool _internal_has_cond_format_expr() const;
  public:
  void clear_cond_format_expr();
  bool cond_format_expr() const;
  void set_cond_format_expr(bool value);
  private:
  bool _internal_cond_format_expr() const;
  void _internal_set_cond_format_expr(bool value);
  public:

  // optional bool cond_format_not_contains_errors = 7 [default = false];
  bool has_cond_format_not_contains_errors() const;
  private:
  bool _internal_has_cond_format_not_contains_errors() const;
  public:
  void clear_cond_format_not_contains_errors();
  bool cond_format_not_contains_errors() const;
  void set_cond_format_not_contains_errors(bool value);
  private:
  bool _internal_cond_format_not_contains_errors() const;
  void _internal_set_cond_format_not_contains_errors(bool value);
  public:

  // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
  bool has_cond_format_parameters_not_all_same_type() const;
  private:
  bool _internal_has_cond_format_parameters_not_all_same_type() const;
  public:
  void clear_cond_format_parameters_not_all_same_type();
  bool cond_format_parameters_not_all_same_type() const;
  void set_cond_format_parameters_not_all_same_type(bool value);
  private:
  bool _internal_cond_format_parameters_not_all_same_type() const;
  void _internal_set_cond_format_parameters_not_all_same_type(bool value);
  public:

  // optional bool cond_format_stop_if_true = 9 [default = false];
  bool has_cond_format_stop_if_true() const;
  private:
  bool _internal_has_cond_format_stop_if_true() const;
  public:
  void clear_cond_format_stop_if_true();
  bool cond_format_stop_if_true() const;
  void set_cond_format_stop_if_true(bool value);
  private:
  bool _internal_cond_format_stop_if_true() const;
  void _internal_set_cond_format_stop_if_true(bool value);
  public:

  // optional bool cond_format_unsupported_operator = 10 [default = false];
  bool has_cond_format_unsupported_operator() const;
  private:
  bool _internal_has_cond_format_unsupported_operator() const;
  public:
  void clear_cond_format_unsupported_operator();
  bool cond_format_unsupported_operator() const;
  void set_cond_format_unsupported_operator(bool value);
  private:
  bool _internal_cond_format_unsupported_operator() const;
  void _internal_set_cond_format_unsupported_operator(bool value);
  public:

  // optional bool cond_format_unsupported_styling = 11 [default = false];
  bool has_cond_format_unsupported_styling() const;
  private:
  bool _internal_has_cond_format_unsupported_styling() const;
  public:
  void clear_cond_format_unsupported_styling();
  bool cond_format_unsupported_styling() const;
  void set_cond_format_unsupported_styling(bool value);
  private:
  bool _internal_cond_format_unsupported_styling() const;
  void _internal_set_cond_format_unsupported_styling(bool value);
  public:

  // optional bool cond_format_unsupported_time_period = 12 [default = false];
  bool has_cond_format_unsupported_time_period() const;
  private:
  bool _internal_has_cond_format_unsupported_time_period() const;
  public:
  void clear_cond_format_unsupported_time_period();
  bool cond_format_unsupported_time_period() const;
  void set_cond_format_unsupported_time_period(bool value);
  private:
  bool _internal_cond_format_unsupported_time_period() const;
  void _internal_set_cond_format_unsupported_time_period(bool value);
  public:

  // optional bool error_cell_with_no_formula = 13 [default = false];
  bool has_error_cell_with_no_formula() const;
  private:
  bool _internal_has_error_cell_with_no_formula() const;
  public:
  void clear_error_cell_with_no_formula();
  bool error_cell_with_no_formula() const;
  void set_error_cell_with_no_formula(bool value);
  private:
  bool _internal_error_cell_with_no_formula() const;
  void _internal_set_error_cell_with_no_formula(bool value);
  public:

  // optional bool unsupported_cond_format = 14 [default = false];
  bool has_unsupported_cond_format() const;
  private:
  bool _internal_has_unsupported_cond_format() const;
  public:
  void clear_unsupported_cond_format();
  bool unsupported_cond_format() const;
  void set_unsupported_cond_format(bool value);
  private:
  bool _internal_unsupported_cond_format() const;
  void _internal_set_unsupported_cond_format(bool value);
  public:

  // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
  bool has_formula_warning_filtered_column_formula_not_copied() const;
  private:
  bool _internal_has_formula_warning_filtered_column_formula_not_copied() const;
  public:
  void clear_formula_warning_filtered_column_formula_not_copied();
  bool formula_warning_filtered_column_formula_not_copied() const;
  void set_formula_warning_filtered_column_formula_not_copied(bool value);
  private:
  bool _internal_formula_warning_filtered_column_formula_not_copied() const;
  void _internal_set_formula_warning_filtered_column_formula_not_copied(bool value);
  public:

  // optional bool duration_format_range_changed = 17 [default = false];
  bool has_duration_format_range_changed() const;
  private:
  bool _internal_has_duration_format_range_changed() const;
  public:
  void clear_duration_format_range_changed();
  bool duration_format_range_changed() const;
  void set_duration_format_range_changed(bool value);
  private:
  bool _internal_duration_format_range_changed() const;
  void _internal_set_duration_format_range_changed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ImportWarningSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_data_format_;
  ::TST::ImportWarningSetArchive_FormulaImportWarning* formula_import_warning_;
  bool cond_format_above_avg_equal_avg_;
  bool cond_format_above_avg_std_dev_;
  bool cond_format_complex_formula_;
  bool cond_format_contains_errors_;
  bool cond_format_expr_;
  bool cond_format_not_contains_errors_;
  bool cond_format_parameters_not_all_same_type_;
  bool cond_format_stop_if_true_;
  bool cond_format_unsupported_operator_;
  bool cond_format_unsupported_styling_;
  bool cond_format_unsupported_time_period_;
  bool error_cell_with_no_formula_;
  bool unsupported_cond_format_;
  bool formula_warning_filtered_column_formula_not_copied_;
  bool duration_format_range_changed_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRefImportWarningSetPairArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellRefImportWarningSetPairArchive) */ {
 public:
  inline CellRefImportWarningSetPairArchive() : CellRefImportWarningSetPairArchive(nullptr) {}
  ~CellRefImportWarningSetPairArchive() override;
  explicit constexpr CellRefImportWarningSetPairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRefImportWarningSetPairArchive(const CellRefImportWarningSetPairArchive& from);
  CellRefImportWarningSetPairArchive(CellRefImportWarningSetPairArchive&& from) noexcept
    : CellRefImportWarningSetPairArchive() {
    *this = ::std::move(from);
  }

  inline CellRefImportWarningSetPairArchive& operator=(const CellRefImportWarningSetPairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRefImportWarningSetPairArchive& operator=(CellRefImportWarningSetPairArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRefImportWarningSetPairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRefImportWarningSetPairArchive* internal_default_instance() {
    return reinterpret_cast<const CellRefImportWarningSetPairArchive*>(
               &_CellRefImportWarningSetPairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CellRefImportWarningSetPairArchive& a, CellRefImportWarningSetPairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRefImportWarningSetPairArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRefImportWarningSetPairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRefImportWarningSetPairArchive* New() const final {
    return CreateMaybeMessage<CellRefImportWarningSetPairArchive>(nullptr);
  }

  CellRefImportWarningSetPairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRefImportWarningSetPairArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRefImportWarningSetPairArchive& from);
  void MergeFrom(const CellRefImportWarningSetPairArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRefImportWarningSetPairArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellRefImportWarningSetPairArchive";
  }
  protected:
  explicit CellRefImportWarningSetPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRefFieldNumber = 1,
    kWarningSetFieldNumber = 3,
  };
  // required .TSCE.CellReferenceArchive cell_ref = 1;
  bool has_cell_ref() const;
  private:
  bool _internal_has_cell_ref() const;
  public:
  void clear_cell_ref();
  const ::TSCE::CellReferenceArchive& cell_ref() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellReferenceArchive* release_cell_ref();
  ::TSCE::CellReferenceArchive* mutable_cell_ref();
  void set_allocated_cell_ref(::TSCE::CellReferenceArchive* cell_ref);
  private:
  const ::TSCE::CellReferenceArchive& _internal_cell_ref() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_cell_ref();
  public:
  void unsafe_arena_set_allocated_cell_ref(
      ::TSCE::CellReferenceArchive* cell_ref);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_cell_ref();

  // optional .TST.ImportWarningSetArchive warning_set = 3;
  bool has_warning_set() const;
  private:
  bool _internal_has_warning_set() const;
  public:
  void clear_warning_set();
  const ::TST::ImportWarningSetArchive& warning_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ImportWarningSetArchive* release_warning_set();
  ::TST::ImportWarningSetArchive* mutable_warning_set();
  void set_allocated_warning_set(::TST::ImportWarningSetArchive* warning_set);
  private:
  const ::TST::ImportWarningSetArchive& _internal_warning_set() const;
  ::TST::ImportWarningSetArchive* _internal_mutable_warning_set();
  public:
  void unsafe_arena_set_allocated_warning_set(
      ::TST::ImportWarningSetArchive* warning_set);
  ::TST::ImportWarningSetArchive* unsafe_arena_release_warning_set();

  // @@protoc_insertion_point(class_scope:TST.CellRefImportWarningSetPairArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellReferenceArchive* cell_ref_;
  ::TST::ImportWarningSetArchive* warning_set_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ImportWarningSetByCellRefArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ImportWarningSetByCellRefArchive) */ {
 public:
  inline ImportWarningSetByCellRefArchive() : ImportWarningSetByCellRefArchive(nullptr) {}
  ~ImportWarningSetByCellRefArchive() override;
  explicit constexpr ImportWarningSetByCellRefArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportWarningSetByCellRefArchive(const ImportWarningSetByCellRefArchive& from);
  ImportWarningSetByCellRefArchive(ImportWarningSetByCellRefArchive&& from) noexcept
    : ImportWarningSetByCellRefArchive() {
    *this = ::std::move(from);
  }

  inline ImportWarningSetByCellRefArchive& operator=(const ImportWarningSetByCellRefArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportWarningSetByCellRefArchive& operator=(ImportWarningSetByCellRefArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImportWarningSetByCellRefArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportWarningSetByCellRefArchive* internal_default_instance() {
    return reinterpret_cast<const ImportWarningSetByCellRefArchive*>(
               &_ImportWarningSetByCellRefArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ImportWarningSetByCellRefArchive& a, ImportWarningSetByCellRefArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportWarningSetByCellRefArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportWarningSetByCellRefArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportWarningSetByCellRefArchive* New() const final {
    return CreateMaybeMessage<ImportWarningSetByCellRefArchive>(nullptr);
  }

  ImportWarningSetByCellRefArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportWarningSetByCellRefArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportWarningSetByCellRefArchive& from);
  void MergeFrom(const ImportWarningSetByCellRefArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportWarningSetByCellRefArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ImportWarningSetByCellRefArchive";
  }
  protected:
  explicit ImportWarningSetByCellRefArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellrefWarningSetPairFieldNumber = 1,
  };
  // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
  int cellref_warning_set_pair_size() const;
  private:
  int _internal_cellref_warning_set_pair_size() const;
  public:
  void clear_cellref_warning_set_pair();
  ::TST::CellRefImportWarningSetPairArchive* mutable_cellref_warning_set_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRefImportWarningSetPairArchive >*
      mutable_cellref_warning_set_pair();
  private:
  const ::TST::CellRefImportWarningSetPairArchive& _internal_cellref_warning_set_pair(int index) const;
  ::TST::CellRefImportWarningSetPairArchive* _internal_add_cellref_warning_set_pair();
  public:
  const ::TST::CellRefImportWarningSetPairArchive& cellref_warning_set_pair(int index) const;
  ::TST::CellRefImportWarningSetPairArchive* add_cellref_warning_set_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRefImportWarningSetPairArchive >&
      cellref_warning_set_pair() const;

  // @@protoc_insertion_point(class_scope:TST.ImportWarningSetByCellRefArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRefImportWarningSetPairArchive > cellref_warning_set_pair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableDataList_ListEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableDataList.ListEntry) */ {
 public:
  inline TableDataList_ListEntry() : TableDataList_ListEntry(nullptr) {}
  ~TableDataList_ListEntry() override;
  explicit constexpr TableDataList_ListEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDataList_ListEntry(const TableDataList_ListEntry& from);
  TableDataList_ListEntry(TableDataList_ListEntry&& from) noexcept
    : TableDataList_ListEntry() {
    *this = ::std::move(from);
  }

  inline TableDataList_ListEntry& operator=(const TableDataList_ListEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDataList_ListEntry& operator=(TableDataList_ListEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDataList_ListEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDataList_ListEntry* internal_default_instance() {
    return reinterpret_cast<const TableDataList_ListEntry*>(
               &_TableDataList_ListEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TableDataList_ListEntry& a, TableDataList_ListEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDataList_ListEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDataList_ListEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableDataList_ListEntry* New() const final {
    return CreateMaybeMessage<TableDataList_ListEntry>(nullptr);
  }

  TableDataList_ListEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableDataList_ListEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableDataList_ListEntry& from);
  void MergeFrom(const TableDataList_ListEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDataList_ListEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableDataList.ListEntry";
  }
  protected:
  explicit TableDataList_ListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 3,
    kReferenceFieldNumber = 4,
    kFormulaFieldNumber = 5,
    kFormatFieldNumber = 6,
    kCustomFormatFieldNumber = 8,
    kRichTextPayloadFieldNumber = 9,
    kCommentStorageFieldNumber = 10,
    kImportWarningSetFieldNumber = 11,
    kCellSpecFieldNumber = 12,
    kKeyFieldNumber = 1,
    kRefcountFieldNumber = 2,
  };
  // optional string string = 3;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // optional .TSP.Reference reference = 4;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const ::TSP::Reference& reference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_reference();
  ::TSP::Reference* mutable_reference();
  void set_allocated_reference(::TSP::Reference* reference);
  private:
  const ::TSP::Reference& _internal_reference() const;
  ::TSP::Reference* _internal_mutable_reference();
  public:
  void unsafe_arena_set_allocated_reference(
      ::TSP::Reference* reference);
  ::TSP::Reference* unsafe_arena_release_reference();

  // optional .TSCE.FormulaArchive formula = 5;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // optional .TSK.FormatStructArchive format = 6;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::TSK::FormatStructArchive& format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_format();
  ::TSK::FormatStructArchive* mutable_format();
  void set_allocated_format(::TSK::FormatStructArchive* format);
  private:
  const ::TSK::FormatStructArchive& _internal_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::TSK::FormatStructArchive* format);
  ::TSK::FormatStructArchive* unsafe_arena_release_format();

  // optional .TSK.CustomFormatArchive custom_format = 8;
  bool has_custom_format() const;
  private:
  bool _internal_has_custom_format() const;
  public:
  void clear_custom_format();
  const ::TSK::CustomFormatArchive& custom_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CustomFormatArchive* release_custom_format();
  ::TSK::CustomFormatArchive* mutable_custom_format();
  void set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format);
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_format() const;
  ::TSK::CustomFormatArchive* _internal_mutable_custom_format();
  public:
  void unsafe_arena_set_allocated_custom_format(
      ::TSK::CustomFormatArchive* custom_format);
  ::TSK::CustomFormatArchive* unsafe_arena_release_custom_format();

  // optional .TSP.Reference rich_text_payload = 9;
  bool has_rich_text_payload() const;
  private:
  bool _internal_has_rich_text_payload() const;
  public:
  void clear_rich_text_payload();
  const ::TSP::Reference& rich_text_payload() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_rich_text_payload();
  ::TSP::Reference* mutable_rich_text_payload();
  void set_allocated_rich_text_payload(::TSP::Reference* rich_text_payload);
  private:
  const ::TSP::Reference& _internal_rich_text_payload() const;
  ::TSP::Reference* _internal_mutable_rich_text_payload();
  public:
  void unsafe_arena_set_allocated_rich_text_payload(
      ::TSP::Reference* rich_text_payload);
  ::TSP::Reference* unsafe_arena_release_rich_text_payload();

  // optional .TSP.Reference comment_storage = 10;
  bool has_comment_storage() const;
  private:
  bool _internal_has_comment_storage() const;
  public:
  void clear_comment_storage();
  const ::TSP::Reference& comment_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_comment_storage();
  ::TSP::Reference* mutable_comment_storage();
  void set_allocated_comment_storage(::TSP::Reference* comment_storage);
  private:
  const ::TSP::Reference& _internal_comment_storage() const;
  ::TSP::Reference* _internal_mutable_comment_storage();
  public:
  void unsafe_arena_set_allocated_comment_storage(
      ::TSP::Reference* comment_storage);
  ::TSP::Reference* unsafe_arena_release_comment_storage();

  // optional .TST.ImportWarningSetArchive import_warning_set = 11;
  bool has_import_warning_set() const;
  private:
  bool _internal_has_import_warning_set() const;
  public:
  void clear_import_warning_set();
  const ::TST::ImportWarningSetArchive& import_warning_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ImportWarningSetArchive* release_import_warning_set();
  ::TST::ImportWarningSetArchive* mutable_import_warning_set();
  void set_allocated_import_warning_set(::TST::ImportWarningSetArchive* import_warning_set);
  private:
  const ::TST::ImportWarningSetArchive& _internal_import_warning_set() const;
  ::TST::ImportWarningSetArchive* _internal_mutable_import_warning_set();
  public:
  void unsafe_arena_set_allocated_import_warning_set(
      ::TST::ImportWarningSetArchive* import_warning_set);
  ::TST::ImportWarningSetArchive* unsafe_arena_release_import_warning_set();

  // optional .TST.CellSpecArchive cell_spec = 12;
  bool has_cell_spec() const;
  private:
  bool _internal_has_cell_spec() const;
  public:
  void clear_cell_spec();
  const ::TST::CellSpecArchive& cell_spec() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellSpecArchive* release_cell_spec();
  ::TST::CellSpecArchive* mutable_cell_spec();
  void set_allocated_cell_spec(::TST::CellSpecArchive* cell_spec);
  private:
  const ::TST::CellSpecArchive& _internal_cell_spec() const;
  ::TST::CellSpecArchive* _internal_mutable_cell_spec();
  public:
  void unsafe_arena_set_allocated_cell_spec(
      ::TST::CellSpecArchive* cell_spec);
  ::TST::CellSpecArchive* unsafe_arena_release_cell_spec();

  // required uint32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 refcount = 2;
  bool has_refcount() const;
  private:
  bool _internal_has_refcount() const;
  public:
  void clear_refcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 refcount() const;
  void set_refcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_refcount() const;
  void _internal_set_refcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableDataList.ListEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::TSP::Reference* reference_;
  ::TSCE::FormulaArchive* formula_;
  ::TSK::FormatStructArchive* format_;
  ::TSK::CustomFormatArchive* custom_format_;
  ::TSP::Reference* rich_text_payload_;
  ::TSP::Reference* comment_storage_;
  ::TST::ImportWarningSetArchive* import_warning_set_;
  ::TST::CellSpecArchive* cell_spec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 refcount_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableDataList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableDataList) */ {
 public:
  inline TableDataList() : TableDataList(nullptr) {}
  ~TableDataList() override;
  explicit constexpr TableDataList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDataList(const TableDataList& from);
  TableDataList(TableDataList&& from) noexcept
    : TableDataList() {
    *this = ::std::move(from);
  }

  inline TableDataList& operator=(const TableDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDataList& operator=(TableDataList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDataList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDataList* internal_default_instance() {
    return reinterpret_cast<const TableDataList*>(
               &_TableDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TableDataList& a, TableDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDataList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDataList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableDataList* New() const final {
    return CreateMaybeMessage<TableDataList>(nullptr);
  }

  TableDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableDataList& from);
  void MergeFrom(const TableDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableDataList";
  }
  protected:
  explicit TableDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TableDataList_ListEntry ListEntry;

  typedef TableDataList_ListType ListType;
  static constexpr ListType STRING =
    TableDataList_ListType_STRING;
  static constexpr ListType FORMAT =
    TableDataList_ListType_FORMAT;
  static constexpr ListType FORMULA =
    TableDataList_ListType_FORMULA;
  static constexpr ListType STYLE =
    TableDataList_ListType_STYLE;
  static constexpr ListType FORMULA_ERROR =
    TableDataList_ListType_FORMULA_ERROR;
  static constexpr ListType CUSTOM_FORMAT =
    TableDataList_ListType_CUSTOM_FORMAT;
  static constexpr ListType MULTIPLE_CHOICE_LIST_FORMAT =
    TableDataList_ListType_MULTIPLE_CHOICE_LIST_FORMAT;
  static constexpr ListType RICH_TEXT_PAYLOAD =
    TableDataList_ListType_RICH_TEXT_PAYLOAD;
  static constexpr ListType CONDITIONAL_STYLE =
    TableDataList_ListType_CONDITIONAL_STYLE;
  static constexpr ListType COMMENT_STORAGE =
    TableDataList_ListType_COMMENT_STORAGE;
  static constexpr ListType IMPORT_WARNING =
    TableDataList_ListType_IMPORT_WARNING;
  static constexpr ListType CONTROL_CELL_SPEC =
    TableDataList_ListType_CONTROL_CELL_SPEC;
  static inline bool ListType_IsValid(int value) {
    return TableDataList_ListType_IsValid(value);
  }
  static constexpr ListType ListType_MIN =
    TableDataList_ListType_ListType_MIN;
  static constexpr ListType ListType_MAX =
    TableDataList_ListType_ListType_MAX;
  static constexpr int ListType_ARRAYSIZE =
    TableDataList_ListType_ListType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ListType_descriptor() {
    return TableDataList_ListType_descriptor();
  }
  template<typename T>
  static inline const std::string& ListType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ListType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ListType_Name.");
    return TableDataList_ListType_Name(enum_t_value);
  }
  static inline bool ListType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ListType* value) {
    return TableDataList_ListType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kSegmentsFieldNumber = 4,
    kNextListIDFieldNumber = 2,
    kListTypeFieldNumber = 1,
  };
  // repeated .TST.TableDataList.ListEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TST::TableDataList_ListEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >*
      mutable_entries();
  private:
  const ::TST::TableDataList_ListEntry& _internal_entries(int index) const;
  ::TST::TableDataList_ListEntry* _internal_add_entries();
  public:
  const ::TST::TableDataList_ListEntry& entries(int index) const;
  ::TST::TableDataList_ListEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >&
      entries() const;

  // repeated .TSP.Reference segments = 4;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::TSP::Reference* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_segments();
  private:
  const ::TSP::Reference& _internal_segments(int index) const;
  ::TSP::Reference* _internal_add_segments();
  public:
  const ::TSP::Reference& segments(int index) const;
  ::TSP::Reference* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      segments() const;

  // required uint32 nextListID = 2;
  bool has_nextlistid() const;
  private:
  bool _internal_has_nextlistid() const;
  public:
  void clear_nextlistid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nextlistid() const;
  void set_nextlistid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nextlistid() const;
  void _internal_set_nextlistid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TST.TableDataList.ListType listType = 1;
  bool has_listtype() const;
  private:
  bool _internal_has_listtype() const;
  public:
  void clear_listtype();
  ::TST::TableDataList_ListType listtype() const;
  void set_listtype(::TST::TableDataList_ListType value);
  private:
  ::TST::TableDataList_ListType _internal_listtype() const;
  void _internal_set_listtype(::TST::TableDataList_ListType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableDataList)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > segments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nextlistid_;
  int listtype_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableDataListSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableDataListSegment) */ {
 public:
  inline TableDataListSegment() : TableDataListSegment(nullptr) {}
  ~TableDataListSegment() override;
  explicit constexpr TableDataListSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDataListSegment(const TableDataListSegment& from);
  TableDataListSegment(TableDataListSegment&& from) noexcept
    : TableDataListSegment() {
    *this = ::std::move(from);
  }

  inline TableDataListSegment& operator=(const TableDataListSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDataListSegment& operator=(TableDataListSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDataListSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDataListSegment* internal_default_instance() {
    return reinterpret_cast<const TableDataListSegment*>(
               &_TableDataListSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TableDataListSegment& a, TableDataListSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDataListSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDataListSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableDataListSegment* New() const final {
    return CreateMaybeMessage<TableDataListSegment>(nullptr);
  }

  TableDataListSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableDataListSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableDataListSegment& from);
  void MergeFrom(const TableDataListSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDataListSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableDataListSegment";
  }
  protected:
  explicit TableDataListSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kKeyRangeFieldNumber = 2,
    kListTypeFieldNumber = 1,
  };
  // repeated .TST.TableDataList.ListEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TST::TableDataList_ListEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >*
      mutable_entries();
  private:
  const ::TST::TableDataList_ListEntry& _internal_entries(int index) const;
  ::TST::TableDataList_ListEntry* _internal_add_entries();
  public:
  const ::TST::TableDataList_ListEntry& entries(int index) const;
  ::TST::TableDataList_ListEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >&
      entries() const;

  // required .TSP.Range key_range = 2;
  bool has_key_range() const;
  private:
  bool _internal_has_key_range() const;
  public:
  void clear_key_range();
  const ::TSP::Range& key_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_key_range();
  ::TSP::Range* mutable_key_range();
  void set_allocated_key_range(::TSP::Range* key_range);
  private:
  const ::TSP::Range& _internal_key_range() const;
  ::TSP::Range* _internal_mutable_key_range();
  public:
  void unsafe_arena_set_allocated_key_range(
      ::TSP::Range* key_range);
  ::TSP::Range* unsafe_arena_release_key_range();

  // required .TST.TableDataList.ListType list_type = 1;
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  ::TST::TableDataList_ListType list_type() const;
  void set_list_type(::TST::TableDataList_ListType value);
  private:
  ::TST::TableDataList_ListType _internal_list_type() const;
  void _internal_set_list_type(::TST::TableDataList_ListType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableDataListSegment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry > entries_;
  ::TSP::Range* key_range_;
  int list_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableRBTree_Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableRBTree.Node) */ {
 public:
  inline TableRBTree_Node() : TableRBTree_Node(nullptr) {}
  ~TableRBTree_Node() override;
  explicit constexpr TableRBTree_Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableRBTree_Node(const TableRBTree_Node& from);
  TableRBTree_Node(TableRBTree_Node&& from) noexcept
    : TableRBTree_Node() {
    *this = ::std::move(from);
  }

  inline TableRBTree_Node& operator=(const TableRBTree_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableRBTree_Node& operator=(TableRBTree_Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableRBTree_Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableRBTree_Node* internal_default_instance() {
    return reinterpret_cast<const TableRBTree_Node*>(
               &_TableRBTree_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TableRBTree_Node& a, TableRBTree_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(TableRBTree_Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableRBTree_Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableRBTree_Node* New() const final {
    return CreateMaybeMessage<TableRBTree_Node>(nullptr);
  }

  TableRBTree_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableRBTree_Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableRBTree_Node& from);
  void MergeFrom(const TableRBTree_Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableRBTree_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableRBTree.Node";
  }
  protected:
  explicit TableRBTree_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required uint32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableRBTree.Node)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableRBTree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableRBTree) */ {
 public:
  inline TableRBTree() : TableRBTree(nullptr) {}
  ~TableRBTree() override;
  explicit constexpr TableRBTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableRBTree(const TableRBTree& from);
  TableRBTree(TableRBTree&& from) noexcept
    : TableRBTree() {
    *this = ::std::move(from);
  }

  inline TableRBTree& operator=(const TableRBTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableRBTree& operator=(TableRBTree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableRBTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableRBTree* internal_default_instance() {
    return reinterpret_cast<const TableRBTree*>(
               &_TableRBTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TableRBTree& a, TableRBTree& b) {
    a.Swap(&b);
  }
  inline void Swap(TableRBTree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableRBTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableRBTree* New() const final {
    return CreateMaybeMessage<TableRBTree>(nullptr);
  }

  TableRBTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableRBTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableRBTree& from);
  void MergeFrom(const TableRBTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableRBTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableRBTree";
  }
  protected:
  explicit TableRBTree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TableRBTree_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .TST.TableRBTree.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::TST::TableRBTree_Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableRBTree_Node >*
      mutable_nodes();
  private:
  const ::TST::TableRBTree_Node& _internal_nodes(int index) const;
  ::TST::TableRBTree_Node* _internal_add_nodes();
  public:
  const ::TST::TableRBTree_Node& nodes(int index) const;
  ::TST::TableRBTree_Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableRBTree_Node >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:TST.TableRBTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableRBTree_Node > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderStorageBucket_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderStorageBucket.Header) */ {
 public:
  inline HeaderStorageBucket_Header() : HeaderStorageBucket_Header(nullptr) {}
  ~HeaderStorageBucket_Header() override;
  explicit constexpr HeaderStorageBucket_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderStorageBucket_Header(const HeaderStorageBucket_Header& from);
  HeaderStorageBucket_Header(HeaderStorageBucket_Header&& from) noexcept
    : HeaderStorageBucket_Header() {
    *this = ::std::move(from);
  }

  inline HeaderStorageBucket_Header& operator=(const HeaderStorageBucket_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderStorageBucket_Header& operator=(HeaderStorageBucket_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderStorageBucket_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderStorageBucket_Header* internal_default_instance() {
    return reinterpret_cast<const HeaderStorageBucket_Header*>(
               &_HeaderStorageBucket_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(HeaderStorageBucket_Header& a, HeaderStorageBucket_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderStorageBucket_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderStorageBucket_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderStorageBucket_Header* New() const final {
    return CreateMaybeMessage<HeaderStorageBucket_Header>(nullptr);
  }

  HeaderStorageBucket_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderStorageBucket_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderStorageBucket_Header& from);
  void MergeFrom(const HeaderStorageBucket_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderStorageBucket_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderStorageBucket.Header";
  }
  protected:
  explicit HeaderStorageBucket_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellStyleFieldNumber = 5,
    kTextStyleFieldNumber = 6,
    kIndexFieldNumber = 1,
    kSizeFieldNumber = 2,
    kHidingStateFieldNumber = 3,
    kNumberOfCellsFieldNumber = 4,
  };
  // optional .TSP.Reference cell_style = 5;
  bool has_cell_style() const;
  private:
  bool _internal_has_cell_style() const;
  public:
  void clear_cell_style();
  const ::TSP::Reference& cell_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_cell_style();
  ::TSP::Reference* mutable_cell_style();
  void set_allocated_cell_style(::TSP::Reference* cell_style);
  private:
  const ::TSP::Reference& _internal_cell_style() const;
  ::TSP::Reference* _internal_mutable_cell_style();
  public:
  void unsafe_arena_set_allocated_cell_style(
      ::TSP::Reference* cell_style);
  ::TSP::Reference* unsafe_arena_release_cell_style();

  // optional .TSP.Reference text_style = 6;
  bool has_text_style() const;
  private:
  bool _internal_has_text_style() const;
  public:
  void clear_text_style();
  const ::TSP::Reference& text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_text_style();
  ::TSP::Reference* mutable_text_style();
  void set_allocated_text_style(::TSP::Reference* text_style);
  private:
  const ::TSP::Reference& _internal_text_style() const;
  ::TSP::Reference* _internal_mutable_text_style();
  public:
  void unsafe_arena_set_allocated_text_style(
      ::TSP::Reference* text_style);
  ::TSP::Reference* unsafe_arena_release_text_style();

  // required uint32 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // required uint32 hidingState = 3;
  bool has_hidingstate() const;
  private:
  bool _internal_has_hidingstate() const;
  public:
  void clear_hidingstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 hidingstate() const;
  void set_hidingstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hidingstate() const;
  void _internal_set_hidingstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 numberOfCells = 4;
  bool has_numberofcells() const;
  private:
  bool _internal_has_numberofcells() const;
  public:
  void clear_numberofcells();
  ::PROTOBUF_NAMESPACE_ID::uint32 numberofcells() const;
  void set_numberofcells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numberofcells() const;
  void _internal_set_numberofcells(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HeaderStorageBucket.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* cell_style_;
  ::TSP::Reference* text_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  float size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hidingstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numberofcells_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderStorageBucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderStorageBucket) */ {
 public:
  inline HeaderStorageBucket() : HeaderStorageBucket(nullptr) {}
  ~HeaderStorageBucket() override;
  explicit constexpr HeaderStorageBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderStorageBucket(const HeaderStorageBucket& from);
  HeaderStorageBucket(HeaderStorageBucket&& from) noexcept
    : HeaderStorageBucket() {
    *this = ::std::move(from);
  }

  inline HeaderStorageBucket& operator=(const HeaderStorageBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderStorageBucket& operator=(HeaderStorageBucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderStorageBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderStorageBucket* internal_default_instance() {
    return reinterpret_cast<const HeaderStorageBucket*>(
               &_HeaderStorageBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(HeaderStorageBucket& a, HeaderStorageBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderStorageBucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderStorageBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderStorageBucket* New() const final {
    return CreateMaybeMessage<HeaderStorageBucket>(nullptr);
  }

  HeaderStorageBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderStorageBucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderStorageBucket& from);
  void MergeFrom(const HeaderStorageBucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderStorageBucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderStorageBucket";
  }
  protected:
  explicit HeaderStorageBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeaderStorageBucket_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kBucketHashFunctionFieldNumber = 1,
  };
  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::TST::HeaderStorageBucket_Header* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderStorageBucket_Header >*
      mutable_headers();
  private:
  const ::TST::HeaderStorageBucket_Header& _internal_headers(int index) const;
  ::TST::HeaderStorageBucket_Header* _internal_add_headers();
  public:
  const ::TST::HeaderStorageBucket_Header& headers(int index) const;
  ::TST::HeaderStorageBucket_Header* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderStorageBucket_Header >&
      headers() const;

  // required uint32 bucketHashFunction = 1;
  bool has_buckethashfunction() const;
  private:
  bool _internal_has_buckethashfunction() const;
  public:
  void clear_buckethashfunction();
  ::PROTOBUF_NAMESPACE_ID::uint32 buckethashfunction() const;
  void set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buckethashfunction() const;
  void _internal_set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HeaderStorageBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderStorageBucket_Header > headers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buckethashfunction_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderStorage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderStorage) */ {
 public:
  inline HeaderStorage() : HeaderStorage(nullptr) {}
  ~HeaderStorage() override;
  explicit constexpr HeaderStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderStorage(const HeaderStorage& from);
  HeaderStorage(HeaderStorage&& from) noexcept
    : HeaderStorage() {
    *this = ::std::move(from);
  }

  inline HeaderStorage& operator=(const HeaderStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderStorage& operator=(HeaderStorage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderStorage* internal_default_instance() {
    return reinterpret_cast<const HeaderStorage*>(
               &_HeaderStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(HeaderStorage& a, HeaderStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderStorage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderStorage* New() const final {
    return CreateMaybeMessage<HeaderStorage>(nullptr);
  }

  HeaderStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderStorage& from);
  void MergeFrom(const HeaderStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderStorage";
  }
  protected:
  explicit HeaderStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 2,
    kBucketHashFunctionFieldNumber = 1,
  };
  // repeated .TSP.Reference buckets = 2;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::TSP::Reference* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_buckets();
  private:
  const ::TSP::Reference& _internal_buckets(int index) const;
  ::TSP::Reference* _internal_add_buckets();
  public:
  const ::TSP::Reference& buckets(int index) const;
  ::TSP::Reference* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      buckets() const;

  // required uint32 bucketHashFunction = 1;
  bool has_buckethashfunction() const;
  private:
  bool _internal_has_buckethashfunction() const;
  public:
  void clear_buckethashfunction();
  ::PROTOBUF_NAMESPACE_ID::uint32 buckethashfunction() const;
  void set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buckethashfunction() const;
  void _internal_set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HeaderStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > buckets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buckethashfunction_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DataStore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DataStore) */ {
 public:
  inline DataStore() : DataStore(nullptr) {}
  ~DataStore() override;
  explicit constexpr DataStore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataStore(const DataStore& from);
  DataStore(DataStore&& from) noexcept
    : DataStore() {
    *this = ::std::move(from);
  }

  inline DataStore& operator=(const DataStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStore& operator=(DataStore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStore& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataStore* internal_default_instance() {
    return reinterpret_cast<const DataStore*>(
               &_DataStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DataStore& a, DataStore& b) {
    a.Swap(&b);
  }
  inline void Swap(DataStore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataStore* New() const final {
    return CreateMaybeMessage<DataStore>(nullptr);
  }

  DataStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataStore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataStore& from);
  void MergeFrom(const DataStore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataStore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DataStore";
  }
  protected:
  explicit DataStore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowHeadersFieldNumber = 1,
    kColumnHeadersFieldNumber = 2,
    kTilesFieldNumber = 3,
    kStringTableFieldNumber = 4,
    kStyleTableFieldNumber = 5,
    kFormulaTableFieldNumber = 6,
    kRowTileTreeFieldNumber = 9,
    kColumnTileTreeFieldNumber = 10,
    kFormatTablePreBncFieldNumber = 11,
    kFormulaErrorTableFieldNumber = 12,
    kMergeRegionMapFieldNumber = 13,
    kCustomFormatTableFieldNumber = 15,
    kMultipleChoiceListFormatTableFieldNumber = 16,
    kRichTextTableFieldNumber = 17,
    kConditionalstyletableFieldNumber = 18,
    kCommentStorageTableFieldNumber = 19,
    kImportWarningSetTableFieldNumber = 20,
    kControlCellSpecTableFieldNumber = 21,
    kFormatTableFieldNumber = 22,
    kNextRowStripIDFieldNumber = 7,
    kNextColumnStripIDFieldNumber = 8,
    kStorageVersionPreBncFieldNumber = 14,
  };
  // required .TST.HeaderStorage rowHeaders = 1;
  bool has_rowheaders() const;
  private:
  bool _internal_has_rowheaders() const;
  public:
  void clear_rowheaders();
  const ::TST::HeaderStorage& rowheaders() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::HeaderStorage* release_rowheaders();
  ::TST::HeaderStorage* mutable_rowheaders();
  void set_allocated_rowheaders(::TST::HeaderStorage* rowheaders);
  private:
  const ::TST::HeaderStorage& _internal_rowheaders() const;
  ::TST::HeaderStorage* _internal_mutable_rowheaders();
  public:
  void unsafe_arena_set_allocated_rowheaders(
      ::TST::HeaderStorage* rowheaders);
  ::TST::HeaderStorage* unsafe_arena_release_rowheaders();

  // required .TSP.Reference columnHeaders = 2;
  bool has_columnheaders() const;
  private:
  bool _internal_has_columnheaders() const;
  public:
  void clear_columnheaders();
  const ::TSP::Reference& columnheaders() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_columnheaders();
  ::TSP::Reference* mutable_columnheaders();
  void set_allocated_columnheaders(::TSP::Reference* columnheaders);
  private:
  const ::TSP::Reference& _internal_columnheaders() const;
  ::TSP::Reference* _internal_mutable_columnheaders();
  public:
  void unsafe_arena_set_allocated_columnheaders(
      ::TSP::Reference* columnheaders);
  ::TSP::Reference* unsafe_arena_release_columnheaders();

  // required .TST.TileStorage tiles = 3;
  bool has_tiles() const;
  private:
  bool _internal_has_tiles() const;
  public:
  void clear_tiles();
  const ::TST::TileStorage& tiles() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TileStorage* release_tiles();
  ::TST::TileStorage* mutable_tiles();
  void set_allocated_tiles(::TST::TileStorage* tiles);
  private:
  const ::TST::TileStorage& _internal_tiles() const;
  ::TST::TileStorage* _internal_mutable_tiles();
  public:
  void unsafe_arena_set_allocated_tiles(
      ::TST::TileStorage* tiles);
  ::TST::TileStorage* unsafe_arena_release_tiles();

  // required .TSP.Reference stringTable = 4;
  bool has_stringtable() const;
  private:
  bool _internal_has_stringtable() const;
  public:
  void clear_stringtable();
  const ::TSP::Reference& stringtable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stringtable();
  ::TSP::Reference* mutable_stringtable();
  void set_allocated_stringtable(::TSP::Reference* stringtable);
  private:
  const ::TSP::Reference& _internal_stringtable() const;
  ::TSP::Reference* _internal_mutable_stringtable();
  public:
  void unsafe_arena_set_allocated_stringtable(
      ::TSP::Reference* stringtable);
  ::TSP::Reference* unsafe_arena_release_stringtable();

  // required .TSP.Reference styleTable = 5;
  bool has_styletable() const;
  private:
  bool _internal_has_styletable() const;
  public:
  void clear_styletable();
  const ::TSP::Reference& styletable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_styletable();
  ::TSP::Reference* mutable_styletable();
  void set_allocated_styletable(::TSP::Reference* styletable);
  private:
  const ::TSP::Reference& _internal_styletable() const;
  ::TSP::Reference* _internal_mutable_styletable();
  public:
  void unsafe_arena_set_allocated_styletable(
      ::TSP::Reference* styletable);
  ::TSP::Reference* unsafe_arena_release_styletable();

  // required .TSP.Reference formula_table = 6;
  bool has_formula_table() const;
  private:
  bool _internal_has_formula_table() const;
  public:
  void clear_formula_table();
  const ::TSP::Reference& formula_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formula_table();
  ::TSP::Reference* mutable_formula_table();
  void set_allocated_formula_table(::TSP::Reference* formula_table);
  private:
  const ::TSP::Reference& _internal_formula_table() const;
  ::TSP::Reference* _internal_mutable_formula_table();
  public:
  void unsafe_arena_set_allocated_formula_table(
      ::TSP::Reference* formula_table);
  ::TSP::Reference* unsafe_arena_release_formula_table();

  // required .TST.TableRBTree rowTileTree = 9;
  bool has_rowtiletree() const;
  private:
  bool _internal_has_rowtiletree() const;
  public:
  void clear_rowtiletree();
  const ::TST::TableRBTree& rowtiletree() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TableRBTree* release_rowtiletree();
  ::TST::TableRBTree* mutable_rowtiletree();
  void set_allocated_rowtiletree(::TST::TableRBTree* rowtiletree);
  private:
  const ::TST::TableRBTree& _internal_rowtiletree() const;
  ::TST::TableRBTree* _internal_mutable_rowtiletree();
  public:
  void unsafe_arena_set_allocated_rowtiletree(
      ::TST::TableRBTree* rowtiletree);
  ::TST::TableRBTree* unsafe_arena_release_rowtiletree();

  // required .TST.TableRBTree columnTileTree = 10;
  bool has_columntiletree() const;
  private:
  bool _internal_has_columntiletree() const;
  public:
  void clear_columntiletree();
  const ::TST::TableRBTree& columntiletree() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TableRBTree* release_columntiletree();
  ::TST::TableRBTree* mutable_columntiletree();
  void set_allocated_columntiletree(::TST::TableRBTree* columntiletree);
  private:
  const ::TST::TableRBTree& _internal_columntiletree() const;
  ::TST::TableRBTree* _internal_mutable_columntiletree();
  public:
  void unsafe_arena_set_allocated_columntiletree(
      ::TST::TableRBTree* columntiletree);
  ::TST::TableRBTree* unsafe_arena_release_columntiletree();

  // required .TSP.Reference format_table_pre_bnc = 11;
  bool has_format_table_pre_bnc() const;
  private:
  bool _internal_has_format_table_pre_bnc() const;
  public:
  void clear_format_table_pre_bnc();
  const ::TSP::Reference& format_table_pre_bnc() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_format_table_pre_bnc();
  ::TSP::Reference* mutable_format_table_pre_bnc();
  void set_allocated_format_table_pre_bnc(::TSP::Reference* format_table_pre_bnc);
  private:
  const ::TSP::Reference& _internal_format_table_pre_bnc() const;
  ::TSP::Reference* _internal_mutable_format_table_pre_bnc();
  public:
  void unsafe_arena_set_allocated_format_table_pre_bnc(
      ::TSP::Reference* format_table_pre_bnc);
  ::TSP::Reference* unsafe_arena_release_format_table_pre_bnc();

  // optional .TSP.Reference formulaErrorTable = 12;
  bool has_formulaerrortable() const;
  private:
  bool _internal_has_formulaerrortable() const;
  public:
  void clear_formulaerrortable();
  const ::TSP::Reference& formulaerrortable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formulaerrortable();
  ::TSP::Reference* mutable_formulaerrortable();
  void set_allocated_formulaerrortable(::TSP::Reference* formulaerrortable);
  private:
  const ::TSP::Reference& _internal_formulaerrortable() const;
  ::TSP::Reference* _internal_mutable_formulaerrortable();
  public:
  void unsafe_arena_set_allocated_formulaerrortable(
      ::TSP::Reference* formulaerrortable);
  ::TSP::Reference* unsafe_arena_release_formulaerrortable();

  // optional .TSP.Reference merge_region_map = 13;
  bool has_merge_region_map() const;
  private:
  bool _internal_has_merge_region_map() const;
  public:
  void clear_merge_region_map();
  const ::TSP::Reference& merge_region_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_merge_region_map();
  ::TSP::Reference* mutable_merge_region_map();
  void set_allocated_merge_region_map(::TSP::Reference* merge_region_map);
  private:
  const ::TSP::Reference& _internal_merge_region_map() const;
  ::TSP::Reference* _internal_mutable_merge_region_map();
  public:
  void unsafe_arena_set_allocated_merge_region_map(
      ::TSP::Reference* merge_region_map);
  ::TSP::Reference* unsafe_arena_release_merge_region_map();

  // optional .TSP.Reference customFormatTable = 15;
  bool has_customformattable() const;
  private:
  bool _internal_has_customformattable() const;
  public:
  void clear_customformattable();
  const ::TSP::Reference& customformattable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_customformattable();
  ::TSP::Reference* mutable_customformattable();
  void set_allocated_customformattable(::TSP::Reference* customformattable);
  private:
  const ::TSP::Reference& _internal_customformattable() const;
  ::TSP::Reference* _internal_mutable_customformattable();
  public:
  void unsafe_arena_set_allocated_customformattable(
      ::TSP::Reference* customformattable);
  ::TSP::Reference* unsafe_arena_release_customformattable();

  // optional .TSP.Reference multipleChoiceListFormatTable = 16;
  bool has_multiplechoicelistformattable() const;
  private:
  bool _internal_has_multiplechoicelistformattable() const;
  public:
  void clear_multiplechoicelistformattable();
  const ::TSP::Reference& multiplechoicelistformattable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_multiplechoicelistformattable();
  ::TSP::Reference* mutable_multiplechoicelistformattable();
  void set_allocated_multiplechoicelistformattable(::TSP::Reference* multiplechoicelistformattable);
  private:
  const ::TSP::Reference& _internal_multiplechoicelistformattable() const;
  ::TSP::Reference* _internal_mutable_multiplechoicelistformattable();
  public:
  void unsafe_arena_set_allocated_multiplechoicelistformattable(
      ::TSP::Reference* multiplechoicelistformattable);
  ::TSP::Reference* unsafe_arena_release_multiplechoicelistformattable();

  // optional .TSP.Reference rich_text_table = 17;
  bool has_rich_text_table() const;
  private:
  bool _internal_has_rich_text_table() const;
  public:
  void clear_rich_text_table();
  const ::TSP::Reference& rich_text_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_rich_text_table();
  ::TSP::Reference* mutable_rich_text_table();
  void set_allocated_rich_text_table(::TSP::Reference* rich_text_table);
  private:
  const ::TSP::Reference& _internal_rich_text_table() const;
  ::TSP::Reference* _internal_mutable_rich_text_table();
  public:
  void unsafe_arena_set_allocated_rich_text_table(
      ::TSP::Reference* rich_text_table);
  ::TSP::Reference* unsafe_arena_release_rich_text_table();

  // optional .TSP.Reference conditionalstyletable = 18;
  bool has_conditionalstyletable() const;
  private:
  bool _internal_has_conditionalstyletable() const;
  public:
  void clear_conditionalstyletable();
  const ::TSP::Reference& conditionalstyletable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_conditionalstyletable();
  ::TSP::Reference* mutable_conditionalstyletable();
  void set_allocated_conditionalstyletable(::TSP::Reference* conditionalstyletable);
  private:
  const ::TSP::Reference& _internal_conditionalstyletable() const;
  ::TSP::Reference* _internal_mutable_conditionalstyletable();
  public:
  void unsafe_arena_set_allocated_conditionalstyletable(
      ::TSP::Reference* conditionalstyletable);
  ::TSP::Reference* unsafe_arena_release_conditionalstyletable();

  // optional .TSP.Reference commentStorageTable = 19;
  bool has_commentstoragetable() const;
  private:
  bool _internal_has_commentstoragetable() const;
  public:
  void clear_commentstoragetable();
  const ::TSP::Reference& commentstoragetable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_commentstoragetable();
  ::TSP::Reference* mutable_commentstoragetable();
  void set_allocated_commentstoragetable(::TSP::Reference* commentstoragetable);
  private:
  const ::TSP::Reference& _internal_commentstoragetable() const;
  ::TSP::Reference* _internal_mutable_commentstoragetable();
  public:
  void unsafe_arena_set_allocated_commentstoragetable(
      ::TSP::Reference* commentstoragetable);
  ::TSP::Reference* unsafe_arena_release_commentstoragetable();

  // optional .TSP.Reference importWarningSetTable = 20;
  bool has_importwarningsettable() const;
  private:
  bool _internal_has_importwarningsettable() const;
  public:
  void clear_importwarningsettable();
  const ::TSP::Reference& importwarningsettable() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_importwarningsettable();
  ::TSP::Reference* mutable_importwarningsettable();
  void set_allocated_importwarningsettable(::TSP::Reference* importwarningsettable);
  private:
  const ::TSP::Reference& _internal_importwarningsettable() const;
  ::TSP::Reference* _internal_mutable_importwarningsettable();
  public:
  void unsafe_arena_set_allocated_importwarningsettable(
      ::TSP::Reference* importwarningsettable);
  ::TSP::Reference* unsafe_arena_release_importwarningsettable();

  // optional .TSP.Reference control_cell_spec_table = 21;
  bool has_control_cell_spec_table() const;
  private:
  bool _internal_has_control_cell_spec_table() const;
  public:
  void clear_control_cell_spec_table();
  const ::TSP::Reference& control_cell_spec_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_control_cell_spec_table();
  ::TSP::Reference* mutable_control_cell_spec_table();
  void set_allocated_control_cell_spec_table(::TSP::Reference* control_cell_spec_table);
  private:
  const ::TSP::Reference& _internal_control_cell_spec_table() const;
  ::TSP::Reference* _internal_mutable_control_cell_spec_table();
  public:
  void unsafe_arena_set_allocated_control_cell_spec_table(
      ::TSP::Reference* control_cell_spec_table);
  ::TSP::Reference* unsafe_arena_release_control_cell_spec_table();

  // optional .TSP.Reference format_table = 22;
  bool has_format_table() const;
  private:
  bool _internal_has_format_table() const;
  public:
  void clear_format_table();
  const ::TSP::Reference& format_table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_format_table();
  ::TSP::Reference* mutable_format_table();
  void set_allocated_format_table(::TSP::Reference* format_table);
  private:
  const ::TSP::Reference& _internal_format_table() const;
  ::TSP::Reference* _internal_mutable_format_table();
  public:
  void unsafe_arena_set_allocated_format_table(
      ::TSP::Reference* format_table);
  ::TSP::Reference* unsafe_arena_release_format_table();

  // required uint32 nextRowStripID = 7;
  bool has_nextrowstripid() const;
  private:
  bool _internal_has_nextrowstripid() const;
  public:
  void clear_nextrowstripid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nextrowstripid() const;
  void set_nextrowstripid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nextrowstripid() const;
  void _internal_set_nextrowstripid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nextColumnStripID = 8;
  bool has_nextcolumnstripid() const;
  private:
  bool _internal_has_nextcolumnstripid() const;
  public:
  void clear_nextcolumnstripid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nextcolumnstripid() const;
  void set_nextcolumnstripid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nextcolumnstripid() const;
  void _internal_set_nextcolumnstripid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 storage_version_pre_bnc = 14;
  bool has_storage_version_pre_bnc() const;
  private:
  bool _internal_has_storage_version_pre_bnc() const;
  public:
  void clear_storage_version_pre_bnc();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_version_pre_bnc() const;
  void set_storage_version_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_version_pre_bnc() const;
  void _internal_set_storage_version_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.DataStore)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::HeaderStorage* rowheaders_;
  ::TSP::Reference* columnheaders_;
  ::TST::TileStorage* tiles_;
  ::TSP::Reference* stringtable_;
  ::TSP::Reference* styletable_;
  ::TSP::Reference* formula_table_;
  ::TST::TableRBTree* rowtiletree_;
  ::TST::TableRBTree* columntiletree_;
  ::TSP::Reference* format_table_pre_bnc_;
  ::TSP::Reference* formulaerrortable_;
  ::TSP::Reference* merge_region_map_;
  ::TSP::Reference* customformattable_;
  ::TSP::Reference* multiplechoicelistformattable_;
  ::TSP::Reference* rich_text_table_;
  ::TSP::Reference* conditionalstyletable_;
  ::TSP::Reference* commentstoragetable_;
  ::TSP::Reference* importwarningsettable_;
  ::TSP::Reference* control_cell_spec_table_;
  ::TSP::Reference* format_table_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nextrowstripid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nextcolumnstripid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_version_pre_bnc_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableInfoArchive) */ {
 public:
  inline TableInfoArchive() : TableInfoArchive(nullptr) {}
  ~TableInfoArchive() override;
  explicit constexpr TableInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInfoArchive(const TableInfoArchive& from);
  TableInfoArchive(TableInfoArchive&& from) noexcept
    : TableInfoArchive() {
    *this = ::std::move(from);
  }

  inline TableInfoArchive& operator=(const TableInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInfoArchive& operator=(TableInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInfoArchive* internal_default_instance() {
    return reinterpret_cast<const TableInfoArchive*>(
               &_TableInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TableInfoArchive& a, TableInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableInfoArchive* New() const final {
    return CreateMaybeMessage<TableInfoArchive>(nullptr);
  }

  TableInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableInfoArchive& from);
  void MergeFrom(const TableInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableInfoArchive";
  }
  protected:
  explicit TableInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableModelFieldNumber = 2,
    kEditingStateFieldNumber = 3,
    kSummaryModelFieldNumber = 4,
    kCategoryOrderFieldNumber = 5,
    kViewColumnRowUidsFieldNumber = 6,
    kGroupByUuidFieldNumber = 7,
    kHiddenStatesUuidFieldNumber = 8,
    kPasteboardCoordMapperFieldNumber = 13,
    kLayoutEngineFieldNumber = 14,
    kFormulaCoordSpaceInPre40FieldNumber = 9,
    kFormulaCoordSpaceFieldNumber = 10,
  };
  // required .TSD.DrawableArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::DrawableArchive* release_super();
  ::TSD::DrawableArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableArchive* super);
  private:
  const ::TSD::DrawableArchive& _internal_super() const;
  ::TSD::DrawableArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableArchive* super);
  ::TSD::DrawableArchive* unsafe_arena_release_super();

  // required .TSP.Reference tableModel = 2;
  bool has_tablemodel() const;
  private:
  bool _internal_has_tablemodel() const;
  public:
  void clear_tablemodel();
  const ::TSP::Reference& tablemodel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tablemodel();
  ::TSP::Reference* mutable_tablemodel();
  void set_allocated_tablemodel(::TSP::Reference* tablemodel);
  private:
  const ::TSP::Reference& _internal_tablemodel() const;
  ::TSP::Reference* _internal_mutable_tablemodel();
  public:
  void unsafe_arena_set_allocated_tablemodel(
      ::TSP::Reference* tablemodel);
  ::TSP::Reference* unsafe_arena_release_tablemodel();

  // optional .TSP.Reference editing_state = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_editing_state() const;
  private:
  bool _internal_has_editing_state() const;
  public:
  PROTOBUF_DEPRECATED void clear_editing_state();
  PROTOBUF_DEPRECATED const ::TSP::Reference& editing_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_editing_state();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_editing_state();
  PROTOBUF_DEPRECATED void set_allocated_editing_state(::TSP::Reference* editing_state);
  private:
  const ::TSP::Reference& _internal_editing_state() const;
  ::TSP::Reference* _internal_mutable_editing_state();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_editing_state(
      ::TSP::Reference* editing_state);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_editing_state();

  // optional .TSP.Reference summary_model = 4;
  bool has_summary_model() const;
  private:
  bool _internal_has_summary_model() const;
  public:
  void clear_summary_model();
  const ::TSP::Reference& summary_model() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_summary_model();
  ::TSP::Reference* mutable_summary_model();
  void set_allocated_summary_model(::TSP::Reference* summary_model);
  private:
  const ::TSP::Reference& _internal_summary_model() const;
  ::TSP::Reference* _internal_mutable_summary_model();
  public:
  void unsafe_arena_set_allocated_summary_model(
      ::TSP::Reference* summary_model);
  ::TSP::Reference* unsafe_arena_release_summary_model();

  // optional .TSP.Reference category_order = 5;
  bool has_category_order() const;
  private:
  bool _internal_has_category_order() const;
  public:
  void clear_category_order();
  const ::TSP::Reference& category_order() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_order();
  ::TSP::Reference* mutable_category_order();
  void set_allocated_category_order(::TSP::Reference* category_order);
  private:
  const ::TSP::Reference& _internal_category_order() const;
  ::TSP::Reference* _internal_mutable_category_order();
  public:
  void unsafe_arena_set_allocated_category_order(
      ::TSP::Reference* category_order);
  ::TSP::Reference* unsafe_arena_release_category_order();

  // optional .TSP.Reference view_column_row_uids = 6;
  bool has_view_column_row_uids() const;
  private:
  bool _internal_has_view_column_row_uids() const;
  public:
  void clear_view_column_row_uids();
  const ::TSP::Reference& view_column_row_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_view_column_row_uids();
  ::TSP::Reference* mutable_view_column_row_uids();
  void set_allocated_view_column_row_uids(::TSP::Reference* view_column_row_uids);
  private:
  const ::TSP::Reference& _internal_view_column_row_uids() const;
  ::TSP::Reference* _internal_mutable_view_column_row_uids();
  public:
  void unsafe_arena_set_allocated_view_column_row_uids(
      ::TSP::Reference* view_column_row_uids);
  ::TSP::Reference* unsafe_arena_release_view_column_row_uids();

  // optional .TSP.UUID group_by_uuid = 7;
  bool has_group_by_uuid() const;
  private:
  bool _internal_has_group_by_uuid() const;
  public:
  void clear_group_by_uuid();
  const ::TSP::UUID& group_by_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uuid();
  ::TSP::UUID* mutable_group_by_uuid();
  void set_allocated_group_by_uuid(::TSP::UUID* group_by_uuid);
  private:
  const ::TSP::UUID& _internal_group_by_uuid() const;
  ::TSP::UUID* _internal_mutable_group_by_uuid();
  public:
  void unsafe_arena_set_allocated_group_by_uuid(
      ::TSP::UUID* group_by_uuid);
  ::TSP::UUID* unsafe_arena_release_group_by_uuid();

  // optional .TSP.UUID hidden_states_uuid = 8;
  bool has_hidden_states_uuid() const;
  private:
  bool _internal_has_hidden_states_uuid() const;
  public:
  void clear_hidden_states_uuid();
  const ::TSP::UUID& hidden_states_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_hidden_states_uuid();
  ::TSP::UUID* mutable_hidden_states_uuid();
  void set_allocated_hidden_states_uuid(::TSP::UUID* hidden_states_uuid);
  private:
  const ::TSP::UUID& _internal_hidden_states_uuid() const;
  ::TSP::UUID* _internal_mutable_hidden_states_uuid();
  public:
  void unsafe_arena_set_allocated_hidden_states_uuid(
      ::TSP::UUID* hidden_states_uuid);
  ::TSP::UUID* unsafe_arena_release_hidden_states_uuid();

  // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
  bool has_pasteboard_coord_mapper() const;
  private:
  bool _internal_has_pasteboard_coord_mapper() const;
  public:
  void clear_pasteboard_coord_mapper();
  const ::TSCE::CoordMapperArchive& pasteboard_coord_mapper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CoordMapperArchive* release_pasteboard_coord_mapper();
  ::TSCE::CoordMapperArchive* mutable_pasteboard_coord_mapper();
  void set_allocated_pasteboard_coord_mapper(::TSCE::CoordMapperArchive* pasteboard_coord_mapper);
  private:
  const ::TSCE::CoordMapperArchive& _internal_pasteboard_coord_mapper() const;
  ::TSCE::CoordMapperArchive* _internal_mutable_pasteboard_coord_mapper();
  public:
  void unsafe_arena_set_allocated_pasteboard_coord_mapper(
      ::TSCE::CoordMapperArchive* pasteboard_coord_mapper);
  ::TSCE::CoordMapperArchive* unsafe_arena_release_pasteboard_coord_mapper();

  // optional .TST.LayoutEngineArchive layout_engine = 14;
  bool has_layout_engine() const;
  private:
  bool _internal_has_layout_engine() const;
  public:
  void clear_layout_engine();
  const ::TST::LayoutEngineArchive& layout_engine() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::LayoutEngineArchive* release_layout_engine();
  ::TST::LayoutEngineArchive* mutable_layout_engine();
  void set_allocated_layout_engine(::TST::LayoutEngineArchive* layout_engine);
  private:
  const ::TST::LayoutEngineArchive& _internal_layout_engine() const;
  ::TST::LayoutEngineArchive* _internal_mutable_layout_engine();
  public:
  void unsafe_arena_set_allocated_layout_engine(
      ::TST::LayoutEngineArchive* layout_engine);
  ::TST::LayoutEngineArchive* unsafe_arena_release_layout_engine();

  // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_formula_coord_space_in_pre40() const;
  private:
  bool _internal_has_formula_coord_space_in_pre40() const;
  public:
  PROTOBUF_DEPRECATED void clear_formula_coord_space_in_pre40();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 formula_coord_space_in_pre40() const;
  PROTOBUF_DEPRECATED void set_formula_coord_space_in_pre40(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formula_coord_space_in_pre40() const;
  void _internal_set_formula_coord_space_in_pre40(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 formula_coord_space = 10;
  bool has_formula_coord_space() const;
  private:
  bool _internal_has_formula_coord_space() const;
  public:
  void clear_formula_coord_space();
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_coord_space() const;
  void set_formula_coord_space(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formula_coord_space() const;
  void _internal_set_formula_coord_space(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::DrawableArchive* super_;
  ::TSP::Reference* tablemodel_;
  ::TSP::Reference* editing_state_;
  ::TSP::Reference* summary_model_;
  ::TSP::Reference* category_order_;
  ::TSP::Reference* view_column_row_uids_;
  ::TSP::UUID* group_by_uuid_;
  ::TSP::UUID* hidden_states_uuid_;
  ::TSCE::CoordMapperArchive* pasteboard_coord_mapper_;
  ::TST::LayoutEngineArchive* layout_engine_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_coord_space_in_pre40_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_coord_space_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryInfoArchive) */ {
 public:
  inline CategoryInfoArchive() : CategoryInfoArchive(nullptr) {}
  ~CategoryInfoArchive() override;
  explicit constexpr CategoryInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryInfoArchive(const CategoryInfoArchive& from);
  CategoryInfoArchive(CategoryInfoArchive&& from) noexcept
    : CategoryInfoArchive() {
    *this = ::std::move(from);
  }

  inline CategoryInfoArchive& operator=(const CategoryInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryInfoArchive& operator=(CategoryInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryInfoArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryInfoArchive*>(
               &_CategoryInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CategoryInfoArchive& a, CategoryInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryInfoArchive* New() const final {
    return CreateMaybeMessage<CategoryInfoArchive>(nullptr);
  }

  CategoryInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryInfoArchive& from);
  void MergeFrom(const CategoryInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryInfoArchive";
  }
  protected:
  explicit CategoryInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTableModelFieldNumber = 2,
  };
  // required .TSD.DrawableArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::DrawableArchive* release_super();
  ::TSD::DrawableArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableArchive* super);
  private:
  const ::TSD::DrawableArchive& _internal_super() const;
  ::TSD::DrawableArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableArchive* super);
  ::TSD::DrawableArchive* unsafe_arena_release_super();

  // required .TSP.Reference tableModel = 2;
  bool has_tablemodel() const;
  private:
  bool _internal_has_tablemodel() const;
  public:
  void clear_tablemodel();
  const ::TSP::Reference& tablemodel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_tablemodel();
  ::TSP::Reference* mutable_tablemodel();
  void set_allocated_tablemodel(::TSP::Reference* tablemodel);
  private:
  const ::TSP::Reference& _internal_tablemodel() const;
  ::TSP::Reference* _internal_mutable_tablemodel();
  public:
  void unsafe_arena_set_allocated_tablemodel(
      ::TSP::Reference* tablemodel);
  ::TSP::Reference* unsafe_arena_release_tablemodel();

  // @@protoc_insertion_point(class_scope:TST.CategoryInfoArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::DrawableArchive* super_;
  ::TSP::Reference* tablemodel_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class WPTableInfoArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.WPTableInfoArchive) */ {
 public:
  inline WPTableInfoArchive() : WPTableInfoArchive(nullptr) {}
  ~WPTableInfoArchive() override;
  explicit constexpr WPTableInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WPTableInfoArchive(const WPTableInfoArchive& from);
  WPTableInfoArchive(WPTableInfoArchive&& from) noexcept
    : WPTableInfoArchive() {
    *this = ::std::move(from);
  }

  inline WPTableInfoArchive& operator=(const WPTableInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline WPTableInfoArchive& operator=(WPTableInfoArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WPTableInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const WPTableInfoArchive* internal_default_instance() {
    return reinterpret_cast<const WPTableInfoArchive*>(
               &_WPTableInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WPTableInfoArchive& a, WPTableInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(WPTableInfoArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WPTableInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WPTableInfoArchive* New() const final {
    return CreateMaybeMessage<WPTableInfoArchive>(nullptr);
  }

  WPTableInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WPTableInfoArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WPTableInfoArchive& from);
  void MergeFrom(const WPTableInfoArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WPTableInfoArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.WPTableInfoArchive";
  }
  protected:
  explicit WPTableInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageFieldNumber = 2,
  };
  // required .TST.TableInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TableInfoArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TableInfoArchive* release_super();
  ::TST::TableInfoArchive* mutable_super();
  void set_allocated_super(::TST::TableInfoArchive* super);
  private:
  const ::TST::TableInfoArchive& _internal_super() const;
  ::TST::TableInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TableInfoArchive* super);
  ::TST::TableInfoArchive* unsafe_arena_release_super();

  // optional .TSP.Reference storage = 2;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // @@protoc_insertion_point(class_scope:TST.WPTableInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::TableInfoArchive* super_;
  ::TSP::Reference* storage_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableStyleNetworkArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableStyleNetworkArchive) */ {
 public:
  inline TableStyleNetworkArchive() : TableStyleNetworkArchive(nullptr) {}
  ~TableStyleNetworkArchive() override;
  explicit constexpr TableStyleNetworkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableStyleNetworkArchive(const TableStyleNetworkArchive& from);
  TableStyleNetworkArchive(TableStyleNetworkArchive&& from) noexcept
    : TableStyleNetworkArchive() {
    *this = ::std::move(from);
  }

  inline TableStyleNetworkArchive& operator=(const TableStyleNetworkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStyleNetworkArchive& operator=(TableStyleNetworkArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableStyleNetworkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableStyleNetworkArchive* internal_default_instance() {
    return reinterpret_cast<const TableStyleNetworkArchive*>(
               &_TableStyleNetworkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TableStyleNetworkArchive& a, TableStyleNetworkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableStyleNetworkArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableStyleNetworkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableStyleNetworkArchive* New() const final {
    return CreateMaybeMessage<TableStyleNetworkArchive>(nullptr);
  }

  TableStyleNetworkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableStyleNetworkArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableStyleNetworkArchive& from);
  void MergeFrom(const TableStyleNetworkArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableStyleNetworkArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableStyleNetworkArchive";
  }
  protected:
  explicit TableStyleNetworkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyTextStyleFieldNumber = 1,
    kHeaderRowTextStyleFieldNumber = 2,
    kHeaderColumnTextStyleFieldNumber = 3,
    kFooterRowTextStyleFieldNumber = 4,
    kBodyCellStyleFieldNumber = 5,
    kHeaderRowStyleFieldNumber = 6,
    kHeaderColumnStyleFieldNumber = 7,
    kFooterRowStyleFieldNumber = 8,
    kTableStyleFieldNumber = 9,
    kTableNameStyleFieldNumber = 10,
    kTableNameShapeStyleFieldNumber = 11,
    kCategoryLevel1TextStyleFieldNumber = 13,
    kCategoryLevel2TextStyleFieldNumber = 14,
    kCategoryLevel3TextStyleFieldNumber = 15,
    kCategoryLevel4TextStyleFieldNumber = 16,
    kCategoryLevel5TextStyleFieldNumber = 17,
    kCategoryLevel1StyleFieldNumber = 18,
    kCategoryLevel2StyleFieldNumber = 19,
    kCategoryLevel3StyleFieldNumber = 20,
    kCategoryLevel4StyleFieldNumber = 21,
    kCategoryLevel5StyleFieldNumber = 22,
    kLabelLevel1TextStyleFieldNumber = 23,
    kLabelLevel2TextStyleFieldNumber = 24,
    kLabelLevel3TextStyleFieldNumber = 25,
    kLabelLevel4TextStyleFieldNumber = 26,
    kLabelLevel5TextStyleFieldNumber = 27,
    kLabelLevel1StyleFieldNumber = 28,
    kLabelLevel2StyleFieldNumber = 29,
    kLabelLevel3StyleFieldNumber = 30,
    kLabelLevel4StyleFieldNumber = 31,
    kLabelLevel5StyleFieldNumber = 32,
    kPresetIdFieldNumber = 12,
  };
  // required .TSP.Reference body_text_style = 1;
  bool has_body_text_style() const;
  private:
  bool _internal_has_body_text_style() const;
  public:
  void clear_body_text_style();
  const ::TSP::Reference& body_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_body_text_style();
  ::TSP::Reference* mutable_body_text_style();
  void set_allocated_body_text_style(::TSP::Reference* body_text_style);
  private:
  const ::TSP::Reference& _internal_body_text_style() const;
  ::TSP::Reference* _internal_mutable_body_text_style();
  public:
  void unsafe_arena_set_allocated_body_text_style(
      ::TSP::Reference* body_text_style);
  ::TSP::Reference* unsafe_arena_release_body_text_style();

  // required .TSP.Reference header_row_text_style = 2;
  bool has_header_row_text_style() const;
  private:
  bool _internal_has_header_row_text_style() const;
  public:
  void clear_header_row_text_style();
  const ::TSP::Reference& header_row_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_row_text_style();
  ::TSP::Reference* mutable_header_row_text_style();
  void set_allocated_header_row_text_style(::TSP::Reference* header_row_text_style);
  private:
  const ::TSP::Reference& _internal_header_row_text_style() const;
  ::TSP::Reference* _internal_mutable_header_row_text_style();
  public:
  void unsafe_arena_set_allocated_header_row_text_style(
      ::TSP::Reference* header_row_text_style);
  ::TSP::Reference* unsafe_arena_release_header_row_text_style();

  // required .TSP.Reference header_column_text_style = 3;
  bool has_header_column_text_style() const;
  private:
  bool _internal_has_header_column_text_style() const;
  public:
  void clear_header_column_text_style();
  const ::TSP::Reference& header_column_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_column_text_style();
  ::TSP::Reference* mutable_header_column_text_style();
  void set_allocated_header_column_text_style(::TSP::Reference* header_column_text_style);
  private:
  const ::TSP::Reference& _internal_header_column_text_style() const;
  ::TSP::Reference* _internal_mutable_header_column_text_style();
  public:
  void unsafe_arena_set_allocated_header_column_text_style(
      ::TSP::Reference* header_column_text_style);
  ::TSP::Reference* unsafe_arena_release_header_column_text_style();

  // required .TSP.Reference footer_row_text_style = 4;
  bool has_footer_row_text_style() const;
  private:
  bool _internal_has_footer_row_text_style() const;
  public:
  void clear_footer_row_text_style();
  const ::TSP::Reference& footer_row_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_footer_row_text_style();
  ::TSP::Reference* mutable_footer_row_text_style();
  void set_allocated_footer_row_text_style(::TSP::Reference* footer_row_text_style);
  private:
  const ::TSP::Reference& _internal_footer_row_text_style() const;
  ::TSP::Reference* _internal_mutable_footer_row_text_style();
  public:
  void unsafe_arena_set_allocated_footer_row_text_style(
      ::TSP::Reference* footer_row_text_style);
  ::TSP::Reference* unsafe_arena_release_footer_row_text_style();

  // required .TSP.Reference body_cell_style = 5;
  bool has_body_cell_style() const;
  private:
  bool _internal_has_body_cell_style() const;
  public:
  void clear_body_cell_style();
  const ::TSP::Reference& body_cell_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_body_cell_style();
  ::TSP::Reference* mutable_body_cell_style();
  void set_allocated_body_cell_style(::TSP::Reference* body_cell_style);
  private:
  const ::TSP::Reference& _internal_body_cell_style() const;
  ::TSP::Reference* _internal_mutable_body_cell_style();
  public:
  void unsafe_arena_set_allocated_body_cell_style(
      ::TSP::Reference* body_cell_style);
  ::TSP::Reference* unsafe_arena_release_body_cell_style();

  // required .TSP.Reference header_row_style = 6;
  bool has_header_row_style() const;
  private:
  bool _internal_has_header_row_style() const;
  public:
  void clear_header_row_style();
  const ::TSP::Reference& header_row_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_row_style();
  ::TSP::Reference* mutable_header_row_style();
  void set_allocated_header_row_style(::TSP::Reference* header_row_style);
  private:
  const ::TSP::Reference& _internal_header_row_style() const;
  ::TSP::Reference* _internal_mutable_header_row_style();
  public:
  void unsafe_arena_set_allocated_header_row_style(
      ::TSP::Reference* header_row_style);
  ::TSP::Reference* unsafe_arena_release_header_row_style();

  // required .TSP.Reference header_column_style = 7;
  bool has_header_column_style() const;
  private:
  bool _internal_has_header_column_style() const;
  public:
  void clear_header_column_style();
  const ::TSP::Reference& header_column_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_column_style();
  ::TSP::Reference* mutable_header_column_style();
  void set_allocated_header_column_style(::TSP::Reference* header_column_style);
  private:
  const ::TSP::Reference& _internal_header_column_style() const;
  ::TSP::Reference* _internal_mutable_header_column_style();
  public:
  void unsafe_arena_set_allocated_header_column_style(
      ::TSP::Reference* header_column_style);
  ::TSP::Reference* unsafe_arena_release_header_column_style();

  // required .TSP.Reference footer_row_style = 8;
  bool has_footer_row_style() const;
  private:
  bool _internal_has_footer_row_style() const;
  public:
  void clear_footer_row_style();
  const ::TSP::Reference& footer_row_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_footer_row_style();
  ::TSP::Reference* mutable_footer_row_style();
  void set_allocated_footer_row_style(::TSP::Reference* footer_row_style);
  private:
  const ::TSP::Reference& _internal_footer_row_style() const;
  ::TSP::Reference* _internal_mutable_footer_row_style();
  public:
  void unsafe_arena_set_allocated_footer_row_style(
      ::TSP::Reference* footer_row_style);
  ::TSP::Reference* unsafe_arena_release_footer_row_style();

  // required .TSP.Reference table_style = 9;
  bool has_table_style() const;
  private:
  bool _internal_has_table_style() const;
  public:
  void clear_table_style();
  const ::TSP::Reference& table_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_style();
  ::TSP::Reference* mutable_table_style();
  void set_allocated_table_style(::TSP::Reference* table_style);
  private:
  const ::TSP::Reference& _internal_table_style() const;
  ::TSP::Reference* _internal_mutable_table_style();
  public:
  void unsafe_arena_set_allocated_table_style(
      ::TSP::Reference* table_style);
  ::TSP::Reference* unsafe_arena_release_table_style();

  // optional .TSP.Reference table_name_style = 10;
  bool has_table_name_style() const;
  private:
  bool _internal_has_table_name_style() const;
  public:
  void clear_table_name_style();
  const ::TSP::Reference& table_name_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_name_style();
  ::TSP::Reference* mutable_table_name_style();
  void set_allocated_table_name_style(::TSP::Reference* table_name_style);
  private:
  const ::TSP::Reference& _internal_table_name_style() const;
  ::TSP::Reference* _internal_mutable_table_name_style();
  public:
  void unsafe_arena_set_allocated_table_name_style(
      ::TSP::Reference* table_name_style);
  ::TSP::Reference* unsafe_arena_release_table_name_style();

  // optional .TSP.Reference table_name_shape_style = 11;
  bool has_table_name_shape_style() const;
  private:
  bool _internal_has_table_name_shape_style() const;
  public:
  void clear_table_name_shape_style();
  const ::TSP::Reference& table_name_shape_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_name_shape_style();
  ::TSP::Reference* mutable_table_name_shape_style();
  void set_allocated_table_name_shape_style(::TSP::Reference* table_name_shape_style);
  private:
  const ::TSP::Reference& _internal_table_name_shape_style() const;
  ::TSP::Reference* _internal_mutable_table_name_shape_style();
  public:
  void unsafe_arena_set_allocated_table_name_shape_style(
      ::TSP::Reference* table_name_shape_style);
  ::TSP::Reference* unsafe_arena_release_table_name_shape_style();

  // optional .TSP.Reference category_level_1_text_style = 13;
  bool has_category_level_1_text_style() const;
  private:
  bool _internal_has_category_level_1_text_style() const;
  public:
  void clear_category_level_1_text_style();
  const ::TSP::Reference& category_level_1_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_1_text_style();
  ::TSP::Reference* mutable_category_level_1_text_style();
  void set_allocated_category_level_1_text_style(::TSP::Reference* category_level_1_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_1_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_1_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_1_text_style(
      ::TSP::Reference* category_level_1_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_1_text_style();

  // optional .TSP.Reference category_level_2_text_style = 14;
  bool has_category_level_2_text_style() const;
  private:
  bool _internal_has_category_level_2_text_style() const;
  public:
  void clear_category_level_2_text_style();
  const ::TSP::Reference& category_level_2_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_2_text_style();
  ::TSP::Reference* mutable_category_level_2_text_style();
  void set_allocated_category_level_2_text_style(::TSP::Reference* category_level_2_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_2_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_2_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_2_text_style(
      ::TSP::Reference* category_level_2_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_2_text_style();

  // optional .TSP.Reference category_level_3_text_style = 15;
  bool has_category_level_3_text_style() const;
  private:
  bool _internal_has_category_level_3_text_style() const;
  public:
  void clear_category_level_3_text_style();
  const ::TSP::Reference& category_level_3_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_3_text_style();
  ::TSP::Reference* mutable_category_level_3_text_style();
  void set_allocated_category_level_3_text_style(::TSP::Reference* category_level_3_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_3_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_3_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_3_text_style(
      ::TSP::Reference* category_level_3_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_3_text_style();

  // optional .TSP.Reference category_level_4_text_style = 16;
  bool has_category_level_4_text_style() const;
  private:
  bool _internal_has_category_level_4_text_style() const;
  public:
  void clear_category_level_4_text_style();
  const ::TSP::Reference& category_level_4_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_4_text_style();
  ::TSP::Reference* mutable_category_level_4_text_style();
  void set_allocated_category_level_4_text_style(::TSP::Reference* category_level_4_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_4_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_4_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_4_text_style(
      ::TSP::Reference* category_level_4_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_4_text_style();

  // optional .TSP.Reference category_level_5_text_style = 17;
  bool has_category_level_5_text_style() const;
  private:
  bool _internal_has_category_level_5_text_style() const;
  public:
  void clear_category_level_5_text_style();
  const ::TSP::Reference& category_level_5_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_5_text_style();
  ::TSP::Reference* mutable_category_level_5_text_style();
  void set_allocated_category_level_5_text_style(::TSP::Reference* category_level_5_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_5_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_5_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_5_text_style(
      ::TSP::Reference* category_level_5_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_5_text_style();

  // optional .TSP.Reference category_level_1_style = 18;
  bool has_category_level_1_style() const;
  private:
  bool _internal_has_category_level_1_style() const;
  public:
  void clear_category_level_1_style();
  const ::TSP::Reference& category_level_1_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_1_style();
  ::TSP::Reference* mutable_category_level_1_style();
  void set_allocated_category_level_1_style(::TSP::Reference* category_level_1_style);
  private:
  const ::TSP::Reference& _internal_category_level_1_style() const;
  ::TSP::Reference* _internal_mutable_category_level_1_style();
  public:
  void unsafe_arena_set_allocated_category_level_1_style(
      ::TSP::Reference* category_level_1_style);
  ::TSP::Reference* unsafe_arena_release_category_level_1_style();

  // optional .TSP.Reference category_level_2_style = 19;
  bool has_category_level_2_style() const;
  private:
  bool _internal_has_category_level_2_style() const;
  public:
  void clear_category_level_2_style();
  const ::TSP::Reference& category_level_2_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_2_style();
  ::TSP::Reference* mutable_category_level_2_style();
  void set_allocated_category_level_2_style(::TSP::Reference* category_level_2_style);
  private:
  const ::TSP::Reference& _internal_category_level_2_style() const;
  ::TSP::Reference* _internal_mutable_category_level_2_style();
  public:
  void unsafe_arena_set_allocated_category_level_2_style(
      ::TSP::Reference* category_level_2_style);
  ::TSP::Reference* unsafe_arena_release_category_level_2_style();

  // optional .TSP.Reference category_level_3_style = 20;
  bool has_category_level_3_style() const;
  private:
  bool _internal_has_category_level_3_style() const;
  public:
  void clear_category_level_3_style();
  const ::TSP::Reference& category_level_3_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_3_style();
  ::TSP::Reference* mutable_category_level_3_style();
  void set_allocated_category_level_3_style(::TSP::Reference* category_level_3_style);
  private:
  const ::TSP::Reference& _internal_category_level_3_style() const;
  ::TSP::Reference* _internal_mutable_category_level_3_style();
  public:
  void unsafe_arena_set_allocated_category_level_3_style(
      ::TSP::Reference* category_level_3_style);
  ::TSP::Reference* unsafe_arena_release_category_level_3_style();

  // optional .TSP.Reference category_level_4_style = 21;
  bool has_category_level_4_style() const;
  private:
  bool _internal_has_category_level_4_style() const;
  public:
  void clear_category_level_4_style();
  const ::TSP::Reference& category_level_4_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_4_style();
  ::TSP::Reference* mutable_category_level_4_style();
  void set_allocated_category_level_4_style(::TSP::Reference* category_level_4_style);
  private:
  const ::TSP::Reference& _internal_category_level_4_style() const;
  ::TSP::Reference* _internal_mutable_category_level_4_style();
  public:
  void unsafe_arena_set_allocated_category_level_4_style(
      ::TSP::Reference* category_level_4_style);
  ::TSP::Reference* unsafe_arena_release_category_level_4_style();

  // optional .TSP.Reference category_level_5_style = 22;
  bool has_category_level_5_style() const;
  private:
  bool _internal_has_category_level_5_style() const;
  public:
  void clear_category_level_5_style();
  const ::TSP::Reference& category_level_5_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_5_style();
  ::TSP::Reference* mutable_category_level_5_style();
  void set_allocated_category_level_5_style(::TSP::Reference* category_level_5_style);
  private:
  const ::TSP::Reference& _internal_category_level_5_style() const;
  ::TSP::Reference* _internal_mutable_category_level_5_style();
  public:
  void unsafe_arena_set_allocated_category_level_5_style(
      ::TSP::Reference* category_level_5_style);
  ::TSP::Reference* unsafe_arena_release_category_level_5_style();

  // optional .TSP.Reference label_level_1_text_style = 23;
  bool has_label_level_1_text_style() const;
  private:
  bool _internal_has_label_level_1_text_style() const;
  public:
  void clear_label_level_1_text_style();
  const ::TSP::Reference& label_level_1_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_1_text_style();
  ::TSP::Reference* mutable_label_level_1_text_style();
  void set_allocated_label_level_1_text_style(::TSP::Reference* label_level_1_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_1_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_1_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_1_text_style(
      ::TSP::Reference* label_level_1_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_1_text_style();

  // optional .TSP.Reference label_level_2_text_style = 24;
  bool has_label_level_2_text_style() const;
  private:
  bool _internal_has_label_level_2_text_style() const;
  public:
  void clear_label_level_2_text_style();
  const ::TSP::Reference& label_level_2_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_2_text_style();
  ::TSP::Reference* mutable_label_level_2_text_style();
  void set_allocated_label_level_2_text_style(::TSP::Reference* label_level_2_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_2_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_2_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_2_text_style(
      ::TSP::Reference* label_level_2_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_2_text_style();

  // optional .TSP.Reference label_level_3_text_style = 25;
  bool has_label_level_3_text_style() const;
  private:
  bool _internal_has_label_level_3_text_style() const;
  public:
  void clear_label_level_3_text_style();
  const ::TSP::Reference& label_level_3_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_3_text_style();
  ::TSP::Reference* mutable_label_level_3_text_style();
  void set_allocated_label_level_3_text_style(::TSP::Reference* label_level_3_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_3_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_3_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_3_text_style(
      ::TSP::Reference* label_level_3_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_3_text_style();

  // optional .TSP.Reference label_level_4_text_style = 26;
  bool has_label_level_4_text_style() const;
  private:
  bool _internal_has_label_level_4_text_style() const;
  public:
  void clear_label_level_4_text_style();
  const ::TSP::Reference& label_level_4_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_4_text_style();
  ::TSP::Reference* mutable_label_level_4_text_style();
  void set_allocated_label_level_4_text_style(::TSP::Reference* label_level_4_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_4_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_4_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_4_text_style(
      ::TSP::Reference* label_level_4_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_4_text_style();

  // optional .TSP.Reference label_level_5_text_style = 27;
  bool has_label_level_5_text_style() const;
  private:
  bool _internal_has_label_level_5_text_style() const;
  public:
  void clear_label_level_5_text_style();
  const ::TSP::Reference& label_level_5_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_5_text_style();
  ::TSP::Reference* mutable_label_level_5_text_style();
  void set_allocated_label_level_5_text_style(::TSP::Reference* label_level_5_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_5_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_5_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_5_text_style(
      ::TSP::Reference* label_level_5_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_5_text_style();

  // optional .TSP.Reference label_level_1_style = 28;
  bool has_label_level_1_style() const;
  private:
  bool _internal_has_label_level_1_style() const;
  public:
  void clear_label_level_1_style();
  const ::TSP::Reference& label_level_1_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_1_style();
  ::TSP::Reference* mutable_label_level_1_style();
  void set_allocated_label_level_1_style(::TSP::Reference* label_level_1_style);
  private:
  const ::TSP::Reference& _internal_label_level_1_style() const;
  ::TSP::Reference* _internal_mutable_label_level_1_style();
  public:
  void unsafe_arena_set_allocated_label_level_1_style(
      ::TSP::Reference* label_level_1_style);
  ::TSP::Reference* unsafe_arena_release_label_level_1_style();

  // optional .TSP.Reference label_level_2_style = 29;
  bool has_label_level_2_style() const;
  private:
  bool _internal_has_label_level_2_style() const;
  public:
  void clear_label_level_2_style();
  const ::TSP::Reference& label_level_2_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_2_style();
  ::TSP::Reference* mutable_label_level_2_style();
  void set_allocated_label_level_2_style(::TSP::Reference* label_level_2_style);
  private:
  const ::TSP::Reference& _internal_label_level_2_style() const;
  ::TSP::Reference* _internal_mutable_label_level_2_style();
  public:
  void unsafe_arena_set_allocated_label_level_2_style(
      ::TSP::Reference* label_level_2_style);
  ::TSP::Reference* unsafe_arena_release_label_level_2_style();

  // optional .TSP.Reference label_level_3_style = 30;
  bool has_label_level_3_style() const;
  private:
  bool _internal_has_label_level_3_style() const;
  public:
  void clear_label_level_3_style();
  const ::TSP::Reference& label_level_3_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_3_style();
  ::TSP::Reference* mutable_label_level_3_style();
  void set_allocated_label_level_3_style(::TSP::Reference* label_level_3_style);
  private:
  const ::TSP::Reference& _internal_label_level_3_style() const;
  ::TSP::Reference* _internal_mutable_label_level_3_style();
  public:
  void unsafe_arena_set_allocated_label_level_3_style(
      ::TSP::Reference* label_level_3_style);
  ::TSP::Reference* unsafe_arena_release_label_level_3_style();

  // optional .TSP.Reference label_level_4_style = 31;
  bool has_label_level_4_style() const;
  private:
  bool _internal_has_label_level_4_style() const;
  public:
  void clear_label_level_4_style();
  const ::TSP::Reference& label_level_4_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_4_style();
  ::TSP::Reference* mutable_label_level_4_style();
  void set_allocated_label_level_4_style(::TSP::Reference* label_level_4_style);
  private:
  const ::TSP::Reference& _internal_label_level_4_style() const;
  ::TSP::Reference* _internal_mutable_label_level_4_style();
  public:
  void unsafe_arena_set_allocated_label_level_4_style(
      ::TSP::Reference* label_level_4_style);
  ::TSP::Reference* unsafe_arena_release_label_level_4_style();

  // optional .TSP.Reference label_level_5_style = 32;
  bool has_label_level_5_style() const;
  private:
  bool _internal_has_label_level_5_style() const;
  public:
  void clear_label_level_5_style();
  const ::TSP::Reference& label_level_5_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_5_style();
  ::TSP::Reference* mutable_label_level_5_style();
  void set_allocated_label_level_5_style(::TSP::Reference* label_level_5_style);
  private:
  const ::TSP::Reference& _internal_label_level_5_style() const;
  ::TSP::Reference* _internal_mutable_label_level_5_style();
  public:
  void unsafe_arena_set_allocated_label_level_5_style(
      ::TSP::Reference* label_level_5_style);
  ::TSP::Reference* unsafe_arena_release_label_level_5_style();

  // optional uint32 preset_id = 12;
  bool has_preset_id() const;
  private:
  bool _internal_has_preset_id() const;
  public:
  void clear_preset_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_id() const;
  void set_preset_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preset_id() const;
  void _internal_set_preset_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableStyleNetworkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* body_text_style_;
  ::TSP::Reference* header_row_text_style_;
  ::TSP::Reference* header_column_text_style_;
  ::TSP::Reference* footer_row_text_style_;
  ::TSP::Reference* body_cell_style_;
  ::TSP::Reference* header_row_style_;
  ::TSP::Reference* header_column_style_;
  ::TSP::Reference* footer_row_style_;
  ::TSP::Reference* table_style_;
  ::TSP::Reference* table_name_style_;
  ::TSP::Reference* table_name_shape_style_;
  ::TSP::Reference* category_level_1_text_style_;
  ::TSP::Reference* category_level_2_text_style_;
  ::TSP::Reference* category_level_3_text_style_;
  ::TSP::Reference* category_level_4_text_style_;
  ::TSP::Reference* category_level_5_text_style_;
  ::TSP::Reference* category_level_1_style_;
  ::TSP::Reference* category_level_2_style_;
  ::TSP::Reference* category_level_3_style_;
  ::TSP::Reference* category_level_4_style_;
  ::TSP::Reference* category_level_5_style_;
  ::TSP::Reference* label_level_1_text_style_;
  ::TSP::Reference* label_level_2_text_style_;
  ::TSP::Reference* label_level_3_text_style_;
  ::TSP::Reference* label_level_4_text_style_;
  ::TSP::Reference* label_level_5_text_style_;
  ::TSP::Reference* label_level_1_style_;
  ::TSP::Reference* label_level_2_style_;
  ::TSP::Reference* label_level_3_style_;
  ::TSP::Reference* label_level_4_style_;
  ::TSP::Reference* label_level_5_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_id_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSortOrderArchive_SortRuleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSortOrderArchive.SortRuleArchive) */ {
 public:
  inline TableSortOrderArchive_SortRuleArchive() : TableSortOrderArchive_SortRuleArchive(nullptr) {}
  ~TableSortOrderArchive_SortRuleArchive() override;
  explicit constexpr TableSortOrderArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSortOrderArchive_SortRuleArchive(const TableSortOrderArchive_SortRuleArchive& from);
  TableSortOrderArchive_SortRuleArchive(TableSortOrderArchive_SortRuleArchive&& from) noexcept
    : TableSortOrderArchive_SortRuleArchive() {
    *this = ::std::move(from);
  }

  inline TableSortOrderArchive_SortRuleArchive& operator=(const TableSortOrderArchive_SortRuleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSortOrderArchive_SortRuleArchive& operator=(TableSortOrderArchive_SortRuleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSortOrderArchive_SortRuleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSortOrderArchive_SortRuleArchive* internal_default_instance() {
    return reinterpret_cast<const TableSortOrderArchive_SortRuleArchive*>(
               &_TableSortOrderArchive_SortRuleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TableSortOrderArchive_SortRuleArchive& a, TableSortOrderArchive_SortRuleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSortOrderArchive_SortRuleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSortOrderArchive_SortRuleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSortOrderArchive_SortRuleArchive* New() const final {
    return CreateMaybeMessage<TableSortOrderArchive_SortRuleArchive>(nullptr);
  }

  TableSortOrderArchive_SortRuleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSortOrderArchive_SortRuleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSortOrderArchive_SortRuleArchive& from);
  void MergeFrom(const TableSortOrderArchive_SortRuleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSortOrderArchive_SortRuleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSortOrderArchive.SortRuleArchive";
  }
  protected:
  explicit TableSortOrderArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TableSortOrderArchive_SortRuleArchive_Direction Direction;
  static constexpr Direction ascending =
    TableSortOrderArchive_SortRuleArchive_Direction_ascending;
  static constexpr Direction descending =
    TableSortOrderArchive_SortRuleArchive_Direction_descending;
  static inline bool Direction_IsValid(int value) {
    return TableSortOrderArchive_SortRuleArchive_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    TableSortOrderArchive_SortRuleArchive_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    TableSortOrderArchive_SortRuleArchive_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    TableSortOrderArchive_SortRuleArchive_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return TableSortOrderArchive_SortRuleArchive_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return TableSortOrderArchive_SortRuleArchive_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Direction* value) {
    return TableSortOrderArchive_SortRuleArchive_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // required uint32 column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::TableSortOrderArchive_SortRuleArchive_Direction direction() const;
  void set_direction(::TST::TableSortOrderArchive_SortRuleArchive_Direction value);
  private:
  ::TST::TableSortOrderArchive_SortRuleArchive_Direction _internal_direction() const;
  void _internal_set_direction(::TST::TableSortOrderArchive_SortRuleArchive_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableSortOrderArchive.SortRuleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  int direction_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSortOrderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSortOrderArchive) */ {
 public:
  inline TableSortOrderArchive() : TableSortOrderArchive(nullptr) {}
  ~TableSortOrderArchive() override;
  explicit constexpr TableSortOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSortOrderArchive(const TableSortOrderArchive& from);
  TableSortOrderArchive(TableSortOrderArchive&& from) noexcept
    : TableSortOrderArchive() {
    *this = ::std::move(from);
  }

  inline TableSortOrderArchive& operator=(const TableSortOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSortOrderArchive& operator=(TableSortOrderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSortOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSortOrderArchive* internal_default_instance() {
    return reinterpret_cast<const TableSortOrderArchive*>(
               &_TableSortOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TableSortOrderArchive& a, TableSortOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSortOrderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSortOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSortOrderArchive* New() const final {
    return CreateMaybeMessage<TableSortOrderArchive>(nullptr);
  }

  TableSortOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSortOrderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSortOrderArchive& from);
  void MergeFrom(const TableSortOrderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSortOrderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSortOrderArchive";
  }
  protected:
  explicit TableSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TableSortOrderArchive_SortRuleArchive SortRuleArchive;

  typedef TableSortOrderArchive_SortType SortType;
  static constexpr SortType entire_table =
    TableSortOrderArchive_SortType_entire_table;
  static constexpr SortType row_range =
    TableSortOrderArchive_SortType_row_range;
  static inline bool SortType_IsValid(int value) {
    return TableSortOrderArchive_SortType_IsValid(value);
  }
  static constexpr SortType SortType_MIN =
    TableSortOrderArchive_SortType_SortType_MIN;
  static constexpr SortType SortType_MAX =
    TableSortOrderArchive_SortType_SortType_MAX;
  static constexpr int SortType_ARRAYSIZE =
    TableSortOrderArchive_SortType_SortType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortType_descriptor() {
    return TableSortOrderArchive_SortType_descriptor();
  }
  template<typename T>
  static inline const std::string& SortType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortType_Name.");
    return TableSortOrderArchive_SortType_Name(enum_t_value);
  }
  static inline bool SortType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SortType* value) {
    return TableSortOrderArchive_SortType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::TST::TableSortOrderArchive_SortRuleArchive* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderArchive_SortRuleArchive >*
      mutable_rules();
  private:
  const ::TST::TableSortOrderArchive_SortRuleArchive& _internal_rules(int index) const;
  ::TST::TableSortOrderArchive_SortRuleArchive* _internal_add_rules();
  public:
  const ::TST::TableSortOrderArchive_SortRuleArchive& rules(int index) const;
  ::TST::TableSortOrderArchive_SortRuleArchive* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderArchive_SortRuleArchive >&
      rules() const;

  // required .TST.TableSortOrderArchive.SortType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TST::TableSortOrderArchive_SortType type() const;
  void set_type(::TST::TableSortOrderArchive_SortType value);
  private:
  ::TST::TableSortOrderArchive_SortType _internal_type() const;
  void _internal_set_type(::TST::TableSortOrderArchive_SortType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableSortOrderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderArchive_SortRuleArchive > rules_;
  int type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSortOrderUIDArchive_SortRuleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSortOrderUIDArchive.SortRuleArchive) */ {
 public:
  inline TableSortOrderUIDArchive_SortRuleArchive() : TableSortOrderUIDArchive_SortRuleArchive(nullptr) {}
  ~TableSortOrderUIDArchive_SortRuleArchive() override;
  explicit constexpr TableSortOrderUIDArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSortOrderUIDArchive_SortRuleArchive(const TableSortOrderUIDArchive_SortRuleArchive& from);
  TableSortOrderUIDArchive_SortRuleArchive(TableSortOrderUIDArchive_SortRuleArchive&& from) noexcept
    : TableSortOrderUIDArchive_SortRuleArchive() {
    *this = ::std::move(from);
  }

  inline TableSortOrderUIDArchive_SortRuleArchive& operator=(const TableSortOrderUIDArchive_SortRuleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSortOrderUIDArchive_SortRuleArchive& operator=(TableSortOrderUIDArchive_SortRuleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSortOrderUIDArchive_SortRuleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSortOrderUIDArchive_SortRuleArchive* internal_default_instance() {
    return reinterpret_cast<const TableSortOrderUIDArchive_SortRuleArchive*>(
               &_TableSortOrderUIDArchive_SortRuleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TableSortOrderUIDArchive_SortRuleArchive& a, TableSortOrderUIDArchive_SortRuleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSortOrderUIDArchive_SortRuleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSortOrderUIDArchive_SortRuleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSortOrderUIDArchive_SortRuleArchive* New() const final {
    return CreateMaybeMessage<TableSortOrderUIDArchive_SortRuleArchive>(nullptr);
  }

  TableSortOrderUIDArchive_SortRuleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSortOrderUIDArchive_SortRuleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSortOrderUIDArchive_SortRuleArchive& from);
  void MergeFrom(const TableSortOrderUIDArchive_SortRuleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSortOrderUIDArchive_SortRuleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSortOrderUIDArchive.SortRuleArchive";
  }
  protected:
  explicit TableSortOrderUIDArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TableSortOrderUIDArchive_SortRuleArchive_Direction Direction;
  static constexpr Direction ascending =
    TableSortOrderUIDArchive_SortRuleArchive_Direction_ascending;
  static constexpr Direction descending =
    TableSortOrderUIDArchive_SortRuleArchive_Direction_descending;
  static inline bool Direction_IsValid(int value) {
    return TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    TableSortOrderUIDArchive_SortRuleArchive_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return TableSortOrderUIDArchive_SortRuleArchive_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Direction* value) {
    return TableSortOrderUIDArchive_SortRuleArchive_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // required .TSP.UUID column_uid = 1;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction direction() const;
  void set_direction(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction value);
  private:
  ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction _internal_direction() const;
  void _internal_set_direction(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableSortOrderUIDArchive.SortRuleArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* column_uid_;
  int direction_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableSortOrderUIDArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableSortOrderUIDArchive) */ {
 public:
  inline TableSortOrderUIDArchive() : TableSortOrderUIDArchive(nullptr) {}
  ~TableSortOrderUIDArchive() override;
  explicit constexpr TableSortOrderUIDArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableSortOrderUIDArchive(const TableSortOrderUIDArchive& from);
  TableSortOrderUIDArchive(TableSortOrderUIDArchive&& from) noexcept
    : TableSortOrderUIDArchive() {
    *this = ::std::move(from);
  }

  inline TableSortOrderUIDArchive& operator=(const TableSortOrderUIDArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableSortOrderUIDArchive& operator=(TableSortOrderUIDArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableSortOrderUIDArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableSortOrderUIDArchive* internal_default_instance() {
    return reinterpret_cast<const TableSortOrderUIDArchive*>(
               &_TableSortOrderUIDArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TableSortOrderUIDArchive& a, TableSortOrderUIDArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableSortOrderUIDArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableSortOrderUIDArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableSortOrderUIDArchive* New() const final {
    return CreateMaybeMessage<TableSortOrderUIDArchive>(nullptr);
  }

  TableSortOrderUIDArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableSortOrderUIDArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableSortOrderUIDArchive& from);
  void MergeFrom(const TableSortOrderUIDArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableSortOrderUIDArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableSortOrderUIDArchive";
  }
  protected:
  explicit TableSortOrderUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TableSortOrderUIDArchive_SortRuleArchive SortRuleArchive;

  typedef TableSortOrderUIDArchive_SortType SortType;
  static constexpr SortType entire_table =
    TableSortOrderUIDArchive_SortType_entire_table;
  static constexpr SortType row_range =
    TableSortOrderUIDArchive_SortType_row_range;
  static inline bool SortType_IsValid(int value) {
    return TableSortOrderUIDArchive_SortType_IsValid(value);
  }
  static constexpr SortType SortType_MIN =
    TableSortOrderUIDArchive_SortType_SortType_MIN;
  static constexpr SortType SortType_MAX =
    TableSortOrderUIDArchive_SortType_SortType_MAX;
  static constexpr int SortType_ARRAYSIZE =
    TableSortOrderUIDArchive_SortType_SortType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortType_descriptor() {
    return TableSortOrderUIDArchive_SortType_descriptor();
  }
  template<typename T>
  static inline const std::string& SortType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortType_Name.");
    return TableSortOrderUIDArchive_SortType_Name(enum_t_value);
  }
  static inline bool SortType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SortType* value) {
    return TableSortOrderUIDArchive_SortType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::TST::TableSortOrderUIDArchive_SortRuleArchive* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderUIDArchive_SortRuleArchive >*
      mutable_rules();
  private:
  const ::TST::TableSortOrderUIDArchive_SortRuleArchive& _internal_rules(int index) const;
  ::TST::TableSortOrderUIDArchive_SortRuleArchive* _internal_add_rules();
  public:
  const ::TST::TableSortOrderUIDArchive_SortRuleArchive& rules(int index) const;
  ::TST::TableSortOrderUIDArchive_SortRuleArchive* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderUIDArchive_SortRuleArchive >&
      rules() const;

  // required .TST.TableSortOrderUIDArchive.SortType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TST::TableSortOrderUIDArchive_SortType type() const;
  void set_type(::TST::TableSortOrderUIDArchive_SortType value);
  private:
  ::TST::TableSortOrderUIDArchive_SortType _internal_type() const;
  void _internal_set_type(::TST::TableSortOrderUIDArchive_SortType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableSortOrderUIDArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderUIDArchive_SortRuleArchive > rules_;
  int type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class SortRuleReferenceTrackerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.SortRuleReferenceTrackerArchive) */ {
 public:
  inline SortRuleReferenceTrackerArchive() : SortRuleReferenceTrackerArchive(nullptr) {}
  ~SortRuleReferenceTrackerArchive() override;
  explicit constexpr SortRuleReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortRuleReferenceTrackerArchive(const SortRuleReferenceTrackerArchive& from);
  SortRuleReferenceTrackerArchive(SortRuleReferenceTrackerArchive&& from) noexcept
    : SortRuleReferenceTrackerArchive() {
    *this = ::std::move(from);
  }

  inline SortRuleReferenceTrackerArchive& operator=(const SortRuleReferenceTrackerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortRuleReferenceTrackerArchive& operator=(SortRuleReferenceTrackerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortRuleReferenceTrackerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortRuleReferenceTrackerArchive* internal_default_instance() {
    return reinterpret_cast<const SortRuleReferenceTrackerArchive*>(
               &_SortRuleReferenceTrackerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SortRuleReferenceTrackerArchive& a, SortRuleReferenceTrackerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SortRuleReferenceTrackerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortRuleReferenceTrackerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SortRuleReferenceTrackerArchive* New() const final {
    return CreateMaybeMessage<SortRuleReferenceTrackerArchive>(nullptr);
  }

  SortRuleReferenceTrackerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SortRuleReferenceTrackerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SortRuleReferenceTrackerArchive& from);
  void MergeFrom(const SortRuleReferenceTrackerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortRuleReferenceTrackerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.SortRuleReferenceTrackerArchive";
  }
  protected:
  explicit SortRuleReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceTrackerFieldNumber = 1,
  };
  // required .TSP.Reference reference_tracker = 1;
  bool has_reference_tracker() const;
  private:
  bool _internal_has_reference_tracker() const;
  public:
  void clear_reference_tracker();
  const ::TSP::Reference& reference_tracker() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_reference_tracker();
  ::TSP::Reference* mutable_reference_tracker();
  void set_allocated_reference_tracker(::TSP::Reference* reference_tracker);
  private:
  const ::TSP::Reference& _internal_reference_tracker() const;
  ::TSP::Reference* _internal_mutable_reference_tracker();
  public:
  void unsafe_arena_set_allocated_reference_tracker(
      ::TSP::Reference* reference_tracker);
  ::TSP::Reference* unsafe_arena_release_reference_tracker();

  // @@protoc_insertion_point(class_scope:TST.SortRuleReferenceTrackerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* reference_tracker_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellRegion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellRegion) */ {
 public:
  inline CellRegion() : CellRegion(nullptr) {}
  ~CellRegion() override;
  explicit constexpr CellRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellRegion(const CellRegion& from);
  CellRegion(CellRegion&& from) noexcept
    : CellRegion() {
    *this = ::std::move(from);
  }

  inline CellRegion& operator=(const CellRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellRegion& operator=(CellRegion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellRegion* internal_default_instance() {
    return reinterpret_cast<const CellRegion*>(
               &_CellRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CellRegion& a, CellRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(CellRegion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellRegion* New() const final {
    return CreateMaybeMessage<CellRegion>(nullptr);
  }

  CellRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellRegion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellRegion& from);
  void MergeFrom(const CellRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellRegion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellRegion";
  }
  protected:
  explicit CellRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRangesFieldNumber = 1,
  };
  // repeated .TST.CellRange cell_ranges = 1;
  int cell_ranges_size() const;
  private:
  int _internal_cell_ranges_size() const;
  public:
  void clear_cell_ranges();
  ::TST::CellRange* mutable_cell_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
      mutable_cell_ranges();
  private:
  const ::TST::CellRange& _internal_cell_ranges(int index) const;
  ::TST::CellRange* _internal_add_cell_ranges();
  public:
  const ::TST::CellRange& cell_ranges(int index) const;
  ::TST::CellRange* add_cell_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
      cell_ranges() const;

  // @@protoc_insertion_point(class_scope:TST.CellRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange > cell_ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellUIDRegionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellUIDRegionArchive) */ {
 public:
  inline CellUIDRegionArchive() : CellUIDRegionArchive(nullptr) {}
  ~CellUIDRegionArchive() override;
  explicit constexpr CellUIDRegionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellUIDRegionArchive(const CellUIDRegionArchive& from);
  CellUIDRegionArchive(CellUIDRegionArchive&& from) noexcept
    : CellUIDRegionArchive() {
    *this = ::std::move(from);
  }

  inline CellUIDRegionArchive& operator=(const CellUIDRegionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellUIDRegionArchive& operator=(CellUIDRegionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellUIDRegionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellUIDRegionArchive* internal_default_instance() {
    return reinterpret_cast<const CellUIDRegionArchive*>(
               &_CellUIDRegionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CellUIDRegionArchive& a, CellUIDRegionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellUIDRegionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellUIDRegionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellUIDRegionArchive* New() const final {
    return CreateMaybeMessage<CellUIDRegionArchive>(nullptr);
  }

  CellUIDRegionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellUIDRegionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellUIDRegionArchive& from);
  void MergeFrom(const CellUIDRegionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellUIDRegionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellUIDRegionArchive";
  }
  protected:
  explicit CellUIDRegionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellUidRangesFieldNumber = 1,
  };
  // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
  int cell_uid_ranges_size() const;
  private:
  int _internal_cell_uid_ranges_size() const;
  public:
  void clear_cell_uid_ranges();
  ::TSP::UUIDRectArchive* mutable_cell_uid_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
      mutable_cell_uid_ranges();
  private:
  const ::TSP::UUIDRectArchive& _internal_cell_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* _internal_add_cell_uid_ranges();
  public:
  const ::TSP::UUIDRectArchive& cell_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* add_cell_uid_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
      cell_uid_ranges() const;

  // @@protoc_insertion_point(class_scope:TST.CellUIDRegionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive > cell_uid_ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StructuredTextImportRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StructuredTextImportRecord) */ {
 public:
  inline StructuredTextImportRecord() : StructuredTextImportRecord(nullptr) {}
  ~StructuredTextImportRecord() override;
  explicit constexpr StructuredTextImportRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredTextImportRecord(const StructuredTextImportRecord& from);
  StructuredTextImportRecord(StructuredTextImportRecord&& from) noexcept
    : StructuredTextImportRecord() {
    *this = ::std::move(from);
  }

  inline StructuredTextImportRecord& operator=(const StructuredTextImportRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredTextImportRecord& operator=(StructuredTextImportRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructuredTextImportRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredTextImportRecord* internal_default_instance() {
    return reinterpret_cast<const StructuredTextImportRecord*>(
               &_StructuredTextImportRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(StructuredTextImportRecord& a, StructuredTextImportRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(StructuredTextImportRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredTextImportRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructuredTextImportRecord* New() const final {
    return CreateMaybeMessage<StructuredTextImportRecord>(nullptr);
  }

  StructuredTextImportRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructuredTextImportRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructuredTextImportRecord& from);
  void MergeFrom(const StructuredTextImportRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructuredTextImportRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StructuredTextImportRecord";
  }
  protected:
  explicit StructuredTextImportRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImportSourceFieldNumber = 2,
    kSourceDataFieldNumber = 4,
    kImportSettingsFieldNumber = 1,
    kImportedRegionFieldNumber = 7,
    kImportDateFieldNumber = 3,
    kSourceEncodingFieldNumber = 5,
    kSourceRowCountFieldNumber = 8,
    kSourceColumnCountFieldNumber = 9,
    kConfidenceFieldNumber = 6,
  };
  // optional string import_source = 2;
  bool has_import_source() const;
  private:
  bool _internal_has_import_source() const;
  public:
  void clear_import_source();
  const std::string& import_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_import_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_import_source();
  std::string* release_import_source();
  void set_allocated_import_source(std::string* import_source);
  private:
  const std::string& _internal_import_source() const;
  void _internal_set_import_source(const std::string& value);
  std::string* _internal_mutable_import_source();
  public:

  // optional bytes source_data = 4;
  bool has_source_data() const;
  private:
  bool _internal_has_source_data() const;
  public:
  void clear_source_data();
  const std::string& source_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_data();
  std::string* release_source_data();
  void set_allocated_source_data(std::string* source_data);
  private:
  const std::string& _internal_source_data() const;
  void _internal_set_source_data(const std::string& value);
  std::string* _internal_mutable_source_data();
  public:

  // required .TSK.StructuredTextImportSettings import_settings = 1;
  bool has_import_settings() const;
  private:
  bool _internal_has_import_settings() const;
  public:
  void clear_import_settings();
  const ::TSK::StructuredTextImportSettings& import_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::StructuredTextImportSettings* release_import_settings();
  ::TSK::StructuredTextImportSettings* mutable_import_settings();
  void set_allocated_import_settings(::TSK::StructuredTextImportSettings* import_settings);
  private:
  const ::TSK::StructuredTextImportSettings& _internal_import_settings() const;
  ::TSK::StructuredTextImportSettings* _internal_mutable_import_settings();
  public:
  void unsafe_arena_set_allocated_import_settings(
      ::TSK::StructuredTextImportSettings* import_settings);
  ::TSK::StructuredTextImportSettings* unsafe_arena_release_import_settings();

  // optional .TST.CellRegion imported_region = 7;
  bool has_imported_region() const;
  private:
  bool _internal_has_imported_region() const;
  public:
  void clear_imported_region();
  const ::TST::CellRegion& imported_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRegion* release_imported_region();
  ::TST::CellRegion* mutable_imported_region();
  void set_allocated_imported_region(::TST::CellRegion* imported_region);
  private:
  const ::TST::CellRegion& _internal_imported_region() const;
  ::TST::CellRegion* _internal_mutable_imported_region();
  public:
  void unsafe_arena_set_allocated_imported_region(
      ::TST::CellRegion* imported_region);
  ::TST::CellRegion* unsafe_arena_release_imported_region();

  // optional double import_date = 3;
  bool has_import_date() const;
  private:
  bool _internal_has_import_date() const;
  public:
  void clear_import_date();
  double import_date() const;
  void set_import_date(double value);
  private:
  double _internal_import_date() const;
  void _internal_set_import_date(double value);
  public:

  // optional uint64 source_encoding = 5;
  bool has_source_encoding() const;
  private:
  bool _internal_has_source_encoding() const;
  public:
  void clear_source_encoding();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_encoding() const;
  void set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_encoding() const;
  void _internal_set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 source_row_count = 8;
  bool has_source_row_count() const;
  private:
  bool _internal_has_source_row_count() const;
  public:
  void clear_source_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_row_count() const;
  void set_source_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_row_count() const;
  void _internal_set_source_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 source_column_count = 9;
  bool has_source_column_count() const;
  private:
  bool _internal_has_source_column_count() const;
  public:
  void clear_source_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_column_count() const;
  void set_source_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_column_count() const;
  void _internal_set_source_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float confidence = 6;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StructuredTextImportRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr import_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_data_;
  ::TSK::StructuredTextImportSettings* import_settings_;
  ::TST::CellRegion* imported_region_;
  double import_date_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_encoding_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_row_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_column_count_;
  float confidence_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableModelArchive) */ {
 public:
  inline TableModelArchive() : TableModelArchive(nullptr) {}
  ~TableModelArchive() override;
  explicit constexpr TableModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableModelArchive(const TableModelArchive& from);
  TableModelArchive(TableModelArchive&& from) noexcept
    : TableModelArchive() {
    *this = ::std::move(from);
  }

  inline TableModelArchive& operator=(const TableModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableModelArchive& operator=(TableModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableModelArchive* internal_default_instance() {
    return reinterpret_cast<const TableModelArchive*>(
               &_TableModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TableModelArchive& a, TableModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableModelArchive* New() const final {
    return CreateMaybeMessage<TableModelArchive>(nullptr);
  }

  TableModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableModelArchive& from);
  void MergeFrom(const TableModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableModelArchive";
  }
  protected:
  explicit TableModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kTableNameFieldNumber = 8,
    kFromTableIdFieldNumber = 43,
    kFromGroupByUidFieldNumber = 83,
    kTableStyleFieldNumber = 3,
    kBaseDataStoreFieldNumber = 4,
    kProviderFieldNumber = 5,
    kBodyCellStyleFieldNumber = 18,
    kHeaderRowStyleFieldNumber = 19,
    kHeaderColumnStyleFieldNumber = 20,
    kFooterRowStyleFieldNumber = 21,
    kOriginOffsetFieldNumber = 23,
    kBodyTextStyleFieldNumber = 24,
    kHeaderRowTextStyleFieldNumber = 25,
    kHeaderColumnTextStyleFieldNumber = 26,
    kFooterRowTextStyleFieldNumber = 27,
    kTableNameStyleFieldNumber = 30,
    kHiddenStateFormulaOwnerForColumnsFieldNumber = 34,
    kHiddenStateFormulaOwnerForRowsFieldNumber = 35,
    kTableNameShapeStyleFieldNumber = 36,
    kFilterSetFieldNumber = 38,
    kConditionalStyleFormulaOwnerIdFieldNumber = 39,
    kSortOrderFieldNumber = 44,
    kSortRuleReferenceTrackerFieldNumber = 45,
    kBaseColumnRowUidsFieldNumber = 46,
    kMergeOwnerFieldNumber = 47,
    kTableStylePresetFieldNumber = 48,
    kStrokeSidecarFieldNumber = 49,
    kTextImportRecordFieldNumber = 52,
    kCategoryLevel1StyleFieldNumber = 60,
    kCategoryLevel2StyleFieldNumber = 61,
    kCategoryLevel3StyleFieldNumber = 62,
    kCategoryLevel4StyleFieldNumber = 63,
    kCategoryLevel5StyleFieldNumber = 64,
    kCategoryLevel1TextStyleFieldNumber = 65,
    kCategoryLevel2TextStyleFieldNumber = 66,
    kCategoryLevel3TextStyleFieldNumber = 67,
    kCategoryLevel4TextStyleFieldNumber = 68,
    kCategoryLevel5TextStyleFieldNumber = 69,
    kHiddenStatesOwnerFieldNumber = 70,
    kLabelLevel1StyleFieldNumber = 71,
    kLabelLevel2StyleFieldNumber = 72,
    kLabelLevel3StyleFieldNumber = 73,
    kLabelLevel4StyleFieldNumber = 74,
    kLabelLevel5StyleFieldNumber = 75,
    kLabelLevel1TextStyleFieldNumber = 76,
    kLabelLevel2TextStyleFieldNumber = 77,
    kLabelLevel3TextStyleFieldNumber = 78,
    kLabelLevel4TextStyleFieldNumber = 79,
    kLabelLevel5TextStyleFieldNumber = 80,
    kCategoryOwnerFieldNumber = 81,
    kPencilAnnotationOwnerFieldNumber = 82,
    kHauntedOwnerFieldNumber = 84,
    kNumberOfRowsFieldNumber = 6,
    kNumberOfColumnsFieldNumber = 7,
    kNumberOfHeaderRowsFieldNumber = 9,
    kNumberOfHeaderColumnsFieldNumber = 10,
    kNumberOfFooterRowsFieldNumber = 11,
    kNumberOfHiddenRowsFieldNumber = 14,
    kDefaultRowHeightFieldNumber = 16,
    kDefaultColumnWidthFieldNumber = 17,
    kNumberOfHiddenColumnsFieldNumber = 15,
    kHeaderColumnsFrozenFieldNumber = 13,
    kRepeatingHeaderRowsEnabledFieldNumber = 29,
    kRepeatingHeaderColumnsEnabledFieldNumber = 32,
    kStyleApplyClearsAllFieldNumber = 31,
    kPresetIndexFieldNumber = 28,
    kWasCutFieldNumber = 50,
    kTableNameEnabledFieldNumber = 22,
    kTableNameBorderEnabledFieldNumber = 37,
    kHeaderRowsFrozenFieldNumber = 12,
    kTableNameHeightFieldNumber = 33,
    kNumberOfFilteredRowsFieldNumber = 40,
    kNumberOfUserHiddenRowsFieldNumber = 41,
    kNumberOfUserHiddenColumnsFieldNumber = 42,
    kPresetNeedsStrongOwnershipFieldNumber = 51,
  };
  // required string table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  const std::string& table_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_id();
  std::string* release_table_id();
  void set_allocated_table_id(std::string* table_id);
  private:
  const std::string& _internal_table_id() const;
  void _internal_set_table_id(const std::string& value);
  std::string* _internal_mutable_table_id();
  public:

  // required string table_name = 8;
  bool has_table_name() const;
  private:
  bool _internal_has_table_name() const;
  public:
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // optional string from_table_id = 43;
  bool has_from_table_id() const;
  private:
  bool _internal_has_from_table_id() const;
  public:
  void clear_from_table_id();
  const std::string& from_table_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_table_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_table_id();
  std::string* release_from_table_id();
  void set_allocated_from_table_id(std::string* from_table_id);
  private:
  const std::string& _internal_from_table_id() const;
  void _internal_set_from_table_id(const std::string& value);
  std::string* _internal_mutable_from_table_id();
  public:

  // optional string from_group_by_uid = 83;
  bool has_from_group_by_uid() const;
  private:
  bool _internal_has_from_group_by_uid() const;
  public:
  void clear_from_group_by_uid();
  const std::string& from_group_by_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_group_by_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_group_by_uid();
  std::string* release_from_group_by_uid();
  void set_allocated_from_group_by_uid(std::string* from_group_by_uid);
  private:
  const std::string& _internal_from_group_by_uid() const;
  void _internal_set_from_group_by_uid(const std::string& value);
  std::string* _internal_mutable_from_group_by_uid();
  public:

  // required .TSP.Reference table_style = 3;
  bool has_table_style() const;
  private:
  bool _internal_has_table_style() const;
  public:
  void clear_table_style();
  const ::TSP::Reference& table_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_style();
  ::TSP::Reference* mutable_table_style();
  void set_allocated_table_style(::TSP::Reference* table_style);
  private:
  const ::TSP::Reference& _internal_table_style() const;
  ::TSP::Reference* _internal_mutable_table_style();
  public:
  void unsafe_arena_set_allocated_table_style(
      ::TSP::Reference* table_style);
  ::TSP::Reference* unsafe_arena_release_table_style();

  // required .TST.DataStore base_data_store = 4;
  bool has_base_data_store() const;
  private:
  bool _internal_has_base_data_store() const;
  public:
  void clear_base_data_store();
  const ::TST::DataStore& base_data_store() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::DataStore* release_base_data_store();
  ::TST::DataStore* mutable_base_data_store();
  void set_allocated_base_data_store(::TST::DataStore* base_data_store);
  private:
  const ::TST::DataStore& _internal_base_data_store() const;
  ::TST::DataStore* _internal_mutable_base_data_store();
  public:
  void unsafe_arena_set_allocated_base_data_store(
      ::TST::DataStore* base_data_store);
  ::TST::DataStore* unsafe_arena_release_base_data_store();

  // optional .TSP.Reference provider = 5;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::TSP::Reference& provider() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_provider();
  ::TSP::Reference* mutable_provider();
  void set_allocated_provider(::TSP::Reference* provider);
  private:
  const ::TSP::Reference& _internal_provider() const;
  ::TSP::Reference* _internal_mutable_provider();
  public:
  void unsafe_arena_set_allocated_provider(
      ::TSP::Reference* provider);
  ::TSP::Reference* unsafe_arena_release_provider();

  // required .TSP.Reference body_cell_style = 18;
  bool has_body_cell_style() const;
  private:
  bool _internal_has_body_cell_style() const;
  public:
  void clear_body_cell_style();
  const ::TSP::Reference& body_cell_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_body_cell_style();
  ::TSP::Reference* mutable_body_cell_style();
  void set_allocated_body_cell_style(::TSP::Reference* body_cell_style);
  private:
  const ::TSP::Reference& _internal_body_cell_style() const;
  ::TSP::Reference* _internal_mutable_body_cell_style();
  public:
  void unsafe_arena_set_allocated_body_cell_style(
      ::TSP::Reference* body_cell_style);
  ::TSP::Reference* unsafe_arena_release_body_cell_style();

  // required .TSP.Reference header_row_style = 19;
  bool has_header_row_style() const;
  private:
  bool _internal_has_header_row_style() const;
  public:
  void clear_header_row_style();
  const ::TSP::Reference& header_row_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_row_style();
  ::TSP::Reference* mutable_header_row_style();
  void set_allocated_header_row_style(::TSP::Reference* header_row_style);
  private:
  const ::TSP::Reference& _internal_header_row_style() const;
  ::TSP::Reference* _internal_mutable_header_row_style();
  public:
  void unsafe_arena_set_allocated_header_row_style(
      ::TSP::Reference* header_row_style);
  ::TSP::Reference* unsafe_arena_release_header_row_style();

  // required .TSP.Reference header_column_style = 20;
  bool has_header_column_style() const;
  private:
  bool _internal_has_header_column_style() const;
  public:
  void clear_header_column_style();
  const ::TSP::Reference& header_column_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_column_style();
  ::TSP::Reference* mutable_header_column_style();
  void set_allocated_header_column_style(::TSP::Reference* header_column_style);
  private:
  const ::TSP::Reference& _internal_header_column_style() const;
  ::TSP::Reference* _internal_mutable_header_column_style();
  public:
  void unsafe_arena_set_allocated_header_column_style(
      ::TSP::Reference* header_column_style);
  ::TSP::Reference* unsafe_arena_release_header_column_style();

  // required .TSP.Reference footer_row_style = 21;
  bool has_footer_row_style() const;
  private:
  bool _internal_has_footer_row_style() const;
  public:
  void clear_footer_row_style();
  const ::TSP::Reference& footer_row_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_footer_row_style();
  ::TSP::Reference* mutable_footer_row_style();
  void set_allocated_footer_row_style(::TSP::Reference* footer_row_style);
  private:
  const ::TSP::Reference& _internal_footer_row_style() const;
  ::TSP::Reference* _internal_mutable_footer_row_style();
  public:
  void unsafe_arena_set_allocated_footer_row_style(
      ::TSP::Reference* footer_row_style);
  ::TSP::Reference* unsafe_arena_release_footer_row_style();

  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_origin_offset() const;
  private:
  bool _internal_has_origin_offset() const;
  public:
  PROTOBUF_DEPRECATED void clear_origin_offset();
  PROTOBUF_DEPRECATED const ::TST::CellID& origin_offset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TST::CellID* release_origin_offset();
  PROTOBUF_DEPRECATED ::TST::CellID* mutable_origin_offset();
  PROTOBUF_DEPRECATED void set_allocated_origin_offset(::TST::CellID* origin_offset);
  private:
  const ::TST::CellID& _internal_origin_offset() const;
  ::TST::CellID* _internal_mutable_origin_offset();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_origin_offset(
      ::TST::CellID* origin_offset);
  PROTOBUF_DEPRECATED ::TST::CellID* unsafe_arena_release_origin_offset();

  // required .TSP.Reference body_text_style = 24;
  bool has_body_text_style() const;
  private:
  bool _internal_has_body_text_style() const;
  public:
  void clear_body_text_style();
  const ::TSP::Reference& body_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_body_text_style();
  ::TSP::Reference* mutable_body_text_style();
  void set_allocated_body_text_style(::TSP::Reference* body_text_style);
  private:
  const ::TSP::Reference& _internal_body_text_style() const;
  ::TSP::Reference* _internal_mutable_body_text_style();
  public:
  void unsafe_arena_set_allocated_body_text_style(
      ::TSP::Reference* body_text_style);
  ::TSP::Reference* unsafe_arena_release_body_text_style();

  // required .TSP.Reference header_row_text_style = 25;
  bool has_header_row_text_style() const;
  private:
  bool _internal_has_header_row_text_style() const;
  public:
  void clear_header_row_text_style();
  const ::TSP::Reference& header_row_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_row_text_style();
  ::TSP::Reference* mutable_header_row_text_style();
  void set_allocated_header_row_text_style(::TSP::Reference* header_row_text_style);
  private:
  const ::TSP::Reference& _internal_header_row_text_style() const;
  ::TSP::Reference* _internal_mutable_header_row_text_style();
  public:
  void unsafe_arena_set_allocated_header_row_text_style(
      ::TSP::Reference* header_row_text_style);
  ::TSP::Reference* unsafe_arena_release_header_row_text_style();

  // required .TSP.Reference header_column_text_style = 26;
  bool has_header_column_text_style() const;
  private:
  bool _internal_has_header_column_text_style() const;
  public:
  void clear_header_column_text_style();
  const ::TSP::Reference& header_column_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_header_column_text_style();
  ::TSP::Reference* mutable_header_column_text_style();
  void set_allocated_header_column_text_style(::TSP::Reference* header_column_text_style);
  private:
  const ::TSP::Reference& _internal_header_column_text_style() const;
  ::TSP::Reference* _internal_mutable_header_column_text_style();
  public:
  void unsafe_arena_set_allocated_header_column_text_style(
      ::TSP::Reference* header_column_text_style);
  ::TSP::Reference* unsafe_arena_release_header_column_text_style();

  // required .TSP.Reference footer_row_text_style = 27;
  bool has_footer_row_text_style() const;
  private:
  bool _internal_has_footer_row_text_style() const;
  public:
  void clear_footer_row_text_style();
  const ::TSP::Reference& footer_row_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_footer_row_text_style();
  ::TSP::Reference* mutable_footer_row_text_style();
  void set_allocated_footer_row_text_style(::TSP::Reference* footer_row_text_style);
  private:
  const ::TSP::Reference& _internal_footer_row_text_style() const;
  ::TSP::Reference* _internal_mutable_footer_row_text_style();
  public:
  void unsafe_arena_set_allocated_footer_row_text_style(
      ::TSP::Reference* footer_row_text_style);
  ::TSP::Reference* unsafe_arena_release_footer_row_text_style();

  // optional .TSP.Reference table_name_style = 30;
  bool has_table_name_style() const;
  private:
  bool _internal_has_table_name_style() const;
  public:
  void clear_table_name_style();
  const ::TSP::Reference& table_name_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_name_style();
  ::TSP::Reference* mutable_table_name_style();
  void set_allocated_table_name_style(::TSP::Reference* table_name_style);
  private:
  const ::TSP::Reference& _internal_table_name_style() const;
  ::TSP::Reference* _internal_mutable_table_name_style();
  public:
  void unsafe_arena_set_allocated_table_name_style(
      ::TSP::Reference* table_name_style);
  ::TSP::Reference* unsafe_arena_release_table_name_style();

  // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
  bool has_hidden_state_formula_owner_for_columns() const;
  private:
  bool _internal_has_hidden_state_formula_owner_for_columns() const;
  public:
  void clear_hidden_state_formula_owner_for_columns();
  const ::TSP::Reference& hidden_state_formula_owner_for_columns() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_hidden_state_formula_owner_for_columns();
  ::TSP::Reference* mutable_hidden_state_formula_owner_for_columns();
  void set_allocated_hidden_state_formula_owner_for_columns(::TSP::Reference* hidden_state_formula_owner_for_columns);
  private:
  const ::TSP::Reference& _internal_hidden_state_formula_owner_for_columns() const;
  ::TSP::Reference* _internal_mutable_hidden_state_formula_owner_for_columns();
  public:
  void unsafe_arena_set_allocated_hidden_state_formula_owner_for_columns(
      ::TSP::Reference* hidden_state_formula_owner_for_columns);
  ::TSP::Reference* unsafe_arena_release_hidden_state_formula_owner_for_columns();

  // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
  bool has_hidden_state_formula_owner_for_rows() const;
  private:
  bool _internal_has_hidden_state_formula_owner_for_rows() const;
  public:
  void clear_hidden_state_formula_owner_for_rows();
  const ::TSP::Reference& hidden_state_formula_owner_for_rows() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_hidden_state_formula_owner_for_rows();
  ::TSP::Reference* mutable_hidden_state_formula_owner_for_rows();
  void set_allocated_hidden_state_formula_owner_for_rows(::TSP::Reference* hidden_state_formula_owner_for_rows);
  private:
  const ::TSP::Reference& _internal_hidden_state_formula_owner_for_rows() const;
  ::TSP::Reference* _internal_mutable_hidden_state_formula_owner_for_rows();
  public:
  void unsafe_arena_set_allocated_hidden_state_formula_owner_for_rows(
      ::TSP::Reference* hidden_state_formula_owner_for_rows);
  ::TSP::Reference* unsafe_arena_release_hidden_state_formula_owner_for_rows();

  // optional .TSP.Reference table_name_shape_style = 36;
  bool has_table_name_shape_style() const;
  private:
  bool _internal_has_table_name_shape_style() const;
  public:
  void clear_table_name_shape_style();
  const ::TSP::Reference& table_name_shape_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_name_shape_style();
  ::TSP::Reference* mutable_table_name_shape_style();
  void set_allocated_table_name_shape_style(::TSP::Reference* table_name_shape_style);
  private:
  const ::TSP::Reference& _internal_table_name_shape_style() const;
  ::TSP::Reference* _internal_mutable_table_name_shape_style();
  public:
  void unsafe_arena_set_allocated_table_name_shape_style(
      ::TSP::Reference* table_name_shape_style);
  ::TSP::Reference* unsafe_arena_release_table_name_shape_style();

  // optional .TSP.Reference filter_set = 38;
  bool has_filter_set() const;
  private:
  bool _internal_has_filter_set() const;
  public:
  void clear_filter_set();
  const ::TSP::Reference& filter_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_filter_set();
  ::TSP::Reference* mutable_filter_set();
  void set_allocated_filter_set(::TSP::Reference* filter_set);
  private:
  const ::TSP::Reference& _internal_filter_set() const;
  ::TSP::Reference* _internal_mutable_filter_set();
  public:
  void unsafe_arena_set_allocated_filter_set(
      ::TSP::Reference* filter_set);
  ::TSP::Reference* unsafe_arena_release_filter_set();

  // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
  bool has_conditional_style_formula_owner_id() const;
  private:
  bool _internal_has_conditional_style_formula_owner_id() const;
  public:
  void clear_conditional_style_formula_owner_id();
  const ::TSP::CFUUIDArchive& conditional_style_formula_owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_conditional_style_formula_owner_id();
  ::TSP::CFUUIDArchive* mutable_conditional_style_formula_owner_id();
  void set_allocated_conditional_style_formula_owner_id(::TSP::CFUUIDArchive* conditional_style_formula_owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_conditional_style_formula_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_conditional_style_formula_owner_id();
  public:
  void unsafe_arena_set_allocated_conditional_style_formula_owner_id(
      ::TSP::CFUUIDArchive* conditional_style_formula_owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_conditional_style_formula_owner_id();

  // optional .TST.TableSortOrderArchive sort_order = 44;
  bool has_sort_order() const;
  private:
  bool _internal_has_sort_order() const;
  public:
  void clear_sort_order();
  const ::TST::TableSortOrderArchive& sort_order() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TableSortOrderArchive* release_sort_order();
  ::TST::TableSortOrderArchive* mutable_sort_order();
  void set_allocated_sort_order(::TST::TableSortOrderArchive* sort_order);
  private:
  const ::TST::TableSortOrderArchive& _internal_sort_order() const;
  ::TST::TableSortOrderArchive* _internal_mutable_sort_order();
  public:
  void unsafe_arena_set_allocated_sort_order(
      ::TST::TableSortOrderArchive* sort_order);
  ::TST::TableSortOrderArchive* unsafe_arena_release_sort_order();

  // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
  bool has_sort_rule_reference_tracker() const;
  private:
  bool _internal_has_sort_rule_reference_tracker() const;
  public:
  void clear_sort_rule_reference_tracker();
  const ::TST::SortRuleReferenceTrackerArchive& sort_rule_reference_tracker() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::SortRuleReferenceTrackerArchive* release_sort_rule_reference_tracker();
  ::TST::SortRuleReferenceTrackerArchive* mutable_sort_rule_reference_tracker();
  void set_allocated_sort_rule_reference_tracker(::TST::SortRuleReferenceTrackerArchive* sort_rule_reference_tracker);
  private:
  const ::TST::SortRuleReferenceTrackerArchive& _internal_sort_rule_reference_tracker() const;
  ::TST::SortRuleReferenceTrackerArchive* _internal_mutable_sort_rule_reference_tracker();
  public:
  void unsafe_arena_set_allocated_sort_rule_reference_tracker(
      ::TST::SortRuleReferenceTrackerArchive* sort_rule_reference_tracker);
  ::TST::SortRuleReferenceTrackerArchive* unsafe_arena_release_sort_rule_reference_tracker();

  // optional .TSP.Reference base_column_row_uids = 46;
  bool has_base_column_row_uids() const;
  private:
  bool _internal_has_base_column_row_uids() const;
  public:
  void clear_base_column_row_uids();
  const ::TSP::Reference& base_column_row_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_base_column_row_uids();
  ::TSP::Reference* mutable_base_column_row_uids();
  void set_allocated_base_column_row_uids(::TSP::Reference* base_column_row_uids);
  private:
  const ::TSP::Reference& _internal_base_column_row_uids() const;
  ::TSP::Reference* _internal_mutable_base_column_row_uids();
  public:
  void unsafe_arena_set_allocated_base_column_row_uids(
      ::TSP::Reference* base_column_row_uids);
  ::TSP::Reference* unsafe_arena_release_base_column_row_uids();

  // optional .TST.MergeOwnerArchive merge_owner = 47;
  bool has_merge_owner() const;
  private:
  bool _internal_has_merge_owner() const;
  public:
  void clear_merge_owner();
  const ::TST::MergeOwnerArchive& merge_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::MergeOwnerArchive* release_merge_owner();
  ::TST::MergeOwnerArchive* mutable_merge_owner();
  void set_allocated_merge_owner(::TST::MergeOwnerArchive* merge_owner);
  private:
  const ::TST::MergeOwnerArchive& _internal_merge_owner() const;
  ::TST::MergeOwnerArchive* _internal_mutable_merge_owner();
  public:
  void unsafe_arena_set_allocated_merge_owner(
      ::TST::MergeOwnerArchive* merge_owner);
  ::TST::MergeOwnerArchive* unsafe_arena_release_merge_owner();

  // optional .TSP.Reference table_style_preset = 48;
  bool has_table_style_preset() const;
  private:
  bool _internal_has_table_style_preset() const;
  public:
  void clear_table_style_preset();
  const ::TSP::Reference& table_style_preset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_style_preset();
  ::TSP::Reference* mutable_table_style_preset();
  void set_allocated_table_style_preset(::TSP::Reference* table_style_preset);
  private:
  const ::TSP::Reference& _internal_table_style_preset() const;
  ::TSP::Reference* _internal_mutable_table_style_preset();
  public:
  void unsafe_arena_set_allocated_table_style_preset(
      ::TSP::Reference* table_style_preset);
  ::TSP::Reference* unsafe_arena_release_table_style_preset();

  // optional .TSP.Reference stroke_sidecar = 49;
  bool has_stroke_sidecar() const;
  private:
  bool _internal_has_stroke_sidecar() const;
  public:
  void clear_stroke_sidecar();
  const ::TSP::Reference& stroke_sidecar() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stroke_sidecar();
  ::TSP::Reference* mutable_stroke_sidecar();
  void set_allocated_stroke_sidecar(::TSP::Reference* stroke_sidecar);
  private:
  const ::TSP::Reference& _internal_stroke_sidecar() const;
  ::TSP::Reference* _internal_mutable_stroke_sidecar();
  public:
  void unsafe_arena_set_allocated_stroke_sidecar(
      ::TSP::Reference* stroke_sidecar);
  ::TSP::Reference* unsafe_arena_release_stroke_sidecar();

  // optional .TST.StructuredTextImportRecord text_import_record = 52;
  bool has_text_import_record() const;
  private:
  bool _internal_has_text_import_record() const;
  public:
  void clear_text_import_record();
  const ::TST::StructuredTextImportRecord& text_import_record() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::StructuredTextImportRecord* release_text_import_record();
  ::TST::StructuredTextImportRecord* mutable_text_import_record();
  void set_allocated_text_import_record(::TST::StructuredTextImportRecord* text_import_record);
  private:
  const ::TST::StructuredTextImportRecord& _internal_text_import_record() const;
  ::TST::StructuredTextImportRecord* _internal_mutable_text_import_record();
  public:
  void unsafe_arena_set_allocated_text_import_record(
      ::TST::StructuredTextImportRecord* text_import_record);
  ::TST::StructuredTextImportRecord* unsafe_arena_release_text_import_record();

  // optional .TSP.Reference category_level_1_style = 60;
  bool has_category_level_1_style() const;
  private:
  bool _internal_has_category_level_1_style() const;
  public:
  void clear_category_level_1_style();
  const ::TSP::Reference& category_level_1_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_1_style();
  ::TSP::Reference* mutable_category_level_1_style();
  void set_allocated_category_level_1_style(::TSP::Reference* category_level_1_style);
  private:
  const ::TSP::Reference& _internal_category_level_1_style() const;
  ::TSP::Reference* _internal_mutable_category_level_1_style();
  public:
  void unsafe_arena_set_allocated_category_level_1_style(
      ::TSP::Reference* category_level_1_style);
  ::TSP::Reference* unsafe_arena_release_category_level_1_style();

  // optional .TSP.Reference category_level_2_style = 61;
  bool has_category_level_2_style() const;
  private:
  bool _internal_has_category_level_2_style() const;
  public:
  void clear_category_level_2_style();
  const ::TSP::Reference& category_level_2_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_2_style();
  ::TSP::Reference* mutable_category_level_2_style();
  void set_allocated_category_level_2_style(::TSP::Reference* category_level_2_style);
  private:
  const ::TSP::Reference& _internal_category_level_2_style() const;
  ::TSP::Reference* _internal_mutable_category_level_2_style();
  public:
  void unsafe_arena_set_allocated_category_level_2_style(
      ::TSP::Reference* category_level_2_style);
  ::TSP::Reference* unsafe_arena_release_category_level_2_style();

  // optional .TSP.Reference category_level_3_style = 62;
  bool has_category_level_3_style() const;
  private:
  bool _internal_has_category_level_3_style() const;
  public:
  void clear_category_level_3_style();
  const ::TSP::Reference& category_level_3_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_3_style();
  ::TSP::Reference* mutable_category_level_3_style();
  void set_allocated_category_level_3_style(::TSP::Reference* category_level_3_style);
  private:
  const ::TSP::Reference& _internal_category_level_3_style() const;
  ::TSP::Reference* _internal_mutable_category_level_3_style();
  public:
  void unsafe_arena_set_allocated_category_level_3_style(
      ::TSP::Reference* category_level_3_style);
  ::TSP::Reference* unsafe_arena_release_category_level_3_style();

  // optional .TSP.Reference category_level_4_style = 63;
  bool has_category_level_4_style() const;
  private:
  bool _internal_has_category_level_4_style() const;
  public:
  void clear_category_level_4_style();
  const ::TSP::Reference& category_level_4_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_4_style();
  ::TSP::Reference* mutable_category_level_4_style();
  void set_allocated_category_level_4_style(::TSP::Reference* category_level_4_style);
  private:
  const ::TSP::Reference& _internal_category_level_4_style() const;
  ::TSP::Reference* _internal_mutable_category_level_4_style();
  public:
  void unsafe_arena_set_allocated_category_level_4_style(
      ::TSP::Reference* category_level_4_style);
  ::TSP::Reference* unsafe_arena_release_category_level_4_style();

  // optional .TSP.Reference category_level_5_style = 64;
  bool has_category_level_5_style() const;
  private:
  bool _internal_has_category_level_5_style() const;
  public:
  void clear_category_level_5_style();
  const ::TSP::Reference& category_level_5_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_5_style();
  ::TSP::Reference* mutable_category_level_5_style();
  void set_allocated_category_level_5_style(::TSP::Reference* category_level_5_style);
  private:
  const ::TSP::Reference& _internal_category_level_5_style() const;
  ::TSP::Reference* _internal_mutable_category_level_5_style();
  public:
  void unsafe_arena_set_allocated_category_level_5_style(
      ::TSP::Reference* category_level_5_style);
  ::TSP::Reference* unsafe_arena_release_category_level_5_style();

  // optional .TSP.Reference category_level_1_text_style = 65;
  bool has_category_level_1_text_style() const;
  private:
  bool _internal_has_category_level_1_text_style() const;
  public:
  void clear_category_level_1_text_style();
  const ::TSP::Reference& category_level_1_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_1_text_style();
  ::TSP::Reference* mutable_category_level_1_text_style();
  void set_allocated_category_level_1_text_style(::TSP::Reference* category_level_1_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_1_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_1_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_1_text_style(
      ::TSP::Reference* category_level_1_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_1_text_style();

  // optional .TSP.Reference category_level_2_text_style = 66;
  bool has_category_level_2_text_style() const;
  private:
  bool _internal_has_category_level_2_text_style() const;
  public:
  void clear_category_level_2_text_style();
  const ::TSP::Reference& category_level_2_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_2_text_style();
  ::TSP::Reference* mutable_category_level_2_text_style();
  void set_allocated_category_level_2_text_style(::TSP::Reference* category_level_2_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_2_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_2_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_2_text_style(
      ::TSP::Reference* category_level_2_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_2_text_style();

  // optional .TSP.Reference category_level_3_text_style = 67;
  bool has_category_level_3_text_style() const;
  private:
  bool _internal_has_category_level_3_text_style() const;
  public:
  void clear_category_level_3_text_style();
  const ::TSP::Reference& category_level_3_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_3_text_style();
  ::TSP::Reference* mutable_category_level_3_text_style();
  void set_allocated_category_level_3_text_style(::TSP::Reference* category_level_3_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_3_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_3_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_3_text_style(
      ::TSP::Reference* category_level_3_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_3_text_style();

  // optional .TSP.Reference category_level_4_text_style = 68;
  bool has_category_level_4_text_style() const;
  private:
  bool _internal_has_category_level_4_text_style() const;
  public:
  void clear_category_level_4_text_style();
  const ::TSP::Reference& category_level_4_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_4_text_style();
  ::TSP::Reference* mutable_category_level_4_text_style();
  void set_allocated_category_level_4_text_style(::TSP::Reference* category_level_4_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_4_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_4_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_4_text_style(
      ::TSP::Reference* category_level_4_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_4_text_style();

  // optional .TSP.Reference category_level_5_text_style = 69;
  bool has_category_level_5_text_style() const;
  private:
  bool _internal_has_category_level_5_text_style() const;
  public:
  void clear_category_level_5_text_style();
  const ::TSP::Reference& category_level_5_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_category_level_5_text_style();
  ::TSP::Reference* mutable_category_level_5_text_style();
  void set_allocated_category_level_5_text_style(::TSP::Reference* category_level_5_text_style);
  private:
  const ::TSP::Reference& _internal_category_level_5_text_style() const;
  ::TSP::Reference* _internal_mutable_category_level_5_text_style();
  public:
  void unsafe_arena_set_allocated_category_level_5_text_style(
      ::TSP::Reference* category_level_5_text_style);
  ::TSP::Reference* unsafe_arena_release_category_level_5_text_style();

  // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
  bool has_hidden_states_owner() const;
  private:
  bool _internal_has_hidden_states_owner() const;
  public:
  void clear_hidden_states_owner();
  const ::TST::HiddenStatesOwnerArchive& hidden_states_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::HiddenStatesOwnerArchive* release_hidden_states_owner();
  ::TST::HiddenStatesOwnerArchive* mutable_hidden_states_owner();
  void set_allocated_hidden_states_owner(::TST::HiddenStatesOwnerArchive* hidden_states_owner);
  private:
  const ::TST::HiddenStatesOwnerArchive& _internal_hidden_states_owner() const;
  ::TST::HiddenStatesOwnerArchive* _internal_mutable_hidden_states_owner();
  public:
  void unsafe_arena_set_allocated_hidden_states_owner(
      ::TST::HiddenStatesOwnerArchive* hidden_states_owner);
  ::TST::HiddenStatesOwnerArchive* unsafe_arena_release_hidden_states_owner();

  // optional .TSP.Reference label_level_1_style = 71;
  bool has_label_level_1_style() const;
  private:
  bool _internal_has_label_level_1_style() const;
  public:
  void clear_label_level_1_style();
  const ::TSP::Reference& label_level_1_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_1_style();
  ::TSP::Reference* mutable_label_level_1_style();
  void set_allocated_label_level_1_style(::TSP::Reference* label_level_1_style);
  private:
  const ::TSP::Reference& _internal_label_level_1_style() const;
  ::TSP::Reference* _internal_mutable_label_level_1_style();
  public:
  void unsafe_arena_set_allocated_label_level_1_style(
      ::TSP::Reference* label_level_1_style);
  ::TSP::Reference* unsafe_arena_release_label_level_1_style();

  // optional .TSP.Reference label_level_2_style = 72;
  bool has_label_level_2_style() const;
  private:
  bool _internal_has_label_level_2_style() const;
  public:
  void clear_label_level_2_style();
  const ::TSP::Reference& label_level_2_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_2_style();
  ::TSP::Reference* mutable_label_level_2_style();
  void set_allocated_label_level_2_style(::TSP::Reference* label_level_2_style);
  private:
  const ::TSP::Reference& _internal_label_level_2_style() const;
  ::TSP::Reference* _internal_mutable_label_level_2_style();
  public:
  void unsafe_arena_set_allocated_label_level_2_style(
      ::TSP::Reference* label_level_2_style);
  ::TSP::Reference* unsafe_arena_release_label_level_2_style();

  // optional .TSP.Reference label_level_3_style = 73;
  bool has_label_level_3_style() const;
  private:
  bool _internal_has_label_level_3_style() const;
  public:
  void clear_label_level_3_style();
  const ::TSP::Reference& label_level_3_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_3_style();
  ::TSP::Reference* mutable_label_level_3_style();
  void set_allocated_label_level_3_style(::TSP::Reference* label_level_3_style);
  private:
  const ::TSP::Reference& _internal_label_level_3_style() const;
  ::TSP::Reference* _internal_mutable_label_level_3_style();
  public:
  void unsafe_arena_set_allocated_label_level_3_style(
      ::TSP::Reference* label_level_3_style);
  ::TSP::Reference* unsafe_arena_release_label_level_3_style();

  // optional .TSP.Reference label_level_4_style = 74;
  bool has_label_level_4_style() const;
  private:
  bool _internal_has_label_level_4_style() const;
  public:
  void clear_label_level_4_style();
  const ::TSP::Reference& label_level_4_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_4_style();
  ::TSP::Reference* mutable_label_level_4_style();
  void set_allocated_label_level_4_style(::TSP::Reference* label_level_4_style);
  private:
  const ::TSP::Reference& _internal_label_level_4_style() const;
  ::TSP::Reference* _internal_mutable_label_level_4_style();
  public:
  void unsafe_arena_set_allocated_label_level_4_style(
      ::TSP::Reference* label_level_4_style);
  ::TSP::Reference* unsafe_arena_release_label_level_4_style();

  // optional .TSP.Reference label_level_5_style = 75;
  bool has_label_level_5_style() const;
  private:
  bool _internal_has_label_level_5_style() const;
  public:
  void clear_label_level_5_style();
  const ::TSP::Reference& label_level_5_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_5_style();
  ::TSP::Reference* mutable_label_level_5_style();
  void set_allocated_label_level_5_style(::TSP::Reference* label_level_5_style);
  private:
  const ::TSP::Reference& _internal_label_level_5_style() const;
  ::TSP::Reference* _internal_mutable_label_level_5_style();
  public:
  void unsafe_arena_set_allocated_label_level_5_style(
      ::TSP::Reference* label_level_5_style);
  ::TSP::Reference* unsafe_arena_release_label_level_5_style();

  // optional .TSP.Reference label_level_1_text_style = 76;
  bool has_label_level_1_text_style() const;
  private:
  bool _internal_has_label_level_1_text_style() const;
  public:
  void clear_label_level_1_text_style();
  const ::TSP::Reference& label_level_1_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_1_text_style();
  ::TSP::Reference* mutable_label_level_1_text_style();
  void set_allocated_label_level_1_text_style(::TSP::Reference* label_level_1_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_1_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_1_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_1_text_style(
      ::TSP::Reference* label_level_1_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_1_text_style();

  // optional .TSP.Reference label_level_2_text_style = 77;
  bool has_label_level_2_text_style() const;
  private:
  bool _internal_has_label_level_2_text_style() const;
  public:
  void clear_label_level_2_text_style();
  const ::TSP::Reference& label_level_2_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_2_text_style();
  ::TSP::Reference* mutable_label_level_2_text_style();
  void set_allocated_label_level_2_text_style(::TSP::Reference* label_level_2_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_2_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_2_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_2_text_style(
      ::TSP::Reference* label_level_2_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_2_text_style();

  // optional .TSP.Reference label_level_3_text_style = 78;
  bool has_label_level_3_text_style() const;
  private:
  bool _internal_has_label_level_3_text_style() const;
  public:
  void clear_label_level_3_text_style();
  const ::TSP::Reference& label_level_3_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_3_text_style();
  ::TSP::Reference* mutable_label_level_3_text_style();
  void set_allocated_label_level_3_text_style(::TSP::Reference* label_level_3_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_3_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_3_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_3_text_style(
      ::TSP::Reference* label_level_3_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_3_text_style();

  // optional .TSP.Reference label_level_4_text_style = 79;
  bool has_label_level_4_text_style() const;
  private:
  bool _internal_has_label_level_4_text_style() const;
  public:
  void clear_label_level_4_text_style();
  const ::TSP::Reference& label_level_4_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_4_text_style();
  ::TSP::Reference* mutable_label_level_4_text_style();
  void set_allocated_label_level_4_text_style(::TSP::Reference* label_level_4_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_4_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_4_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_4_text_style(
      ::TSP::Reference* label_level_4_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_4_text_style();

  // optional .TSP.Reference label_level_5_text_style = 80;
  bool has_label_level_5_text_style() const;
  private:
  bool _internal_has_label_level_5_text_style() const;
  public:
  void clear_label_level_5_text_style();
  const ::TSP::Reference& label_level_5_text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_label_level_5_text_style();
  ::TSP::Reference* mutable_label_level_5_text_style();
  void set_allocated_label_level_5_text_style(::TSP::Reference* label_level_5_text_style);
  private:
  const ::TSP::Reference& _internal_label_level_5_text_style() const;
  ::TSP::Reference* _internal_mutable_label_level_5_text_style();
  public:
  void unsafe_arena_set_allocated_label_level_5_text_style(
      ::TSP::Reference* label_level_5_text_style);
  ::TSP::Reference* unsafe_arena_release_label_level_5_text_style();

  // optional .TST.CategoryOwnerArchive category_owner = 81;
  bool has_category_owner() const;
  private:
  bool _internal_has_category_owner() const;
  public:
  void clear_category_owner();
  const ::TST::CategoryOwnerArchive& category_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CategoryOwnerArchive* release_category_owner();
  ::TST::CategoryOwnerArchive* mutable_category_owner();
  void set_allocated_category_owner(::TST::CategoryOwnerArchive* category_owner);
  private:
  const ::TST::CategoryOwnerArchive& _internal_category_owner() const;
  ::TST::CategoryOwnerArchive* _internal_mutable_category_owner();
  public:
  void unsafe_arena_set_allocated_category_owner(
      ::TST::CategoryOwnerArchive* category_owner);
  ::TST::CategoryOwnerArchive* unsafe_arena_release_category_owner();

  // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
  bool has_pencil_annotation_owner() const;
  private:
  bool _internal_has_pencil_annotation_owner() const;
  public:
  void clear_pencil_annotation_owner();
  const ::TST::PencilAnnotationOwnerArchive& pencil_annotation_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::PencilAnnotationOwnerArchive* release_pencil_annotation_owner();
  ::TST::PencilAnnotationOwnerArchive* mutable_pencil_annotation_owner();
  void set_allocated_pencil_annotation_owner(::TST::PencilAnnotationOwnerArchive* pencil_annotation_owner);
  private:
  const ::TST::PencilAnnotationOwnerArchive& _internal_pencil_annotation_owner() const;
  ::TST::PencilAnnotationOwnerArchive* _internal_mutable_pencil_annotation_owner();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_owner(
      ::TST::PencilAnnotationOwnerArchive* pencil_annotation_owner);
  ::TST::PencilAnnotationOwnerArchive* unsafe_arena_release_pencil_annotation_owner();

  // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
  bool has_haunted_owner() const;
  private:
  bool _internal_has_haunted_owner() const;
  public:
  void clear_haunted_owner();
  const ::TSCE::HauntedOwnerArchive& haunted_owner() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::HauntedOwnerArchive* release_haunted_owner();
  ::TSCE::HauntedOwnerArchive* mutable_haunted_owner();
  void set_allocated_haunted_owner(::TSCE::HauntedOwnerArchive* haunted_owner);
  private:
  const ::TSCE::HauntedOwnerArchive& _internal_haunted_owner() const;
  ::TSCE::HauntedOwnerArchive* _internal_mutable_haunted_owner();
  public:
  void unsafe_arena_set_allocated_haunted_owner(
      ::TSCE::HauntedOwnerArchive* haunted_owner);
  ::TSCE::HauntedOwnerArchive* unsafe_arena_release_haunted_owner();

  // required uint32 number_of_rows = 6;
  bool has_number_of_rows() const;
  private:
  bool _internal_has_number_of_rows() const;
  public:
  void clear_number_of_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_rows() const;
  void set_number_of_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_rows() const;
  void _internal_set_number_of_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 number_of_columns = 7;
  bool has_number_of_columns() const;
  private:
  bool _internal_has_number_of_columns() const;
  public:
  void clear_number_of_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_columns() const;
  void set_number_of_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_columns() const;
  void _internal_set_number_of_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_header_rows = 9;
  bool has_number_of_header_rows() const;
  private:
  bool _internal_has_number_of_header_rows() const;
  public:
  void clear_number_of_header_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_header_rows() const;
  void set_number_of_header_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_header_rows() const;
  void _internal_set_number_of_header_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_header_columns = 10;
  bool has_number_of_header_columns() const;
  private:
  bool _internal_has_number_of_header_columns() const;
  public:
  void clear_number_of_header_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_header_columns() const;
  void set_number_of_header_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_header_columns() const;
  void _internal_set_number_of_header_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_footer_rows = 11;
  bool has_number_of_footer_rows() const;
  private:
  bool _internal_has_number_of_footer_rows() const;
  public:
  void clear_number_of_footer_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_footer_rows() const;
  void set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_footer_rows() const;
  void _internal_set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_hidden_rows = 14;
  bool has_number_of_hidden_rows() const;
  private:
  bool _internal_has_number_of_hidden_rows() const;
  public:
  void clear_number_of_hidden_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_hidden_rows() const;
  void set_number_of_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_hidden_rows() const;
  void _internal_set_number_of_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double default_row_height = 16;
  bool has_default_row_height() const;
  private:
  bool _internal_has_default_row_height() const;
  public:
  void clear_default_row_height();
  double default_row_height() const;
  void set_default_row_height(double value);
  private:
  double _internal_default_row_height() const;
  void _internal_set_default_row_height(double value);
  public:

  // required double default_column_width = 17;
  bool has_default_column_width() const;
  private:
  bool _internal_has_default_column_width() const;
  public:
  void clear_default_column_width();
  double default_column_width() const;
  void set_default_column_width(double value);
  private:
  double _internal_default_column_width() const;
  void _internal_set_default_column_width(double value);
  public:

  // optional uint32 number_of_hidden_columns = 15;
  bool has_number_of_hidden_columns() const;
  private:
  bool _internal_has_number_of_hidden_columns() const;
  public:
  void clear_number_of_hidden_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_hidden_columns() const;
  void set_number_of_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_hidden_columns() const;
  void _internal_set_number_of_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool header_columns_frozen = 13;
  bool has_header_columns_frozen() const;
  private:
  bool _internal_has_header_columns_frozen() const;
  public:
  void clear_header_columns_frozen();
  bool header_columns_frozen() const;
  void set_header_columns_frozen(bool value);
  private:
  bool _internal_header_columns_frozen() const;
  void _internal_set_header_columns_frozen(bool value);
  public:

  // optional bool repeating_header_rows_enabled = 29;
  bool has_repeating_header_rows_enabled() const;
  private:
  bool _internal_has_repeating_header_rows_enabled() const;
  public:
  void clear_repeating_header_rows_enabled();
  bool repeating_header_rows_enabled() const;
  void set_repeating_header_rows_enabled(bool value);
  private:
  bool _internal_repeating_header_rows_enabled() const;
  void _internal_set_repeating_header_rows_enabled(bool value);
  public:

  // optional bool repeating_header_columns_enabled = 32;
  bool has_repeating_header_columns_enabled() const;
  private:
  bool _internal_has_repeating_header_columns_enabled() const;
  public:
  void clear_repeating_header_columns_enabled();
  bool repeating_header_columns_enabled() const;
  void set_repeating_header_columns_enabled(bool value);
  private:
  bool _internal_repeating_header_columns_enabled() const;
  void _internal_set_repeating_header_columns_enabled(bool value);
  public:

  // optional bool style_apply_clears_all = 31;
  bool has_style_apply_clears_all() const;
  private:
  bool _internal_has_style_apply_clears_all() const;
  public:
  void clear_style_apply_clears_all();
  bool style_apply_clears_all() const;
  void set_style_apply_clears_all(bool value);
  private:
  bool _internal_style_apply_clears_all() const;
  void _internal_set_style_apply_clears_all(bool value);
  public:

  // optional uint32 preset_index = 28;
  bool has_preset_index() const;
  private:
  bool _internal_has_preset_index() const;
  public:
  void clear_preset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index() const;
  void set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preset_index() const;
  void _internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool was_cut = 50;
  bool has_was_cut() const;
  private:
  bool _internal_has_was_cut() const;
  public:
  void clear_was_cut();
  bool was_cut() const;
  void set_was_cut(bool value);
  private:
  bool _internal_was_cut() const;
  void _internal_set_was_cut(bool value);
  public:

  // optional bool table_name_enabled = 22;
  bool has_table_name_enabled() const;
  private:
  bool _internal_has_table_name_enabled() const;
  public:
  void clear_table_name_enabled();
  bool table_name_enabled() const;
  void set_table_name_enabled(bool value);
  private:
  bool _internal_table_name_enabled() const;
  void _internal_set_table_name_enabled(bool value);
  public:

  // optional bool table_name_border_enabled = 37;
  bool has_table_name_border_enabled() const;
  private:
  bool _internal_has_table_name_border_enabled() const;
  public:
  void clear_table_name_border_enabled();
  bool table_name_border_enabled() const;
  void set_table_name_border_enabled(bool value);
  private:
  bool _internal_table_name_border_enabled() const;
  void _internal_set_table_name_border_enabled(bool value);
  public:

  // optional bool header_rows_frozen = 12;
  bool has_header_rows_frozen() const;
  private:
  bool _internal_has_header_rows_frozen() const;
  public:
  void clear_header_rows_frozen();
  bool header_rows_frozen() const;
  void set_header_rows_frozen(bool value);
  private:
  bool _internal_header_rows_frozen() const;
  void _internal_set_header_rows_frozen(bool value);
  public:

  // optional double table_name_height = 33;
  bool has_table_name_height() const;
  private:
  bool _internal_has_table_name_height() const;
  public:
  void clear_table_name_height();
  double table_name_height() const;
  void set_table_name_height(double value);
  private:
  double _internal_table_name_height() const;
  void _internal_set_table_name_height(double value);
  public:

  // optional uint32 number_of_filtered_rows = 40;
  bool has_number_of_filtered_rows() const;
  private:
  bool _internal_has_number_of_filtered_rows() const;
  public:
  void clear_number_of_filtered_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_filtered_rows() const;
  void set_number_of_filtered_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_filtered_rows() const;
  void _internal_set_number_of_filtered_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_user_hidden_rows = 41;
  bool has_number_of_user_hidden_rows() const;
  private:
  bool _internal_has_number_of_user_hidden_rows() const;
  public:
  void clear_number_of_user_hidden_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_user_hidden_rows() const;
  void set_number_of_user_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_user_hidden_rows() const;
  void _internal_set_number_of_user_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_user_hidden_columns = 42;
  bool has_number_of_user_hidden_columns() const;
  private:
  bool _internal_has_number_of_user_hidden_columns() const;
  public:
  void clear_number_of_user_hidden_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_user_hidden_columns() const;
  void set_number_of_user_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_user_hidden_columns() const;
  void _internal_set_number_of_user_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool preset_needs_strong_ownership = 51;
  bool has_preset_needs_strong_ownership() const;
  private:
  bool _internal_has_preset_needs_strong_ownership() const;
  public:
  void clear_preset_needs_strong_ownership();
  bool preset_needs_strong_ownership() const;
  void set_preset_needs_strong_ownership(bool value);
  private:
  bool _internal_preset_needs_strong_ownership() const;
  void _internal_set_preset_needs_strong_ownership(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableModelArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_table_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_group_by_uid_;
  ::TSP::Reference* table_style_;
  ::TST::DataStore* base_data_store_;
  ::TSP::Reference* provider_;
  ::TSP::Reference* body_cell_style_;
  ::TSP::Reference* header_row_style_;
  ::TSP::Reference* header_column_style_;
  ::TSP::Reference* footer_row_style_;
  ::TST::CellID* origin_offset_;
  ::TSP::Reference* body_text_style_;
  ::TSP::Reference* header_row_text_style_;
  ::TSP::Reference* header_column_text_style_;
  ::TSP::Reference* footer_row_text_style_;
  ::TSP::Reference* table_name_style_;
  ::TSP::Reference* hidden_state_formula_owner_for_columns_;
  ::TSP::Reference* hidden_state_formula_owner_for_rows_;
  ::TSP::Reference* table_name_shape_style_;
  ::TSP::Reference* filter_set_;
  ::TSP::CFUUIDArchive* conditional_style_formula_owner_id_;
  ::TST::TableSortOrderArchive* sort_order_;
  ::TST::SortRuleReferenceTrackerArchive* sort_rule_reference_tracker_;
  ::TSP::Reference* base_column_row_uids_;
  ::TST::MergeOwnerArchive* merge_owner_;
  ::TSP::Reference* table_style_preset_;
  ::TSP::Reference* stroke_sidecar_;
  ::TST::StructuredTextImportRecord* text_import_record_;
  ::TSP::Reference* category_level_1_style_;
  ::TSP::Reference* category_level_2_style_;
  ::TSP::Reference* category_level_3_style_;
  ::TSP::Reference* category_level_4_style_;
  ::TSP::Reference* category_level_5_style_;
  ::TSP::Reference* category_level_1_text_style_;
  ::TSP::Reference* category_level_2_text_style_;
  ::TSP::Reference* category_level_3_text_style_;
  ::TSP::Reference* category_level_4_text_style_;
  ::TSP::Reference* category_level_5_text_style_;
  ::TST::HiddenStatesOwnerArchive* hidden_states_owner_;
  ::TSP::Reference* label_level_1_style_;
  ::TSP::Reference* label_level_2_style_;
  ::TSP::Reference* label_level_3_style_;
  ::TSP::Reference* label_level_4_style_;
  ::TSP::Reference* label_level_5_style_;
  ::TSP::Reference* label_level_1_text_style_;
  ::TSP::Reference* label_level_2_text_style_;
  ::TSP::Reference* label_level_3_text_style_;
  ::TSP::Reference* label_level_4_text_style_;
  ::TSP::Reference* label_level_5_text_style_;
  ::TST::CategoryOwnerArchive* category_owner_;
  ::TST::PencilAnnotationOwnerArchive* pencil_annotation_owner_;
  ::TSCE::HauntedOwnerArchive* haunted_owner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_header_rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_header_columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_footer_rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_hidden_rows_;
  double default_row_height_;
  double default_column_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_hidden_columns_;
  bool header_columns_frozen_;
  bool repeating_header_rows_enabled_;
  bool repeating_header_columns_enabled_;
  bool style_apply_clears_all_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preset_index_;
  bool was_cut_;
  bool table_name_enabled_;
  bool table_name_border_enabled_;
  bool header_rows_frozen_;
  double table_name_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_filtered_rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_user_hidden_rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_user_hidden_columns_;
  bool preset_needs_strong_ownership_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class SummaryModelArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.SummaryModelArchive) */ {
 public:
  inline SummaryModelArchive() : SummaryModelArchive(nullptr) {}
  ~SummaryModelArchive() override;
  explicit constexpr SummaryModelArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryModelArchive(const SummaryModelArchive& from);
  SummaryModelArchive(SummaryModelArchive&& from) noexcept
    : SummaryModelArchive() {
    *this = ::std::move(from);
  }

  inline SummaryModelArchive& operator=(const SummaryModelArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryModelArchive& operator=(SummaryModelArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryModelArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryModelArchive* internal_default_instance() {
    return reinterpret_cast<const SummaryModelArchive*>(
               &_SummaryModelArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SummaryModelArchive& a, SummaryModelArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryModelArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryModelArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryModelArchive* New() const final {
    return CreateMaybeMessage<SummaryModelArchive>(nullptr);
  }

  SummaryModelArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryModelArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryModelArchive& from);
  void MergeFrom(const SummaryModelArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryModelArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.SummaryModelArchive";
  }
  protected:
  explicit SummaryModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryRowHeightListFieldNumber = 26,
    kLabelRowHeightListFieldNumber = 27,
    kLabelRowVisibilityListFieldNumber = 28,
    kTableInfoFieldNumber = 1,
    kDataStoreFieldNumber = 2,
    kColumnRowUidsFieldNumber = 3,
    kAggregateFormulaOwnerUuidFieldNumber = 4,
    kSummaryCellVendorFieldNumber = 5,
    kCategoryColumnWidthFieldNumber = 10,
    kSummaryRowLevel1HeightFieldNumber = 11,
    kSummaryRowLevel2HeightFieldNumber = 12,
    kSummaryRowLevel3HeightFieldNumber = 13,
    kSummaryRowLevel4HeightFieldNumber = 14,
    kSummaryRowLevel5HeightFieldNumber = 15,
    kSummaryLabelRowLevel1HeightFieldNumber = 16,
    kSummaryLabelRowLevel2HeightFieldNumber = 17,
    kSummaryLabelRowLevel3HeightFieldNumber = 18,
    kSummaryLabelRowLevel4HeightFieldNumber = 19,
    kSummaryLabelRowLevel5HeightFieldNumber = 20,
    kLabelRowVisibility1FieldNumber = 21,
    kLabelRowVisibility2FieldNumber = 22,
    kLabelRowVisibility3FieldNumber = 23,
    kLabelRowVisibility4FieldNumber = 24,
    kLabelRowVisibility5FieldNumber = 25,
  };
  // repeated double summary_row_height_list = 26;
  int summary_row_height_list_size() const;
  private:
  int _internal_summary_row_height_list_size() const;
  public:
  void clear_summary_row_height_list();
  private:
  double _internal_summary_row_height_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_summary_row_height_list() const;
  void _internal_add_summary_row_height_list(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_summary_row_height_list();
  public:
  double summary_row_height_list(int index) const;
  void set_summary_row_height_list(int index, double value);
  void add_summary_row_height_list(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      summary_row_height_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_summary_row_height_list();

  // repeated double label_row_height_list = 27;
  int label_row_height_list_size() const;
  private:
  int _internal_label_row_height_list_size() const;
  public:
  void clear_label_row_height_list();
  private:
  double _internal_label_row_height_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_label_row_height_list() const;
  void _internal_add_label_row_height_list(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_label_row_height_list();
  public:
  double label_row_height_list(int index) const;
  void set_label_row_height_list(int index, double value);
  void add_label_row_height_list(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      label_row_height_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_label_row_height_list();

  // repeated uint32 label_row_visibility_list = 28;
  int label_row_visibility_list_size() const;
  private:
  int _internal_label_row_visibility_list_size() const;
  public:
  void clear_label_row_visibility_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_label_row_visibility_list() const;
  void _internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_label_row_visibility_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_list(int index) const;
  void set_label_row_visibility_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      label_row_visibility_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_label_row_visibility_list();

  // required .TSP.Reference table_info = 1;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TST.DataStore data_store = 2;
  bool has_data_store() const;
  private:
  bool _internal_has_data_store() const;
  public:
  void clear_data_store();
  const ::TST::DataStore& data_store() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::DataStore* release_data_store();
  ::TST::DataStore* mutable_data_store();
  void set_allocated_data_store(::TST::DataStore* data_store);
  private:
  const ::TST::DataStore& _internal_data_store() const;
  ::TST::DataStore* _internal_mutable_data_store();
  public:
  void unsafe_arena_set_allocated_data_store(
      ::TST::DataStore* data_store);
  ::TST::DataStore* unsafe_arena_release_data_store();

  // optional .TSP.Reference column_row_uids = 3;
  bool has_column_row_uids() const;
  private:
  bool _internal_has_column_row_uids() const;
  public:
  void clear_column_row_uids();
  const ::TSP::Reference& column_row_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_column_row_uids();
  ::TSP::Reference* mutable_column_row_uids();
  void set_allocated_column_row_uids(::TSP::Reference* column_row_uids);
  private:
  const ::TSP::Reference& _internal_column_row_uids() const;
  ::TSP::Reference* _internal_mutable_column_row_uids();
  public:
  void unsafe_arena_set_allocated_column_row_uids(
      ::TSP::Reference* column_row_uids);
  ::TSP::Reference* unsafe_arena_release_column_row_uids();

  // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
  bool has_aggregate_formula_owner_uuid() const;
  private:
  bool _internal_has_aggregate_formula_owner_uuid() const;
  public:
  void clear_aggregate_formula_owner_uuid();
  const ::TSP::UUID& aggregate_formula_owner_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_aggregate_formula_owner_uuid();
  ::TSP::UUID* mutable_aggregate_formula_owner_uuid();
  void set_allocated_aggregate_formula_owner_uuid(::TSP::UUID* aggregate_formula_owner_uuid);
  private:
  const ::TSP::UUID& _internal_aggregate_formula_owner_uuid() const;
  ::TSP::UUID* _internal_mutable_aggregate_formula_owner_uuid();
  public:
  void unsafe_arena_set_allocated_aggregate_formula_owner_uuid(
      ::TSP::UUID* aggregate_formula_owner_uuid);
  ::TSP::UUID* unsafe_arena_release_aggregate_formula_owner_uuid();

  // optional .TSP.Reference summary_cell_vendor = 5;
  bool has_summary_cell_vendor() const;
  private:
  bool _internal_has_summary_cell_vendor() const;
  public:
  void clear_summary_cell_vendor();
  const ::TSP::Reference& summary_cell_vendor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_summary_cell_vendor();
  ::TSP::Reference* mutable_summary_cell_vendor();
  void set_allocated_summary_cell_vendor(::TSP::Reference* summary_cell_vendor);
  private:
  const ::TSP::Reference& _internal_summary_cell_vendor() const;
  ::TSP::Reference* _internal_mutable_summary_cell_vendor();
  public:
  void unsafe_arena_set_allocated_summary_cell_vendor(
      ::TSP::Reference* summary_cell_vendor);
  ::TSP::Reference* unsafe_arena_release_summary_cell_vendor();

  // optional double category_column_width = 10;
  bool has_category_column_width() const;
  private:
  bool _internal_has_category_column_width() const;
  public:
  void clear_category_column_width();
  double category_column_width() const;
  void set_category_column_width(double value);
  private:
  double _internal_category_column_width() const;
  void _internal_set_category_column_width(double value);
  public:

  // optional double summary_row_level_1_height = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_row_level_1_height() const;
  private:
  bool _internal_has_summary_row_level_1_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_row_level_1_height();
  PROTOBUF_DEPRECATED double summary_row_level_1_height() const;
  PROTOBUF_DEPRECATED void set_summary_row_level_1_height(double value);
  private:
  double _internal_summary_row_level_1_height() const;
  void _internal_set_summary_row_level_1_height(double value);
  public:

  // optional double summary_row_level_2_height = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_row_level_2_height() const;
  private:
  bool _internal_has_summary_row_level_2_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_row_level_2_height();
  PROTOBUF_DEPRECATED double summary_row_level_2_height() const;
  PROTOBUF_DEPRECATED void set_summary_row_level_2_height(double value);
  private:
  double _internal_summary_row_level_2_height() const;
  void _internal_set_summary_row_level_2_height(double value);
  public:

  // optional double summary_row_level_3_height = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_row_level_3_height() const;
  private:
  bool _internal_has_summary_row_level_3_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_row_level_3_height();
  PROTOBUF_DEPRECATED double summary_row_level_3_height() const;
  PROTOBUF_DEPRECATED void set_summary_row_level_3_height(double value);
  private:
  double _internal_summary_row_level_3_height() const;
  void _internal_set_summary_row_level_3_height(double value);
  public:

  // optional double summary_row_level_4_height = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_row_level_4_height() const;
  private:
  bool _internal_has_summary_row_level_4_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_row_level_4_height();
  PROTOBUF_DEPRECATED double summary_row_level_4_height() const;
  PROTOBUF_DEPRECATED void set_summary_row_level_4_height(double value);
  private:
  double _internal_summary_row_level_4_height() const;
  void _internal_set_summary_row_level_4_height(double value);
  public:

  // optional double summary_row_level_5_height = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_row_level_5_height() const;
  private:
  bool _internal_has_summary_row_level_5_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_row_level_5_height();
  PROTOBUF_DEPRECATED double summary_row_level_5_height() const;
  PROTOBUF_DEPRECATED void set_summary_row_level_5_height(double value);
  private:
  double _internal_summary_row_level_5_height() const;
  void _internal_set_summary_row_level_5_height(double value);
  public:

  // optional double summary_label_row_level_1_height = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_label_row_level_1_height() const;
  private:
  bool _internal_has_summary_label_row_level_1_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_label_row_level_1_height();
  PROTOBUF_DEPRECATED double summary_label_row_level_1_height() const;
  PROTOBUF_DEPRECATED void set_summary_label_row_level_1_height(double value);
  private:
  double _internal_summary_label_row_level_1_height() const;
  void _internal_set_summary_label_row_level_1_height(double value);
  public:

  // optional double summary_label_row_level_2_height = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_label_row_level_2_height() const;
  private:
  bool _internal_has_summary_label_row_level_2_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_label_row_level_2_height();
  PROTOBUF_DEPRECATED double summary_label_row_level_2_height() const;
  PROTOBUF_DEPRECATED void set_summary_label_row_level_2_height(double value);
  private:
  double _internal_summary_label_row_level_2_height() const;
  void _internal_set_summary_label_row_level_2_height(double value);
  public:

  // optional double summary_label_row_level_3_height = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_label_row_level_3_height() const;
  private:
  bool _internal_has_summary_label_row_level_3_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_label_row_level_3_height();
  PROTOBUF_DEPRECATED double summary_label_row_level_3_height() const;
  PROTOBUF_DEPRECATED void set_summary_label_row_level_3_height(double value);
  private:
  double _internal_summary_label_row_level_3_height() const;
  void _internal_set_summary_label_row_level_3_height(double value);
  public:

  // optional double summary_label_row_level_4_height = 19 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_label_row_level_4_height() const;
  private:
  bool _internal_has_summary_label_row_level_4_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_label_row_level_4_height();
  PROTOBUF_DEPRECATED double summary_label_row_level_4_height() const;
  PROTOBUF_DEPRECATED void set_summary_label_row_level_4_height(double value);
  private:
  double _internal_summary_label_row_level_4_height() const;
  void _internal_set_summary_label_row_level_4_height(double value);
  public:

  // optional double summary_label_row_level_5_height = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_summary_label_row_level_5_height() const;
  private:
  bool _internal_has_summary_label_row_level_5_height() const;
  public:
  PROTOBUF_DEPRECATED void clear_summary_label_row_level_5_height();
  PROTOBUF_DEPRECATED double summary_label_row_level_5_height() const;
  PROTOBUF_DEPRECATED void set_summary_label_row_level_5_height(double value);
  private:
  double _internal_summary_label_row_level_5_height() const;
  void _internal_set_summary_label_row_level_5_height(double value);
  public:

  // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_row_visibility_1() const;
  private:
  bool _internal_has_label_row_visibility_1() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_row_visibility_1();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_1() const;
  PROTOBUF_DEPRECATED void set_label_row_visibility_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_1() const;
  void _internal_set_label_row_visibility_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_row_visibility_2() const;
  private:
  bool _internal_has_label_row_visibility_2() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_row_visibility_2();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_2() const;
  PROTOBUF_DEPRECATED void set_label_row_visibility_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_2() const;
  void _internal_set_label_row_visibility_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_row_visibility_3() const;
  private:
  bool _internal_has_label_row_visibility_3() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_row_visibility_3();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_3() const;
  PROTOBUF_DEPRECATED void set_label_row_visibility_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_3() const;
  void _internal_set_label_row_visibility_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_row_visibility_4() const;
  private:
  bool _internal_has_label_row_visibility_4() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_row_visibility_4();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_4() const;
  PROTOBUF_DEPRECATED void set_label_row_visibility_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_4() const;
  void _internal_set_label_row_visibility_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_label_row_visibility_5() const;
  private:
  bool _internal_has_label_row_visibility_5() const;
  public:
  PROTOBUF_DEPRECATED void clear_label_row_visibility_5();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_5() const;
  PROTOBUF_DEPRECATED void set_label_row_visibility_5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_5() const;
  void _internal_set_label_row_visibility_5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.SummaryModelArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > summary_row_height_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > label_row_height_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > label_row_visibility_list_;
  ::TSP::Reference* table_info_;
  ::TST::DataStore* data_store_;
  ::TSP::Reference* column_row_uids_;
  ::TSP::UUID* aggregate_formula_owner_uuid_;
  ::TSP::Reference* summary_cell_vendor_;
  double category_column_width_;
  double summary_row_level_1_height_;
  double summary_row_level_2_height_;
  double summary_row_level_3_height_;
  double summary_row_level_4_height_;
  double summary_row_level_5_height_;
  double summary_label_row_level_1_height_;
  double summary_label_row_level_2_height_;
  double summary_label_row_level_3_height_;
  double summary_label_row_level_4_height_;
  double summary_label_row_level_5_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_5_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class SummaryModelGroupByChangeStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.SummaryModelGroupByChangeStateArchive) */ {
 public:
  inline SummaryModelGroupByChangeStateArchive() : SummaryModelGroupByChangeStateArchive(nullptr) {}
  ~SummaryModelGroupByChangeStateArchive() override;
  explicit constexpr SummaryModelGroupByChangeStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryModelGroupByChangeStateArchive(const SummaryModelGroupByChangeStateArchive& from);
  SummaryModelGroupByChangeStateArchive(SummaryModelGroupByChangeStateArchive&& from) noexcept
    : SummaryModelGroupByChangeStateArchive() {
    *this = ::std::move(from);
  }

  inline SummaryModelGroupByChangeStateArchive& operator=(const SummaryModelGroupByChangeStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryModelGroupByChangeStateArchive& operator=(SummaryModelGroupByChangeStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryModelGroupByChangeStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryModelGroupByChangeStateArchive* internal_default_instance() {
    return reinterpret_cast<const SummaryModelGroupByChangeStateArchive*>(
               &_SummaryModelGroupByChangeStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SummaryModelGroupByChangeStateArchive& a, SummaryModelGroupByChangeStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryModelGroupByChangeStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryModelGroupByChangeStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryModelGroupByChangeStateArchive* New() const final {
    return CreateMaybeMessage<SummaryModelGroupByChangeStateArchive>(nullptr);
  }

  SummaryModelGroupByChangeStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryModelGroupByChangeStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryModelGroupByChangeStateArchive& from);
  void MergeFrom(const SummaryModelGroupByChangeStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryModelGroupByChangeStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.SummaryModelGroupByChangeStateArchive";
  }
  protected:
  explicit SummaryModelGroupByChangeStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryRowHeightListFieldNumber = 2,
    kLabelRowHeightListFieldNumber = 3,
    kLabelRowVisibilityListFieldNumber = 4,
    kCellMapFieldNumber = 1,
  };
  // repeated double summary_row_height_list = 2;
  int summary_row_height_list_size() const;
  private:
  int _internal_summary_row_height_list_size() const;
  public:
  void clear_summary_row_height_list();
  private:
  double _internal_summary_row_height_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_summary_row_height_list() const;
  void _internal_add_summary_row_height_list(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_summary_row_height_list();
  public:
  double summary_row_height_list(int index) const;
  void set_summary_row_height_list(int index, double value);
  void add_summary_row_height_list(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      summary_row_height_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_summary_row_height_list();

  // repeated double label_row_height_list = 3;
  int label_row_height_list_size() const;
  private:
  int _internal_label_row_height_list_size() const;
  public:
  void clear_label_row_height_list();
  private:
  double _internal_label_row_height_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_label_row_height_list() const;
  void _internal_add_label_row_height_list(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_label_row_height_list();
  public:
  double label_row_height_list(int index) const;
  void set_label_row_height_list(int index, double value);
  void add_label_row_height_list(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      label_row_height_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_label_row_height_list();

  // repeated uint32 label_row_visibility_list = 4;
  int label_row_visibility_list_size() const;
  private:
  int _internal_label_row_visibility_list_size() const;
  public:
  void clear_label_row_visibility_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label_row_visibility_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_label_row_visibility_list() const;
  void _internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_label_row_visibility_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 label_row_visibility_list(int index) const;
  void set_label_row_visibility_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      label_row_visibility_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_label_row_visibility_list();

  // optional .TSP.Reference cell_map = 1;
  bool has_cell_map() const;
  private:
  bool _internal_has_cell_map() const;
  public:
  void clear_cell_map();
  const ::TSP::Reference& cell_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_cell_map();
  ::TSP::Reference* mutable_cell_map();
  void set_allocated_cell_map(::TSP::Reference* cell_map);
  private:
  const ::TSP::Reference& _internal_cell_map() const;
  ::TSP::Reference* _internal_mutable_cell_map();
  public:
  void unsafe_arena_set_allocated_cell_map(
      ::TSP::Reference* cell_map);
  ::TSP::Reference* unsafe_arena_release_cell_map();

  // @@protoc_insertion_point(class_scope:TST.SummaryModelGroupByChangeStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > summary_row_height_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > label_row_height_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > label_row_visibility_list_;
  ::TSP::Reference* cell_map_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnRowUIDMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ColumnRowUIDMapArchive) */ {
 public:
  inline ColumnRowUIDMapArchive() : ColumnRowUIDMapArchive(nullptr) {}
  ~ColumnRowUIDMapArchive() override;
  explicit constexpr ColumnRowUIDMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnRowUIDMapArchive(const ColumnRowUIDMapArchive& from);
  ColumnRowUIDMapArchive(ColumnRowUIDMapArchive&& from) noexcept
    : ColumnRowUIDMapArchive() {
    *this = ::std::move(from);
  }

  inline ColumnRowUIDMapArchive& operator=(const ColumnRowUIDMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnRowUIDMapArchive& operator=(ColumnRowUIDMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnRowUIDMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnRowUIDMapArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnRowUIDMapArchive*>(
               &_ColumnRowUIDMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ColumnRowUIDMapArchive& a, ColumnRowUIDMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnRowUIDMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnRowUIDMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnRowUIDMapArchive* New() const final {
    return CreateMaybeMessage<ColumnRowUIDMapArchive>(nullptr);
  }

  ColumnRowUIDMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnRowUIDMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnRowUIDMapArchive& from);
  void MergeFrom(const ColumnRowUIDMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnRowUIDMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ColumnRowUIDMapArchive";
  }
  protected:
  explicit ColumnRowUIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortedColumnUidsFieldNumber = 1,
    kColumnIndexForUidFieldNumber = 2,
    kColumnUidForIndexFieldNumber = 3,
    kSortedRowUidsFieldNumber = 4,
    kRowIndexForUidFieldNumber = 5,
    kRowUidForIndexFieldNumber = 6,
  };
  // repeated .TSP.UUID sorted_column_uids = 1;
  int sorted_column_uids_size() const;
  private:
  int _internal_sorted_column_uids_size() const;
  public:
  void clear_sorted_column_uids();
  ::TSP::UUID* mutable_sorted_column_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_sorted_column_uids();
  private:
  const ::TSP::UUID& _internal_sorted_column_uids(int index) const;
  ::TSP::UUID* _internal_add_sorted_column_uids();
  public:
  const ::TSP::UUID& sorted_column_uids(int index) const;
  ::TSP::UUID* add_sorted_column_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      sorted_column_uids() const;

  // repeated uint32 column_index_for_uid = 2;
  int column_index_for_uid_size() const;
  private:
  int _internal_column_index_for_uid_size() const;
  public:
  void clear_column_index_for_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_index_for_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_column_index_for_uid() const;
  void _internal_add_column_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_column_index_for_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 column_index_for_uid(int index) const;
  void set_column_index_for_uid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_column_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      column_index_for_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_column_index_for_uid();

  // repeated uint32 column_uid_for_index = 3;
  int column_uid_for_index_size() const;
  private:
  int _internal_column_uid_for_index_size() const;
  public:
  void clear_column_uid_for_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_uid_for_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_column_uid_for_index() const;
  void _internal_add_column_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_column_uid_for_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 column_uid_for_index(int index) const;
  void set_column_uid_for_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_column_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      column_uid_for_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_column_uid_for_index();

  // repeated .TSP.UUID sorted_row_uids = 4;
  int sorted_row_uids_size() const;
  private:
  int _internal_sorted_row_uids_size() const;
  public:
  void clear_sorted_row_uids();
  ::TSP::UUID* mutable_sorted_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_sorted_row_uids();
  private:
  const ::TSP::UUID& _internal_sorted_row_uids(int index) const;
  ::TSP::UUID* _internal_add_sorted_row_uids();
  public:
  const ::TSP::UUID& sorted_row_uids(int index) const;
  ::TSP::UUID* add_sorted_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      sorted_row_uids() const;

  // repeated uint32 row_index_for_uid = 5;
  int row_index_for_uid_size() const;
  private:
  int _internal_row_index_for_uid_size() const;
  public:
  void clear_row_index_for_uid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_index_for_uid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_row_index_for_uid() const;
  void _internal_add_row_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_row_index_for_uid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 row_index_for_uid(int index) const;
  void set_row_index_for_uid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_row_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      row_index_for_uid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_row_index_for_uid();

  // repeated uint32 row_uid_for_index = 6;
  int row_uid_for_index_size() const;
  private:
  int _internal_row_uid_for_index_size() const;
  public:
  void clear_row_uid_for_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_uid_for_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_row_uid_for_index() const;
  void _internal_add_row_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_row_uid_for_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 row_uid_for_index(int index) const;
  void set_row_uid_for_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_row_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      row_uid_for_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_row_uid_for_index();

  // @@protoc_insertion_point(class_scope:TST.ColumnRowUIDMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > sorted_column_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > column_index_for_uid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > column_uid_for_index_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > sorted_row_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > row_index_for_uid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > row_uid_for_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StrokeLayerArchive_StrokeRunArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokeLayerArchive.StrokeRunArchive) */ {
 public:
  inline StrokeLayerArchive_StrokeRunArchive() : StrokeLayerArchive_StrokeRunArchive(nullptr) {}
  ~StrokeLayerArchive_StrokeRunArchive() override;
  explicit constexpr StrokeLayerArchive_StrokeRunArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokeLayerArchive_StrokeRunArchive(const StrokeLayerArchive_StrokeRunArchive& from);
  StrokeLayerArchive_StrokeRunArchive(StrokeLayerArchive_StrokeRunArchive&& from) noexcept
    : StrokeLayerArchive_StrokeRunArchive() {
    *this = ::std::move(from);
  }

  inline StrokeLayerArchive_StrokeRunArchive& operator=(const StrokeLayerArchive_StrokeRunArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokeLayerArchive_StrokeRunArchive& operator=(StrokeLayerArchive_StrokeRunArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokeLayerArchive_StrokeRunArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokeLayerArchive_StrokeRunArchive* internal_default_instance() {
    return reinterpret_cast<const StrokeLayerArchive_StrokeRunArchive*>(
               &_StrokeLayerArchive_StrokeRunArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(StrokeLayerArchive_StrokeRunArchive& a, StrokeLayerArchive_StrokeRunArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokeLayerArchive_StrokeRunArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokeLayerArchive_StrokeRunArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrokeLayerArchive_StrokeRunArchive* New() const final {
    return CreateMaybeMessage<StrokeLayerArchive_StrokeRunArchive>(nullptr);
  }

  StrokeLayerArchive_StrokeRunArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrokeLayerArchive_StrokeRunArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrokeLayerArchive_StrokeRunArchive& from);
  void MergeFrom(const StrokeLayerArchive_StrokeRunArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokeLayerArchive_StrokeRunArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokeLayerArchive.StrokeRunArchive";
  }
  protected:
  explicit StrokeLayerArchive_StrokeRunArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrokeFieldNumber = 3,
    kOriginFieldNumber = 1,
    kLengthFieldNumber = 2,
    kOrderFieldNumber = 4,
  };
  // optional .TSD.StrokeArchive stroke = 3;
  bool has_stroke() const;
  private:
  bool _internal_has_stroke() const;
  public:
  void clear_stroke();
  const ::TSD::StrokeArchive& stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_stroke();
  ::TSD::StrokeArchive* mutable_stroke();
  void set_allocated_stroke(::TSD::StrokeArchive* stroke);
  private:
  const ::TSD::StrokeArchive& _internal_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_stroke();
  public:
  void unsafe_arena_set_allocated_stroke(
      ::TSD::StrokeArchive* stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_stroke();

  // optional int32 origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::int32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 order = 4;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StrokeLayerArchive.StrokeRunArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::StrokeArchive* stroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StrokeLayerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokeLayerArchive) */ {
 public:
  inline StrokeLayerArchive() : StrokeLayerArchive(nullptr) {}
  ~StrokeLayerArchive() override;
  explicit constexpr StrokeLayerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokeLayerArchive(const StrokeLayerArchive& from);
  StrokeLayerArchive(StrokeLayerArchive&& from) noexcept
    : StrokeLayerArchive() {
    *this = ::std::move(from);
  }

  inline StrokeLayerArchive& operator=(const StrokeLayerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokeLayerArchive& operator=(StrokeLayerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokeLayerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokeLayerArchive* internal_default_instance() {
    return reinterpret_cast<const StrokeLayerArchive*>(
               &_StrokeLayerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(StrokeLayerArchive& a, StrokeLayerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokeLayerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokeLayerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrokeLayerArchive* New() const final {
    return CreateMaybeMessage<StrokeLayerArchive>(nullptr);
  }

  StrokeLayerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrokeLayerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrokeLayerArchive& from);
  void MergeFrom(const StrokeLayerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokeLayerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokeLayerArchive";
  }
  protected:
  explicit StrokeLayerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StrokeLayerArchive_StrokeRunArchive StrokeRunArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kStrokeRunsFieldNumber = 2,
    kRowColumnIndexFieldNumber = 1,
  };
  // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
  int stroke_runs_size() const;
  private:
  int _internal_stroke_runs_size() const;
  public:
  void clear_stroke_runs();
  ::TST::StrokeLayerArchive_StrokeRunArchive* mutable_stroke_runs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokeLayerArchive_StrokeRunArchive >*
      mutable_stroke_runs();
  private:
  const ::TST::StrokeLayerArchive_StrokeRunArchive& _internal_stroke_runs(int index) const;
  ::TST::StrokeLayerArchive_StrokeRunArchive* _internal_add_stroke_runs();
  public:
  const ::TST::StrokeLayerArchive_StrokeRunArchive& stroke_runs(int index) const;
  ::TST::StrokeLayerArchive_StrokeRunArchive* add_stroke_runs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokeLayerArchive_StrokeRunArchive >&
      stroke_runs() const;

  // optional uint32 row_column_index = 1;
  bool has_row_column_index() const;
  private:
  bool _internal_has_row_column_index() const;
  public:
  void clear_row_column_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_column_index() const;
  void set_row_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_column_index() const;
  void _internal_set_row_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StrokeLayerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokeLayerArchive_StrokeRunArchive > stroke_runs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_column_index_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StrokeSidecarArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokeSidecarArchive) */ {
 public:
  inline StrokeSidecarArchive() : StrokeSidecarArchive(nullptr) {}
  ~StrokeSidecarArchive() override;
  explicit constexpr StrokeSidecarArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokeSidecarArchive(const StrokeSidecarArchive& from);
  StrokeSidecarArchive(StrokeSidecarArchive&& from) noexcept
    : StrokeSidecarArchive() {
    *this = ::std::move(from);
  }

  inline StrokeSidecarArchive& operator=(const StrokeSidecarArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokeSidecarArchive& operator=(StrokeSidecarArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokeSidecarArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokeSidecarArchive* internal_default_instance() {
    return reinterpret_cast<const StrokeSidecarArchive*>(
               &_StrokeSidecarArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(StrokeSidecarArchive& a, StrokeSidecarArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokeSidecarArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokeSidecarArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrokeSidecarArchive* New() const final {
    return CreateMaybeMessage<StrokeSidecarArchive>(nullptr);
  }

  StrokeSidecarArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrokeSidecarArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrokeSidecarArchive& from);
  void MergeFrom(const StrokeSidecarArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokeSidecarArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokeSidecarArchive";
  }
  protected:
  explicit StrokeSidecarArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftColumnStrokeLayersFieldNumber = 4,
    kRightColumnStrokeLayersFieldNumber = 5,
    kTopRowStrokeLayersFieldNumber = 6,
    kBottomRowStrokeLayersFieldNumber = 7,
    kMaxOrderFieldNumber = 1,
    kColumnCountFieldNumber = 2,
    kRowCountFieldNumber = 3,
  };
  // repeated .TSP.Reference left_column_stroke_layers = 4;
  int left_column_stroke_layers_size() const;
  private:
  int _internal_left_column_stroke_layers_size() const;
  public:
  void clear_left_column_stroke_layers();
  ::TSP::Reference* mutable_left_column_stroke_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_left_column_stroke_layers();
  private:
  const ::TSP::Reference& _internal_left_column_stroke_layers(int index) const;
  ::TSP::Reference* _internal_add_left_column_stroke_layers();
  public:
  const ::TSP::Reference& left_column_stroke_layers(int index) const;
  ::TSP::Reference* add_left_column_stroke_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      left_column_stroke_layers() const;

  // repeated .TSP.Reference right_column_stroke_layers = 5;
  int right_column_stroke_layers_size() const;
  private:
  int _internal_right_column_stroke_layers_size() const;
  public:
  void clear_right_column_stroke_layers();
  ::TSP::Reference* mutable_right_column_stroke_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_right_column_stroke_layers();
  private:
  const ::TSP::Reference& _internal_right_column_stroke_layers(int index) const;
  ::TSP::Reference* _internal_add_right_column_stroke_layers();
  public:
  const ::TSP::Reference& right_column_stroke_layers(int index) const;
  ::TSP::Reference* add_right_column_stroke_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      right_column_stroke_layers() const;

  // repeated .TSP.Reference top_row_stroke_layers = 6;
  int top_row_stroke_layers_size() const;
  private:
  int _internal_top_row_stroke_layers_size() const;
  public:
  void clear_top_row_stroke_layers();
  ::TSP::Reference* mutable_top_row_stroke_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_top_row_stroke_layers();
  private:
  const ::TSP::Reference& _internal_top_row_stroke_layers(int index) const;
  ::TSP::Reference* _internal_add_top_row_stroke_layers();
  public:
  const ::TSP::Reference& top_row_stroke_layers(int index) const;
  ::TSP::Reference* add_top_row_stroke_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      top_row_stroke_layers() const;

  // repeated .TSP.Reference bottom_row_stroke_layers = 7;
  int bottom_row_stroke_layers_size() const;
  private:
  int _internal_bottom_row_stroke_layers_size() const;
  public:
  void clear_bottom_row_stroke_layers();
  ::TSP::Reference* mutable_bottom_row_stroke_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_bottom_row_stroke_layers();
  private:
  const ::TSP::Reference& _internal_bottom_row_stroke_layers(int index) const;
  ::TSP::Reference* _internal_add_bottom_row_stroke_layers();
  public:
  const ::TSP::Reference& bottom_row_stroke_layers(int index) const;
  ::TSP::Reference* add_bottom_row_stroke_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      bottom_row_stroke_layers() const;

  // optional uint32 max_order = 1;
  bool has_max_order() const;
  private:
  bool _internal_has_max_order() const;
  public:
  void clear_max_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_order() const;
  void set_max_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_order() const;
  void _internal_set_max_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 column_count = 2;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 row_count = 3;
  bool has_row_count() const;
  private:
  bool _internal_has_row_count() const;
  public:
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StrokeSidecarArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > left_column_stroke_layers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > right_column_stroke_layers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > top_row_stroke_layers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > bottom_row_stroke_layers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DurationWrapperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DurationWrapperArchive) */ {
 public:
  inline DurationWrapperArchive() : DurationWrapperArchive(nullptr) {}
  ~DurationWrapperArchive() override;
  explicit constexpr DurationWrapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DurationWrapperArchive(const DurationWrapperArchive& from);
  DurationWrapperArchive(DurationWrapperArchive&& from) noexcept
    : DurationWrapperArchive() {
    *this = ::std::move(from);
  }

  inline DurationWrapperArchive& operator=(const DurationWrapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurationWrapperArchive& operator=(DurationWrapperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DurationWrapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DurationWrapperArchive* internal_default_instance() {
    return reinterpret_cast<const DurationWrapperArchive*>(
               &_DurationWrapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(DurationWrapperArchive& a, DurationWrapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DurationWrapperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurationWrapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurationWrapperArchive* New() const final {
    return CreateMaybeMessage<DurationWrapperArchive>(nullptr);
  }

  DurationWrapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurationWrapperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurationWrapperArchive& from);
  void MergeFrom(const DurationWrapperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurationWrapperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DurationWrapperArchive";
  }
  protected:
  explicit DurationWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TST.DurationWrapperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  ~Cell() override;
  explicit constexpr Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cell* New() const final {
    return CreateMaybeMessage<Cell>(nullptr);
  }

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 6,
    kCellStyleFieldNumber = 3,
    kTextStyleFieldNumber = 4,
    kCurrentFormatFieldNumber = 9,
    kFormulaErrorFieldNumber = 10,
    kNumberFormatFieldNumber = 11,
    kCurrencyFormatFieldNumber = 12,
    kDurationFormatFieldNumber = 13,
    kDateFormatFieldNumber = 14,
    kCustomFormatFieldNumber = 16,
    kBaseFormatFieldNumber = 17,
    kRichTextFieldNumber = 20,
    kConditionalStyleFieldNumber = 21,
    kCommentStorageFieldNumber = 23,
    kImportWarningSetFieldNumber = 25,
    kCustomFormatObjectFieldNumber = 26,
    kCellBorderFieldNumber = 27,
    kCellSpecFieldNumber = 28,
    kTextFormatFieldNumber = 30,
    kBooleanFormatFieldNumber = 31,
    kValueTypeFieldNumber = 2,
    kBoolValueFieldNumber = 7,
    kNumberValueFieldNumber = 5,
    kExplicitFormatFlagsFieldNumber = 19,
    kConditionalStyleAppliedRuleFieldNumber = 24,
    kCellFormatKindFieldNumber = 29,
    kDecimalValueLowFieldNumber = 32,
    kDecimalValueHighFieldNumber = 33,
  };
  // optional string stringValue = 6;
  bool has_stringvalue() const;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringvalue();
  std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // optional .TSP.Reference cell_style = 3;
  bool has_cell_style() const;
  private:
  bool _internal_has_cell_style() const;
  public:
  void clear_cell_style();
  const ::TSP::Reference& cell_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_cell_style();
  ::TSP::Reference* mutable_cell_style();
  void set_allocated_cell_style(::TSP::Reference* cell_style);
  private:
  const ::TSP::Reference& _internal_cell_style() const;
  ::TSP::Reference* _internal_mutable_cell_style();
  public:
  void unsafe_arena_set_allocated_cell_style(
      ::TSP::Reference* cell_style);
  ::TSP::Reference* unsafe_arena_release_cell_style();

  // optional .TSP.Reference text_style = 4;
  bool has_text_style() const;
  private:
  bool _internal_has_text_style() const;
  public:
  void clear_text_style();
  const ::TSP::Reference& text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_text_style();
  ::TSP::Reference* mutable_text_style();
  void set_allocated_text_style(::TSP::Reference* text_style);
  private:
  const ::TSP::Reference& _internal_text_style() const;
  ::TSP::Reference* _internal_mutable_text_style();
  public:
  void unsafe_arena_set_allocated_text_style(
      ::TSP::Reference* text_style);
  ::TSP::Reference* unsafe_arena_release_text_style();

  // optional .TSK.FormatStructArchive current_format = 9;
  bool has_current_format() const;
  private:
  bool _internal_has_current_format() const;
  public:
  void clear_current_format();
  const ::TSK::FormatStructArchive& current_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_current_format();
  ::TSK::FormatStructArchive* mutable_current_format();
  void set_allocated_current_format(::TSK::FormatStructArchive* current_format);
  private:
  const ::TSK::FormatStructArchive& _internal_current_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_current_format();
  public:
  void unsafe_arena_set_allocated_current_format(
      ::TSK::FormatStructArchive* current_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_current_format();

  // optional .TSP.Reference formulaError = 10;
  bool has_formulaerror() const;
  private:
  bool _internal_has_formulaerror() const;
  public:
  void clear_formulaerror();
  const ::TSP::Reference& formulaerror() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formulaerror();
  ::TSP::Reference* mutable_formulaerror();
  void set_allocated_formulaerror(::TSP::Reference* formulaerror);
  private:
  const ::TSP::Reference& _internal_formulaerror() const;
  ::TSP::Reference* _internal_mutable_formulaerror();
  public:
  void unsafe_arena_set_allocated_formulaerror(
      ::TSP::Reference* formulaerror);
  ::TSP::Reference* unsafe_arena_release_formulaerror();

  // optional .TSK.FormatStructArchive number_format = 11;
  bool has_number_format() const;
  private:
  bool _internal_has_number_format() const;
  public:
  void clear_number_format();
  const ::TSK::FormatStructArchive& number_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_number_format();
  ::TSK::FormatStructArchive* mutable_number_format();
  void set_allocated_number_format(::TSK::FormatStructArchive* number_format);
  private:
  const ::TSK::FormatStructArchive& _internal_number_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_number_format();
  public:
  void unsafe_arena_set_allocated_number_format(
      ::TSK::FormatStructArchive* number_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_number_format();

  // optional .TSK.FormatStructArchive currency_format = 12;
  bool has_currency_format() const;
  private:
  bool _internal_has_currency_format() const;
  public:
  void clear_currency_format();
  const ::TSK::FormatStructArchive& currency_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_currency_format();
  ::TSK::FormatStructArchive* mutable_currency_format();
  void set_allocated_currency_format(::TSK::FormatStructArchive* currency_format);
  private:
  const ::TSK::FormatStructArchive& _internal_currency_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_currency_format();
  public:
  void unsafe_arena_set_allocated_currency_format(
      ::TSK::FormatStructArchive* currency_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_currency_format();

  // optional .TSK.FormatStructArchive duration_format = 13;
  bool has_duration_format() const;
  private:
  bool _internal_has_duration_format() const;
  public:
  void clear_duration_format();
  const ::TSK::FormatStructArchive& duration_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_duration_format();
  ::TSK::FormatStructArchive* mutable_duration_format();
  void set_allocated_duration_format(::TSK::FormatStructArchive* duration_format);
  private:
  const ::TSK::FormatStructArchive& _internal_duration_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_duration_format();
  public:
  void unsafe_arena_set_allocated_duration_format(
      ::TSK::FormatStructArchive* duration_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_duration_format();

  // optional .TSK.FormatStructArchive date_format = 14;
  bool has_date_format() const;
  private:
  bool _internal_has_date_format() const;
  public:
  void clear_date_format();
  const ::TSK::FormatStructArchive& date_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_date_format();
  ::TSK::FormatStructArchive* mutable_date_format();
  void set_allocated_date_format(::TSK::FormatStructArchive* date_format);
  private:
  const ::TSK::FormatStructArchive& _internal_date_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_date_format();
  public:
  void unsafe_arena_set_allocated_date_format(
      ::TSK::FormatStructArchive* date_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_date_format();

  // optional .TSK.FormatStructArchive custom_format = 16;
  bool has_custom_format() const;
  private:
  bool _internal_has_custom_format() const;
  public:
  void clear_custom_format();
  const ::TSK::FormatStructArchive& custom_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_custom_format();
  ::TSK::FormatStructArchive* mutable_custom_format();
  void set_allocated_custom_format(::TSK::FormatStructArchive* custom_format);
  private:
  const ::TSK::FormatStructArchive& _internal_custom_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_custom_format();
  public:
  void unsafe_arena_set_allocated_custom_format(
      ::TSK::FormatStructArchive* custom_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_custom_format();

  // optional .TSK.FormatStructArchive base_format = 17;
  bool has_base_format() const;
  private:
  bool _internal_has_base_format() const;
  public:
  void clear_base_format();
  const ::TSK::FormatStructArchive& base_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_base_format();
  ::TSK::FormatStructArchive* mutable_base_format();
  void set_allocated_base_format(::TSK::FormatStructArchive* base_format);
  private:
  const ::TSK::FormatStructArchive& _internal_base_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_base_format();
  public:
  void unsafe_arena_set_allocated_base_format(
      ::TSK::FormatStructArchive* base_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_base_format();

  // optional .TSP.Reference richText = 20;
  bool has_richtext() const;
  private:
  bool _internal_has_richtext() const;
  public:
  void clear_richtext();
  const ::TSP::Reference& richtext() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_richtext();
  ::TSP::Reference* mutable_richtext();
  void set_allocated_richtext(::TSP::Reference* richtext);
  private:
  const ::TSP::Reference& _internal_richtext() const;
  ::TSP::Reference* _internal_mutable_richtext();
  public:
  void unsafe_arena_set_allocated_richtext(
      ::TSP::Reference* richtext);
  ::TSP::Reference* unsafe_arena_release_richtext();

  // optional .TSP.Reference conditional_style = 21;
  bool has_conditional_style() const;
  private:
  bool _internal_has_conditional_style() const;
  public:
  void clear_conditional_style();
  const ::TSP::Reference& conditional_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_conditional_style();
  ::TSP::Reference* mutable_conditional_style();
  void set_allocated_conditional_style(::TSP::Reference* conditional_style);
  private:
  const ::TSP::Reference& _internal_conditional_style() const;
  ::TSP::Reference* _internal_mutable_conditional_style();
  public:
  void unsafe_arena_set_allocated_conditional_style(
      ::TSP::Reference* conditional_style);
  ::TSP::Reference* unsafe_arena_release_conditional_style();

  // optional .TSP.Reference comment_storage = 23;
  bool has_comment_storage() const;
  private:
  bool _internal_has_comment_storage() const;
  public:
  void clear_comment_storage();
  const ::TSP::Reference& comment_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_comment_storage();
  ::TSP::Reference* mutable_comment_storage();
  void set_allocated_comment_storage(::TSP::Reference* comment_storage);
  private:
  const ::TSP::Reference& _internal_comment_storage() const;
  ::TSP::Reference* _internal_mutable_comment_storage();
  public:
  void unsafe_arena_set_allocated_comment_storage(
      ::TSP::Reference* comment_storage);
  ::TSP::Reference* unsafe_arena_release_comment_storage();

  // optional .TST.ImportWarningSetArchive import_warning_set = 25;
  bool has_import_warning_set() const;
  private:
  bool _internal_has_import_warning_set() const;
  public:
  void clear_import_warning_set();
  const ::TST::ImportWarningSetArchive& import_warning_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ImportWarningSetArchive* release_import_warning_set();
  ::TST::ImportWarningSetArchive* mutable_import_warning_set();
  void set_allocated_import_warning_set(::TST::ImportWarningSetArchive* import_warning_set);
  private:
  const ::TST::ImportWarningSetArchive& _internal_import_warning_set() const;
  ::TST::ImportWarningSetArchive* _internal_mutable_import_warning_set();
  public:
  void unsafe_arena_set_allocated_import_warning_set(
      ::TST::ImportWarningSetArchive* import_warning_set);
  ::TST::ImportWarningSetArchive* unsafe_arena_release_import_warning_set();

  // optional .TSK.CustomFormatArchive custom_format_object = 26;
  bool has_custom_format_object() const;
  private:
  bool _internal_has_custom_format_object() const;
  public:
  void clear_custom_format_object();
  const ::TSK::CustomFormatArchive& custom_format_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CustomFormatArchive* release_custom_format_object();
  ::TSK::CustomFormatArchive* mutable_custom_format_object();
  void set_allocated_custom_format_object(::TSK::CustomFormatArchive* custom_format_object);
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_format_object() const;
  ::TSK::CustomFormatArchive* _internal_mutable_custom_format_object();
  public:
  void unsafe_arena_set_allocated_custom_format_object(
      ::TSK::CustomFormatArchive* custom_format_object);
  ::TSK::CustomFormatArchive* unsafe_arena_release_custom_format_object();

  // optional .TST.CellBorderArchive cell_border = 27;
  bool has_cell_border() const;
  private:
  bool _internal_has_cell_border() const;
  public:
  void clear_cell_border();
  const ::TST::CellBorderArchive& cell_border() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellBorderArchive* release_cell_border();
  ::TST::CellBorderArchive* mutable_cell_border();
  void set_allocated_cell_border(::TST::CellBorderArchive* cell_border);
  private:
  const ::TST::CellBorderArchive& _internal_cell_border() const;
  ::TST::CellBorderArchive* _internal_mutable_cell_border();
  public:
  void unsafe_arena_set_allocated_cell_border(
      ::TST::CellBorderArchive* cell_border);
  ::TST::CellBorderArchive* unsafe_arena_release_cell_border();

  // optional .TST.CellSpecArchive cell_spec = 28;
  bool has_cell_spec() const;
  private:
  bool _internal_has_cell_spec() const;
  public:
  void clear_cell_spec();
  const ::TST::CellSpecArchive& cell_spec() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellSpecArchive* release_cell_spec();
  ::TST::CellSpecArchive* mutable_cell_spec();
  void set_allocated_cell_spec(::TST::CellSpecArchive* cell_spec);
  private:
  const ::TST::CellSpecArchive& _internal_cell_spec() const;
  ::TST::CellSpecArchive* _internal_mutable_cell_spec();
  public:
  void unsafe_arena_set_allocated_cell_spec(
      ::TST::CellSpecArchive* cell_spec);
  ::TST::CellSpecArchive* unsafe_arena_release_cell_spec();

  // optional .TSK.FormatStructArchive text_format = 30;
  bool has_text_format() const;
  private:
  bool _internal_has_text_format() const;
  public:
  void clear_text_format();
  const ::TSK::FormatStructArchive& text_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_text_format();
  ::TSK::FormatStructArchive* mutable_text_format();
  void set_allocated_text_format(::TSK::FormatStructArchive* text_format);
  private:
  const ::TSK::FormatStructArchive& _internal_text_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_text_format();
  public:
  void unsafe_arena_set_allocated_text_format(
      ::TSK::FormatStructArchive* text_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_text_format();

  // optional .TSK.FormatStructArchive boolean_format = 31;
  bool has_boolean_format() const;
  private:
  bool _internal_has_boolean_format() const;
  public:
  void clear_boolean_format();
  const ::TSK::FormatStructArchive& boolean_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_boolean_format();
  ::TSK::FormatStructArchive* mutable_boolean_format();
  void set_allocated_boolean_format(::TSK::FormatStructArchive* boolean_format);
  private:
  const ::TSK::FormatStructArchive& _internal_boolean_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_boolean_format();
  public:
  void unsafe_arena_set_allocated_boolean_format(
      ::TSK::FormatStructArchive* boolean_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_boolean_format();

  // required .TST.CellValueType valueType = 2;
  bool has_valuetype() const;
  private:
  bool _internal_has_valuetype() const;
  public:
  void clear_valuetype();
  ::TST::CellValueType valuetype() const;
  void set_valuetype(::TST::CellValueType value);
  private:
  ::TST::CellValueType _internal_valuetype() const;
  void _internal_set_valuetype(::TST::CellValueType value);
  public:

  // optional bool boolValue = 7;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // optional double numberValue = 5;
  bool has_numbervalue() const;
  private:
  bool _internal_has_numbervalue() const;
  public:
  void clear_numbervalue();
  double numbervalue() const;
  void set_numbervalue(double value);
  private:
  double _internal_numbervalue() const;
  void _internal_set_numbervalue(double value);
  public:

  // optional uint32 explicit_format_flags = 19;
  bool has_explicit_format_flags() const;
  private:
  bool _internal_has_explicit_format_flags() const;
  public:
  void clear_explicit_format_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 explicit_format_flags() const;
  void set_explicit_format_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_explicit_format_flags() const;
  void _internal_set_explicit_format_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 conditional_style_applied_rule = 24;
  bool has_conditional_style_applied_rule() const;
  private:
  bool _internal_has_conditional_style_applied_rule() const;
  public:
  void clear_conditional_style_applied_rule();
  ::PROTOBUF_NAMESPACE_ID::uint32 conditional_style_applied_rule() const;
  void set_conditional_style_applied_rule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conditional_style_applied_rule() const;
  void _internal_set_conditional_style_applied_rule(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cell_format_kind = 29;
  bool has_cell_format_kind() const;
  private:
  bool _internal_has_cell_format_kind() const;
  public:
  void clear_cell_format_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_format_kind() const;
  void set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_format_kind() const;
  void _internal_set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 decimal_value_low = 32;
  bool has_decimal_value_low() const;
  private:
  bool _internal_has_decimal_value_low() const;
  public:
  void clear_decimal_value_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_value_low() const;
  void set_decimal_value_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_value_low() const;
  void _internal_set_decimal_value_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 decimal_value_high = 33;
  bool has_decimal_value_high() const;
  private:
  bool _internal_has_decimal_value_high() const;
  public:
  void clear_decimal_value_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_value_high() const;
  void set_decimal_value_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_value_high() const;
  void _internal_set_decimal_value_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
  ::TSP::Reference* cell_style_;
  ::TSP::Reference* text_style_;
  ::TSK::FormatStructArchive* current_format_;
  ::TSP::Reference* formulaerror_;
  ::TSK::FormatStructArchive* number_format_;
  ::TSK::FormatStructArchive* currency_format_;
  ::TSK::FormatStructArchive* duration_format_;
  ::TSK::FormatStructArchive* date_format_;
  ::TSK::FormatStructArchive* custom_format_;
  ::TSK::FormatStructArchive* base_format_;
  ::TSP::Reference* richtext_;
  ::TSP::Reference* conditional_style_;
  ::TSP::Reference* comment_storage_;
  ::TST::ImportWarningSetArchive* import_warning_set_;
  ::TSK::CustomFormatArchive* custom_format_object_;
  ::TST::CellBorderArchive* cell_border_;
  ::TST::CellSpecArchive* cell_spec_;
  ::TSK::FormatStructArchive* text_format_;
  ::TSK::FormatStructArchive* boolean_format_;
  int valuetype_;
  bool boolvalue_;
  double numbervalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 explicit_format_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conditional_style_applied_rule_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_format_kind_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_value_low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_value_high_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeRegionMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.MergeRegionMapArchive) */ {
 public:
  inline MergeRegionMapArchive() : MergeRegionMapArchive(nullptr) {}
  ~MergeRegionMapArchive() override;
  explicit constexpr MergeRegionMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeRegionMapArchive(const MergeRegionMapArchive& from);
  MergeRegionMapArchive(MergeRegionMapArchive&& from) noexcept
    : MergeRegionMapArchive() {
    *this = ::std::move(from);
  }

  inline MergeRegionMapArchive& operator=(const MergeRegionMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRegionMapArchive& operator=(MergeRegionMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeRegionMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeRegionMapArchive* internal_default_instance() {
    return reinterpret_cast<const MergeRegionMapArchive*>(
               &_MergeRegionMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(MergeRegionMapArchive& a, MergeRegionMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRegionMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeRegionMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRegionMapArchive* New() const final {
    return CreateMaybeMessage<MergeRegionMapArchive>(nullptr);
  }

  MergeRegionMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRegionMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRegionMapArchive& from);
  void MergeFrom(const MergeRegionMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRegionMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.MergeRegionMapArchive";
  }
  protected:
  explicit MergeRegionMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRangeFieldNumber = 1,
  };
  // repeated .TST.CellRange cell_range = 1;
  int cell_range_size() const;
  private:
  int _internal_cell_range_size() const;
  public:
  void clear_cell_range();
  ::TST::CellRange* mutable_cell_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
      mutable_cell_range();
  private:
  const ::TST::CellRange& _internal_cell_range(int index) const;
  ::TST::CellRange* _internal_add_cell_range();
  public:
  const ::TST::CellRange& cell_range(int index) const;
  ::TST::CellRange* add_cell_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
      cell_range() const;

  // @@protoc_insertion_point(class_scope:TST.MergeRegionMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange > cell_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellMapArchive) */ {
 public:
  inline CellMapArchive() : CellMapArchive(nullptr) {}
  ~CellMapArchive() override;
  explicit constexpr CellMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellMapArchive(const CellMapArchive& from);
  CellMapArchive(CellMapArchive&& from) noexcept
    : CellMapArchive() {
    *this = ::std::move(from);
  }

  inline CellMapArchive& operator=(const CellMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellMapArchive& operator=(CellMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellMapArchive* internal_default_instance() {
    return reinterpret_cast<const CellMapArchive*>(
               &_CellMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CellMapArchive& a, CellMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellMapArchive* New() const final {
    return CreateMaybeMessage<CellMapArchive>(nullptr);
  }

  CellMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellMapArchive& from);
  void MergeFrom(const CellMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellMapArchive";
  }
  protected:
  explicit CellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellTilesFieldNumber = 2,
    kMergeUidRangesFieldNumber = 7,
    kUnmergeUidRangesFieldNumber = 9,
    kMergeActionsFieldNumber = 13,
    kExpandedCellIdsFieldNumber = 14,
    kCellUidListFieldNumber = 5,
    kUidBasedFieldNumber = 3,
    kMayModifyFormulasInCellsFieldNumber = 10,
    kMayModifyValuesReferencedByFormulasFieldNumber = 11,
  };
  // repeated .TSP.Reference cell_tiles = 2;
  int cell_tiles_size() const;
  private:
  int _internal_cell_tiles_size() const;
  public:
  void clear_cell_tiles();
  ::TSP::Reference* mutable_cell_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_cell_tiles();
  private:
  const ::TSP::Reference& _internal_cell_tiles(int index) const;
  ::TSP::Reference* _internal_add_cell_tiles();
  public:
  const ::TSP::Reference& cell_tiles(int index) const;
  ::TSP::Reference* add_cell_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      cell_tiles() const;

  // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
  int merge_uid_ranges_size() const;
  private:
  int _internal_merge_uid_ranges_size() const;
  public:
  void clear_merge_uid_ranges();
  ::TSP::UUIDRectArchive* mutable_merge_uid_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
      mutable_merge_uid_ranges();
  private:
  const ::TSP::UUIDRectArchive& _internal_merge_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* _internal_add_merge_uid_ranges();
  public:
  const ::TSP::UUIDRectArchive& merge_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* add_merge_uid_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
      merge_uid_ranges() const;

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
  int unmerge_uid_ranges_size() const;
  private:
  int _internal_unmerge_uid_ranges_size() const;
  public:
  void clear_unmerge_uid_ranges();
  ::TSP::UUIDRectArchive* mutable_unmerge_uid_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
      mutable_unmerge_uid_ranges();
  private:
  const ::TSP::UUIDRectArchive& _internal_unmerge_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* _internal_add_unmerge_uid_ranges();
  public:
  const ::TSP::UUIDRectArchive& unmerge_uid_ranges(int index) const;
  ::TSP::UUIDRectArchive* add_unmerge_uid_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
      unmerge_uid_ranges() const;

  // repeated .TST.MergeOperationArchive merge_actions = 13;
  int merge_actions_size() const;
  private:
  int _internal_merge_actions_size() const;
  public:
  void clear_merge_actions();
  ::TST::MergeOperationArchive* mutable_merge_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >*
      mutable_merge_actions();
  private:
  const ::TST::MergeOperationArchive& _internal_merge_actions(int index) const;
  ::TST::MergeOperationArchive* _internal_add_merge_actions();
  public:
  const ::TST::MergeOperationArchive& merge_actions(int index) const;
  ::TST::MergeOperationArchive* add_merge_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >&
      merge_actions() const;

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
  int expanded_cell_ids_size() const;
  private:
  int _internal_expanded_cell_ids_size() const;
  public:
  void clear_expanded_cell_ids();
  ::TSCE::CellCoordinateArchive* mutable_expanded_cell_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_expanded_cell_ids();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_expanded_cell_ids(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_expanded_cell_ids();
  public:
  const ::TSCE::CellCoordinateArchive& expanded_cell_ids(int index) const;
  ::TSCE::CellCoordinateArchive* add_expanded_cell_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      expanded_cell_ids() const;

  // optional .TST.CellUIDListArchive cell_uid_list = 5;
  bool has_cell_uid_list() const;
  private:
  bool _internal_has_cell_uid_list() const;
  public:
  void clear_cell_uid_list();
  const ::TST::CellUIDListArchive& cell_uid_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDListArchive* release_cell_uid_list();
  ::TST::CellUIDListArchive* mutable_cell_uid_list();
  void set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uid_list() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uid_list();
  public:
  void unsafe_arena_set_allocated_cell_uid_list(
      ::TST::CellUIDListArchive* cell_uid_list);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uid_list();

  // required bool uid_based = 3;
  bool has_uid_based() const;
  private:
  bool _internal_has_uid_based() const;
  public:
  void clear_uid_based();
  bool uid_based() const;
  void set_uid_based(bool value);
  private:
  bool _internal_uid_based() const;
  void _internal_set_uid_based(bool value);
  public:

  // optional bool may_modify_formulas_in_cells = 10 [default = true];
  bool has_may_modify_formulas_in_cells() const;
  private:
  bool _internal_has_may_modify_formulas_in_cells() const;
  public:
  void clear_may_modify_formulas_in_cells();
  bool may_modify_formulas_in_cells() const;
  void set_may_modify_formulas_in_cells(bool value);
  private:
  bool _internal_may_modify_formulas_in_cells() const;
  void _internal_set_may_modify_formulas_in_cells(bool value);
  public:

  // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
  bool has_may_modify_values_referenced_by_formulas() const;
  private:
  bool _internal_has_may_modify_values_referenced_by_formulas() const;
  public:
  void clear_may_modify_values_referenced_by_formulas();
  bool may_modify_values_referenced_by_formulas() const;
  void set_may_modify_values_referenced_by_formulas(bool value);
  private:
  bool _internal_may_modify_values_referenced_by_formulas() const;
  void _internal_set_may_modify_values_referenced_by_formulas(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > cell_tiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive > merge_uid_ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive > unmerge_uid_ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive > merge_actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > expanded_cell_ids_;
  ::TST::CellUIDListArchive* cell_uid_list_;
  bool uid_based_;
  bool may_modify_formulas_in_cells_;
  bool may_modify_values_referenced_by_formulas_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellListArchive_OptionalCell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellListArchive.OptionalCell) */ {
 public:
  inline CellListArchive_OptionalCell() : CellListArchive_OptionalCell(nullptr) {}
  ~CellListArchive_OptionalCell() override;
  explicit constexpr CellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellListArchive_OptionalCell(const CellListArchive_OptionalCell& from);
  CellListArchive_OptionalCell(CellListArchive_OptionalCell&& from) noexcept
    : CellListArchive_OptionalCell() {
    *this = ::std::move(from);
  }

  inline CellListArchive_OptionalCell& operator=(const CellListArchive_OptionalCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellListArchive_OptionalCell& operator=(CellListArchive_OptionalCell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellListArchive_OptionalCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellListArchive_OptionalCell* internal_default_instance() {
    return reinterpret_cast<const CellListArchive_OptionalCell*>(
               &_CellListArchive_OptionalCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CellListArchive_OptionalCell& a, CellListArchive_OptionalCell& b) {
    a.Swap(&b);
  }
  inline void Swap(CellListArchive_OptionalCell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellListArchive_OptionalCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellListArchive_OptionalCell* New() const final {
    return CreateMaybeMessage<CellListArchive_OptionalCell>(nullptr);
  }

  CellListArchive_OptionalCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellListArchive_OptionalCell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellListArchive_OptionalCell& from);
  void MergeFrom(const CellListArchive_OptionalCell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellListArchive_OptionalCell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellListArchive.OptionalCell";
  }
  protected:
  explicit CellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // optional .TST.Cell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::TST::Cell& cell() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Cell* release_cell();
  ::TST::Cell* mutable_cell();
  void set_allocated_cell(::TST::Cell* cell);
  private:
  const ::TST::Cell& _internal_cell() const;
  ::TST::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::TST::Cell* cell);
  ::TST::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:TST.CellListArchive.OptionalCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::Cell* cell_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellListArchive) */ {
 public:
  inline CellListArchive() : CellListArchive(nullptr) {}
  ~CellListArchive() override;
  explicit constexpr CellListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellListArchive(const CellListArchive& from);
  CellListArchive(CellListArchive&& from) noexcept
    : CellListArchive() {
    *this = ::std::move(from);
  }

  inline CellListArchive& operator=(const CellListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellListArchive& operator=(CellListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellListArchive* internal_default_instance() {
    return reinterpret_cast<const CellListArchive*>(
               &_CellListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CellListArchive& a, CellListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellListArchive* New() const final {
    return CreateMaybeMessage<CellListArchive>(nullptr);
  }

  CellListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellListArchive& from);
  void MergeFrom(const CellListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellListArchive";
  }
  protected:
  explicit CellListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CellListArchive_OptionalCell OptionalCell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
    kTrailingEmptyCellCountFieldNumber = 2,
  };
  // repeated .TST.CellListArchive.OptionalCell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::TST::CellListArchive_OptionalCell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellListArchive_OptionalCell >*
      mutable_cells();
  private:
  const ::TST::CellListArchive_OptionalCell& _internal_cells(int index) const;
  ::TST::CellListArchive_OptionalCell* _internal_add_cells();
  public:
  const ::TST::CellListArchive_OptionalCell& cells(int index) const;
  ::TST::CellListArchive_OptionalCell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellListArchive_OptionalCell >&
      cells() const;

  // optional uint32 trailing_empty_cell_count = 2;
  bool has_trailing_empty_cell_count() const;
  private:
  bool _internal_has_trailing_empty_cell_count() const;
  public:
  void clear_trailing_empty_cell_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 trailing_empty_cell_count() const;
  void set_trailing_empty_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trailing_empty_cell_count() const;
  void _internal_set_trailing_empty_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellListArchive_OptionalCell > cells_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trailing_empty_cell_count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ConcurrentCellMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ConcurrentCellMapArchive) */ {
 public:
  inline ConcurrentCellMapArchive() : ConcurrentCellMapArchive(nullptr) {}
  ~ConcurrentCellMapArchive() override;
  explicit constexpr ConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConcurrentCellMapArchive(const ConcurrentCellMapArchive& from);
  ConcurrentCellMapArchive(ConcurrentCellMapArchive&& from) noexcept
    : ConcurrentCellMapArchive() {
    *this = ::std::move(from);
  }

  inline ConcurrentCellMapArchive& operator=(const ConcurrentCellMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcurrentCellMapArchive& operator=(ConcurrentCellMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConcurrentCellMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConcurrentCellMapArchive* internal_default_instance() {
    return reinterpret_cast<const ConcurrentCellMapArchive*>(
               &_ConcurrentCellMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ConcurrentCellMapArchive& a, ConcurrentCellMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcurrentCellMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConcurrentCellMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcurrentCellMapArchive* New() const final {
    return CreateMaybeMessage<ConcurrentCellMapArchive>(nullptr);
  }

  ConcurrentCellMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcurrentCellMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcurrentCellMapArchive& from);
  void MergeFrom(const ConcurrentCellMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcurrentCellMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ConcurrentCellMapArchive";
  }
  protected:
  explicit ConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellListsFieldNumber = 1,
    kMergeActionsFieldNumber = 3,
    kUidBasedFieldNumber = 2,
    kMayModifyFormulasInCellsFieldNumber = 4,
    kMayModifyValuesReferencedByFormulasFieldNumber = 5,
  };
  // repeated .TSP.Reference cell_lists = 1;
  int cell_lists_size() const;
  private:
  int _internal_cell_lists_size() const;
  public:
  void clear_cell_lists();
  ::TSP::Reference* mutable_cell_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_cell_lists();
  private:
  const ::TSP::Reference& _internal_cell_lists(int index) const;
  ::TSP::Reference* _internal_add_cell_lists();
  public:
  const ::TSP::Reference& cell_lists(int index) const;
  ::TSP::Reference* add_cell_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      cell_lists() const;

  // repeated .TST.MergeOperationArchive merge_actions = 3;
  int merge_actions_size() const;
  private:
  int _internal_merge_actions_size() const;
  public:
  void clear_merge_actions();
  ::TST::MergeOperationArchive* mutable_merge_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >*
      mutable_merge_actions();
  private:
  const ::TST::MergeOperationArchive& _internal_merge_actions(int index) const;
  ::TST::MergeOperationArchive* _internal_add_merge_actions();
  public:
  const ::TST::MergeOperationArchive& merge_actions(int index) const;
  ::TST::MergeOperationArchive* add_merge_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >&
      merge_actions() const;

  // required bool uid_based = 2;
  bool has_uid_based() const;
  private:
  bool _internal_has_uid_based() const;
  public:
  void clear_uid_based();
  bool uid_based() const;
  void set_uid_based(bool value);
  private:
  bool _internal_uid_based() const;
  void _internal_set_uid_based(bool value);
  public:

  // optional bool may_modify_formulas_in_cells = 4 [default = true];
  bool has_may_modify_formulas_in_cells() const;
  private:
  bool _internal_has_may_modify_formulas_in_cells() const;
  public:
  void clear_may_modify_formulas_in_cells();
  bool may_modify_formulas_in_cells() const;
  void set_may_modify_formulas_in_cells(bool value);
  private:
  bool _internal_may_modify_formulas_in_cells() const;
  void _internal_set_may_modify_formulas_in_cells(bool value);
  public:

  // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
  bool has_may_modify_values_referenced_by_formulas() const;
  private:
  bool _internal_has_may_modify_values_referenced_by_formulas() const;
  public:
  void clear_may_modify_values_referenced_by_formulas();
  bool may_modify_values_referenced_by_formulas() const;
  void set_may_modify_values_referenced_by_formulas(bool value);
  private:
  bool _internal_may_modify_values_referenced_by_formulas() const;
  void _internal_set_may_modify_values_referenced_by_formulas(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ConcurrentCellMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > cell_lists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive > merge_actions_;
  bool uid_based_;
  bool may_modify_formulas_in_cells_;
  bool may_modify_values_referenced_by_formulas_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ConcurrentCellListArchive_OptionalCell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ConcurrentCellListArchive.OptionalCell) */ {
 public:
  inline ConcurrentCellListArchive_OptionalCell() : ConcurrentCellListArchive_OptionalCell(nullptr) {}
  ~ConcurrentCellListArchive_OptionalCell() override;
  explicit constexpr ConcurrentCellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConcurrentCellListArchive_OptionalCell(const ConcurrentCellListArchive_OptionalCell& from);
  ConcurrentCellListArchive_OptionalCell(ConcurrentCellListArchive_OptionalCell&& from) noexcept
    : ConcurrentCellListArchive_OptionalCell() {
    *this = ::std::move(from);
  }

  inline ConcurrentCellListArchive_OptionalCell& operator=(const ConcurrentCellListArchive_OptionalCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcurrentCellListArchive_OptionalCell& operator=(ConcurrentCellListArchive_OptionalCell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConcurrentCellListArchive_OptionalCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConcurrentCellListArchive_OptionalCell* internal_default_instance() {
    return reinterpret_cast<const ConcurrentCellListArchive_OptionalCell*>(
               &_ConcurrentCellListArchive_OptionalCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ConcurrentCellListArchive_OptionalCell& a, ConcurrentCellListArchive_OptionalCell& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcurrentCellListArchive_OptionalCell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConcurrentCellListArchive_OptionalCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcurrentCellListArchive_OptionalCell* New() const final {
    return CreateMaybeMessage<ConcurrentCellListArchive_OptionalCell>(nullptr);
  }

  ConcurrentCellListArchive_OptionalCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcurrentCellListArchive_OptionalCell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcurrentCellListArchive_OptionalCell& from);
  void MergeFrom(const ConcurrentCellListArchive_OptionalCell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcurrentCellListArchive_OptionalCell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ConcurrentCellListArchive.OptionalCell";
  }
  protected:
  explicit ConcurrentCellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // optional .TST.Cell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::TST::Cell& cell() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Cell* release_cell();
  ::TST::Cell* mutable_cell();
  void set_allocated_cell(::TST::Cell* cell);
  private:
  const ::TST::Cell& _internal_cell() const;
  ::TST::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::TST::Cell* cell);
  ::TST::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:TST.ConcurrentCellListArchive.OptionalCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::Cell* cell_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ConcurrentCellListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ConcurrentCellListArchive) */ {
 public:
  inline ConcurrentCellListArchive() : ConcurrentCellListArchive(nullptr) {}
  ~ConcurrentCellListArchive() override;
  explicit constexpr ConcurrentCellListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConcurrentCellListArchive(const ConcurrentCellListArchive& from);
  ConcurrentCellListArchive(ConcurrentCellListArchive&& from) noexcept
    : ConcurrentCellListArchive() {
    *this = ::std::move(from);
  }

  inline ConcurrentCellListArchive& operator=(const ConcurrentCellListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcurrentCellListArchive& operator=(ConcurrentCellListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConcurrentCellListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConcurrentCellListArchive* internal_default_instance() {
    return reinterpret_cast<const ConcurrentCellListArchive*>(
               &_ConcurrentCellListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ConcurrentCellListArchive& a, ConcurrentCellListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcurrentCellListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConcurrentCellListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcurrentCellListArchive* New() const final {
    return CreateMaybeMessage<ConcurrentCellListArchive>(nullptr);
  }

  ConcurrentCellListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcurrentCellListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcurrentCellListArchive& from);
  void MergeFrom(const ConcurrentCellListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcurrentCellListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ConcurrentCellListArchive";
  }
  protected:
  explicit ConcurrentCellListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConcurrentCellListArchive_OptionalCell OptionalCell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
    kCellUidRangeFieldNumber = 2,
    kCellRangeFieldNumber = 3,
  };
  // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::TST::ConcurrentCellListArchive_OptionalCell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConcurrentCellListArchive_OptionalCell >*
      mutable_cells();
  private:
  const ::TST::ConcurrentCellListArchive_OptionalCell& _internal_cells(int index) const;
  ::TST::ConcurrentCellListArchive_OptionalCell* _internal_add_cells();
  public:
  const ::TST::ConcurrentCellListArchive_OptionalCell& cells(int index) const;
  ::TST::ConcurrentCellListArchive_OptionalCell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConcurrentCellListArchive_OptionalCell >&
      cells() const;

  // optional .TSP.UUIDRectArchive cell_uid_range = 2;
  bool has_cell_uid_range() const;
  private:
  bool _internal_has_cell_uid_range() const;
  public:
  void clear_cell_uid_range();
  const ::TSP::UUIDRectArchive& cell_uid_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDRectArchive* release_cell_uid_range();
  ::TSP::UUIDRectArchive* mutable_cell_uid_range();
  void set_allocated_cell_uid_range(::TSP::UUIDRectArchive* cell_uid_range);
  private:
  const ::TSP::UUIDRectArchive& _internal_cell_uid_range() const;
  ::TSP::UUIDRectArchive* _internal_mutable_cell_uid_range();
  public:
  void unsafe_arena_set_allocated_cell_uid_range(
      ::TSP::UUIDRectArchive* cell_uid_range);
  ::TSP::UUIDRectArchive* unsafe_arena_release_cell_uid_range();

  // optional .TST.CellRange cell_range = 3;
  bool has_cell_range() const;
  private:
  bool _internal_has_cell_range() const;
  public:
  void clear_cell_range();
  const ::TST::CellRange& cell_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRange* release_cell_range();
  ::TST::CellRange* mutable_cell_range();
  void set_allocated_cell_range(::TST::CellRange* cell_range);
  private:
  const ::TST::CellRange& _internal_cell_range() const;
  ::TST::CellRange* _internal_mutable_cell_range();
  public:
  void unsafe_arena_set_allocated_cell_range(
      ::TST::CellRange* cell_range);
  ::TST::CellRange* unsafe_arena_release_cell_range();

  // @@protoc_insertion_point(class_scope:TST.ConcurrentCellListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConcurrentCellListArchive_OptionalCell > cells_;
  ::TSP::UUIDRectArchive* cell_uid_range_;
  ::TST::CellRange* cell_range_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellFormatAndValueArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellFormatAndValueArchive) */ {
 public:
  inline CellFormatAndValueArchive() : CellFormatAndValueArchive(nullptr) {}
  ~CellFormatAndValueArchive() override;
  explicit constexpr CellFormatAndValueArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellFormatAndValueArchive(const CellFormatAndValueArchive& from);
  CellFormatAndValueArchive(CellFormatAndValueArchive&& from) noexcept
    : CellFormatAndValueArchive() {
    *this = ::std::move(from);
  }

  inline CellFormatAndValueArchive& operator=(const CellFormatAndValueArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellFormatAndValueArchive& operator=(CellFormatAndValueArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellFormatAndValueArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellFormatAndValueArchive* internal_default_instance() {
    return reinterpret_cast<const CellFormatAndValueArchive*>(
               &_CellFormatAndValueArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CellFormatAndValueArchive& a, CellFormatAndValueArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellFormatAndValueArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellFormatAndValueArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellFormatAndValueArchive* New() const final {
    return CreateMaybeMessage<CellFormatAndValueArchive>(nullptr);
  }

  CellFormatAndValueArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellFormatAndValueArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellFormatAndValueArchive& from);
  void MergeFrom(const CellFormatAndValueArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellFormatAndValueArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellFormatAndValueArchive";
  }
  protected:
  explicit CellFormatAndValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 3,
    kFormattedValueFieldNumber = 16,
    kRichTextStorageFieldNumber = 5,
    kNumberFormatFieldNumber = 10,
    kCurrencyFormatFieldNumber = 11,
    kDateFormatFieldNumber = 12,
    kDurationFormatFieldNumber = 13,
    kTextFormatFieldNumber = 14,
    kBooleanFormatFieldNumber = 15,
    kFormattedRichTextValueFieldNumber = 17,
    kNumberValueFieldNumber = 2,
    kValueTypeFieldNumber = 1,
    kExplicitFlagsFieldNumber = 7,
    kCellFormatKindFieldNumber = 8,
    kBoolValueFieldNumber = 4,
    kUseAllSpareFormatsFieldNumber = 6,
    kApplySpareFormatOnlyFieldNumber = 18,
    kSpareFormatTypeFieldNumber = 19,
    kDecimalLowFieldNumber = 20,
    kDecimalHighFieldNumber = 21,
  };
  // optional string stringValue = 3;
  bool has_stringvalue() const;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringvalue();
  std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // optional string formatted_value = 16;
  bool has_formatted_value() const;
  private:
  bool _internal_has_formatted_value() const;
  public:
  void clear_formatted_value();
  const std::string& formatted_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_formatted_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_formatted_value();
  std::string* release_formatted_value();
  void set_allocated_formatted_value(std::string* formatted_value);
  private:
  const std::string& _internal_formatted_value() const;
  void _internal_set_formatted_value(const std::string& value);
  std::string* _internal_mutable_formatted_value();
  public:

  // optional .TSP.Reference richTextStorage = 5;
  bool has_richtextstorage() const;
  private:
  bool _internal_has_richtextstorage() const;
  public:
  void clear_richtextstorage();
  const ::TSP::Reference& richtextstorage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_richtextstorage();
  ::TSP::Reference* mutable_richtextstorage();
  void set_allocated_richtextstorage(::TSP::Reference* richtextstorage);
  private:
  const ::TSP::Reference& _internal_richtextstorage() const;
  ::TSP::Reference* _internal_mutable_richtextstorage();
  public:
  void unsafe_arena_set_allocated_richtextstorage(
      ::TSP::Reference* richtextstorage);
  ::TSP::Reference* unsafe_arena_release_richtextstorage();

  // optional .TSK.FormatStructArchive number_format = 10;
  bool has_number_format() const;
  private:
  bool _internal_has_number_format() const;
  public:
  void clear_number_format();
  const ::TSK::FormatStructArchive& number_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_number_format();
  ::TSK::FormatStructArchive* mutable_number_format();
  void set_allocated_number_format(::TSK::FormatStructArchive* number_format);
  private:
  const ::TSK::FormatStructArchive& _internal_number_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_number_format();
  public:
  void unsafe_arena_set_allocated_number_format(
      ::TSK::FormatStructArchive* number_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_number_format();

  // optional .TSK.FormatStructArchive currency_format = 11;
  bool has_currency_format() const;
  private:
  bool _internal_has_currency_format() const;
  public:
  void clear_currency_format();
  const ::TSK::FormatStructArchive& currency_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_currency_format();
  ::TSK::FormatStructArchive* mutable_currency_format();
  void set_allocated_currency_format(::TSK::FormatStructArchive* currency_format);
  private:
  const ::TSK::FormatStructArchive& _internal_currency_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_currency_format();
  public:
  void unsafe_arena_set_allocated_currency_format(
      ::TSK::FormatStructArchive* currency_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_currency_format();

  // optional .TSK.FormatStructArchive date_format = 12;
  bool has_date_format() const;
  private:
  bool _internal_has_date_format() const;
  public:
  void clear_date_format();
  const ::TSK::FormatStructArchive& date_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_date_format();
  ::TSK::FormatStructArchive* mutable_date_format();
  void set_allocated_date_format(::TSK::FormatStructArchive* date_format);
  private:
  const ::TSK::FormatStructArchive& _internal_date_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_date_format();
  public:
  void unsafe_arena_set_allocated_date_format(
      ::TSK::FormatStructArchive* date_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_date_format();

  // optional .TSK.FormatStructArchive duration_format = 13;
  bool has_duration_format() const;
  private:
  bool _internal_has_duration_format() const;
  public:
  void clear_duration_format();
  const ::TSK::FormatStructArchive& duration_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_duration_format();
  ::TSK::FormatStructArchive* mutable_duration_format();
  void set_allocated_duration_format(::TSK::FormatStructArchive* duration_format);
  private:
  const ::TSK::FormatStructArchive& _internal_duration_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_duration_format();
  public:
  void unsafe_arena_set_allocated_duration_format(
      ::TSK::FormatStructArchive* duration_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_duration_format();

  // optional .TSK.FormatStructArchive text_format = 14;
  bool has_text_format() const;
  private:
  bool _internal_has_text_format() const;
  public:
  void clear_text_format();
  const ::TSK::FormatStructArchive& text_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_text_format();
  ::TSK::FormatStructArchive* mutable_text_format();
  void set_allocated_text_format(::TSK::FormatStructArchive* text_format);
  private:
  const ::TSK::FormatStructArchive& _internal_text_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_text_format();
  public:
  void unsafe_arena_set_allocated_text_format(
      ::TSK::FormatStructArchive* text_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_text_format();

  // optional .TSK.FormatStructArchive boolean_format = 15;
  bool has_boolean_format() const;
  private:
  bool _internal_has_boolean_format() const;
  public:
  void clear_boolean_format();
  const ::TSK::FormatStructArchive& boolean_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_boolean_format();
  ::TSK::FormatStructArchive* mutable_boolean_format();
  void set_allocated_boolean_format(::TSK::FormatStructArchive* boolean_format);
  private:
  const ::TSK::FormatStructArchive& _internal_boolean_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_boolean_format();
  public:
  void unsafe_arena_set_allocated_boolean_format(
      ::TSK::FormatStructArchive* boolean_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_boolean_format();

  // optional .TSP.Reference formatted_rich_text_value = 17;
  bool has_formatted_rich_text_value() const;
  private:
  bool _internal_has_formatted_rich_text_value() const;
  public:
  void clear_formatted_rich_text_value();
  const ::TSP::Reference& formatted_rich_text_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_formatted_rich_text_value();
  ::TSP::Reference* mutable_formatted_rich_text_value();
  void set_allocated_formatted_rich_text_value(::TSP::Reference* formatted_rich_text_value);
  private:
  const ::TSP::Reference& _internal_formatted_rich_text_value() const;
  ::TSP::Reference* _internal_mutable_formatted_rich_text_value();
  public:
  void unsafe_arena_set_allocated_formatted_rich_text_value(
      ::TSP::Reference* formatted_rich_text_value);
  ::TSP::Reference* unsafe_arena_release_formatted_rich_text_value();

  // optional double numberValue = 2;
  bool has_numbervalue() const;
  private:
  bool _internal_has_numbervalue() const;
  public:
  void clear_numbervalue();
  double numbervalue() const;
  void set_numbervalue(double value);
  private:
  double _internal_numbervalue() const;
  void _internal_set_numbervalue(double value);
  public:

  // required .TST.CellValueType valueType = 1;
  bool has_valuetype() const;
  private:
  bool _internal_has_valuetype() const;
  public:
  void clear_valuetype();
  ::TST::CellValueType valuetype() const;
  void set_valuetype(::TST::CellValueType value);
  private:
  ::TST::CellValueType _internal_valuetype() const;
  void _internal_set_valuetype(::TST::CellValueType value);
  public:

  // required uint32 explicit_flags = 7;
  bool has_explicit_flags() const;
  private:
  bool _internal_has_explicit_flags() const;
  public:
  void clear_explicit_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 explicit_flags() const;
  void set_explicit_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_explicit_flags() const;
  void _internal_set_explicit_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cell_format_kind = 8;
  bool has_cell_format_kind() const;
  private:
  bool _internal_has_cell_format_kind() const;
  public:
  void clear_cell_format_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_format_kind() const;
  void set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_format_kind() const;
  void _internal_set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool boolValue = 4;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // required bool use_all_spare_formats = 6;
  bool has_use_all_spare_formats() const;
  private:
  bool _internal_has_use_all_spare_formats() const;
  public:
  void clear_use_all_spare_formats();
  bool use_all_spare_formats() const;
  void set_use_all_spare_formats(bool value);
  private:
  bool _internal_use_all_spare_formats() const;
  void _internal_set_use_all_spare_formats(bool value);
  public:

  // required bool apply_spare_format_only = 18;
  bool has_apply_spare_format_only() const;
  private:
  bool _internal_has_apply_spare_format_only() const;
  public:
  void clear_apply_spare_format_only();
  bool apply_spare_format_only() const;
  void set_apply_spare_format_only(bool value);
  private:
  bool _internal_apply_spare_format_only() const;
  void _internal_set_apply_spare_format_only(bool value);
  public:

  // required bool spare_format_type = 19;
  bool has_spare_format_type() const;
  private:
  bool _internal_has_spare_format_type() const;
  public:
  void clear_spare_format_type();
  bool spare_format_type() const;
  void set_spare_format_type(bool value);
  private:
  bool _internal_spare_format_type() const;
  void _internal_set_spare_format_type(bool value);
  public:

  // optional uint64 decimal_low = 20;
  bool has_decimal_low() const;
  private:
  bool _internal_has_decimal_low() const;
  public:
  void clear_decimal_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_low() const;
  void set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_low() const;
  void _internal_set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 decimal_high = 21;
  bool has_decimal_high() const;
  private:
  bool _internal_has_decimal_high() const;
  public:
  void clear_decimal_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_high() const;
  void set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_high() const;
  void _internal_set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellFormatAndValueArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formatted_value_;
  ::TSP::Reference* richtextstorage_;
  ::TSK::FormatStructArchive* number_format_;
  ::TSK::FormatStructArchive* currency_format_;
  ::TSK::FormatStructArchive* date_format_;
  ::TSK::FormatStructArchive* duration_format_;
  ::TSK::FormatStructArchive* text_format_;
  ::TSK::FormatStructArchive* boolean_format_;
  ::TSP::Reference* formatted_rich_text_value_;
  double numbervalue_;
  int valuetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 explicit_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_format_kind_;
  bool boolvalue_;
  bool use_all_spare_formats_;
  bool apply_spare_format_only_;
  bool spare_format_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_high_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellSpecArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellSpecArchive) */ {
 public:
  inline CellSpecArchive() : CellSpecArchive(nullptr) {}
  ~CellSpecArchive() override;
  explicit constexpr CellSpecArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellSpecArchive(const CellSpecArchive& from);
  CellSpecArchive(CellSpecArchive&& from) noexcept
    : CellSpecArchive() {
    *this = ::std::move(from);
  }

  inline CellSpecArchive& operator=(const CellSpecArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellSpecArchive& operator=(CellSpecArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellSpecArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellSpecArchive* internal_default_instance() {
    return reinterpret_cast<const CellSpecArchive*>(
               &_CellSpecArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CellSpecArchive& a, CellSpecArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellSpecArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellSpecArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellSpecArchive* New() const final {
    return CreateMaybeMessage<CellSpecArchive>(nullptr);
  }

  CellSpecArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellSpecArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellSpecArchive& from);
  void MergeFrom(const CellSpecArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellSpecArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellSpecArchive";
  }
  protected:
  explicit CellSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 2,
    kChooserControlPopupModelFieldNumber = 6,
    kRangeControlMinFieldNumber = 3,
    kRangeControlMaxFieldNumber = 4,
    kRangeControlIncFieldNumber = 5,
    kInteractionTypeFieldNumber = 1,
    kChooserControlStartWFirstFieldNumber = 7,
    kCategorySummaryShouldDisplayLabelFieldNumber = 8,
  };
  // optional .TSCE.FormulaArchive formula = 2;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // optional .TSP.Reference chooser_control_popup_model = 6;
  bool has_chooser_control_popup_model() const;
  private:
  bool _internal_has_chooser_control_popup_model() const;
  public:
  void clear_chooser_control_popup_model();
  const ::TSP::Reference& chooser_control_popup_model() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_chooser_control_popup_model();
  ::TSP::Reference* mutable_chooser_control_popup_model();
  void set_allocated_chooser_control_popup_model(::TSP::Reference* chooser_control_popup_model);
  private:
  const ::TSP::Reference& _internal_chooser_control_popup_model() const;
  ::TSP::Reference* _internal_mutable_chooser_control_popup_model();
  public:
  void unsafe_arena_set_allocated_chooser_control_popup_model(
      ::TSP::Reference* chooser_control_popup_model);
  ::TSP::Reference* unsafe_arena_release_chooser_control_popup_model();

  // optional double range_control_min = 3;
  bool has_range_control_min() const;
  private:
  bool _internal_has_range_control_min() const;
  public:
  void clear_range_control_min();
  double range_control_min() const;
  void set_range_control_min(double value);
  private:
  double _internal_range_control_min() const;
  void _internal_set_range_control_min(double value);
  public:

  // optional double range_control_max = 4;
  bool has_range_control_max() const;
  private:
  bool _internal_has_range_control_max() const;
  public:
  void clear_range_control_max();
  double range_control_max() const;
  void set_range_control_max(double value);
  private:
  double _internal_range_control_max() const;
  void _internal_set_range_control_max(double value);
  public:

  // optional double range_control_inc = 5;
  bool has_range_control_inc() const;
  private:
  bool _internal_has_range_control_inc() const;
  public:
  void clear_range_control_inc();
  double range_control_inc() const;
  void set_range_control_inc(double value);
  private:
  double _internal_range_control_inc() const;
  void _internal_set_range_control_inc(double value);
  public:

  // required uint32 interaction_type = 1;
  bool has_interaction_type() const;
  private:
  bool _internal_has_interaction_type() const;
  public:
  void clear_interaction_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 interaction_type() const;
  void set_interaction_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interaction_type() const;
  void _internal_set_interaction_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool chooser_control_start_w_first = 7;
  bool has_chooser_control_start_w_first() const;
  private:
  bool _internal_has_chooser_control_start_w_first() const;
  public:
  void clear_chooser_control_start_w_first();
  bool chooser_control_start_w_first() const;
  void set_chooser_control_start_w_first(bool value);
  private:
  bool _internal_chooser_control_start_w_first() const;
  void _internal_set_chooser_control_start_w_first(bool value);
  public:

  // optional bool category_summary_should_display_label = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_category_summary_should_display_label() const;
  private:
  bool _internal_has_category_summary_should_display_label() const;
  public:
  PROTOBUF_DEPRECATED void clear_category_summary_should_display_label();
  PROTOBUF_DEPRECATED bool category_summary_should_display_label() const;
  PROTOBUF_DEPRECATED void set_category_summary_should_display_label(bool value);
  private:
  bool _internal_category_summary_should_display_label() const;
  void _internal_set_category_summary_should_display_label(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellSpecArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::FormulaArchive* formula_;
  ::TSP::Reference* chooser_control_popup_model_;
  double range_control_min_;
  double range_control_max_;
  double range_control_inc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interaction_type_;
  bool chooser_control_start_w_first_;
  bool category_summary_should_display_label_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CommentStorageWrapperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CommentStorageWrapperArchive) */ {
 public:
  inline CommentStorageWrapperArchive() : CommentStorageWrapperArchive(nullptr) {}
  ~CommentStorageWrapperArchive() override;
  explicit constexpr CommentStorageWrapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommentStorageWrapperArchive(const CommentStorageWrapperArchive& from);
  CommentStorageWrapperArchive(CommentStorageWrapperArchive&& from) noexcept
    : CommentStorageWrapperArchive() {
    *this = ::std::move(from);
  }

  inline CommentStorageWrapperArchive& operator=(const CommentStorageWrapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentStorageWrapperArchive& operator=(CommentStorageWrapperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommentStorageWrapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommentStorageWrapperArchive* internal_default_instance() {
    return reinterpret_cast<const CommentStorageWrapperArchive*>(
               &_CommentStorageWrapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CommentStorageWrapperArchive& a, CommentStorageWrapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentStorageWrapperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentStorageWrapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommentStorageWrapperArchive* New() const final {
    return CreateMaybeMessage<CommentStorageWrapperArchive>(nullptr);
  }

  CommentStorageWrapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommentStorageWrapperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommentStorageWrapperArchive& from);
  void MergeFrom(const CommentStorageWrapperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentStorageWrapperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CommentStorageWrapperArchive";
  }
  protected:
  explicit CommentStorageWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentStorageFieldNumber = 1,
  };
  // optional .TSP.Reference comment_storage = 1;
  bool has_comment_storage() const;
  private:
  bool _internal_has_comment_storage() const;
  public:
  void clear_comment_storage();
  const ::TSP::Reference& comment_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_comment_storage();
  ::TSP::Reference* mutable_comment_storage();
  void set_allocated_comment_storage(::TSP::Reference* comment_storage);
  private:
  const ::TSP::Reference& _internal_comment_storage() const;
  ::TSP::Reference* _internal_mutable_comment_storage();
  public:
  void unsafe_arena_set_allocated_comment_storage(
      ::TSP::Reference* comment_storage);
  ::TSP::Reference* unsafe_arena_release_comment_storage();

  // @@protoc_insertion_point(class_scope:TST.CommentStorageWrapperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* comment_storage_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDiffArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellDiffArchive) */ {
 public:
  inline CellDiffArchive() : CellDiffArchive(nullptr) {}
  ~CellDiffArchive() override;
  explicit constexpr CellDiffArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDiffArchive(const CellDiffArchive& from);
  CellDiffArchive(CellDiffArchive&& from) noexcept
    : CellDiffArchive() {
    *this = ::std::move(from);
  }

  inline CellDiffArchive& operator=(const CellDiffArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDiffArchive& operator=(CellDiffArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDiffArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDiffArchive* internal_default_instance() {
    return reinterpret_cast<const CellDiffArchive*>(
               &_CellDiffArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CellDiffArchive& a, CellDiffArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDiffArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDiffArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDiffArchive* New() const final {
    return CreateMaybeMessage<CellDiffArchive>(nullptr);
  }

  CellDiffArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDiffArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDiffArchive& from);
  void MergeFrom(const CellDiffArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDiffArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellDiffArchive";
  }
  protected:
  explicit CellDiffArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyMapToSetFieldNumber = 1,
    kPropertyMapToResetFieldNumber = 2,
  };
  // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
  bool has_property_map_to_set() const;
  private:
  bool _internal_has_property_map_to_set() const;
  public:
  void clear_property_map_to_set();
  const ::TSS::CommandPropertyMapArchive& property_map_to_set() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::CommandPropertyMapArchive* release_property_map_to_set();
  ::TSS::CommandPropertyMapArchive* mutable_property_map_to_set();
  void set_allocated_property_map_to_set(::TSS::CommandPropertyMapArchive* property_map_to_set);
  private:
  const ::TSS::CommandPropertyMapArchive& _internal_property_map_to_set() const;
  ::TSS::CommandPropertyMapArchive* _internal_mutable_property_map_to_set();
  public:
  void unsafe_arena_set_allocated_property_map_to_set(
      ::TSS::CommandPropertyMapArchive* property_map_to_set);
  ::TSS::CommandPropertyMapArchive* unsafe_arena_release_property_map_to_set();

  // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
  bool has_property_map_to_reset() const;
  private:
  bool _internal_has_property_map_to_reset() const;
  public:
  void clear_property_map_to_reset();
  const ::TSS::CommandPropertyMapArchive& property_map_to_reset() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::CommandPropertyMapArchive* release_property_map_to_reset();
  ::TSS::CommandPropertyMapArchive* mutable_property_map_to_reset();
  void set_allocated_property_map_to_reset(::TSS::CommandPropertyMapArchive* property_map_to_reset);
  private:
  const ::TSS::CommandPropertyMapArchive& _internal_property_map_to_reset() const;
  ::TSS::CommandPropertyMapArchive* _internal_mutable_property_map_to_reset();
  public:
  void unsafe_arena_set_allocated_property_map_to_reset(
      ::TSS::CommandPropertyMapArchive* property_map_to_reset);
  ::TSS::CommandPropertyMapArchive* unsafe_arena_release_property_map_to_reset();

  // @@protoc_insertion_point(class_scope:TST.CellDiffArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::CommandPropertyMapArchive* property_map_to_set_;
  ::TSS::CommandPropertyMapArchive* property_map_to_reset_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDiffArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellDiffArray) */ {
 public:
  inline CellDiffArray() : CellDiffArray(nullptr) {}
  ~CellDiffArray() override;
  explicit constexpr CellDiffArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDiffArray(const CellDiffArray& from);
  CellDiffArray(CellDiffArray&& from) noexcept
    : CellDiffArray() {
    *this = ::std::move(from);
  }

  inline CellDiffArray& operator=(const CellDiffArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDiffArray& operator=(CellDiffArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDiffArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDiffArray* internal_default_instance() {
    return reinterpret_cast<const CellDiffArray*>(
               &_CellDiffArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CellDiffArray& a, CellDiffArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDiffArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDiffArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDiffArray* New() const final {
    return CreateMaybeMessage<CellDiffArray>(nullptr);
  }

  CellDiffArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDiffArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDiffArray& from);
  void MergeFrom(const CellDiffArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDiffArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellDiffArray";
  }
  protected:
  explicit CellDiffArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TST.CellDiffArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDiffArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellDiffArraySegment) */ {
 public:
  inline CellDiffArraySegment() : CellDiffArraySegment(nullptr) {}
  ~CellDiffArraySegment() override;
  explicit constexpr CellDiffArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDiffArraySegment(const CellDiffArraySegment& from);
  CellDiffArraySegment(CellDiffArraySegment&& from) noexcept
    : CellDiffArraySegment() {
    *this = ::std::move(from);
  }

  inline CellDiffArraySegment& operator=(const CellDiffArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDiffArraySegment& operator=(CellDiffArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDiffArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDiffArraySegment* internal_default_instance() {
    return reinterpret_cast<const CellDiffArraySegment*>(
               &_CellDiffArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CellDiffArraySegment& a, CellDiffArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDiffArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDiffArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDiffArraySegment* New() const final {
    return CreateMaybeMessage<CellDiffArraySegment>(nullptr);
  }

  CellDiffArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDiffArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDiffArraySegment& from);
  void MergeFrom(const CellDiffArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDiffArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellDiffArraySegment";
  }
  protected:
  explicit CellDiffArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
  };
  // repeated .TST.CellDiffArchive elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TST::CellDiffArchive* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellDiffArchive >*
      mutable_elements();
  private:
  const ::TST::CellDiffArchive& _internal_elements(int index) const;
  ::TST::CellDiffArchive* _internal_add_elements();
  public:
  const ::TST::CellDiffArchive& elements(int index) const;
  ::TST::CellDiffArchive* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellDiffArchive >&
      elements() const;

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // @@protoc_insertion_point(class_scope:TST.CellDiffArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellDiffArchive > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellDiffMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellDiffMapArchive) */ {
 public:
  inline CellDiffMapArchive() : CellDiffMapArchive(nullptr) {}
  ~CellDiffMapArchive() override;
  explicit constexpr CellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellDiffMapArchive(const CellDiffMapArchive& from);
  CellDiffMapArchive(CellDiffMapArchive&& from) noexcept
    : CellDiffMapArchive() {
    *this = ::std::move(from);
  }

  inline CellDiffMapArchive& operator=(const CellDiffMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDiffMapArchive& operator=(CellDiffMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellDiffMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellDiffMapArchive* internal_default_instance() {
    return reinterpret_cast<const CellDiffMapArchive*>(
               &_CellDiffMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CellDiffMapArchive& a, CellDiffMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDiffMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellDiffMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDiffMapArchive* New() const final {
    return CreateMaybeMessage<CellDiffMapArchive>(nullptr);
  }

  CellDiffMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDiffMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDiffMapArchive& from);
  void MergeFrom(const CellDiffMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDiffMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellDiffMapArchive";
  }
  protected:
  explicit CellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpandedCellIdsFieldNumber = 2,
    kCellUidsFieldNumber = 3,
    kCellDiffArrayFieldNumber = 4,
    kUidBasedFieldNumber = 1,
  };
  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
  int expanded_cell_ids_size() const;
  private:
  int _internal_expanded_cell_ids_size() const;
  public:
  void clear_expanded_cell_ids();
  ::TSCE::CellCoordinateArchive* mutable_expanded_cell_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_expanded_cell_ids();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_expanded_cell_ids(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_expanded_cell_ids();
  public:
  const ::TSCE::CellCoordinateArchive& expanded_cell_ids(int index) const;
  ::TSCE::CellCoordinateArchive* add_expanded_cell_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      expanded_cell_ids() const;

  // required .TST.CellUIDListArchive cell_uids = 3;
  bool has_cell_uids() const;
  private:
  bool _internal_has_cell_uids() const;
  public:
  void clear_cell_uids();
  const ::TST::CellUIDListArchive& cell_uids() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDListArchive* release_cell_uids();
  ::TST::CellUIDListArchive* mutable_cell_uids();
  void set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids);
  private:
  const ::TST::CellUIDListArchive& _internal_cell_uids() const;
  ::TST::CellUIDListArchive* _internal_mutable_cell_uids();
  public:
  void unsafe_arena_set_allocated_cell_uids(
      ::TST::CellUIDListArchive* cell_uids);
  ::TST::CellUIDListArchive* unsafe_arena_release_cell_uids();

  // optional .TSP.Reference cell_diff_array = 4;
  bool has_cell_diff_array() const;
  private:
  bool _internal_has_cell_diff_array() const;
  public:
  void clear_cell_diff_array();
  const ::TSP::Reference& cell_diff_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_cell_diff_array();
  ::TSP::Reference* mutable_cell_diff_array();
  void set_allocated_cell_diff_array(::TSP::Reference* cell_diff_array);
  private:
  const ::TSP::Reference& _internal_cell_diff_array() const;
  ::TSP::Reference* _internal_mutable_cell_diff_array();
  public:
  void unsafe_arena_set_allocated_cell_diff_array(
      ::TSP::Reference* cell_diff_array);
  ::TSP::Reference* unsafe_arena_release_cell_diff_array();

  // required bool uid_based = 1;
  bool has_uid_based() const;
  private:
  bool _internal_has_uid_based() const;
  public:
  void clear_uid_based();
  bool uid_based() const;
  void set_uid_based(bool value);
  private:
  bool _internal_uid_based() const;
  void _internal_set_uid_based(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellDiffMapArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > expanded_cell_ids_;
  ::TST::CellUIDListArchive* cell_uids_;
  ::TSP::Reference* cell_diff_array_;
  bool uid_based_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DoubleStyleMapArchive_DoubleStyleMapEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive) */ {
 public:
  inline DoubleStyleMapArchive_DoubleStyleMapEntryArchive() : DoubleStyleMapArchive_DoubleStyleMapEntryArchive(nullptr) {}
  ~DoubleStyleMapArchive_DoubleStyleMapEntryArchive() override;
  explicit constexpr DoubleStyleMapArchive_DoubleStyleMapEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleStyleMapArchive_DoubleStyleMapEntryArchive(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from);
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive(DoubleStyleMapArchive_DoubleStyleMapEntryArchive&& from) noexcept
    : DoubleStyleMapArchive_DoubleStyleMapEntryArchive() {
    *this = ::std::move(from);
  }

  inline DoubleStyleMapArchive_DoubleStyleMapEntryArchive& operator=(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleStyleMapArchive_DoubleStyleMapEntryArchive& operator=(DoubleStyleMapArchive_DoubleStyleMapEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* internal_default_instance() {
    return reinterpret_cast<const DoubleStyleMapArchive_DoubleStyleMapEntryArchive*>(
               &_DoubleStyleMapArchive_DoubleStyleMapEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive& a, DoubleStyleMapArchive_DoubleStyleMapEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleStyleMapArchive_DoubleStyleMapEntryArchive* New() const final {
    return CreateMaybeMessage<DoubleStyleMapArchive_DoubleStyleMapEntryArchive>(nullptr);
  }

  DoubleStyleMapArchive_DoubleStyleMapEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleStyleMapArchive_DoubleStyleMapEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from);
  void MergeFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive";
  }
  protected:
  explicit DoubleStyleMapArchive_DoubleStyleMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIdFieldNumber = 1,
    kOldStyleFieldNumber = 2,
    kNewStyleFieldNumber = 3,
  };
  // required .TST.CellID cell_id = 1;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  const ::TST::CellID& cell_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellID* release_cell_id();
  ::TST::CellID* mutable_cell_id();
  void set_allocated_cell_id(::TST::CellID* cell_id);
  private:
  const ::TST::CellID& _internal_cell_id() const;
  ::TST::CellID* _internal_mutable_cell_id();
  public:
  void unsafe_arena_set_allocated_cell_id(
      ::TST::CellID* cell_id);
  ::TST::CellID* unsafe_arena_release_cell_id();

  // required .TSP.Reference old_style = 2;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSP::Reference& old_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_style();
  ::TSP::Reference* mutable_old_style();
  void set_allocated_old_style(::TSP::Reference* old_style);
  private:
  const ::TSP::Reference& _internal_old_style() const;
  ::TSP::Reference* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSP::Reference* old_style);
  ::TSP::Reference* unsafe_arena_release_old_style();

  // required .TSP.Reference new_style = 3;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // @@protoc_insertion_point(class_scope:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::CellID* cell_id_;
  ::TSP::Reference* old_style_;
  ::TSP::Reference* new_style_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DoubleStyleMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DoubleStyleMapArchive) */ {
 public:
  inline DoubleStyleMapArchive() : DoubleStyleMapArchive(nullptr) {}
  ~DoubleStyleMapArchive() override;
  explicit constexpr DoubleStyleMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoubleStyleMapArchive(const DoubleStyleMapArchive& from);
  DoubleStyleMapArchive(DoubleStyleMapArchive&& from) noexcept
    : DoubleStyleMapArchive() {
    *this = ::std::move(from);
  }

  inline DoubleStyleMapArchive& operator=(const DoubleStyleMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleStyleMapArchive& operator=(DoubleStyleMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoubleStyleMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoubleStyleMapArchive* internal_default_instance() {
    return reinterpret_cast<const DoubleStyleMapArchive*>(
               &_DoubleStyleMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(DoubleStyleMapArchive& a, DoubleStyleMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleStyleMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleStyleMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleStyleMapArchive* New() const final {
    return CreateMaybeMessage<DoubleStyleMapArchive>(nullptr);
  }

  DoubleStyleMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleStyleMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleStyleMapArchive& from);
  void MergeFrom(const DoubleStyleMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleStyleMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DoubleStyleMapArchive";
  }
  protected:
  explicit DoubleStyleMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DoubleStyleMapArchive_DoubleStyleMapEntryArchive DoubleStyleMapEntryArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kCellMapEntryFieldNumber = 3,
    kCapacityFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  int cell_map_entry_size() const;
  private:
  int _internal_cell_map_entry_size() const;
  public:
  void clear_cell_map_entry();
  ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* mutable_cell_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >*
      mutable_cell_map_entry();
  private:
  const ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive& _internal_cell_map_entry(int index) const;
  ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* _internal_add_cell_map_entry();
  public:
  const ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive& cell_map_entry(int index) const;
  ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* add_cell_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >&
      cell_map_entry() const;

  // required uint32 capacity = 1;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.DoubleStyleMapArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive > cell_map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleTableMapArchive_StyleTableMapEntryArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StyleTableMapArchive.StyleTableMapEntryArchive) */ {
 public:
  inline StyleTableMapArchive_StyleTableMapEntryArchive() : StyleTableMapArchive_StyleTableMapEntryArchive(nullptr) {}
  ~StyleTableMapArchive_StyleTableMapEntryArchive() override;
  explicit constexpr StyleTableMapArchive_StyleTableMapEntryArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleTableMapArchive_StyleTableMapEntryArchive(const StyleTableMapArchive_StyleTableMapEntryArchive& from);
  StyleTableMapArchive_StyleTableMapEntryArchive(StyleTableMapArchive_StyleTableMapEntryArchive&& from) noexcept
    : StyleTableMapArchive_StyleTableMapEntryArchive() {
    *this = ::std::move(from);
  }

  inline StyleTableMapArchive_StyleTableMapEntryArchive& operator=(const StyleTableMapArchive_StyleTableMapEntryArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleTableMapArchive_StyleTableMapEntryArchive& operator=(StyleTableMapArchive_StyleTableMapEntryArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleTableMapArchive_StyleTableMapEntryArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleTableMapArchive_StyleTableMapEntryArchive* internal_default_instance() {
    return reinterpret_cast<const StyleTableMapArchive_StyleTableMapEntryArchive*>(
               &_StyleTableMapArchive_StyleTableMapEntryArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(StyleTableMapArchive_StyleTableMapEntryArchive& a, StyleTableMapArchive_StyleTableMapEntryArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleTableMapArchive_StyleTableMapEntryArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleTableMapArchive_StyleTableMapEntryArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleTableMapArchive_StyleTableMapEntryArchive* New() const final {
    return CreateMaybeMessage<StyleTableMapArchive_StyleTableMapEntryArchive>(nullptr);
  }

  StyleTableMapArchive_StyleTableMapEntryArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleTableMapArchive_StyleTableMapEntryArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from);
  void MergeFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleTableMapArchive_StyleTableMapEntryArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StyleTableMapArchive.StyleTableMapEntryArchive";
  }
  protected:
  explicit StyleTableMapArchive_StyleTableMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldStyleFieldNumber = 2,
    kNewStyleFieldNumber = 3,
    kKeyFieldNumber = 1,
  };
  // required .TSP.Reference old_style = 2;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSP::Reference& old_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_style();
  ::TSP::Reference* mutable_old_style();
  void set_allocated_old_style(::TSP::Reference* old_style);
  private:
  const ::TSP::Reference& _internal_old_style() const;
  ::TSP::Reference* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSP::Reference* old_style);
  ::TSP::Reference* unsafe_arena_release_old_style();

  // required .TSP.Reference new_style = 3;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // required uint32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* old_style_;
  ::TSP::Reference* new_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleTableMapArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StyleTableMapArchive) */ {
 public:
  inline StyleTableMapArchive() : StyleTableMapArchive(nullptr) {}
  ~StyleTableMapArchive() override;
  explicit constexpr StyleTableMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleTableMapArchive(const StyleTableMapArchive& from);
  StyleTableMapArchive(StyleTableMapArchive&& from) noexcept
    : StyleTableMapArchive() {
    *this = ::std::move(from);
  }

  inline StyleTableMapArchive& operator=(const StyleTableMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleTableMapArchive& operator=(StyleTableMapArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleTableMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleTableMapArchive* internal_default_instance() {
    return reinterpret_cast<const StyleTableMapArchive*>(
               &_StyleTableMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(StyleTableMapArchive& a, StyleTableMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleTableMapArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleTableMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleTableMapArchive* New() const final {
    return CreateMaybeMessage<StyleTableMapArchive>(nullptr);
  }

  StyleTableMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleTableMapArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleTableMapArchive& from);
  void MergeFrom(const StyleTableMapArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleTableMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StyleTableMapArchive";
  }
  protected:
  explicit StyleTableMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StyleTableMapArchive_StyleTableMapEntryArchive StyleTableMapEntryArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kMapEntryFieldNumber = 3,
    kCapacityFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  int map_entry_size() const;
  private:
  int _internal_map_entry_size() const;
  public:
  void clear_map_entry();
  ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* mutable_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >*
      mutable_map_entry();
  private:
  const ::TST::StyleTableMapArchive_StyleTableMapEntryArchive& _internal_map_entry(int index) const;
  ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* _internal_add_map_entry();
  public:
  const ::TST::StyleTableMapArchive_StyleTableMapEntryArchive& map_entry(int index) const;
  ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* add_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >&
      map_entry() const;

  // required uint32 capacity = 1;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StyleTableMapArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive > map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class SelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.SelectionArchive) */ {
 public:
  inline SelectionArchive() : SelectionArchive(nullptr) {}
  ~SelectionArchive() override;
  explicit constexpr SelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionArchive(const SelectionArchive& from);
  SelectionArchive(SelectionArchive&& from) noexcept
    : SelectionArchive() {
    *this = ::std::move(from);
  }

  inline SelectionArchive& operator=(const SelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionArchive& operator=(SelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionArchive* internal_default_instance() {
    return reinterpret_cast<const SelectionArchive*>(
               &_SelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SelectionArchive& a, SelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectionArchive* New() const final {
    return CreateMaybeMessage<SelectionArchive>(nullptr);
  }

  SelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectionArchive& from);
  void MergeFrom(const SelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.SelectionArchive";
  }
  protected:
  explicit SelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRangesFieldNumber = 6,
    kBaseRangesFieldNumber = 7,
    kTableModelFieldNumber = 1,
    kAnchorCellFieldNumber = 5,
    kCursorCellFieldNumber = 8,
    kTableInfoFieldNumber = 9,
    kCellUidRegionFieldNumber = 10,
    kBaseUidRegionFieldNumber = 11,
    kAnchorCellUidFieldNumber = 12,
    kCursorCellUidFieldNumber = 13,
    kSelectionTypeFieldNumber = 4,
  };
  // repeated .TST.CellRange cell_ranges = 6;
  int cell_ranges_size() const;
  private:
  int _internal_cell_ranges_size() const;
  public:
  void clear_cell_ranges();
  ::TST::CellRange* mutable_cell_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
      mutable_cell_ranges();
  private:
  const ::TST::CellRange& _internal_cell_ranges(int index) const;
  ::TST::CellRange* _internal_add_cell_ranges();
  public:
  const ::TST::CellRange& cell_ranges(int index) const;
  ::TST::CellRange* add_cell_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
      cell_ranges() const;

  // repeated .TST.CellRange base_ranges = 7;
  int base_ranges_size() const;
  private:
  int _internal_base_ranges_size() const;
  public:
  void clear_base_ranges();
  ::TST::CellRange* mutable_base_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
      mutable_base_ranges();
  private:
  const ::TST::CellRange& _internal_base_ranges(int index) const;
  ::TST::CellRange* _internal_add_base_ranges();
  public:
  const ::TST::CellRange& base_ranges(int index) const;
  ::TST::CellRange* add_base_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
      base_ranges() const;

  // optional .TSP.Reference tableModel = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_tablemodel() const;
  private:
  bool _internal_has_tablemodel() const;
  public:
  PROTOBUF_DEPRECATED void clear_tablemodel();
  PROTOBUF_DEPRECATED const ::TSP::Reference& tablemodel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_tablemodel();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_tablemodel();
  PROTOBUF_DEPRECATED void set_allocated_tablemodel(::TSP::Reference* tablemodel);
  private:
  const ::TSP::Reference& _internal_tablemodel() const;
  ::TSP::Reference* _internal_mutable_tablemodel();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_tablemodel(
      ::TSP::Reference* tablemodel);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_tablemodel();

  // optional .TST.CellID anchor_cell = 5;
  bool has_anchor_cell() const;
  private:
  bool _internal_has_anchor_cell() const;
  public:
  void clear_anchor_cell();
  const ::TST::CellID& anchor_cell() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellID* release_anchor_cell();
  ::TST::CellID* mutable_anchor_cell();
  void set_allocated_anchor_cell(::TST::CellID* anchor_cell);
  private:
  const ::TST::CellID& _internal_anchor_cell() const;
  ::TST::CellID* _internal_mutable_anchor_cell();
  public:
  void unsafe_arena_set_allocated_anchor_cell(
      ::TST::CellID* anchor_cell);
  ::TST::CellID* unsafe_arena_release_anchor_cell();

  // optional .TST.CellID cursor_cell = 8;
  bool has_cursor_cell() const;
  private:
  bool _internal_has_cursor_cell() const;
  public:
  void clear_cursor_cell();
  const ::TST::CellID& cursor_cell() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellID* release_cursor_cell();
  ::TST::CellID* mutable_cursor_cell();
  void set_allocated_cursor_cell(::TST::CellID* cursor_cell);
  private:
  const ::TST::CellID& _internal_cursor_cell() const;
  ::TST::CellID* _internal_mutable_cursor_cell();
  public:
  void unsafe_arena_set_allocated_cursor_cell(
      ::TST::CellID* cursor_cell);
  ::TST::CellID* unsafe_arena_release_cursor_cell();

  // optional .TSP.Reference table_info = 9;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
  bool has_cell_uid_region() const;
  private:
  bool _internal_has_cell_uid_region() const;
  public:
  void clear_cell_uid_region();
  const ::TST::CellUIDRegionArchive& cell_uid_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDRegionArchive* release_cell_uid_region();
  ::TST::CellUIDRegionArchive* mutable_cell_uid_region();
  void set_allocated_cell_uid_region(::TST::CellUIDRegionArchive* cell_uid_region);
  private:
  const ::TST::CellUIDRegionArchive& _internal_cell_uid_region() const;
  ::TST::CellUIDRegionArchive* _internal_mutable_cell_uid_region();
  public:
  void unsafe_arena_set_allocated_cell_uid_region(
      ::TST::CellUIDRegionArchive* cell_uid_region);
  ::TST::CellUIDRegionArchive* unsafe_arena_release_cell_uid_region();

  // optional .TST.CellUIDRegionArchive base_uid_region = 11;
  bool has_base_uid_region() const;
  private:
  bool _internal_has_base_uid_region() const;
  public:
  void clear_base_uid_region();
  const ::TST::CellUIDRegionArchive& base_uid_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDRegionArchive* release_base_uid_region();
  ::TST::CellUIDRegionArchive* mutable_base_uid_region();
  void set_allocated_base_uid_region(::TST::CellUIDRegionArchive* base_uid_region);
  private:
  const ::TST::CellUIDRegionArchive& _internal_base_uid_region() const;
  ::TST::CellUIDRegionArchive* _internal_mutable_base_uid_region();
  public:
  void unsafe_arena_set_allocated_base_uid_region(
      ::TST::CellUIDRegionArchive* base_uid_region);
  ::TST::CellUIDRegionArchive* unsafe_arena_release_base_uid_region();

  // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
  bool has_anchor_cell_uid() const;
  private:
  bool _internal_has_anchor_cell_uid() const;
  public:
  void clear_anchor_cell_uid();
  const ::TSP::UUIDCoordArchive& anchor_cell_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDCoordArchive* release_anchor_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_anchor_cell_uid();
  void set_allocated_anchor_cell_uid(::TSP::UUIDCoordArchive* anchor_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_anchor_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_anchor_cell_uid();
  public:
  void unsafe_arena_set_allocated_anchor_cell_uid(
      ::TSP::UUIDCoordArchive* anchor_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_anchor_cell_uid();

  // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
  bool has_cursor_cell_uid() const;
  private:
  bool _internal_has_cursor_cell_uid() const;
  public:
  void clear_cursor_cell_uid();
  const ::TSP::UUIDCoordArchive& cursor_cell_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDCoordArchive* release_cursor_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_cursor_cell_uid();
  void set_allocated_cursor_cell_uid(::TSP::UUIDCoordArchive* cursor_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_cursor_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_cursor_cell_uid();
  public:
  void unsafe_arena_set_allocated_cursor_cell_uid(
      ::TSP::UUIDCoordArchive* cursor_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_cursor_cell_uid();

  // required .TST.SelectionTypeArchive selection_type = 4;
  bool has_selection_type() const;
  private:
  bool _internal_has_selection_type() const;
  public:
  void clear_selection_type();
  ::TST::SelectionTypeArchive selection_type() const;
  void set_selection_type(::TST::SelectionTypeArchive value);
  private:
  ::TST::SelectionTypeArchive _internal_selection_type() const;
  void _internal_set_selection_type(::TST::SelectionTypeArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.SelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange > cell_ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange > base_ranges_;
  ::TSP::Reference* tablemodel_;
  ::TST::CellID* anchor_cell_;
  ::TST::CellID* cursor_cell_;
  ::TSP::Reference* table_info_;
  ::TST::CellUIDRegionArchive* cell_uid_region_;
  ::TST::CellUIDRegionArchive* base_uid_region_;
  ::TSP::UUIDCoordArchive* anchor_cell_uid_;
  ::TSP::UUIDCoordArchive* cursor_cell_uid_;
  int selection_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DeathhawkRdar39989167CellSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DeathhawkRdar39989167CellSelectionArchive) */ {
 public:
  inline DeathhawkRdar39989167CellSelectionArchive() : DeathhawkRdar39989167CellSelectionArchive(nullptr) {}
  ~DeathhawkRdar39989167CellSelectionArchive() override;
  explicit constexpr DeathhawkRdar39989167CellSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeathhawkRdar39989167CellSelectionArchive(const DeathhawkRdar39989167CellSelectionArchive& from);
  DeathhawkRdar39989167CellSelectionArchive(DeathhawkRdar39989167CellSelectionArchive&& from) noexcept
    : DeathhawkRdar39989167CellSelectionArchive() {
    *this = ::std::move(from);
  }

  inline DeathhawkRdar39989167CellSelectionArchive& operator=(const DeathhawkRdar39989167CellSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeathhawkRdar39989167CellSelectionArchive& operator=(DeathhawkRdar39989167CellSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeathhawkRdar39989167CellSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeathhawkRdar39989167CellSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const DeathhawkRdar39989167CellSelectionArchive*>(
               &_DeathhawkRdar39989167CellSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DeathhawkRdar39989167CellSelectionArchive& a, DeathhawkRdar39989167CellSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DeathhawkRdar39989167CellSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeathhawkRdar39989167CellSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeathhawkRdar39989167CellSelectionArchive* New() const final {
    return CreateMaybeMessage<DeathhawkRdar39989167CellSelectionArchive>(nullptr);
  }

  DeathhawkRdar39989167CellSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeathhawkRdar39989167CellSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeathhawkRdar39989167CellSelectionArchive& from);
  void MergeFrom(const DeathhawkRdar39989167CellSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeathhawkRdar39989167CellSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DeathhawkRdar39989167CellSelectionArchive";
  }
  protected:
  explicit DeathhawkRdar39989167CellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoFieldNumber = 1,
    kCellUidRegionFieldNumber = 3,
    kBaseUidRegionFieldNumber = 4,
    kAnchorCellUidFieldNumber = 5,
    kCursorCellUidFieldNumber = 6,
    kSelectionTypeFieldNumber = 2,
  };
  // optional .TSP.Reference table_info = 1;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
  bool has_cell_uid_region() const;
  private:
  bool _internal_has_cell_uid_region() const;
  public:
  void clear_cell_uid_region();
  const ::TST::CellUIDRegionArchive& cell_uid_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDRegionArchive* release_cell_uid_region();
  ::TST::CellUIDRegionArchive* mutable_cell_uid_region();
  void set_allocated_cell_uid_region(::TST::CellUIDRegionArchive* cell_uid_region);
  private:
  const ::TST::CellUIDRegionArchive& _internal_cell_uid_region() const;
  ::TST::CellUIDRegionArchive* _internal_mutable_cell_uid_region();
  public:
  void unsafe_arena_set_allocated_cell_uid_region(
      ::TST::CellUIDRegionArchive* cell_uid_region);
  ::TST::CellUIDRegionArchive* unsafe_arena_release_cell_uid_region();

  // optional .TST.CellUIDRegionArchive base_uid_region = 4;
  bool has_base_uid_region() const;
  private:
  bool _internal_has_base_uid_region() const;
  public:
  void clear_base_uid_region();
  const ::TST::CellUIDRegionArchive& base_uid_region() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellUIDRegionArchive* release_base_uid_region();
  ::TST::CellUIDRegionArchive* mutable_base_uid_region();
  void set_allocated_base_uid_region(::TST::CellUIDRegionArchive* base_uid_region);
  private:
  const ::TST::CellUIDRegionArchive& _internal_base_uid_region() const;
  ::TST::CellUIDRegionArchive* _internal_mutable_base_uid_region();
  public:
  void unsafe_arena_set_allocated_base_uid_region(
      ::TST::CellUIDRegionArchive* base_uid_region);
  ::TST::CellUIDRegionArchive* unsafe_arena_release_base_uid_region();

  // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
  bool has_anchor_cell_uid() const;
  private:
  bool _internal_has_anchor_cell_uid() const;
  public:
  void clear_anchor_cell_uid();
  const ::TSP::UUIDCoordArchive& anchor_cell_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDCoordArchive* release_anchor_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_anchor_cell_uid();
  void set_allocated_anchor_cell_uid(::TSP::UUIDCoordArchive* anchor_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_anchor_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_anchor_cell_uid();
  public:
  void unsafe_arena_set_allocated_anchor_cell_uid(
      ::TSP::UUIDCoordArchive* anchor_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_anchor_cell_uid();

  // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
  bool has_cursor_cell_uid() const;
  private:
  bool _internal_has_cursor_cell_uid() const;
  public:
  void clear_cursor_cell_uid();
  const ::TSP::UUIDCoordArchive& cursor_cell_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDCoordArchive* release_cursor_cell_uid();
  ::TSP::UUIDCoordArchive* mutable_cursor_cell_uid();
  void set_allocated_cursor_cell_uid(::TSP::UUIDCoordArchive* cursor_cell_uid);
  private:
  const ::TSP::UUIDCoordArchive& _internal_cursor_cell_uid() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_cursor_cell_uid();
  public:
  void unsafe_arena_set_allocated_cursor_cell_uid(
      ::TSP::UUIDCoordArchive* cursor_cell_uid);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_cursor_cell_uid();

  // optional .TST.SelectionTypeArchive selection_type = 2;
  bool has_selection_type() const;
  private:
  bool _internal_has_selection_type() const;
  public:
  void clear_selection_type();
  ::TST::SelectionTypeArchive selection_type() const;
  void set_selection_type(::TST::SelectionTypeArchive value);
  private:
  ::TST::SelectionTypeArchive _internal_selection_type() const;
  void _internal_set_selection_type(::TST::SelectionTypeArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.DeathhawkRdar39989167CellSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* table_info_;
  ::TST::CellUIDRegionArchive* cell_uid_region_;
  ::TST::CellUIDRegionArchive* base_uid_region_;
  ::TSP::UUIDCoordArchive* anchor_cell_uid_;
  ::TSP::UUIDCoordArchive* cursor_cell_uid_;
  int selection_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StrokeSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StrokeSelectionArchive) */ {
 public:
  inline StrokeSelectionArchive() : StrokeSelectionArchive(nullptr) {}
  ~StrokeSelectionArchive() override;
  explicit constexpr StrokeSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrokeSelectionArchive(const StrokeSelectionArchive& from);
  StrokeSelectionArchive(StrokeSelectionArchive&& from) noexcept
    : StrokeSelectionArchive() {
    *this = ::std::move(from);
  }

  inline StrokeSelectionArchive& operator=(const StrokeSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrokeSelectionArchive& operator=(StrokeSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrokeSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrokeSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const StrokeSelectionArchive*>(
               &_StrokeSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(StrokeSelectionArchive& a, StrokeSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StrokeSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrokeSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrokeSelectionArchive* New() const final {
    return CreateMaybeMessage<StrokeSelectionArchive>(nullptr);
  }

  StrokeSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrokeSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrokeSelectionArchive& from);
  void MergeFrom(const StrokeSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrokeSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StrokeSelectionArchive";
  }
  protected:
  explicit StrokeSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
  };
  // optional int32 mask = 1;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 mask() const;
  void set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask() const;
  void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.StrokeSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ControlCellSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ControlCellSelectionArchive) */ {
 public:
  inline ControlCellSelectionArchive() : ControlCellSelectionArchive(nullptr) {}
  ~ControlCellSelectionArchive() override;
  explicit constexpr ControlCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCellSelectionArchive(const ControlCellSelectionArchive& from);
  ControlCellSelectionArchive(ControlCellSelectionArchive&& from) noexcept
    : ControlCellSelectionArchive() {
    *this = ::std::move(from);
  }

  inline ControlCellSelectionArchive& operator=(const ControlCellSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCellSelectionArchive& operator=(ControlCellSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCellSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCellSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const ControlCellSelectionArchive*>(
               &_ControlCellSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ControlCellSelectionArchive& a, ControlCellSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCellSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCellSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCellSelectionArchive* New() const final {
    return CreateMaybeMessage<ControlCellSelectionArchive>(nullptr);
  }

  ControlCellSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCellSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlCellSelectionArchive& from);
  void MergeFrom(const ControlCellSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCellSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ControlCellSelectionArchive";
  }
  protected:
  explicit ControlCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TST.ControlCellSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StockCellSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StockCellSelectionArchive) */ {
 public:
  inline StockCellSelectionArchive() : StockCellSelectionArchive(nullptr) {}
  ~StockCellSelectionArchive() override;
  explicit constexpr StockCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StockCellSelectionArchive(const StockCellSelectionArchive& from);
  StockCellSelectionArchive(StockCellSelectionArchive&& from) noexcept
    : StockCellSelectionArchive() {
    *this = ::std::move(from);
  }

  inline StockCellSelectionArchive& operator=(const StockCellSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StockCellSelectionArchive& operator=(StockCellSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StockCellSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StockCellSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const StockCellSelectionArchive*>(
               &_StockCellSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(StockCellSelectionArchive& a, StockCellSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StockCellSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StockCellSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StockCellSelectionArchive* New() const final {
    return CreateMaybeMessage<StockCellSelectionArchive>(nullptr);
  }

  StockCellSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StockCellSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StockCellSelectionArchive& from);
  void MergeFrom(const StockCellSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StockCellSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StockCellSelectionArchive";
  }
  protected:
  explicit StockCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TST.StockCellSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableNameSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableNameSelectionArchive) */ {
 public:
  inline TableNameSelectionArchive() : TableNameSelectionArchive(nullptr) {}
  ~TableNameSelectionArchive() override;
  explicit constexpr TableNameSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableNameSelectionArchive(const TableNameSelectionArchive& from);
  TableNameSelectionArchive(TableNameSelectionArchive&& from) noexcept
    : TableNameSelectionArchive() {
    *this = ::std::move(from);
  }

  inline TableNameSelectionArchive& operator=(const TableNameSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableNameSelectionArchive& operator=(TableNameSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableNameSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableNameSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const TableNameSelectionArchive*>(
               &_TableNameSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TableNameSelectionArchive& a, TableNameSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableNameSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableNameSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableNameSelectionArchive* New() const final {
    return CreateMaybeMessage<TableNameSelectionArchive>(nullptr);
  }

  TableNameSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableNameSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableNameSelectionArchive& from);
  void MergeFrom(const TableNameSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableNameSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableNameSelectionArchive";
  }
  protected:
  explicit TableNameSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TST.TableNameSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class AutofillSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.AutofillSelectionArchive) */ {
 public:
  inline AutofillSelectionArchive() : AutofillSelectionArchive(nullptr) {}
  ~AutofillSelectionArchive() override;
  explicit constexpr AutofillSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillSelectionArchive(const AutofillSelectionArchive& from);
  AutofillSelectionArchive(AutofillSelectionArchive&& from) noexcept
    : AutofillSelectionArchive() {
    *this = ::std::move(from);
  }

  inline AutofillSelectionArchive& operator=(const AutofillSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillSelectionArchive& operator=(AutofillSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutofillSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const AutofillSelectionArchive*>(
               &_AutofillSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AutofillSelectionArchive& a, AutofillSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AutofillSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutofillSelectionArchive* New() const final {
    return CreateMaybeMessage<AutofillSelectionArchive>(nullptr);
  }

  AutofillSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutofillSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutofillSelectionArchive& from);
  void MergeFrom(const AutofillSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutofillSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.AutofillSelectionArchive";
  }
  protected:
  explicit AutofillSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceCellRangeFieldNumber = 1,
    kTargetCellRangeFieldNumber = 2,
  };
  // optional .TST.CellRange source_cell_range = 1;
  bool has_source_cell_range() const;
  private:
  bool _internal_has_source_cell_range() const;
  public:
  void clear_source_cell_range();
  const ::TST::CellRange& source_cell_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRange* release_source_cell_range();
  ::TST::CellRange* mutable_source_cell_range();
  void set_allocated_source_cell_range(::TST::CellRange* source_cell_range);
  private:
  const ::TST::CellRange& _internal_source_cell_range() const;
  ::TST::CellRange* _internal_mutable_source_cell_range();
  public:
  void unsafe_arena_set_allocated_source_cell_range(
      ::TST::CellRange* source_cell_range);
  ::TST::CellRange* unsafe_arena_release_source_cell_range();

  // optional .TST.CellRange target_cell_range = 2;
  bool has_target_cell_range() const;
  private:
  bool _internal_has_target_cell_range() const;
  public:
  void clear_target_cell_range();
  const ::TST::CellRange& target_cell_range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRange* release_target_cell_range();
  ::TST::CellRange* mutable_target_cell_range();
  void set_allocated_target_cell_range(::TST::CellRange* target_cell_range);
  private:
  const ::TST::CellRange& _internal_target_cell_range() const;
  ::TST::CellRange* _internal_mutable_target_cell_range();
  public:
  void unsafe_arena_set_allocated_target_cell_range(
      ::TST::CellRange* target_cell_range);
  ::TST::CellRange* unsafe_arena_release_target_cell_range();

  // @@protoc_insertion_point(class_scope:TST.AutofillSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::CellRange* source_cell_range_;
  ::TST::CellRange* target_cell_range_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FilterRuleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FilterRuleArchive) */ {
 public:
  inline FilterRuleArchive() : FilterRuleArchive(nullptr) {}
  ~FilterRuleArchive() override;
  explicit constexpr FilterRuleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterRuleArchive(const FilterRuleArchive& from);
  FilterRuleArchive(FilterRuleArchive&& from) noexcept
    : FilterRuleArchive() {
    *this = ::std::move(from);
  }

  inline FilterRuleArchive& operator=(const FilterRuleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterRuleArchive& operator=(FilterRuleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterRuleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterRuleArchive* internal_default_instance() {
    return reinterpret_cast<const FilterRuleArchive*>(
               &_FilterRuleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(FilterRuleArchive& a, FilterRuleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterRuleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterRuleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterRuleArchive* New() const final {
    return CreateMaybeMessage<FilterRuleArchive>(nullptr);
  }

  FilterRuleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterRuleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterRuleArchive& from);
  void MergeFrom(const FilterRuleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterRuleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FilterRuleArchive";
  }
  protected:
  explicit FilterRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateFieldNumber = 1,
    kDisabledFieldNumber = 2,
  };
  // required .TST.FormulaPredicateArchive predicate = 1;
  bool has_predicate() const;
  private:
  bool _internal_has_predicate() const;
  public:
  void clear_predicate();
  const ::TST::FormulaPredicateArchive& predicate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::FormulaPredicateArchive* release_predicate();
  ::TST::FormulaPredicateArchive* mutable_predicate();
  void set_allocated_predicate(::TST::FormulaPredicateArchive* predicate);
  private:
  const ::TST::FormulaPredicateArchive& _internal_predicate() const;
  ::TST::FormulaPredicateArchive* _internal_mutable_predicate();
  public:
  void unsafe_arena_set_allocated_predicate(
      ::TST::FormulaPredicateArchive* predicate);
  ::TST::FormulaPredicateArchive* unsafe_arena_release_predicate();

  // optional bool disabled = 2;
  bool has_disabled() const;
  private:
  bool _internal_has_disabled() const;
  public:
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FilterRuleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::FormulaPredicateArchive* predicate_;
  bool disabled_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TableStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TableStyleArchive) */ {
 public:
  inline TableStyleArchive() : TableStyleArchive(nullptr) {}
  ~TableStyleArchive() override;
  explicit constexpr TableStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableStyleArchive(const TableStyleArchive& from);
  TableStyleArchive(TableStyleArchive&& from) noexcept
    : TableStyleArchive() {
    *this = ::std::move(from);
  }

  inline TableStyleArchive& operator=(const TableStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableStyleArchive& operator=(TableStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableStyleArchive* internal_default_instance() {
    return reinterpret_cast<const TableStyleArchive*>(
               &_TableStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TableStyleArchive& a, TableStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TableStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableStyleArchive* New() const final {
    return CreateMaybeMessage<TableStyleArchive>(nullptr);
  }

  TableStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableStyleArchive& from);
  void MergeFrom(const TableStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TableStyleArchive";
  }
  protected:
  explicit TableStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTablePropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TST.TableStylePropertiesArchive table_properties = 11;
  bool has_table_properties() const;
  private:
  bool _internal_has_table_properties() const;
  public:
  void clear_table_properties();
  const ::TST::TableStylePropertiesArchive& table_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TableStylePropertiesArchive* release_table_properties();
  ::TST::TableStylePropertiesArchive* mutable_table_properties();
  void set_allocated_table_properties(::TST::TableStylePropertiesArchive* table_properties);
  private:
  const ::TST::TableStylePropertiesArchive& _internal_table_properties() const;
  ::TST::TableStylePropertiesArchive* _internal_mutable_table_properties();
  public:
  void unsafe_arena_set_allocated_table_properties(
      ::TST::TableStylePropertiesArchive* table_properties);
  ::TST::TableStylePropertiesArchive* unsafe_arena_release_table_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.TableStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TST::TableStylePropertiesArchive* table_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellStyleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellStyleArchive) */ {
 public:
  inline CellStyleArchive() : CellStyleArchive(nullptr) {}
  ~CellStyleArchive() override;
  explicit constexpr CellStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellStyleArchive(const CellStyleArchive& from);
  CellStyleArchive(CellStyleArchive&& from) noexcept
    : CellStyleArchive() {
    *this = ::std::move(from);
  }

  inline CellStyleArchive& operator=(const CellStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellStyleArchive& operator=(CellStyleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellStyleArchive* internal_default_instance() {
    return reinterpret_cast<const CellStyleArchive*>(
               &_CellStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CellStyleArchive& a, CellStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellStyleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellStyleArchive* New() const final {
    return CreateMaybeMessage<CellStyleArchive>(nullptr);
  }

  CellStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellStyleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellStyleArchive& from);
  void MergeFrom(const CellStyleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellStyleArchive";
  }
  protected:
  explicit CellStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCellPropertiesFieldNumber = 11,
    kOverrideCountFieldNumber = 10,
  };
  // required .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TST.CellStylePropertiesArchive cell_properties = 11;
  bool has_cell_properties() const;
  private:
  bool _internal_has_cell_properties() const;
  public:
  void clear_cell_properties();
  const ::TST::CellStylePropertiesArchive& cell_properties() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellStylePropertiesArchive* release_cell_properties();
  ::TST::CellStylePropertiesArchive* mutable_cell_properties();
  void set_allocated_cell_properties(::TST::CellStylePropertiesArchive* cell_properties);
  private:
  const ::TST::CellStylePropertiesArchive& _internal_cell_properties() const;
  ::TST::CellStylePropertiesArchive* _internal_mutable_cell_properties();
  public:
  void unsafe_arena_set_allocated_cell_properties(
      ::TST::CellStylePropertiesArchive* cell_properties);
  ::TST::CellStylePropertiesArchive* unsafe_arena_release_cell_properties();

  // optional uint32 override_count = 10 [default = 0];
  bool has_override_count() const;
  private:
  bool _internal_has_override_count() const;
  public:
  void clear_override_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count() const;
  void set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_override_count() const;
  void _internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::StyleArchive* super_;
  ::TST::CellStylePropertiesArchive* cell_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 override_count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaPredicateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaPredicateArchive) */ {
 public:
  inline FormulaPredicateArchive() : FormulaPredicateArchive(nullptr) {}
  ~FormulaPredicateArchive() override;
  explicit constexpr FormulaPredicateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaPredicateArchive(const FormulaPredicateArchive& from);
  FormulaPredicateArchive(FormulaPredicateArchive&& from) noexcept
    : FormulaPredicateArchive() {
    *this = ::std::move(from);
  }

  inline FormulaPredicateArchive& operator=(const FormulaPredicateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaPredicateArchive& operator=(FormulaPredicateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaPredicateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaPredicateArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaPredicateArchive*>(
               &_FormulaPredicateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(FormulaPredicateArchive& a, FormulaPredicateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaPredicateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaPredicateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaPredicateArchive* New() const final {
    return CreateMaybeMessage<FormulaPredicateArchive>(nullptr);
  }

  FormulaPredicateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaPredicateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaPredicateArchive& from);
  void MergeFrom(const FormulaPredicateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaPredicateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaPredicateArchive";
  }
  protected:
  explicit FormulaPredicateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FormulaPredicateArchive_FormulaPredicateType FormulaPredicateType;
  static constexpr FormulaPredicateType PredNone =
    FormulaPredicateArchive_FormulaPredicateType_PredNone;
  static constexpr FormulaPredicateType TextStartsWith =
    FormulaPredicateArchive_FormulaPredicateType_TextStartsWith;
  static constexpr FormulaPredicateType TextEndsWith =
    FormulaPredicateArchive_FormulaPredicateType_TextEndsWith;
  static constexpr FormulaPredicateType TextContains =
    FormulaPredicateArchive_FormulaPredicateType_TextContains;
  static constexpr FormulaPredicateType TextDoesNotContain =
    FormulaPredicateArchive_FormulaPredicateType_TextDoesNotContain;
  static constexpr FormulaPredicateType ValueEqual =
    FormulaPredicateArchive_FormulaPredicateType_ValueEqual;
  static constexpr FormulaPredicateType ValueNotEqual =
    FormulaPredicateArchive_FormulaPredicateType_ValueNotEqual;
  static constexpr FormulaPredicateType ValueGreaterThan =
    FormulaPredicateArchive_FormulaPredicateType_ValueGreaterThan;
  static constexpr FormulaPredicateType ValueGreaterThanOrEqual =
    FormulaPredicateArchive_FormulaPredicateType_ValueGreaterThanOrEqual;
  static constexpr FormulaPredicateType ValueLessThan =
    FormulaPredicateArchive_FormulaPredicateType_ValueLessThan;
  static constexpr FormulaPredicateType ValueLessThanOrEqual =
    FormulaPredicateArchive_FormulaPredicateType_ValueLessThanOrEqual;
  static constexpr FormulaPredicateType ValueAboveAverage =
    FormulaPredicateArchive_FormulaPredicateType_ValueAboveAverage;
  static constexpr FormulaPredicateType ValueBelowAverage =
    FormulaPredicateArchive_FormulaPredicateType_ValueBelowAverage;
  static constexpr FormulaPredicateType ValueBetween =
    FormulaPredicateArchive_FormulaPredicateType_ValueBetween;
  static constexpr FormulaPredicateType Formula =
    FormulaPredicateArchive_FormulaPredicateType_Formula;
  static constexpr FormulaPredicateType Duplicates =
    FormulaPredicateArchive_FormulaPredicateType_Duplicates;
  static constexpr FormulaPredicateType Uniques =
    FormulaPredicateArchive_FormulaPredicateType_Uniques;
  static constexpr FormulaPredicateType DateIsToday =
    FormulaPredicateArchive_FormulaPredicateType_DateIsToday;
  static constexpr FormulaPredicateType DateIsYesterday =
    FormulaPredicateArchive_FormulaPredicateType_DateIsYesterday;
  static constexpr FormulaPredicateType DateIsTomorrow =
    FormulaPredicateArchive_FormulaPredicateType_DateIsTomorrow;
  static constexpr FormulaPredicateType DateIsTheDate =
    FormulaPredicateArchive_FormulaPredicateType_DateIsTheDate;
  static constexpr FormulaPredicateType DateBeforeTheDate =
    FormulaPredicateArchive_FormulaPredicateType_DateBeforeTheDate;
  static constexpr FormulaPredicateType DateAfterTheDate =
    FormulaPredicateArchive_FormulaPredicateType_DateAfterTheDate;
  static constexpr FormulaPredicateType DateIsInTheRange =
    FormulaPredicateArchive_FormulaPredicateType_DateIsInTheRange;
  static constexpr FormulaPredicateType DateInTheNext =
    FormulaPredicateArchive_FormulaPredicateType_DateInTheNext;
  static constexpr FormulaPredicateType DateInTheLast =
    FormulaPredicateArchive_FormulaPredicateType_DateInTheLast;
  static constexpr FormulaPredicateType DateIsExactly =
    FormulaPredicateArchive_FormulaPredicateType_DateIsExactly;
  static constexpr FormulaPredicateType DateBeforeRelative =
    FormulaPredicateArchive_FormulaPredicateType_DateBeforeRelative;
  static constexpr FormulaPredicateType DateAfterRelative =
    FormulaPredicateArchive_FormulaPredicateType_DateAfterRelative;
  static constexpr FormulaPredicateType DateBetweenRelative =
    FormulaPredicateArchive_FormulaPredicateType_DateBetweenRelative;
  static constexpr FormulaPredicateType ValueTop =
    FormulaPredicateArchive_FormulaPredicateType_ValueTop;
  static constexpr FormulaPredicateType ValueBottom =
    FormulaPredicateArchive_FormulaPredicateType_ValueBottom;
  static constexpr FormulaPredicateType ValueNotBetween =
    FormulaPredicateArchive_FormulaPredicateType_ValueNotBetween;
  static constexpr FormulaPredicateType DateInThis =
    FormulaPredicateArchive_FormulaPredicateType_DateInThis;
  static constexpr FormulaPredicateType IsBlank =
    FormulaPredicateArchive_FormulaPredicateType_IsBlank;
  static constexpr FormulaPredicateType IsNotBlank =
    FormulaPredicateArchive_FormulaPredicateType_IsNotBlank;
  static constexpr FormulaPredicateType TextIs =
    FormulaPredicateArchive_FormulaPredicateType_TextIs;
  static constexpr FormulaPredicateType TextIsNot =
    FormulaPredicateArchive_FormulaPredicateType_TextIsNot;
  static constexpr FormulaPredicateType DurationEqual =
    FormulaPredicateArchive_FormulaPredicateType_DurationEqual;
  static constexpr FormulaPredicateType DurationNotEqual =
    FormulaPredicateArchive_FormulaPredicateType_DurationNotEqual;
  static constexpr FormulaPredicateType DurationGreaterThan =
    FormulaPredicateArchive_FormulaPredicateType_DurationGreaterThan;
  static constexpr FormulaPredicateType DurationGreaterThanOrEqual =
    FormulaPredicateArchive_FormulaPredicateType_DurationGreaterThanOrEqual;
  static constexpr FormulaPredicateType DurationLessThan =
    FormulaPredicateArchive_FormulaPredicateType_DurationLessThan;
  static constexpr FormulaPredicateType DurationLessThanOrEqual =
    FormulaPredicateArchive_FormulaPredicateType_DurationLessThanOrEqual;
  static constexpr FormulaPredicateType DurationBetween =
    FormulaPredicateArchive_FormulaPredicateType_DurationBetween;
  static constexpr FormulaPredicateType DurationNotBetween =
    FormulaPredicateArchive_FormulaPredicateType_DurationNotBetween;
  static constexpr FormulaPredicateType DurationAboveAverage =
    FormulaPredicateArchive_FormulaPredicateType_DurationAboveAverage;
  static constexpr FormulaPredicateType DurationBelowAverage =
    FormulaPredicateArchive_FormulaPredicateType_DurationBelowAverage;
  static constexpr FormulaPredicateType DurationTop =
    FormulaPredicateArchive_FormulaPredicateType_DurationTop;
  static constexpr FormulaPredicateType DurationBottom =
    FormulaPredicateArchive_FormulaPredicateType_DurationBottom;
  static inline bool FormulaPredicateType_IsValid(int value) {
    return FormulaPredicateArchive_FormulaPredicateType_IsValid(value);
  }
  static constexpr FormulaPredicateType FormulaPredicateType_MIN =
    FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_MIN;
  static constexpr FormulaPredicateType FormulaPredicateType_MAX =
    FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_MAX;
  static constexpr int FormulaPredicateType_ARRAYSIZE =
    FormulaPredicateArchive_FormulaPredicateType_FormulaPredicateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FormulaPredicateType_descriptor() {
    return FormulaPredicateArchive_FormulaPredicateType_descriptor();
  }
  template<typename T>
  static inline const std::string& FormulaPredicateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FormulaPredicateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FormulaPredicateType_Name.");
    return FormulaPredicateArchive_FormulaPredicateType_Name(enum_t_value);
  }
  static inline bool FormulaPredicateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FormulaPredicateType* value) {
    return FormulaPredicateArchive_FormulaPredicateType_Parse(name, value);
  }

  typedef FormulaPredicateArchive_QualifierType QualifierType;
  static constexpr QualifierType QualNone =
    FormulaPredicateArchive_QualifierType_QualNone;
  static constexpr QualifierType Days =
    FormulaPredicateArchive_QualifierType_Days;
  static constexpr QualifierType Weeks =
    FormulaPredicateArchive_QualifierType_Weeks;
  static constexpr QualifierType Months =
    FormulaPredicateArchive_QualifierType_Months;
  static constexpr QualifierType Years =
    FormulaPredicateArchive_QualifierType_Years;
  static constexpr QualifierType Ago =
    FormulaPredicateArchive_QualifierType_Ago;
  static constexpr QualifierType FromNow =
    FormulaPredicateArchive_QualifierType_FromNow;
  static constexpr QualifierType Quarters =
    FormulaPredicateArchive_QualifierType_Quarters;
  static constexpr QualifierType Percent =
    FormulaPredicateArchive_QualifierType_Percent;
  static constexpr QualifierType Values =
    FormulaPredicateArchive_QualifierType_Values;
  static inline bool QualifierType_IsValid(int value) {
    return FormulaPredicateArchive_QualifierType_IsValid(value);
  }
  static constexpr QualifierType QualifierType_MIN =
    FormulaPredicateArchive_QualifierType_QualifierType_MIN;
  static constexpr QualifierType QualifierType_MAX =
    FormulaPredicateArchive_QualifierType_QualifierType_MAX;
  static constexpr int QualifierType_ARRAYSIZE =
    FormulaPredicateArchive_QualifierType_QualifierType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  QualifierType_descriptor() {
    return FormulaPredicateArchive_QualifierType_descriptor();
  }
  template<typename T>
  static inline const std::string& QualifierType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QualifierType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QualifierType_Name.");
    return FormulaPredicateArchive_QualifierType_Name(enum_t_value);
  }
  static inline bool QualifierType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      QualifierType* value) {
    return FormulaPredicateArchive_QualifierType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 1,
    kPredicateTypeFieldNumber = 2,
    kQualifier1FieldNumber = 3,
    kQualifier2FieldNumber = 4,
    kParamIndex1FieldNumber = 5,
    kParamIndex2FieldNumber = 6,
    kParamIndex0FieldNumber = 7,
  };
  // required .TSCE.FormulaArchive formula = 1;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
  bool has_predicate_type() const;
  private:
  bool _internal_has_predicate_type() const;
  public:
  void clear_predicate_type();
  ::TST::FormulaPredicateArchive_FormulaPredicateType predicate_type() const;
  void set_predicate_type(::TST::FormulaPredicateArchive_FormulaPredicateType value);
  private:
  ::TST::FormulaPredicateArchive_FormulaPredicateType _internal_predicate_type() const;
  void _internal_set_predicate_type(::TST::FormulaPredicateArchive_FormulaPredicateType value);
  public:

  // required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
  bool has_qualifier1() const;
  private:
  bool _internal_has_qualifier1() const;
  public:
  void clear_qualifier1();
  ::TST::FormulaPredicateArchive_QualifierType qualifier1() const;
  void set_qualifier1(::TST::FormulaPredicateArchive_QualifierType value);
  private:
  ::TST::FormulaPredicateArchive_QualifierType _internal_qualifier1() const;
  void _internal_set_qualifier1(::TST::FormulaPredicateArchive_QualifierType value);
  public:

  // required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
  bool has_qualifier2() const;
  private:
  bool _internal_has_qualifier2() const;
  public:
  void clear_qualifier2();
  ::TST::FormulaPredicateArchive_QualifierType qualifier2() const;
  void set_qualifier2(::TST::FormulaPredicateArchive_QualifierType value);
  private:
  ::TST::FormulaPredicateArchive_QualifierType _internal_qualifier2() const;
  void _internal_set_qualifier2(::TST::FormulaPredicateArchive_QualifierType value);
  public:

  // required int32 param_index1 = 5;
  bool has_param_index1() const;
  private:
  bool _internal_has_param_index1() const;
  public:
  void clear_param_index1();
  ::PROTOBUF_NAMESPACE_ID::int32 param_index1() const;
  void set_param_index1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param_index1() const;
  void _internal_set_param_index1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 param_index2 = 6;
  bool has_param_index2() const;
  private:
  bool _internal_has_param_index2() const;
  public:
  void clear_param_index2();
  ::PROTOBUF_NAMESPACE_ID::int32 param_index2() const;
  void set_param_index2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param_index2() const;
  void _internal_set_param_index2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 param_index0 = 7;
  bool has_param_index0() const;
  private:
  bool _internal_has_param_index0() const;
  public:
  void clear_param_index0();
  ::PROTOBUF_NAMESPACE_ID::int32 param_index0() const;
  void set_param_index0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param_index0() const;
  void _internal_set_param_index0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaPredicateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::FormulaArchive* formula_;
  int predicate_type_;
  int qualifier1_;
  int qualifier2_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_index1_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_index2_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_index0_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ConditionalStyleSetArchive_ConditionalStyleRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ConditionalStyleSetArchive.ConditionalStyleRule) */ {
 public:
  inline ConditionalStyleSetArchive_ConditionalStyleRule() : ConditionalStyleSetArchive_ConditionalStyleRule(nullptr) {}
  ~ConditionalStyleSetArchive_ConditionalStyleRule() override;
  explicit constexpr ConditionalStyleSetArchive_ConditionalStyleRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionalStyleSetArchive_ConditionalStyleRule(const ConditionalStyleSetArchive_ConditionalStyleRule& from);
  ConditionalStyleSetArchive_ConditionalStyleRule(ConditionalStyleSetArchive_ConditionalStyleRule&& from) noexcept
    : ConditionalStyleSetArchive_ConditionalStyleRule() {
    *this = ::std::move(from);
  }

  inline ConditionalStyleSetArchive_ConditionalStyleRule& operator=(const ConditionalStyleSetArchive_ConditionalStyleRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionalStyleSetArchive_ConditionalStyleRule& operator=(ConditionalStyleSetArchive_ConditionalStyleRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionalStyleSetArchive_ConditionalStyleRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionalStyleSetArchive_ConditionalStyleRule* internal_default_instance() {
    return reinterpret_cast<const ConditionalStyleSetArchive_ConditionalStyleRule*>(
               &_ConditionalStyleSetArchive_ConditionalStyleRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(ConditionalStyleSetArchive_ConditionalStyleRule& a, ConditionalStyleSetArchive_ConditionalStyleRule& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionalStyleSetArchive_ConditionalStyleRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionalStyleSetArchive_ConditionalStyleRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConditionalStyleSetArchive_ConditionalStyleRule* New() const final {
    return CreateMaybeMessage<ConditionalStyleSetArchive_ConditionalStyleRule>(nullptr);
  }

  ConditionalStyleSetArchive_ConditionalStyleRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConditionalStyleSetArchive_ConditionalStyleRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from);
  void MergeFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionalStyleSetArchive_ConditionalStyleRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ConditionalStyleSetArchive.ConditionalStyleRule";
  }
  protected:
  explicit ConditionalStyleSetArchive_ConditionalStyleRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateFieldNumber = 1,
    kCellStyleFieldNumber = 2,
    kTextStyleFieldNumber = 3,
  };
  // required .TST.FormulaPredicateArchive predicate = 1;
  bool has_predicate() const;
  private:
  bool _internal_has_predicate() const;
  public:
  void clear_predicate();
  const ::TST::FormulaPredicateArchive& predicate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::FormulaPredicateArchive* release_predicate();
  ::TST::FormulaPredicateArchive* mutable_predicate();
  void set_allocated_predicate(::TST::FormulaPredicateArchive* predicate);
  private:
  const ::TST::FormulaPredicateArchive& _internal_predicate() const;
  ::TST::FormulaPredicateArchive* _internal_mutable_predicate();
  public:
  void unsafe_arena_set_allocated_predicate(
      ::TST::FormulaPredicateArchive* predicate);
  ::TST::FormulaPredicateArchive* unsafe_arena_release_predicate();

  // required .TSP.Reference cell_style = 2;
  bool has_cell_style() const;
  private:
  bool _internal_has_cell_style() const;
  public:
  void clear_cell_style();
  const ::TSP::Reference& cell_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_cell_style();
  ::TSP::Reference* mutable_cell_style();
  void set_allocated_cell_style(::TSP::Reference* cell_style);
  private:
  const ::TSP::Reference& _internal_cell_style() const;
  ::TSP::Reference* _internal_mutable_cell_style();
  public:
  void unsafe_arena_set_allocated_cell_style(
      ::TSP::Reference* cell_style);
  ::TSP::Reference* unsafe_arena_release_cell_style();

  // required .TSP.Reference text_style = 3;
  bool has_text_style() const;
  private:
  bool _internal_has_text_style() const;
  public:
  void clear_text_style();
  const ::TSP::Reference& text_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_text_style();
  ::TSP::Reference* mutable_text_style();
  void set_allocated_text_style(::TSP::Reference* text_style);
  private:
  const ::TSP::Reference& _internal_text_style() const;
  ::TSP::Reference* _internal_mutable_text_style();
  public:
  void unsafe_arena_set_allocated_text_style(
      ::TSP::Reference* text_style);
  ::TSP::Reference* unsafe_arena_release_text_style();

  // @@protoc_insertion_point(class_scope:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::FormulaPredicateArchive* predicate_;
  ::TSP::Reference* cell_style_;
  ::TSP::Reference* text_style_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ConditionalStyleSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ConditionalStyleSetArchive) */ {
 public:
  inline ConditionalStyleSetArchive() : ConditionalStyleSetArchive(nullptr) {}
  ~ConditionalStyleSetArchive() override;
  explicit constexpr ConditionalStyleSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionalStyleSetArchive(const ConditionalStyleSetArchive& from);
  ConditionalStyleSetArchive(ConditionalStyleSetArchive&& from) noexcept
    : ConditionalStyleSetArchive() {
    *this = ::std::move(from);
  }

  inline ConditionalStyleSetArchive& operator=(const ConditionalStyleSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionalStyleSetArchive& operator=(ConditionalStyleSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionalStyleSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionalStyleSetArchive* internal_default_instance() {
    return reinterpret_cast<const ConditionalStyleSetArchive*>(
               &_ConditionalStyleSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ConditionalStyleSetArchive& a, ConditionalStyleSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionalStyleSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionalStyleSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConditionalStyleSetArchive* New() const final {
    return CreateMaybeMessage<ConditionalStyleSetArchive>(nullptr);
  }

  ConditionalStyleSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConditionalStyleSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConditionalStyleSetArchive& from);
  void MergeFrom(const ConditionalStyleSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionalStyleSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ConditionalStyleSetArchive";
  }
  protected:
  explicit ConditionalStyleSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionalStyleSetArchive_ConditionalStyleRule ConditionalStyleRule;

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kRuleCountFieldNumber = 1,
  };
  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >*
      mutable_rules();
  private:
  const ::TST::ConditionalStyleSetArchive_ConditionalStyleRule& _internal_rules(int index) const;
  ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* _internal_add_rules();
  public:
  const ::TST::ConditionalStyleSetArchive_ConditionalStyleRule& rules(int index) const;
  ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >&
      rules() const;

  // required uint32 ruleCount = 1;
  bool has_rulecount() const;
  private:
  bool _internal_has_rulecount() const;
  public:
  void clear_rulecount();
  ::PROTOBUF_NAMESPACE_ID::uint32 rulecount() const;
  void set_rulecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rulecount() const;
  void _internal_set_rulecount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ConditionalStyleSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule > rules_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rulecount_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FilterSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FilterSetArchive) */ {
 public:
  inline FilterSetArchive() : FilterSetArchive(nullptr) {}
  ~FilterSetArchive() override;
  explicit constexpr FilterSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterSetArchive(const FilterSetArchive& from);
  FilterSetArchive(FilterSetArchive&& from) noexcept
    : FilterSetArchive() {
    *this = ::std::move(from);
  }

  inline FilterSetArchive& operator=(const FilterSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterSetArchive& operator=(FilterSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterSetArchive* internal_default_instance() {
    return reinterpret_cast<const FilterSetArchive*>(
               &_FilterSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(FilterSetArchive& a, FilterSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterSetArchive* New() const final {
    return CreateMaybeMessage<FilterSetArchive>(nullptr);
  }

  FilterSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterSetArchive& from);
  void MergeFrom(const FilterSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FilterSetArchive";
  }
  protected:
  explicit FilterSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FilterSetArchive_FilterSetType FilterSetType;
  static constexpr FilterSetType FilterSetArchiveTypeAll =
    FilterSetArchive_FilterSetType_FilterSetArchiveTypeAll;
  static constexpr FilterSetType FilterSetArchiveTypeAny =
    FilterSetArchive_FilterSetType_FilterSetArchiveTypeAny;
  static inline bool FilterSetType_IsValid(int value) {
    return FilterSetArchive_FilterSetType_IsValid(value);
  }
  static constexpr FilterSetType FilterSetType_MIN =
    FilterSetArchive_FilterSetType_FilterSetType_MIN;
  static constexpr FilterSetType FilterSetType_MAX =
    FilterSetArchive_FilterSetType_FilterSetType_MAX;
  static constexpr int FilterSetType_ARRAYSIZE =
    FilterSetArchive_FilterSetType_FilterSetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FilterSetType_descriptor() {
    return FilterSetArchive_FilterSetType_descriptor();
  }
  template<typename T>
  static inline const std::string& FilterSetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FilterSetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FilterSetType_Name.");
    return FilterSetArchive_FilterSetType_Name(enum_t_value);
  }
  static inline bool FilterSetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FilterSetType* value) {
    return FilterSetArchive_FilterSetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilterRulesFieldNumber = 3,
    kFilterOffsetsFieldNumber = 5,
    kFilterEnabledFieldNumber = 6,
    kTypeFieldNumber = 1,
    kNeedsFormulaRewriteForImportFieldNumber = 4,
    kIsEnabledFieldNumber = 2,
  };
  // repeated .TST.FilterRuleArchive filter_rules = 3;
  int filter_rules_size() const;
  private:
  int _internal_filter_rules_size() const;
  public:
  void clear_filter_rules();
  ::TST::FilterRuleArchive* mutable_filter_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >*
      mutable_filter_rules();
  private:
  const ::TST::FilterRuleArchive& _internal_filter_rules(int index) const;
  ::TST::FilterRuleArchive* _internal_add_filter_rules();
  public:
  const ::TST::FilterRuleArchive& filter_rules(int index) const;
  ::TST::FilterRuleArchive* add_filter_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >&
      filter_rules() const;

  // repeated uint32 filter_offsets = 5;
  int filter_offsets_size() const;
  private:
  int _internal_filter_offsets_size() const;
  public:
  void clear_filter_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_filter_offsets() const;
  void _internal_add_filter_offsets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_filter_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_offsets(int index) const;
  void set_filter_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_filter_offsets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      filter_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_filter_offsets();

  // repeated bool filter_enabled = 6;
  int filter_enabled_size() const;
  private:
  int _internal_filter_enabled_size() const;
  public:
  void clear_filter_enabled();
  private:
  bool _internal_filter_enabled(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_filter_enabled() const;
  void _internal_add_filter_enabled(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_filter_enabled();
  public:
  bool filter_enabled(int index) const;
  void set_filter_enabled(int index, bool value);
  void add_filter_enabled(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      filter_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_filter_enabled();

  // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TST::FilterSetArchive_FilterSetType type() const;
  void set_type(::TST::FilterSetArchive_FilterSetType value);
  private:
  ::TST::FilterSetArchive_FilterSetType _internal_type() const;
  void _internal_set_type(::TST::FilterSetArchive_FilterSetType value);
  public:

  // optional bool needs_formula_rewrite_for_import = 4 [default = false];
  bool has_needs_formula_rewrite_for_import() const;
  private:
  bool _internal_has_needs_formula_rewrite_for_import() const;
  public:
  void clear_needs_formula_rewrite_for_import();
  bool needs_formula_rewrite_for_import() const;
  void set_needs_formula_rewrite_for_import(bool value);
  private:
  bool _internal_needs_formula_rewrite_for_import() const;
  void _internal_set_needs_formula_rewrite_for_import(bool value);
  public:

  // optional bool is_enabled = 2 [default = true];
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FilterSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive > filter_rules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > filter_offsets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > filter_enabled_;
  int type_;
  bool needs_formula_rewrite_for_import_;
  bool is_enabled_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HiddenStateExtentArchive_RowOrColumnState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HiddenStateExtentArchive.RowOrColumnState) */ {
 public:
  inline HiddenStateExtentArchive_RowOrColumnState() : HiddenStateExtentArchive_RowOrColumnState(nullptr) {}
  ~HiddenStateExtentArchive_RowOrColumnState() override;
  explicit constexpr HiddenStateExtentArchive_RowOrColumnState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiddenStateExtentArchive_RowOrColumnState(const HiddenStateExtentArchive_RowOrColumnState& from);
  HiddenStateExtentArchive_RowOrColumnState(HiddenStateExtentArchive_RowOrColumnState&& from) noexcept
    : HiddenStateExtentArchive_RowOrColumnState() {
    *this = ::std::move(from);
  }

  inline HiddenStateExtentArchive_RowOrColumnState& operator=(const HiddenStateExtentArchive_RowOrColumnState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenStateExtentArchive_RowOrColumnState& operator=(HiddenStateExtentArchive_RowOrColumnState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiddenStateExtentArchive_RowOrColumnState& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiddenStateExtentArchive_RowOrColumnState* internal_default_instance() {
    return reinterpret_cast<const HiddenStateExtentArchive_RowOrColumnState*>(
               &_HiddenStateExtentArchive_RowOrColumnState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(HiddenStateExtentArchive_RowOrColumnState& a, HiddenStateExtentArchive_RowOrColumnState& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenStateExtentArchive_RowOrColumnState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiddenStateExtentArchive_RowOrColumnState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenStateExtentArchive_RowOrColumnState* New() const final {
    return CreateMaybeMessage<HiddenStateExtentArchive_RowOrColumnState>(nullptr);
  }

  HiddenStateExtentArchive_RowOrColumnState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenStateExtentArchive_RowOrColumnState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HiddenStateExtentArchive_RowOrColumnState& from);
  void MergeFrom(const HiddenStateExtentArchive_RowOrColumnState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiddenStateExtentArchive_RowOrColumnState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HiddenStateExtentArchive.RowOrColumnState";
  }
  protected:
  explicit HiddenStateExtentArchive_RowOrColumnState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowOrColumnUidFieldNumber = 1,
    kUserHiddenFieldNumber = 2,
    kFilteredFieldNumber = 3,
  };
  // required .TSP.UUID row_or_column_uid = 1;
  bool has_row_or_column_uid() const;
  private:
  bool _internal_has_row_or_column_uid() const;
  public:
  void clear_row_or_column_uid();
  const ::TSP::UUID& row_or_column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_row_or_column_uid();
  ::TSP::UUID* mutable_row_or_column_uid();
  void set_allocated_row_or_column_uid(::TSP::UUID* row_or_column_uid);
  private:
  const ::TSP::UUID& _internal_row_or_column_uid() const;
  ::TSP::UUID* _internal_mutable_row_or_column_uid();
  public:
  void unsafe_arena_set_allocated_row_or_column_uid(
      ::TSP::UUID* row_or_column_uid);
  ::TSP::UUID* unsafe_arena_release_row_or_column_uid();

  // optional bool user_hidden = 2;
  bool has_user_hidden() const;
  private:
  bool _internal_has_user_hidden() const;
  public:
  void clear_user_hidden();
  bool user_hidden() const;
  void set_user_hidden(bool value);
  private:
  bool _internal_user_hidden() const;
  void _internal_set_user_hidden(bool value);
  public:

  // optional bool filtered = 3;
  bool has_filtered() const;
  private:
  bool _internal_has_filtered() const;
  public:
  void clear_filtered();
  bool filtered() const;
  void set_filtered(bool value);
  private:
  bool _internal_filtered() const;
  void _internal_set_filtered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HiddenStateExtentArchive.RowOrColumnState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* row_or_column_uid_;
  bool user_hidden_;
  bool filtered_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HiddenStateExtentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HiddenStateExtentArchive) */ {
 public:
  inline HiddenStateExtentArchive() : HiddenStateExtentArchive(nullptr) {}
  ~HiddenStateExtentArchive() override;
  explicit constexpr HiddenStateExtentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiddenStateExtentArchive(const HiddenStateExtentArchive& from);
  HiddenStateExtentArchive(HiddenStateExtentArchive&& from) noexcept
    : HiddenStateExtentArchive() {
    *this = ::std::move(from);
  }

  inline HiddenStateExtentArchive& operator=(const HiddenStateExtentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenStateExtentArchive& operator=(HiddenStateExtentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiddenStateExtentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiddenStateExtentArchive* internal_default_instance() {
    return reinterpret_cast<const HiddenStateExtentArchive*>(
               &_HiddenStateExtentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(HiddenStateExtentArchive& a, HiddenStateExtentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenStateExtentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiddenStateExtentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenStateExtentArchive* New() const final {
    return CreateMaybeMessage<HiddenStateExtentArchive>(nullptr);
  }

  HiddenStateExtentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenStateExtentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HiddenStateExtentArchive& from);
  void MergeFrom(const HiddenStateExtentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiddenStateExtentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HiddenStateExtentArchive";
  }
  protected:
  explicit HiddenStateExtentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HiddenStateExtentArchive_RowOrColumnState RowOrColumnState;

  typedef HiddenStateExtentArchive_RowOrColumnDirection RowOrColumnDirection;
  static constexpr RowOrColumnDirection ColumnDirection =
    HiddenStateExtentArchive_RowOrColumnDirection_ColumnDirection;
  static constexpr RowOrColumnDirection RowDirection =
    HiddenStateExtentArchive_RowOrColumnDirection_RowDirection;
  static inline bool RowOrColumnDirection_IsValid(int value) {
    return HiddenStateExtentArchive_RowOrColumnDirection_IsValid(value);
  }
  static constexpr RowOrColumnDirection RowOrColumnDirection_MIN =
    HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_MIN;
  static constexpr RowOrColumnDirection RowOrColumnDirection_MAX =
    HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_MAX;
  static constexpr int RowOrColumnDirection_ARRAYSIZE =
    HiddenStateExtentArchive_RowOrColumnDirection_RowOrColumnDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RowOrColumnDirection_descriptor() {
    return HiddenStateExtentArchive_RowOrColumnDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& RowOrColumnDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RowOrColumnDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RowOrColumnDirection_Name.");
    return HiddenStateExtentArchive_RowOrColumnDirection_Name(enum_t_value);
  }
  static inline bool RowOrColumnDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RowOrColumnDirection* value) {
    return HiddenStateExtentArchive_RowOrColumnDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenStatesFieldNumber = 2,
    kThresholdValueFieldNumber = 5,
    kCollapsedGroupUidsFieldNumber = 7,
    kHiddenStateExtentUidFieldNumber = 1,
    kRowOrColumnDirectionFieldNumber = 3,
    kNeedsToUpdateFilterSetForImportFieldNumber = 6,
  };
  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState hidden_states = 2;
  int hidden_states_size() const;
  private:
  int _internal_hidden_states_size() const;
  public:
  void clear_hidden_states();
  ::TST::HiddenStateExtentArchive_RowOrColumnState* mutable_hidden_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStateExtentArchive_RowOrColumnState >*
      mutable_hidden_states();
  private:
  const ::TST::HiddenStateExtentArchive_RowOrColumnState& _internal_hidden_states(int index) const;
  ::TST::HiddenStateExtentArchive_RowOrColumnState* _internal_add_hidden_states();
  public:
  const ::TST::HiddenStateExtentArchive_RowOrColumnState& hidden_states(int index) const;
  ::TST::HiddenStateExtentArchive_RowOrColumnState* add_hidden_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStateExtentArchive_RowOrColumnState >&
      hidden_states() const;

  // repeated .TSCE.CellValueArchive threshold_value = 5;
  int threshold_value_size() const;
  private:
  int _internal_threshold_value_size() const;
  public:
  void clear_threshold_value();
  ::TSCE::CellValueArchive* mutable_threshold_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
      mutable_threshold_value();
  private:
  const ::TSCE::CellValueArchive& _internal_threshold_value(int index) const;
  ::TSCE::CellValueArchive* _internal_add_threshold_value();
  public:
  const ::TSCE::CellValueArchive& threshold_value(int index) const;
  ::TSCE::CellValueArchive* add_threshold_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
      threshold_value() const;

  // repeated .TSP.UUID collapsed_group_uids = 7;
  int collapsed_group_uids_size() const;
  private:
  int _internal_collapsed_group_uids_size() const;
  public:
  void clear_collapsed_group_uids();
  ::TSP::UUID* mutable_collapsed_group_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_collapsed_group_uids();
  private:
  const ::TSP::UUID& _internal_collapsed_group_uids(int index) const;
  ::TSP::UUID* _internal_add_collapsed_group_uids();
  public:
  const ::TSP::UUID& collapsed_group_uids(int index) const;
  ::TSP::UUID* add_collapsed_group_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      collapsed_group_uids() const;

  // required .TSP.UUID hidden_state_extent_uid = 1;
  bool has_hidden_state_extent_uid() const;
  private:
  bool _internal_has_hidden_state_extent_uid() const;
  public:
  void clear_hidden_state_extent_uid();
  const ::TSP::UUID& hidden_state_extent_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_hidden_state_extent_uid();
  ::TSP::UUID* mutable_hidden_state_extent_uid();
  void set_allocated_hidden_state_extent_uid(::TSP::UUID* hidden_state_extent_uid);
  private:
  const ::TSP::UUID& _internal_hidden_state_extent_uid() const;
  ::TSP::UUID* _internal_mutable_hidden_state_extent_uid();
  public:
  void unsafe_arena_set_allocated_hidden_state_extent_uid(
      ::TSP::UUID* hidden_state_extent_uid);
  ::TSP::UUID* unsafe_arena_release_hidden_state_extent_uid();

  // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
  bool has_row_or_column_direction() const;
  private:
  bool _internal_has_row_or_column_direction() const;
  public:
  void clear_row_or_column_direction();
  ::TST::HiddenStateExtentArchive_RowOrColumnDirection row_or_column_direction() const;
  void set_row_or_column_direction(::TST::HiddenStateExtentArchive_RowOrColumnDirection value);
  private:
  ::TST::HiddenStateExtentArchive_RowOrColumnDirection _internal_row_or_column_direction() const;
  void _internal_set_row_or_column_direction(::TST::HiddenStateExtentArchive_RowOrColumnDirection value);
  public:

  // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
  bool has_needs_to_update_filter_set_for_import() const;
  private:
  bool _internal_has_needs_to_update_filter_set_for_import() const;
  public:
  void clear_needs_to_update_filter_set_for_import();
  bool needs_to_update_filter_set_for_import() const;
  void set_needs_to_update_filter_set_for_import(bool value);
  private:
  bool _internal_needs_to_update_filter_set_for_import() const;
  void _internal_set_needs_to_update_filter_set_for_import(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HiddenStateExtentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStateExtentArchive_RowOrColumnState > hidden_states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive > threshold_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > collapsed_group_uids_;
  ::TSP::UUID* hidden_state_extent_uid_;
  int row_or_column_direction_;
  bool needs_to_update_filter_set_for_import_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HiddenStatesArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HiddenStatesArchive) */ {
 public:
  inline HiddenStatesArchive() : HiddenStatesArchive(nullptr) {}
  ~HiddenStatesArchive() override;
  explicit constexpr HiddenStatesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiddenStatesArchive(const HiddenStatesArchive& from);
  HiddenStatesArchive(HiddenStatesArchive&& from) noexcept
    : HiddenStatesArchive() {
    *this = ::std::move(from);
  }

  inline HiddenStatesArchive& operator=(const HiddenStatesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenStatesArchive& operator=(HiddenStatesArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiddenStatesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiddenStatesArchive* internal_default_instance() {
    return reinterpret_cast<const HiddenStatesArchive*>(
               &_HiddenStatesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(HiddenStatesArchive& a, HiddenStatesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenStatesArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiddenStatesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenStatesArchive* New() const final {
    return CreateMaybeMessage<HiddenStatesArchive>(nullptr);
  }

  HiddenStatesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenStatesArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HiddenStatesArchive& from);
  void MergeFrom(const HiddenStatesArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiddenStatesArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HiddenStatesArchive";
  }
  protected:
  explicit HiddenStatesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenStatesUidFieldNumber = 1,
    kColumnHiddenStateExtentFieldNumber = 2,
    kRowHiddenStateExtentFieldNumber = 3,
  };
  // required .TSP.UUID hidden_states_uid = 1;
  bool has_hidden_states_uid() const;
  private:
  bool _internal_has_hidden_states_uid() const;
  public:
  void clear_hidden_states_uid();
  const ::TSP::UUID& hidden_states_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_hidden_states_uid();
  ::TSP::UUID* mutable_hidden_states_uid();
  void set_allocated_hidden_states_uid(::TSP::UUID* hidden_states_uid);
  private:
  const ::TSP::UUID& _internal_hidden_states_uid() const;
  ::TSP::UUID* _internal_mutable_hidden_states_uid();
  public:
  void unsafe_arena_set_allocated_hidden_states_uid(
      ::TSP::UUID* hidden_states_uid);
  ::TSP::UUID* unsafe_arena_release_hidden_states_uid();

  // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
  bool has_column_hidden_state_extent() const;
  private:
  bool _internal_has_column_hidden_state_extent() const;
  public:
  void clear_column_hidden_state_extent();
  const ::TST::HiddenStateExtentArchive& column_hidden_state_extent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::HiddenStateExtentArchive* release_column_hidden_state_extent();
  ::TST::HiddenStateExtentArchive* mutable_column_hidden_state_extent();
  void set_allocated_column_hidden_state_extent(::TST::HiddenStateExtentArchive* column_hidden_state_extent);
  private:
  const ::TST::HiddenStateExtentArchive& _internal_column_hidden_state_extent() const;
  ::TST::HiddenStateExtentArchive* _internal_mutable_column_hidden_state_extent();
  public:
  void unsafe_arena_set_allocated_column_hidden_state_extent(
      ::TST::HiddenStateExtentArchive* column_hidden_state_extent);
  ::TST::HiddenStateExtentArchive* unsafe_arena_release_column_hidden_state_extent();

  // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
  bool has_row_hidden_state_extent() const;
  private:
  bool _internal_has_row_hidden_state_extent() const;
  public:
  void clear_row_hidden_state_extent();
  const ::TST::HiddenStateExtentArchive& row_hidden_state_extent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::HiddenStateExtentArchive* release_row_hidden_state_extent();
  ::TST::HiddenStateExtentArchive* mutable_row_hidden_state_extent();
  void set_allocated_row_hidden_state_extent(::TST::HiddenStateExtentArchive* row_hidden_state_extent);
  private:
  const ::TST::HiddenStateExtentArchive& _internal_row_hidden_state_extent() const;
  ::TST::HiddenStateExtentArchive* _internal_mutable_row_hidden_state_extent();
  public:
  void unsafe_arena_set_allocated_row_hidden_state_extent(
      ::TST::HiddenStateExtentArchive* row_hidden_state_extent);
  ::TST::HiddenStateExtentArchive* unsafe_arena_release_row_hidden_state_extent();

  // @@protoc_insertion_point(class_scope:TST.HiddenStatesArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* hidden_states_uid_;
  ::TST::HiddenStateExtentArchive* column_hidden_state_extent_;
  ::TST::HiddenStateExtentArchive* row_hidden_state_extent_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HiddenStatesOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HiddenStatesOwnerArchive) */ {
 public:
  inline HiddenStatesOwnerArchive() : HiddenStatesOwnerArchive(nullptr) {}
  ~HiddenStatesOwnerArchive() override;
  explicit constexpr HiddenStatesOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiddenStatesOwnerArchive(const HiddenStatesOwnerArchive& from);
  HiddenStatesOwnerArchive(HiddenStatesOwnerArchive&& from) noexcept
    : HiddenStatesOwnerArchive() {
    *this = ::std::move(from);
  }

  inline HiddenStatesOwnerArchive& operator=(const HiddenStatesOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenStatesOwnerArchive& operator=(HiddenStatesOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiddenStatesOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiddenStatesOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const HiddenStatesOwnerArchive*>(
               &_HiddenStatesOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(HiddenStatesOwnerArchive& a, HiddenStatesOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenStatesOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiddenStatesOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenStatesOwnerArchive* New() const final {
    return CreateMaybeMessage<HiddenStatesOwnerArchive>(nullptr);
  }

  HiddenStatesOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenStatesOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HiddenStatesOwnerArchive& from);
  void MergeFrom(const HiddenStatesOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiddenStatesOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HiddenStatesOwnerArchive";
  }
  protected:
  explicit HiddenStatesOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenStatesFieldNumber = 2,
    kOwnerUidFieldNumber = 1,
  };
  // repeated .TST.HiddenStatesArchive hidden_states = 2;
  int hidden_states_size() const;
  private:
  int _internal_hidden_states_size() const;
  public:
  void clear_hidden_states();
  ::TST::HiddenStatesArchive* mutable_hidden_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStatesArchive >*
      mutable_hidden_states();
  private:
  const ::TST::HiddenStatesArchive& _internal_hidden_states(int index) const;
  ::TST::HiddenStatesArchive* _internal_add_hidden_states();
  public:
  const ::TST::HiddenStatesArchive& hidden_states(int index) const;
  ::TST::HiddenStatesArchive* add_hidden_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStatesArchive >&
      hidden_states() const;

  // required .TSP.UUID owner_uid = 1;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // @@protoc_insertion_point(class_scope:TST.HiddenStatesOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStatesArchive > hidden_states_;
  ::TSP::UUID* owner_uid_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpandCollapseStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ExpandCollapseStateArchive) */ {
 public:
  inline ExpandCollapseStateArchive() : ExpandCollapseStateArchive(nullptr) {}
  ~ExpandCollapseStateArchive() override;
  explicit constexpr ExpandCollapseStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpandCollapseStateArchive(const ExpandCollapseStateArchive& from);
  ExpandCollapseStateArchive(ExpandCollapseStateArchive&& from) noexcept
    : ExpandCollapseStateArchive() {
    *this = ::std::move(from);
  }

  inline ExpandCollapseStateArchive& operator=(const ExpandCollapseStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpandCollapseStateArchive& operator=(ExpandCollapseStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpandCollapseStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpandCollapseStateArchive* internal_default_instance() {
    return reinterpret_cast<const ExpandCollapseStateArchive*>(
               &_ExpandCollapseStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ExpandCollapseStateArchive& a, ExpandCollapseStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpandCollapseStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpandCollapseStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpandCollapseStateArchive* New() const final {
    return CreateMaybeMessage<ExpandCollapseStateArchive>(nullptr);
  }

  ExpandCollapseStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpandCollapseStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpandCollapseStateArchive& from);
  void MergeFrom(const ExpandCollapseStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpandCollapseStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ExpandCollapseStateArchive";
  }
  protected:
  explicit ExpandCollapseStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsCollapsedFieldNumber = 1,
    kUidsExpandedFieldNumber = 2,
  };
  // repeated .TSP.UUID uids_collapsed = 1;
  int uids_collapsed_size() const;
  private:
  int _internal_uids_collapsed_size() const;
  public:
  void clear_uids_collapsed();
  ::TSP::UUID* mutable_uids_collapsed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uids_collapsed();
  private:
  const ::TSP::UUID& _internal_uids_collapsed(int index) const;
  ::TSP::UUID* _internal_add_uids_collapsed();
  public:
  const ::TSP::UUID& uids_collapsed(int index) const;
  ::TSP::UUID* add_uids_collapsed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uids_collapsed() const;

  // repeated .TSP.UUID uids_expanded = 2;
  int uids_expanded_size() const;
  private:
  int _internal_uids_expanded_size() const;
  public:
  void clear_uids_expanded();
  ::TSP::UUID* mutable_uids_expanded(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uids_expanded();
  private:
  const ::TSP::UUID& _internal_uids_expanded(int index) const;
  ::TSP::UUID* _internal_add_uids_expanded();
  public:
  const ::TSP::UUID& uids_expanded(int index) const;
  ::TSP::UUID* add_uids_expanded();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uids_expanded() const;

  // @@protoc_insertion_point(class_scope:TST.ExpandCollapseStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uids_collapsed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uids_expanded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class TokenAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.TokenAttachmentArchive) */ {
 public:
  inline TokenAttachmentArchive() : TokenAttachmentArchive(nullptr) {}
  ~TokenAttachmentArchive() override;
  explicit constexpr TokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TokenAttachmentArchive(const TokenAttachmentArchive& from);
  TokenAttachmentArchive(TokenAttachmentArchive&& from) noexcept
    : TokenAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline TokenAttachmentArchive& operator=(const TokenAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenAttachmentArchive& operator=(TokenAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TokenAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TokenAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const TokenAttachmentArchive*>(
               &_TokenAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(TokenAttachmentArchive& a, TokenAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenAttachmentArchive* New() const final {
    return CreateMaybeMessage<TokenAttachmentArchive>(nullptr);
  }

  TokenAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenAttachmentArchive& from);
  void MergeFrom(const TokenAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.TokenAttachmentArchive";
  }
  protected:
  explicit TokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kExpressionNodeFieldNumber = 2,
  };
  // required .TSWP.UIGraphicalAttachment super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::UIGraphicalAttachment& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UIGraphicalAttachment* release_super();
  ::TSWP::UIGraphicalAttachment* mutable_super();
  void set_allocated_super(::TSWP::UIGraphicalAttachment* super);
  private:
  const ::TSWP::UIGraphicalAttachment& _internal_super() const;
  ::TSWP::UIGraphicalAttachment* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::UIGraphicalAttachment* super);
  ::TSWP::UIGraphicalAttachment* unsafe_arena_release_super();

  // optional .TSP.Reference expressionNode = 2;
  bool has_expressionnode() const;
  private:
  bool _internal_has_expressionnode() const;
  public:
  void clear_expressionnode();
  const ::TSP::Reference& expressionnode() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_expressionnode();
  ::TSP::Reference* mutable_expressionnode();
  void set_allocated_expressionnode(::TSP::Reference* expressionnode);
  private:
  const ::TSP::Reference& _internal_expressionnode() const;
  ::TSP::Reference* _internal_mutable_expressionnode();
  public:
  void unsafe_arena_set_allocated_expressionnode(
      ::TSP::Reference* expressionnode);
  ::TSP::Reference* unsafe_arena_release_expressionnode();

  // @@protoc_insertion_point(class_scope:TST.TokenAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::UIGraphicalAttachment* super_;
  ::TSP::Reference* expressionnode_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaArchive) */ {
 public:
  inline FormulaArchive() : FormulaArchive(nullptr) {}
  ~FormulaArchive() override;
  explicit constexpr FormulaArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaArchive(const FormulaArchive& from);
  FormulaArchive(FormulaArchive&& from) noexcept
    : FormulaArchive() {
    *this = ::std::move(from);
  }

  inline FormulaArchive& operator=(const FormulaArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaArchive& operator=(FormulaArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaArchive*>(
               &_FormulaArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(FormulaArchive& a, FormulaArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaArchive* New() const final {
    return CreateMaybeMessage<FormulaArchive>(nullptr);
  }

  FormulaArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaArchive& from);
  void MergeFrom(const FormulaArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaArchive";
  }
  protected:
  explicit FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionTreeFieldNumber = 1,
  };
  // optional .TSP.Reference expressionTree = 1;
  bool has_expressiontree() const;
  private:
  bool _internal_has_expressiontree() const;
  public:
  void clear_expressiontree();
  const ::TSP::Reference& expressiontree() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_expressiontree();
  ::TSP::Reference* mutable_expressiontree();
  void set_allocated_expressiontree(::TSP::Reference* expressiontree);
  private:
  const ::TSP::Reference& _internal_expressiontree() const;
  ::TSP::Reference* _internal_mutable_expressiontree();
  public:
  void unsafe_arena_set_allocated_expressiontree(
      ::TSP::Reference* expressiontree);
  ::TSP::Reference* unsafe_arena_release_expressiontree();

  // @@protoc_insertion_point(class_scope:TST.FormulaArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* expressiontree_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ExpressionNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ExpressionNodeArchive) */ {
 public:
  inline ExpressionNodeArchive() : ExpressionNodeArchive(nullptr) {}
  ~ExpressionNodeArchive() override;
  explicit constexpr ExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpressionNodeArchive(const ExpressionNodeArchive& from);
  ExpressionNodeArchive(ExpressionNodeArchive&& from) noexcept
    : ExpressionNodeArchive() {
    *this = ::std::move(from);
  }

  inline ExpressionNodeArchive& operator=(const ExpressionNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpressionNodeArchive& operator=(ExpressionNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpressionNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpressionNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ExpressionNodeArchive*>(
               &_ExpressionNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ExpressionNodeArchive& a, ExpressionNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpressionNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpressionNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExpressionNodeArchive* New() const final {
    return CreateMaybeMessage<ExpressionNodeArchive>(nullptr);
  }

  ExpressionNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExpressionNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExpressionNodeArchive& from);
  void MergeFrom(const ExpressionNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpressionNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ExpressionNodeArchive";
  }
  protected:
  explicit ExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 1,
    kFirstIndexFieldNumber = 2,
    kLastIndexFieldNumber = 3,
  };
  // repeated .TSP.Reference children = 1;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // optional uint64 first_index = 2 [default = 0];
  bool has_first_index() const;
  private:
  bool _internal_has_first_index() const;
  public:
  void clear_first_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_index() const;
  void set_first_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_index() const;
  void _internal_set_first_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 last_index = 3 [default = 0];
  bool has_last_index() const;
  private:
  bool _internal_has_last_index() const;
  public:
  void clear_last_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index() const;
  void set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_index() const;
  void _internal_set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ExpressionNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class BooleanNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.BooleanNodeArchive) */ {
 public:
  inline BooleanNodeArchive() : BooleanNodeArchive(nullptr) {}
  ~BooleanNodeArchive() override;
  explicit constexpr BooleanNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooleanNodeArchive(const BooleanNodeArchive& from);
  BooleanNodeArchive(BooleanNodeArchive&& from) noexcept
    : BooleanNodeArchive() {
    *this = ::std::move(from);
  }

  inline BooleanNodeArchive& operator=(const BooleanNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanNodeArchive& operator=(BooleanNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanNodeArchive* internal_default_instance() {
    return reinterpret_cast<const BooleanNodeArchive*>(
               &_BooleanNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(BooleanNodeArchive& a, BooleanNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanNodeArchive* New() const final {
    return CreateMaybeMessage<BooleanNodeArchive>(nullptr);
  }

  BooleanNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BooleanNodeArchive& from);
  void MergeFrom(const BooleanNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.BooleanNodeArchive";
  }
  protected:
  explicit BooleanNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // required bool value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.BooleanNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  bool value_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class NumberNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.NumberNodeArchive) */ {
 public:
  inline NumberNodeArchive() : NumberNodeArchive(nullptr) {}
  ~NumberNodeArchive() override;
  explicit constexpr NumberNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberNodeArchive(const NumberNodeArchive& from);
  NumberNodeArchive(NumberNodeArchive&& from) noexcept
    : NumberNodeArchive() {
    *this = ::std::move(from);
  }

  inline NumberNodeArchive& operator=(const NumberNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberNodeArchive& operator=(NumberNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberNodeArchive* internal_default_instance() {
    return reinterpret_cast<const NumberNodeArchive*>(
               &_NumberNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(NumberNodeArchive& a, NumberNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberNodeArchive* New() const final {
    return CreateMaybeMessage<NumberNodeArchive>(nullptr);
  }

  NumberNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumberNodeArchive& from);
  void MergeFrom(const NumberNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.NumberNodeArchive";
  }
  protected:
  explicit NumberNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNumberFieldNumber = 2,
    kDecimalLowFieldNumber = 3,
    kDecimalHighFieldNumber = 4,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // optional double number = 2;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  double number() const;
  void set_number(double value);
  private:
  double _internal_number() const;
  void _internal_set_number(double value);
  public:

  // optional uint64 decimal_low = 3;
  bool has_decimal_low() const;
  private:
  bool _internal_has_decimal_low() const;
  public:
  void clear_decimal_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_low() const;
  void set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_low() const;
  void _internal_set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 decimal_high = 4;
  bool has_decimal_high() const;
  private:
  bool _internal_has_decimal_high() const;
  public:
  void clear_decimal_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_high() const;
  void set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_decimal_high() const;
  void _internal_set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.NumberNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  double number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_low_;
  ::PROTOBUF_NAMESPACE_ID::uint64 decimal_high_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class StringNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.StringNodeArchive) */ {
 public:
  inline StringNodeArchive() : StringNodeArchive(nullptr) {}
  ~StringNodeArchive() override;
  explicit constexpr StringNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringNodeArchive(const StringNodeArchive& from);
  StringNodeArchive(StringNodeArchive&& from) noexcept
    : StringNodeArchive() {
    *this = ::std::move(from);
  }

  inline StringNodeArchive& operator=(const StringNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringNodeArchive& operator=(StringNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringNodeArchive* internal_default_instance() {
    return reinterpret_cast<const StringNodeArchive*>(
               &_StringNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(StringNodeArchive& a, StringNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StringNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringNodeArchive* New() const final {
    return CreateMaybeMessage<StringNodeArchive>(nullptr);
  }

  StringNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringNodeArchive& from);
  void MergeFrom(const StringNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.StringNodeArchive";
  }
  protected:
  explicit StringNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.StringNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class IdentifierNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.IdentifierNodeArchive) */ {
 public:
  inline IdentifierNodeArchive() : IdentifierNodeArchive(nullptr) {}
  ~IdentifierNodeArchive() override;
  explicit constexpr IdentifierNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentifierNodeArchive(const IdentifierNodeArchive& from);
  IdentifierNodeArchive(IdentifierNodeArchive&& from) noexcept
    : IdentifierNodeArchive() {
    *this = ::std::move(from);
  }

  inline IdentifierNodeArchive& operator=(const IdentifierNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifierNodeArchive& operator=(IdentifierNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifierNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifierNodeArchive* internal_default_instance() {
    return reinterpret_cast<const IdentifierNodeArchive*>(
               &_IdentifierNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(IdentifierNodeArchive& a, IdentifierNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifierNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifierNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentifierNodeArchive* New() const final {
    return CreateMaybeMessage<IdentifierNodeArchive>(nullptr);
  }

  IdentifierNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentifierNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentifierNodeArchive& from);
  void MergeFrom(const IdentifierNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifierNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.IdentifierNodeArchive";
  }
  protected:
  explicit IdentifierNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kSuperFieldNumber = 1,
    kSymbolFieldNumber = 3,
  };
  // optional string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // optional uint32 symbol = 3;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  ::PROTOBUF_NAMESPACE_ID::uint32 symbol() const;
  void set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_symbol() const;
  void _internal_set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.IdentifierNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::TST::ExpressionNodeArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 symbol_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ArrayNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ArrayNodeArchive) */ {
 public:
  inline ArrayNodeArchive() : ArrayNodeArchive(nullptr) {}
  ~ArrayNodeArchive() override;
  explicit constexpr ArrayNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayNodeArchive(const ArrayNodeArchive& from);
  ArrayNodeArchive(ArrayNodeArchive&& from) noexcept
    : ArrayNodeArchive() {
    *this = ::std::move(from);
  }

  inline ArrayNodeArchive& operator=(const ArrayNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayNodeArchive& operator=(ArrayNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ArrayNodeArchive*>(
               &_ArrayNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ArrayNodeArchive& a, ArrayNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayNodeArchive* New() const final {
    return CreateMaybeMessage<ArrayNodeArchive>(nullptr);
  }

  ArrayNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayNodeArchive& from);
  void MergeFrom(const ArrayNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ArrayNodeArchive";
  }
  protected:
  explicit ArrayNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kColumnsFieldNumber = 2,
    kRowsFieldNumber = 3,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // optional uint32 columns = 2;
  bool has_columns() const;
  private:
  bool _internal_has_columns() const;
  public:
  void clear_columns();
  ::PROTOBUF_NAMESPACE_ID::uint32 columns() const;
  void set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_columns() const;
  void _internal_set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rows = 3;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ArrayNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ListNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ListNodeArchive) */ {
 public:
  inline ListNodeArchive() : ListNodeArchive(nullptr) {}
  ~ListNodeArchive() override;
  explicit constexpr ListNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodeArchive(const ListNodeArchive& from);
  ListNodeArchive(ListNodeArchive&& from) noexcept
    : ListNodeArchive() {
    *this = ::std::move(from);
  }

  inline ListNodeArchive& operator=(const ListNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodeArchive& operator=(ListNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ListNodeArchive*>(
               &_ListNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(ListNodeArchive& a, ListNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNodeArchive* New() const final {
    return CreateMaybeMessage<ListNodeArchive>(nullptr);
  }

  ListNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNodeArchive& from);
  void MergeFrom(const ListNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ListNodeArchive";
  }
  protected:
  explicit ListNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.ListNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class OperatorNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.OperatorNodeArchive) */ {
 public:
  inline OperatorNodeArchive() : OperatorNodeArchive(nullptr) {}
  ~OperatorNodeArchive() override;
  explicit constexpr OperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperatorNodeArchive(const OperatorNodeArchive& from);
  OperatorNodeArchive(OperatorNodeArchive&& from) noexcept
    : OperatorNodeArchive() {
    *this = ::std::move(from);
  }

  inline OperatorNodeArchive& operator=(const OperatorNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatorNodeArchive& operator=(OperatorNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperatorNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperatorNodeArchive* internal_default_instance() {
    return reinterpret_cast<const OperatorNodeArchive*>(
               &_OperatorNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(OperatorNodeArchive& a, OperatorNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatorNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperatorNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperatorNodeArchive* New() const final {
    return CreateMaybeMessage<OperatorNodeArchive>(nullptr);
  }

  OperatorNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperatorNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperatorNodeArchive& from);
  void MergeFrom(const OperatorNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatorNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.OperatorNodeArchive";
  }
  protected:
  explicit OperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOperatorCharFieldNumber = 2,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // required uint32 operatorChar = 2;
  bool has_operatorchar() const;
  private:
  bool _internal_has_operatorchar() const;
  public:
  void clear_operatorchar();
  ::PROTOBUF_NAMESPACE_ID::uint32 operatorchar() const;
  void set_operatorchar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operatorchar() const;
  void _internal_set_operatorchar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.OperatorNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operatorchar_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class PostfixOperatorNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.PostfixOperatorNodeArchive) */ {
 public:
  inline PostfixOperatorNodeArchive() : PostfixOperatorNodeArchive(nullptr) {}
  ~PostfixOperatorNodeArchive() override;
  explicit constexpr PostfixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostfixOperatorNodeArchive(const PostfixOperatorNodeArchive& from);
  PostfixOperatorNodeArchive(PostfixOperatorNodeArchive&& from) noexcept
    : PostfixOperatorNodeArchive() {
    *this = ::std::move(from);
  }

  inline PostfixOperatorNodeArchive& operator=(const PostfixOperatorNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostfixOperatorNodeArchive& operator=(PostfixOperatorNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostfixOperatorNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostfixOperatorNodeArchive* internal_default_instance() {
    return reinterpret_cast<const PostfixOperatorNodeArchive*>(
               &_PostfixOperatorNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PostfixOperatorNodeArchive& a, PostfixOperatorNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PostfixOperatorNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostfixOperatorNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostfixOperatorNodeArchive* New() const final {
    return CreateMaybeMessage<PostfixOperatorNodeArchive>(nullptr);
  }

  PostfixOperatorNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostfixOperatorNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostfixOperatorNodeArchive& from);
  void MergeFrom(const PostfixOperatorNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostfixOperatorNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.PostfixOperatorNodeArchive";
  }
  protected:
  explicit PostfixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.OperatorNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::OperatorNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::OperatorNodeArchive* release_super();
  ::TST::OperatorNodeArchive* mutable_super();
  void set_allocated_super(::TST::OperatorNodeArchive* super);
  private:
  const ::TST::OperatorNodeArchive& _internal_super() const;
  ::TST::OperatorNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::OperatorNodeArchive* super);
  ::TST::OperatorNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.PostfixOperatorNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::OperatorNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class PrefixOperatorNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.PrefixOperatorNodeArchive) */ {
 public:
  inline PrefixOperatorNodeArchive() : PrefixOperatorNodeArchive(nullptr) {}
  ~PrefixOperatorNodeArchive() override;
  explicit constexpr PrefixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrefixOperatorNodeArchive(const PrefixOperatorNodeArchive& from);
  PrefixOperatorNodeArchive(PrefixOperatorNodeArchive&& from) noexcept
    : PrefixOperatorNodeArchive() {
    *this = ::std::move(from);
  }

  inline PrefixOperatorNodeArchive& operator=(const PrefixOperatorNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixOperatorNodeArchive& operator=(PrefixOperatorNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrefixOperatorNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrefixOperatorNodeArchive* internal_default_instance() {
    return reinterpret_cast<const PrefixOperatorNodeArchive*>(
               &_PrefixOperatorNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(PrefixOperatorNodeArchive& a, PrefixOperatorNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefixOperatorNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrefixOperatorNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefixOperatorNodeArchive* New() const final {
    return CreateMaybeMessage<PrefixOperatorNodeArchive>(nullptr);
  }

  PrefixOperatorNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefixOperatorNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrefixOperatorNodeArchive& from);
  void MergeFrom(const PrefixOperatorNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrefixOperatorNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.PrefixOperatorNodeArchive";
  }
  protected:
  explicit PrefixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.OperatorNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::OperatorNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::OperatorNodeArchive* release_super();
  ::TST::OperatorNodeArchive* mutable_super();
  void set_allocated_super(::TST::OperatorNodeArchive* super);
  private:
  const ::TST::OperatorNodeArchive& _internal_super() const;
  ::TST::OperatorNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::OperatorNodeArchive* super);
  ::TST::OperatorNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.PrefixOperatorNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::OperatorNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FunctionNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FunctionNodeArchive) */ {
 public:
  inline FunctionNodeArchive() : FunctionNodeArchive(nullptr) {}
  ~FunctionNodeArchive() override;
  explicit constexpr FunctionNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionNodeArchive(const FunctionNodeArchive& from);
  FunctionNodeArchive(FunctionNodeArchive&& from) noexcept
    : FunctionNodeArchive() {
    *this = ::std::move(from);
  }

  inline FunctionNodeArchive& operator=(const FunctionNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionNodeArchive& operator=(FunctionNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionNodeArchive* internal_default_instance() {
    return reinterpret_cast<const FunctionNodeArchive*>(
               &_FunctionNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(FunctionNodeArchive& a, FunctionNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionNodeArchive* New() const final {
    return CreateMaybeMessage<FunctionNodeArchive>(nullptr);
  }

  FunctionNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionNodeArchive& from);
  void MergeFrom(const FunctionNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FunctionNodeArchive";
  }
  protected:
  explicit FunctionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvalidFunctionNameFieldNumber = 3,
    kSuperFieldNumber = 1,
    kFunctionIndexFieldNumber = 2,
  };
  // optional string invalidFunctionName = 3;
  bool has_invalidfunctionname() const;
  private:
  bool _internal_has_invalidfunctionname() const;
  public:
  void clear_invalidfunctionname();
  const std::string& invalidfunctionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invalidfunctionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invalidfunctionname();
  std::string* release_invalidfunctionname();
  void set_allocated_invalidfunctionname(std::string* invalidfunctionname);
  private:
  const std::string& _internal_invalidfunctionname() const;
  void _internal_set_invalidfunctionname(const std::string& value);
  std::string* _internal_mutable_invalidfunctionname();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // required uint32 functionIndex = 2;
  bool has_functionindex() const;
  private:
  bool _internal_has_functionindex() const;
  public:
  void clear_functionindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 functionindex() const;
  void set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_functionindex() const;
  void _internal_set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FunctionNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invalidfunctionname_;
  ::TST::ExpressionNodeArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 functionindex_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FunctionEndNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FunctionEndNodeArchive) */ {
 public:
  inline FunctionEndNodeArchive() : FunctionEndNodeArchive(nullptr) {}
  ~FunctionEndNodeArchive() override;
  explicit constexpr FunctionEndNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionEndNodeArchive(const FunctionEndNodeArchive& from);
  FunctionEndNodeArchive(FunctionEndNodeArchive&& from) noexcept
    : FunctionEndNodeArchive() {
    *this = ::std::move(from);
  }

  inline FunctionEndNodeArchive& operator=(const FunctionEndNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionEndNodeArchive& operator=(FunctionEndNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionEndNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionEndNodeArchive* internal_default_instance() {
    return reinterpret_cast<const FunctionEndNodeArchive*>(
               &_FunctionEndNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(FunctionEndNodeArchive& a, FunctionEndNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionEndNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionEndNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionEndNodeArchive* New() const final {
    return CreateMaybeMessage<FunctionEndNodeArchive>(nullptr);
  }

  FunctionEndNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionEndNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionEndNodeArchive& from);
  void MergeFrom(const FunctionEndNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionEndNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FunctionEndNodeArchive";
  }
  protected:
  explicit FunctionEndNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.FunctionEndNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DateNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DateNodeArchive) */ {
 public:
  inline DateNodeArchive() : DateNodeArchive(nullptr) {}
  ~DateNodeArchive() override;
  explicit constexpr DateNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DateNodeArchive(const DateNodeArchive& from);
  DateNodeArchive(DateNodeArchive&& from) noexcept
    : DateNodeArchive() {
    *this = ::std::move(from);
  }

  inline DateNodeArchive& operator=(const DateNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateNodeArchive& operator=(DateNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DateNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DateNodeArchive* internal_default_instance() {
    return reinterpret_cast<const DateNodeArchive*>(
               &_DateNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(DateNodeArchive& a, DateNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DateNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateNodeArchive* New() const final {
    return CreateMaybeMessage<DateNodeArchive>(nullptr);
  }

  DateNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateNodeArchive& from);
  void MergeFrom(const DateNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DateNodeArchive";
  }
  protected:
  explicit DateNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFormatFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string format = 3;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.DateNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ReferenceNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ReferenceNodeArchive) */ {
 public:
  inline ReferenceNodeArchive() : ReferenceNodeArchive(nullptr) {}
  ~ReferenceNodeArchive() override;
  explicit constexpr ReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceNodeArchive(const ReferenceNodeArchive& from);
  ReferenceNodeArchive(ReferenceNodeArchive&& from) noexcept
    : ReferenceNodeArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceNodeArchive& operator=(const ReferenceNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceNodeArchive& operator=(ReferenceNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceNodeArchive*>(
               &_ReferenceNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ReferenceNodeArchive& a, ReferenceNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceNodeArchive* New() const final {
    return CreateMaybeMessage<ReferenceNodeArchive>(nullptr);
  }

  ReferenceNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceNodeArchive& from);
  void MergeFrom(const ReferenceNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ReferenceNodeArchive";
  }
  protected:
  explicit ReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostTableIDFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRangeReferenceFieldNumber = 2,
    kTableUidFieldNumber = 5,
    kRangeTopLeftFieldNumber = 6,
    kRangeBottomRightFieldNumber = 7,
    kCategoryRefFieldNumber = 8,
    kUidRangeRectFieldNumber = 9,
    kHostCellRefFieldNumber = 10,
    kPreserveFlagsFieldNumber = 3,
  };
  // optional string hostTableID = 4;
  bool has_hosttableid() const;
  private:
  bool _internal_has_hosttableid() const;
  public:
  void clear_hosttableid();
  const std::string& hosttableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hosttableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hosttableid();
  std::string* release_hosttableid();
  void set_allocated_hosttableid(std::string* hosttableid);
  private:
  const std::string& _internal_hosttableid() const;
  void _internal_set_hosttableid(const std::string& value);
  std::string* _internal_mutable_hosttableid();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // optional .TSCE.RangeReferenceArchive rangeReference = 2;
  bool has_rangereference() const;
  private:
  bool _internal_has_rangereference() const;
  public:
  void clear_rangereference();
  const ::TSCE::RangeReferenceArchive& rangereference() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::RangeReferenceArchive* release_rangereference();
  ::TSCE::RangeReferenceArchive* mutable_rangereference();
  void set_allocated_rangereference(::TSCE::RangeReferenceArchive* rangereference);
  private:
  const ::TSCE::RangeReferenceArchive& _internal_rangereference() const;
  ::TSCE::RangeReferenceArchive* _internal_mutable_rangereference();
  public:
  void unsafe_arena_set_allocated_rangereference(
      ::TSCE::RangeReferenceArchive* rangereference);
  ::TSCE::RangeReferenceArchive* unsafe_arena_release_rangereference();

  // optional .TSP.UUID table_uid = 5;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // optional .TSP.UUIDCoordArchive range_top_left = 6;
  bool has_range_top_left() const;
  private:
  bool _internal_has_range_top_left() const;
  public:
  void clear_range_top_left();
  const ::TSP::UUIDCoordArchive& range_top_left() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDCoordArchive* release_range_top_left();
  ::TSP::UUIDCoordArchive* mutable_range_top_left();
  void set_allocated_range_top_left(::TSP::UUIDCoordArchive* range_top_left);
  private:
  const ::TSP::UUIDCoordArchive& _internal_range_top_left() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_range_top_left();
  public:
  void unsafe_arena_set_allocated_range_top_left(
      ::TSP::UUIDCoordArchive* range_top_left);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_range_top_left();

  // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
  bool has_range_bottom_right() const;
  private:
  bool _internal_has_range_bottom_right() const;
  public:
  void clear_range_bottom_right();
  const ::TSP::UUIDCoordArchive& range_bottom_right() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDCoordArchive* release_range_bottom_right();
  ::TSP::UUIDCoordArchive* mutable_range_bottom_right();
  void set_allocated_range_bottom_right(::TSP::UUIDCoordArchive* range_bottom_right);
  private:
  const ::TSP::UUIDCoordArchive& _internal_range_bottom_right() const;
  ::TSP::UUIDCoordArchive* _internal_mutable_range_bottom_right();
  public:
  void unsafe_arena_set_allocated_range_bottom_right(
      ::TSP::UUIDCoordArchive* range_bottom_right);
  ::TSP::UUIDCoordArchive* unsafe_arena_release_range_bottom_right();

  // optional .TSCE.CategoryReferenceArchive category_ref = 8;
  bool has_category_ref() const;
  private:
  bool _internal_has_category_ref() const;
  public:
  void clear_category_ref();
  const ::TSCE::CategoryReferenceArchive& category_ref() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CategoryReferenceArchive* release_category_ref();
  ::TSCE::CategoryReferenceArchive* mutable_category_ref();
  void set_allocated_category_ref(::TSCE::CategoryReferenceArchive* category_ref);
  private:
  const ::TSCE::CategoryReferenceArchive& _internal_category_ref() const;
  ::TSCE::CategoryReferenceArchive* _internal_mutable_category_ref();
  public:
  void unsafe_arena_set_allocated_category_ref(
      ::TSCE::CategoryReferenceArchive* category_ref);
  ::TSCE::CategoryReferenceArchive* unsafe_arena_release_category_ref();

  // optional .TSP.UUIDRectArchive uid_range_rect = 9;
  bool has_uid_range_rect() const;
  private:
  bool _internal_has_uid_range_rect() const;
  public:
  void clear_uid_range_rect();
  const ::TSP::UUIDRectArchive& uid_range_rect() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDRectArchive* release_uid_range_rect();
  ::TSP::UUIDRectArchive* mutable_uid_range_rect();
  void set_allocated_uid_range_rect(::TSP::UUIDRectArchive* uid_range_rect);
  private:
  const ::TSP::UUIDRectArchive& _internal_uid_range_rect() const;
  ::TSP::UUIDRectArchive* _internal_mutable_uid_range_rect();
  public:
  void unsafe_arena_set_allocated_uid_range_rect(
      ::TSP::UUIDRectArchive* uid_range_rect);
  ::TSP::UUIDRectArchive* unsafe_arena_release_uid_range_rect();

  // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
  bool has_host_cell_ref() const;
  private:
  bool _internal_has_host_cell_ref() const;
  public:
  void clear_host_cell_ref();
  const ::TSCE::CellReferenceArchive& host_cell_ref() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellReferenceArchive* release_host_cell_ref();
  ::TSCE::CellReferenceArchive* mutable_host_cell_ref();
  void set_allocated_host_cell_ref(::TSCE::CellReferenceArchive* host_cell_ref);
  private:
  const ::TSCE::CellReferenceArchive& _internal_host_cell_ref() const;
  ::TSCE::CellReferenceArchive* _internal_mutable_host_cell_ref();
  public:
  void unsafe_arena_set_allocated_host_cell_ref(
      ::TSCE::CellReferenceArchive* host_cell_ref);
  ::TSCE::CellReferenceArchive* unsafe_arena_release_host_cell_ref();

  // required uint32 preserve_flags = 3;
  bool has_preserve_flags() const;
  private:
  bool _internal_has_preserve_flags() const;
  public:
  void clear_preserve_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 preserve_flags() const;
  void set_preserve_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preserve_flags() const;
  void _internal_set_preserve_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ReferenceNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosttableid_;
  ::TST::ExpressionNodeArchive* super_;
  ::TSCE::RangeReferenceArchive* rangereference_;
  ::TSP::UUID* table_uid_;
  ::TSP::UUIDCoordArchive* range_top_left_;
  ::TSP::UUIDCoordArchive* range_bottom_right_;
  ::TSCE::CategoryReferenceArchive* category_ref_;
  ::TSP::UUIDRectArchive* uid_range_rect_;
  ::TSCE::CellReferenceArchive* host_cell_ref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preserve_flags_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DurationNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DurationNodeArchive) */ {
 public:
  inline DurationNodeArchive() : DurationNodeArchive(nullptr) {}
  ~DurationNodeArchive() override;
  explicit constexpr DurationNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DurationNodeArchive(const DurationNodeArchive& from);
  DurationNodeArchive(DurationNodeArchive&& from) noexcept
    : DurationNodeArchive() {
    *this = ::std::move(from);
  }

  inline DurationNodeArchive& operator=(const DurationNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurationNodeArchive& operator=(DurationNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DurationNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DurationNodeArchive* internal_default_instance() {
    return reinterpret_cast<const DurationNodeArchive*>(
               &_DurationNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(DurationNodeArchive& a, DurationNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DurationNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurationNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurationNodeArchive* New() const final {
    return CreateMaybeMessage<DurationNodeArchive>(nullptr);
  }

  DurationNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurationNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurationNodeArchive& from);
  void MergeFrom(const DurationNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurationNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DurationNodeArchive";
  }
  protected:
  explicit DurationNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kTimeintervalFieldNumber = 2,
    kSmallestFieldNumber = 3,
    kLargestFieldNumber = 4,
    kStyleFieldNumber = 5,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // required double timeinterval = 2;
  bool has_timeinterval() const;
  private:
  bool _internal_has_timeinterval() const;
  public:
  void clear_timeinterval();
  double timeinterval() const;
  void set_timeinterval(double value);
  private:
  double _internal_timeinterval() const;
  void _internal_set_timeinterval(double value);
  public:

  // required uint32 smallest = 3;
  bool has_smallest() const;
  private:
  bool _internal_has_smallest() const;
  public:
  void clear_smallest();
  ::PROTOBUF_NAMESPACE_ID::uint32 smallest() const;
  void set_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_smallest() const;
  void _internal_set_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 largest = 4;
  bool has_largest() const;
  private:
  bool _internal_has_largest() const;
  public:
  void clear_largest();
  ::PROTOBUF_NAMESPACE_ID::uint32 largest() const;
  void set_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_largest() const;
  void _internal_set_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 style = 5;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_style() const;
  void _internal_set_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.DurationNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  double timeinterval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smallest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 largest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 style_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ArgumentPlaceholderNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ArgumentPlaceholderNodeArchive) */ {
 public:
  inline ArgumentPlaceholderNodeArchive() : ArgumentPlaceholderNodeArchive(nullptr) {}
  ~ArgumentPlaceholderNodeArchive() override;
  explicit constexpr ArgumentPlaceholderNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArgumentPlaceholderNodeArchive(const ArgumentPlaceholderNodeArchive& from);
  ArgumentPlaceholderNodeArchive(ArgumentPlaceholderNodeArchive&& from) noexcept
    : ArgumentPlaceholderNodeArchive() {
    *this = ::std::move(from);
  }

  inline ArgumentPlaceholderNodeArchive& operator=(const ArgumentPlaceholderNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArgumentPlaceholderNodeArchive& operator=(ArgumentPlaceholderNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArgumentPlaceholderNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArgumentPlaceholderNodeArchive* internal_default_instance() {
    return reinterpret_cast<const ArgumentPlaceholderNodeArchive*>(
               &_ArgumentPlaceholderNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ArgumentPlaceholderNodeArchive& a, ArgumentPlaceholderNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ArgumentPlaceholderNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArgumentPlaceholderNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArgumentPlaceholderNodeArchive* New() const final {
    return CreateMaybeMessage<ArgumentPlaceholderNodeArchive>(nullptr);
  }

  ArgumentPlaceholderNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArgumentPlaceholderNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArgumentPlaceholderNodeArchive& from);
  void MergeFrom(const ArgumentPlaceholderNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgumentPlaceholderNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ArgumentPlaceholderNodeArchive";
  }
  protected:
  explicit ArgumentPlaceholderNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFunctionIndexFieldNumber = 2,
    kArgumentIndexFieldNumber = 3,
    kModeFieldNumber = 4,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // optional uint32 functionIndex = 2;
  bool has_functionindex() const;
  private:
  bool _internal_has_functionindex() const;
  public:
  void clear_functionindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 functionindex() const;
  void set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_functionindex() const;
  void _internal_set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 argumentIndex = 3;
  bool has_argumentindex() const;
  private:
  bool _internal_has_argumentindex() const;
  public:
  void clear_argumentindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 argumentindex() const;
  void set_argumentindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_argumentindex() const;
  void _internal_set_argumentindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ArgumentPlaceholderNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 functionindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 argumentindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class EmptyExpressionNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.EmptyExpressionNodeArchive) */ {
 public:
  inline EmptyExpressionNodeArchive() : EmptyExpressionNodeArchive(nullptr) {}
  ~EmptyExpressionNodeArchive() override;
  explicit constexpr EmptyExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyExpressionNodeArchive(const EmptyExpressionNodeArchive& from);
  EmptyExpressionNodeArchive(EmptyExpressionNodeArchive&& from) noexcept
    : EmptyExpressionNodeArchive() {
    *this = ::std::move(from);
  }

  inline EmptyExpressionNodeArchive& operator=(const EmptyExpressionNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyExpressionNodeArchive& operator=(EmptyExpressionNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyExpressionNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyExpressionNodeArchive* internal_default_instance() {
    return reinterpret_cast<const EmptyExpressionNodeArchive*>(
               &_EmptyExpressionNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(EmptyExpressionNodeArchive& a, EmptyExpressionNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyExpressionNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyExpressionNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyExpressionNodeArchive* New() const final {
    return CreateMaybeMessage<EmptyExpressionNodeArchive>(nullptr);
  }

  EmptyExpressionNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyExpressionNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyExpressionNodeArchive& from);
  void MergeFrom(const EmptyExpressionNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyExpressionNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.EmptyExpressionNodeArchive";
  }
  protected:
  explicit EmptyExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.EmptyExpressionNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class LetNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.LetNodeArchive) */ {
 public:
  inline LetNodeArchive() : LetNodeArchive(nullptr) {}
  ~LetNodeArchive() override;
  explicit constexpr LetNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LetNodeArchive(const LetNodeArchive& from);
  LetNodeArchive(LetNodeArchive&& from) noexcept
    : LetNodeArchive() {
    *this = ::std::move(from);
  }

  inline LetNodeArchive& operator=(const LetNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LetNodeArchive& operator=(LetNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LetNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LetNodeArchive* internal_default_instance() {
    return reinterpret_cast<const LetNodeArchive*>(
               &_LetNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(LetNodeArchive& a, LetNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LetNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LetNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LetNodeArchive* New() const final {
    return CreateMaybeMessage<LetNodeArchive>(nullptr);
  }

  LetNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LetNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LetNodeArchive& from);
  void MergeFrom(const LetNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LetNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.LetNodeArchive";
  }
  protected:
  explicit LetNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhitespaceAfterLetFieldNumber = 2,
    kWhitespaceAfterIdentifierFieldNumber = 3,
    kWhitespaceAfterEqualsFieldNumber = 4,
    kWhitespaceAfterDelimiterFieldNumber = 5,
    kSuperFieldNumber = 1,
  };
  // optional string whitespace_after_let = 2;
  bool has_whitespace_after_let() const;
  private:
  bool _internal_has_whitespace_after_let() const;
  public:
  void clear_whitespace_after_let();
  const std::string& whitespace_after_let() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_whitespace_after_let(ArgT0&& arg0, ArgT... args);
  std::string* mutable_whitespace_after_let();
  std::string* release_whitespace_after_let();
  void set_allocated_whitespace_after_let(std::string* whitespace_after_let);
  private:
  const std::string& _internal_whitespace_after_let() const;
  void _internal_set_whitespace_after_let(const std::string& value);
  std::string* _internal_mutable_whitespace_after_let();
  public:

  // optional string whitespace_after_identifier = 3;
  bool has_whitespace_after_identifier() const;
  private:
  bool _internal_has_whitespace_after_identifier() const;
  public:
  void clear_whitespace_after_identifier();
  const std::string& whitespace_after_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_whitespace_after_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_whitespace_after_identifier();
  std::string* release_whitespace_after_identifier();
  void set_allocated_whitespace_after_identifier(std::string* whitespace_after_identifier);
  private:
  const std::string& _internal_whitespace_after_identifier() const;
  void _internal_set_whitespace_after_identifier(const std::string& value);
  std::string* _internal_mutable_whitespace_after_identifier();
  public:

  // optional string whitespace_after_equals = 4;
  bool has_whitespace_after_equals() const;
  private:
  bool _internal_has_whitespace_after_equals() const;
  public:
  void clear_whitespace_after_equals();
  const std::string& whitespace_after_equals() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_whitespace_after_equals(ArgT0&& arg0, ArgT... args);
  std::string* mutable_whitespace_after_equals();
  std::string* release_whitespace_after_equals();
  void set_allocated_whitespace_after_equals(std::string* whitespace_after_equals);
  private:
  const std::string& _internal_whitespace_after_equals() const;
  void _internal_set_whitespace_after_equals(const std::string& value);
  std::string* _internal_mutable_whitespace_after_equals();
  public:

  // optional string whitespace_after_delimiter = 5;
  bool has_whitespace_after_delimiter() const;
  private:
  bool _internal_has_whitespace_after_delimiter() const;
  public:
  void clear_whitespace_after_delimiter();
  const std::string& whitespace_after_delimiter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_whitespace_after_delimiter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_whitespace_after_delimiter();
  std::string* release_whitespace_after_delimiter();
  void set_allocated_whitespace_after_delimiter(std::string* whitespace_after_delimiter);
  private:
  const std::string& _internal_whitespace_after_delimiter() const;
  void _internal_set_whitespace_after_delimiter(const std::string& value);
  std::string* _internal_mutable_whitespace_after_delimiter();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.LetNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whitespace_after_let_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whitespace_after_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whitespace_after_equals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whitespace_after_delimiter_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class InNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.InNodeArchive) */ {
 public:
  inline InNodeArchive() : InNodeArchive(nullptr) {}
  ~InNodeArchive() override;
  explicit constexpr InNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InNodeArchive(const InNodeArchive& from);
  InNodeArchive(InNodeArchive&& from) noexcept
    : InNodeArchive() {
    *this = ::std::move(from);
  }

  inline InNodeArchive& operator=(const InNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InNodeArchive& operator=(InNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InNodeArchive* internal_default_instance() {
    return reinterpret_cast<const InNodeArchive*>(
               &_InNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(InNodeArchive& a, InNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InNodeArchive* New() const final {
    return CreateMaybeMessage<InNodeArchive>(nullptr);
  }

  InNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InNodeArchive& from);
  void MergeFrom(const InNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.InNodeArchive";
  }
  protected:
  explicit InNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.InNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::ExpressionNodeArchive* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class VariableNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.VariableNodeArchive) */ {
 public:
  inline VariableNodeArchive() : VariableNodeArchive(nullptr) {}
  ~VariableNodeArchive() override;
  explicit constexpr VariableNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableNodeArchive(const VariableNodeArchive& from);
  VariableNodeArchive(VariableNodeArchive&& from) noexcept
    : VariableNodeArchive() {
    *this = ::std::move(from);
  }

  inline VariableNodeArchive& operator=(const VariableNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableNodeArchive& operator=(VariableNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableNodeArchive* internal_default_instance() {
    return reinterpret_cast<const VariableNodeArchive*>(
               &_VariableNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(VariableNodeArchive& a, VariableNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableNodeArchive* New() const final {
    return CreateMaybeMessage<VariableNodeArchive>(nullptr);
  }

  VariableNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableNodeArchive& from);
  void MergeFrom(const VariableNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.VariableNodeArchive";
  }
  protected:
  explicit VariableNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kSuperFieldNumber = 1,
    kSymbolFieldNumber = 3,
  };
  // required string identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required .TST.ExpressionNodeArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::ExpressionNodeArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::ExpressionNodeArchive* release_super();
  ::TST::ExpressionNodeArchive* mutable_super();
  void set_allocated_super(::TST::ExpressionNodeArchive* super);
  private:
  const ::TST::ExpressionNodeArchive& _internal_super() const;
  ::TST::ExpressionNodeArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::ExpressionNodeArchive* super);
  ::TST::ExpressionNodeArchive* unsafe_arena_release_super();

  // required uint32 symbol = 3;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  ::PROTOBUF_NAMESPACE_ID::uint32 symbol() const;
  void set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_symbol() const;
  void _internal_set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.VariableNodeArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::TST::ExpressionNodeArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 symbol_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class LayoutHintArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.LayoutHintArchive) */ {
 public:
  inline LayoutHintArchive() : LayoutHintArchive(nullptr) {}
  ~LayoutHintArchive() override;
  explicit constexpr LayoutHintArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutHintArchive(const LayoutHintArchive& from);
  LayoutHintArchive(LayoutHintArchive&& from) noexcept
    : LayoutHintArchive() {
    *this = ::std::move(from);
  }

  inline LayoutHintArchive& operator=(const LayoutHintArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutHintArchive& operator=(LayoutHintArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutHintArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutHintArchive* internal_default_instance() {
    return reinterpret_cast<const LayoutHintArchive*>(
               &_LayoutHintArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(LayoutHintArchive& a, LayoutHintArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutHintArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutHintArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayoutHintArchive* New() const final {
    return CreateMaybeMessage<LayoutHintArchive>(nullptr);
  }

  LayoutHintArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayoutHintArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayoutHintArchive& from);
  void MergeFrom(const LayoutHintArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutHintArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.LayoutHintArchive";
  }
  protected:
  explicit LayoutHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellRangeFieldNumber = 2,
    kHintIDFieldNumber = 3,
    kMaximumSizeFieldNumber = 4,
    kEffectiveSizeFieldNumber = 7,
    kIsValidFieldNumber = 1,
    kHorizontalFieldNumber = 6,
    kPartitionPositionFieldNumber = 5,
    kPartitioningPassFieldNumber = 8,
  };
  // optional .TST.CellRange cellRange = 2;
  bool has_cellrange() const;
  private:
  bool _internal_has_cellrange() const;
  public:
  void clear_cellrange();
  const ::TST::CellRange& cellrange() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellRange* release_cellrange();
  ::TST::CellRange* mutable_cellrange();
  void set_allocated_cellrange(::TST::CellRange* cellrange);
  private:
  const ::TST::CellRange& _internal_cellrange() const;
  ::TST::CellRange* _internal_mutable_cellrange();
  public:
  void unsafe_arena_set_allocated_cellrange(
      ::TST::CellRange* cellrange);
  ::TST::CellRange* unsafe_arena_release_cellrange();

  // optional .TST.CellID hintID = 3;
  bool has_hintid() const;
  private:
  bool _internal_has_hintid() const;
  public:
  void clear_hintid();
  const ::TST::CellID& hintid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellID* release_hintid();
  ::TST::CellID* mutable_hintid();
  void set_allocated_hintid(::TST::CellID* hintid);
  private:
  const ::TST::CellID& _internal_hintid() const;
  ::TST::CellID* _internal_mutable_hintid();
  public:
  void unsafe_arena_set_allocated_hintid(
      ::TST::CellID* hintid);
  ::TST::CellID* unsafe_arena_release_hintid();

  // required .TSP.Size maximumSize = 4;
  bool has_maximumsize() const;
  private:
  bool _internal_has_maximumsize() const;
  public:
  void clear_maximumsize();
  const ::TSP::Size& maximumsize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_maximumsize();
  ::TSP::Size* mutable_maximumsize();
  void set_allocated_maximumsize(::TSP::Size* maximumsize);
  private:
  const ::TSP::Size& _internal_maximumsize() const;
  ::TSP::Size* _internal_mutable_maximumsize();
  public:
  void unsafe_arena_set_allocated_maximumsize(
      ::TSP::Size* maximumsize);
  ::TSP::Size* unsafe_arena_release_maximumsize();

  // optional .TSP.Size effectiveSize = 7;
  bool has_effectivesize() const;
  private:
  bool _internal_has_effectivesize() const;
  public:
  void clear_effectivesize();
  const ::TSP::Size& effectivesize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_effectivesize();
  ::TSP::Size* mutable_effectivesize();
  void set_allocated_effectivesize(::TSP::Size* effectivesize);
  private:
  const ::TSP::Size& _internal_effectivesize() const;
  ::TSP::Size* _internal_mutable_effectivesize();
  public:
  void unsafe_arena_set_allocated_effectivesize(
      ::TSP::Size* effectivesize);
  ::TSP::Size* unsafe_arena_release_effectivesize();

  // required bool isValid = 1;
  bool has_isvalid() const;
  private:
  bool _internal_has_isvalid() const;
  public:
  void clear_isvalid();
  bool isvalid() const;
  void set_isvalid(bool value);
  private:
  bool _internal_isvalid() const;
  void _internal_set_isvalid(bool value);
  public:

  // required bool horizontal = 6;
  bool has_horizontal() const;
  private:
  bool _internal_has_horizontal() const;
  public:
  void clear_horizontal();
  bool horizontal() const;
  void set_horizontal(bool value);
  private:
  bool _internal_horizontal() const;
  void _internal_set_horizontal(bool value);
  public:

  // required uint32 partitionPosition = 5;
  bool has_partitionposition() const;
  private:
  bool _internal_has_partitionposition() const;
  public:
  void clear_partitionposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 partitionposition() const;
  void set_partitionposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_partitionposition() const;
  void _internal_set_partitionposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 partitioningPass = 8;
  bool has_partitioningpass() const;
  private:
  bool _internal_has_partitioningpass() const;
  public:
  void clear_partitioningpass();
  ::PROTOBUF_NAMESPACE_ID::uint32 partitioningpass() const;
  void set_partitioningpass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_partitioningpass() const;
  void _internal_set_partitioningpass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.LayoutHintArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::CellRange* cellrange_;
  ::TST::CellID* hintid_;
  ::TSP::Size* maximumsize_;
  ::TSP::Size* effectivesize_;
  bool isvalid_;
  bool horizontal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 partitionposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 partitioningpass_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CompletionTokenAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CompletionTokenAttachmentArchive) */ {
 public:
  inline CompletionTokenAttachmentArchive() : CompletionTokenAttachmentArchive(nullptr) {}
  ~CompletionTokenAttachmentArchive() override;
  explicit constexpr CompletionTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompletionTokenAttachmentArchive(const CompletionTokenAttachmentArchive& from);
  CompletionTokenAttachmentArchive(CompletionTokenAttachmentArchive&& from) noexcept
    : CompletionTokenAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline CompletionTokenAttachmentArchive& operator=(const CompletionTokenAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompletionTokenAttachmentArchive& operator=(CompletionTokenAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompletionTokenAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompletionTokenAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const CompletionTokenAttachmentArchive*>(
               &_CompletionTokenAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CompletionTokenAttachmentArchive& a, CompletionTokenAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CompletionTokenAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompletionTokenAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompletionTokenAttachmentArchive* New() const final {
    return CreateMaybeMessage<CompletionTokenAttachmentArchive>(nullptr);
  }

  CompletionTokenAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompletionTokenAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompletionTokenAttachmentArchive& from);
  void MergeFrom(const CompletionTokenAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompletionTokenAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CompletionTokenAttachmentArchive";
  }
  protected:
  explicit CompletionTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletionTextFieldNumber = 2,
    kSuperFieldNumber = 1,
    kCaretPositionFieldNumber = 3,
    kPrefixStartFieldNumber = 4,
  };
  // optional string completionText = 2;
  bool has_completiontext() const;
  private:
  bool _internal_has_completiontext() const;
  public:
  void clear_completiontext();
  const std::string& completiontext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_completiontext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_completiontext();
  std::string* release_completiontext();
  void set_allocated_completiontext(std::string* completiontext);
  private:
  const std::string& _internal_completiontext() const;
  void _internal_set_completiontext(const std::string& value);
  std::string* _internal_mutable_completiontext();
  public:

  // required .TST.TokenAttachmentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TST::TokenAttachmentArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::TokenAttachmentArchive* release_super();
  ::TST::TokenAttachmentArchive* mutable_super();
  void set_allocated_super(::TST::TokenAttachmentArchive* super);
  private:
  const ::TST::TokenAttachmentArchive& _internal_super() const;
  ::TST::TokenAttachmentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TST::TokenAttachmentArchive* super);
  ::TST::TokenAttachmentArchive* unsafe_arena_release_super();

  // optional uint32 caretPosition = 3;
  bool has_caretposition() const;
  private:
  bool _internal_has_caretposition() const;
  public:
  void clear_caretposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 caretposition() const;
  void set_caretposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_caretposition() const;
  void _internal_set_caretposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prefixStart = 4;
  bool has_prefixstart() const;
  private:
  bool _internal_has_prefixstart() const;
  public:
  void clear_prefixstart();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixstart() const;
  void set_prefixstart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixstart() const;
  void _internal_set_prefixstart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CompletionTokenAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr completiontext_;
  ::TST::TokenAttachmentArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 caretposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixstart_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HiddenStateFormulaOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HiddenStateFormulaOwnerArchive) */ {
 public:
  inline HiddenStateFormulaOwnerArchive() : HiddenStateFormulaOwnerArchive(nullptr) {}
  ~HiddenStateFormulaOwnerArchive() override;
  explicit constexpr HiddenStateFormulaOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiddenStateFormulaOwnerArchive(const HiddenStateFormulaOwnerArchive& from);
  HiddenStateFormulaOwnerArchive(HiddenStateFormulaOwnerArchive&& from) noexcept
    : HiddenStateFormulaOwnerArchive() {
    *this = ::std::move(from);
  }

  inline HiddenStateFormulaOwnerArchive& operator=(const HiddenStateFormulaOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiddenStateFormulaOwnerArchive& operator=(HiddenStateFormulaOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiddenStateFormulaOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiddenStateFormulaOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const HiddenStateFormulaOwnerArchive*>(
               &_HiddenStateFormulaOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(HiddenStateFormulaOwnerArchive& a, HiddenStateFormulaOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HiddenStateFormulaOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiddenStateFormulaOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HiddenStateFormulaOwnerArchive* New() const final {
    return CreateMaybeMessage<HiddenStateFormulaOwnerArchive>(nullptr);
  }

  HiddenStateFormulaOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HiddenStateFormulaOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HiddenStateFormulaOwnerArchive& from);
  void MergeFrom(const HiddenStateFormulaOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiddenStateFormulaOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HiddenStateFormulaOwnerArchive";
  }
  protected:
  explicit HiddenStateFormulaOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdValueFieldNumber = 2,
    kOwnerIdFieldNumber = 1,
    kNeedsToUpdateFilterSetForImportFieldNumber = 3,
  };
  // repeated .TSCE.CellValueArchive threshold_value = 2;
  int threshold_value_size() const;
  private:
  int _internal_threshold_value_size() const;
  public:
  void clear_threshold_value();
  ::TSCE::CellValueArchive* mutable_threshold_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
      mutable_threshold_value();
  private:
  const ::TSCE::CellValueArchive& _internal_threshold_value(int index) const;
  ::TSCE::CellValueArchive* _internal_add_threshold_value();
  public:
  const ::TSCE::CellValueArchive& threshold_value(int index) const;
  ::TSCE::CellValueArchive* add_threshold_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
      threshold_value() const;

  // optional .TSP.CFUUIDArchive owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSP::CFUUIDArchive& owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_owner_id();
  ::TSP::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSP::CFUUIDArchive* owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_owner_id();

  // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
  bool has_needs_to_update_filter_set_for_import() const;
  private:
  bool _internal_has_needs_to_update_filter_set_for_import() const;
  public:
  void clear_needs_to_update_filter_set_for_import();
  bool needs_to_update_filter_set_for_import() const;
  void set_needs_to_update_filter_set_for_import(bool value);
  private:
  bool _internal_needs_to_update_filter_set_for_import() const;
  void _internal_set_needs_to_update_filter_set_for_import(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HiddenStateFormulaOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive > threshold_value_;
  ::TSP::CFUUIDArchive* owner_id_;
  bool needs_to_update_filter_set_for_import_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaStoreArchive_FormulaStorePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaStoreArchive.FormulaStorePair) */ {
 public:
  inline FormulaStoreArchive_FormulaStorePair() : FormulaStoreArchive_FormulaStorePair(nullptr) {}
  ~FormulaStoreArchive_FormulaStorePair() override;
  explicit constexpr FormulaStoreArchive_FormulaStorePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaStoreArchive_FormulaStorePair(const FormulaStoreArchive_FormulaStorePair& from);
  FormulaStoreArchive_FormulaStorePair(FormulaStoreArchive_FormulaStorePair&& from) noexcept
    : FormulaStoreArchive_FormulaStorePair() {
    *this = ::std::move(from);
  }

  inline FormulaStoreArchive_FormulaStorePair& operator=(const FormulaStoreArchive_FormulaStorePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaStoreArchive_FormulaStorePair& operator=(FormulaStoreArchive_FormulaStorePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaStoreArchive_FormulaStorePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaStoreArchive_FormulaStorePair* internal_default_instance() {
    return reinterpret_cast<const FormulaStoreArchive_FormulaStorePair*>(
               &_FormulaStoreArchive_FormulaStorePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(FormulaStoreArchive_FormulaStorePair& a, FormulaStoreArchive_FormulaStorePair& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaStoreArchive_FormulaStorePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaStoreArchive_FormulaStorePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaStoreArchive_FormulaStorePair* New() const final {
    return CreateMaybeMessage<FormulaStoreArchive_FormulaStorePair>(nullptr);
  }

  FormulaStoreArchive_FormulaStorePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaStoreArchive_FormulaStorePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaStoreArchive_FormulaStorePair& from);
  void MergeFrom(const FormulaStoreArchive_FormulaStorePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaStoreArchive_FormulaStorePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaStoreArchive.FormulaStorePair";
  }
  protected:
  explicit FormulaStoreArchive_FormulaStorePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 2,
    kFormulaIndexFieldNumber = 1,
  };
  // required .TSCE.FormulaArchive formula = 2;
  bool has_formula() const;
  private:
  bool _internal_has_formula() const;
  public:
  void clear_formula();
  const ::TSCE::FormulaArchive& formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FormulaArchive* release_formula();
  ::TSCE::FormulaArchive* mutable_formula();
  void set_allocated_formula(::TSCE::FormulaArchive* formula);
  private:
  const ::TSCE::FormulaArchive& _internal_formula() const;
  ::TSCE::FormulaArchive* _internal_mutable_formula();
  public:
  void unsafe_arena_set_allocated_formula(
      ::TSCE::FormulaArchive* formula);
  ::TSCE::FormulaArchive* unsafe_arena_release_formula();

  // required uint32 formula_index = 1;
  bool has_formula_index() const;
  private:
  bool _internal_has_formula_index() const;
  public:
  void clear_formula_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_index() const;
  void set_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_formula_index() const;
  void _internal_set_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaStoreArchive.FormulaStorePair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::FormulaArchive* formula_;
  ::PROTOBUF_NAMESPACE_ID::uint32 formula_index_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaStoreArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaStoreArchive) */ {
 public:
  inline FormulaStoreArchive() : FormulaStoreArchive(nullptr) {}
  ~FormulaStoreArchive() override;
  explicit constexpr FormulaStoreArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaStoreArchive(const FormulaStoreArchive& from);
  FormulaStoreArchive(FormulaStoreArchive&& from) noexcept
    : FormulaStoreArchive() {
    *this = ::std::move(from);
  }

  inline FormulaStoreArchive& operator=(const FormulaStoreArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaStoreArchive& operator=(FormulaStoreArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaStoreArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaStoreArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaStoreArchive*>(
               &_FormulaStoreArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(FormulaStoreArchive& a, FormulaStoreArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaStoreArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaStoreArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaStoreArchive* New() const final {
    return CreateMaybeMessage<FormulaStoreArchive>(nullptr);
  }

  FormulaStoreArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaStoreArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaStoreArchive& from);
  void MergeFrom(const FormulaStoreArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaStoreArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaStoreArchive";
  }
  protected:
  explicit FormulaStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FormulaStoreArchive_FormulaStorePair FormulaStorePair;

  // accessors -------------------------------------------------------

  enum : int {
    kFormulasFieldNumber = 3,
    kNextFormulaIndexFieldNumber = 2,
  };
  // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
  int formulas_size() const;
  private:
  int _internal_formulas_size() const;
  public:
  void clear_formulas();
  ::TST::FormulaStoreArchive_FormulaStorePair* mutable_formulas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FormulaStoreArchive_FormulaStorePair >*
      mutable_formulas();
  private:
  const ::TST::FormulaStoreArchive_FormulaStorePair& _internal_formulas(int index) const;
  ::TST::FormulaStoreArchive_FormulaStorePair* _internal_add_formulas();
  public:
  const ::TST::FormulaStoreArchive_FormulaStorePair& formulas(int index) const;
  ::TST::FormulaStoreArchive_FormulaStorePair* add_formulas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FormulaStoreArchive_FormulaStorePair >&
      formulas() const;

  // required uint32 next_formula_index = 2;
  bool has_next_formula_index() const;
  private:
  bool _internal_has_next_formula_index() const;
  public:
  void clear_next_formula_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 next_formula_index() const;
  void set_next_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_next_formula_index() const;
  void _internal_set_next_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaStoreArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FormulaStoreArchive_FormulaStorePair > formulas_;
  ::PROTOBUF_NAMESPACE_ID::uint32 next_formula_index_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeOperationArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.MergeOperationArchive) */ {
 public:
  inline MergeOperationArchive() : MergeOperationArchive(nullptr) {}
  ~MergeOperationArchive() override;
  explicit constexpr MergeOperationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeOperationArchive(const MergeOperationArchive& from);
  MergeOperationArchive(MergeOperationArchive&& from) noexcept
    : MergeOperationArchive() {
    *this = ::std::move(from);
  }

  inline MergeOperationArchive& operator=(const MergeOperationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeOperationArchive& operator=(MergeOperationArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeOperationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeOperationArchive* internal_default_instance() {
    return reinterpret_cast<const MergeOperationArchive*>(
               &_MergeOperationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(MergeOperationArchive& a, MergeOperationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeOperationArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeOperationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeOperationArchive* New() const final {
    return CreateMaybeMessage<MergeOperationArchive>(nullptr);
  }

  MergeOperationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeOperationArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeOperationArchive& from);
  void MergeFrom(const MergeOperationArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeOperationArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.MergeOperationArchive";
  }
  protected:
  explicit MergeOperationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMergeRangesFieldNumber = 2,
    kMergeFormulasFieldNumber = 3,
    kMergeFormulaIndexesFieldNumber = 4,
    kMergeTypeFieldNumber = 1,
  };
  // repeated .TSP.UUIDRectArchive merge_ranges = 2;
  int merge_ranges_size() const;
  private:
  int _internal_merge_ranges_size() const;
  public:
  void clear_merge_ranges();
  ::TSP::UUIDRectArchive* mutable_merge_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
      mutable_merge_ranges();
  private:
  const ::TSP::UUIDRectArchive& _internal_merge_ranges(int index) const;
  ::TSP::UUIDRectArchive* _internal_add_merge_ranges();
  public:
  const ::TSP::UUIDRectArchive& merge_ranges(int index) const;
  ::TSP::UUIDRectArchive* add_merge_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
      merge_ranges() const;

  // repeated .TSCE.FormulaArchive merge_formulas = 3;
  int merge_formulas_size() const;
  private:
  int _internal_merge_formulas_size() const;
  public:
  void clear_merge_formulas();
  ::TSCE::FormulaArchive* mutable_merge_formulas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
      mutable_merge_formulas();
  private:
  const ::TSCE::FormulaArchive& _internal_merge_formulas(int index) const;
  ::TSCE::FormulaArchive* _internal_add_merge_formulas();
  public:
  const ::TSCE::FormulaArchive& merge_formulas(int index) const;
  ::TSCE::FormulaArchive* add_merge_formulas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
      merge_formulas() const;

  // repeated uint32 merge_formula_indexes = 4;
  int merge_formula_indexes_size() const;
  private:
  int _internal_merge_formula_indexes_size() const;
  public:
  void clear_merge_formula_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_merge_formula_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_merge_formula_indexes() const;
  void _internal_add_merge_formula_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_merge_formula_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 merge_formula_indexes(int index) const;
  void set_merge_formula_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_merge_formula_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      merge_formula_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_merge_formula_indexes();

  // required .TST.MergeActionArchive merge_type = 1;
  bool has_merge_type() const;
  private:
  bool _internal_has_merge_type() const;
  public:
  void clear_merge_type();
  ::TST::MergeActionArchive merge_type() const;
  void set_merge_type(::TST::MergeActionArchive value);
  private:
  ::TST::MergeActionArchive _internal_merge_type() const;
  void _internal_set_merge_type(::TST::MergeActionArchive value);
  public:

  // @@protoc_insertion_point(class_scope:TST.MergeOperationArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive > merge_ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive > merge_formulas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > merge_formula_indexes_;
  int merge_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class MergeOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.MergeOwnerArchive) */ {
 public:
  inline MergeOwnerArchive() : MergeOwnerArchive(nullptr) {}
  ~MergeOwnerArchive() override;
  explicit constexpr MergeOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeOwnerArchive(const MergeOwnerArchive& from);
  MergeOwnerArchive(MergeOwnerArchive&& from) noexcept
    : MergeOwnerArchive() {
    *this = ::std::move(from);
  }

  inline MergeOwnerArchive& operator=(const MergeOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeOwnerArchive& operator=(MergeOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const MergeOwnerArchive*>(
               &_MergeOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(MergeOwnerArchive& a, MergeOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeOwnerArchive* New() const final {
    return CreateMaybeMessage<MergeOwnerArchive>(nullptr);
  }

  MergeOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeOwnerArchive& from);
  void MergeFrom(const MergeOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.MergeOwnerArchive";
  }
  protected:
  explicit MergeOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
    kFormulaStoreFieldNumber = 2,
  };
  // required .TSP.CFUUIDArchive owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSP::CFUUIDArchive& owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_owner_id();
  ::TSP::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSP::CFUUIDArchive* owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_owner_id();

  // optional .TST.FormulaStoreArchive formula_store = 2;
  bool has_formula_store() const;
  private:
  bool _internal_has_formula_store() const;
  public:
  void clear_formula_store();
  const ::TST::FormulaStoreArchive& formula_store() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::FormulaStoreArchive* release_formula_store();
  ::TST::FormulaStoreArchive* mutable_formula_store();
  void set_allocated_formula_store(::TST::FormulaStoreArchive* formula_store);
  private:
  const ::TST::FormulaStoreArchive& _internal_formula_store() const;
  ::TST::FormulaStoreArchive* _internal_mutable_formula_store();
  public:
  void unsafe_arena_set_allocated_formula_store(
      ::TST::FormulaStoreArchive* formula_store);
  ::TST::FormulaStoreArchive* unsafe_arena_release_formula_store();

  // @@protoc_insertion_point(class_scope:TST.MergeOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::CFUUIDArchive* owner_id_;
  ::TST::FormulaStoreArchive* formula_store_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class PencilAnnotationArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.PencilAnnotationArchive) */ {
 public:
  inline PencilAnnotationArchive() : PencilAnnotationArchive(nullptr) {}
  ~PencilAnnotationArchive() override;
  explicit constexpr PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PencilAnnotationArchive(const PencilAnnotationArchive& from);
  PencilAnnotationArchive(PencilAnnotationArchive&& from) noexcept
    : PencilAnnotationArchive() {
    *this = ::std::move(from);
  }

  inline PencilAnnotationArchive& operator=(const PencilAnnotationArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PencilAnnotationArchive& operator=(PencilAnnotationArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PencilAnnotationArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PencilAnnotationArchive* internal_default_instance() {
    return reinterpret_cast<const PencilAnnotationArchive*>(
               &_PencilAnnotationArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(PencilAnnotationArchive& a, PencilAnnotationArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PencilAnnotationArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PencilAnnotationArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PencilAnnotationArchive* New() const final {
    return CreateMaybeMessage<PencilAnnotationArchive>(nullptr);
  }

  PencilAnnotationArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PencilAnnotationArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PencilAnnotationArchive& from);
  void MergeFrom(const PencilAnnotationArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PencilAnnotationArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.PencilAnnotationArchive";
  }
  protected:
  explicit PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoFieldNumber = 1,
    kPencilAnnotationStorageFieldNumber = 2,
  };
  // optional .TSP.Reference table_info = 1;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // optional .TSP.Reference pencil_annotation_storage = 2;
  bool has_pencil_annotation_storage() const;
  private:
  bool _internal_has_pencil_annotation_storage() const;
  public:
  void clear_pencil_annotation_storage();
  const ::TSP::Reference& pencil_annotation_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_pencil_annotation_storage();
  ::TSP::Reference* mutable_pencil_annotation_storage();
  void set_allocated_pencil_annotation_storage(::TSP::Reference* pencil_annotation_storage);
  private:
  const ::TSP::Reference& _internal_pencil_annotation_storage() const;
  ::TSP::Reference* _internal_mutable_pencil_annotation_storage();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_storage(
      ::TSP::Reference* pencil_annotation_storage);
  ::TSP::Reference* unsafe_arena_release_pencil_annotation_storage();

  // @@protoc_insertion_point(class_scope:TST.PencilAnnotationArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* table_info_;
  ::TSP::Reference* pencil_annotation_storage_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class PencilAnnotationOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.PencilAnnotationOwnerArchive) */ {
 public:
  inline PencilAnnotationOwnerArchive() : PencilAnnotationOwnerArchive(nullptr) {}
  ~PencilAnnotationOwnerArchive() override;
  explicit constexpr PencilAnnotationOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PencilAnnotationOwnerArchive(const PencilAnnotationOwnerArchive& from);
  PencilAnnotationOwnerArchive(PencilAnnotationOwnerArchive&& from) noexcept
    : PencilAnnotationOwnerArchive() {
    *this = ::std::move(from);
  }

  inline PencilAnnotationOwnerArchive& operator=(const PencilAnnotationOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PencilAnnotationOwnerArchive& operator=(PencilAnnotationOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PencilAnnotationOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PencilAnnotationOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const PencilAnnotationOwnerArchive*>(
               &_PencilAnnotationOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(PencilAnnotationOwnerArchive& a, PencilAnnotationOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PencilAnnotationOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PencilAnnotationOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PencilAnnotationOwnerArchive* New() const final {
    return CreateMaybeMessage<PencilAnnotationOwnerArchive>(nullptr);
  }

  PencilAnnotationOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PencilAnnotationOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PencilAnnotationOwnerArchive& from);
  void MergeFrom(const PencilAnnotationOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PencilAnnotationOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.PencilAnnotationOwnerArchive";
  }
  protected:
  explicit PencilAnnotationOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kOwnerIdFieldNumber = 1,
    kFormulaStoreFieldNumber = 2,
  };
  // repeated .TSP.Reference annotations = 3;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  ::TSP::Reference* mutable_annotations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_annotations();
  private:
  const ::TSP::Reference& _internal_annotations(int index) const;
  ::TSP::Reference* _internal_add_annotations();
  public:
  const ::TSP::Reference& annotations(int index) const;
  ::TSP::Reference* add_annotations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      annotations() const;

  // required .TSP.CFUUIDArchive owner_id = 1;
  bool has_owner_id() const;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const ::TSP::CFUUIDArchive& owner_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::CFUUIDArchive* release_owner_id();
  ::TSP::CFUUIDArchive* mutable_owner_id();
  void set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id);
  private:
  const ::TSP::CFUUIDArchive& _internal_owner_id() const;
  ::TSP::CFUUIDArchive* _internal_mutable_owner_id();
  public:
  void unsafe_arena_set_allocated_owner_id(
      ::TSP::CFUUIDArchive* owner_id);
  ::TSP::CFUUIDArchive* unsafe_arena_release_owner_id();

  // optional .TST.FormulaStoreArchive formula_store = 2;
  bool has_formula_store() const;
  private:
  bool _internal_has_formula_store() const;
  public:
  void clear_formula_store();
  const ::TST::FormulaStoreArchive& formula_store() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::FormulaStoreArchive* release_formula_store();
  ::TST::FormulaStoreArchive* mutable_formula_store();
  void set_allocated_formula_store(::TST::FormulaStoreArchive* formula_store);
  private:
  const ::TST::FormulaStoreArchive& _internal_formula_store() const;
  ::TST::FormulaStoreArchive* _internal_mutable_formula_store();
  public:
  void unsafe_arena_set_allocated_formula_store(
      ::TST::FormulaStoreArchive* formula_store);
  ::TST::FormulaStoreArchive* unsafe_arena_release_formula_store();

  // @@protoc_insertion_point(class_scope:TST.PencilAnnotationOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > annotations_;
  ::TSP::CFUUIDArchive* owner_id_;
  ::TST::FormulaStoreArchive* formula_store_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class AccumulatorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.AccumulatorArchive) */ {
 public:
  inline AccumulatorArchive() : AccumulatorArchive(nullptr) {}
  ~AccumulatorArchive() override;
  explicit constexpr AccumulatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccumulatorArchive(const AccumulatorArchive& from);
  AccumulatorArchive(AccumulatorArchive&& from) noexcept
    : AccumulatorArchive() {
    *this = ::std::move(from);
  }

  inline AccumulatorArchive& operator=(const AccumulatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccumulatorArchive& operator=(AccumulatorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccumulatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccumulatorArchive* internal_default_instance() {
    return reinterpret_cast<const AccumulatorArchive*>(
               &_AccumulatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(AccumulatorArchive& a, AccumulatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AccumulatorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccumulatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccumulatorArchive* New() const final {
    return CreateMaybeMessage<AccumulatorArchive>(nullptr);
  }

  AccumulatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccumulatorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccumulatorArchive& from);
  void MergeFrom(const AccumulatorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccumulatorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.AccumulatorArchive";
  }
  protected:
  explicit AccumulatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinValueFieldNumber = 6,
    kMaxValueFieldNumber = 7,
    kNumberTotalValueFieldNumber = 8,
    kFirstDateSeenFieldNumber = 9,
    kBoolCountFieldNumber = 1,
    kNumberCountFieldNumber = 2,
    kDateCountFieldNumber = 3,
    kDurationCountFieldNumber = 4,
    kStringCountFieldNumber = 5,
    kBoolTrueCountFieldNumber = 12,
    kTotalSecsSinceRefDateFieldNumber = 10,
    kSecsToAddFieldNumber = 11,
    kErrorCountFieldNumber = 13,
    kIsCircularRefFieldNumber = 14,
  };
  // required .TSCE.CellValueArchive min_value = 6;
  bool has_min_value() const;
  private:
  bool _internal_has_min_value() const;
  public:
  void clear_min_value();
  const ::TSCE::CellValueArchive& min_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_min_value();
  ::TSCE::CellValueArchive* mutable_min_value();
  void set_allocated_min_value(::TSCE::CellValueArchive* min_value);
  private:
  const ::TSCE::CellValueArchive& _internal_min_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_min_value();
  public:
  void unsafe_arena_set_allocated_min_value(
      ::TSCE::CellValueArchive* min_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_min_value();

  // required .TSCE.CellValueArchive max_value = 7;
  bool has_max_value() const;
  private:
  bool _internal_has_max_value() const;
  public:
  void clear_max_value();
  const ::TSCE::CellValueArchive& max_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_max_value();
  ::TSCE::CellValueArchive* mutable_max_value();
  void set_allocated_max_value(::TSCE::CellValueArchive* max_value);
  private:
  const ::TSCE::CellValueArchive& _internal_max_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_max_value();
  public:
  void unsafe_arena_set_allocated_max_value(
      ::TSCE::CellValueArchive* max_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_max_value();

  // required .TSCE.CellValueArchive number_total_value = 8;
  bool has_number_total_value() const;
  private:
  bool _internal_has_number_total_value() const;
  public:
  void clear_number_total_value();
  const ::TSCE::CellValueArchive& number_total_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_number_total_value();
  ::TSCE::CellValueArchive* mutable_number_total_value();
  void set_allocated_number_total_value(::TSCE::CellValueArchive* number_total_value);
  private:
  const ::TSCE::CellValueArchive& _internal_number_total_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_number_total_value();
  public:
  void unsafe_arena_set_allocated_number_total_value(
      ::TSCE::CellValueArchive* number_total_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_number_total_value();

  // optional .TSCE.CellValueArchive first_date_seen = 9;
  bool has_first_date_seen() const;
  private:
  bool _internal_has_first_date_seen() const;
  public:
  void clear_first_date_seen();
  const ::TSCE::CellValueArchive& first_date_seen() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_first_date_seen();
  ::TSCE::CellValueArchive* mutable_first_date_seen();
  void set_allocated_first_date_seen(::TSCE::CellValueArchive* first_date_seen);
  private:
  const ::TSCE::CellValueArchive& _internal_first_date_seen() const;
  ::TSCE::CellValueArchive* _internal_mutable_first_date_seen();
  public:
  void unsafe_arena_set_allocated_first_date_seen(
      ::TSCE::CellValueArchive* first_date_seen);
  ::TSCE::CellValueArchive* unsafe_arena_release_first_date_seen();

  // optional uint32 bool_count = 1;
  bool has_bool_count() const;
  private:
  bool _internal_has_bool_count() const;
  public:
  void clear_bool_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 bool_count() const;
  void set_bool_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bool_count() const;
  void _internal_set_bool_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_count = 2;
  bool has_number_count() const;
  private:
  bool _internal_has_number_count() const;
  public:
  void clear_number_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_count() const;
  void set_number_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_count() const;
  void _internal_set_number_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 date_count = 3;
  bool has_date_count() const;
  private:
  bool _internal_has_date_count() const;
  public:
  void clear_date_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 date_count() const;
  void set_date_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_date_count() const;
  void _internal_set_date_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration_count = 4;
  bool has_duration_count() const;
  private:
  bool _internal_has_duration_count() const;
  public:
  void clear_duration_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_count() const;
  void set_duration_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_count() const;
  void _internal_set_duration_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 string_count = 5;
  bool has_string_count() const;
  private:
  bool _internal_has_string_count() const;
  public:
  void clear_string_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 string_count() const;
  void set_string_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_string_count() const;
  void _internal_set_string_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bool_true_count = 12;
  bool has_bool_true_count() const;
  private:
  bool _internal_has_bool_true_count() const;
  public:
  void clear_bool_true_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 bool_true_count() const;
  void set_bool_true_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bool_true_count() const;
  void _internal_set_bool_true_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double total_secs_since_ref_date = 10;
  bool has_total_secs_since_ref_date() const;
  private:
  bool _internal_has_total_secs_since_ref_date() const;
  public:
  void clear_total_secs_since_ref_date();
  double total_secs_since_ref_date() const;
  void set_total_secs_since_ref_date(double value);
  private:
  double _internal_total_secs_since_ref_date() const;
  void _internal_set_total_secs_since_ref_date(double value);
  public:

  // optional double secs_to_add = 11;
  bool has_secs_to_add() const;
  private:
  bool _internal_has_secs_to_add() const;
  public:
  void clear_secs_to_add();
  double secs_to_add() const;
  void set_secs_to_add(double value);
  private:
  double _internal_secs_to_add() const;
  void _internal_set_secs_to_add(double value);
  public:

  // optional uint32 error_count = 13;
  bool has_error_count() const;
  private:
  bool _internal_has_error_count() const;
  public:
  void clear_error_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 error_count() const;
  void set_error_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error_count() const;
  void _internal_set_error_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_circular_ref = 14;
  bool has_is_circular_ref() const;
  private:
  bool _internal_has_is_circular_ref() const;
  public:
  void clear_is_circular_ref();
  bool is_circular_ref() const;
  void set_is_circular_ref(bool value);
  private:
  bool _internal_is_circular_ref() const;
  void _internal_set_is_circular_ref(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.AccumulatorArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCE::CellValueArchive* min_value_;
  ::TSCE::CellValueArchive* max_value_;
  ::TSCE::CellValueArchive* number_total_value_;
  ::TSCE::CellValueArchive* first_date_seen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bool_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 date_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 string_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bool_true_count_;
  double total_secs_since_ref_date_;
  double secs_to_add_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_count_;
  bool is_circular_ref_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupColumnArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.GroupColumnArchive) */ {
 public:
  inline GroupColumnArchive() : GroupColumnArchive(nullptr) {}
  ~GroupColumnArchive() override;
  explicit constexpr GroupColumnArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupColumnArchive(const GroupColumnArchive& from);
  GroupColumnArchive(GroupColumnArchive&& from) noexcept
    : GroupColumnArchive() {
    *this = ::std::move(from);
  }

  inline GroupColumnArchive& operator=(const GroupColumnArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupColumnArchive& operator=(GroupColumnArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupColumnArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupColumnArchive* internal_default_instance() {
    return reinterpret_cast<const GroupColumnArchive*>(
               &_GroupColumnArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(GroupColumnArchive& a, GroupColumnArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupColumnArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupColumnArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupColumnArchive* New() const final {
    return CreateMaybeMessage<GroupColumnArchive>(nullptr);
  }

  GroupColumnArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupColumnArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupColumnArchive& from);
  void MergeFrom(const GroupColumnArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupColumnArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.GroupColumnArchive";
  }
  protected:
  explicit GroupColumnArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidFieldNumber = 1,
    kGroupingFunctorFieldNumber = 3,
    kGroupingColumnUidFieldNumber = 4,
    kGroupingTypeFieldNumber = 2,
  };
  // required .TSP.UUID column_uid = 1;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // optional .TSCE.FunctorArchive grouping_functor = 3;
  bool has_grouping_functor() const;
  private:
  bool _internal_has_grouping_functor() const;
  public:
  void clear_grouping_functor();
  const ::TSCE::FunctorArchive& grouping_functor() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::FunctorArchive* release_grouping_functor();
  ::TSCE::FunctorArchive* mutable_grouping_functor();
  void set_allocated_grouping_functor(::TSCE::FunctorArchive* grouping_functor);
  private:
  const ::TSCE::FunctorArchive& _internal_grouping_functor() const;
  ::TSCE::FunctorArchive* _internal_mutable_grouping_functor();
  public:
  void unsafe_arena_set_allocated_grouping_functor(
      ::TSCE::FunctorArchive* grouping_functor);
  ::TSCE::FunctorArchive* unsafe_arena_release_grouping_functor();

  // optional .TSP.UUID grouping_column_uid = 4;
  bool has_grouping_column_uid() const;
  private:
  bool _internal_has_grouping_column_uid() const;
  public:
  void clear_grouping_column_uid();
  const ::TSP::UUID& grouping_column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_grouping_column_uid();
  ::TSP::UUID* mutable_grouping_column_uid();
  void set_allocated_grouping_column_uid(::TSP::UUID* grouping_column_uid);
  private:
  const ::TSP::UUID& _internal_grouping_column_uid() const;
  ::TSP::UUID* _internal_mutable_grouping_column_uid();
  public:
  void unsafe_arena_set_allocated_grouping_column_uid(
      ::TSP::UUID* grouping_column_uid);
  ::TSP::UUID* unsafe_arena_release_grouping_column_uid();

  // required .TST.GroupingType grouping_type = 2;
  bool has_grouping_type() const;
  private:
  bool _internal_has_grouping_type() const;
  public:
  void clear_grouping_type();
  ::TST::GroupingType grouping_type() const;
  void set_grouping_type(::TST::GroupingType value);
  private:
  ::TST::GroupingType _internal_grouping_type() const;
  void _internal_set_grouping_type(::TST::GroupingType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.GroupColumnArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* column_uid_;
  ::TSCE::FunctorArchive* grouping_functor_;
  ::TSP::UUID* grouping_column_uid_;
  int grouping_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupColumnListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.GroupColumnListArchive) */ {
 public:
  inline GroupColumnListArchive() : GroupColumnListArchive(nullptr) {}
  ~GroupColumnListArchive() override;
  explicit constexpr GroupColumnListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupColumnListArchive(const GroupColumnListArchive& from);
  GroupColumnListArchive(GroupColumnListArchive&& from) noexcept
    : GroupColumnListArchive() {
    *this = ::std::move(from);
  }

  inline GroupColumnListArchive& operator=(const GroupColumnListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupColumnListArchive& operator=(GroupColumnListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupColumnListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupColumnListArchive* internal_default_instance() {
    return reinterpret_cast<const GroupColumnListArchive*>(
               &_GroupColumnListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(GroupColumnListArchive& a, GroupColumnListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupColumnListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupColumnListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupColumnListArchive* New() const final {
    return CreateMaybeMessage<GroupColumnListArchive>(nullptr);
  }

  GroupColumnListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupColumnListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupColumnListArchive& from);
  void MergeFrom(const GroupColumnListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupColumnListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.GroupColumnListArchive";
  }
  protected:
  explicit GroupColumnListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupColumnFieldNumber = 1,
  };
  // repeated .TST.GroupColumnArchive group_column = 1;
  int group_column_size() const;
  private:
  int _internal_group_column_size() const;
  public:
  void clear_group_column();
  ::TST::GroupColumnArchive* mutable_group_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >*
      mutable_group_column();
  private:
  const ::TST::GroupColumnArchive& _internal_group_column(int index) const;
  ::TST::GroupColumnArchive* _internal_add_group_column();
  public:
  const ::TST::GroupColumnArchive& group_column(int index) const;
  ::TST::GroupColumnArchive* add_group_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >&
      group_column() const;

  // @@protoc_insertion_point(class_scope:TST.GroupColumnListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive > group_column_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnAggregateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ColumnAggregateArchive) */ {
 public:
  inline ColumnAggregateArchive() : ColumnAggregateArchive(nullptr) {}
  ~ColumnAggregateArchive() override;
  explicit constexpr ColumnAggregateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnAggregateArchive(const ColumnAggregateArchive& from);
  ColumnAggregateArchive(ColumnAggregateArchive&& from) noexcept
    : ColumnAggregateArchive() {
    *this = ::std::move(from);
  }

  inline ColumnAggregateArchive& operator=(const ColumnAggregateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnAggregateArchive& operator=(ColumnAggregateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnAggregateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnAggregateArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnAggregateArchive*>(
               &_ColumnAggregateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ColumnAggregateArchive& a, ColumnAggregateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnAggregateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnAggregateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnAggregateArchive* New() const final {
    return CreateMaybeMessage<ColumnAggregateArchive>(nullptr);
  }

  ColumnAggregateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnAggregateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnAggregateArchive& from);
  void MergeFrom(const ColumnAggregateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnAggregateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ColumnAggregateArchive";
  }
  protected:
  explicit ColumnAggregateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidFieldNumber = 1,
    kLevelFieldNumber = 2,
    kAggTypeFieldNumber = 3,
  };
  // required .TSP.UUID column_uid = 1;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // required uint32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .TST.AggregateType agg_type = 3;
  bool has_agg_type() const;
  private:
  bool _internal_has_agg_type() const;
  public:
  void clear_agg_type();
  ::TST::AggregateType agg_type() const;
  void set_agg_type(::TST::AggregateType value);
  private:
  ::TST::AggregateType _internal_agg_type() const;
  void _internal_set_agg_type(::TST::AggregateType value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ColumnAggregateArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* column_uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  int agg_type_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ColumnAggregateListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ColumnAggregateListArchive) */ {
 public:
  inline ColumnAggregateListArchive() : ColumnAggregateListArchive(nullptr) {}
  ~ColumnAggregateListArchive() override;
  explicit constexpr ColumnAggregateListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnAggregateListArchive(const ColumnAggregateListArchive& from);
  ColumnAggregateListArchive(ColumnAggregateListArchive&& from) noexcept
    : ColumnAggregateListArchive() {
    *this = ::std::move(from);
  }

  inline ColumnAggregateListArchive& operator=(const ColumnAggregateListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnAggregateListArchive& operator=(ColumnAggregateListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnAggregateListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnAggregateListArchive* internal_default_instance() {
    return reinterpret_cast<const ColumnAggregateListArchive*>(
               &_ColumnAggregateListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(ColumnAggregateListArchive& a, ColumnAggregateListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnAggregateListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnAggregateListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnAggregateListArchive* New() const final {
    return CreateMaybeMessage<ColumnAggregateListArchive>(nullptr);
  }

  ColumnAggregateListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnAggregateListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnAggregateListArchive& from);
  void MergeFrom(const ColumnAggregateListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnAggregateListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ColumnAggregateListArchive";
  }
  protected:
  explicit ColumnAggregateListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregatesFieldNumber = 1,
  };
  // repeated .TST.ColumnAggregateArchive aggregates = 1;
  int aggregates_size() const;
  private:
  int _internal_aggregates_size() const;
  public:
  void clear_aggregates();
  ::TST::ColumnAggregateArchive* mutable_aggregates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >*
      mutable_aggregates();
  private:
  const ::TST::ColumnAggregateArchive& _internal_aggregates(int index) const;
  ::TST::ColumnAggregateArchive* _internal_add_aggregates();
  public:
  const ::TST::ColumnAggregateArchive& aggregates(int index) const;
  ::TST::ColumnAggregateArchive* add_aggregates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >&
      aggregates() const;

  // @@protoc_insertion_point(class_scope:TST.ColumnAggregateListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive > aggregates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive_AggNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive_AggNodeArchive() : CategoryOwnerArchive_GroupByArchive_AggNodeArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive_AggNodeArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive_AggNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive_AggNodeArchive(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from);
  CategoryOwnerArchive_GroupByArchive_AggNodeArchive(CategoryOwnerArchive_GroupByArchive_AggNodeArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive_AggNodeArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive_AggNodeArchive& operator=(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive_AggNodeArchive& operator=(CategoryOwnerArchive_GroupByArchive_AggNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive_AggNodeArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive_AggNodeArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_AggNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CategoryOwnerArchive_GroupByArchive_AggNodeArchive& a, CategoryOwnerArchive_GroupByArchive_AggNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive_AggNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive_AggNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive_AggNodeArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_AggNodeArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive_AggNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_AggNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive_AggNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive_AggNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive_AggNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kFormulaCoordFieldNumber = 1,
    kAccumFieldNumber = 2,
  };
  // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive child = 3;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive >*
      mutable_child();
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& _internal_child(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* _internal_add_child();
  public:
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& child(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive >&
      child() const;

  // required .TSCE.CellCoordinateArchive formula_coord = 1;
  bool has_formula_coord() const;
  private:
  bool _internal_has_formula_coord() const;
  public:
  void clear_formula_coord();
  const ::TSCE::CellCoordinateArchive& formula_coord() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_formula_coord();
  ::TSCE::CellCoordinateArchive* mutable_formula_coord();
  void set_allocated_formula_coord(::TSCE::CellCoordinateArchive* formula_coord);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_formula_coord() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_formula_coord();
  public:
  void unsafe_arena_set_allocated_formula_coord(
      ::TSCE::CellCoordinateArchive* formula_coord);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_formula_coord();

  // optional .TST.AccumulatorArchive accum = 2;
  bool has_accum() const;
  private:
  bool _internal_has_accum() const;
  public:
  void clear_accum();
  const ::TST::AccumulatorArchive& accum() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::AccumulatorArchive* release_accum();
  ::TST::AccumulatorArchive* mutable_accum();
  void set_allocated_accum(::TST::AccumulatorArchive* accum);
  private:
  const ::TST::AccumulatorArchive& _internal_accum() const;
  ::TST::AccumulatorArchive* _internal_mutable_accum();
  public:
  void unsafe_arena_set_allocated_accum(
      ::TST::AccumulatorArchive* accum);
  ::TST::AccumulatorArchive* unsafe_arena_release_accum();

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive > child_;
  ::TSCE::CellCoordinateArchive* formula_coord_;
  ::TST::AccumulatorArchive* accum_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive() : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from);
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& operator=(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& operator=(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& a, CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .TSCE.CellValueArchive value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::TSCE::CellValueArchive* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
      mutable_value();
  private:
  const ::TSCE::CellValueArchive& _internal_value(int index) const;
  ::TSCE::CellValueArchive* _internal_add_value();
  public:
  const ::TSCE::CellValueArchive& value(int index) const;
  ::TSCE::CellValueArchive* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
      value() const;

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive() : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from);
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& operator=(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& operator=(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& a, CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowUidsFieldNumber = 1,
  };
  // repeated .TSP.UUID row_uids = 1;
  int row_uids_size() const;
  private:
  int _internal_row_uids_size() const;
  public:
  void clear_row_uids();
  ::TSP::UUID* mutable_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_uids();
  private:
  const ::TSP::UUID& _internal_row_uids(int index) const;
  ::TSP::UUID* _internal_add_row_uids();
  public:
  const ::TSP::UUID& row_uids(int index) const;
  ::TSP::UUID* add_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_uids() const;

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_uids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive() : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from);
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& operator=(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& operator=(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& a, CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive RowSetArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kFormatsFieldNumber = 2,
    kRowSetsFieldNumber = 3,
    kCellValueFieldNumber = 1,
  };
  // repeated .TSK.FormatStructArchive formats = 2;
  int formats_size() const;
  private:
  int _internal_formats_size() const;
  public:
  void clear_formats();
  ::TSK::FormatStructArchive* mutable_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormatStructArchive >*
      mutable_formats();
  private:
  const ::TSK::FormatStructArchive& _internal_formats(int index) const;
  ::TSK::FormatStructArchive* _internal_add_formats();
  public:
  const ::TSK::FormatStructArchive& formats(int index) const;
  ::TSK::FormatStructArchive* add_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormatStructArchive >&
      formats() const;

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
  int row_sets_size() const;
  private:
  int _internal_row_sets_size() const;
  public:
  void clear_row_sets();
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* mutable_row_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >*
      mutable_row_sets();
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& _internal_row_sets(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* _internal_add_row_sets();
  public:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& row_sets(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* add_row_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >&
      row_sets() const;

  // optional .TSCE.CellValueArchive cell_value = 1;
  bool has_cell_value() const;
  private:
  bool _internal_has_cell_value() const;
  public:
  void clear_cell_value();
  const ::TSCE::CellValueArchive& cell_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_cell_value();
  ::TSCE::CellValueArchive* mutable_cell_value();
  void set_allocated_cell_value(::TSCE::CellValueArchive* cell_value);
  private:
  const ::TSCE::CellValueArchive& _internal_cell_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_cell_value();
  public:
  void unsafe_arena_set_allocated_cell_value(
      ::TSCE::CellValueArchive* cell_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_cell_value();

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormatStructArchive > formats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive > row_sets_;
  ::TSCE::CellValueArchive* cell_value_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive_GroupNodeArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive() : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive_GroupNodeArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from);
  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive_GroupNodeArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& operator=(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& operator=(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& a, CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive_GroupNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive GroupValueTupleArchive;
  typedef CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive FormatManagerArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kRowUidFieldNumber = 4,
    kAggFormulaCoordsFieldNumber = 5,
    kGroupUidFieldNumber = 1,
    kGroupValueTupleFieldNumber = 2,
    kFormatManagerFieldNumber = 6,
    kGroupCellValueFieldNumber = 7,
  };
  // repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive child = 3;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive >*
      mutable_child();
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& _internal_child(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* _internal_add_child();
  public:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& child(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive >&
      child() const;

  // repeated .TSP.UUID row_uid = 4;
  int row_uid_size() const;
  private:
  int _internal_row_uid_size() const;
  public:
  void clear_row_uid();
  ::TSP::UUID* mutable_row_uid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_row_uid();
  private:
  const ::TSP::UUID& _internal_row_uid(int index) const;
  ::TSP::UUID* _internal_add_row_uid();
  public:
  const ::TSP::UUID& row_uid(int index) const;
  ::TSP::UUID* add_row_uid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      row_uid() const;

  // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
  int agg_formula_coords_size() const;
  private:
  int _internal_agg_formula_coords_size() const;
  public:
  void clear_agg_formula_coords();
  ::TSCE::CellCoordinateArchive* mutable_agg_formula_coords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
      mutable_agg_formula_coords();
  private:
  const ::TSCE::CellCoordinateArchive& _internal_agg_formula_coords(int index) const;
  ::TSCE::CellCoordinateArchive* _internal_add_agg_formula_coords();
  public:
  const ::TSCE::CellCoordinateArchive& agg_formula_coords(int index) const;
  ::TSCE::CellCoordinateArchive* add_agg_formula_coords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
      agg_formula_coords() const;

  // required .TSP.UUID group_uid = 1;
  bool has_group_uid() const;
  private:
  bool _internal_has_group_uid() const;
  public:
  void clear_group_uid();
  const ::TSP::UUID& group_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_uid();
  ::TSP::UUID* mutable_group_uid();
  void set_allocated_group_uid(::TSP::UUID* group_uid);
  private:
  const ::TSP::UUID& _internal_group_uid() const;
  ::TSP::UUID* _internal_mutable_group_uid();
  public:
  void unsafe_arena_set_allocated_group_uid(
      ::TSP::UUID* group_uid);
  ::TSP::UUID* unsafe_arena_release_group_uid();

  // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive group_value_tuple = 2;
  bool has_group_value_tuple() const;
  private:
  bool _internal_has_group_value_tuple() const;
  public:
  void clear_group_value_tuple();
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& group_value_tuple() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* release_group_value_tuple();
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* mutable_group_value_tuple();
  void set_allocated_group_value_tuple(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* group_value_tuple);
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& _internal_group_value_tuple() const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* _internal_mutable_group_value_tuple();
  public:
  void unsafe_arena_set_allocated_group_value_tuple(
      ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* group_value_tuple);
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* unsafe_arena_release_group_value_tuple();

  // optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
  bool has_format_manager() const;
  private:
  bool _internal_has_format_manager() const;
  public:
  void clear_format_manager();
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& format_manager() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* release_format_manager();
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* mutable_format_manager();
  void set_allocated_format_manager(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* format_manager);
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& _internal_format_manager() const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* _internal_mutable_format_manager();
  public:
  void unsafe_arena_set_allocated_format_manager(
      ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* format_manager);
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* unsafe_arena_release_format_manager();

  // optional .TSCE.CellValueArchive group_cell_value = 7;
  bool has_group_cell_value() const;
  private:
  bool _internal_has_group_cell_value() const;
  public:
  void clear_group_cell_value();
  const ::TSCE::CellValueArchive& group_cell_value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellValueArchive* release_group_cell_value();
  ::TSCE::CellValueArchive* mutable_group_cell_value();
  void set_allocated_group_cell_value(::TSCE::CellValueArchive* group_cell_value);
  private:
  const ::TSCE::CellValueArchive& _internal_group_cell_value() const;
  ::TSCE::CellValueArchive* _internal_mutable_group_cell_value();
  public:
  void unsafe_arena_set_allocated_group_cell_value(
      ::TSCE::CellValueArchive* group_cell_value);
  ::TSCE::CellValueArchive* unsafe_arena_release_group_cell_value();

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive > child_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > row_uid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive > agg_formula_coords_;
  ::TSP::UUID* group_uid_;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* group_value_tuple_;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* format_manager_;
  ::TSCE::CellValueArchive* group_cell_value_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive_AggregatorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive_AggregatorArchive() : CategoryOwnerArchive_GroupByArchive_AggregatorArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive_AggregatorArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive_AggregatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive_AggregatorArchive(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from);
  CategoryOwnerArchive_GroupByArchive_AggregatorArchive(CategoryOwnerArchive_GroupByArchive_AggregatorArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive_AggregatorArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive_AggregatorArchive& operator=(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive_AggregatorArchive& operator=(CategoryOwnerArchive_GroupByArchive_AggregatorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive_AggregatorArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive_AggregatorArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_AggregatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CategoryOwnerArchive_GroupByArchive_AggregatorArchive& a, CategoryOwnerArchive_GroupByArchive_AggregatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive_AggregatorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive_AggregatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive_AggregatorArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_AggregatorArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive_AggregatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive_AggregatorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive_AggregatorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive_AggregatorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive_AggregatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnUidFieldNumber = 1,
    kAggNodeFieldNumber = 2,
  };
  // required .TSP.UUID column_uid = 1;
  bool has_column_uid() const;
  private:
  bool _internal_has_column_uid() const;
  public:
  void clear_column_uid();
  const ::TSP::UUID& column_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_column_uid();
  ::TSP::UUID* mutable_column_uid();
  void set_allocated_column_uid(::TSP::UUID* column_uid);
  private:
  const ::TSP::UUID& _internal_column_uid() const;
  ::TSP::UUID* _internal_mutable_column_uid();
  public:
  void unsafe_arena_set_allocated_column_uid(
      ::TSP::UUID* column_uid);
  ::TSP::UUID* unsafe_arena_release_column_uid();

  // optional .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive agg_node = 2;
  bool has_agg_node() const;
  private:
  bool _internal_has_agg_node() const;
  public:
  void clear_agg_node();
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& agg_node() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* release_agg_node();
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* mutable_agg_node();
  void set_allocated_agg_node(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* agg_node);
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& _internal_agg_node() const;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* _internal_mutable_agg_node();
  public:
  void unsafe_arena_set_allocated_agg_node(
      ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* agg_node);
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* unsafe_arena_release_agg_node();

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* column_uid_;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* agg_node_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive_GroupByArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive.GroupByArchive) */ {
 public:
  inline CategoryOwnerArchive_GroupByArchive() : CategoryOwnerArchive_GroupByArchive(nullptr) {}
  ~CategoryOwnerArchive_GroupByArchive() override;
  explicit constexpr CategoryOwnerArchive_GroupByArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive_GroupByArchive(const CategoryOwnerArchive_GroupByArchive& from);
  CategoryOwnerArchive_GroupByArchive(CategoryOwnerArchive_GroupByArchive&& from) noexcept
    : CategoryOwnerArchive_GroupByArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive_GroupByArchive& operator=(const CategoryOwnerArchive_GroupByArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive_GroupByArchive& operator=(CategoryOwnerArchive_GroupByArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive_GroupByArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive_GroupByArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive_GroupByArchive*>(
               &_CategoryOwnerArchive_GroupByArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CategoryOwnerArchive_GroupByArchive& a, CategoryOwnerArchive_GroupByArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive_GroupByArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive_GroupByArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive_GroupByArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive>(nullptr);
  }

  CategoryOwnerArchive_GroupByArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive_GroupByArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive_GroupByArchive& from);
  void MergeFrom(const CategoryOwnerArchive_GroupByArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive_GroupByArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive.GroupByArchive";
  }
  protected:
  explicit CategoryOwnerArchive_GroupByArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryOwnerArchive_GroupByArchive_AggNodeArchive AggNodeArchive;
  typedef CategoryOwnerArchive_GroupByArchive_GroupNodeArchive GroupNodeArchive;
  typedef CategoryOwnerArchive_GroupByArchive_AggregatorArchive AggregatorArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupColumnFieldNumber = 2,
    kAggregatorFieldNumber = 4,
    kColumnAggTypeFieldNumber = 5,
    kGroupByUidFieldNumber = 1,
    kGroupNodeRootFieldNumber = 3,
    kIndirectAggTypeChangeFormulaFieldNumber = 7,
    kGroupingColumnsFormulaFieldNumber = 8,
    kAggsInGroupRootFormulaFieldNumber = 9,
    kGroupingColumnHeadersFormulaFieldNumber = 10,
    kColumnOrderChangedFormulaFieldNumber = 11,
    kRowOrderChangedFormulaFieldNumber = 12,
    kRowOrderChangedIgnoringRecalcFormulaFieldNumber = 13,
    kIsEnabledFieldNumber = 6,
  };
  // repeated .TST.GroupColumnArchive group_column = 2;
  int group_column_size() const;
  private:
  int _internal_group_column_size() const;
  public:
  void clear_group_column();
  ::TST::GroupColumnArchive* mutable_group_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >*
      mutable_group_column();
  private:
  const ::TST::GroupColumnArchive& _internal_group_column(int index) const;
  ::TST::GroupColumnArchive* _internal_add_group_column();
  public:
  const ::TST::GroupColumnArchive& group_column(int index) const;
  ::TST::GroupColumnArchive* add_group_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >&
      group_column() const;

  // repeated .TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive aggregator = 4;
  int aggregator_size() const;
  private:
  int _internal_aggregator_size() const;
  public:
  void clear_aggregator();
  ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* mutable_aggregator(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive >*
      mutable_aggregator();
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive& _internal_aggregator(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* _internal_add_aggregator();
  public:
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive& aggregator(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* add_aggregator();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive >&
      aggregator() const;

  // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
  int column_agg_type_size() const;
  private:
  int _internal_column_agg_type_size() const;
  public:
  void clear_column_agg_type();
  ::TST::ColumnAggregateArchive* mutable_column_agg_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >*
      mutable_column_agg_type();
  private:
  const ::TST::ColumnAggregateArchive& _internal_column_agg_type(int index) const;
  ::TST::ColumnAggregateArchive* _internal_add_column_agg_type();
  public:
  const ::TST::ColumnAggregateArchive& column_agg_type(int index) const;
  ::TST::ColumnAggregateArchive* add_column_agg_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >&
      column_agg_type() const;

  // required .TSP.UUID group_by_uid = 1;
  bool has_group_by_uid() const;
  private:
  bool _internal_has_group_by_uid() const;
  public:
  void clear_group_by_uid();
  const ::TSP::UUID& group_by_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_group_by_uid();
  ::TSP::UUID* mutable_group_by_uid();
  void set_allocated_group_by_uid(::TSP::UUID* group_by_uid);
  private:
  const ::TSP::UUID& _internal_group_by_uid() const;
  ::TSP::UUID* _internal_mutable_group_by_uid();
  public:
  void unsafe_arena_set_allocated_group_by_uid(
      ::TSP::UUID* group_by_uid);
  ::TSP::UUID* unsafe_arena_release_group_by_uid();

  // required .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive group_node_root = 3;
  bool has_group_node_root() const;
  private:
  bool _internal_has_group_node_root() const;
  public:
  void clear_group_node_root();
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& group_node_root() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* release_group_node_root();
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* mutable_group_node_root();
  void set_allocated_group_node_root(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* group_node_root);
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& _internal_group_node_root() const;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* _internal_mutable_group_node_root();
  public:
  void unsafe_arena_set_allocated_group_node_root(
      ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* group_node_root);
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* unsafe_arena_release_group_node_root();

  // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
  bool has_indirect_agg_type_change_formula() const;
  private:
  bool _internal_has_indirect_agg_type_change_formula() const;
  public:
  void clear_indirect_agg_type_change_formula();
  const ::TSCE::CellCoordinateArchive& indirect_agg_type_change_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_indirect_agg_type_change_formula();
  ::TSCE::CellCoordinateArchive* mutable_indirect_agg_type_change_formula();
  void set_allocated_indirect_agg_type_change_formula(::TSCE::CellCoordinateArchive* indirect_agg_type_change_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_indirect_agg_type_change_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_indirect_agg_type_change_formula();
  public:
  void unsafe_arena_set_allocated_indirect_agg_type_change_formula(
      ::TSCE::CellCoordinateArchive* indirect_agg_type_change_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_indirect_agg_type_change_formula();

  // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
  bool has_grouping_columns_formula() const;
  private:
  bool _internal_has_grouping_columns_formula() const;
  public:
  void clear_grouping_columns_formula();
  const ::TSCE::CellCoordinateArchive& grouping_columns_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_grouping_columns_formula();
  ::TSCE::CellCoordinateArchive* mutable_grouping_columns_formula();
  void set_allocated_grouping_columns_formula(::TSCE::CellCoordinateArchive* grouping_columns_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_grouping_columns_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_grouping_columns_formula();
  public:
  void unsafe_arena_set_allocated_grouping_columns_formula(
      ::TSCE::CellCoordinateArchive* grouping_columns_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_grouping_columns_formula();

  // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
  bool has_aggs_in_group_root_formula() const;
  private:
  bool _internal_has_aggs_in_group_root_formula() const;
  public:
  void clear_aggs_in_group_root_formula();
  const ::TSCE::CellCoordinateArchive& aggs_in_group_root_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_aggs_in_group_root_formula();
  ::TSCE::CellCoordinateArchive* mutable_aggs_in_group_root_formula();
  void set_allocated_aggs_in_group_root_formula(::TSCE::CellCoordinateArchive* aggs_in_group_root_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_aggs_in_group_root_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_aggs_in_group_root_formula();
  public:
  void unsafe_arena_set_allocated_aggs_in_group_root_formula(
      ::TSCE::CellCoordinateArchive* aggs_in_group_root_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_aggs_in_group_root_formula();

  // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
  bool has_grouping_column_headers_formula() const;
  private:
  bool _internal_has_grouping_column_headers_formula() const;
  public:
  void clear_grouping_column_headers_formula();
  const ::TSCE::CellCoordinateArchive& grouping_column_headers_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_grouping_column_headers_formula();
  ::TSCE::CellCoordinateArchive* mutable_grouping_column_headers_formula();
  void set_allocated_grouping_column_headers_formula(::TSCE::CellCoordinateArchive* grouping_column_headers_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_grouping_column_headers_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_grouping_column_headers_formula();
  public:
  void unsafe_arena_set_allocated_grouping_column_headers_formula(
      ::TSCE::CellCoordinateArchive* grouping_column_headers_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_grouping_column_headers_formula();

  // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
  bool has_column_order_changed_formula() const;
  private:
  bool _internal_has_column_order_changed_formula() const;
  public:
  void clear_column_order_changed_formula();
  const ::TSCE::CellCoordinateArchive& column_order_changed_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_column_order_changed_formula();
  ::TSCE::CellCoordinateArchive* mutable_column_order_changed_formula();
  void set_allocated_column_order_changed_formula(::TSCE::CellCoordinateArchive* column_order_changed_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_column_order_changed_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_column_order_changed_formula();
  public:
  void unsafe_arena_set_allocated_column_order_changed_formula(
      ::TSCE::CellCoordinateArchive* column_order_changed_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_column_order_changed_formula();

  // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
  bool has_row_order_changed_formula() const;
  private:
  bool _internal_has_row_order_changed_formula() const;
  public:
  void clear_row_order_changed_formula();
  const ::TSCE::CellCoordinateArchive& row_order_changed_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_row_order_changed_formula();
  ::TSCE::CellCoordinateArchive* mutable_row_order_changed_formula();
  void set_allocated_row_order_changed_formula(::TSCE::CellCoordinateArchive* row_order_changed_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_row_order_changed_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_row_order_changed_formula();
  public:
  void unsafe_arena_set_allocated_row_order_changed_formula(
      ::TSCE::CellCoordinateArchive* row_order_changed_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_row_order_changed_formula();

  // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
  bool has_row_order_changed_ignoring_recalc_formula() const;
  private:
  bool _internal_has_row_order_changed_ignoring_recalc_formula() const;
  public:
  void clear_row_order_changed_ignoring_recalc_formula();
  const ::TSCE::CellCoordinateArchive& row_order_changed_ignoring_recalc_formula() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_row_order_changed_ignoring_recalc_formula();
  ::TSCE::CellCoordinateArchive* mutable_row_order_changed_ignoring_recalc_formula();
  void set_allocated_row_order_changed_ignoring_recalc_formula(::TSCE::CellCoordinateArchive* row_order_changed_ignoring_recalc_formula);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_row_order_changed_ignoring_recalc_formula() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_row_order_changed_ignoring_recalc_formula();
  public:
  void unsafe_arena_set_allocated_row_order_changed_ignoring_recalc_formula(
      ::TSCE::CellCoordinateArchive* row_order_changed_ignoring_recalc_formula);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_row_order_changed_ignoring_recalc_formula();

  // required bool is_enabled = 6;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive.GroupByArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive > group_column_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive > aggregator_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive > column_agg_type_;
  ::TSP::UUID* group_by_uid_;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* group_node_root_;
  ::TSCE::CellCoordinateArchive* indirect_agg_type_change_formula_;
  ::TSCE::CellCoordinateArchive* grouping_columns_formula_;
  ::TSCE::CellCoordinateArchive* aggs_in_group_root_formula_;
  ::TSCE::CellCoordinateArchive* grouping_column_headers_formula_;
  ::TSCE::CellCoordinateArchive* column_order_changed_formula_;
  ::TSCE::CellCoordinateArchive* row_order_changed_formula_;
  ::TSCE::CellCoordinateArchive* row_order_changed_ignoring_recalc_formula_;
  bool is_enabled_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOwnerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOwnerArchive) */ {
 public:
  inline CategoryOwnerArchive() : CategoryOwnerArchive(nullptr) {}
  ~CategoryOwnerArchive() override;
  explicit constexpr CategoryOwnerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOwnerArchive(const CategoryOwnerArchive& from);
  CategoryOwnerArchive(CategoryOwnerArchive&& from) noexcept
    : CategoryOwnerArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOwnerArchive& operator=(const CategoryOwnerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOwnerArchive& operator=(CategoryOwnerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOwnerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOwnerArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOwnerArchive*>(
               &_CategoryOwnerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CategoryOwnerArchive& a, CategoryOwnerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOwnerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOwnerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOwnerArchive* New() const final {
    return CreateMaybeMessage<CategoryOwnerArchive>(nullptr);
  }

  CategoryOwnerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOwnerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOwnerArchive& from);
  void MergeFrom(const CategoryOwnerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOwnerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOwnerArchive";
  }
  protected:
  explicit CategoryOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CategoryOwnerArchive_GroupByArchive GroupByArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupByFieldNumber = 2,
    kOwnerUidFieldNumber = 1,
  };
  // repeated .TST.CategoryOwnerArchive.GroupByArchive group_by = 2;
  int group_by_size() const;
  private:
  int _internal_group_by_size() const;
  public:
  void clear_group_by();
  ::TST::CategoryOwnerArchive_GroupByArchive* mutable_group_by(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive >*
      mutable_group_by();
  private:
  const ::TST::CategoryOwnerArchive_GroupByArchive& _internal_group_by(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive* _internal_add_group_by();
  public:
  const ::TST::CategoryOwnerArchive_GroupByArchive& group_by(int index) const;
  ::TST::CategoryOwnerArchive_GroupByArchive* add_group_by();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive >&
      group_by() const;

  // required .TSP.UUID owner_uid = 1;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // @@protoc_insertion_point(class_scope:TST.CategoryOwnerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive > group_by_;
  ::TSP::UUID* owner_uid_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class RichTextPayloadArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.RichTextPayloadArchive) */ {
 public:
  inline RichTextPayloadArchive() : RichTextPayloadArchive(nullptr) {}
  ~RichTextPayloadArchive() override;
  explicit constexpr RichTextPayloadArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RichTextPayloadArchive(const RichTextPayloadArchive& from);
  RichTextPayloadArchive(RichTextPayloadArchive&& from) noexcept
    : RichTextPayloadArchive() {
    *this = ::std::move(from);
  }

  inline RichTextPayloadArchive& operator=(const RichTextPayloadArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RichTextPayloadArchive& operator=(RichTextPayloadArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RichTextPayloadArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RichTextPayloadArchive* internal_default_instance() {
    return reinterpret_cast<const RichTextPayloadArchive*>(
               &_RichTextPayloadArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(RichTextPayloadArchive& a, RichTextPayloadArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RichTextPayloadArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RichTextPayloadArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RichTextPayloadArchive* New() const final {
    return CreateMaybeMessage<RichTextPayloadArchive>(nullptr);
  }

  RichTextPayloadArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RichTextPayloadArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RichTextPayloadArchive& from);
  void MergeFrom(const RichTextPayloadArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RichTextPayloadArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.RichTextPayloadArchive";
  }
  protected:
  explicit RichTextPayloadArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 1,
    kRangeFieldNumber = 2,
    kCellidFieldNumber = 3,
  };
  // required .TSP.Reference storage = 1;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::TSP::Reference& storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_storage();
  ::TSP::Reference* mutable_storage();
  void set_allocated_storage(::TSP::Reference* storage);
  private:
  const ::TSP::Reference& _internal_storage() const;
  ::TSP::Reference* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::TSP::Reference* storage);
  ::TSP::Reference* unsafe_arena_release_storage();

  // optional .TSP.Range range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::TSP::Range& range() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Range* release_range();
  ::TSP::Range* mutable_range();
  void set_allocated_range(::TSP::Range* range);
  private:
  const ::TSP::Range& _internal_range() const;
  ::TSP::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::TSP::Range* range);
  ::TSP::Range* unsafe_arena_release_range();

  // required .TST.CellID cellid = 3;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  const ::TST::CellID& cellid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::CellID* release_cellid();
  ::TST::CellID* mutable_cellid();
  void set_allocated_cellid(::TST::CellID* cellid);
  private:
  const ::TST::CellID& _internal_cellid() const;
  ::TST::CellID* _internal_mutable_cellid();
  public:
  void unsafe_arena_set_allocated_cellid(
      ::TST::CellID* cellid);
  ::TST::CellID* unsafe_arena_release_cellid();

  // @@protoc_insertion_point(class_scope:TST.RichTextPayloadArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* storage_;
  ::TSP::Range* range_;
  ::TST::CellID* cellid_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaEqualsTokenAttachmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaEqualsTokenAttachmentArchive) */ {
 public:
  inline FormulaEqualsTokenAttachmentArchive() : FormulaEqualsTokenAttachmentArchive(nullptr) {}
  ~FormulaEqualsTokenAttachmentArchive() override;
  explicit constexpr FormulaEqualsTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaEqualsTokenAttachmentArchive(const FormulaEqualsTokenAttachmentArchive& from);
  FormulaEqualsTokenAttachmentArchive(FormulaEqualsTokenAttachmentArchive&& from) noexcept
    : FormulaEqualsTokenAttachmentArchive() {
    *this = ::std::move(from);
  }

  inline FormulaEqualsTokenAttachmentArchive& operator=(const FormulaEqualsTokenAttachmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaEqualsTokenAttachmentArchive& operator=(FormulaEqualsTokenAttachmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaEqualsTokenAttachmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaEqualsTokenAttachmentArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaEqualsTokenAttachmentArchive*>(
               &_FormulaEqualsTokenAttachmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(FormulaEqualsTokenAttachmentArchive& a, FormulaEqualsTokenAttachmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaEqualsTokenAttachmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaEqualsTokenAttachmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaEqualsTokenAttachmentArchive* New() const final {
    return CreateMaybeMessage<FormulaEqualsTokenAttachmentArchive>(nullptr);
  }

  FormulaEqualsTokenAttachmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaEqualsTokenAttachmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaEqualsTokenAttachmentArchive& from);
  void MergeFrom(const FormulaEqualsTokenAttachmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaEqualsTokenAttachmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaEqualsTokenAttachmentArchive";
  }
  protected:
  explicit FormulaEqualsTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSWP.UIGraphicalAttachment super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::UIGraphicalAttachment& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::UIGraphicalAttachment* release_super();
  ::TSWP::UIGraphicalAttachment* mutable_super();
  void set_allocated_super(::TSWP::UIGraphicalAttachment* super);
  private:
  const ::TSWP::UIGraphicalAttachment& _internal_super() const;
  ::TSWP::UIGraphicalAttachment* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::UIGraphicalAttachment* super);
  ::TSWP::UIGraphicalAttachment* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TST.FormulaEqualsTokenAttachmentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::UIGraphicalAttachment* super_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellFillStandIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellFillStandIn) */ {
 public:
  inline CellFillStandIn() : CellFillStandIn(nullptr) {}
  ~CellFillStandIn() override;
  explicit constexpr CellFillStandIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellFillStandIn(const CellFillStandIn& from);
  CellFillStandIn(CellFillStandIn&& from) noexcept
    : CellFillStandIn() {
    *this = ::std::move(from);
  }

  inline CellFillStandIn& operator=(const CellFillStandIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellFillStandIn& operator=(CellFillStandIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellFillStandIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellFillStandIn* internal_default_instance() {
    return reinterpret_cast<const CellFillStandIn*>(
               &_CellFillStandIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CellFillStandIn& a, CellFillStandIn& b) {
    a.Swap(&b);
  }
  inline void Swap(CellFillStandIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellFillStandIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellFillStandIn* New() const final {
    return CreateMaybeMessage<CellFillStandIn>(nullptr);
  }

  CellFillStandIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellFillStandIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellFillStandIn& from);
  void MergeFrom(const CellFillStandIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellFillStandIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellFillStandIn";
  }
  protected:
  explicit CellFillStandIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillFieldNumber = 1,
    kTypeIsMixedFieldNumber = 2,
    kColorHasBeenModifiedFieldNumber = 3,
    kColorIsMixedFieldNumber = 4,
    kFirstColorHasBeenModifiedFieldNumber = 5,
    kFirstColorIsMixedFieldNumber = 6,
    kLastColorHasBeenModifiedFieldNumber = 7,
    kLastColorIsMixedFieldNumber = 8,
    kGradientTypeHasBeenModifiedFieldNumber = 9,
    kGradientTypeIsMixedFieldNumber = 10,
    kGradientAngleHasBeenModifiedFieldNumber = 11,
    kGradientAngleIsMixedFieldNumber = 12,
    kImageDataHasBeenModifiedFieldNumber = 13,
    kImageDataIsMixedFieldNumber = 14,
    kTintColorHasBeenModifiedFieldNumber = 15,
    kTintColorIsMixedFieldNumber = 16,
    kScaleHasBeenModifiedFieldNumber = 17,
    kScaleIsMixedFieldNumber = 18,
    kTechniqueHasBeenModifiedFieldNumber = 19,
    kTechniqueIsMixedFieldNumber = 20,
  };
  // required .TSD.FillArchive fill = 1;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  const ::TSD::FillArchive& fill() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FillArchive* release_fill();
  ::TSD::FillArchive* mutable_fill();
  void set_allocated_fill(::TSD::FillArchive* fill);
  private:
  const ::TSD::FillArchive& _internal_fill() const;
  ::TSD::FillArchive* _internal_mutable_fill();
  public:
  void unsafe_arena_set_allocated_fill(
      ::TSD::FillArchive* fill);
  ::TSD::FillArchive* unsafe_arena_release_fill();

  // optional bool type_is_mixed = 2;
  bool has_type_is_mixed() const;
  private:
  bool _internal_has_type_is_mixed() const;
  public:
  void clear_type_is_mixed();
  bool type_is_mixed() const;
  void set_type_is_mixed(bool value);
  private:
  bool _internal_type_is_mixed() const;
  void _internal_set_type_is_mixed(bool value);
  public:

  // optional bool color_has_been_modified = 3;
  bool has_color_has_been_modified() const;
  private:
  bool _internal_has_color_has_been_modified() const;
  public:
  void clear_color_has_been_modified();
  bool color_has_been_modified() const;
  void set_color_has_been_modified(bool value);
  private:
  bool _internal_color_has_been_modified() const;
  void _internal_set_color_has_been_modified(bool value);
  public:

  // optional bool color_is_mixed = 4;
  bool has_color_is_mixed() const;
  private:
  bool _internal_has_color_is_mixed() const;
  public:
  void clear_color_is_mixed();
  bool color_is_mixed() const;
  void set_color_is_mixed(bool value);
  private:
  bool _internal_color_is_mixed() const;
  void _internal_set_color_is_mixed(bool value);
  public:

  // optional bool first_color_has_been_modified = 5;
  bool has_first_color_has_been_modified() const;
  private:
  bool _internal_has_first_color_has_been_modified() const;
  public:
  void clear_first_color_has_been_modified();
  bool first_color_has_been_modified() const;
  void set_first_color_has_been_modified(bool value);
  private:
  bool _internal_first_color_has_been_modified() const;
  void _internal_set_first_color_has_been_modified(bool value);
  public:

  // optional bool first_color_is_mixed = 6;
  bool has_first_color_is_mixed() const;
  private:
  bool _internal_has_first_color_is_mixed() const;
  public:
  void clear_first_color_is_mixed();
  bool first_color_is_mixed() const;
  void set_first_color_is_mixed(bool value);
  private:
  bool _internal_first_color_is_mixed() const;
  void _internal_set_first_color_is_mixed(bool value);
  public:

  // optional bool last_color_has_been_modified = 7;
  bool has_last_color_has_been_modified() const;
  private:
  bool _internal_has_last_color_has_been_modified() const;
  public:
  void clear_last_color_has_been_modified();
  bool last_color_has_been_modified() const;
  void set_last_color_has_been_modified(bool value);
  private:
  bool _internal_last_color_has_been_modified() const;
  void _internal_set_last_color_has_been_modified(bool value);
  public:

  // optional bool last_color_is_mixed = 8;
  bool has_last_color_is_mixed() const;
  private:
  bool _internal_has_last_color_is_mixed() const;
  public:
  void clear_last_color_is_mixed();
  bool last_color_is_mixed() const;
  void set_last_color_is_mixed(bool value);
  private:
  bool _internal_last_color_is_mixed() const;
  void _internal_set_last_color_is_mixed(bool value);
  public:

  // optional bool gradient_type_has_been_modified = 9;
  bool has_gradient_type_has_been_modified() const;
  private:
  bool _internal_has_gradient_type_has_been_modified() const;
  public:
  void clear_gradient_type_has_been_modified();
  bool gradient_type_has_been_modified() const;
  void set_gradient_type_has_been_modified(bool value);
  private:
  bool _internal_gradient_type_has_been_modified() const;
  void _internal_set_gradient_type_has_been_modified(bool value);
  public:

  // optional bool gradient_type_is_mixed = 10;
  bool has_gradient_type_is_mixed() const;
  private:
  bool _internal_has_gradient_type_is_mixed() const;
  public:
  void clear_gradient_type_is_mixed();
  bool gradient_type_is_mixed() const;
  void set_gradient_type_is_mixed(bool value);
  private:
  bool _internal_gradient_type_is_mixed() const;
  void _internal_set_gradient_type_is_mixed(bool value);
  public:

  // optional bool gradient_angle_has_been_modified = 11;
  bool has_gradient_angle_has_been_modified() const;
  private:
  bool _internal_has_gradient_angle_has_been_modified() const;
  public:
  void clear_gradient_angle_has_been_modified();
  bool gradient_angle_has_been_modified() const;
  void set_gradient_angle_has_been_modified(bool value);
  private:
  bool _internal_gradient_angle_has_been_modified() const;
  void _internal_set_gradient_angle_has_been_modified(bool value);
  public:

  // optional bool gradient_angle_is_mixed = 12;
  bool has_gradient_angle_is_mixed() const;
  private:
  bool _internal_has_gradient_angle_is_mixed() const;
  public:
  void clear_gradient_angle_is_mixed();
  bool gradient_angle_is_mixed() const;
  void set_gradient_angle_is_mixed(bool value);
  private:
  bool _internal_gradient_angle_is_mixed() const;
  void _internal_set_gradient_angle_is_mixed(bool value);
  public:

  // optional bool image_data_has_been_modified = 13;
  bool has_image_data_has_been_modified() const;
  private:
  bool _internal_has_image_data_has_been_modified() const;
  public:
  void clear_image_data_has_been_modified();
  bool image_data_has_been_modified() const;
  void set_image_data_has_been_modified(bool value);
  private:
  bool _internal_image_data_has_been_modified() const;
  void _internal_set_image_data_has_been_modified(bool value);
  public:

  // optional bool image_data_is_mixed = 14;
  bool has_image_data_is_mixed() const;
  private:
  bool _internal_has_image_data_is_mixed() const;
  public:
  void clear_image_data_is_mixed();
  bool image_data_is_mixed() const;
  void set_image_data_is_mixed(bool value);
  private:
  bool _internal_image_data_is_mixed() const;
  void _internal_set_image_data_is_mixed(bool value);
  public:

  // optional bool tint_color_has_been_modified = 15;
  bool has_tint_color_has_been_modified() const;
  private:
  bool _internal_has_tint_color_has_been_modified() const;
  public:
  void clear_tint_color_has_been_modified();
  bool tint_color_has_been_modified() const;
  void set_tint_color_has_been_modified(bool value);
  private:
  bool _internal_tint_color_has_been_modified() const;
  void _internal_set_tint_color_has_been_modified(bool value);
  public:

  // optional bool tint_color_is_mixed = 16;
  bool has_tint_color_is_mixed() const;
  private:
  bool _internal_has_tint_color_is_mixed() const;
  public:
  void clear_tint_color_is_mixed();
  bool tint_color_is_mixed() const;
  void set_tint_color_is_mixed(bool value);
  private:
  bool _internal_tint_color_is_mixed() const;
  void _internal_set_tint_color_is_mixed(bool value);
  public:

  // optional bool scale_has_been_modified = 17;
  bool has_scale_has_been_modified() const;
  private:
  bool _internal_has_scale_has_been_modified() const;
  public:
  void clear_scale_has_been_modified();
  bool scale_has_been_modified() const;
  void set_scale_has_been_modified(bool value);
  private:
  bool _internal_scale_has_been_modified() const;
  void _internal_set_scale_has_been_modified(bool value);
  public:

  // optional bool scale_is_mixed = 18;
  bool has_scale_is_mixed() const;
  private:
  bool _internal_has_scale_is_mixed() const;
  public:
  void clear_scale_is_mixed();
  bool scale_is_mixed() const;
  void set_scale_is_mixed(bool value);
  private:
  bool _internal_scale_is_mixed() const;
  void _internal_set_scale_is_mixed(bool value);
  public:

  // optional bool technique_has_been_modified = 19;
  bool has_technique_has_been_modified() const;
  private:
  bool _internal_has_technique_has_been_modified() const;
  public:
  void clear_technique_has_been_modified();
  bool technique_has_been_modified() const;
  void set_technique_has_been_modified(bool value);
  private:
  bool _internal_technique_has_been_modified() const;
  void _internal_set_technique_has_been_modified(bool value);
  public:

  // optional bool technique_is_mixed = 20;
  bool has_technique_is_mixed() const;
  private:
  bool _internal_has_technique_is_mixed() const;
  public:
  void clear_technique_is_mixed();
  bool technique_is_mixed() const;
  void set_technique_is_mixed(bool value);
  private:
  bool _internal_technique_is_mixed() const;
  void _internal_set_technique_is_mixed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellFillStandIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::FillArchive* fill_;
  bool type_is_mixed_;
  bool color_has_been_modified_;
  bool color_is_mixed_;
  bool first_color_has_been_modified_;
  bool first_color_is_mixed_;
  bool last_color_has_been_modified_;
  bool last_color_is_mixed_;
  bool gradient_type_has_been_modified_;
  bool gradient_type_is_mixed_;
  bool gradient_angle_has_been_modified_;
  bool gradient_angle_is_mixed_;
  bool image_data_has_been_modified_;
  bool image_data_is_mixed_;
  bool tint_color_has_been_modified_;
  bool tint_color_is_mixed_;
  bool scale_has_been_modified_;
  bool scale_is_mixed_;
  bool technique_has_been_modified_;
  bool technique_is_mixed_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class FormulaSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.FormulaSelectionArchive) */ {
 public:
  inline FormulaSelectionArchive() : FormulaSelectionArchive(nullptr) {}
  ~FormulaSelectionArchive() override;
  explicit constexpr FormulaSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormulaSelectionArchive(const FormulaSelectionArchive& from);
  FormulaSelectionArchive(FormulaSelectionArchive&& from) noexcept
    : FormulaSelectionArchive() {
    *this = ::std::move(from);
  }

  inline FormulaSelectionArchive& operator=(const FormulaSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaSelectionArchive& operator=(FormulaSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormulaSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormulaSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const FormulaSelectionArchive*>(
               &_FormulaSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(FormulaSelectionArchive& a, FormulaSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormulaSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormulaSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormulaSelectionArchive* New() const final {
    return CreateMaybeMessage<FormulaSelectionArchive>(nullptr);
  }

  FormulaSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaSelectionArchive& from);
  void MergeFrom(const FormulaSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.FormulaSelectionArchive";
  }
  protected:
  explicit FormulaSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kActiveTokenCharIndexFieldNumber = 2,
  };
  // required .TSWP.SelectionArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::SelectionArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSWP::SelectionArchive* release_super();
  ::TSWP::SelectionArchive* mutable_super();
  void set_allocated_super(::TSWP::SelectionArchive* super);
  private:
  const ::TSWP::SelectionArchive& _internal_super() const;
  ::TSWP::SelectionArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::SelectionArchive* super);
  ::TSWP::SelectionArchive* unsafe_arena_release_super();

  // optional uint32 activeTokenCharIndex = 2;
  bool has_activetokencharindex() const;
  private:
  bool _internal_has_activetokencharindex() const;
  public:
  void clear_activetokencharindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 activetokencharindex() const;
  void set_activetokencharindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activetokencharindex() const;
  void _internal_set_activetokencharindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.FormulaSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSWP::SelectionArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activetokencharindex_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CellBorderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CellBorderArchive) */ {
 public:
  inline CellBorderArchive() : CellBorderArchive(nullptr) {}
  ~CellBorderArchive() override;
  explicit constexpr CellBorderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellBorderArchive(const CellBorderArchive& from);
  CellBorderArchive(CellBorderArchive&& from) noexcept
    : CellBorderArchive() {
    *this = ::std::move(from);
  }

  inline CellBorderArchive& operator=(const CellBorderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellBorderArchive& operator=(CellBorderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellBorderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellBorderArchive* internal_default_instance() {
    return reinterpret_cast<const CellBorderArchive*>(
               &_CellBorderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CellBorderArchive& a, CellBorderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CellBorderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellBorderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellBorderArchive* New() const final {
    return CreateMaybeMessage<CellBorderArchive>(nullptr);
  }

  CellBorderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellBorderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellBorderArchive& from);
  void MergeFrom(const CellBorderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellBorderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CellBorderArchive";
  }
  protected:
  explicit CellBorderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopStrokeFieldNumber = 1,
    kRightStrokeFieldNumber = 3,
    kBottomStrokeFieldNumber = 5,
    kLeftStrokeFieldNumber = 7,
    kTopStrokeOrderFieldNumber = 2,
    kRightStrokeOrderFieldNumber = 4,
    kBottomStrokeOrderFieldNumber = 6,
    kLeftStrokeOrderFieldNumber = 8,
  };
  // optional .TSD.StrokeArchive top_stroke = 1;
  bool has_top_stroke() const;
  private:
  bool _internal_has_top_stroke() const;
  public:
  void clear_top_stroke();
  const ::TSD::StrokeArchive& top_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_top_stroke();
  ::TSD::StrokeArchive* mutable_top_stroke();
  void set_allocated_top_stroke(::TSD::StrokeArchive* top_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_top_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_top_stroke();
  public:
  void unsafe_arena_set_allocated_top_stroke(
      ::TSD::StrokeArchive* top_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_top_stroke();

  // optional .TSD.StrokeArchive right_stroke = 3;
  bool has_right_stroke() const;
  private:
  bool _internal_has_right_stroke() const;
  public:
  void clear_right_stroke();
  const ::TSD::StrokeArchive& right_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_right_stroke();
  ::TSD::StrokeArchive* mutable_right_stroke();
  void set_allocated_right_stroke(::TSD::StrokeArchive* right_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_right_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_right_stroke();
  public:
  void unsafe_arena_set_allocated_right_stroke(
      ::TSD::StrokeArchive* right_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_right_stroke();

  // optional .TSD.StrokeArchive bottom_stroke = 5;
  bool has_bottom_stroke() const;
  private:
  bool _internal_has_bottom_stroke() const;
  public:
  void clear_bottom_stroke();
  const ::TSD::StrokeArchive& bottom_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_bottom_stroke();
  ::TSD::StrokeArchive* mutable_bottom_stroke();
  void set_allocated_bottom_stroke(::TSD::StrokeArchive* bottom_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_bottom_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_bottom_stroke();
  public:
  void unsafe_arena_set_allocated_bottom_stroke(
      ::TSD::StrokeArchive* bottom_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_bottom_stroke();

  // optional .TSD.StrokeArchive left_stroke = 7;
  bool has_left_stroke() const;
  private:
  bool _internal_has_left_stroke() const;
  public:
  void clear_left_stroke();
  const ::TSD::StrokeArchive& left_stroke() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::StrokeArchive* release_left_stroke();
  ::TSD::StrokeArchive* mutable_left_stroke();
  void set_allocated_left_stroke(::TSD::StrokeArchive* left_stroke);
  private:
  const ::TSD::StrokeArchive& _internal_left_stroke() const;
  ::TSD::StrokeArchive* _internal_mutable_left_stroke();
  public:
  void unsafe_arena_set_allocated_left_stroke(
      ::TSD::StrokeArchive* left_stroke);
  ::TSD::StrokeArchive* unsafe_arena_release_left_stroke();

  // optional int32 top_stroke_order = 2;
  bool has_top_stroke_order() const;
  private:
  bool _internal_has_top_stroke_order() const;
  public:
  void clear_top_stroke_order();
  ::PROTOBUF_NAMESPACE_ID::int32 top_stroke_order() const;
  void set_top_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_stroke_order() const;
  void _internal_set_top_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 right_stroke_order = 4;
  bool has_right_stroke_order() const;
  private:
  bool _internal_has_right_stroke_order() const;
  public:
  void clear_right_stroke_order();
  ::PROTOBUF_NAMESPACE_ID::int32 right_stroke_order() const;
  void set_right_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right_stroke_order() const;
  void _internal_set_right_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bottom_stroke_order = 6;
  bool has_bottom_stroke_order() const;
  private:
  bool _internal_has_bottom_stroke_order() const;
  public:
  void clear_bottom_stroke_order();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_stroke_order() const;
  void set_bottom_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bottom_stroke_order() const;
  void _internal_set_bottom_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 left_stroke_order = 8;
  bool has_left_stroke_order() const;
  private:
  bool _internal_has_left_stroke_order() const;
  public:
  void clear_left_stroke_order();
  ::PROTOBUF_NAMESPACE_ID::int32 left_stroke_order() const;
  void set_left_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left_stroke_order() const;
  void _internal_set_left_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.CellBorderArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::StrokeArchive* top_stroke_;
  ::TSD::StrokeArchive* right_stroke_;
  ::TSD::StrokeArchive* bottom_stroke_;
  ::TSD::StrokeArchive* left_stroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_stroke_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_stroke_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_stroke_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_stroke_order_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class DefaultCellStylesContainerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.DefaultCellStylesContainerArchive) */ {
 public:
  inline DefaultCellStylesContainerArchive() : DefaultCellStylesContainerArchive(nullptr) {}
  ~DefaultCellStylesContainerArchive() override;
  explicit constexpr DefaultCellStylesContainerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefaultCellStylesContainerArchive(const DefaultCellStylesContainerArchive& from);
  DefaultCellStylesContainerArchive(DefaultCellStylesContainerArchive&& from) noexcept
    : DefaultCellStylesContainerArchive() {
    *this = ::std::move(from);
  }

  inline DefaultCellStylesContainerArchive& operator=(const DefaultCellStylesContainerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultCellStylesContainerArchive& operator=(DefaultCellStylesContainerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultCellStylesContainerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultCellStylesContainerArchive* internal_default_instance() {
    return reinterpret_cast<const DefaultCellStylesContainerArchive*>(
               &_DefaultCellStylesContainerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(DefaultCellStylesContainerArchive& a, DefaultCellStylesContainerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultCellStylesContainerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultCellStylesContainerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultCellStylesContainerArchive* New() const final {
    return CreateMaybeMessage<DefaultCellStylesContainerArchive>(nullptr);
  }

  DefaultCellStylesContainerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultCellStylesContainerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultCellStylesContainerArchive& from);
  void MergeFrom(const DefaultCellStylesContainerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultCellStylesContainerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.DefaultCellStylesContainerArchive";
  }
  protected:
  explicit DefaultCellStylesContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderRowUidsFieldNumber = 2,
    kFooterRowUidsFieldNumber = 3,
    kHeaderColumnUidsFieldNumber = 4,
    kTableStyleNetworkFieldNumber = 1,
  };
  // repeated .TSP.UUID header_row_uids = 2;
  int header_row_uids_size() const;
  private:
  int _internal_header_row_uids_size() const;
  public:
  void clear_header_row_uids();
  ::TSP::UUID* mutable_header_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_header_row_uids();
  private:
  const ::TSP::UUID& _internal_header_row_uids(int index) const;
  ::TSP::UUID* _internal_add_header_row_uids();
  public:
  const ::TSP::UUID& header_row_uids(int index) const;
  ::TSP::UUID* add_header_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      header_row_uids() const;

  // repeated .TSP.UUID footer_row_uids = 3;
  int footer_row_uids_size() const;
  private:
  int _internal_footer_row_uids_size() const;
  public:
  void clear_footer_row_uids();
  ::TSP::UUID* mutable_footer_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_footer_row_uids();
  private:
  const ::TSP::UUID& _internal_footer_row_uids(int index) const;
  ::TSP::UUID* _internal_add_footer_row_uids();
  public:
  const ::TSP::UUID& footer_row_uids(int index) const;
  ::TSP::UUID* add_footer_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      footer_row_uids() const;

  // repeated .TSP.UUID header_column_uids = 4;
  int header_column_uids_size() const;
  private:
  int _internal_header_column_uids_size() const;
  public:
  void clear_header_column_uids();
  ::TSP::UUID* mutable_header_column_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_header_column_uids();
  private:
  const ::TSP::UUID& _internal_header_column_uids(int index) const;
  ::TSP::UUID* _internal_add_header_column_uids();
  public:
  const ::TSP::UUID& header_column_uids(int index) const;
  ::TSP::UUID* add_header_column_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      header_column_uids() const;

  // required .TSP.Reference table_style_network = 1;
  bool has_table_style_network() const;
  private:
  bool _internal_has_table_style_network() const;
  public:
  void clear_table_style_network();
  const ::TSP::Reference& table_style_network() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_style_network();
  ::TSP::Reference* mutable_table_style_network();
  void set_allocated_table_style_network(::TSP::Reference* table_style_network);
  private:
  const ::TSP::Reference& _internal_table_style_network() const;
  ::TSP::Reference* _internal_mutable_table_style_network();
  public:
  void unsafe_arena_set_allocated_table_style_network(
      ::TSP::Reference* table_style_network);
  ::TSP::Reference* unsafe_arena_release_table_style_network();

  // @@protoc_insertion_point(class_scope:TST.DefaultCellStylesContainerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > header_row_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > footer_row_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > header_column_uids_;
  ::TSP::Reference* table_style_network_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class MultiTableRemapperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.MultiTableRemapperArchive) */ {
 public:
  inline MultiTableRemapperArchive() : MultiTableRemapperArchive(nullptr) {}
  ~MultiTableRemapperArchive() override;
  explicit constexpr MultiTableRemapperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiTableRemapperArchive(const MultiTableRemapperArchive& from);
  MultiTableRemapperArchive(MultiTableRemapperArchive&& from) noexcept
    : MultiTableRemapperArchive() {
    *this = ::std::move(from);
  }

  inline MultiTableRemapperArchive& operator=(const MultiTableRemapperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTableRemapperArchive& operator=(MultiTableRemapperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiTableRemapperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiTableRemapperArchive* internal_default_instance() {
    return reinterpret_cast<const MultiTableRemapperArchive*>(
               &_MultiTableRemapperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(MultiTableRemapperArchive& a, MultiTableRemapperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTableRemapperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiTableRemapperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiTableRemapperArchive* New() const final {
    return CreateMaybeMessage<MultiTableRemapperArchive>(nullptr);
  }

  MultiTableRemapperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiTableRemapperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiTableRemapperArchive& from);
  void MergeFrom(const MultiTableRemapperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTableRemapperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.MultiTableRemapperArchive";
  }
  protected:
  explicit MultiTableRemapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MultiTableRemapperArchive_Purpose Purpose;
  static constexpr Purpose DEFAULT =
    MultiTableRemapperArchive_Purpose_DEFAULT;
  static constexpr Purpose GROUPING =
    MultiTableRemapperArchive_Purpose_GROUPING;
  static constexpr Purpose PAGES_SECTION_DUPLICATION_NONCOLLAB =
    MultiTableRemapperArchive_Purpose_PAGES_SECTION_DUPLICATION_NONCOLLAB;
  static inline bool Purpose_IsValid(int value) {
    return MultiTableRemapperArchive_Purpose_IsValid(value);
  }
  static constexpr Purpose Purpose_MIN =
    MultiTableRemapperArchive_Purpose_Purpose_MIN;
  static constexpr Purpose Purpose_MAX =
    MultiTableRemapperArchive_Purpose_Purpose_MAX;
  static constexpr int Purpose_ARRAYSIZE =
    MultiTableRemapperArchive_Purpose_Purpose_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Purpose_descriptor() {
    return MultiTableRemapperArchive_Purpose_descriptor();
  }
  template<typename T>
  static inline const std::string& Purpose_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Purpose>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Purpose_Name.");
    return MultiTableRemapperArchive_Purpose_Name(enum_t_value);
  }
  static inline bool Purpose_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Purpose* value) {
    return MultiTableRemapperArchive_Purpose_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerUidMapperFieldNumber = 4,
    kBackingTablesForChartsFieldNumber = 5,
    kMappingPurposeFieldNumber = 1,
    kShouldStealReferencesFieldNumber = 2,
    kCanReuseTableNamesFieldNumber = 3,
    kCrossDocumentPasteFieldNumber = 6,
    kNestedInnerMapperFieldNumber = 7,
  };
  // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
  int owner_uid_mapper_size() const;
  private:
  int _internal_owner_uid_mapper_size() const;
  public:
  void clear_owner_uid_mapper();
  ::TSCE::OwnerUIDMapperArchive* mutable_owner_uid_mapper(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerUIDMapperArchive >*
      mutable_owner_uid_mapper();
  private:
  const ::TSCE::OwnerUIDMapperArchive& _internal_owner_uid_mapper(int index) const;
  ::TSCE::OwnerUIDMapperArchive* _internal_add_owner_uid_mapper();
  public:
  const ::TSCE::OwnerUIDMapperArchive& owner_uid_mapper(int index) const;
  ::TSCE::OwnerUIDMapperArchive* add_owner_uid_mapper();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerUIDMapperArchive >&
      owner_uid_mapper() const;

  // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
  bool has_backing_tables_for_charts() const;
  private:
  bool _internal_has_backing_tables_for_charts() const;
  public:
  void clear_backing_tables_for_charts();
  const ::TSP::UUIDMapArchive& backing_tables_for_charts() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDMapArchive* release_backing_tables_for_charts();
  ::TSP::UUIDMapArchive* mutable_backing_tables_for_charts();
  void set_allocated_backing_tables_for_charts(::TSP::UUIDMapArchive* backing_tables_for_charts);
  private:
  const ::TSP::UUIDMapArchive& _internal_backing_tables_for_charts() const;
  ::TSP::UUIDMapArchive* _internal_mutable_backing_tables_for_charts();
  public:
  void unsafe_arena_set_allocated_backing_tables_for_charts(
      ::TSP::UUIDMapArchive* backing_tables_for_charts);
  ::TSP::UUIDMapArchive* unsafe_arena_release_backing_tables_for_charts();

  // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
  bool has_mapping_purpose() const;
  private:
  bool _internal_has_mapping_purpose() const;
  public:
  void clear_mapping_purpose();
  ::TST::MultiTableRemapperArchive_Purpose mapping_purpose() const;
  void set_mapping_purpose(::TST::MultiTableRemapperArchive_Purpose value);
  private:
  ::TST::MultiTableRemapperArchive_Purpose _internal_mapping_purpose() const;
  void _internal_set_mapping_purpose(::TST::MultiTableRemapperArchive_Purpose value);
  public:

  // required bool should_steal_references = 2;
  bool has_should_steal_references() const;
  private:
  bool _internal_has_should_steal_references() const;
  public:
  void clear_should_steal_references();
  bool should_steal_references() const;
  void set_should_steal_references(bool value);
  private:
  bool _internal_should_steal_references() const;
  void _internal_set_should_steal_references(bool value);
  public:

  // required bool can_reuse_table_names = 3;
  bool has_can_reuse_table_names() const;
  private:
  bool _internal_has_can_reuse_table_names() const;
  public:
  void clear_can_reuse_table_names();
  bool can_reuse_table_names() const;
  void set_can_reuse_table_names(bool value);
  private:
  bool _internal_can_reuse_table_names() const;
  void _internal_set_can_reuse_table_names(bool value);
  public:

  // required bool cross_document_paste = 6;
  bool has_cross_document_paste() const;
  private:
  bool _internal_has_cross_document_paste() const;
  public:
  void clear_cross_document_paste();
  bool cross_document_paste() const;
  void set_cross_document_paste(bool value);
  private:
  bool _internal_cross_document_paste() const;
  void _internal_set_cross_document_paste(bool value);
  public:

  // required bool nested_inner_mapper = 7;
  bool has_nested_inner_mapper() const;
  private:
  bool _internal_has_nested_inner_mapper() const;
  public:
  void clear_nested_inner_mapper();
  bool nested_inner_mapper() const;
  void set_nested_inner_mapper(bool value);
  private:
  bool _internal_nested_inner_mapper() const;
  void _internal_set_nested_inner_mapper(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.MultiTableRemapperArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerUIDMapperArchive > owner_uid_mapper_;
  ::TSP::UUIDMapArchive* backing_tables_for_charts_;
  int mapping_purpose_;
  bool should_steal_references_;
  bool can_reuse_table_names_;
  bool cross_document_paste_;
  bool nested_inner_mapper_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangePropagationMapWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.ChangePropagationMapWrapper) */ {
 public:
  inline ChangePropagationMapWrapper() : ChangePropagationMapWrapper(nullptr) {}
  ~ChangePropagationMapWrapper() override;
  explicit constexpr ChangePropagationMapWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePropagationMapWrapper(const ChangePropagationMapWrapper& from);
  ChangePropagationMapWrapper(ChangePropagationMapWrapper&& from) noexcept
    : ChangePropagationMapWrapper() {
    *this = ::std::move(from);
  }

  inline ChangePropagationMapWrapper& operator=(const ChangePropagationMapWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePropagationMapWrapper& operator=(ChangePropagationMapWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangePropagationMapWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePropagationMapWrapper* internal_default_instance() {
    return reinterpret_cast<const ChangePropagationMapWrapper*>(
               &_ChangePropagationMapWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(ChangePropagationMapWrapper& a, ChangePropagationMapWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePropagationMapWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePropagationMapWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePropagationMapWrapper* New() const final {
    return CreateMaybeMessage<ChangePropagationMapWrapper>(nullptr);
  }

  ChangePropagationMapWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePropagationMapWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePropagationMapWrapper& from);
  void MergeFrom(const ChangePropagationMapWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePropagationMapWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.ChangePropagationMapWrapper";
  }
  protected:
  explicit ChangePropagationMapWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleReplacePrototypesFieldNumber = 2,
    kStyleReplaceReplacementsFieldNumber = 3,
    kStyleModifyStylesFieldNumber = 4,
    kStyleModifyOldPropMapsFieldNumber = 5,
    kStyleModifyNewPropMapsFieldNumber = 6,
    kStyleDeletePrototypesFieldNumber = 7,
    kStyleDeleteReplacementsFieldNumber = 8,
    kTablePresetReplacePrototypeFieldNumber = 9,
    kTablePresetReplaceReplacementFieldNumber = 10,
    kTablePresetDeletePrototypeFieldNumber = 11,
    kTablePresetDeleteReplacementFieldNumber = 12,
    kReplacementBehaviorFieldNumber = 1,
  };
  // repeated .TSP.Reference style_replace_prototypes = 2;
  int style_replace_prototypes_size() const;
  private:
  int _internal_style_replace_prototypes_size() const;
  public:
  void clear_style_replace_prototypes();
  ::TSP::Reference* mutable_style_replace_prototypes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_replace_prototypes();
  private:
  const ::TSP::Reference& _internal_style_replace_prototypes(int index) const;
  ::TSP::Reference* _internal_add_style_replace_prototypes();
  public:
  const ::TSP::Reference& style_replace_prototypes(int index) const;
  ::TSP::Reference* add_style_replace_prototypes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_replace_prototypes() const;

  // repeated .TSP.Reference style_replace_replacements = 3;
  int style_replace_replacements_size() const;
  private:
  int _internal_style_replace_replacements_size() const;
  public:
  void clear_style_replace_replacements();
  ::TSP::Reference* mutable_style_replace_replacements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_replace_replacements();
  private:
  const ::TSP::Reference& _internal_style_replace_replacements(int index) const;
  ::TSP::Reference* _internal_add_style_replace_replacements();
  public:
  const ::TSP::Reference& style_replace_replacements(int index) const;
  ::TSP::Reference* add_style_replace_replacements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_replace_replacements() const;

  // repeated .TSP.Reference style_modify_styles = 4;
  int style_modify_styles_size() const;
  private:
  int _internal_style_modify_styles_size() const;
  public:
  void clear_style_modify_styles();
  ::TSP::Reference* mutable_style_modify_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_modify_styles();
  private:
  const ::TSP::Reference& _internal_style_modify_styles(int index) const;
  ::TSP::Reference* _internal_add_style_modify_styles();
  public:
  const ::TSP::Reference& style_modify_styles(int index) const;
  ::TSP::Reference* add_style_modify_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_modify_styles() const;

  // repeated .TSP.Reference style_modify_old_prop_maps = 5;
  int style_modify_old_prop_maps_size() const;
  private:
  int _internal_style_modify_old_prop_maps_size() const;
  public:
  void clear_style_modify_old_prop_maps();
  ::TSP::Reference* mutable_style_modify_old_prop_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_modify_old_prop_maps();
  private:
  const ::TSP::Reference& _internal_style_modify_old_prop_maps(int index) const;
  ::TSP::Reference* _internal_add_style_modify_old_prop_maps();
  public:
  const ::TSP::Reference& style_modify_old_prop_maps(int index) const;
  ::TSP::Reference* add_style_modify_old_prop_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_modify_old_prop_maps() const;

  // repeated .TSP.Reference style_modify_new_prop_maps = 6;
  int style_modify_new_prop_maps_size() const;
  private:
  int _internal_style_modify_new_prop_maps_size() const;
  public:
  void clear_style_modify_new_prop_maps();
  ::TSP::Reference* mutable_style_modify_new_prop_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_modify_new_prop_maps();
  private:
  const ::TSP::Reference& _internal_style_modify_new_prop_maps(int index) const;
  ::TSP::Reference* _internal_add_style_modify_new_prop_maps();
  public:
  const ::TSP::Reference& style_modify_new_prop_maps(int index) const;
  ::TSP::Reference* add_style_modify_new_prop_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_modify_new_prop_maps() const;

  // repeated .TSP.Reference style_delete_prototypes = 7;
  int style_delete_prototypes_size() const;
  private:
  int _internal_style_delete_prototypes_size() const;
  public:
  void clear_style_delete_prototypes();
  ::TSP::Reference* mutable_style_delete_prototypes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_delete_prototypes();
  private:
  const ::TSP::Reference& _internal_style_delete_prototypes(int index) const;
  ::TSP::Reference* _internal_add_style_delete_prototypes();
  public:
  const ::TSP::Reference& style_delete_prototypes(int index) const;
  ::TSP::Reference* add_style_delete_prototypes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_delete_prototypes() const;

  // repeated .TSP.Reference style_delete_replacements = 8;
  int style_delete_replacements_size() const;
  private:
  int _internal_style_delete_replacements_size() const;
  public:
  void clear_style_delete_replacements();
  ::TSP::Reference* mutable_style_delete_replacements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_style_delete_replacements();
  private:
  const ::TSP::Reference& _internal_style_delete_replacements(int index) const;
  ::TSP::Reference* _internal_add_style_delete_replacements();
  public:
  const ::TSP::Reference& style_delete_replacements(int index) const;
  ::TSP::Reference* add_style_delete_replacements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      style_delete_replacements() const;

  // optional .TSP.Reference table_preset_replace_prototype = 9;
  bool has_table_preset_replace_prototype() const;
  private:
  bool _internal_has_table_preset_replace_prototype() const;
  public:
  void clear_table_preset_replace_prototype();
  const ::TSP::Reference& table_preset_replace_prototype() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_preset_replace_prototype();
  ::TSP::Reference* mutable_table_preset_replace_prototype();
  void set_allocated_table_preset_replace_prototype(::TSP::Reference* table_preset_replace_prototype);
  private:
  const ::TSP::Reference& _internal_table_preset_replace_prototype() const;
  ::TSP::Reference* _internal_mutable_table_preset_replace_prototype();
  public:
  void unsafe_arena_set_allocated_table_preset_replace_prototype(
      ::TSP::Reference* table_preset_replace_prototype);
  ::TSP::Reference* unsafe_arena_release_table_preset_replace_prototype();

  // optional .TSP.Reference table_preset_replace_replacement = 10;
  bool has_table_preset_replace_replacement() const;
  private:
  bool _internal_has_table_preset_replace_replacement() const;
  public:
  void clear_table_preset_replace_replacement();
  const ::TSP::Reference& table_preset_replace_replacement() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_preset_replace_replacement();
  ::TSP::Reference* mutable_table_preset_replace_replacement();
  void set_allocated_table_preset_replace_replacement(::TSP::Reference* table_preset_replace_replacement);
  private:
  const ::TSP::Reference& _internal_table_preset_replace_replacement() const;
  ::TSP::Reference* _internal_mutable_table_preset_replace_replacement();
  public:
  void unsafe_arena_set_allocated_table_preset_replace_replacement(
      ::TSP::Reference* table_preset_replace_replacement);
  ::TSP::Reference* unsafe_arena_release_table_preset_replace_replacement();

  // optional .TSP.Reference table_preset_delete_prototype = 11;
  bool has_table_preset_delete_prototype() const;
  private:
  bool _internal_has_table_preset_delete_prototype() const;
  public:
  void clear_table_preset_delete_prototype();
  const ::TSP::Reference& table_preset_delete_prototype() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_preset_delete_prototype();
  ::TSP::Reference* mutable_table_preset_delete_prototype();
  void set_allocated_table_preset_delete_prototype(::TSP::Reference* table_preset_delete_prototype);
  private:
  const ::TSP::Reference& _internal_table_preset_delete_prototype() const;
  ::TSP::Reference* _internal_mutable_table_preset_delete_prototype();
  public:
  void unsafe_arena_set_allocated_table_preset_delete_prototype(
      ::TSP::Reference* table_preset_delete_prototype);
  ::TSP::Reference* unsafe_arena_release_table_preset_delete_prototype();

  // optional .TSP.Reference table_preset_delete_replacement = 12;
  bool has_table_preset_delete_replacement() const;
  private:
  bool _internal_has_table_preset_delete_replacement() const;
  public:
  void clear_table_preset_delete_replacement();
  const ::TSP::Reference& table_preset_delete_replacement() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_preset_delete_replacement();
  ::TSP::Reference* mutable_table_preset_delete_replacement();
  void set_allocated_table_preset_delete_replacement(::TSP::Reference* table_preset_delete_replacement);
  private:
  const ::TSP::Reference& _internal_table_preset_delete_replacement() const;
  ::TSP::Reference* _internal_mutable_table_preset_delete_replacement();
  public:
  void unsafe_arena_set_allocated_table_preset_delete_replacement(
      ::TSP::Reference* table_preset_delete_replacement);
  ::TSP::Reference* unsafe_arena_release_table_preset_delete_replacement();

  // required int32 replacement_behavior = 1;
  bool has_replacement_behavior() const;
  private:
  bool _internal_has_replacement_behavior() const;
  public:
  void clear_replacement_behavior();
  ::PROTOBUF_NAMESPACE_ID::int32 replacement_behavior() const;
  void set_replacement_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replacement_behavior() const;
  void _internal_set_replacement_behavior(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.ChangePropagationMapWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_replace_prototypes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_replace_replacements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_modify_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_modify_old_prop_maps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_modify_new_prop_maps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_delete_prototypes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > style_delete_replacements_;
  ::TSP::Reference* table_preset_replace_prototype_;
  ::TSP::Reference* table_preset_replace_replacement_;
  ::TSP::Reference* table_preset_delete_prototype_;
  ::TSP::Reference* table_preset_delete_replacement_;
  ::PROTOBUF_NAMESPACE_ID::int32 replacement_behavior_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class SummaryCellVendorArchive_SummaryCellEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.SummaryCellVendorArchive.SummaryCellEntry) */ {
 public:
  inline SummaryCellVendorArchive_SummaryCellEntry() : SummaryCellVendorArchive_SummaryCellEntry(nullptr) {}
  ~SummaryCellVendorArchive_SummaryCellEntry() override;
  explicit constexpr SummaryCellVendorArchive_SummaryCellEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryCellVendorArchive_SummaryCellEntry(const SummaryCellVendorArchive_SummaryCellEntry& from);
  SummaryCellVendorArchive_SummaryCellEntry(SummaryCellVendorArchive_SummaryCellEntry&& from) noexcept
    : SummaryCellVendorArchive_SummaryCellEntry() {
    *this = ::std::move(from);
  }

  inline SummaryCellVendorArchive_SummaryCellEntry& operator=(const SummaryCellVendorArchive_SummaryCellEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryCellVendorArchive_SummaryCellEntry& operator=(SummaryCellVendorArchive_SummaryCellEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryCellVendorArchive_SummaryCellEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryCellVendorArchive_SummaryCellEntry* internal_default_instance() {
    return reinterpret_cast<const SummaryCellVendorArchive_SummaryCellEntry*>(
               &_SummaryCellVendorArchive_SummaryCellEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(SummaryCellVendorArchive_SummaryCellEntry& a, SummaryCellVendorArchive_SummaryCellEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryCellVendorArchive_SummaryCellEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryCellVendorArchive_SummaryCellEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryCellVendorArchive_SummaryCellEntry* New() const final {
    return CreateMaybeMessage<SummaryCellVendorArchive_SummaryCellEntry>(nullptr);
  }

  SummaryCellVendorArchive_SummaryCellEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryCellVendorArchive_SummaryCellEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryCellVendorArchive_SummaryCellEntry& from);
  void MergeFrom(const SummaryCellVendorArchive_SummaryCellEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryCellVendorArchive_SummaryCellEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.SummaryCellVendorArchive.SummaryCellEntry";
  }
  protected:
  explicit SummaryCellVendorArchive_SummaryCellEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWildcardUIDFieldNumber = 1,
    kColumnUIDFieldNumber = 2,
    kCellFieldNumber = 3,
  };
  // required .TSP.UUID wildcardUID = 1;
  bool has_wildcarduid() const;
  private:
  bool _internal_has_wildcarduid() const;
  public:
  void clear_wildcarduid();
  const ::TSP::UUID& wildcarduid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_wildcarduid();
  ::TSP::UUID* mutable_wildcarduid();
  void set_allocated_wildcarduid(::TSP::UUID* wildcarduid);
  private:
  const ::TSP::UUID& _internal_wildcarduid() const;
  ::TSP::UUID* _internal_mutable_wildcarduid();
  public:
  void unsafe_arena_set_allocated_wildcarduid(
      ::TSP::UUID* wildcarduid);
  ::TSP::UUID* unsafe_arena_release_wildcarduid();

  // required .TSP.UUID columnUID = 2;
  bool has_columnuid() const;
  private:
  bool _internal_has_columnuid() const;
  public:
  void clear_columnuid();
  const ::TSP::UUID& columnuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_columnuid();
  ::TSP::UUID* mutable_columnuid();
  void set_allocated_columnuid(::TSP::UUID* columnuid);
  private:
  const ::TSP::UUID& _internal_columnuid() const;
  ::TSP::UUID* _internal_mutable_columnuid();
  public:
  void unsafe_arena_set_allocated_columnuid(
      ::TSP::UUID* columnuid);
  ::TSP::UUID* unsafe_arena_release_columnuid();

  // required .TST.Cell cell = 3;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::TST::Cell& cell() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::Cell* release_cell();
  ::TST::Cell* mutable_cell();
  void set_allocated_cell(::TST::Cell* cell);
  private:
  const ::TST::Cell& _internal_cell() const;
  ::TST::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::TST::Cell* cell);
  ::TST::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:TST.SummaryCellVendorArchive.SummaryCellEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* wildcarduid_;
  ::TSP::UUID* columnuid_;
  ::TST::Cell* cell_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class SummaryCellVendorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.SummaryCellVendorArchive) */ {
 public:
  inline SummaryCellVendorArchive() : SummaryCellVendorArchive(nullptr) {}
  ~SummaryCellVendorArchive() override;
  explicit constexpr SummaryCellVendorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryCellVendorArchive(const SummaryCellVendorArchive& from);
  SummaryCellVendorArchive(SummaryCellVendorArchive&& from) noexcept
    : SummaryCellVendorArchive() {
    *this = ::std::move(from);
  }

  inline SummaryCellVendorArchive& operator=(const SummaryCellVendorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryCellVendorArchive& operator=(SummaryCellVendorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryCellVendorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryCellVendorArchive* internal_default_instance() {
    return reinterpret_cast<const SummaryCellVendorArchive*>(
               &_SummaryCellVendorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(SummaryCellVendorArchive& a, SummaryCellVendorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryCellVendorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryCellVendorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryCellVendorArchive* New() const final {
    return CreateMaybeMessage<SummaryCellVendorArchive>(nullptr);
  }

  SummaryCellVendorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryCellVendorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryCellVendorArchive& from);
  void MergeFrom(const SummaryCellVendorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryCellVendorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.SummaryCellVendorArchive";
  }
  protected:
  explicit SummaryCellVendorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SummaryCellVendorArchive_SummaryCellEntry SummaryCellEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kTableInfoFieldNumber = 1,
  };
  // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TST::SummaryCellVendorArchive_SummaryCellEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::SummaryCellVendorArchive_SummaryCellEntry >*
      mutable_entries();
  private:
  const ::TST::SummaryCellVendorArchive_SummaryCellEntry& _internal_entries(int index) const;
  ::TST::SummaryCellVendorArchive_SummaryCellEntry* _internal_add_entries();
  public:
  const ::TST::SummaryCellVendorArchive_SummaryCellEntry& entries(int index) const;
  ::TST::SummaryCellVendorArchive_SummaryCellEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::SummaryCellVendorArchive_SummaryCellEntry >&
      entries() const;

  // required .TSP.Reference table_info = 1;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // @@protoc_insertion_point(class_scope:TST.SummaryCellVendorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::SummaryCellVendorArchive_SummaryCellEntry > entries_;
  ::TSP::Reference* table_info_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class CategoryOrderArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.CategoryOrderArchive) */ {
 public:
  inline CategoryOrderArchive() : CategoryOrderArchive(nullptr) {}
  ~CategoryOrderArchive() override;
  explicit constexpr CategoryOrderArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoryOrderArchive(const CategoryOrderArchive& from);
  CategoryOrderArchive(CategoryOrderArchive&& from) noexcept
    : CategoryOrderArchive() {
    *this = ::std::move(from);
  }

  inline CategoryOrderArchive& operator=(const CategoryOrderArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryOrderArchive& operator=(CategoryOrderArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryOrderArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryOrderArchive* internal_default_instance() {
    return reinterpret_cast<const CategoryOrderArchive*>(
               &_CategoryOrderArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(CategoryOrderArchive& a, CategoryOrderArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoryOrderArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryOrderArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CategoryOrderArchive* New() const final {
    return CreateMaybeMessage<CategoryOrderArchive>(nullptr);
  }

  CategoryOrderArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CategoryOrderArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CategoryOrderArchive& from);
  void MergeFrom(const CategoryOrderArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoryOrderArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.CategoryOrderArchive";
  }
  protected:
  explicit CategoryOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableInfoFieldNumber = 1,
    kUidMapFieldNumber = 2,
  };
  // required .TSP.Reference table_info = 1;
  bool has_table_info() const;
  private:
  bool _internal_has_table_info() const;
  public:
  void clear_table_info();
  const ::TSP::Reference& table_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_table_info();
  ::TSP::Reference* mutable_table_info();
  void set_allocated_table_info(::TSP::Reference* table_info);
  private:
  const ::TSP::Reference& _internal_table_info() const;
  ::TSP::Reference* _internal_mutable_table_info();
  public:
  void unsafe_arena_set_allocated_table_info(
      ::TSP::Reference* table_info);
  ::TSP::Reference* unsafe_arena_release_table_info();

  // required .TSP.Reference uid_map = 2;
  bool has_uid_map() const;
  private:
  bool _internal_has_uid_map() const;
  public:
  void clear_uid_map();
  const ::TSP::Reference& uid_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_uid_map();
  ::TSP::Reference* mutable_uid_map();
  void set_allocated_uid_map(::TSP::Reference* uid_map);
  private:
  const ::TSP::Reference& _internal_uid_map() const;
  ::TSP::Reference* _internal_mutable_uid_map();
  public:
  void unsafe_arena_set_allocated_uid_map(
      ::TSP::Reference* uid_map);
  ::TSP::Reference* unsafe_arena_release_uid_map();

  // @@protoc_insertion_point(class_scope:TST.CategoryOrderArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* table_info_;
  ::TSP::Reference* uid_map_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderNameMgrTileArchive_NameFragmentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderNameMgrTileArchive.NameFragmentArchive) */ {
 public:
  inline HeaderNameMgrTileArchive_NameFragmentArchive() : HeaderNameMgrTileArchive_NameFragmentArchive(nullptr) {}
  ~HeaderNameMgrTileArchive_NameFragmentArchive() override;
  explicit constexpr HeaderNameMgrTileArchive_NameFragmentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderNameMgrTileArchive_NameFragmentArchive(const HeaderNameMgrTileArchive_NameFragmentArchive& from);
  HeaderNameMgrTileArchive_NameFragmentArchive(HeaderNameMgrTileArchive_NameFragmentArchive&& from) noexcept
    : HeaderNameMgrTileArchive_NameFragmentArchive() {
    *this = ::std::move(from);
  }

  inline HeaderNameMgrTileArchive_NameFragmentArchive& operator=(const HeaderNameMgrTileArchive_NameFragmentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderNameMgrTileArchive_NameFragmentArchive& operator=(HeaderNameMgrTileArchive_NameFragmentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderNameMgrTileArchive_NameFragmentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderNameMgrTileArchive_NameFragmentArchive* internal_default_instance() {
    return reinterpret_cast<const HeaderNameMgrTileArchive_NameFragmentArchive*>(
               &_HeaderNameMgrTileArchive_NameFragmentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(HeaderNameMgrTileArchive_NameFragmentArchive& a, HeaderNameMgrTileArchive_NameFragmentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderNameMgrTileArchive_NameFragmentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderNameMgrTileArchive_NameFragmentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderNameMgrTileArchive_NameFragmentArchive* New() const final {
    return CreateMaybeMessage<HeaderNameMgrTileArchive_NameFragmentArchive>(nullptr);
  }

  HeaderNameMgrTileArchive_NameFragmentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderNameMgrTileArchive_NameFragmentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderNameMgrTileArchive_NameFragmentArchive& from);
  void MergeFrom(const HeaderNameMgrTileArchive_NameFragmentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderNameMgrTileArchive_NameFragmentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderNameMgrTileArchive.NameFragmentArchive";
  }
  protected:
  explicit HeaderNameMgrTileArchive_NameFragmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFragmentFieldNumber = 1,
    kNamePrecedentFieldNumber = 2,
    kUsesOfNameFragmentFieldNumber = 3,
  };
  // required string name_fragment = 1;
  bool has_name_fragment() const;
  private:
  bool _internal_has_name_fragment() const;
  public:
  void clear_name_fragment();
  const std::string& name_fragment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_fragment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_fragment();
  std::string* release_name_fragment();
  void set_allocated_name_fragment(std::string* name_fragment);
  private:
  const std::string& _internal_name_fragment() const;
  void _internal_set_name_fragment(const std::string& value);
  std::string* _internal_mutable_name_fragment();
  public:

  // required .TSCE.CellCoordinateArchive name_precedent = 2;
  bool has_name_precedent() const;
  private:
  bool _internal_has_name_precedent() const;
  public:
  void clear_name_precedent();
  const ::TSCE::CellCoordinateArchive& name_precedent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_name_precedent();
  ::TSCE::CellCoordinateArchive* mutable_name_precedent();
  void set_allocated_name_precedent(::TSCE::CellCoordinateArchive* name_precedent);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_name_precedent() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_name_precedent();
  public:
  void unsafe_arena_set_allocated_name_precedent(
      ::TSCE::CellCoordinateArchive* name_precedent);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_name_precedent();

  // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
  bool has_uses_of_name_fragment() const;
  private:
  bool _internal_has_uses_of_name_fragment() const;
  public:
  void clear_uses_of_name_fragment();
  const ::TSCE::UidCellRefSetArchive& uses_of_name_fragment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::UidCellRefSetArchive* release_uses_of_name_fragment();
  ::TSCE::UidCellRefSetArchive* mutable_uses_of_name_fragment();
  void set_allocated_uses_of_name_fragment(::TSCE::UidCellRefSetArchive* uses_of_name_fragment);
  private:
  const ::TSCE::UidCellRefSetArchive& _internal_uses_of_name_fragment() const;
  ::TSCE::UidCellRefSetArchive* _internal_mutable_uses_of_name_fragment();
  public:
  void unsafe_arena_set_allocated_uses_of_name_fragment(
      ::TSCE::UidCellRefSetArchive* uses_of_name_fragment);
  ::TSCE::UidCellRefSetArchive* unsafe_arena_release_uses_of_name_fragment();

  // @@protoc_insertion_point(class_scope:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_fragment_;
  ::TSCE::CellCoordinateArchive* name_precedent_;
  ::TSCE::UidCellRefSetArchive* uses_of_name_fragment_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderNameMgrTileArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderNameMgrTileArchive) */ {
 public:
  inline HeaderNameMgrTileArchive() : HeaderNameMgrTileArchive(nullptr) {}
  ~HeaderNameMgrTileArchive() override;
  explicit constexpr HeaderNameMgrTileArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderNameMgrTileArchive(const HeaderNameMgrTileArchive& from);
  HeaderNameMgrTileArchive(HeaderNameMgrTileArchive&& from) noexcept
    : HeaderNameMgrTileArchive() {
    *this = ::std::move(from);
  }

  inline HeaderNameMgrTileArchive& operator=(const HeaderNameMgrTileArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderNameMgrTileArchive& operator=(HeaderNameMgrTileArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderNameMgrTileArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderNameMgrTileArchive* internal_default_instance() {
    return reinterpret_cast<const HeaderNameMgrTileArchive*>(
               &_HeaderNameMgrTileArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(HeaderNameMgrTileArchive& a, HeaderNameMgrTileArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderNameMgrTileArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderNameMgrTileArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderNameMgrTileArchive* New() const final {
    return CreateMaybeMessage<HeaderNameMgrTileArchive>(nullptr);
  }

  HeaderNameMgrTileArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderNameMgrTileArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderNameMgrTileArchive& from);
  void MergeFrom(const HeaderNameMgrTileArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderNameMgrTileArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderNameMgrTileArchive";
  }
  protected:
  explicit HeaderNameMgrTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeaderNameMgrTileArchive_NameFragmentArchive NameFragmentArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFragEntriesFieldNumber = 3,
    kFirstFragmentFieldNumber = 1,
    kLastFragmentFieldNumber = 2,
  };
  // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
  int name_frag_entries_size() const;
  private:
  int _internal_name_frag_entries_size() const;
  public:
  void clear_name_frag_entries();
  ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* mutable_name_frag_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >*
      mutable_name_frag_entries();
  private:
  const ::TST::HeaderNameMgrTileArchive_NameFragmentArchive& _internal_name_frag_entries(int index) const;
  ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* _internal_add_name_frag_entries();
  public:
  const ::TST::HeaderNameMgrTileArchive_NameFragmentArchive& name_frag_entries(int index) const;
  ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* add_name_frag_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >&
      name_frag_entries() const;

  // required string first_fragment = 1;
  bool has_first_fragment() const;
  private:
  bool _internal_has_first_fragment() const;
  public:
  void clear_first_fragment();
  const std::string& first_fragment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_fragment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_fragment();
  std::string* release_first_fragment();
  void set_allocated_first_fragment(std::string* first_fragment);
  private:
  const std::string& _internal_first_fragment() const;
  void _internal_set_first_fragment(const std::string& value);
  std::string* _internal_mutable_first_fragment();
  public:

  // required string last_fragment = 2;
  bool has_last_fragment() const;
  private:
  bool _internal_has_last_fragment() const;
  public:
  void clear_last_fragment();
  const std::string& last_fragment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_fragment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_fragment();
  std::string* release_last_fragment();
  void set_allocated_last_fragment(std::string* last_fragment);
  private:
  const std::string& _internal_last_fragment() const;
  void _internal_set_last_fragment(const std::string& value);
  std::string* _internal_mutable_last_fragment();
  public:

  // @@protoc_insertion_point(class_scope:TST.HeaderNameMgrTileArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive > name_frag_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_fragment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_fragment_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderNameMgrArchive_PerTableArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderNameMgrArchive.PerTableArchive) */ {
 public:
  inline HeaderNameMgrArchive_PerTableArchive() : HeaderNameMgrArchive_PerTableArchive(nullptr) {}
  ~HeaderNameMgrArchive_PerTableArchive() override;
  explicit constexpr HeaderNameMgrArchive_PerTableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderNameMgrArchive_PerTableArchive(const HeaderNameMgrArchive_PerTableArchive& from);
  HeaderNameMgrArchive_PerTableArchive(HeaderNameMgrArchive_PerTableArchive&& from) noexcept
    : HeaderNameMgrArchive_PerTableArchive() {
    *this = ::std::move(from);
  }

  inline HeaderNameMgrArchive_PerTableArchive& operator=(const HeaderNameMgrArchive_PerTableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderNameMgrArchive_PerTableArchive& operator=(HeaderNameMgrArchive_PerTableArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderNameMgrArchive_PerTableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderNameMgrArchive_PerTableArchive* internal_default_instance() {
    return reinterpret_cast<const HeaderNameMgrArchive_PerTableArchive*>(
               &_HeaderNameMgrArchive_PerTableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(HeaderNameMgrArchive_PerTableArchive& a, HeaderNameMgrArchive_PerTableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderNameMgrArchive_PerTableArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderNameMgrArchive_PerTableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderNameMgrArchive_PerTableArchive* New() const final {
    return CreateMaybeMessage<HeaderNameMgrArchive_PerTableArchive>(nullptr);
  }

  HeaderNameMgrArchive_PerTableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderNameMgrArchive_PerTableArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderNameMgrArchive_PerTableArchive& from);
  void MergeFrom(const HeaderNameMgrArchive_PerTableArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderNameMgrArchive_PerTableArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderNameMgrArchive.PerTableArchive";
  }
  protected:
  explicit HeaderNameMgrArchive_PerTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderRowUidsFieldNumber = 5,
    kHeaderColumnUidsFieldNumber = 6,
    kUpdateHeaderRowUidsFieldNumber = 7,
    kUpdateHeaderColumnUidsFieldNumber = 8,
    kTableUidFieldNumber = 1,
    kPerTablePrecedentFieldNumber = 2,
    kIsDeletedFieldNumber = 3,
  };
  // repeated .TSP.UUID header_row_uids = 5;
  int header_row_uids_size() const;
  private:
  int _internal_header_row_uids_size() const;
  public:
  void clear_header_row_uids();
  ::TSP::UUID* mutable_header_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_header_row_uids();
  private:
  const ::TSP::UUID& _internal_header_row_uids(int index) const;
  ::TSP::UUID* _internal_add_header_row_uids();
  public:
  const ::TSP::UUID& header_row_uids(int index) const;
  ::TSP::UUID* add_header_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      header_row_uids() const;

  // repeated .TSP.UUID header_column_uids = 6;
  int header_column_uids_size() const;
  private:
  int _internal_header_column_uids_size() const;
  public:
  void clear_header_column_uids();
  ::TSP::UUID* mutable_header_column_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_header_column_uids();
  private:
  const ::TSP::UUID& _internal_header_column_uids(int index) const;
  ::TSP::UUID* _internal_add_header_column_uids();
  public:
  const ::TSP::UUID& header_column_uids(int index) const;
  ::TSP::UUID* add_header_column_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      header_column_uids() const;

  // repeated .TSP.UUID update_header_row_uids = 7;
  int update_header_row_uids_size() const;
  private:
  int _internal_update_header_row_uids_size() const;
  public:
  void clear_update_header_row_uids();
  ::TSP::UUID* mutable_update_header_row_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_update_header_row_uids();
  private:
  const ::TSP::UUID& _internal_update_header_row_uids(int index) const;
  ::TSP::UUID* _internal_add_update_header_row_uids();
  public:
  const ::TSP::UUID& update_header_row_uids(int index) const;
  ::TSP::UUID* add_update_header_row_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      update_header_row_uids() const;

  // repeated .TSP.UUID update_header_column_uids = 8;
  int update_header_column_uids_size() const;
  private:
  int _internal_update_header_column_uids_size() const;
  public:
  void clear_update_header_column_uids();
  ::TSP::UUID* mutable_update_header_column_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_update_header_column_uids();
  private:
  const ::TSP::UUID& _internal_update_header_column_uids(int index) const;
  ::TSP::UUID* _internal_add_update_header_column_uids();
  public:
  const ::TSP::UUID& update_header_column_uids(int index) const;
  ::TSP::UUID* add_update_header_column_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      update_header_column_uids() const;

  // required .TSP.UUID table_uid = 1;
  bool has_table_uid() const;
  private:
  bool _internal_has_table_uid() const;
  public:
  void clear_table_uid();
  const ::TSP::UUID& table_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_table_uid();
  ::TSP::UUID* mutable_table_uid();
  void set_allocated_table_uid(::TSP::UUID* table_uid);
  private:
  const ::TSP::UUID& _internal_table_uid() const;
  ::TSP::UUID* _internal_mutable_table_uid();
  public:
  void unsafe_arena_set_allocated_table_uid(
      ::TSP::UUID* table_uid);
  ::TSP::UUID* unsafe_arena_release_table_uid();

  // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
  bool has_per_table_precedent() const;
  private:
  bool _internal_has_per_table_precedent() const;
  public:
  void clear_per_table_precedent();
  const ::TSCE::CellCoordinateArchive& per_table_precedent() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSCE::CellCoordinateArchive* release_per_table_precedent();
  ::TSCE::CellCoordinateArchive* mutable_per_table_precedent();
  void set_allocated_per_table_precedent(::TSCE::CellCoordinateArchive* per_table_precedent);
  private:
  const ::TSCE::CellCoordinateArchive& _internal_per_table_precedent() const;
  ::TSCE::CellCoordinateArchive* _internal_mutable_per_table_precedent();
  public:
  void unsafe_arena_set_allocated_per_table_precedent(
      ::TSCE::CellCoordinateArchive* per_table_precedent);
  ::TSCE::CellCoordinateArchive* unsafe_arena_release_per_table_precedent();

  // optional bool is_deleted = 3;
  bool has_is_deleted() const;
  private:
  bool _internal_has_is_deleted() const;
  public:
  void clear_is_deleted();
  bool is_deleted() const;
  void set_is_deleted(bool value);
  private:
  bool _internal_is_deleted() const;
  void _internal_set_is_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TST.HeaderNameMgrArchive.PerTableArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > header_row_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > header_column_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > update_header_row_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > update_header_column_uids_;
  ::TSP::UUID* table_uid_;
  ::TSCE::CellCoordinateArchive* per_table_precedent_;
  bool is_deleted_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class HeaderNameMgrArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.HeaderNameMgrArchive) */ {
 public:
  inline HeaderNameMgrArchive() : HeaderNameMgrArchive(nullptr) {}
  ~HeaderNameMgrArchive() override;
  explicit constexpr HeaderNameMgrArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderNameMgrArchive(const HeaderNameMgrArchive& from);
  HeaderNameMgrArchive(HeaderNameMgrArchive&& from) noexcept
    : HeaderNameMgrArchive() {
    *this = ::std::move(from);
  }

  inline HeaderNameMgrArchive& operator=(const HeaderNameMgrArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderNameMgrArchive& operator=(HeaderNameMgrArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderNameMgrArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderNameMgrArchive* internal_default_instance() {
    return reinterpret_cast<const HeaderNameMgrArchive*>(
               &_HeaderNameMgrArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(HeaderNameMgrArchive& a, HeaderNameMgrArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderNameMgrArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderNameMgrArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderNameMgrArchive* New() const final {
    return CreateMaybeMessage<HeaderNameMgrArchive>(nullptr);
  }

  HeaderNameMgrArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderNameMgrArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderNameMgrArchive& from);
  void MergeFrom(const HeaderNameMgrArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderNameMgrArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.HeaderNameMgrArchive";
  }
  protected:
  explicit HeaderNameMgrArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeaderNameMgrArchive_PerTableArchive PerTableArchive;

  // accessors -------------------------------------------------------

  enum : int {
    kPerTablesFieldNumber = 3,
    kNameFragTilesFieldNumber = 4,
    kOwnerUidFieldNumber = 1,
    kNrmOwnerUidFieldNumber = 2,
  };
  // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
  int per_tables_size() const;
  private:
  int _internal_per_tables_size() const;
  public:
  void clear_per_tables();
  ::TST::HeaderNameMgrArchive_PerTableArchive* mutable_per_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrArchive_PerTableArchive >*
      mutable_per_tables();
  private:
  const ::TST::HeaderNameMgrArchive_PerTableArchive& _internal_per_tables(int index) const;
  ::TST::HeaderNameMgrArchive_PerTableArchive* _internal_add_per_tables();
  public:
  const ::TST::HeaderNameMgrArchive_PerTableArchive& per_tables(int index) const;
  ::TST::HeaderNameMgrArchive_PerTableArchive* add_per_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrArchive_PerTableArchive >&
      per_tables() const;

  // repeated .TSP.Reference name_frag_tiles = 4;
  int name_frag_tiles_size() const;
  private:
  int _internal_name_frag_tiles_size() const;
  public:
  void clear_name_frag_tiles();
  ::TSP::Reference* mutable_name_frag_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_name_frag_tiles();
  private:
  const ::TSP::Reference& _internal_name_frag_tiles(int index) const;
  ::TSP::Reference* _internal_add_name_frag_tiles();
  public:
  const ::TSP::Reference& name_frag_tiles(int index) const;
  ::TSP::Reference* add_name_frag_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      name_frag_tiles() const;

  // required .TSP.UUID owner_uid = 1;
  bool has_owner_uid() const;
  private:
  bool _internal_has_owner_uid() const;
  public:
  void clear_owner_uid();
  const ::TSP::UUID& owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_owner_uid();
  ::TSP::UUID* mutable_owner_uid();
  void set_allocated_owner_uid(::TSP::UUID* owner_uid);
  private:
  const ::TSP::UUID& _internal_owner_uid() const;
  ::TSP::UUID* _internal_mutable_owner_uid();
  public:
  void unsafe_arena_set_allocated_owner_uid(
      ::TSP::UUID* owner_uid);
  ::TSP::UUID* unsafe_arena_release_owner_uid();

  // optional .TSP.UUID nrm_owner_uid = 2;
  bool has_nrm_owner_uid() const;
  private:
  bool _internal_has_nrm_owner_uid() const;
  public:
  void clear_nrm_owner_uid();
  const ::TSP::UUID& nrm_owner_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_nrm_owner_uid();
  ::TSP::UUID* mutable_nrm_owner_uid();
  void set_allocated_nrm_owner_uid(::TSP::UUID* nrm_owner_uid);
  private:
  const ::TSP::UUID& _internal_nrm_owner_uid() const;
  ::TSP::UUID* _internal_mutable_nrm_owner_uid();
  public:
  void unsafe_arena_set_allocated_nrm_owner_uid(
      ::TSP::UUID* nrm_owner_uid);
  ::TSP::UUID* unsafe_arena_release_nrm_owner_uid();

  // @@protoc_insertion_point(class_scope:TST.HeaderNameMgrArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrArchive_PerTableArchive > per_tables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > name_frag_tiles_;
  ::TSP::UUID* owner_uid_;
  ::TSP::UUID* nrm_owner_uid_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class WidthHeightCacheFittingEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.WidthHeightCacheFittingEntry) */ {
 public:
  inline WidthHeightCacheFittingEntry() : WidthHeightCacheFittingEntry(nullptr) {}
  ~WidthHeightCacheFittingEntry() override;
  explicit constexpr WidthHeightCacheFittingEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WidthHeightCacheFittingEntry(const WidthHeightCacheFittingEntry& from);
  WidthHeightCacheFittingEntry(WidthHeightCacheFittingEntry&& from) noexcept
    : WidthHeightCacheFittingEntry() {
    *this = ::std::move(from);
  }

  inline WidthHeightCacheFittingEntry& operator=(const WidthHeightCacheFittingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidthHeightCacheFittingEntry& operator=(WidthHeightCacheFittingEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidthHeightCacheFittingEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidthHeightCacheFittingEntry* internal_default_instance() {
    return reinterpret_cast<const WidthHeightCacheFittingEntry*>(
               &_WidthHeightCacheFittingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(WidthHeightCacheFittingEntry& a, WidthHeightCacheFittingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(WidthHeightCacheFittingEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidthHeightCacheFittingEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WidthHeightCacheFittingEntry* New() const final {
    return CreateMaybeMessage<WidthHeightCacheFittingEntry>(nullptr);
  }

  WidthHeightCacheFittingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WidthHeightCacheFittingEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WidthHeightCacheFittingEntry& from);
  void MergeFrom(const WidthHeightCacheFittingEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WidthHeightCacheFittingEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.WidthHeightCacheFittingEntry";
  }
  protected:
  explicit WidthHeightCacheFittingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFittingIndexFieldNumber = 1,
    kFittingSizeFieldNumber = 2,
  };
  // optional uint32 fitting_index = 1;
  bool has_fitting_index() const;
  private:
  bool _internal_has_fitting_index() const;
  public:
  void clear_fitting_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 fitting_index() const;
  void set_fitting_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fitting_index() const;
  void _internal_set_fitting_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float fitting_size = 2;
  bool has_fitting_size() const;
  private:
  bool _internal_has_fitting_size() const;
  public:
  void clear_fitting_size();
  float fitting_size() const;
  void set_fitting_size(float value);
  private:
  float _internal_fitting_size() const;
  void _internal_set_fitting_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:TST.WidthHeightCacheFittingEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fitting_index_;
  float fitting_size_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class WidthHeightCache PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.WidthHeightCache) */ {
 public:
  inline WidthHeightCache() : WidthHeightCache(nullptr) {}
  ~WidthHeightCache() override;
  explicit constexpr WidthHeightCache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WidthHeightCache(const WidthHeightCache& from);
  WidthHeightCache(WidthHeightCache&& from) noexcept
    : WidthHeightCache() {
    *this = ::std::move(from);
  }

  inline WidthHeightCache& operator=(const WidthHeightCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidthHeightCache& operator=(WidthHeightCache&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidthHeightCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidthHeightCache* internal_default_instance() {
    return reinterpret_cast<const WidthHeightCache*>(
               &_WidthHeightCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(WidthHeightCache& a, WidthHeightCache& b) {
    a.Swap(&b);
  }
  inline void Swap(WidthHeightCache* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidthHeightCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WidthHeightCache* New() const final {
    return CreateMaybeMessage<WidthHeightCache>(nullptr);
  }

  WidthHeightCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WidthHeightCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WidthHeightCache& from);
  void MergeFrom(const WidthHeightCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WidthHeightCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.WidthHeightCache";
  }
  protected:
  explicit WidthHeightCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFittingEntriesFieldNumber = 1,
    kColumnsCountFieldNumber = 3,
  };
  // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
  int rows_fitting_entries_size() const;
  private:
  int _internal_rows_fitting_entries_size() const;
  public:
  void clear_rows_fitting_entries();
  ::TST::WidthHeightCacheFittingEntry* mutable_rows_fitting_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::WidthHeightCacheFittingEntry >*
      mutable_rows_fitting_entries();
  private:
  const ::TST::WidthHeightCacheFittingEntry& _internal_rows_fitting_entries(int index) const;
  ::TST::WidthHeightCacheFittingEntry* _internal_add_rows_fitting_entries();
  public:
  const ::TST::WidthHeightCacheFittingEntry& rows_fitting_entries(int index) const;
  ::TST::WidthHeightCacheFittingEntry* add_rows_fitting_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::WidthHeightCacheFittingEntry >&
      rows_fitting_entries() const;

  // optional uint32 columns_count = 3;
  bool has_columns_count() const;
  private:
  bool _internal_has_columns_count() const;
  public:
  void clear_columns_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 columns_count() const;
  void set_columns_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_columns_count() const;
  void _internal_set_columns_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TST.WidthHeightCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::WidthHeightCacheFittingEntry > rows_fitting_entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 columns_count_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// -------------------------------------------------------------------

class LayoutEngineArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TST.LayoutEngineArchive) */ {
 public:
  inline LayoutEngineArchive() : LayoutEngineArchive(nullptr) {}
  ~LayoutEngineArchive() override;
  explicit constexpr LayoutEngineArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayoutEngineArchive(const LayoutEngineArchive& from);
  LayoutEngineArchive(LayoutEngineArchive&& from) noexcept
    : LayoutEngineArchive() {
    *this = ::std::move(from);
  }

  inline LayoutEngineArchive& operator=(const LayoutEngineArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayoutEngineArchive& operator=(LayoutEngineArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayoutEngineArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayoutEngineArchive* internal_default_instance() {
    return reinterpret_cast<const LayoutEngineArchive*>(
               &_LayoutEngineArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(LayoutEngineArchive& a, LayoutEngineArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LayoutEngineArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayoutEngineArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayoutEngineArchive* New() const final {
    return CreateMaybeMessage<LayoutEngineArchive>(nullptr);
  }

  LayoutEngineArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayoutEngineArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayoutEngineArchive& from);
  void MergeFrom(const LayoutEngineArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayoutEngineArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TST.LayoutEngineArchive";
  }
  protected:
  explicit LayoutEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthHeightCacheFieldNumber = 1,
  };
  // optional .TST.WidthHeightCache width_height_cache = 1;
  bool has_width_height_cache() const;
  private:
  bool _internal_has_width_height_cache() const;
  public:
  void clear_width_height_cache();
  const ::TST::WidthHeightCache& width_height_cache() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TST::WidthHeightCache* release_width_height_cache();
  ::TST::WidthHeightCache* mutable_width_height_cache();
  void set_allocated_width_height_cache(::TST::WidthHeightCache* width_height_cache);
  private:
  const ::TST::WidthHeightCache& _internal_width_height_cache() const;
  ::TST::WidthHeightCache* _internal_mutable_width_height_cache();
  public:
  void unsafe_arena_set_allocated_width_height_cache(
      ::TST::WidthHeightCache* width_height_cache);
  ::TST::WidthHeightCache* unsafe_arena_release_width_height_cache();

  // @@protoc_insertion_point(class_scope:TST.LayoutEngineArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TST::WidthHeightCache* width_height_cache_;
  friend struct ::TableStruct_TSTArchives_2eproto;
};
// ===================================================================

static const int kImportWarningSetFieldNumber = 500;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::ImportWarningSetArchive >, 11, false >
  import_warning_set;
static const int kFormatAndValueFieldNumber = 501;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellFormatAndValueArchive >, 11, false >
  format_and_value;
static const int kCellBorderFieldNumber = 503;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellBorderArchive >, 11, false >
  cell_border;
static const int kCommentStorageFieldNumber = 504;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CommentStorageWrapperArchive >, 11, false >
  comment_storage;
static const int kCellSpecFieldNumber = 505;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellSpecArchive >, 11, false >
  cell_spec;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CellID

// required fixed32 packedData = 1;
inline bool CellID::_internal_has_packeddata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellID::has_packeddata() const {
  return _internal_has_packeddata();
}
inline void CellID::clear_packeddata() {
  packeddata_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellID::_internal_packeddata() const {
  return packeddata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellID::packeddata() const {
  // @@protoc_insertion_point(field_get:TST.CellID.packedData)
  return _internal_packeddata();
}
inline void CellID::_internal_set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  packeddata_ = value;
}
inline void CellID::set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packeddata(value);
  // @@protoc_insertion_point(field_set:TST.CellID.packedData)
}

// optional .TSCE.CellCoordinateArchive expanded_coord = 2;
inline bool CellID::_internal_has_expanded_coord() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || expanded_coord_ != nullptr);
  return value;
}
inline bool CellID::has_expanded_coord() const {
  return _internal_has_expanded_coord();
}
inline const ::TSCE::CellCoordinateArchive& CellID::_internal_expanded_coord() const {
  const ::TSCE::CellCoordinateArchive* p = expanded_coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CellID::expanded_coord() const {
  // @@protoc_insertion_point(field_get:TST.CellID.expanded_coord)
  return _internal_expanded_coord();
}
inline void CellID::unsafe_arena_set_allocated_expanded_coord(
    ::TSCE::CellCoordinateArchive* expanded_coord) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expanded_coord_);
  }
  expanded_coord_ = expanded_coord;
  if (expanded_coord) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellID.expanded_coord)
}
inline ::TSCE::CellCoordinateArchive* CellID::release_expanded_coord() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = expanded_coord_;
  expanded_coord_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellID::unsafe_arena_release_expanded_coord() {
  // @@protoc_insertion_point(field_release:TST.CellID.expanded_coord)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = expanded_coord_;
  expanded_coord_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CellID::_internal_mutable_expanded_coord() {
  _has_bits_[0] |= 0x00000001u;
  if (expanded_coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    expanded_coord_ = p;
  }
  return expanded_coord_;
}
inline ::TSCE::CellCoordinateArchive* CellID::mutable_expanded_coord() {
  // @@protoc_insertion_point(field_mutable:TST.CellID.expanded_coord)
  return _internal_mutable_expanded_coord();
}
inline void CellID::set_allocated_expanded_coord(::TSCE::CellCoordinateArchive* expanded_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expanded_coord_);
  }
  if (expanded_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expanded_coord)->GetArena();
    if (message_arena != submessage_arena) {
      expanded_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expanded_coord, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  expanded_coord_ = expanded_coord;
  // @@protoc_insertion_point(field_set_allocated:TST.CellID.expanded_coord)
}

// -------------------------------------------------------------------

// CellUIDLookupListArchive

// optional .TSCE.UidLookupListArchive column_uids = 1;
inline bool CellUIDLookupListArchive::_internal_has_column_uids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_uids_ != nullptr);
  return value;
}
inline bool CellUIDLookupListArchive::has_column_uids() const {
  return _internal_has_column_uids();
}
inline const ::TSCE::UidLookupListArchive& CellUIDLookupListArchive::_internal_column_uids() const {
  const ::TSCE::UidLookupListArchive* p = column_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::UidLookupListArchive&>(
      ::TSCE::_UidLookupListArchive_default_instance_);
}
inline const ::TSCE::UidLookupListArchive& CellUIDLookupListArchive::column_uids() const {
  // @@protoc_insertion_point(field_get:TST.CellUIDLookupListArchive.column_uids)
  return _internal_column_uids();
}
inline void CellUIDLookupListArchive::unsafe_arena_set_allocated_column_uids(
    ::TSCE::UidLookupListArchive* column_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uids_);
  }
  column_uids_ = column_uids;
  if (column_uids) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellUIDLookupListArchive.column_uids)
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::release_column_uids() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::UidLookupListArchive* temp = column_uids_;
  column_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::unsafe_arena_release_column_uids() {
  // @@protoc_insertion_point(field_release:TST.CellUIDLookupListArchive.column_uids)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::UidLookupListArchive* temp = column_uids_;
  column_uids_ = nullptr;
  return temp;
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::_internal_mutable_column_uids() {
  _has_bits_[0] |= 0x00000001u;
  if (column_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::UidLookupListArchive>(GetArena());
    column_uids_ = p;
  }
  return column_uids_;
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::mutable_column_uids() {
  // @@protoc_insertion_point(field_mutable:TST.CellUIDLookupListArchive.column_uids)
  return _internal_mutable_column_uids();
}
inline void CellUIDLookupListArchive::set_allocated_column_uids(::TSCE::UidLookupListArchive* column_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uids_);
  }
  if (column_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uids)->GetArena();
    if (message_arena != submessage_arena) {
      column_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_uids_ = column_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.CellUIDLookupListArchive.column_uids)
}

// optional .TSCE.UidLookupListArchive row_uids = 2;
inline bool CellUIDLookupListArchive::_internal_has_row_uids() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || row_uids_ != nullptr);
  return value;
}
inline bool CellUIDLookupListArchive::has_row_uids() const {
  return _internal_has_row_uids();
}
inline const ::TSCE::UidLookupListArchive& CellUIDLookupListArchive::_internal_row_uids() const {
  const ::TSCE::UidLookupListArchive* p = row_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::UidLookupListArchive&>(
      ::TSCE::_UidLookupListArchive_default_instance_);
}
inline const ::TSCE::UidLookupListArchive& CellUIDLookupListArchive::row_uids() const {
  // @@protoc_insertion_point(field_get:TST.CellUIDLookupListArchive.row_uids)
  return _internal_row_uids();
}
inline void CellUIDLookupListArchive::unsafe_arena_set_allocated_row_uids(
    ::TSCE::UidLookupListArchive* row_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uids_);
  }
  row_uids_ = row_uids;
  if (row_uids) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellUIDLookupListArchive.row_uids)
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::release_row_uids() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::UidLookupListArchive* temp = row_uids_;
  row_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::unsafe_arena_release_row_uids() {
  // @@protoc_insertion_point(field_release:TST.CellUIDLookupListArchive.row_uids)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::UidLookupListArchive* temp = row_uids_;
  row_uids_ = nullptr;
  return temp;
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::_internal_mutable_row_uids() {
  _has_bits_[0] |= 0x00000002u;
  if (row_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::UidLookupListArchive>(GetArena());
    row_uids_ = p;
  }
  return row_uids_;
}
inline ::TSCE::UidLookupListArchive* CellUIDLookupListArchive::mutable_row_uids() {
  // @@protoc_insertion_point(field_mutable:TST.CellUIDLookupListArchive.row_uids)
  return _internal_mutable_row_uids();
}
inline void CellUIDLookupListArchive::set_allocated_row_uids(::TSCE::UidLookupListArchive* row_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uids_);
  }
  if (row_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_uids)->GetArena();
    if (message_arena != submessage_arena) {
      row_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  row_uids_ = row_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.CellUIDLookupListArchive.row_uids)
}

// repeated int32 column_indexes = 3;
inline int CellUIDLookupListArchive::_internal_column_indexes_size() const {
  return column_indexes_.size();
}
inline int CellUIDLookupListArchive::column_indexes_size() const {
  return _internal_column_indexes_size();
}
inline void CellUIDLookupListArchive::clear_column_indexes() {
  column_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDLookupListArchive::_internal_column_indexes(int index) const {
  return column_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDLookupListArchive::column_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDLookupListArchive.column_indexes)
  return _internal_column_indexes(index);
}
inline void CellUIDLookupListArchive::set_column_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  column_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CellUIDLookupListArchive.column_indexes)
}
inline void CellUIDLookupListArchive::_internal_add_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  column_indexes_.Add(value);
}
inline void CellUIDLookupListArchive::add_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_column_indexes(value);
  // @@protoc_insertion_point(field_add:TST.CellUIDLookupListArchive.column_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDLookupListArchive::_internal_column_indexes() const {
  return column_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDLookupListArchive::column_indexes() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDLookupListArchive.column_indexes)
  return _internal_column_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDLookupListArchive::_internal_mutable_column_indexes() {
  return &column_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDLookupListArchive::mutable_column_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDLookupListArchive.column_indexes)
  return _internal_mutable_column_indexes();
}

// repeated int32 row_indexes = 4;
inline int CellUIDLookupListArchive::_internal_row_indexes_size() const {
  return row_indexes_.size();
}
inline int CellUIDLookupListArchive::row_indexes_size() const {
  return _internal_row_indexes_size();
}
inline void CellUIDLookupListArchive::clear_row_indexes() {
  row_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDLookupListArchive::_internal_row_indexes(int index) const {
  return row_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDLookupListArchive::row_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDLookupListArchive.row_indexes)
  return _internal_row_indexes(index);
}
inline void CellUIDLookupListArchive::set_row_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  row_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CellUIDLookupListArchive.row_indexes)
}
inline void CellUIDLookupListArchive::_internal_add_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  row_indexes_.Add(value);
}
inline void CellUIDLookupListArchive::add_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_row_indexes(value);
  // @@protoc_insertion_point(field_add:TST.CellUIDLookupListArchive.row_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDLookupListArchive::_internal_row_indexes() const {
  return row_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDLookupListArchive::row_indexes() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDLookupListArchive.row_indexes)
  return _internal_row_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDLookupListArchive::_internal_mutable_row_indexes() {
  return &row_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDLookupListArchive::mutable_row_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDLookupListArchive.row_indexes)
  return _internal_mutable_row_indexes();
}

// -------------------------------------------------------------------

// CellUIDListArchive

// repeated .TSP.UUID row_uids = 1;
inline int CellUIDListArchive::_internal_row_uids_size() const {
  return row_uids_.size();
}
inline int CellUIDListArchive::row_uids_size() const {
  return _internal_row_uids_size();
}
inline ::TSP::UUID* CellUIDListArchive::mutable_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellUIDListArchive.row_uids)
  return row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CellUIDListArchive::mutable_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDListArchive.row_uids)
  return &row_uids_;
}
inline const ::TSP::UUID& CellUIDListArchive::_internal_row_uids(int index) const {
  return row_uids_.Get(index);
}
inline const ::TSP::UUID& CellUIDListArchive::row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDListArchive.row_uids)
  return _internal_row_uids(index);
}
inline ::TSP::UUID* CellUIDListArchive::_internal_add_row_uids() {
  return row_uids_.Add();
}
inline ::TSP::UUID* CellUIDListArchive::add_row_uids() {
  // @@protoc_insertion_point(field_add:TST.CellUIDListArchive.row_uids)
  return _internal_add_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CellUIDListArchive::row_uids() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDListArchive.row_uids)
  return row_uids_;
}

// repeated .TSP.UUID column_uids = 2;
inline int CellUIDListArchive::_internal_column_uids_size() const {
  return column_uids_.size();
}
inline int CellUIDListArchive::column_uids_size() const {
  return _internal_column_uids_size();
}
inline ::TSP::UUID* CellUIDListArchive::mutable_column_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellUIDListArchive.column_uids)
  return column_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CellUIDListArchive::mutable_column_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDListArchive.column_uids)
  return &column_uids_;
}
inline const ::TSP::UUID& CellUIDListArchive::_internal_column_uids(int index) const {
  return column_uids_.Get(index);
}
inline const ::TSP::UUID& CellUIDListArchive::column_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDListArchive.column_uids)
  return _internal_column_uids(index);
}
inline ::TSP::UUID* CellUIDListArchive::_internal_add_column_uids() {
  return column_uids_.Add();
}
inline ::TSP::UUID* CellUIDListArchive::add_column_uids() {
  // @@protoc_insertion_point(field_add:TST.CellUIDListArchive.column_uids)
  return _internal_add_column_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CellUIDListArchive::column_uids() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDListArchive.column_uids)
  return column_uids_;
}

// repeated int32 compressed_row_indexes = 3;
inline int CellUIDListArchive::_internal_compressed_row_indexes_size() const {
  return compressed_row_indexes_.size();
}
inline int CellUIDListArchive::compressed_row_indexes_size() const {
  return _internal_compressed_row_indexes_size();
}
inline void CellUIDListArchive::clear_compressed_row_indexes() {
  compressed_row_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDListArchive::_internal_compressed_row_indexes(int index) const {
  return compressed_row_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDListArchive::compressed_row_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDListArchive.compressed_row_indexes)
  return _internal_compressed_row_indexes(index);
}
inline void CellUIDListArchive::set_compressed_row_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  compressed_row_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CellUIDListArchive.compressed_row_indexes)
}
inline void CellUIDListArchive::_internal_add_compressed_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  compressed_row_indexes_.Add(value);
}
inline void CellUIDListArchive::add_compressed_row_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_compressed_row_indexes(value);
  // @@protoc_insertion_point(field_add:TST.CellUIDListArchive.compressed_row_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDListArchive::_internal_compressed_row_indexes() const {
  return compressed_row_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDListArchive::compressed_row_indexes() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDListArchive.compressed_row_indexes)
  return _internal_compressed_row_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDListArchive::_internal_mutable_compressed_row_indexes() {
  return &compressed_row_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDListArchive::mutable_compressed_row_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDListArchive.compressed_row_indexes)
  return _internal_mutable_compressed_row_indexes();
}

// repeated int32 compressed_column_indexes = 4;
inline int CellUIDListArchive::_internal_compressed_column_indexes_size() const {
  return compressed_column_indexes_.size();
}
inline int CellUIDListArchive::compressed_column_indexes_size() const {
  return _internal_compressed_column_indexes_size();
}
inline void CellUIDListArchive::clear_compressed_column_indexes() {
  compressed_column_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDListArchive::_internal_compressed_column_indexes(int index) const {
  return compressed_column_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellUIDListArchive::compressed_column_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDListArchive.compressed_column_indexes)
  return _internal_compressed_column_indexes(index);
}
inline void CellUIDListArchive::set_compressed_column_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  compressed_column_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.CellUIDListArchive.compressed_column_indexes)
}
inline void CellUIDListArchive::_internal_add_compressed_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  compressed_column_indexes_.Add(value);
}
inline void CellUIDListArchive::add_compressed_column_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_compressed_column_indexes(value);
  // @@protoc_insertion_point(field_add:TST.CellUIDListArchive.compressed_column_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDListArchive::_internal_compressed_column_indexes() const {
  return compressed_column_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CellUIDListArchive::compressed_column_indexes() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDListArchive.compressed_column_indexes)
  return _internal_compressed_column_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDListArchive::_internal_mutable_compressed_column_indexes() {
  return &compressed_column_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CellUIDListArchive::mutable_compressed_column_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDListArchive.compressed_column_indexes)
  return _internal_mutable_compressed_column_indexes();
}

// optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
inline bool CellUIDListArchive::_internal_has_uncompressed_lookup_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uncompressed_lookup_list_ != nullptr);
  return value;
}
inline bool CellUIDListArchive::has_uncompressed_lookup_list() const {
  return _internal_has_uncompressed_lookup_list();
}
inline void CellUIDListArchive::clear_uncompressed_lookup_list() {
  if (uncompressed_lookup_list_ != nullptr) uncompressed_lookup_list_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellUIDLookupListArchive& CellUIDListArchive::_internal_uncompressed_lookup_list() const {
  const ::TST::CellUIDLookupListArchive* p = uncompressed_lookup_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDLookupListArchive&>(
      ::TST::_CellUIDLookupListArchive_default_instance_);
}
inline const ::TST::CellUIDLookupListArchive& CellUIDListArchive::uncompressed_lookup_list() const {
  // @@protoc_insertion_point(field_get:TST.CellUIDListArchive.uncompressed_lookup_list)
  return _internal_uncompressed_lookup_list();
}
inline void CellUIDListArchive::unsafe_arena_set_allocated_uncompressed_lookup_list(
    ::TST::CellUIDLookupListArchive* uncompressed_lookup_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uncompressed_lookup_list_);
  }
  uncompressed_lookup_list_ = uncompressed_lookup_list;
  if (uncompressed_lookup_list) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellUIDListArchive.uncompressed_lookup_list)
}
inline ::TST::CellUIDLookupListArchive* CellUIDListArchive::release_uncompressed_lookup_list() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellUIDLookupListArchive* temp = uncompressed_lookup_list_;
  uncompressed_lookup_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDLookupListArchive* CellUIDListArchive::unsafe_arena_release_uncompressed_lookup_list() {
  // @@protoc_insertion_point(field_release:TST.CellUIDListArchive.uncompressed_lookup_list)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellUIDLookupListArchive* temp = uncompressed_lookup_list_;
  uncompressed_lookup_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDLookupListArchive* CellUIDListArchive::_internal_mutable_uncompressed_lookup_list() {
  _has_bits_[0] |= 0x00000001u;
  if (uncompressed_lookup_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDLookupListArchive>(GetArena());
    uncompressed_lookup_list_ = p;
  }
  return uncompressed_lookup_list_;
}
inline ::TST::CellUIDLookupListArchive* CellUIDListArchive::mutable_uncompressed_lookup_list() {
  // @@protoc_insertion_point(field_mutable:TST.CellUIDListArchive.uncompressed_lookup_list)
  return _internal_mutable_uncompressed_lookup_list();
}
inline void CellUIDListArchive::set_allocated_uncompressed_lookup_list(::TST::CellUIDLookupListArchive* uncompressed_lookup_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uncompressed_lookup_list_;
  }
  if (uncompressed_lookup_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uncompressed_lookup_list);
    if (message_arena != submessage_arena) {
      uncompressed_lookup_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uncompressed_lookup_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uncompressed_lookup_list_ = uncompressed_lookup_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CellUIDListArchive.uncompressed_lookup_list)
}

// -------------------------------------------------------------------

// TableSize

// required fixed32 packedData = 1;
inline bool TableSize::_internal_has_packeddata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableSize::has_packeddata() const {
  return _internal_has_packeddata();
}
inline void TableSize::clear_packeddata() {
  packeddata_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSize::_internal_packeddata() const {
  return packeddata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSize::packeddata() const {
  // @@protoc_insertion_point(field_get:TST.TableSize.packedData)
  return _internal_packeddata();
}
inline void TableSize::_internal_set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  packeddata_ = value;
}
inline void TableSize::set_packeddata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packeddata(value);
  // @@protoc_insertion_point(field_set:TST.TableSize.packedData)
}

// optional uint32 num_columns = 2;
inline bool TableSize::_internal_has_num_columns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableSize::has_num_columns() const {
  return _internal_has_num_columns();
}
inline void TableSize::clear_num_columns() {
  num_columns_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSize::_internal_num_columns() const {
  return num_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSize::num_columns() const {
  // @@protoc_insertion_point(field_get:TST.TableSize.num_columns)
  return _internal_num_columns();
}
inline void TableSize::_internal_set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_columns_ = value;
}
inline void TableSize::set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_columns(value);
  // @@protoc_insertion_point(field_set:TST.TableSize.num_columns)
}

// optional uint32 num_rows = 3;
inline bool TableSize::_internal_has_num_rows() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TableSize::has_num_rows() const {
  return _internal_has_num_rows();
}
inline void TableSize::clear_num_rows() {
  num_rows_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSize::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSize::num_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableSize.num_rows)
  return _internal_num_rows();
}
inline void TableSize::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_rows_ = value;
}
inline void TableSize::set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableSize.num_rows)
}

// -------------------------------------------------------------------

// ExpandedTableSize

// required uint32 num_columns = 1;
inline bool ExpandedTableSize::_internal_has_num_columns() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpandedTableSize::has_num_columns() const {
  return _internal_has_num_columns();
}
inline void ExpandedTableSize::clear_num_columns() {
  num_columns_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTableSize::_internal_num_columns() const {
  return num_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTableSize::num_columns() const {
  // @@protoc_insertion_point(field_get:TST.ExpandedTableSize.num_columns)
  return _internal_num_columns();
}
inline void ExpandedTableSize::_internal_set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_columns_ = value;
}
inline void ExpandedTableSize::set_num_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_columns(value);
  // @@protoc_insertion_point(field_set:TST.ExpandedTableSize.num_columns)
}

// required uint32 num_rows = 2;
inline bool ExpandedTableSize::_internal_has_num_rows() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpandedTableSize::has_num_rows() const {
  return _internal_has_num_rows();
}
inline void ExpandedTableSize::clear_num_rows() {
  num_rows_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTableSize::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExpandedTableSize::num_rows() const {
  // @@protoc_insertion_point(field_get:TST.ExpandedTableSize.num_rows)
  return _internal_num_rows();
}
inline void ExpandedTableSize::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_rows_ = value;
}
inline void ExpandedTableSize::set_num_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:TST.ExpandedTableSize.num_rows)
}

// -------------------------------------------------------------------

// CellRange

// required .TST.CellID origin = 1;
inline bool CellRange::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || origin_ != nullptr);
  return value;
}
inline bool CellRange::has_origin() const {
  return _internal_has_origin();
}
inline void CellRange::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellID& CellRange::_internal_origin() const {
  const ::TST::CellID* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& CellRange::origin() const {
  // @@protoc_insertion_point(field_get:TST.CellRange.origin)
  return _internal_origin();
}
inline void CellRange::unsafe_arena_set_allocated_origin(
    ::TST::CellID* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellRange.origin)
}
inline ::TST::CellID* CellRange::release_origin() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = origin_;
  origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* CellRange::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:TST.CellRange.origin)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::TST::CellID* CellRange::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::TST::CellID* CellRange::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:TST.CellRange.origin)
  return _internal_mutable_origin();
}
inline void CellRange::set_allocated_origin(::TST::CellID* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:TST.CellRange.origin)
}

// required .TST.TableSize size = 2;
inline bool CellRange::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool CellRange::has_size() const {
  return _internal_has_size();
}
inline void CellRange::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::TableSize& CellRange::_internal_size() const {
  const ::TST::TableSize* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSize&>(
      ::TST::_TableSize_default_instance_);
}
inline const ::TST::TableSize& CellRange::size() const {
  // @@protoc_insertion_point(field_get:TST.CellRange.size)
  return _internal_size();
}
inline void CellRange::unsafe_arena_set_allocated_size(
    ::TST::TableSize* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellRange.size)
}
inline ::TST::TableSize* CellRange::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::TableSize* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TableSize* CellRange::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:TST.CellRange.size)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::TableSize* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::TST::TableSize* CellRange::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSize>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::TST::TableSize* CellRange::mutable_size() {
  // @@protoc_insertion_point(field_mutable:TST.CellRange.size)
  return _internal_mutable_size();
}
inline void CellRange::set_allocated_size(::TST::TableSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:TST.CellRange.size)
}

// -------------------------------------------------------------------

// ExpandedCellRange

// required .TSCE.CellCoordinateArchive origin = 1;
inline bool ExpandedCellRange::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || origin_ != nullptr);
  return value;
}
inline bool ExpandedCellRange::has_origin() const {
  return _internal_has_origin();
}
inline const ::TSCE::CellCoordinateArchive& ExpandedCellRange::_internal_origin() const {
  const ::TSCE::CellCoordinateArchive* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& ExpandedCellRange::origin() const {
  // @@protoc_insertion_point(field_get:TST.ExpandedCellRange.origin)
  return _internal_origin();
}
inline void ExpandedCellRange::unsafe_arena_set_allocated_origin(
    ::TSCE::CellCoordinateArchive* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ExpandedCellRange.origin)
}
inline ::TSCE::CellCoordinateArchive* ExpandedCellRange::release_origin() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = origin_;
  origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* ExpandedCellRange::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:TST.ExpandedCellRange.origin)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* ExpandedCellRange::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::TSCE::CellCoordinateArchive* ExpandedCellRange::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:TST.ExpandedCellRange.origin)
  return _internal_mutable_origin();
}
inline void ExpandedCellRange::set_allocated_origin(::TSCE::CellCoordinateArchive* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin)->GetArena();
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:TST.ExpandedCellRange.origin)
}

// required .TST.ExpandedTableSize size = 2;
inline bool ExpandedCellRange::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool ExpandedCellRange::has_size() const {
  return _internal_has_size();
}
inline void ExpandedCellRange::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ExpandedTableSize& ExpandedCellRange::_internal_size() const {
  const ::TST::ExpandedTableSize* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpandedTableSize&>(
      ::TST::_ExpandedTableSize_default_instance_);
}
inline const ::TST::ExpandedTableSize& ExpandedCellRange::size() const {
  // @@protoc_insertion_point(field_get:TST.ExpandedCellRange.size)
  return _internal_size();
}
inline void ExpandedCellRange::unsafe_arena_set_allocated_size(
    ::TST::ExpandedTableSize* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ExpandedCellRange.size)
}
inline ::TST::ExpandedTableSize* ExpandedCellRange::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpandedTableSize* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpandedTableSize* ExpandedCellRange::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:TST.ExpandedCellRange.size)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpandedTableSize* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::TST::ExpandedTableSize* ExpandedCellRange::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpandedTableSize>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::TST::ExpandedTableSize* ExpandedCellRange::mutable_size() {
  // @@protoc_insertion_point(field_mutable:TST.ExpandedCellRange.size)
  return _internal_mutable_size();
}
inline void ExpandedCellRange::set_allocated_size(::TST::ExpandedTableSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:TST.ExpandedCellRange.size)
}

// -------------------------------------------------------------------

// TableSelection

// required .TST.CellRange cellRange = 1;
inline bool TableSelection::_internal_has_cellrange() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cellrange_ != nullptr);
  return value;
}
inline bool TableSelection::has_cellrange() const {
  return _internal_has_cellrange();
}
inline void TableSelection::clear_cellrange() {
  if (cellrange_ != nullptr) cellrange_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellRange& TableSelection::_internal_cellrange() const {
  const ::TST::CellRange* p = cellrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& TableSelection::cellrange() const {
  // @@protoc_insertion_point(field_get:TST.TableSelection.cellRange)
  return _internal_cellrange();
}
inline void TableSelection::unsafe_arena_set_allocated_cellrange(
    ::TST::CellRange* cellrange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellrange_);
  }
  cellrange_ = cellrange;
  if (cellrange) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableSelection.cellRange)
}
inline ::TST::CellRange* TableSelection::release_cellrange() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellRange* temp = cellrange_;
  cellrange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRange* TableSelection::unsafe_arena_release_cellrange() {
  // @@protoc_insertion_point(field_release:TST.TableSelection.cellRange)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellRange* temp = cellrange_;
  cellrange_ = nullptr;
  return temp;
}
inline ::TST::CellRange* TableSelection::_internal_mutable_cellrange() {
  _has_bits_[0] |= 0x00000001u;
  if (cellrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArena());
    cellrange_ = p;
  }
  return cellrange_;
}
inline ::TST::CellRange* TableSelection::mutable_cellrange() {
  // @@protoc_insertion_point(field_mutable:TST.TableSelection.cellRange)
  return _internal_mutable_cellrange();
}
inline void TableSelection::set_allocated_cellrange(::TST::CellRange* cellrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cellrange_;
  }
  if (cellrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cellrange);
    if (message_arena != submessage_arena) {
      cellrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellrange, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cellrange_ = cellrange;
  // @@protoc_insertion_point(field_set_allocated:TST.TableSelection.cellRange)
}

// required .TST.CellRange extendedCellRange = 2;
inline bool TableSelection::_internal_has_extendedcellrange() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || extendedcellrange_ != nullptr);
  return value;
}
inline bool TableSelection::has_extendedcellrange() const {
  return _internal_has_extendedcellrange();
}
inline void TableSelection::clear_extendedcellrange() {
  if (extendedcellrange_ != nullptr) extendedcellrange_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CellRange& TableSelection::_internal_extendedcellrange() const {
  const ::TST::CellRange* p = extendedcellrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& TableSelection::extendedcellrange() const {
  // @@protoc_insertion_point(field_get:TST.TableSelection.extendedCellRange)
  return _internal_extendedcellrange();
}
inline void TableSelection::unsafe_arena_set_allocated_extendedcellrange(
    ::TST::CellRange* extendedcellrange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extendedcellrange_);
  }
  extendedcellrange_ = extendedcellrange;
  if (extendedcellrange) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableSelection.extendedCellRange)
}
inline ::TST::CellRange* TableSelection::release_extendedcellrange() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellRange* temp = extendedcellrange_;
  extendedcellrange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRange* TableSelection::unsafe_arena_release_extendedcellrange() {
  // @@protoc_insertion_point(field_release:TST.TableSelection.extendedCellRange)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellRange* temp = extendedcellrange_;
  extendedcellrange_ = nullptr;
  return temp;
}
inline ::TST::CellRange* TableSelection::_internal_mutable_extendedcellrange() {
  _has_bits_[0] |= 0x00000002u;
  if (extendedcellrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArena());
    extendedcellrange_ = p;
  }
  return extendedcellrange_;
}
inline ::TST::CellRange* TableSelection::mutable_extendedcellrange() {
  // @@protoc_insertion_point(field_mutable:TST.TableSelection.extendedCellRange)
  return _internal_mutable_extendedcellrange();
}
inline void TableSelection::set_allocated_extendedcellrange(::TST::CellRange* extendedcellrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extendedcellrange_;
  }
  if (extendedcellrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extendedcellrange);
    if (message_arena != submessage_arena) {
      extendedcellrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendedcellrange, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  extendedcellrange_ = extendedcellrange;
  // @@protoc_insertion_point(field_set_allocated:TST.TableSelection.extendedCellRange)
}

// required bool extendedCellRangeValid = 3;
inline bool TableSelection::_internal_has_extendedcellrangevalid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TableSelection::has_extendedcellrangevalid() const {
  return _internal_has_extendedcellrangevalid();
}
inline void TableSelection::clear_extendedcellrangevalid() {
  extendedcellrangevalid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TableSelection::_internal_extendedcellrangevalid() const {
  return extendedcellrangevalid_;
}
inline bool TableSelection::extendedcellrangevalid() const {
  // @@protoc_insertion_point(field_get:TST.TableSelection.extendedCellRangeValid)
  return _internal_extendedcellrangevalid();
}
inline void TableSelection::_internal_set_extendedcellrangevalid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  extendedcellrangevalid_ = value;
}
inline void TableSelection::set_extendedcellrangevalid(bool value) {
  _internal_set_extendedcellrangevalid(value);
  // @@protoc_insertion_point(field_set:TST.TableSelection.extendedCellRangeValid)
}

// required .TST.SelectionTypeArchive selection_type = 4;
inline bool TableSelection::_internal_has_selection_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TableSelection::has_selection_type() const {
  return _internal_has_selection_type();
}
inline void TableSelection::clear_selection_type() {
  selection_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TST::SelectionTypeArchive TableSelection::_internal_selection_type() const {
  return static_cast< ::TST::SelectionTypeArchive >(selection_type_);
}
inline ::TST::SelectionTypeArchive TableSelection::selection_type() const {
  // @@protoc_insertion_point(field_get:TST.TableSelection.selection_type)
  return _internal_selection_type();
}
inline void TableSelection::_internal_set_selection_type(::TST::SelectionTypeArchive value) {
  assert(::TST::SelectionTypeArchive_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  selection_type_ = value;
}
inline void TableSelection::set_selection_type(::TST::SelectionTypeArchive value) {
  _internal_set_selection_type(value);
  // @@protoc_insertion_point(field_set:TST.TableSelection.selection_type)
}

// -------------------------------------------------------------------

// TileRowInfo

// required uint32 tile_row_index = 1;
inline bool TileRowInfo::_internal_has_tile_row_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TileRowInfo::has_tile_row_index() const {
  return _internal_has_tile_row_index();
}
inline void TileRowInfo::clear_tile_row_index() {
  tile_row_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileRowInfo::_internal_tile_row_index() const {
  return tile_row_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileRowInfo::tile_row_index() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.tile_row_index)
  return _internal_tile_row_index();
}
inline void TileRowInfo::_internal_set_tile_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tile_row_index_ = value;
}
inline void TileRowInfo::set_tile_row_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tile_row_index(value);
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.tile_row_index)
}

// required uint32 cell_count = 2;
inline bool TileRowInfo::_internal_has_cell_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TileRowInfo::has_cell_count() const {
  return _internal_has_cell_count();
}
inline void TileRowInfo::clear_cell_count() {
  cell_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileRowInfo::_internal_cell_count() const {
  return cell_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileRowInfo::cell_count() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.cell_count)
  return _internal_cell_count();
}
inline void TileRowInfo::_internal_set_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  cell_count_ = value;
}
inline void TileRowInfo::set_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_count(value);
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.cell_count)
}

// required bytes cell_storage_buffer_pre_bnc = 3;
inline bool TileRowInfo::_internal_has_cell_storage_buffer_pre_bnc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileRowInfo::has_cell_storage_buffer_pre_bnc() const {
  return _internal_has_cell_storage_buffer_pre_bnc();
}
inline void TileRowInfo::clear_cell_storage_buffer_pre_bnc() {
  cell_storage_buffer_pre_bnc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TileRowInfo::cell_storage_buffer_pre_bnc() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.cell_storage_buffer_pre_bnc)
  return _internal_cell_storage_buffer_pre_bnc();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TileRowInfo::set_cell_storage_buffer_pre_bnc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cell_storage_buffer_pre_bnc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.cell_storage_buffer_pre_bnc)
}
inline std::string* TileRowInfo::mutable_cell_storage_buffer_pre_bnc() {
  // @@protoc_insertion_point(field_mutable:TST.TileRowInfo.cell_storage_buffer_pre_bnc)
  return _internal_mutable_cell_storage_buffer_pre_bnc();
}
inline const std::string& TileRowInfo::_internal_cell_storage_buffer_pre_bnc() const {
  return cell_storage_buffer_pre_bnc_.Get();
}
inline void TileRowInfo::_internal_set_cell_storage_buffer_pre_bnc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cell_storage_buffer_pre_bnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TileRowInfo::_internal_mutable_cell_storage_buffer_pre_bnc() {
  _has_bits_[0] |= 0x00000001u;
  return cell_storage_buffer_pre_bnc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TileRowInfo::release_cell_storage_buffer_pre_bnc() {
  // @@protoc_insertion_point(field_release:TST.TileRowInfo.cell_storage_buffer_pre_bnc)
  if (!_internal_has_cell_storage_buffer_pre_bnc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cell_storage_buffer_pre_bnc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRowInfo::set_allocated_cell_storage_buffer_pre_bnc(std::string* cell_storage_buffer_pre_bnc) {
  if (cell_storage_buffer_pre_bnc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_storage_buffer_pre_bnc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_storage_buffer_pre_bnc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TileRowInfo.cell_storage_buffer_pre_bnc)
}

// required bytes cell_offsets_pre_bnc = 4;
inline bool TileRowInfo::_internal_has_cell_offsets_pre_bnc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileRowInfo::has_cell_offsets_pre_bnc() const {
  return _internal_has_cell_offsets_pre_bnc();
}
inline void TileRowInfo::clear_cell_offsets_pre_bnc() {
  cell_offsets_pre_bnc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TileRowInfo::cell_offsets_pre_bnc() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.cell_offsets_pre_bnc)
  return _internal_cell_offsets_pre_bnc();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TileRowInfo::set_cell_offsets_pre_bnc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cell_offsets_pre_bnc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.cell_offsets_pre_bnc)
}
inline std::string* TileRowInfo::mutable_cell_offsets_pre_bnc() {
  // @@protoc_insertion_point(field_mutable:TST.TileRowInfo.cell_offsets_pre_bnc)
  return _internal_mutable_cell_offsets_pre_bnc();
}
inline const std::string& TileRowInfo::_internal_cell_offsets_pre_bnc() const {
  return cell_offsets_pre_bnc_.Get();
}
inline void TileRowInfo::_internal_set_cell_offsets_pre_bnc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cell_offsets_pre_bnc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TileRowInfo::_internal_mutable_cell_offsets_pre_bnc() {
  _has_bits_[0] |= 0x00000002u;
  return cell_offsets_pre_bnc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TileRowInfo::release_cell_offsets_pre_bnc() {
  // @@protoc_insertion_point(field_release:TST.TileRowInfo.cell_offsets_pre_bnc)
  if (!_internal_has_cell_offsets_pre_bnc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cell_offsets_pre_bnc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRowInfo::set_allocated_cell_offsets_pre_bnc(std::string* cell_offsets_pre_bnc) {
  if (cell_offsets_pre_bnc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_offsets_pre_bnc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_offsets_pre_bnc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TileRowInfo.cell_offsets_pre_bnc)
}

// optional uint32 storage_version = 5;
inline bool TileRowInfo::_internal_has_storage_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TileRowInfo::has_storage_version() const {
  return _internal_has_storage_version();
}
inline void TileRowInfo::clear_storage_version() {
  storage_version_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileRowInfo::_internal_storage_version() const {
  return storage_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileRowInfo::storage_version() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.storage_version)
  return _internal_storage_version();
}
inline void TileRowInfo::_internal_set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  storage_version_ = value;
}
inline void TileRowInfo::set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_version(value);
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.storage_version)
}

// optional bytes cell_storage_buffer = 6;
inline bool TileRowInfo::_internal_has_cell_storage_buffer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileRowInfo::has_cell_storage_buffer() const {
  return _internal_has_cell_storage_buffer();
}
inline void TileRowInfo::clear_cell_storage_buffer() {
  cell_storage_buffer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TileRowInfo::cell_storage_buffer() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.cell_storage_buffer)
  return _internal_cell_storage_buffer();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TileRowInfo::set_cell_storage_buffer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 cell_storage_buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.cell_storage_buffer)
}
inline std::string* TileRowInfo::mutable_cell_storage_buffer() {
  // @@protoc_insertion_point(field_mutable:TST.TileRowInfo.cell_storage_buffer)
  return _internal_mutable_cell_storage_buffer();
}
inline const std::string& TileRowInfo::_internal_cell_storage_buffer() const {
  return cell_storage_buffer_.Get();
}
inline void TileRowInfo::_internal_set_cell_storage_buffer(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cell_storage_buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TileRowInfo::_internal_mutable_cell_storage_buffer() {
  _has_bits_[0] |= 0x00000004u;
  return cell_storage_buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TileRowInfo::release_cell_storage_buffer() {
  // @@protoc_insertion_point(field_release:TST.TileRowInfo.cell_storage_buffer)
  if (!_internal_has_cell_storage_buffer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cell_storage_buffer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRowInfo::set_allocated_cell_storage_buffer(std::string* cell_storage_buffer) {
  if (cell_storage_buffer != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cell_storage_buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_storage_buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TileRowInfo.cell_storage_buffer)
}

// optional bytes cell_offsets = 7;
inline bool TileRowInfo::_internal_has_cell_offsets() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileRowInfo::has_cell_offsets() const {
  return _internal_has_cell_offsets();
}
inline void TileRowInfo::clear_cell_offsets() {
  cell_offsets_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TileRowInfo::cell_offsets() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.cell_offsets)
  return _internal_cell_offsets();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TileRowInfo::set_cell_offsets(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 cell_offsets_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.cell_offsets)
}
inline std::string* TileRowInfo::mutable_cell_offsets() {
  // @@protoc_insertion_point(field_mutable:TST.TileRowInfo.cell_offsets)
  return _internal_mutable_cell_offsets();
}
inline const std::string& TileRowInfo::_internal_cell_offsets() const {
  return cell_offsets_.Get();
}
inline void TileRowInfo::_internal_set_cell_offsets(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cell_offsets_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TileRowInfo::_internal_mutable_cell_offsets() {
  _has_bits_[0] |= 0x00000008u;
  return cell_offsets_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TileRowInfo::release_cell_offsets() {
  // @@protoc_insertion_point(field_release:TST.TileRowInfo.cell_offsets)
  if (!_internal_has_cell_offsets()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return cell_offsets_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TileRowInfo::set_allocated_cell_offsets(std::string* cell_offsets) {
  if (cell_offsets != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cell_offsets_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_offsets,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TileRowInfo.cell_offsets)
}

// optional bool has_wide_offsets = 8;
inline bool TileRowInfo::_internal_has_has_wide_offsets() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TileRowInfo::has_has_wide_offsets() const {
  return _internal_has_has_wide_offsets();
}
inline void TileRowInfo::clear_has_wide_offsets() {
  has_wide_offsets_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TileRowInfo::_internal_has_wide_offsets() const {
  return has_wide_offsets_;
}
inline bool TileRowInfo::has_wide_offsets() const {
  // @@protoc_insertion_point(field_get:TST.TileRowInfo.has_wide_offsets)
  return _internal_has_wide_offsets();
}
inline void TileRowInfo::_internal_set_has_wide_offsets(bool value) {
  _has_bits_[0] |= 0x00000080u;
  has_wide_offsets_ = value;
}
inline void TileRowInfo::set_has_wide_offsets(bool value) {
  _internal_set_has_wide_offsets(value);
  // @@protoc_insertion_point(field_set:TST.TileRowInfo.has_wide_offsets)
}

// -------------------------------------------------------------------

// Tile

// required uint32 maxColumn = 1;
inline bool Tile::_internal_has_maxcolumn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Tile::has_maxcolumn() const {
  return _internal_has_maxcolumn();
}
inline void Tile::clear_maxcolumn() {
  maxcolumn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::_internal_maxcolumn() const {
  return maxcolumn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::maxcolumn() const {
  // @@protoc_insertion_point(field_get:TST.Tile.maxColumn)
  return _internal_maxcolumn();
}
inline void Tile::_internal_set_maxcolumn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  maxcolumn_ = value;
}
inline void Tile::set_maxcolumn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxcolumn(value);
  // @@protoc_insertion_point(field_set:TST.Tile.maxColumn)
}

// required uint32 maxRow = 2;
inline bool Tile::_internal_has_maxrow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Tile::has_maxrow() const {
  return _internal_has_maxrow();
}
inline void Tile::clear_maxrow() {
  maxrow_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::_internal_maxrow() const {
  return maxrow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::maxrow() const {
  // @@protoc_insertion_point(field_get:TST.Tile.maxRow)
  return _internal_maxrow();
}
inline void Tile::_internal_set_maxrow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  maxrow_ = value;
}
inline void Tile::set_maxrow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxrow(value);
  // @@protoc_insertion_point(field_set:TST.Tile.maxRow)
}

// required uint32 numCells = 3;
inline bool Tile::_internal_has_numcells() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Tile::has_numcells() const {
  return _internal_has_numcells();
}
inline void Tile::clear_numcells() {
  numcells_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::_internal_numcells() const {
  return numcells_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::numcells() const {
  // @@protoc_insertion_point(field_get:TST.Tile.numCells)
  return _internal_numcells();
}
inline void Tile::_internal_set_numcells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  numcells_ = value;
}
inline void Tile::set_numcells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numcells(value);
  // @@protoc_insertion_point(field_set:TST.Tile.numCells)
}

// required uint32 numrows = 4;
inline bool Tile::_internal_has_numrows() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Tile::has_numrows() const {
  return _internal_has_numrows();
}
inline void Tile::clear_numrows() {
  numrows_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::_internal_numrows() const {
  return numrows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::numrows() const {
  // @@protoc_insertion_point(field_get:TST.Tile.numrows)
  return _internal_numrows();
}
inline void Tile::_internal_set_numrows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  numrows_ = value;
}
inline void Tile::set_numrows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numrows(value);
  // @@protoc_insertion_point(field_set:TST.Tile.numrows)
}

// repeated .TST.TileRowInfo rowInfos = 5;
inline int Tile::_internal_rowinfos_size() const {
  return rowinfos_.size();
}
inline int Tile::rowinfos_size() const {
  return _internal_rowinfos_size();
}
inline void Tile::clear_rowinfos() {
  rowinfos_.Clear();
}
inline ::TST::TileRowInfo* Tile::mutable_rowinfos(int index) {
  // @@protoc_insertion_point(field_mutable:TST.Tile.rowInfos)
  return rowinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileRowInfo >*
Tile::mutable_rowinfos() {
  // @@protoc_insertion_point(field_mutable_list:TST.Tile.rowInfos)
  return &rowinfos_;
}
inline const ::TST::TileRowInfo& Tile::_internal_rowinfos(int index) const {
  return rowinfos_.Get(index);
}
inline const ::TST::TileRowInfo& Tile::rowinfos(int index) const {
  // @@protoc_insertion_point(field_get:TST.Tile.rowInfos)
  return _internal_rowinfos(index);
}
inline ::TST::TileRowInfo* Tile::_internal_add_rowinfos() {
  return rowinfos_.Add();
}
inline ::TST::TileRowInfo* Tile::add_rowinfos() {
  // @@protoc_insertion_point(field_add:TST.Tile.rowInfos)
  return _internal_add_rowinfos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileRowInfo >&
Tile::rowinfos() const {
  // @@protoc_insertion_point(field_list:TST.Tile.rowInfos)
  return rowinfos_;
}

// optional uint32 storage_version = 6;
inline bool Tile::_internal_has_storage_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Tile::has_storage_version() const {
  return _internal_has_storage_version();
}
inline void Tile::clear_storage_version() {
  storage_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::_internal_storage_version() const {
  return storage_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tile::storage_version() const {
  // @@protoc_insertion_point(field_get:TST.Tile.storage_version)
  return _internal_storage_version();
}
inline void Tile::_internal_set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  storage_version_ = value;
}
inline void Tile::set_storage_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_version(value);
  // @@protoc_insertion_point(field_set:TST.Tile.storage_version)
}

// optional bool last_saved_in_BNC = 7;
inline bool Tile::_internal_has_last_saved_in_bnc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Tile::has_last_saved_in_bnc() const {
  return _internal_has_last_saved_in_bnc();
}
inline void Tile::clear_last_saved_in_bnc() {
  last_saved_in_bnc_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Tile::_internal_last_saved_in_bnc() const {
  return last_saved_in_bnc_;
}
inline bool Tile::last_saved_in_bnc() const {
  // @@protoc_insertion_point(field_get:TST.Tile.last_saved_in_BNC)
  return _internal_last_saved_in_bnc();
}
inline void Tile::_internal_set_last_saved_in_bnc(bool value) {
  _has_bits_[0] |= 0x00000020u;
  last_saved_in_bnc_ = value;
}
inline void Tile::set_last_saved_in_bnc(bool value) {
  _internal_set_last_saved_in_bnc(value);
  // @@protoc_insertion_point(field_set:TST.Tile.last_saved_in_BNC)
}

// optional bool should_use_wide_rows = 8;
inline bool Tile::_internal_has_should_use_wide_rows() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Tile::has_should_use_wide_rows() const {
  return _internal_has_should_use_wide_rows();
}
inline void Tile::clear_should_use_wide_rows() {
  should_use_wide_rows_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Tile::_internal_should_use_wide_rows() const {
  return should_use_wide_rows_;
}
inline bool Tile::should_use_wide_rows() const {
  // @@protoc_insertion_point(field_get:TST.Tile.should_use_wide_rows)
  return _internal_should_use_wide_rows();
}
inline void Tile::_internal_set_should_use_wide_rows(bool value) {
  _has_bits_[0] |= 0x00000040u;
  should_use_wide_rows_ = value;
}
inline void Tile::set_should_use_wide_rows(bool value) {
  _internal_set_should_use_wide_rows(value);
  // @@protoc_insertion_point(field_set:TST.Tile.should_use_wide_rows)
}

// -------------------------------------------------------------------

// TileStorage_Tile

// required uint32 tileid = 1;
inline bool TileStorage_Tile::_internal_has_tileid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileStorage_Tile::has_tileid() const {
  return _internal_has_tileid();
}
inline void TileStorage_Tile::clear_tileid() {
  tileid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileStorage_Tile::_internal_tileid() const {
  return tileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileStorage_Tile::tileid() const {
  // @@protoc_insertion_point(field_get:TST.TileStorage.Tile.tileid)
  return _internal_tileid();
}
inline void TileStorage_Tile::_internal_set_tileid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tileid_ = value;
}
inline void TileStorage_Tile::set_tileid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tileid(value);
  // @@protoc_insertion_point(field_set:TST.TileStorage.Tile.tileid)
}

// required .TSP.Reference tile = 2;
inline bool TileStorage_Tile::_internal_has_tile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tile_ != nullptr);
  return value;
}
inline bool TileStorage_Tile::has_tile() const {
  return _internal_has_tile();
}
inline const ::TSP::Reference& TileStorage_Tile::_internal_tile() const {
  const ::TSP::Reference* p = tile_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TileStorage_Tile::tile() const {
  // @@protoc_insertion_point(field_get:TST.TileStorage.Tile.tile)
  return _internal_tile();
}
inline void TileStorage_Tile::unsafe_arena_set_allocated_tile(
    ::TSP::Reference* tile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile_);
  }
  tile_ = tile;
  if (tile) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TileStorage.Tile.tile)
}
inline ::TSP::Reference* TileStorage_Tile::release_tile() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = tile_;
  tile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TileStorage_Tile::unsafe_arena_release_tile() {
  // @@protoc_insertion_point(field_release:TST.TileStorage.Tile.tile)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = tile_;
  tile_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TileStorage_Tile::_internal_mutable_tile() {
  _has_bits_[0] |= 0x00000001u;
  if (tile_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tile_ = p;
  }
  return tile_;
}
inline ::TSP::Reference* TileStorage_Tile::mutable_tile() {
  // @@protoc_insertion_point(field_mutable:TST.TileStorage.Tile.tile)
  return _internal_mutable_tile();
}
inline void TileStorage_Tile::set_allocated_tile(::TSP::Reference* tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile_);
  }
  if (tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile)->GetArena();
    if (message_arena != submessage_arena) {
      tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tile_ = tile;
  // @@protoc_insertion_point(field_set_allocated:TST.TileStorage.Tile.tile)
}

// -------------------------------------------------------------------

// TileStorage

// repeated .TST.TileStorage.Tile tiles = 1;
inline int TileStorage::_internal_tiles_size() const {
  return tiles_.size();
}
inline int TileStorage::tiles_size() const {
  return _internal_tiles_size();
}
inline void TileStorage::clear_tiles() {
  tiles_.Clear();
}
inline ::TST::TileStorage_Tile* TileStorage::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TileStorage.tiles)
  return tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileStorage_Tile >*
TileStorage::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:TST.TileStorage.tiles)
  return &tiles_;
}
inline const ::TST::TileStorage_Tile& TileStorage::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline const ::TST::TileStorage_Tile& TileStorage::tiles(int index) const {
  // @@protoc_insertion_point(field_get:TST.TileStorage.tiles)
  return _internal_tiles(index);
}
inline ::TST::TileStorage_Tile* TileStorage::_internal_add_tiles() {
  return tiles_.Add();
}
inline ::TST::TileStorage_Tile* TileStorage::add_tiles() {
  // @@protoc_insertion_point(field_add:TST.TileStorage.tiles)
  return _internal_add_tiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TileStorage_Tile >&
TileStorage::tiles() const {
  // @@protoc_insertion_point(field_list:TST.TileStorage.tiles)
  return tiles_;
}

// optional uint32 tile_size = 2;
inline bool TileStorage::_internal_has_tile_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileStorage::has_tile_size() const {
  return _internal_has_tile_size();
}
inline void TileStorage::clear_tile_size() {
  tile_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileStorage::_internal_tile_size() const {
  return tile_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TileStorage::tile_size() const {
  // @@protoc_insertion_point(field_get:TST.TileStorage.tile_size)
  return _internal_tile_size();
}
inline void TileStorage::_internal_set_tile_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tile_size_ = value;
}
inline void TileStorage::set_tile_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tile_size(value);
  // @@protoc_insertion_point(field_set:TST.TileStorage.tile_size)
}

// optional bool should_use_wide_rows = 3;
inline bool TileStorage::_internal_has_should_use_wide_rows() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileStorage::has_should_use_wide_rows() const {
  return _internal_has_should_use_wide_rows();
}
inline void TileStorage::clear_should_use_wide_rows() {
  should_use_wide_rows_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TileStorage::_internal_should_use_wide_rows() const {
  return should_use_wide_rows_;
}
inline bool TileStorage::should_use_wide_rows() const {
  // @@protoc_insertion_point(field_get:TST.TileStorage.should_use_wide_rows)
  return _internal_should_use_wide_rows();
}
inline void TileStorage::_internal_set_should_use_wide_rows(bool value) {
  _has_bits_[0] |= 0x00000002u;
  should_use_wide_rows_ = value;
}
inline void TileStorage::set_should_use_wide_rows(bool value) {
  _internal_set_should_use_wide_rows(value);
  // @@protoc_insertion_point(field_set:TST.TileStorage.should_use_wide_rows)
}

// -------------------------------------------------------------------

// PopUpMenuModel_CellValue

// required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
inline bool PopUpMenuModel_CellValue::_internal_has_cell_value_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PopUpMenuModel_CellValue::has_cell_value_type() const {
  return _internal_has_cell_value_type();
}
inline void PopUpMenuModel_CellValue::clear_cell_value_type() {
  cell_value_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TST::PopUpMenuModel_CellValueType PopUpMenuModel_CellValue::_internal_cell_value_type() const {
  return static_cast< ::TST::PopUpMenuModel_CellValueType >(cell_value_type_);
}
inline ::TST::PopUpMenuModel_CellValueType PopUpMenuModel_CellValue::cell_value_type() const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.CellValue.cell_value_type)
  return _internal_cell_value_type();
}
inline void PopUpMenuModel_CellValue::_internal_set_cell_value_type(::TST::PopUpMenuModel_CellValueType value) {
  assert(::TST::PopUpMenuModel_CellValueType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  cell_value_type_ = value;
}
inline void PopUpMenuModel_CellValue::set_cell_value_type(::TST::PopUpMenuModel_CellValueType value) {
  _internal_set_cell_value_type(value);
  // @@protoc_insertion_point(field_set:TST.PopUpMenuModel.CellValue.cell_value_type)
}

// optional .TSCE.BooleanCellValueArchive boolean_value = 2;
inline bool PopUpMenuModel_CellValue::_internal_has_boolean_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || boolean_value_ != nullptr);
  return value;
}
inline bool PopUpMenuModel_CellValue::has_boolean_value() const {
  return _internal_has_boolean_value();
}
inline const ::TSCE::BooleanCellValueArchive& PopUpMenuModel_CellValue::_internal_boolean_value() const {
  const ::TSCE::BooleanCellValueArchive* p = boolean_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::BooleanCellValueArchive&>(
      ::TSCE::_BooleanCellValueArchive_default_instance_);
}
inline const ::TSCE::BooleanCellValueArchive& PopUpMenuModel_CellValue::boolean_value() const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.CellValue.boolean_value)
  return _internal_boolean_value();
}
inline void PopUpMenuModel_CellValue::unsafe_arena_set_allocated_boolean_value(
    ::TSCE::BooleanCellValueArchive* boolean_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_value_);
  }
  boolean_value_ = boolean_value;
  if (boolean_value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PopUpMenuModel.CellValue.boolean_value)
}
inline ::TSCE::BooleanCellValueArchive* PopUpMenuModel_CellValue::release_boolean_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::BooleanCellValueArchive* temp = boolean_value_;
  boolean_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::BooleanCellValueArchive* PopUpMenuModel_CellValue::unsafe_arena_release_boolean_value() {
  // @@protoc_insertion_point(field_release:TST.PopUpMenuModel.CellValue.boolean_value)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::BooleanCellValueArchive* temp = boolean_value_;
  boolean_value_ = nullptr;
  return temp;
}
inline ::TSCE::BooleanCellValueArchive* PopUpMenuModel_CellValue::_internal_mutable_boolean_value() {
  _has_bits_[0] |= 0x00000001u;
  if (boolean_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::BooleanCellValueArchive>(GetArena());
    boolean_value_ = p;
  }
  return boolean_value_;
}
inline ::TSCE::BooleanCellValueArchive* PopUpMenuModel_CellValue::mutable_boolean_value() {
  // @@protoc_insertion_point(field_mutable:TST.PopUpMenuModel.CellValue.boolean_value)
  return _internal_mutable_boolean_value();
}
inline void PopUpMenuModel_CellValue::set_allocated_boolean_value(::TSCE::BooleanCellValueArchive* boolean_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_value_);
  }
  if (boolean_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_value)->GetArena();
    if (message_arena != submessage_arena) {
      boolean_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  boolean_value_ = boolean_value;
  // @@protoc_insertion_point(field_set_allocated:TST.PopUpMenuModel.CellValue.boolean_value)
}

// optional .TSCE.DateCellValueArchive date_value = 3;
inline bool PopUpMenuModel_CellValue::_internal_has_date_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || date_value_ != nullptr);
  return value;
}
inline bool PopUpMenuModel_CellValue::has_date_value() const {
  return _internal_has_date_value();
}
inline const ::TSCE::DateCellValueArchive& PopUpMenuModel_CellValue::_internal_date_value() const {
  const ::TSCE::DateCellValueArchive* p = date_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::DateCellValueArchive&>(
      ::TSCE::_DateCellValueArchive_default_instance_);
}
inline const ::TSCE::DateCellValueArchive& PopUpMenuModel_CellValue::date_value() const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.CellValue.date_value)
  return _internal_date_value();
}
inline void PopUpMenuModel_CellValue::unsafe_arena_set_allocated_date_value(
    ::TSCE::DateCellValueArchive* date_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_value_);
  }
  date_value_ = date_value;
  if (date_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PopUpMenuModel.CellValue.date_value)
}
inline ::TSCE::DateCellValueArchive* PopUpMenuModel_CellValue::release_date_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::DateCellValueArchive* temp = date_value_;
  date_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::DateCellValueArchive* PopUpMenuModel_CellValue::unsafe_arena_release_date_value() {
  // @@protoc_insertion_point(field_release:TST.PopUpMenuModel.CellValue.date_value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::DateCellValueArchive* temp = date_value_;
  date_value_ = nullptr;
  return temp;
}
inline ::TSCE::DateCellValueArchive* PopUpMenuModel_CellValue::_internal_mutable_date_value() {
  _has_bits_[0] |= 0x00000002u;
  if (date_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::DateCellValueArchive>(GetArena());
    date_value_ = p;
  }
  return date_value_;
}
inline ::TSCE::DateCellValueArchive* PopUpMenuModel_CellValue::mutable_date_value() {
  // @@protoc_insertion_point(field_mutable:TST.PopUpMenuModel.CellValue.date_value)
  return _internal_mutable_date_value();
}
inline void PopUpMenuModel_CellValue::set_allocated_date_value(::TSCE::DateCellValueArchive* date_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_value_);
  }
  if (date_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_value)->GetArena();
    if (message_arena != submessage_arena) {
      date_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  date_value_ = date_value;
  // @@protoc_insertion_point(field_set_allocated:TST.PopUpMenuModel.CellValue.date_value)
}

// optional .TSCE.NumberCellValueArchive number_value = 4;
inline bool PopUpMenuModel_CellValue::_internal_has_number_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || number_value_ != nullptr);
  return value;
}
inline bool PopUpMenuModel_CellValue::has_number_value() const {
  return _internal_has_number_value();
}
inline const ::TSCE::NumberCellValueArchive& PopUpMenuModel_CellValue::_internal_number_value() const {
  const ::TSCE::NumberCellValueArchive* p = number_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::NumberCellValueArchive&>(
      ::TSCE::_NumberCellValueArchive_default_instance_);
}
inline const ::TSCE::NumberCellValueArchive& PopUpMenuModel_CellValue::number_value() const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.CellValue.number_value)
  return _internal_number_value();
}
inline void PopUpMenuModel_CellValue::unsafe_arena_set_allocated_number_value(
    ::TSCE::NumberCellValueArchive* number_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_value_);
  }
  number_value_ = number_value;
  if (number_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PopUpMenuModel.CellValue.number_value)
}
inline ::TSCE::NumberCellValueArchive* PopUpMenuModel_CellValue::release_number_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::NumberCellValueArchive* temp = number_value_;
  number_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::NumberCellValueArchive* PopUpMenuModel_CellValue::unsafe_arena_release_number_value() {
  // @@protoc_insertion_point(field_release:TST.PopUpMenuModel.CellValue.number_value)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::NumberCellValueArchive* temp = number_value_;
  number_value_ = nullptr;
  return temp;
}
inline ::TSCE::NumberCellValueArchive* PopUpMenuModel_CellValue::_internal_mutable_number_value() {
  _has_bits_[0] |= 0x00000004u;
  if (number_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::NumberCellValueArchive>(GetArena());
    number_value_ = p;
  }
  return number_value_;
}
inline ::TSCE::NumberCellValueArchive* PopUpMenuModel_CellValue::mutable_number_value() {
  // @@protoc_insertion_point(field_mutable:TST.PopUpMenuModel.CellValue.number_value)
  return _internal_mutable_number_value();
}
inline void PopUpMenuModel_CellValue::set_allocated_number_value(::TSCE::NumberCellValueArchive* number_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_value_);
  }
  if (number_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_value)->GetArena();
    if (message_arena != submessage_arena) {
      number_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  number_value_ = number_value;
  // @@protoc_insertion_point(field_set_allocated:TST.PopUpMenuModel.CellValue.number_value)
}

// optional .TSCE.StringCellValueArchive string_value = 5;
inline bool PopUpMenuModel_CellValue::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || string_value_ != nullptr);
  return value;
}
inline bool PopUpMenuModel_CellValue::has_string_value() const {
  return _internal_has_string_value();
}
inline const ::TSCE::StringCellValueArchive& PopUpMenuModel_CellValue::_internal_string_value() const {
  const ::TSCE::StringCellValueArchive* p = string_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::StringCellValueArchive&>(
      ::TSCE::_StringCellValueArchive_default_instance_);
}
inline const ::TSCE::StringCellValueArchive& PopUpMenuModel_CellValue::string_value() const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.CellValue.string_value)
  return _internal_string_value();
}
inline void PopUpMenuModel_CellValue::unsafe_arena_set_allocated_string_value(
    ::TSCE::StringCellValueArchive* string_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_value_);
  }
  string_value_ = string_value;
  if (string_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PopUpMenuModel.CellValue.string_value)
}
inline ::TSCE::StringCellValueArchive* PopUpMenuModel_CellValue::release_string_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::StringCellValueArchive* temp = string_value_;
  string_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::StringCellValueArchive* PopUpMenuModel_CellValue::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_release:TST.PopUpMenuModel.CellValue.string_value)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::StringCellValueArchive* temp = string_value_;
  string_value_ = nullptr;
  return temp;
}
inline ::TSCE::StringCellValueArchive* PopUpMenuModel_CellValue::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000008u;
  if (string_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::StringCellValueArchive>(GetArena());
    string_value_ = p;
  }
  return string_value_;
}
inline ::TSCE::StringCellValueArchive* PopUpMenuModel_CellValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:TST.PopUpMenuModel.CellValue.string_value)
  return _internal_mutable_string_value();
}
inline void PopUpMenuModel_CellValue::set_allocated_string_value(::TSCE::StringCellValueArchive* string_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_value_);
  }
  if (string_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(string_value)->GetArena();
    if (message_arena != submessage_arena) {
      string_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  string_value_ = string_value;
  // @@protoc_insertion_point(field_set_allocated:TST.PopUpMenuModel.CellValue.string_value)
}

// -------------------------------------------------------------------

// PopUpMenuModel

// repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
inline int PopUpMenuModel::_internal_item_size() const {
  return item_.size();
}
inline int PopUpMenuModel::item_size() const {
  return _internal_item_size();
}
inline void PopUpMenuModel::clear_item() {
  item_.Clear();
}
inline ::TST::PopUpMenuModel_CellValue* PopUpMenuModel::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:TST.PopUpMenuModel.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::PopUpMenuModel_CellValue >*
PopUpMenuModel::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:TST.PopUpMenuModel.item)
  return &item_;
}
inline const ::TST::PopUpMenuModel_CellValue& PopUpMenuModel::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::TST::PopUpMenuModel_CellValue& PopUpMenuModel::item(int index) const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.item)
  return _internal_item(index);
}
inline ::TST::PopUpMenuModel_CellValue* PopUpMenuModel::_internal_add_item() {
  return item_.Add();
}
inline ::TST::PopUpMenuModel_CellValue* PopUpMenuModel::add_item() {
  // @@protoc_insertion_point(field_add:TST.PopUpMenuModel.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::PopUpMenuModel_CellValue >&
PopUpMenuModel::item() const {
  // @@protoc_insertion_point(field_list:TST.PopUpMenuModel.item)
  return item_;
}

// repeated .TSCE.CellValueArchive tsce_item = 2;
inline int PopUpMenuModel::_internal_tsce_item_size() const {
  return tsce_item_.size();
}
inline int PopUpMenuModel::tsce_item_size() const {
  return _internal_tsce_item_size();
}
inline ::TSCE::CellValueArchive* PopUpMenuModel::mutable_tsce_item(int index) {
  // @@protoc_insertion_point(field_mutable:TST.PopUpMenuModel.tsce_item)
  return tsce_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
PopUpMenuModel::mutable_tsce_item() {
  // @@protoc_insertion_point(field_mutable_list:TST.PopUpMenuModel.tsce_item)
  return &tsce_item_;
}
inline const ::TSCE::CellValueArchive& PopUpMenuModel::_internal_tsce_item(int index) const {
  return tsce_item_.Get(index);
}
inline const ::TSCE::CellValueArchive& PopUpMenuModel::tsce_item(int index) const {
  // @@protoc_insertion_point(field_get:TST.PopUpMenuModel.tsce_item)
  return _internal_tsce_item(index);
}
inline ::TSCE::CellValueArchive* PopUpMenuModel::_internal_add_tsce_item() {
  return tsce_item_.Add();
}
inline ::TSCE::CellValueArchive* PopUpMenuModel::add_tsce_item() {
  // @@protoc_insertion_point(field_add:TST.PopUpMenuModel.tsce_item)
  return _internal_add_tsce_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
PopUpMenuModel::tsce_item() const {
  // @@protoc_insertion_point(field_list:TST.PopUpMenuModel.tsce_item)
  return tsce_item_;
}

// -------------------------------------------------------------------

// ImportWarningSetArchive_FormulaImportWarning

// required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
inline bool ImportWarningSetArchive_FormulaImportWarning::_internal_has_formula_warning_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImportWarningSetArchive_FormulaImportWarning::has_formula_warning_type() const {
  return _internal_has_formula_warning_type();
}
inline void ImportWarningSetArchive_FormulaImportWarning::clear_formula_warning_type() {
  formula_warning_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TST::ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive_FormulaImportWarning::_internal_formula_warning_type() const {
  return static_cast< ::TST::ImportWarningSetArchive_FormulaWarningType >(formula_warning_type_);
}
inline ::TST::ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive_FormulaImportWarning::formula_warning_type() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.FormulaImportWarning.formula_warning_type)
  return _internal_formula_warning_type();
}
inline void ImportWarningSetArchive_FormulaImportWarning::_internal_set_formula_warning_type(::TST::ImportWarningSetArchive_FormulaWarningType value) {
  assert(::TST::ImportWarningSetArchive_FormulaWarningType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  formula_warning_type_ = value;
}
inline void ImportWarningSetArchive_FormulaImportWarning::set_formula_warning_type(::TST::ImportWarningSetArchive_FormulaWarningType value) {
  _internal_set_formula_warning_type(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.FormulaImportWarning.formula_warning_type)
}

// optional string original_formula = 2;
inline bool ImportWarningSetArchive_FormulaImportWarning::_internal_has_original_formula() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImportWarningSetArchive_FormulaImportWarning::has_original_formula() const {
  return _internal_has_original_formula();
}
inline void ImportWarningSetArchive_FormulaImportWarning::clear_original_formula() {
  original_formula_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImportWarningSetArchive_FormulaImportWarning::original_formula() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.FormulaImportWarning.original_formula)
  return _internal_original_formula();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ImportWarningSetArchive_FormulaImportWarning::set_original_formula(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 original_formula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.FormulaImportWarning.original_formula)
}
inline std::string* ImportWarningSetArchive_FormulaImportWarning::mutable_original_formula() {
  // @@protoc_insertion_point(field_mutable:TST.ImportWarningSetArchive.FormulaImportWarning.original_formula)
  return _internal_mutable_original_formula();
}
inline const std::string& ImportWarningSetArchive_FormulaImportWarning::_internal_original_formula() const {
  return original_formula_.Get();
}
inline void ImportWarningSetArchive_FormulaImportWarning::_internal_set_original_formula(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  original_formula_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ImportWarningSetArchive_FormulaImportWarning::_internal_mutable_original_formula() {
  _has_bits_[0] |= 0x00000001u;
  return original_formula_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportWarningSetArchive_FormulaImportWarning::release_original_formula() {
  // @@protoc_insertion_point(field_release:TST.ImportWarningSetArchive.FormulaImportWarning.original_formula)
  if (!_internal_has_original_formula()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return original_formula_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportWarningSetArchive_FormulaImportWarning::set_allocated_original_formula(std::string* original_formula) {
  if (original_formula != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  original_formula_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_formula,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.ImportWarningSetArchive.FormulaImportWarning.original_formula)
}

// optional string supplementary_text = 3;
inline bool ImportWarningSetArchive_FormulaImportWarning::_internal_has_supplementary_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImportWarningSetArchive_FormulaImportWarning::has_supplementary_text() const {
  return _internal_has_supplementary_text();
}
inline void ImportWarningSetArchive_FormulaImportWarning::clear_supplementary_text() {
  supplementary_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImportWarningSetArchive_FormulaImportWarning::supplementary_text() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text)
  return _internal_supplementary_text();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ImportWarningSetArchive_FormulaImportWarning::set_supplementary_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 supplementary_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text)
}
inline std::string* ImportWarningSetArchive_FormulaImportWarning::mutable_supplementary_text() {
  // @@protoc_insertion_point(field_mutable:TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text)
  return _internal_mutable_supplementary_text();
}
inline const std::string& ImportWarningSetArchive_FormulaImportWarning::_internal_supplementary_text() const {
  return supplementary_text_.Get();
}
inline void ImportWarningSetArchive_FormulaImportWarning::_internal_set_supplementary_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  supplementary_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ImportWarningSetArchive_FormulaImportWarning::_internal_mutable_supplementary_text() {
  _has_bits_[0] |= 0x00000002u;
  return supplementary_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportWarningSetArchive_FormulaImportWarning::release_supplementary_text() {
  // @@protoc_insertion_point(field_release:TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text)
  if (!_internal_has_supplementary_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return supplementary_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportWarningSetArchive_FormulaImportWarning::set_allocated_supplementary_text(std::string* supplementary_text) {
  if (supplementary_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  supplementary_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supplementary_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text)
}

// optional int32 formula_warning_type_int = 4;
inline bool ImportWarningSetArchive_FormulaImportWarning::_internal_has_formula_warning_type_int() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImportWarningSetArchive_FormulaImportWarning::has_formula_warning_type_int() const {
  return _internal_has_formula_warning_type_int();
}
inline void ImportWarningSetArchive_FormulaImportWarning::clear_formula_warning_type_int() {
  formula_warning_type_int_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportWarningSetArchive_FormulaImportWarning::_internal_formula_warning_type_int() const {
  return formula_warning_type_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportWarningSetArchive_FormulaImportWarning::formula_warning_type_int() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.FormulaImportWarning.formula_warning_type_int)
  return _internal_formula_warning_type_int();
}
inline void ImportWarningSetArchive_FormulaImportWarning::_internal_set_formula_warning_type_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  formula_warning_type_int_ = value;
}
inline void ImportWarningSetArchive_FormulaImportWarning::set_formula_warning_type_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_formula_warning_type_int(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.FormulaImportWarning.formula_warning_type_int)
}

// -------------------------------------------------------------------

// ImportWarningSetArchive

// optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
inline bool ImportWarningSetArchive::_internal_has_formula_import_warning() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || formula_import_warning_ != nullptr);
  return value;
}
inline bool ImportWarningSetArchive::has_formula_import_warning() const {
  return _internal_has_formula_import_warning();
}
inline void ImportWarningSetArchive::clear_formula_import_warning() {
  if (formula_import_warning_ != nullptr) formula_import_warning_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ImportWarningSetArchive_FormulaImportWarning& ImportWarningSetArchive::_internal_formula_import_warning() const {
  const ::TST::ImportWarningSetArchive_FormulaImportWarning* p = formula_import_warning_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ImportWarningSetArchive_FormulaImportWarning&>(
      ::TST::_ImportWarningSetArchive_FormulaImportWarning_default_instance_);
}
inline const ::TST::ImportWarningSetArchive_FormulaImportWarning& ImportWarningSetArchive::formula_import_warning() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.formula_import_warning)
  return _internal_formula_import_warning();
}
inline void ImportWarningSetArchive::unsafe_arena_set_allocated_formula_import_warning(
    ::TST::ImportWarningSetArchive_FormulaImportWarning* formula_import_warning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_import_warning_);
  }
  formula_import_warning_ = formula_import_warning;
  if (formula_import_warning) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ImportWarningSetArchive.formula_import_warning)
}
inline ::TST::ImportWarningSetArchive_FormulaImportWarning* ImportWarningSetArchive::release_formula_import_warning() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ImportWarningSetArchive_FormulaImportWarning* temp = formula_import_warning_;
  formula_import_warning_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ImportWarningSetArchive_FormulaImportWarning* ImportWarningSetArchive::unsafe_arena_release_formula_import_warning() {
  // @@protoc_insertion_point(field_release:TST.ImportWarningSetArchive.formula_import_warning)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ImportWarningSetArchive_FormulaImportWarning* temp = formula_import_warning_;
  formula_import_warning_ = nullptr;
  return temp;
}
inline ::TST::ImportWarningSetArchive_FormulaImportWarning* ImportWarningSetArchive::_internal_mutable_formula_import_warning() {
  _has_bits_[0] |= 0x00000002u;
  if (formula_import_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ImportWarningSetArchive_FormulaImportWarning>(GetArena());
    formula_import_warning_ = p;
  }
  return formula_import_warning_;
}
inline ::TST::ImportWarningSetArchive_FormulaImportWarning* ImportWarningSetArchive::mutable_formula_import_warning() {
  // @@protoc_insertion_point(field_mutable:TST.ImportWarningSetArchive.formula_import_warning)
  return _internal_mutable_formula_import_warning();
}
inline void ImportWarningSetArchive::set_allocated_formula_import_warning(::TST::ImportWarningSetArchive_FormulaImportWarning* formula_import_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formula_import_warning_;
  }
  if (formula_import_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formula_import_warning);
    if (message_arena != submessage_arena) {
      formula_import_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_import_warning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  formula_import_warning_ = formula_import_warning;
  // @@protoc_insertion_point(field_set_allocated:TST.ImportWarningSetArchive.formula_import_warning)
}

// optional bool cond_format_above_avg_equal_avg = 2 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_above_avg_equal_avg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_above_avg_equal_avg() const {
  return _internal_has_cond_format_above_avg_equal_avg();
}
inline void ImportWarningSetArchive::clear_cond_format_above_avg_equal_avg() {
  cond_format_above_avg_equal_avg_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_above_avg_equal_avg() const {
  return cond_format_above_avg_equal_avg_;
}
inline bool ImportWarningSetArchive::cond_format_above_avg_equal_avg() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_above_avg_equal_avg)
  return _internal_cond_format_above_avg_equal_avg();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_above_avg_equal_avg(bool value) {
  _has_bits_[0] |= 0x00000004u;
  cond_format_above_avg_equal_avg_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_above_avg_equal_avg(bool value) {
  _internal_set_cond_format_above_avg_equal_avg(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_above_avg_equal_avg)
}

// optional bool cond_format_above_avg_std_dev = 3 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_above_avg_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_above_avg_std_dev() const {
  return _internal_has_cond_format_above_avg_std_dev();
}
inline void ImportWarningSetArchive::clear_cond_format_above_avg_std_dev() {
  cond_format_above_avg_std_dev_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_above_avg_std_dev() const {
  return cond_format_above_avg_std_dev_;
}
inline bool ImportWarningSetArchive::cond_format_above_avg_std_dev() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_above_avg_std_dev)
  return _internal_cond_format_above_avg_std_dev();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_above_avg_std_dev(bool value) {
  _has_bits_[0] |= 0x00000008u;
  cond_format_above_avg_std_dev_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_above_avg_std_dev(bool value) {
  _internal_set_cond_format_above_avg_std_dev(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_above_avg_std_dev)
}

// optional bool cond_format_complex_formula = 4 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_complex_formula() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_complex_formula() const {
  return _internal_has_cond_format_complex_formula();
}
inline void ImportWarningSetArchive::clear_cond_format_complex_formula() {
  cond_format_complex_formula_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_complex_formula() const {
  return cond_format_complex_formula_;
}
inline bool ImportWarningSetArchive::cond_format_complex_formula() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_complex_formula)
  return _internal_cond_format_complex_formula();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_complex_formula(bool value) {
  _has_bits_[0] |= 0x00000010u;
  cond_format_complex_formula_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_complex_formula(bool value) {
  _internal_set_cond_format_complex_formula(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_complex_formula)
}

// optional bool cond_format_contains_errors = 5 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_contains_errors() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_contains_errors() const {
  return _internal_has_cond_format_contains_errors();
}
inline void ImportWarningSetArchive::clear_cond_format_contains_errors() {
  cond_format_contains_errors_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_contains_errors() const {
  return cond_format_contains_errors_;
}
inline bool ImportWarningSetArchive::cond_format_contains_errors() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_contains_errors)
  return _internal_cond_format_contains_errors();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_contains_errors(bool value) {
  _has_bits_[0] |= 0x00000020u;
  cond_format_contains_errors_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_contains_errors(bool value) {
  _internal_set_cond_format_contains_errors(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_contains_errors)
}

// optional bool cond_format_expr = 6 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_expr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_expr() const {
  return _internal_has_cond_format_expr();
}
inline void ImportWarningSetArchive::clear_cond_format_expr() {
  cond_format_expr_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_expr() const {
  return cond_format_expr_;
}
inline bool ImportWarningSetArchive::cond_format_expr() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_expr)
  return _internal_cond_format_expr();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_expr(bool value) {
  _has_bits_[0] |= 0x00000040u;
  cond_format_expr_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_expr(bool value) {
  _internal_set_cond_format_expr(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_expr)
}

// optional bool cond_format_not_contains_errors = 7 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_not_contains_errors() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_not_contains_errors() const {
  return _internal_has_cond_format_not_contains_errors();
}
inline void ImportWarningSetArchive::clear_cond_format_not_contains_errors() {
  cond_format_not_contains_errors_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_not_contains_errors() const {
  return cond_format_not_contains_errors_;
}
inline bool ImportWarningSetArchive::cond_format_not_contains_errors() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_not_contains_errors)
  return _internal_cond_format_not_contains_errors();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_not_contains_errors(bool value) {
  _has_bits_[0] |= 0x00000080u;
  cond_format_not_contains_errors_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_not_contains_errors(bool value) {
  _internal_set_cond_format_not_contains_errors(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_not_contains_errors)
}

// optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_parameters_not_all_same_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_parameters_not_all_same_type() const {
  return _internal_has_cond_format_parameters_not_all_same_type();
}
inline void ImportWarningSetArchive::clear_cond_format_parameters_not_all_same_type() {
  cond_format_parameters_not_all_same_type_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_parameters_not_all_same_type() const {
  return cond_format_parameters_not_all_same_type_;
}
inline bool ImportWarningSetArchive::cond_format_parameters_not_all_same_type() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_parameters_not_all_same_type)
  return _internal_cond_format_parameters_not_all_same_type();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_parameters_not_all_same_type(bool value) {
  _has_bits_[0] |= 0x00000100u;
  cond_format_parameters_not_all_same_type_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_parameters_not_all_same_type(bool value) {
  _internal_set_cond_format_parameters_not_all_same_type(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_parameters_not_all_same_type)
}

// optional bool cond_format_stop_if_true = 9 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_stop_if_true() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_stop_if_true() const {
  return _internal_has_cond_format_stop_if_true();
}
inline void ImportWarningSetArchive::clear_cond_format_stop_if_true() {
  cond_format_stop_if_true_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_stop_if_true() const {
  return cond_format_stop_if_true_;
}
inline bool ImportWarningSetArchive::cond_format_stop_if_true() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_stop_if_true)
  return _internal_cond_format_stop_if_true();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_stop_if_true(bool value) {
  _has_bits_[0] |= 0x00000200u;
  cond_format_stop_if_true_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_stop_if_true(bool value) {
  _internal_set_cond_format_stop_if_true(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_stop_if_true)
}

// optional bool cond_format_unsupported_operator = 10 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_unsupported_operator() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_unsupported_operator() const {
  return _internal_has_cond_format_unsupported_operator();
}
inline void ImportWarningSetArchive::clear_cond_format_unsupported_operator() {
  cond_format_unsupported_operator_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_unsupported_operator() const {
  return cond_format_unsupported_operator_;
}
inline bool ImportWarningSetArchive::cond_format_unsupported_operator() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_unsupported_operator)
  return _internal_cond_format_unsupported_operator();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_unsupported_operator(bool value) {
  _has_bits_[0] |= 0x00000400u;
  cond_format_unsupported_operator_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_unsupported_operator(bool value) {
  _internal_set_cond_format_unsupported_operator(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_unsupported_operator)
}

// optional bool cond_format_unsupported_styling = 11 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_unsupported_styling() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_unsupported_styling() const {
  return _internal_has_cond_format_unsupported_styling();
}
inline void ImportWarningSetArchive::clear_cond_format_unsupported_styling() {
  cond_format_unsupported_styling_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_unsupported_styling() const {
  return cond_format_unsupported_styling_;
}
inline bool ImportWarningSetArchive::cond_format_unsupported_styling() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_unsupported_styling)
  return _internal_cond_format_unsupported_styling();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_unsupported_styling(bool value) {
  _has_bits_[0] |= 0x00000800u;
  cond_format_unsupported_styling_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_unsupported_styling(bool value) {
  _internal_set_cond_format_unsupported_styling(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_unsupported_styling)
}

// optional bool cond_format_unsupported_time_period = 12 [default = false];
inline bool ImportWarningSetArchive::_internal_has_cond_format_unsupported_time_period() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_cond_format_unsupported_time_period() const {
  return _internal_has_cond_format_unsupported_time_period();
}
inline void ImportWarningSetArchive::clear_cond_format_unsupported_time_period() {
  cond_format_unsupported_time_period_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ImportWarningSetArchive::_internal_cond_format_unsupported_time_period() const {
  return cond_format_unsupported_time_period_;
}
inline bool ImportWarningSetArchive::cond_format_unsupported_time_period() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.cond_format_unsupported_time_period)
  return _internal_cond_format_unsupported_time_period();
}
inline void ImportWarningSetArchive::_internal_set_cond_format_unsupported_time_period(bool value) {
  _has_bits_[0] |= 0x00001000u;
  cond_format_unsupported_time_period_ = value;
}
inline void ImportWarningSetArchive::set_cond_format_unsupported_time_period(bool value) {
  _internal_set_cond_format_unsupported_time_period(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.cond_format_unsupported_time_period)
}

// optional bool error_cell_with_no_formula = 13 [default = false];
inline bool ImportWarningSetArchive::_internal_has_error_cell_with_no_formula() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_error_cell_with_no_formula() const {
  return _internal_has_error_cell_with_no_formula();
}
inline void ImportWarningSetArchive::clear_error_cell_with_no_formula() {
  error_cell_with_no_formula_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ImportWarningSetArchive::_internal_error_cell_with_no_formula() const {
  return error_cell_with_no_formula_;
}
inline bool ImportWarningSetArchive::error_cell_with_no_formula() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.error_cell_with_no_formula)
  return _internal_error_cell_with_no_formula();
}
inline void ImportWarningSetArchive::_internal_set_error_cell_with_no_formula(bool value) {
  _has_bits_[0] |= 0x00002000u;
  error_cell_with_no_formula_ = value;
}
inline void ImportWarningSetArchive::set_error_cell_with_no_formula(bool value) {
  _internal_set_error_cell_with_no_formula(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.error_cell_with_no_formula)
}

// optional bool unsupported_cond_format = 14 [default = false];
inline bool ImportWarningSetArchive::_internal_has_unsupported_cond_format() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_unsupported_cond_format() const {
  return _internal_has_unsupported_cond_format();
}
inline void ImportWarningSetArchive::clear_unsupported_cond_format() {
  unsupported_cond_format_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ImportWarningSetArchive::_internal_unsupported_cond_format() const {
  return unsupported_cond_format_;
}
inline bool ImportWarningSetArchive::unsupported_cond_format() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.unsupported_cond_format)
  return _internal_unsupported_cond_format();
}
inline void ImportWarningSetArchive::_internal_set_unsupported_cond_format(bool value) {
  _has_bits_[0] |= 0x00004000u;
  unsupported_cond_format_ = value;
}
inline void ImportWarningSetArchive::set_unsupported_cond_format(bool value) {
  _internal_set_unsupported_cond_format(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.unsupported_cond_format)
}

// optional string original_data_format = 15;
inline bool ImportWarningSetArchive::_internal_has_original_data_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_original_data_format() const {
  return _internal_has_original_data_format();
}
inline void ImportWarningSetArchive::clear_original_data_format() {
  original_data_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImportWarningSetArchive::original_data_format() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.original_data_format)
  return _internal_original_data_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ImportWarningSetArchive::set_original_data_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 original_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.original_data_format)
}
inline std::string* ImportWarningSetArchive::mutable_original_data_format() {
  // @@protoc_insertion_point(field_mutable:TST.ImportWarningSetArchive.original_data_format)
  return _internal_mutable_original_data_format();
}
inline const std::string& ImportWarningSetArchive::_internal_original_data_format() const {
  return original_data_format_.Get();
}
inline void ImportWarningSetArchive::_internal_set_original_data_format(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  original_data_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ImportWarningSetArchive::_internal_mutable_original_data_format() {
  _has_bits_[0] |= 0x00000001u;
  return original_data_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportWarningSetArchive::release_original_data_format() {
  // @@protoc_insertion_point(field_release:TST.ImportWarningSetArchive.original_data_format)
  if (!_internal_has_original_data_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return original_data_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportWarningSetArchive::set_allocated_original_data_format(std::string* original_data_format) {
  if (original_data_format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  original_data_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_data_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.ImportWarningSetArchive.original_data_format)
}

// optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
inline bool ImportWarningSetArchive::_internal_has_formula_warning_filtered_column_formula_not_copied() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_formula_warning_filtered_column_formula_not_copied() const {
  return _internal_has_formula_warning_filtered_column_formula_not_copied();
}
inline void ImportWarningSetArchive::clear_formula_warning_filtered_column_formula_not_copied() {
  formula_warning_filtered_column_formula_not_copied_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ImportWarningSetArchive::_internal_formula_warning_filtered_column_formula_not_copied() const {
  return formula_warning_filtered_column_formula_not_copied_;
}
inline bool ImportWarningSetArchive::formula_warning_filtered_column_formula_not_copied() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.formula_warning_filtered_column_formula_not_copied)
  return _internal_formula_warning_filtered_column_formula_not_copied();
}
inline void ImportWarningSetArchive::_internal_set_formula_warning_filtered_column_formula_not_copied(bool value) {
  _has_bits_[0] |= 0x00008000u;
  formula_warning_filtered_column_formula_not_copied_ = value;
}
inline void ImportWarningSetArchive::set_formula_warning_filtered_column_formula_not_copied(bool value) {
  _internal_set_formula_warning_filtered_column_formula_not_copied(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.formula_warning_filtered_column_formula_not_copied)
}

// optional bool duration_format_range_changed = 17 [default = false];
inline bool ImportWarningSetArchive::_internal_has_duration_format_range_changed() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ImportWarningSetArchive::has_duration_format_range_changed() const {
  return _internal_has_duration_format_range_changed();
}
inline void ImportWarningSetArchive::clear_duration_format_range_changed() {
  duration_format_range_changed_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ImportWarningSetArchive::_internal_duration_format_range_changed() const {
  return duration_format_range_changed_;
}
inline bool ImportWarningSetArchive::duration_format_range_changed() const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetArchive.duration_format_range_changed)
  return _internal_duration_format_range_changed();
}
inline void ImportWarningSetArchive::_internal_set_duration_format_range_changed(bool value) {
  _has_bits_[0] |= 0x00010000u;
  duration_format_range_changed_ = value;
}
inline void ImportWarningSetArchive::set_duration_format_range_changed(bool value) {
  _internal_set_duration_format_range_changed(value);
  // @@protoc_insertion_point(field_set:TST.ImportWarningSetArchive.duration_format_range_changed)
}

// -------------------------------------------------------------------

// CellRefImportWarningSetPairArchive

// required .TSCE.CellReferenceArchive cell_ref = 1;
inline bool CellRefImportWarningSetPairArchive::_internal_has_cell_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_ref_ != nullptr);
  return value;
}
inline bool CellRefImportWarningSetPairArchive::has_cell_ref() const {
  return _internal_has_cell_ref();
}
inline const ::TSCE::CellReferenceArchive& CellRefImportWarningSetPairArchive::_internal_cell_ref() const {
  const ::TSCE::CellReferenceArchive* p = cell_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& CellRefImportWarningSetPairArchive::cell_ref() const {
  // @@protoc_insertion_point(field_get:TST.CellRefImportWarningSetPairArchive.cell_ref)
  return _internal_cell_ref();
}
inline void CellRefImportWarningSetPairArchive::unsafe_arena_set_allocated_cell_ref(
    ::TSCE::CellReferenceArchive* cell_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_ref_);
  }
  cell_ref_ = cell_ref;
  if (cell_ref) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellRefImportWarningSetPairArchive.cell_ref)
}
inline ::TSCE::CellReferenceArchive* CellRefImportWarningSetPairArchive::release_cell_ref() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_ref_;
  cell_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellReferenceArchive* CellRefImportWarningSetPairArchive::unsafe_arena_release_cell_ref() {
  // @@protoc_insertion_point(field_release:TST.CellRefImportWarningSetPairArchive.cell_ref)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellReferenceArchive* temp = cell_ref_;
  cell_ref_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* CellRefImportWarningSetPairArchive::_internal_mutable_cell_ref() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArena());
    cell_ref_ = p;
  }
  return cell_ref_;
}
inline ::TSCE::CellReferenceArchive* CellRefImportWarningSetPairArchive::mutable_cell_ref() {
  // @@protoc_insertion_point(field_mutable:TST.CellRefImportWarningSetPairArchive.cell_ref)
  return _internal_mutable_cell_ref();
}
inline void CellRefImportWarningSetPairArchive::set_allocated_cell_ref(::TSCE::CellReferenceArchive* cell_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_ref_);
  }
  if (cell_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_ref)->GetArena();
    if (message_arena != submessage_arena) {
      cell_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_ref_ = cell_ref;
  // @@protoc_insertion_point(field_set_allocated:TST.CellRefImportWarningSetPairArchive.cell_ref)
}

// optional .TST.ImportWarningSetArchive warning_set = 3;
inline bool CellRefImportWarningSetPairArchive::_internal_has_warning_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || warning_set_ != nullptr);
  return value;
}
inline bool CellRefImportWarningSetPairArchive::has_warning_set() const {
  return _internal_has_warning_set();
}
inline void CellRefImportWarningSetPairArchive::clear_warning_set() {
  if (warning_set_ != nullptr) warning_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ImportWarningSetArchive& CellRefImportWarningSetPairArchive::_internal_warning_set() const {
  const ::TST::ImportWarningSetArchive* p = warning_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ImportWarningSetArchive&>(
      ::TST::_ImportWarningSetArchive_default_instance_);
}
inline const ::TST::ImportWarningSetArchive& CellRefImportWarningSetPairArchive::warning_set() const {
  // @@protoc_insertion_point(field_get:TST.CellRefImportWarningSetPairArchive.warning_set)
  return _internal_warning_set();
}
inline void CellRefImportWarningSetPairArchive::unsafe_arena_set_allocated_warning_set(
    ::TST::ImportWarningSetArchive* warning_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warning_set_);
  }
  warning_set_ = warning_set;
  if (warning_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellRefImportWarningSetPairArchive.warning_set)
}
inline ::TST::ImportWarningSetArchive* CellRefImportWarningSetPairArchive::release_warning_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ImportWarningSetArchive* temp = warning_set_;
  warning_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ImportWarningSetArchive* CellRefImportWarningSetPairArchive::unsafe_arena_release_warning_set() {
  // @@protoc_insertion_point(field_release:TST.CellRefImportWarningSetPairArchive.warning_set)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ImportWarningSetArchive* temp = warning_set_;
  warning_set_ = nullptr;
  return temp;
}
inline ::TST::ImportWarningSetArchive* CellRefImportWarningSetPairArchive::_internal_mutable_warning_set() {
  _has_bits_[0] |= 0x00000002u;
  if (warning_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ImportWarningSetArchive>(GetArena());
    warning_set_ = p;
  }
  return warning_set_;
}
inline ::TST::ImportWarningSetArchive* CellRefImportWarningSetPairArchive::mutable_warning_set() {
  // @@protoc_insertion_point(field_mutable:TST.CellRefImportWarningSetPairArchive.warning_set)
  return _internal_mutable_warning_set();
}
inline void CellRefImportWarningSetPairArchive::set_allocated_warning_set(::TST::ImportWarningSetArchive* warning_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete warning_set_;
  }
  if (warning_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(warning_set);
    if (message_arena != submessage_arena) {
      warning_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warning_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  warning_set_ = warning_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CellRefImportWarningSetPairArchive.warning_set)
}

// -------------------------------------------------------------------

// ImportWarningSetByCellRefArchive

// repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
inline int ImportWarningSetByCellRefArchive::_internal_cellref_warning_set_pair_size() const {
  return cellref_warning_set_pair_.size();
}
inline int ImportWarningSetByCellRefArchive::cellref_warning_set_pair_size() const {
  return _internal_cellref_warning_set_pair_size();
}
inline void ImportWarningSetByCellRefArchive::clear_cellref_warning_set_pair() {
  cellref_warning_set_pair_.Clear();
}
inline ::TST::CellRefImportWarningSetPairArchive* ImportWarningSetByCellRefArchive::mutable_cellref_warning_set_pair(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ImportWarningSetByCellRefArchive.cellref_warning_set_pair)
  return cellref_warning_set_pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRefImportWarningSetPairArchive >*
ImportWarningSetByCellRefArchive::mutable_cellref_warning_set_pair() {
  // @@protoc_insertion_point(field_mutable_list:TST.ImportWarningSetByCellRefArchive.cellref_warning_set_pair)
  return &cellref_warning_set_pair_;
}
inline const ::TST::CellRefImportWarningSetPairArchive& ImportWarningSetByCellRefArchive::_internal_cellref_warning_set_pair(int index) const {
  return cellref_warning_set_pair_.Get(index);
}
inline const ::TST::CellRefImportWarningSetPairArchive& ImportWarningSetByCellRefArchive::cellref_warning_set_pair(int index) const {
  // @@protoc_insertion_point(field_get:TST.ImportWarningSetByCellRefArchive.cellref_warning_set_pair)
  return _internal_cellref_warning_set_pair(index);
}
inline ::TST::CellRefImportWarningSetPairArchive* ImportWarningSetByCellRefArchive::_internal_add_cellref_warning_set_pair() {
  return cellref_warning_set_pair_.Add();
}
inline ::TST::CellRefImportWarningSetPairArchive* ImportWarningSetByCellRefArchive::add_cellref_warning_set_pair() {
  // @@protoc_insertion_point(field_add:TST.ImportWarningSetByCellRefArchive.cellref_warning_set_pair)
  return _internal_add_cellref_warning_set_pair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRefImportWarningSetPairArchive >&
ImportWarningSetByCellRefArchive::cellref_warning_set_pair() const {
  // @@protoc_insertion_point(field_list:TST.ImportWarningSetByCellRefArchive.cellref_warning_set_pair)
  return cellref_warning_set_pair_;
}

// -------------------------------------------------------------------

// TableDataList_ListEntry

// required uint32 key = 1;
inline bool TableDataList_ListEntry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TableDataList_ListEntry::has_key() const {
  return _internal_has_key();
}
inline void TableDataList_ListEntry::clear_key() {
  key_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableDataList_ListEntry::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableDataList_ListEntry::key() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.key)
  return _internal_key();
}
inline void TableDataList_ListEntry::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  key_ = value;
}
inline void TableDataList_ListEntry::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:TST.TableDataList.ListEntry.key)
}

// required uint32 refcount = 2;
inline bool TableDataList_ListEntry::_internal_has_refcount() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TableDataList_ListEntry::has_refcount() const {
  return _internal_has_refcount();
}
inline void TableDataList_ListEntry::clear_refcount() {
  refcount_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableDataList_ListEntry::_internal_refcount() const {
  return refcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableDataList_ListEntry::refcount() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.refcount)
  return _internal_refcount();
}
inline void TableDataList_ListEntry::_internal_set_refcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  refcount_ = value;
}
inline void TableDataList_ListEntry::set_refcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_refcount(value);
  // @@protoc_insertion_point(field_set:TST.TableDataList.ListEntry.refcount)
}

// optional string string = 3;
inline bool TableDataList_ListEntry::_internal_has_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableDataList_ListEntry::has_string() const {
  return _internal_has_string();
}
inline void TableDataList_ListEntry::clear_string() {
  string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableDataList_ListEntry::string() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TableDataList_ListEntry::set_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TableDataList.ListEntry.string)
}
inline std::string* TableDataList_ListEntry::mutable_string() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.string)
  return _internal_mutable_string();
}
inline const std::string& TableDataList_ListEntry::_internal_string() const {
  return string_.Get();
}
inline void TableDataList_ListEntry::_internal_set_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TableDataList_ListEntry::_internal_mutable_string() {
  _has_bits_[0] |= 0x00000001u;
  return string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableDataList_ListEntry::release_string() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.string)
  if (!_internal_has_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableDataList_ListEntry::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.string)
}

// optional .TSP.Reference reference = 4;
inline bool TableDataList_ListEntry::_internal_has_reference() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || reference_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_reference() const {
  return _internal_has_reference();
}
inline const ::TSP::Reference& TableDataList_ListEntry::_internal_reference() const {
  const ::TSP::Reference* p = reference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableDataList_ListEntry::reference() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.reference)
  return _internal_reference();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_reference(
    ::TSP::Reference* reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_);
  }
  reference_ = reference;
  if (reference) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.reference)
}
inline ::TSP::Reference* TableDataList_ListEntry::release_reference() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = reference_;
  reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableDataList_ListEntry::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.reference)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = reference_;
  reference_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableDataList_ListEntry::_internal_mutable_reference() {
  _has_bits_[0] |= 0x00000002u;
  if (reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    reference_ = p;
  }
  return reference_;
}
inline ::TSP::Reference* TableDataList_ListEntry::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.reference)
  return _internal_mutable_reference();
}
inline void TableDataList_ListEntry::set_allocated_reference(::TSP::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_);
  }
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference)->GetArena();
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.reference)
}

// optional .TSCE.FormulaArchive formula = 5;
inline bool TableDataList_ListEntry::_internal_has_formula() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || formula_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_formula() const {
  return _internal_has_formula();
}
inline const ::TSCE::FormulaArchive& TableDataList_ListEntry::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& TableDataList_ListEntry::formula() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.formula)
  return _internal_formula();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  formula_ = formula;
  if (formula) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.formula)
}
inline ::TSCE::FormulaArchive* TableDataList_ListEntry::release_formula() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaArchive* TableDataList_ListEntry::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.formula)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* TableDataList_ListEntry::_internal_mutable_formula() {
  _has_bits_[0] |= 0x00000004u;
  if (formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArena());
    formula_ = p;
  }
  return formula_;
}
inline ::TSCE::FormulaArchive* TableDataList_ListEntry::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.formula)
  return _internal_mutable_formula();
}
inline void TableDataList_ListEntry::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula)->GetArena();
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.formula)
}

// optional .TSK.FormatStructArchive format = 6;
inline bool TableDataList_ListEntry::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_format() const {
  return _internal_has_format();
}
inline const ::TSK::FormatStructArchive& TableDataList_ListEntry::_internal_format() const {
  const ::TSK::FormatStructArchive* p = format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& TableDataList_ListEntry::format() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.format)
  return _internal_format();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_format(
    ::TSK::FormatStructArchive* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.format)
}
inline ::TSK::FormatStructArchive* TableDataList_ListEntry::release_format() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* TableDataList_ListEntry::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.format)
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* TableDataList_ListEntry::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000008u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::TSK::FormatStructArchive* TableDataList_ListEntry::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.format)
  return _internal_mutable_format();
}
inline void TableDataList_ListEntry::set_allocated_format(::TSK::FormatStructArchive* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.format)
}

// optional .TSK.CustomFormatArchive custom_format = 8;
inline bool TableDataList_ListEntry::_internal_has_custom_format() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || custom_format_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_custom_format() const {
  return _internal_has_custom_format();
}
inline const ::TSK::CustomFormatArchive& TableDataList_ListEntry::_internal_custom_format() const {
  const ::TSK::CustomFormatArchive* p = custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& TableDataList_ListEntry::custom_format() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.custom_format)
  return _internal_custom_format();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_custom_format(
    ::TSK::CustomFormatArchive* custom_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_);
  }
  custom_format_ = custom_format;
  if (custom_format) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.custom_format)
}
inline ::TSK::CustomFormatArchive* TableDataList_ListEntry::release_custom_format() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::CustomFormatArchive* temp = custom_format_;
  custom_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CustomFormatArchive* TableDataList_ListEntry::unsafe_arena_release_custom_format() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.custom_format)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::CustomFormatArchive* temp = custom_format_;
  custom_format_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* TableDataList_ListEntry::_internal_mutable_custom_format() {
  _has_bits_[0] |= 0x00000010u;
  if (custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArena());
    custom_format_ = p;
  }
  return custom_format_;
}
inline ::TSK::CustomFormatArchive* TableDataList_ListEntry::mutable_custom_format() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.custom_format)
  return _internal_mutable_custom_format();
}
inline void TableDataList_ListEntry::set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_);
  }
  if (custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format)->GetArena();
    if (message_arena != submessage_arena) {
      custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_format_ = custom_format;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.custom_format)
}

// optional .TSP.Reference rich_text_payload = 9;
inline bool TableDataList_ListEntry::_internal_has_rich_text_payload() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || rich_text_payload_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_rich_text_payload() const {
  return _internal_has_rich_text_payload();
}
inline const ::TSP::Reference& TableDataList_ListEntry::_internal_rich_text_payload() const {
  const ::TSP::Reference* p = rich_text_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableDataList_ListEntry::rich_text_payload() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.rich_text_payload)
  return _internal_rich_text_payload();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_rich_text_payload(
    ::TSP::Reference* rich_text_payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_payload_);
  }
  rich_text_payload_ = rich_text_payload;
  if (rich_text_payload) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.rich_text_payload)
}
inline ::TSP::Reference* TableDataList_ListEntry::release_rich_text_payload() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = rich_text_payload_;
  rich_text_payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableDataList_ListEntry::unsafe_arena_release_rich_text_payload() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.rich_text_payload)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = rich_text_payload_;
  rich_text_payload_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableDataList_ListEntry::_internal_mutable_rich_text_payload() {
  _has_bits_[0] |= 0x00000020u;
  if (rich_text_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    rich_text_payload_ = p;
  }
  return rich_text_payload_;
}
inline ::TSP::Reference* TableDataList_ListEntry::mutable_rich_text_payload() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.rich_text_payload)
  return _internal_mutable_rich_text_payload();
}
inline void TableDataList_ListEntry::set_allocated_rich_text_payload(::TSP::Reference* rich_text_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_payload_);
  }
  if (rich_text_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_payload)->GetArena();
    if (message_arena != submessage_arena) {
      rich_text_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rich_text_payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  rich_text_payload_ = rich_text_payload;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.rich_text_payload)
}

// optional .TSP.Reference comment_storage = 10;
inline bool TableDataList_ListEntry::_internal_has_comment_storage() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || comment_storage_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_comment_storage() const {
  return _internal_has_comment_storage();
}
inline const ::TSP::Reference& TableDataList_ListEntry::_internal_comment_storage() const {
  const ::TSP::Reference* p = comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableDataList_ListEntry::comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.comment_storage)
  return _internal_comment_storage();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_comment_storage(
    ::TSP::Reference* comment_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  comment_storage_ = comment_storage;
  if (comment_storage) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.comment_storage)
}
inline ::TSP::Reference* TableDataList_ListEntry::release_comment_storage() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableDataList_ListEntry::unsafe_arena_release_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.comment_storage)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableDataList_ListEntry::_internal_mutable_comment_storage() {
  _has_bits_[0] |= 0x00000040u;
  if (comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    comment_storage_ = p;
  }
  return comment_storage_;
}
inline ::TSP::Reference* TableDataList_ListEntry::mutable_comment_storage() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.comment_storage)
  return _internal_mutable_comment_storage();
}
inline void TableDataList_ListEntry::set_allocated_comment_storage(::TSP::Reference* comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  if (comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage)->GetArena();
    if (message_arena != submessage_arena) {
      comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  comment_storage_ = comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.comment_storage)
}

// optional .TST.ImportWarningSetArchive import_warning_set = 11;
inline bool TableDataList_ListEntry::_internal_has_import_warning_set() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || import_warning_set_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_import_warning_set() const {
  return _internal_has_import_warning_set();
}
inline void TableDataList_ListEntry::clear_import_warning_set() {
  if (import_warning_set_ != nullptr) import_warning_set_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TST::ImportWarningSetArchive& TableDataList_ListEntry::_internal_import_warning_set() const {
  const ::TST::ImportWarningSetArchive* p = import_warning_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ImportWarningSetArchive&>(
      ::TST::_ImportWarningSetArchive_default_instance_);
}
inline const ::TST::ImportWarningSetArchive& TableDataList_ListEntry::import_warning_set() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.import_warning_set)
  return _internal_import_warning_set();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_import_warning_set(
    ::TST::ImportWarningSetArchive* import_warning_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(import_warning_set_);
  }
  import_warning_set_ = import_warning_set;
  if (import_warning_set) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.import_warning_set)
}
inline ::TST::ImportWarningSetArchive* TableDataList_ListEntry::release_import_warning_set() {
  _has_bits_[0] &= ~0x00000080u;
  ::TST::ImportWarningSetArchive* temp = import_warning_set_;
  import_warning_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ImportWarningSetArchive* TableDataList_ListEntry::unsafe_arena_release_import_warning_set() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.import_warning_set)
  _has_bits_[0] &= ~0x00000080u;
  ::TST::ImportWarningSetArchive* temp = import_warning_set_;
  import_warning_set_ = nullptr;
  return temp;
}
inline ::TST::ImportWarningSetArchive* TableDataList_ListEntry::_internal_mutable_import_warning_set() {
  _has_bits_[0] |= 0x00000080u;
  if (import_warning_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ImportWarningSetArchive>(GetArena());
    import_warning_set_ = p;
  }
  return import_warning_set_;
}
inline ::TST::ImportWarningSetArchive* TableDataList_ListEntry::mutable_import_warning_set() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.import_warning_set)
  return _internal_mutable_import_warning_set();
}
inline void TableDataList_ListEntry::set_allocated_import_warning_set(::TST::ImportWarningSetArchive* import_warning_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete import_warning_set_;
  }
  if (import_warning_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(import_warning_set);
    if (message_arena != submessage_arena) {
      import_warning_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, import_warning_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  import_warning_set_ = import_warning_set;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.import_warning_set)
}

// optional .TST.CellSpecArchive cell_spec = 12;
inline bool TableDataList_ListEntry::_internal_has_cell_spec() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || cell_spec_ != nullptr);
  return value;
}
inline bool TableDataList_ListEntry::has_cell_spec() const {
  return _internal_has_cell_spec();
}
inline void TableDataList_ListEntry::clear_cell_spec() {
  if (cell_spec_ != nullptr) cell_spec_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TST::CellSpecArchive& TableDataList_ListEntry::_internal_cell_spec() const {
  const ::TST::CellSpecArchive* p = cell_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellSpecArchive&>(
      ::TST::_CellSpecArchive_default_instance_);
}
inline const ::TST::CellSpecArchive& TableDataList_ListEntry::cell_spec() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.ListEntry.cell_spec)
  return _internal_cell_spec();
}
inline void TableDataList_ListEntry::unsafe_arena_set_allocated_cell_spec(
    ::TST::CellSpecArchive* cell_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_spec_);
  }
  cell_spec_ = cell_spec;
  if (cell_spec) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataList.ListEntry.cell_spec)
}
inline ::TST::CellSpecArchive* TableDataList_ListEntry::release_cell_spec() {
  _has_bits_[0] &= ~0x00000100u;
  ::TST::CellSpecArchive* temp = cell_spec_;
  cell_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellSpecArchive* TableDataList_ListEntry::unsafe_arena_release_cell_spec() {
  // @@protoc_insertion_point(field_release:TST.TableDataList.ListEntry.cell_spec)
  _has_bits_[0] &= ~0x00000100u;
  ::TST::CellSpecArchive* temp = cell_spec_;
  cell_spec_ = nullptr;
  return temp;
}
inline ::TST::CellSpecArchive* TableDataList_ListEntry::_internal_mutable_cell_spec() {
  _has_bits_[0] |= 0x00000100u;
  if (cell_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellSpecArchive>(GetArena());
    cell_spec_ = p;
  }
  return cell_spec_;
}
inline ::TST::CellSpecArchive* TableDataList_ListEntry::mutable_cell_spec() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.ListEntry.cell_spec)
  return _internal_mutable_cell_spec();
}
inline void TableDataList_ListEntry::set_allocated_cell_spec(::TST::CellSpecArchive* cell_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_spec_;
  }
  if (cell_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_spec);
    if (message_arena != submessage_arena) {
      cell_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  cell_spec_ = cell_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataList.ListEntry.cell_spec)
}

// -------------------------------------------------------------------

// TableDataList

// required .TST.TableDataList.ListType listType = 1;
inline bool TableDataList::_internal_has_listtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableDataList::has_listtype() const {
  return _internal_has_listtype();
}
inline void TableDataList::clear_listtype() {
  listtype_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::TableDataList_ListType TableDataList::_internal_listtype() const {
  return static_cast< ::TST::TableDataList_ListType >(listtype_);
}
inline ::TST::TableDataList_ListType TableDataList::listtype() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.listType)
  return _internal_listtype();
}
inline void TableDataList::_internal_set_listtype(::TST::TableDataList_ListType value) {
  assert(::TST::TableDataList_ListType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  listtype_ = value;
}
inline void TableDataList::set_listtype(::TST::TableDataList_ListType value) {
  _internal_set_listtype(value);
  // @@protoc_insertion_point(field_set:TST.TableDataList.listType)
}

// required uint32 nextListID = 2;
inline bool TableDataList::_internal_has_nextlistid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableDataList::has_nextlistid() const {
  return _internal_has_nextlistid();
}
inline void TableDataList::clear_nextlistid() {
  nextlistid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableDataList::_internal_nextlistid() const {
  return nextlistid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableDataList::nextlistid() const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.nextListID)
  return _internal_nextlistid();
}
inline void TableDataList::_internal_set_nextlistid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  nextlistid_ = value;
}
inline void TableDataList::set_nextlistid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nextlistid(value);
  // @@protoc_insertion_point(field_set:TST.TableDataList.nextListID)
}

// repeated .TST.TableDataList.ListEntry entries = 3;
inline int TableDataList::_internal_entries_size() const {
  return entries_.size();
}
inline int TableDataList::entries_size() const {
  return _internal_entries_size();
}
inline void TableDataList::clear_entries() {
  entries_.Clear();
}
inline ::TST::TableDataList_ListEntry* TableDataList::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >*
TableDataList::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TST.TableDataList.entries)
  return &entries_;
}
inline const ::TST::TableDataList_ListEntry& TableDataList::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TST::TableDataList_ListEntry& TableDataList::entries(int index) const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.entries)
  return _internal_entries(index);
}
inline ::TST::TableDataList_ListEntry* TableDataList::_internal_add_entries() {
  return entries_.Add();
}
inline ::TST::TableDataList_ListEntry* TableDataList::add_entries() {
  // @@protoc_insertion_point(field_add:TST.TableDataList.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >&
TableDataList::entries() const {
  // @@protoc_insertion_point(field_list:TST.TableDataList.entries)
  return entries_;
}

// repeated .TSP.Reference segments = 4;
inline int TableDataList::_internal_segments_size() const {
  return segments_.size();
}
inline int TableDataList::segments_size() const {
  return _internal_segments_size();
}
inline ::TSP::Reference* TableDataList::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TableDataList.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
TableDataList::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:TST.TableDataList.segments)
  return &segments_;
}
inline const ::TSP::Reference& TableDataList::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::TSP::Reference& TableDataList::segments(int index) const {
  // @@protoc_insertion_point(field_get:TST.TableDataList.segments)
  return _internal_segments(index);
}
inline ::TSP::Reference* TableDataList::_internal_add_segments() {
  return segments_.Add();
}
inline ::TSP::Reference* TableDataList::add_segments() {
  // @@protoc_insertion_point(field_add:TST.TableDataList.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
TableDataList::segments() const {
  // @@protoc_insertion_point(field_list:TST.TableDataList.segments)
  return segments_;
}

// -------------------------------------------------------------------

// TableDataListSegment

// required .TST.TableDataList.ListType list_type = 1;
inline bool TableDataListSegment::_internal_has_list_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableDataListSegment::has_list_type() const {
  return _internal_has_list_type();
}
inline void TableDataListSegment::clear_list_type() {
  list_type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::TableDataList_ListType TableDataListSegment::_internal_list_type() const {
  return static_cast< ::TST::TableDataList_ListType >(list_type_);
}
inline ::TST::TableDataList_ListType TableDataListSegment::list_type() const {
  // @@protoc_insertion_point(field_get:TST.TableDataListSegment.list_type)
  return _internal_list_type();
}
inline void TableDataListSegment::_internal_set_list_type(::TST::TableDataList_ListType value) {
  assert(::TST::TableDataList_ListType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  list_type_ = value;
}
inline void TableDataListSegment::set_list_type(::TST::TableDataList_ListType value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:TST.TableDataListSegment.list_type)
}

// required .TSP.Range key_range = 2;
inline bool TableDataListSegment::_internal_has_key_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || key_range_ != nullptr);
  return value;
}
inline bool TableDataListSegment::has_key_range() const {
  return _internal_has_key_range();
}
inline const ::TSP::Range& TableDataListSegment::_internal_key_range() const {
  const ::TSP::Range* p = key_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& TableDataListSegment::key_range() const {
  // @@protoc_insertion_point(field_get:TST.TableDataListSegment.key_range)
  return _internal_key_range();
}
inline void TableDataListSegment::unsafe_arena_set_allocated_key_range(
    ::TSP::Range* key_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_range_);
  }
  key_range_ = key_range;
  if (key_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableDataListSegment.key_range)
}
inline ::TSP::Range* TableDataListSegment::release_key_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = key_range_;
  key_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* TableDataListSegment::unsafe_arena_release_key_range() {
  // @@protoc_insertion_point(field_release:TST.TableDataListSegment.key_range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Range* temp = key_range_;
  key_range_ = nullptr;
  return temp;
}
inline ::TSP::Range* TableDataListSegment::_internal_mutable_key_range() {
  _has_bits_[0] |= 0x00000001u;
  if (key_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    key_range_ = p;
  }
  return key_range_;
}
inline ::TSP::Range* TableDataListSegment::mutable_key_range() {
  // @@protoc_insertion_point(field_mutable:TST.TableDataListSegment.key_range)
  return _internal_mutable_key_range();
}
inline void TableDataListSegment::set_allocated_key_range(::TSP::Range* key_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_range_);
  }
  if (key_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_range)->GetArena();
    if (message_arena != submessage_arena) {
      key_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_range_ = key_range;
  // @@protoc_insertion_point(field_set_allocated:TST.TableDataListSegment.key_range)
}

// repeated .TST.TableDataList.ListEntry entries = 3;
inline int TableDataListSegment::_internal_entries_size() const {
  return entries_.size();
}
inline int TableDataListSegment::entries_size() const {
  return _internal_entries_size();
}
inline void TableDataListSegment::clear_entries() {
  entries_.Clear();
}
inline ::TST::TableDataList_ListEntry* TableDataListSegment::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TableDataListSegment.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >*
TableDataListSegment::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TST.TableDataListSegment.entries)
  return &entries_;
}
inline const ::TST::TableDataList_ListEntry& TableDataListSegment::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TST::TableDataList_ListEntry& TableDataListSegment::entries(int index) const {
  // @@protoc_insertion_point(field_get:TST.TableDataListSegment.entries)
  return _internal_entries(index);
}
inline ::TST::TableDataList_ListEntry* TableDataListSegment::_internal_add_entries() {
  return entries_.Add();
}
inline ::TST::TableDataList_ListEntry* TableDataListSegment::add_entries() {
  // @@protoc_insertion_point(field_add:TST.TableDataListSegment.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableDataList_ListEntry >&
TableDataListSegment::entries() const {
  // @@protoc_insertion_point(field_list:TST.TableDataListSegment.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TableRBTree_Node

// required uint32 key = 1;
inline bool TableRBTree_Node::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableRBTree_Node::has_key() const {
  return _internal_has_key();
}
inline void TableRBTree_Node::clear_key() {
  key_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableRBTree_Node::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableRBTree_Node::key() const {
  // @@protoc_insertion_point(field_get:TST.TableRBTree.Node.key)
  return _internal_key();
}
inline void TableRBTree_Node::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  key_ = value;
}
inline void TableRBTree_Node::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:TST.TableRBTree.Node.key)
}

// required uint32 value = 2;
inline bool TableRBTree_Node::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableRBTree_Node::has_value() const {
  return _internal_has_value();
}
inline void TableRBTree_Node::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableRBTree_Node::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableRBTree_Node::value() const {
  // @@protoc_insertion_point(field_get:TST.TableRBTree.Node.value)
  return _internal_value();
}
inline void TableRBTree_Node::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void TableRBTree_Node::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TST.TableRBTree.Node.value)
}

// -------------------------------------------------------------------

// TableRBTree

// repeated .TST.TableRBTree.Node nodes = 1;
inline int TableRBTree::_internal_nodes_size() const {
  return nodes_.size();
}
inline int TableRBTree::nodes_size() const {
  return _internal_nodes_size();
}
inline void TableRBTree::clear_nodes() {
  nodes_.Clear();
}
inline ::TST::TableRBTree_Node* TableRBTree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TableRBTree.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableRBTree_Node >*
TableRBTree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:TST.TableRBTree.nodes)
  return &nodes_;
}
inline const ::TST::TableRBTree_Node& TableRBTree::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::TST::TableRBTree_Node& TableRBTree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:TST.TableRBTree.nodes)
  return _internal_nodes(index);
}
inline ::TST::TableRBTree_Node* TableRBTree::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::TST::TableRBTree_Node* TableRBTree::add_nodes() {
  // @@protoc_insertion_point(field_add:TST.TableRBTree.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableRBTree_Node >&
TableRBTree::nodes() const {
  // @@protoc_insertion_point(field_list:TST.TableRBTree.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// HeaderStorageBucket_Header

// required uint32 index = 1;
inline bool HeaderStorageBucket_Header::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeaderStorageBucket_Header::has_index() const {
  return _internal_has_index();
}
inline void HeaderStorageBucket_Header::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket_Header::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket_Header::index() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.Header.index)
  return _internal_index();
}
inline void HeaderStorageBucket_Header::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void HeaderStorageBucket_Header::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TST.HeaderStorageBucket.Header.index)
}

// required float size = 2;
inline bool HeaderStorageBucket_Header::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HeaderStorageBucket_Header::has_size() const {
  return _internal_has_size();
}
inline void HeaderStorageBucket_Header::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float HeaderStorageBucket_Header::_internal_size() const {
  return size_;
}
inline float HeaderStorageBucket_Header::size() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.Header.size)
  return _internal_size();
}
inline void HeaderStorageBucket_Header::_internal_set_size(float value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void HeaderStorageBucket_Header::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:TST.HeaderStorageBucket.Header.size)
}

// required uint32 hidingState = 3;
inline bool HeaderStorageBucket_Header::_internal_has_hidingstate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HeaderStorageBucket_Header::has_hidingstate() const {
  return _internal_has_hidingstate();
}
inline void HeaderStorageBucket_Header::clear_hidingstate() {
  hidingstate_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket_Header::_internal_hidingstate() const {
  return hidingstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket_Header::hidingstate() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.Header.hidingState)
  return _internal_hidingstate();
}
inline void HeaderStorageBucket_Header::_internal_set_hidingstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hidingstate_ = value;
}
inline void HeaderStorageBucket_Header::set_hidingstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hidingstate(value);
  // @@protoc_insertion_point(field_set:TST.HeaderStorageBucket.Header.hidingState)
}

// required uint32 numberOfCells = 4;
inline bool HeaderStorageBucket_Header::_internal_has_numberofcells() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HeaderStorageBucket_Header::has_numberofcells() const {
  return _internal_has_numberofcells();
}
inline void HeaderStorageBucket_Header::clear_numberofcells() {
  numberofcells_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket_Header::_internal_numberofcells() const {
  return numberofcells_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket_Header::numberofcells() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.Header.numberOfCells)
  return _internal_numberofcells();
}
inline void HeaderStorageBucket_Header::_internal_set_numberofcells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  numberofcells_ = value;
}
inline void HeaderStorageBucket_Header::set_numberofcells(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numberofcells(value);
  // @@protoc_insertion_point(field_set:TST.HeaderStorageBucket.Header.numberOfCells)
}

// optional .TSP.Reference cell_style = 5;
inline bool HeaderStorageBucket_Header::_internal_has_cell_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_style_ != nullptr);
  return value;
}
inline bool HeaderStorageBucket_Header::has_cell_style() const {
  return _internal_has_cell_style();
}
inline const ::TSP::Reference& HeaderStorageBucket_Header::_internal_cell_style() const {
  const ::TSP::Reference* p = cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& HeaderStorageBucket_Header::cell_style() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.Header.cell_style)
  return _internal_cell_style();
}
inline void HeaderStorageBucket_Header::unsafe_arena_set_allocated_cell_style(
    ::TSP::Reference* cell_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_);
  }
  cell_style_ = cell_style;
  if (cell_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderStorageBucket.Header.cell_style)
}
inline ::TSP::Reference* HeaderStorageBucket_Header::release_cell_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = cell_style_;
  cell_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* HeaderStorageBucket_Header::unsafe_arena_release_cell_style() {
  // @@protoc_insertion_point(field_release:TST.HeaderStorageBucket.Header.cell_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = cell_style_;
  cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* HeaderStorageBucket_Header::_internal_mutable_cell_style() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    cell_style_ = p;
  }
  return cell_style_;
}
inline ::TSP::Reference* HeaderStorageBucket_Header::mutable_cell_style() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderStorageBucket.Header.cell_style)
  return _internal_mutable_cell_style();
}
inline void HeaderStorageBucket_Header::set_allocated_cell_style(::TSP::Reference* cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_);
  }
  if (cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style)->GetArena();
    if (message_arena != submessage_arena) {
      cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_style_ = cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderStorageBucket.Header.cell_style)
}

// optional .TSP.Reference text_style = 6;
inline bool HeaderStorageBucket_Header::_internal_has_text_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || text_style_ != nullptr);
  return value;
}
inline bool HeaderStorageBucket_Header::has_text_style() const {
  return _internal_has_text_style();
}
inline const ::TSP::Reference& HeaderStorageBucket_Header::_internal_text_style() const {
  const ::TSP::Reference* p = text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& HeaderStorageBucket_Header::text_style() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.Header.text_style)
  return _internal_text_style();
}
inline void HeaderStorageBucket_Header::unsafe_arena_set_allocated_text_style(
    ::TSP::Reference* text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style_);
  }
  text_style_ = text_style;
  if (text_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderStorageBucket.Header.text_style)
}
inline ::TSP::Reference* HeaderStorageBucket_Header::release_text_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = text_style_;
  text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* HeaderStorageBucket_Header::unsafe_arena_release_text_style() {
  // @@protoc_insertion_point(field_release:TST.HeaderStorageBucket.Header.text_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = text_style_;
  text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* HeaderStorageBucket_Header::_internal_mutable_text_style() {
  _has_bits_[0] |= 0x00000002u;
  if (text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    text_style_ = p;
  }
  return text_style_;
}
inline ::TSP::Reference* HeaderStorageBucket_Header::mutable_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderStorageBucket.Header.text_style)
  return _internal_mutable_text_style();
}
inline void HeaderStorageBucket_Header::set_allocated_text_style(::TSP::Reference* text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style_);
  }
  if (text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style)->GetArena();
    if (message_arena != submessage_arena) {
      text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_style_ = text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderStorageBucket.Header.text_style)
}

// -------------------------------------------------------------------

// HeaderStorageBucket

// required uint32 bucketHashFunction = 1;
inline bool HeaderStorageBucket::_internal_has_buckethashfunction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeaderStorageBucket::has_buckethashfunction() const {
  return _internal_has_buckethashfunction();
}
inline void HeaderStorageBucket::clear_buckethashfunction() {
  buckethashfunction_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket::_internal_buckethashfunction() const {
  return buckethashfunction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorageBucket::buckethashfunction() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.bucketHashFunction)
  return _internal_buckethashfunction();
}
inline void HeaderStorageBucket::_internal_set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  buckethashfunction_ = value;
}
inline void HeaderStorageBucket::set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buckethashfunction(value);
  // @@protoc_insertion_point(field_set:TST.HeaderStorageBucket.bucketHashFunction)
}

// repeated .TST.HeaderStorageBucket.Header headers = 2;
inline int HeaderStorageBucket::_internal_headers_size() const {
  return headers_.size();
}
inline int HeaderStorageBucket::headers_size() const {
  return _internal_headers_size();
}
inline void HeaderStorageBucket::clear_headers() {
  headers_.Clear();
}
inline ::TST::HeaderStorageBucket_Header* HeaderStorageBucket::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderStorageBucket.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderStorageBucket_Header >*
HeaderStorageBucket::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderStorageBucket.headers)
  return &headers_;
}
inline const ::TST::HeaderStorageBucket_Header& HeaderStorageBucket::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::TST::HeaderStorageBucket_Header& HeaderStorageBucket::headers(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorageBucket.headers)
  return _internal_headers(index);
}
inline ::TST::HeaderStorageBucket_Header* HeaderStorageBucket::_internal_add_headers() {
  return headers_.Add();
}
inline ::TST::HeaderStorageBucket_Header* HeaderStorageBucket::add_headers() {
  // @@protoc_insertion_point(field_add:TST.HeaderStorageBucket.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderStorageBucket_Header >&
HeaderStorageBucket::headers() const {
  // @@protoc_insertion_point(field_list:TST.HeaderStorageBucket.headers)
  return headers_;
}

// -------------------------------------------------------------------

// HeaderStorage

// required uint32 bucketHashFunction = 1;
inline bool HeaderStorage::_internal_has_buckethashfunction() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeaderStorage::has_buckethashfunction() const {
  return _internal_has_buckethashfunction();
}
inline void HeaderStorage::clear_buckethashfunction() {
  buckethashfunction_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorage::_internal_buckethashfunction() const {
  return buckethashfunction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderStorage::buckethashfunction() const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorage.bucketHashFunction)
  return _internal_buckethashfunction();
}
inline void HeaderStorage::_internal_set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  buckethashfunction_ = value;
}
inline void HeaderStorage::set_buckethashfunction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buckethashfunction(value);
  // @@protoc_insertion_point(field_set:TST.HeaderStorage.bucketHashFunction)
}

// repeated .TSP.Reference buckets = 2;
inline int HeaderStorage::_internal_buckets_size() const {
  return buckets_.size();
}
inline int HeaderStorage::buckets_size() const {
  return _internal_buckets_size();
}
inline ::TSP::Reference* HeaderStorage::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderStorage.buckets)
  return buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
HeaderStorage::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderStorage.buckets)
  return &buckets_;
}
inline const ::TSP::Reference& HeaderStorage::_internal_buckets(int index) const {
  return buckets_.Get(index);
}
inline const ::TSP::Reference& HeaderStorage::buckets(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderStorage.buckets)
  return _internal_buckets(index);
}
inline ::TSP::Reference* HeaderStorage::_internal_add_buckets() {
  return buckets_.Add();
}
inline ::TSP::Reference* HeaderStorage::add_buckets() {
  // @@protoc_insertion_point(field_add:TST.HeaderStorage.buckets)
  return _internal_add_buckets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
HeaderStorage::buckets() const {
  // @@protoc_insertion_point(field_list:TST.HeaderStorage.buckets)
  return buckets_;
}

// -------------------------------------------------------------------

// DataStore

// required .TST.HeaderStorage rowHeaders = 1;
inline bool DataStore::_internal_has_rowheaders() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rowheaders_ != nullptr);
  return value;
}
inline bool DataStore::has_rowheaders() const {
  return _internal_has_rowheaders();
}
inline void DataStore::clear_rowheaders() {
  if (rowheaders_ != nullptr) rowheaders_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::HeaderStorage& DataStore::_internal_rowheaders() const {
  const ::TST::HeaderStorage* p = rowheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::HeaderStorage&>(
      ::TST::_HeaderStorage_default_instance_);
}
inline const ::TST::HeaderStorage& DataStore::rowheaders() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.rowHeaders)
  return _internal_rowheaders();
}
inline void DataStore::unsafe_arena_set_allocated_rowheaders(
    ::TST::HeaderStorage* rowheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rowheaders_);
  }
  rowheaders_ = rowheaders;
  if (rowheaders) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.rowHeaders)
}
inline ::TST::HeaderStorage* DataStore::release_rowheaders() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::HeaderStorage* temp = rowheaders_;
  rowheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::HeaderStorage* DataStore::unsafe_arena_release_rowheaders() {
  // @@protoc_insertion_point(field_release:TST.DataStore.rowHeaders)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::HeaderStorage* temp = rowheaders_;
  rowheaders_ = nullptr;
  return temp;
}
inline ::TST::HeaderStorage* DataStore::_internal_mutable_rowheaders() {
  _has_bits_[0] |= 0x00000001u;
  if (rowheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::HeaderStorage>(GetArena());
    rowheaders_ = p;
  }
  return rowheaders_;
}
inline ::TST::HeaderStorage* DataStore::mutable_rowheaders() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.rowHeaders)
  return _internal_mutable_rowheaders();
}
inline void DataStore::set_allocated_rowheaders(::TST::HeaderStorage* rowheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rowheaders_;
  }
  if (rowheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rowheaders);
    if (message_arena != submessage_arena) {
      rowheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rowheaders, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rowheaders_ = rowheaders;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.rowHeaders)
}

// required .TSP.Reference columnHeaders = 2;
inline bool DataStore::_internal_has_columnheaders() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || columnheaders_ != nullptr);
  return value;
}
inline bool DataStore::has_columnheaders() const {
  return _internal_has_columnheaders();
}
inline const ::TSP::Reference& DataStore::_internal_columnheaders() const {
  const ::TSP::Reference* p = columnheaders_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::columnheaders() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.columnHeaders)
  return _internal_columnheaders();
}
inline void DataStore::unsafe_arena_set_allocated_columnheaders(
    ::TSP::Reference* columnheaders) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnheaders_);
  }
  columnheaders_ = columnheaders;
  if (columnheaders) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.columnHeaders)
}
inline ::TSP::Reference* DataStore::release_columnheaders() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = columnheaders_;
  columnheaders_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_columnheaders() {
  // @@protoc_insertion_point(field_release:TST.DataStore.columnHeaders)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = columnheaders_;
  columnheaders_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_columnheaders() {
  _has_bits_[0] |= 0x00000002u;
  if (columnheaders_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    columnheaders_ = p;
  }
  return columnheaders_;
}
inline ::TSP::Reference* DataStore::mutable_columnheaders() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.columnHeaders)
  return _internal_mutable_columnheaders();
}
inline void DataStore::set_allocated_columnheaders(::TSP::Reference* columnheaders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnheaders_);
  }
  if (columnheaders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnheaders)->GetArena();
    if (message_arena != submessage_arena) {
      columnheaders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columnheaders, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  columnheaders_ = columnheaders;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.columnHeaders)
}

// required .TST.TileStorage tiles = 3;
inline bool DataStore::_internal_has_tiles() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tiles_ != nullptr);
  return value;
}
inline bool DataStore::has_tiles() const {
  return _internal_has_tiles();
}
inline void DataStore::clear_tiles() {
  if (tiles_ != nullptr) tiles_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::TileStorage& DataStore::_internal_tiles() const {
  const ::TST::TileStorage* p = tiles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TileStorage&>(
      ::TST::_TileStorage_default_instance_);
}
inline const ::TST::TileStorage& DataStore::tiles() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.tiles)
  return _internal_tiles();
}
inline void DataStore::unsafe_arena_set_allocated_tiles(
    ::TST::TileStorage* tiles) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiles_);
  }
  tiles_ = tiles;
  if (tiles) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.tiles)
}
inline ::TST::TileStorage* DataStore::release_tiles() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::TileStorage* temp = tiles_;
  tiles_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TileStorage* DataStore::unsafe_arena_release_tiles() {
  // @@protoc_insertion_point(field_release:TST.DataStore.tiles)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::TileStorage* temp = tiles_;
  tiles_ = nullptr;
  return temp;
}
inline ::TST::TileStorage* DataStore::_internal_mutable_tiles() {
  _has_bits_[0] |= 0x00000004u;
  if (tiles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TileStorage>(GetArena());
    tiles_ = p;
  }
  return tiles_;
}
inline ::TST::TileStorage* DataStore::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.tiles)
  return _internal_mutable_tiles();
}
inline void DataStore::set_allocated_tiles(::TST::TileStorage* tiles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tiles_;
  }
  if (tiles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tiles);
    if (message_arena != submessage_arena) {
      tiles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tiles_ = tiles;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.tiles)
}

// required .TSP.Reference stringTable = 4;
inline bool DataStore::_internal_has_stringtable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || stringtable_ != nullptr);
  return value;
}
inline bool DataStore::has_stringtable() const {
  return _internal_has_stringtable();
}
inline const ::TSP::Reference& DataStore::_internal_stringtable() const {
  const ::TSP::Reference* p = stringtable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::stringtable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.stringTable)
  return _internal_stringtable();
}
inline void DataStore::unsafe_arena_set_allocated_stringtable(
    ::TSP::Reference* stringtable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringtable_);
  }
  stringtable_ = stringtable;
  if (stringtable) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.stringTable)
}
inline ::TSP::Reference* DataStore::release_stringtable() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = stringtable_;
  stringtable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_stringtable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.stringTable)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = stringtable_;
  stringtable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_stringtable() {
  _has_bits_[0] |= 0x00000008u;
  if (stringtable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stringtable_ = p;
  }
  return stringtable_;
}
inline ::TSP::Reference* DataStore::mutable_stringtable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.stringTable)
  return _internal_mutable_stringtable();
}
inline void DataStore::set_allocated_stringtable(::TSP::Reference* stringtable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringtable_);
  }
  if (stringtable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stringtable)->GetArena();
    if (message_arena != submessage_arena) {
      stringtable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringtable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stringtable_ = stringtable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.stringTable)
}

// required .TSP.Reference styleTable = 5;
inline bool DataStore::_internal_has_styletable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || styletable_ != nullptr);
  return value;
}
inline bool DataStore::has_styletable() const {
  return _internal_has_styletable();
}
inline const ::TSP::Reference& DataStore::_internal_styletable() const {
  const ::TSP::Reference* p = styletable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::styletable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.styleTable)
  return _internal_styletable();
}
inline void DataStore::unsafe_arena_set_allocated_styletable(
    ::TSP::Reference* styletable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styletable_);
  }
  styletable_ = styletable;
  if (styletable) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.styleTable)
}
inline ::TSP::Reference* DataStore::release_styletable() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = styletable_;
  styletable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_styletable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.styleTable)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = styletable_;
  styletable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_styletable() {
  _has_bits_[0] |= 0x00000010u;
  if (styletable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    styletable_ = p;
  }
  return styletable_;
}
inline ::TSP::Reference* DataStore::mutable_styletable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.styleTable)
  return _internal_mutable_styletable();
}
inline void DataStore::set_allocated_styletable(::TSP::Reference* styletable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(styletable_);
  }
  if (styletable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(styletable)->GetArena();
    if (message_arena != submessage_arena) {
      styletable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styletable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  styletable_ = styletable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.styleTable)
}

// required .TSP.Reference formula_table = 6;
inline bool DataStore::_internal_has_formula_table() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || formula_table_ != nullptr);
  return value;
}
inline bool DataStore::has_formula_table() const {
  return _internal_has_formula_table();
}
inline const ::TSP::Reference& DataStore::_internal_formula_table() const {
  const ::TSP::Reference* p = formula_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::formula_table() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.formula_table)
  return _internal_formula_table();
}
inline void DataStore::unsafe_arena_set_allocated_formula_table(
    ::TSP::Reference* formula_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_table_);
  }
  formula_table_ = formula_table;
  if (formula_table) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.formula_table)
}
inline ::TSP::Reference* DataStore::release_formula_table() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = formula_table_;
  formula_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_formula_table() {
  // @@protoc_insertion_point(field_release:TST.DataStore.formula_table)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = formula_table_;
  formula_table_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_formula_table() {
  _has_bits_[0] |= 0x00000020u;
  if (formula_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formula_table_ = p;
  }
  return formula_table_;
}
inline ::TSP::Reference* DataStore::mutable_formula_table() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.formula_table)
  return _internal_mutable_formula_table();
}
inline void DataStore::set_allocated_formula_table(::TSP::Reference* formula_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_table_);
  }
  if (formula_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_table)->GetArena();
    if (message_arena != submessage_arena) {
      formula_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  formula_table_ = formula_table;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.formula_table)
}

// optional .TSP.Reference formulaErrorTable = 12;
inline bool DataStore::_internal_has_formulaerrortable() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || formulaerrortable_ != nullptr);
  return value;
}
inline bool DataStore::has_formulaerrortable() const {
  return _internal_has_formulaerrortable();
}
inline const ::TSP::Reference& DataStore::_internal_formulaerrortable() const {
  const ::TSP::Reference* p = formulaerrortable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::formulaerrortable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.formulaErrorTable)
  return _internal_formulaerrortable();
}
inline void DataStore::unsafe_arena_set_allocated_formulaerrortable(
    ::TSP::Reference* formulaerrortable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulaerrortable_);
  }
  formulaerrortable_ = formulaerrortable;
  if (formulaerrortable) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.formulaErrorTable)
}
inline ::TSP::Reference* DataStore::release_formulaerrortable() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = formulaerrortable_;
  formulaerrortable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_formulaerrortable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.formulaErrorTable)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = formulaerrortable_;
  formulaerrortable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_formulaerrortable() {
  _has_bits_[0] |= 0x00000200u;
  if (formulaerrortable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formulaerrortable_ = p;
  }
  return formulaerrortable_;
}
inline ::TSP::Reference* DataStore::mutable_formulaerrortable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.formulaErrorTable)
  return _internal_mutable_formulaerrortable();
}
inline void DataStore::set_allocated_formulaerrortable(::TSP::Reference* formulaerrortable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulaerrortable_);
  }
  if (formulaerrortable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulaerrortable)->GetArena();
    if (message_arena != submessage_arena) {
      formulaerrortable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulaerrortable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  formulaerrortable_ = formulaerrortable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.formulaErrorTable)
}

// required .TSP.Reference format_table_pre_bnc = 11;
inline bool DataStore::_internal_has_format_table_pre_bnc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || format_table_pre_bnc_ != nullptr);
  return value;
}
inline bool DataStore::has_format_table_pre_bnc() const {
  return _internal_has_format_table_pre_bnc();
}
inline const ::TSP::Reference& DataStore::_internal_format_table_pre_bnc() const {
  const ::TSP::Reference* p = format_table_pre_bnc_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::format_table_pre_bnc() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.format_table_pre_bnc)
  return _internal_format_table_pre_bnc();
}
inline void DataStore::unsafe_arena_set_allocated_format_table_pre_bnc(
    ::TSP::Reference* format_table_pre_bnc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_table_pre_bnc_);
  }
  format_table_pre_bnc_ = format_table_pre_bnc;
  if (format_table_pre_bnc) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.format_table_pre_bnc)
}
inline ::TSP::Reference* DataStore::release_format_table_pre_bnc() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = format_table_pre_bnc_;
  format_table_pre_bnc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_format_table_pre_bnc() {
  // @@protoc_insertion_point(field_release:TST.DataStore.format_table_pre_bnc)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = format_table_pre_bnc_;
  format_table_pre_bnc_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_format_table_pre_bnc() {
  _has_bits_[0] |= 0x00000100u;
  if (format_table_pre_bnc_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    format_table_pre_bnc_ = p;
  }
  return format_table_pre_bnc_;
}
inline ::TSP::Reference* DataStore::mutable_format_table_pre_bnc() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.format_table_pre_bnc)
  return _internal_mutable_format_table_pre_bnc();
}
inline void DataStore::set_allocated_format_table_pre_bnc(::TSP::Reference* format_table_pre_bnc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_table_pre_bnc_);
  }
  if (format_table_pre_bnc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_table_pre_bnc)->GetArena();
    if (message_arena != submessage_arena) {
      format_table_pre_bnc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_table_pre_bnc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  format_table_pre_bnc_ = format_table_pre_bnc;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.format_table_pre_bnc)
}

// optional .TSP.Reference multipleChoiceListFormatTable = 16;
inline bool DataStore::_internal_has_multiplechoicelistformattable() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || multiplechoicelistformattable_ != nullptr);
  return value;
}
inline bool DataStore::has_multiplechoicelistformattable() const {
  return _internal_has_multiplechoicelistformattable();
}
inline const ::TSP::Reference& DataStore::_internal_multiplechoicelistformattable() const {
  const ::TSP::Reference* p = multiplechoicelistformattable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::multiplechoicelistformattable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.multipleChoiceListFormatTable)
  return _internal_multiplechoicelistformattable();
}
inline void DataStore::unsafe_arena_set_allocated_multiplechoicelistformattable(
    ::TSP::Reference* multiplechoicelistformattable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplechoicelistformattable_);
  }
  multiplechoicelistformattable_ = multiplechoicelistformattable;
  if (multiplechoicelistformattable) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.multipleChoiceListFormatTable)
}
inline ::TSP::Reference* DataStore::release_multiplechoicelistformattable() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = multiplechoicelistformattable_;
  multiplechoicelistformattable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_multiplechoicelistformattable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.multipleChoiceListFormatTable)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = multiplechoicelistformattable_;
  multiplechoicelistformattable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_multiplechoicelistformattable() {
  _has_bits_[0] |= 0x00001000u;
  if (multiplechoicelistformattable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    multiplechoicelistformattable_ = p;
  }
  return multiplechoicelistformattable_;
}
inline ::TSP::Reference* DataStore::mutable_multiplechoicelistformattable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.multipleChoiceListFormatTable)
  return _internal_mutable_multiplechoicelistformattable();
}
inline void DataStore::set_allocated_multiplechoicelistformattable(::TSP::Reference* multiplechoicelistformattable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplechoicelistformattable_);
  }
  if (multiplechoicelistformattable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplechoicelistformattable)->GetArena();
    if (message_arena != submessage_arena) {
      multiplechoicelistformattable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplechoicelistformattable, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  multiplechoicelistformattable_ = multiplechoicelistformattable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.multipleChoiceListFormatTable)
}

// optional .TSP.Reference merge_region_map = 13;
inline bool DataStore::_internal_has_merge_region_map() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || merge_region_map_ != nullptr);
  return value;
}
inline bool DataStore::has_merge_region_map() const {
  return _internal_has_merge_region_map();
}
inline const ::TSP::Reference& DataStore::_internal_merge_region_map() const {
  const ::TSP::Reference* p = merge_region_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::merge_region_map() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.merge_region_map)
  return _internal_merge_region_map();
}
inline void DataStore::unsafe_arena_set_allocated_merge_region_map(
    ::TSP::Reference* merge_region_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_region_map_);
  }
  merge_region_map_ = merge_region_map;
  if (merge_region_map) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.merge_region_map)
}
inline ::TSP::Reference* DataStore::release_merge_region_map() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = merge_region_map_;
  merge_region_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_merge_region_map() {
  // @@protoc_insertion_point(field_release:TST.DataStore.merge_region_map)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = merge_region_map_;
  merge_region_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_merge_region_map() {
  _has_bits_[0] |= 0x00000400u;
  if (merge_region_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    merge_region_map_ = p;
  }
  return merge_region_map_;
}
inline ::TSP::Reference* DataStore::mutable_merge_region_map() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.merge_region_map)
  return _internal_mutable_merge_region_map();
}
inline void DataStore::set_allocated_merge_region_map(::TSP::Reference* merge_region_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_region_map_);
  }
  if (merge_region_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_region_map)->GetArena();
    if (message_arena != submessage_arena) {
      merge_region_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_region_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  merge_region_map_ = merge_region_map;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.merge_region_map)
}

// optional .TSP.Reference customFormatTable = 15;
inline bool DataStore::_internal_has_customformattable() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || customformattable_ != nullptr);
  return value;
}
inline bool DataStore::has_customformattable() const {
  return _internal_has_customformattable();
}
inline const ::TSP::Reference& DataStore::_internal_customformattable() const {
  const ::TSP::Reference* p = customformattable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::customformattable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.customFormatTable)
  return _internal_customformattable();
}
inline void DataStore::unsafe_arena_set_allocated_customformattable(
    ::TSP::Reference* customformattable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customformattable_);
  }
  customformattable_ = customformattable;
  if (customformattable) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.customFormatTable)
}
inline ::TSP::Reference* DataStore::release_customformattable() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = customformattable_;
  customformattable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_customformattable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.customFormatTable)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = customformattable_;
  customformattable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_customformattable() {
  _has_bits_[0] |= 0x00000800u;
  if (customformattable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    customformattable_ = p;
  }
  return customformattable_;
}
inline ::TSP::Reference* DataStore::mutable_customformattable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.customFormatTable)
  return _internal_mutable_customformattable();
}
inline void DataStore::set_allocated_customformattable(::TSP::Reference* customformattable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customformattable_);
  }
  if (customformattable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customformattable)->GetArena();
    if (message_arena != submessage_arena) {
      customformattable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customformattable, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  customformattable_ = customformattable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.customFormatTable)
}

// required uint32 nextRowStripID = 7;
inline bool DataStore::_internal_has_nextrowstripid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DataStore::has_nextrowstripid() const {
  return _internal_has_nextrowstripid();
}
inline void DataStore::clear_nextrowstripid() {
  nextrowstripid_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataStore::_internal_nextrowstripid() const {
  return nextrowstripid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataStore::nextrowstripid() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.nextRowStripID)
  return _internal_nextrowstripid();
}
inline void DataStore::_internal_set_nextrowstripid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  nextrowstripid_ = value;
}
inline void DataStore::set_nextrowstripid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nextrowstripid(value);
  // @@protoc_insertion_point(field_set:TST.DataStore.nextRowStripID)
}

// required uint32 nextColumnStripID = 8;
inline bool DataStore::_internal_has_nextcolumnstripid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DataStore::has_nextcolumnstripid() const {
  return _internal_has_nextcolumnstripid();
}
inline void DataStore::clear_nextcolumnstripid() {
  nextcolumnstripid_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataStore::_internal_nextcolumnstripid() const {
  return nextcolumnstripid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataStore::nextcolumnstripid() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.nextColumnStripID)
  return _internal_nextcolumnstripid();
}
inline void DataStore::_internal_set_nextcolumnstripid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  nextcolumnstripid_ = value;
}
inline void DataStore::set_nextcolumnstripid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nextcolumnstripid(value);
  // @@protoc_insertion_point(field_set:TST.DataStore.nextColumnStripID)
}

// required .TST.TableRBTree rowTileTree = 9;
inline bool DataStore::_internal_has_rowtiletree() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || rowtiletree_ != nullptr);
  return value;
}
inline bool DataStore::has_rowtiletree() const {
  return _internal_has_rowtiletree();
}
inline void DataStore::clear_rowtiletree() {
  if (rowtiletree_ != nullptr) rowtiletree_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TST::TableRBTree& DataStore::_internal_rowtiletree() const {
  const ::TST::TableRBTree* p = rowtiletree_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableRBTree&>(
      ::TST::_TableRBTree_default_instance_);
}
inline const ::TST::TableRBTree& DataStore::rowtiletree() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.rowTileTree)
  return _internal_rowtiletree();
}
inline void DataStore::unsafe_arena_set_allocated_rowtiletree(
    ::TST::TableRBTree* rowtiletree) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rowtiletree_);
  }
  rowtiletree_ = rowtiletree;
  if (rowtiletree) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.rowTileTree)
}
inline ::TST::TableRBTree* DataStore::release_rowtiletree() {
  _has_bits_[0] &= ~0x00000040u;
  ::TST::TableRBTree* temp = rowtiletree_;
  rowtiletree_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TableRBTree* DataStore::unsafe_arena_release_rowtiletree() {
  // @@protoc_insertion_point(field_release:TST.DataStore.rowTileTree)
  _has_bits_[0] &= ~0x00000040u;
  ::TST::TableRBTree* temp = rowtiletree_;
  rowtiletree_ = nullptr;
  return temp;
}
inline ::TST::TableRBTree* DataStore::_internal_mutable_rowtiletree() {
  _has_bits_[0] |= 0x00000040u;
  if (rowtiletree_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableRBTree>(GetArena());
    rowtiletree_ = p;
  }
  return rowtiletree_;
}
inline ::TST::TableRBTree* DataStore::mutable_rowtiletree() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.rowTileTree)
  return _internal_mutable_rowtiletree();
}
inline void DataStore::set_allocated_rowtiletree(::TST::TableRBTree* rowtiletree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rowtiletree_;
  }
  if (rowtiletree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rowtiletree);
    if (message_arena != submessage_arena) {
      rowtiletree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rowtiletree, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  rowtiletree_ = rowtiletree;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.rowTileTree)
}

// required .TST.TableRBTree columnTileTree = 10;
inline bool DataStore::_internal_has_columntiletree() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || columntiletree_ != nullptr);
  return value;
}
inline bool DataStore::has_columntiletree() const {
  return _internal_has_columntiletree();
}
inline void DataStore::clear_columntiletree() {
  if (columntiletree_ != nullptr) columntiletree_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TST::TableRBTree& DataStore::_internal_columntiletree() const {
  const ::TST::TableRBTree* p = columntiletree_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableRBTree&>(
      ::TST::_TableRBTree_default_instance_);
}
inline const ::TST::TableRBTree& DataStore::columntiletree() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.columnTileTree)
  return _internal_columntiletree();
}
inline void DataStore::unsafe_arena_set_allocated_columntiletree(
    ::TST::TableRBTree* columntiletree) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columntiletree_);
  }
  columntiletree_ = columntiletree;
  if (columntiletree) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.columnTileTree)
}
inline ::TST::TableRBTree* DataStore::release_columntiletree() {
  _has_bits_[0] &= ~0x00000080u;
  ::TST::TableRBTree* temp = columntiletree_;
  columntiletree_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TableRBTree* DataStore::unsafe_arena_release_columntiletree() {
  // @@protoc_insertion_point(field_release:TST.DataStore.columnTileTree)
  _has_bits_[0] &= ~0x00000080u;
  ::TST::TableRBTree* temp = columntiletree_;
  columntiletree_ = nullptr;
  return temp;
}
inline ::TST::TableRBTree* DataStore::_internal_mutable_columntiletree() {
  _has_bits_[0] |= 0x00000080u;
  if (columntiletree_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableRBTree>(GetArena());
    columntiletree_ = p;
  }
  return columntiletree_;
}
inline ::TST::TableRBTree* DataStore::mutable_columntiletree() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.columnTileTree)
  return _internal_mutable_columntiletree();
}
inline void DataStore::set_allocated_columntiletree(::TST::TableRBTree* columntiletree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete columntiletree_;
  }
  if (columntiletree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(columntiletree);
    if (message_arena != submessage_arena) {
      columntiletree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columntiletree, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  columntiletree_ = columntiletree;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.columnTileTree)
}

// optional uint32 storage_version_pre_bnc = 14;
inline bool DataStore::_internal_has_storage_version_pre_bnc() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DataStore::has_storage_version_pre_bnc() const {
  return _internal_has_storage_version_pre_bnc();
}
inline void DataStore::clear_storage_version_pre_bnc() {
  storage_version_pre_bnc_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataStore::_internal_storage_version_pre_bnc() const {
  return storage_version_pre_bnc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataStore::storage_version_pre_bnc() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.storage_version_pre_bnc)
  return _internal_storage_version_pre_bnc();
}
inline void DataStore::_internal_set_storage_version_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  storage_version_pre_bnc_ = value;
}
inline void DataStore::set_storage_version_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_version_pre_bnc(value);
  // @@protoc_insertion_point(field_set:TST.DataStore.storage_version_pre_bnc)
}

// optional .TSP.Reference rich_text_table = 17;
inline bool DataStore::_internal_has_rich_text_table() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || rich_text_table_ != nullptr);
  return value;
}
inline bool DataStore::has_rich_text_table() const {
  return _internal_has_rich_text_table();
}
inline const ::TSP::Reference& DataStore::_internal_rich_text_table() const {
  const ::TSP::Reference* p = rich_text_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::rich_text_table() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.rich_text_table)
  return _internal_rich_text_table();
}
inline void DataStore::unsafe_arena_set_allocated_rich_text_table(
    ::TSP::Reference* rich_text_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_table_);
  }
  rich_text_table_ = rich_text_table;
  if (rich_text_table) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.rich_text_table)
}
inline ::TSP::Reference* DataStore::release_rich_text_table() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = rich_text_table_;
  rich_text_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_rich_text_table() {
  // @@protoc_insertion_point(field_release:TST.DataStore.rich_text_table)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = rich_text_table_;
  rich_text_table_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_rich_text_table() {
  _has_bits_[0] |= 0x00002000u;
  if (rich_text_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    rich_text_table_ = p;
  }
  return rich_text_table_;
}
inline ::TSP::Reference* DataStore::mutable_rich_text_table() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.rich_text_table)
  return _internal_mutable_rich_text_table();
}
inline void DataStore::set_allocated_rich_text_table(::TSP::Reference* rich_text_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_table_);
  }
  if (rich_text_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rich_text_table)->GetArena();
    if (message_arena != submessage_arena) {
      rich_text_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rich_text_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  rich_text_table_ = rich_text_table;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.rich_text_table)
}

// optional .TSP.Reference conditionalstyletable = 18;
inline bool DataStore::_internal_has_conditionalstyletable() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || conditionalstyletable_ != nullptr);
  return value;
}
inline bool DataStore::has_conditionalstyletable() const {
  return _internal_has_conditionalstyletable();
}
inline const ::TSP::Reference& DataStore::_internal_conditionalstyletable() const {
  const ::TSP::Reference* p = conditionalstyletable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::conditionalstyletable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.conditionalstyletable)
  return _internal_conditionalstyletable();
}
inline void DataStore::unsafe_arena_set_allocated_conditionalstyletable(
    ::TSP::Reference* conditionalstyletable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditionalstyletable_);
  }
  conditionalstyletable_ = conditionalstyletable;
  if (conditionalstyletable) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.conditionalstyletable)
}
inline ::TSP::Reference* DataStore::release_conditionalstyletable() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::Reference* temp = conditionalstyletable_;
  conditionalstyletable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_conditionalstyletable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.conditionalstyletable)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::Reference* temp = conditionalstyletable_;
  conditionalstyletable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_conditionalstyletable() {
  _has_bits_[0] |= 0x00004000u;
  if (conditionalstyletable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    conditionalstyletable_ = p;
  }
  return conditionalstyletable_;
}
inline ::TSP::Reference* DataStore::mutable_conditionalstyletable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.conditionalstyletable)
  return _internal_mutable_conditionalstyletable();
}
inline void DataStore::set_allocated_conditionalstyletable(::TSP::Reference* conditionalstyletable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditionalstyletable_);
  }
  if (conditionalstyletable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditionalstyletable)->GetArena();
    if (message_arena != submessage_arena) {
      conditionalstyletable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditionalstyletable, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  conditionalstyletable_ = conditionalstyletable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.conditionalstyletable)
}

// optional .TSP.Reference commentStorageTable = 19;
inline bool DataStore::_internal_has_commentstoragetable() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || commentstoragetable_ != nullptr);
  return value;
}
inline bool DataStore::has_commentstoragetable() const {
  return _internal_has_commentstoragetable();
}
inline const ::TSP::Reference& DataStore::_internal_commentstoragetable() const {
  const ::TSP::Reference* p = commentstoragetable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::commentstoragetable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.commentStorageTable)
  return _internal_commentstoragetable();
}
inline void DataStore::unsafe_arena_set_allocated_commentstoragetable(
    ::TSP::Reference* commentstoragetable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commentstoragetable_);
  }
  commentstoragetable_ = commentstoragetable;
  if (commentstoragetable) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.commentStorageTable)
}
inline ::TSP::Reference* DataStore::release_commentstoragetable() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = commentstoragetable_;
  commentstoragetable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_commentstoragetable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.commentStorageTable)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = commentstoragetable_;
  commentstoragetable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_commentstoragetable() {
  _has_bits_[0] |= 0x00008000u;
  if (commentstoragetable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    commentstoragetable_ = p;
  }
  return commentstoragetable_;
}
inline ::TSP::Reference* DataStore::mutable_commentstoragetable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.commentStorageTable)
  return _internal_mutable_commentstoragetable();
}
inline void DataStore::set_allocated_commentstoragetable(::TSP::Reference* commentstoragetable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(commentstoragetable_);
  }
  if (commentstoragetable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commentstoragetable)->GetArena();
    if (message_arena != submessage_arena) {
      commentstoragetable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commentstoragetable, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  commentstoragetable_ = commentstoragetable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.commentStorageTable)
}

// optional .TSP.Reference importWarningSetTable = 20;
inline bool DataStore::_internal_has_importwarningsettable() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || importwarningsettable_ != nullptr);
  return value;
}
inline bool DataStore::has_importwarningsettable() const {
  return _internal_has_importwarningsettable();
}
inline const ::TSP::Reference& DataStore::_internal_importwarningsettable() const {
  const ::TSP::Reference* p = importwarningsettable_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::importwarningsettable() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.importWarningSetTable)
  return _internal_importwarningsettable();
}
inline void DataStore::unsafe_arena_set_allocated_importwarningsettable(
    ::TSP::Reference* importwarningsettable) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(importwarningsettable_);
  }
  importwarningsettable_ = importwarningsettable;
  if (importwarningsettable) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.importWarningSetTable)
}
inline ::TSP::Reference* DataStore::release_importwarningsettable() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = importwarningsettable_;
  importwarningsettable_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_importwarningsettable() {
  // @@protoc_insertion_point(field_release:TST.DataStore.importWarningSetTable)
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = importwarningsettable_;
  importwarningsettable_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_importwarningsettable() {
  _has_bits_[0] |= 0x00010000u;
  if (importwarningsettable_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    importwarningsettable_ = p;
  }
  return importwarningsettable_;
}
inline ::TSP::Reference* DataStore::mutable_importwarningsettable() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.importWarningSetTable)
  return _internal_mutable_importwarningsettable();
}
inline void DataStore::set_allocated_importwarningsettable(::TSP::Reference* importwarningsettable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(importwarningsettable_);
  }
  if (importwarningsettable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(importwarningsettable)->GetArena();
    if (message_arena != submessage_arena) {
      importwarningsettable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, importwarningsettable, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  importwarningsettable_ = importwarningsettable;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.importWarningSetTable)
}

// optional .TSP.Reference control_cell_spec_table = 21;
inline bool DataStore::_internal_has_control_cell_spec_table() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || control_cell_spec_table_ != nullptr);
  return value;
}
inline bool DataStore::has_control_cell_spec_table() const {
  return _internal_has_control_cell_spec_table();
}
inline const ::TSP::Reference& DataStore::_internal_control_cell_spec_table() const {
  const ::TSP::Reference* p = control_cell_spec_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::control_cell_spec_table() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.control_cell_spec_table)
  return _internal_control_cell_spec_table();
}
inline void DataStore::unsafe_arena_set_allocated_control_cell_spec_table(
    ::TSP::Reference* control_cell_spec_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_cell_spec_table_);
  }
  control_cell_spec_table_ = control_cell_spec_table;
  if (control_cell_spec_table) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.control_cell_spec_table)
}
inline ::TSP::Reference* DataStore::release_control_cell_spec_table() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = control_cell_spec_table_;
  control_cell_spec_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_control_cell_spec_table() {
  // @@protoc_insertion_point(field_release:TST.DataStore.control_cell_spec_table)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = control_cell_spec_table_;
  control_cell_spec_table_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_control_cell_spec_table() {
  _has_bits_[0] |= 0x00020000u;
  if (control_cell_spec_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    control_cell_spec_table_ = p;
  }
  return control_cell_spec_table_;
}
inline ::TSP::Reference* DataStore::mutable_control_cell_spec_table() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.control_cell_spec_table)
  return _internal_mutable_control_cell_spec_table();
}
inline void DataStore::set_allocated_control_cell_spec_table(::TSP::Reference* control_cell_spec_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_cell_spec_table_);
  }
  if (control_cell_spec_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_cell_spec_table)->GetArena();
    if (message_arena != submessage_arena) {
      control_cell_spec_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_cell_spec_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  control_cell_spec_table_ = control_cell_spec_table;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.control_cell_spec_table)
}

// optional .TSP.Reference format_table = 22;
inline bool DataStore::_internal_has_format_table() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || format_table_ != nullptr);
  return value;
}
inline bool DataStore::has_format_table() const {
  return _internal_has_format_table();
}
inline const ::TSP::Reference& DataStore::_internal_format_table() const {
  const ::TSP::Reference* p = format_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DataStore::format_table() const {
  // @@protoc_insertion_point(field_get:TST.DataStore.format_table)
  return _internal_format_table();
}
inline void DataStore::unsafe_arena_set_allocated_format_table(
    ::TSP::Reference* format_table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_table_);
  }
  format_table_ = format_table;
  if (format_table) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DataStore.format_table)
}
inline ::TSP::Reference* DataStore::release_format_table() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = format_table_;
  format_table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DataStore::unsafe_arena_release_format_table() {
  // @@protoc_insertion_point(field_release:TST.DataStore.format_table)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = format_table_;
  format_table_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DataStore::_internal_mutable_format_table() {
  _has_bits_[0] |= 0x00040000u;
  if (format_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    format_table_ = p;
  }
  return format_table_;
}
inline ::TSP::Reference* DataStore::mutable_format_table() {
  // @@protoc_insertion_point(field_mutable:TST.DataStore.format_table)
  return _internal_mutable_format_table();
}
inline void DataStore::set_allocated_format_table(::TSP::Reference* format_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_table_);
  }
  if (format_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_table)->GetArena();
    if (message_arena != submessage_arena) {
      format_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  format_table_ = format_table;
  // @@protoc_insertion_point(field_set_allocated:TST.DataStore.format_table)
}

// -------------------------------------------------------------------

// TableInfoArchive

// required .TSD.DrawableArchive super = 1;
inline bool TableInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableArchive& TableInfoArchive::_internal_super() const {
  const ::TSD::DrawableArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableArchive&>(
      ::TSD::_DrawableArchive_default_instance_);
}
inline const ::TSD::DrawableArchive& TableInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.super)
  return _internal_super();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.super)
}
inline ::TSD::DrawableArchive* TableInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::DrawableArchive* TableInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableArchive* TableInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableArchive* TableInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.super)
  return _internal_mutable_super();
}
inline void TableInfoArchive::set_allocated_super(::TSD::DrawableArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.super)
}

// required .TSP.Reference tableModel = 2;
inline bool TableInfoArchive::_internal_has_tablemodel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tablemodel_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_tablemodel() const {
  return _internal_has_tablemodel();
}
inline const ::TSP::Reference& TableInfoArchive::_internal_tablemodel() const {
  const ::TSP::Reference* p = tablemodel_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableInfoArchive::tablemodel() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.tableModel)
  return _internal_tablemodel();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_tablemodel(
    ::TSP::Reference* tablemodel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel_);
  }
  tablemodel_ = tablemodel;
  if (tablemodel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.tableModel)
}
inline ::TSP::Reference* TableInfoArchive::release_tablemodel() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tablemodel_;
  tablemodel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::unsafe_arena_release_tablemodel() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.tableModel)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tablemodel_;
  tablemodel_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::_internal_mutable_tablemodel() {
  _has_bits_[0] |= 0x00000002u;
  if (tablemodel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tablemodel_ = p;
  }
  return tablemodel_;
}
inline ::TSP::Reference* TableInfoArchive::mutable_tablemodel() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.tableModel)
  return _internal_mutable_tablemodel();
}
inline void TableInfoArchive::set_allocated_tablemodel(::TSP::Reference* tablemodel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel_);
  }
  if (tablemodel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel)->GetArena();
    if (message_arena != submessage_arena) {
      tablemodel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tablemodel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tablemodel_ = tablemodel;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.tableModel)
}

// optional .TSP.Reference editing_state = 3 [deprecated = true];
inline bool TableInfoArchive::_internal_has_editing_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || editing_state_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_editing_state() const {
  return _internal_has_editing_state();
}
inline const ::TSP::Reference& TableInfoArchive::_internal_editing_state() const {
  const ::TSP::Reference* p = editing_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableInfoArchive::editing_state() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.editing_state)
  return _internal_editing_state();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_editing_state(
    ::TSP::Reference* editing_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_state_);
  }
  editing_state_ = editing_state;
  if (editing_state) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.editing_state)
}
inline ::TSP::Reference* TableInfoArchive::release_editing_state() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = editing_state_;
  editing_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::unsafe_arena_release_editing_state() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.editing_state)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = editing_state_;
  editing_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::_internal_mutable_editing_state() {
  _has_bits_[0] |= 0x00000004u;
  if (editing_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    editing_state_ = p;
  }
  return editing_state_;
}
inline ::TSP::Reference* TableInfoArchive::mutable_editing_state() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.editing_state)
  return _internal_mutable_editing_state();
}
inline void TableInfoArchive::set_allocated_editing_state(::TSP::Reference* editing_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_state_);
  }
  if (editing_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(editing_state)->GetArena();
    if (message_arena != submessage_arena) {
      editing_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, editing_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  editing_state_ = editing_state;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.editing_state)
}

// optional .TSP.Reference summary_model = 4;
inline bool TableInfoArchive::_internal_has_summary_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || summary_model_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_summary_model() const {
  return _internal_has_summary_model();
}
inline const ::TSP::Reference& TableInfoArchive::_internal_summary_model() const {
  const ::TSP::Reference* p = summary_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableInfoArchive::summary_model() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.summary_model)
  return _internal_summary_model();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_summary_model(
    ::TSP::Reference* summary_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_model_);
  }
  summary_model_ = summary_model;
  if (summary_model) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.summary_model)
}
inline ::TSP::Reference* TableInfoArchive::release_summary_model() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = summary_model_;
  summary_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::unsafe_arena_release_summary_model() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.summary_model)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = summary_model_;
  summary_model_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::_internal_mutable_summary_model() {
  _has_bits_[0] |= 0x00000008u;
  if (summary_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    summary_model_ = p;
  }
  return summary_model_;
}
inline ::TSP::Reference* TableInfoArchive::mutable_summary_model() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.summary_model)
  return _internal_mutable_summary_model();
}
inline void TableInfoArchive::set_allocated_summary_model(::TSP::Reference* summary_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_model_);
  }
  if (summary_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_model)->GetArena();
    if (message_arena != submessage_arena) {
      summary_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  summary_model_ = summary_model;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.summary_model)
}

// optional .TSP.Reference category_order = 5;
inline bool TableInfoArchive::_internal_has_category_order() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || category_order_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_category_order() const {
  return _internal_has_category_order();
}
inline const ::TSP::Reference& TableInfoArchive::_internal_category_order() const {
  const ::TSP::Reference* p = category_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableInfoArchive::category_order() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.category_order)
  return _internal_category_order();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_category_order(
    ::TSP::Reference* category_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_order_);
  }
  category_order_ = category_order;
  if (category_order) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.category_order)
}
inline ::TSP::Reference* TableInfoArchive::release_category_order() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = category_order_;
  category_order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::unsafe_arena_release_category_order() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.category_order)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = category_order_;
  category_order_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::_internal_mutable_category_order() {
  _has_bits_[0] |= 0x00000010u;
  if (category_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_order_ = p;
  }
  return category_order_;
}
inline ::TSP::Reference* TableInfoArchive::mutable_category_order() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.category_order)
  return _internal_mutable_category_order();
}
inline void TableInfoArchive::set_allocated_category_order(::TSP::Reference* category_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_order_);
  }
  if (category_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_order)->GetArena();
    if (message_arena != submessage_arena) {
      category_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_order, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  category_order_ = category_order;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.category_order)
}

// optional .TSP.Reference view_column_row_uids = 6;
inline bool TableInfoArchive::_internal_has_view_column_row_uids() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || view_column_row_uids_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_view_column_row_uids() const {
  return _internal_has_view_column_row_uids();
}
inline const ::TSP::Reference& TableInfoArchive::_internal_view_column_row_uids() const {
  const ::TSP::Reference* p = view_column_row_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableInfoArchive::view_column_row_uids() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.view_column_row_uids)
  return _internal_view_column_row_uids();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_view_column_row_uids(
    ::TSP::Reference* view_column_row_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_column_row_uids_);
  }
  view_column_row_uids_ = view_column_row_uids;
  if (view_column_row_uids) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.view_column_row_uids)
}
inline ::TSP::Reference* TableInfoArchive::release_view_column_row_uids() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = view_column_row_uids_;
  view_column_row_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::unsafe_arena_release_view_column_row_uids() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.view_column_row_uids)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = view_column_row_uids_;
  view_column_row_uids_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableInfoArchive::_internal_mutable_view_column_row_uids() {
  _has_bits_[0] |= 0x00000020u;
  if (view_column_row_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    view_column_row_uids_ = p;
  }
  return view_column_row_uids_;
}
inline ::TSP::Reference* TableInfoArchive::mutable_view_column_row_uids() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.view_column_row_uids)
  return _internal_mutable_view_column_row_uids();
}
inline void TableInfoArchive::set_allocated_view_column_row_uids(::TSP::Reference* view_column_row_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_column_row_uids_);
  }
  if (view_column_row_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_column_row_uids)->GetArena();
    if (message_arena != submessage_arena) {
      view_column_row_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_column_row_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  view_column_row_uids_ = view_column_row_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.view_column_row_uids)
}

// optional .TSP.UUID group_by_uuid = 7;
inline bool TableInfoArchive::_internal_has_group_by_uuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uuid_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_group_by_uuid() const {
  return _internal_has_group_by_uuid();
}
inline const ::TSP::UUID& TableInfoArchive::_internal_group_by_uuid() const {
  const ::TSP::UUID* p = group_by_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& TableInfoArchive::group_by_uuid() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.group_by_uuid)
  return _internal_group_by_uuid();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_group_by_uuid(
    ::TSP::UUID* group_by_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uuid_);
  }
  group_by_uuid_ = group_by_uuid;
  if (group_by_uuid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.group_by_uuid)
}
inline ::TSP::UUID* TableInfoArchive::release_group_by_uuid() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = group_by_uuid_;
  group_by_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* TableInfoArchive::unsafe_arena_release_group_by_uuid() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.group_by_uuid)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = group_by_uuid_;
  group_by_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* TableInfoArchive::_internal_mutable_group_by_uuid() {
  _has_bits_[0] |= 0x00000040u;
  if (group_by_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uuid_ = p;
  }
  return group_by_uuid_;
}
inline ::TSP::UUID* TableInfoArchive::mutable_group_by_uuid() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.group_by_uuid)
  return _internal_mutable_group_by_uuid();
}
inline void TableInfoArchive::set_allocated_group_by_uuid(::TSP::UUID* group_by_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uuid_);
  }
  if (group_by_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  group_by_uuid_ = group_by_uuid;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.group_by_uuid)
}

// optional .TSP.UUID hidden_states_uuid = 8;
inline bool TableInfoArchive::_internal_has_hidden_states_uuid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hidden_states_uuid_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_hidden_states_uuid() const {
  return _internal_has_hidden_states_uuid();
}
inline const ::TSP::UUID& TableInfoArchive::_internal_hidden_states_uuid() const {
  const ::TSP::UUID* p = hidden_states_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& TableInfoArchive::hidden_states_uuid() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.hidden_states_uuid)
  return _internal_hidden_states_uuid();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_hidden_states_uuid(
    ::TSP::UUID* hidden_states_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_uuid_);
  }
  hidden_states_uuid_ = hidden_states_uuid;
  if (hidden_states_uuid) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.hidden_states_uuid)
}
inline ::TSP::UUID* TableInfoArchive::release_hidden_states_uuid() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUID* temp = hidden_states_uuid_;
  hidden_states_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* TableInfoArchive::unsafe_arena_release_hidden_states_uuid() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.hidden_states_uuid)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUID* temp = hidden_states_uuid_;
  hidden_states_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* TableInfoArchive::_internal_mutable_hidden_states_uuid() {
  _has_bits_[0] |= 0x00000080u;
  if (hidden_states_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    hidden_states_uuid_ = p;
  }
  return hidden_states_uuid_;
}
inline ::TSP::UUID* TableInfoArchive::mutable_hidden_states_uuid() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.hidden_states_uuid)
  return _internal_mutable_hidden_states_uuid();
}
inline void TableInfoArchive::set_allocated_hidden_states_uuid(::TSP::UUID* hidden_states_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_uuid_);
  }
  if (hidden_states_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_states_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_states_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  hidden_states_uuid_ = hidden_states_uuid;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.hidden_states_uuid)
}

// optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
inline bool TableInfoArchive::_internal_has_formula_coord_space_in_pre40() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TableInfoArchive::has_formula_coord_space_in_pre40() const {
  return _internal_has_formula_coord_space_in_pre40();
}
inline void TableInfoArchive::clear_formula_coord_space_in_pre40() {
  formula_coord_space_in_pre40_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableInfoArchive::_internal_formula_coord_space_in_pre40() const {
  return formula_coord_space_in_pre40_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableInfoArchive::formula_coord_space_in_pre40() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.formula_coord_space_in_pre40)
  return _internal_formula_coord_space_in_pre40();
}
inline void TableInfoArchive::_internal_set_formula_coord_space_in_pre40(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  formula_coord_space_in_pre40_ = value;
}
inline void TableInfoArchive::set_formula_coord_space_in_pre40(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formula_coord_space_in_pre40(value);
  // @@protoc_insertion_point(field_set:TST.TableInfoArchive.formula_coord_space_in_pre40)
}

// optional uint32 formula_coord_space = 10;
inline bool TableInfoArchive::_internal_has_formula_coord_space() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TableInfoArchive::has_formula_coord_space() const {
  return _internal_has_formula_coord_space();
}
inline void TableInfoArchive::clear_formula_coord_space() {
  formula_coord_space_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableInfoArchive::_internal_formula_coord_space() const {
  return formula_coord_space_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableInfoArchive::formula_coord_space() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.formula_coord_space)
  return _internal_formula_coord_space();
}
inline void TableInfoArchive::_internal_set_formula_coord_space(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  formula_coord_space_ = value;
}
inline void TableInfoArchive::set_formula_coord_space(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formula_coord_space(value);
  // @@protoc_insertion_point(field_set:TST.TableInfoArchive.formula_coord_space)
}

// optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
inline bool TableInfoArchive::_internal_has_pasteboard_coord_mapper() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || pasteboard_coord_mapper_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_pasteboard_coord_mapper() const {
  return _internal_has_pasteboard_coord_mapper();
}
inline const ::TSCE::CoordMapperArchive& TableInfoArchive::_internal_pasteboard_coord_mapper() const {
  const ::TSCE::CoordMapperArchive* p = pasteboard_coord_mapper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CoordMapperArchive&>(
      ::TSCE::_CoordMapperArchive_default_instance_);
}
inline const ::TSCE::CoordMapperArchive& TableInfoArchive::pasteboard_coord_mapper() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.pasteboard_coord_mapper)
  return _internal_pasteboard_coord_mapper();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_pasteboard_coord_mapper(
    ::TSCE::CoordMapperArchive* pasteboard_coord_mapper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pasteboard_coord_mapper_);
  }
  pasteboard_coord_mapper_ = pasteboard_coord_mapper;
  if (pasteboard_coord_mapper) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.pasteboard_coord_mapper)
}
inline ::TSCE::CoordMapperArchive* TableInfoArchive::release_pasteboard_coord_mapper() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CoordMapperArchive* temp = pasteboard_coord_mapper_;
  pasteboard_coord_mapper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CoordMapperArchive* TableInfoArchive::unsafe_arena_release_pasteboard_coord_mapper() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.pasteboard_coord_mapper)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CoordMapperArchive* temp = pasteboard_coord_mapper_;
  pasteboard_coord_mapper_ = nullptr;
  return temp;
}
inline ::TSCE::CoordMapperArchive* TableInfoArchive::_internal_mutable_pasteboard_coord_mapper() {
  _has_bits_[0] |= 0x00000100u;
  if (pasteboard_coord_mapper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CoordMapperArchive>(GetArena());
    pasteboard_coord_mapper_ = p;
  }
  return pasteboard_coord_mapper_;
}
inline ::TSCE::CoordMapperArchive* TableInfoArchive::mutable_pasteboard_coord_mapper() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.pasteboard_coord_mapper)
  return _internal_mutable_pasteboard_coord_mapper();
}
inline void TableInfoArchive::set_allocated_pasteboard_coord_mapper(::TSCE::CoordMapperArchive* pasteboard_coord_mapper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pasteboard_coord_mapper_);
  }
  if (pasteboard_coord_mapper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pasteboard_coord_mapper)->GetArena();
    if (message_arena != submessage_arena) {
      pasteboard_coord_mapper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pasteboard_coord_mapper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  pasteboard_coord_mapper_ = pasteboard_coord_mapper;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.pasteboard_coord_mapper)
}

// optional .TST.LayoutEngineArchive layout_engine = 14;
inline bool TableInfoArchive::_internal_has_layout_engine() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || layout_engine_ != nullptr);
  return value;
}
inline bool TableInfoArchive::has_layout_engine() const {
  return _internal_has_layout_engine();
}
inline void TableInfoArchive::clear_layout_engine() {
  if (layout_engine_ != nullptr) layout_engine_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TST::LayoutEngineArchive& TableInfoArchive::_internal_layout_engine() const {
  const ::TST::LayoutEngineArchive* p = layout_engine_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::LayoutEngineArchive&>(
      ::TST::_LayoutEngineArchive_default_instance_);
}
inline const ::TST::LayoutEngineArchive& TableInfoArchive::layout_engine() const {
  // @@protoc_insertion_point(field_get:TST.TableInfoArchive.layout_engine)
  return _internal_layout_engine();
}
inline void TableInfoArchive::unsafe_arena_set_allocated_layout_engine(
    ::TST::LayoutEngineArchive* layout_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_engine_);
  }
  layout_engine_ = layout_engine;
  if (layout_engine) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableInfoArchive.layout_engine)
}
inline ::TST::LayoutEngineArchive* TableInfoArchive::release_layout_engine() {
  _has_bits_[0] &= ~0x00000200u;
  ::TST::LayoutEngineArchive* temp = layout_engine_;
  layout_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::LayoutEngineArchive* TableInfoArchive::unsafe_arena_release_layout_engine() {
  // @@protoc_insertion_point(field_release:TST.TableInfoArchive.layout_engine)
  _has_bits_[0] &= ~0x00000200u;
  ::TST::LayoutEngineArchive* temp = layout_engine_;
  layout_engine_ = nullptr;
  return temp;
}
inline ::TST::LayoutEngineArchive* TableInfoArchive::_internal_mutable_layout_engine() {
  _has_bits_[0] |= 0x00000200u;
  if (layout_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::LayoutEngineArchive>(GetArena());
    layout_engine_ = p;
  }
  return layout_engine_;
}
inline ::TST::LayoutEngineArchive* TableInfoArchive::mutable_layout_engine() {
  // @@protoc_insertion_point(field_mutable:TST.TableInfoArchive.layout_engine)
  return _internal_mutable_layout_engine();
}
inline void TableInfoArchive::set_allocated_layout_engine(::TST::LayoutEngineArchive* layout_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete layout_engine_;
  }
  if (layout_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(layout_engine);
    if (message_arena != submessage_arena) {
      layout_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout_engine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  layout_engine_ = layout_engine;
  // @@protoc_insertion_point(field_set_allocated:TST.TableInfoArchive.layout_engine)
}

// -------------------------------------------------------------------

// CategoryInfoArchive

// required .TSD.DrawableArchive super = 1;
inline bool CategoryInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CategoryInfoArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableArchive& CategoryInfoArchive::_internal_super() const {
  const ::TSD::DrawableArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableArchive&>(
      ::TSD::_DrawableArchive_default_instance_);
}
inline const ::TSD::DrawableArchive& CategoryInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CategoryInfoArchive.super)
  return _internal_super();
}
inline void CategoryInfoArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryInfoArchive.super)
}
inline ::TSD::DrawableArchive* CategoryInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::DrawableArchive* CategoryInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CategoryInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableArchive* CategoryInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableArchive* CategoryInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryInfoArchive.super)
  return _internal_mutable_super();
}
inline void CategoryInfoArchive::set_allocated_super(::TSD::DrawableArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryInfoArchive.super)
}

// required .TSP.Reference tableModel = 2;
inline bool CategoryInfoArchive::_internal_has_tablemodel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tablemodel_ != nullptr);
  return value;
}
inline bool CategoryInfoArchive::has_tablemodel() const {
  return _internal_has_tablemodel();
}
inline const ::TSP::Reference& CategoryInfoArchive::_internal_tablemodel() const {
  const ::TSP::Reference* p = tablemodel_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CategoryInfoArchive::tablemodel() const {
  // @@protoc_insertion_point(field_get:TST.CategoryInfoArchive.tableModel)
  return _internal_tablemodel();
}
inline void CategoryInfoArchive::unsafe_arena_set_allocated_tablemodel(
    ::TSP::Reference* tablemodel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel_);
  }
  tablemodel_ = tablemodel;
  if (tablemodel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryInfoArchive.tableModel)
}
inline ::TSP::Reference* CategoryInfoArchive::release_tablemodel() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tablemodel_;
  tablemodel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CategoryInfoArchive::unsafe_arena_release_tablemodel() {
  // @@protoc_insertion_point(field_release:TST.CategoryInfoArchive.tableModel)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = tablemodel_;
  tablemodel_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CategoryInfoArchive::_internal_mutable_tablemodel() {
  _has_bits_[0] |= 0x00000002u;
  if (tablemodel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tablemodel_ = p;
  }
  return tablemodel_;
}
inline ::TSP::Reference* CategoryInfoArchive::mutable_tablemodel() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryInfoArchive.tableModel)
  return _internal_mutable_tablemodel();
}
inline void CategoryInfoArchive::set_allocated_tablemodel(::TSP::Reference* tablemodel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel_);
  }
  if (tablemodel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel)->GetArena();
    if (message_arena != submessage_arena) {
      tablemodel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tablemodel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tablemodel_ = tablemodel;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryInfoArchive.tableModel)
}

// -------------------------------------------------------------------

// WPTableInfoArchive

// required .TST.TableInfoArchive super = 1;
inline bool WPTableInfoArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool WPTableInfoArchive::has_super() const {
  return _internal_has_super();
}
inline void WPTableInfoArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::TableInfoArchive& WPTableInfoArchive::_internal_super() const {
  const ::TST::TableInfoArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableInfoArchive&>(
      ::TST::_TableInfoArchive_default_instance_);
}
inline const ::TST::TableInfoArchive& WPTableInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.WPTableInfoArchive.super)
  return _internal_super();
}
inline void WPTableInfoArchive::unsafe_arena_set_allocated_super(
    ::TST::TableInfoArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.WPTableInfoArchive.super)
}
inline ::TST::TableInfoArchive* WPTableInfoArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::TableInfoArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TableInfoArchive* WPTableInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.WPTableInfoArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::TableInfoArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::TableInfoArchive* WPTableInfoArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableInfoArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::TableInfoArchive* WPTableInfoArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.WPTableInfoArchive.super)
  return _internal_mutable_super();
}
inline void WPTableInfoArchive::set_allocated_super(::TST::TableInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.WPTableInfoArchive.super)
}

// optional .TSP.Reference storage = 2;
inline bool WPTableInfoArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool WPTableInfoArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& WPTableInfoArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& WPTableInfoArchive::storage() const {
  // @@protoc_insertion_point(field_get:TST.WPTableInfoArchive.storage)
  return _internal_storage();
}
inline void WPTableInfoArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.WPTableInfoArchive.storage)
}
inline ::TSP::Reference* WPTableInfoArchive::release_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* WPTableInfoArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TST.WPTableInfoArchive.storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* WPTableInfoArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* WPTableInfoArchive::mutable_storage() {
  // @@protoc_insertion_point(field_mutable:TST.WPTableInfoArchive.storage)
  return _internal_mutable_storage();
}
inline void WPTableInfoArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage)->GetArena();
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TST.WPTableInfoArchive.storage)
}

// -------------------------------------------------------------------

// TableStyleNetworkArchive

// required .TSP.Reference table_style = 9;
inline bool TableStyleNetworkArchive::_internal_has_table_style() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || table_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_table_style() const {
  return _internal_has_table_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_table_style() const {
  const ::TSP::Reference* p = table_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::table_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.table_style)
  return _internal_table_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_table_style(
    ::TSP::Reference* table_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_);
  }
  table_style_ = table_style;
  if (table_style) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.table_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_table_style() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = table_style_;
  table_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_table_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.table_style)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = table_style_;
  table_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_table_style() {
  _has_bits_[0] |= 0x00000100u;
  if (table_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_style_ = p;
  }
  return table_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_table_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.table_style)
  return _internal_mutable_table_style();
}
inline void TableStyleNetworkArchive::set_allocated_table_style(::TSP::Reference* table_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_);
  }
  if (table_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style)->GetArena();
    if (message_arena != submessage_arena) {
      table_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  table_style_ = table_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.table_style)
}

// required .TSP.Reference body_text_style = 1;
inline bool TableStyleNetworkArchive::_internal_has_body_text_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || body_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_body_text_style() const {
  return _internal_has_body_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_body_text_style() const {
  const ::TSP::Reference* p = body_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::body_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.body_text_style)
  return _internal_body_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_body_text_style(
    ::TSP::Reference* body_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_text_style_);
  }
  body_text_style_ = body_text_style;
  if (body_text_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.body_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_body_text_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = body_text_style_;
  body_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_body_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.body_text_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = body_text_style_;
  body_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_body_text_style() {
  _has_bits_[0] |= 0x00000001u;
  if (body_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    body_text_style_ = p;
  }
  return body_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_body_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.body_text_style)
  return _internal_mutable_body_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_body_text_style(::TSP::Reference* body_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_text_style_);
  }
  if (body_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      body_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_text_style_ = body_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.body_text_style)
}

// required .TSP.Reference header_row_text_style = 2;
inline bool TableStyleNetworkArchive::_internal_has_header_row_text_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_row_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_header_row_text_style() const {
  return _internal_has_header_row_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_header_row_text_style() const {
  const ::TSP::Reference* p = header_row_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::header_row_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.header_row_text_style)
  return _internal_header_row_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_header_row_text_style(
    ::TSP::Reference* header_row_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_text_style_);
  }
  header_row_text_style_ = header_row_text_style;
  if (header_row_text_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.header_row_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_header_row_text_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = header_row_text_style_;
  header_row_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_header_row_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.header_row_text_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = header_row_text_style_;
  header_row_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_header_row_text_style() {
  _has_bits_[0] |= 0x00000002u;
  if (header_row_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_row_text_style_ = p;
  }
  return header_row_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_header_row_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.header_row_text_style)
  return _internal_mutable_header_row_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_header_row_text_style(::TSP::Reference* header_row_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_text_style_);
  }
  if (header_row_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_row_text_style_ = header_row_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.header_row_text_style)
}

// required .TSP.Reference header_column_text_style = 3;
inline bool TableStyleNetworkArchive::_internal_has_header_column_text_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || header_column_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_header_column_text_style() const {
  return _internal_has_header_column_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_header_column_text_style() const {
  const ::TSP::Reference* p = header_column_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::header_column_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.header_column_text_style)
  return _internal_header_column_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_header_column_text_style(
    ::TSP::Reference* header_column_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_text_style_);
  }
  header_column_text_style_ = header_column_text_style;
  if (header_column_text_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.header_column_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_header_column_text_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = header_column_text_style_;
  header_column_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_header_column_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.header_column_text_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = header_column_text_style_;
  header_column_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_header_column_text_style() {
  _has_bits_[0] |= 0x00000004u;
  if (header_column_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_column_text_style_ = p;
  }
  return header_column_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_header_column_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.header_column_text_style)
  return _internal_mutable_header_column_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_header_column_text_style(::TSP::Reference* header_column_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_text_style_);
  }
  if (header_column_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_column_text_style_ = header_column_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.header_column_text_style)
}

// required .TSP.Reference footer_row_text_style = 4;
inline bool TableStyleNetworkArchive::_internal_has_footer_row_text_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_footer_row_text_style() const {
  return _internal_has_footer_row_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_footer_row_text_style() const {
  const ::TSP::Reference* p = footer_row_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::footer_row_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.footer_row_text_style)
  return _internal_footer_row_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_footer_row_text_style(
    ::TSP::Reference* footer_row_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_text_style_);
  }
  footer_row_text_style_ = footer_row_text_style;
  if (footer_row_text_style) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.footer_row_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_footer_row_text_style() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = footer_row_text_style_;
  footer_row_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_footer_row_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.footer_row_text_style)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = footer_row_text_style_;
  footer_row_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_footer_row_text_style() {
  _has_bits_[0] |= 0x00000008u;
  if (footer_row_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    footer_row_text_style_ = p;
  }
  return footer_row_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_footer_row_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.footer_row_text_style)
  return _internal_mutable_footer_row_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_footer_row_text_style(::TSP::Reference* footer_row_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_text_style_);
  }
  if (footer_row_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  footer_row_text_style_ = footer_row_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.footer_row_text_style)
}

// optional .TSP.Reference category_level_1_text_style = 13;
inline bool TableStyleNetworkArchive::_internal_has_category_level_1_text_style() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || category_level_1_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_1_text_style() const {
  return _internal_has_category_level_1_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_1_text_style() const {
  const ::TSP::Reference* p = category_level_1_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_1_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_1_text_style)
  return _internal_category_level_1_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_1_text_style(
    ::TSP::Reference* category_level_1_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_text_style_);
  }
  category_level_1_text_style_ = category_level_1_text_style;
  if (category_level_1_text_style) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_1_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_1_text_style() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = category_level_1_text_style_;
  category_level_1_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_1_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_1_text_style)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = category_level_1_text_style_;
  category_level_1_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_1_text_style() {
  _has_bits_[0] |= 0x00000800u;
  if (category_level_1_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_1_text_style_ = p;
  }
  return category_level_1_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_1_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_1_text_style)
  return _internal_mutable_category_level_1_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_1_text_style(::TSP::Reference* category_level_1_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_text_style_);
  }
  if (category_level_1_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_1_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_1_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  category_level_1_text_style_ = category_level_1_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_1_text_style)
}

// optional .TSP.Reference category_level_2_text_style = 14;
inline bool TableStyleNetworkArchive::_internal_has_category_level_2_text_style() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_2_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_2_text_style() const {
  return _internal_has_category_level_2_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_2_text_style() const {
  const ::TSP::Reference* p = category_level_2_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_2_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_2_text_style)
  return _internal_category_level_2_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_2_text_style(
    ::TSP::Reference* category_level_2_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_text_style_);
  }
  category_level_2_text_style_ = category_level_2_text_style;
  if (category_level_2_text_style) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_2_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_2_text_style() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = category_level_2_text_style_;
  category_level_2_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_2_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_2_text_style)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = category_level_2_text_style_;
  category_level_2_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_2_text_style() {
  _has_bits_[0] |= 0x00001000u;
  if (category_level_2_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_2_text_style_ = p;
  }
  return category_level_2_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_2_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_2_text_style)
  return _internal_mutable_category_level_2_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_2_text_style(::TSP::Reference* category_level_2_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_text_style_);
  }
  if (category_level_2_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_2_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_2_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  category_level_2_text_style_ = category_level_2_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_2_text_style)
}

// optional .TSP.Reference category_level_3_text_style = 15;
inline bool TableStyleNetworkArchive::_internal_has_category_level_3_text_style() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_3_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_3_text_style() const {
  return _internal_has_category_level_3_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_3_text_style() const {
  const ::TSP::Reference* p = category_level_3_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_3_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_3_text_style)
  return _internal_category_level_3_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_3_text_style(
    ::TSP::Reference* category_level_3_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_text_style_);
  }
  category_level_3_text_style_ = category_level_3_text_style;
  if (category_level_3_text_style) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_3_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_3_text_style() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = category_level_3_text_style_;
  category_level_3_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_3_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_3_text_style)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = category_level_3_text_style_;
  category_level_3_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_3_text_style() {
  _has_bits_[0] |= 0x00002000u;
  if (category_level_3_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_3_text_style_ = p;
  }
  return category_level_3_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_3_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_3_text_style)
  return _internal_mutable_category_level_3_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_3_text_style(::TSP::Reference* category_level_3_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_text_style_);
  }
  if (category_level_3_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_3_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_3_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  category_level_3_text_style_ = category_level_3_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_3_text_style)
}

// optional .TSP.Reference category_level_4_text_style = 16;
inline bool TableStyleNetworkArchive::_internal_has_category_level_4_text_style() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_4_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_4_text_style() const {
  return _internal_has_category_level_4_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_4_text_style() const {
  const ::TSP::Reference* p = category_level_4_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_4_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_4_text_style)
  return _internal_category_level_4_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_4_text_style(
    ::TSP::Reference* category_level_4_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_text_style_);
  }
  category_level_4_text_style_ = category_level_4_text_style;
  if (category_level_4_text_style) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_4_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_4_text_style() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::Reference* temp = category_level_4_text_style_;
  category_level_4_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_4_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_4_text_style)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::Reference* temp = category_level_4_text_style_;
  category_level_4_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_4_text_style() {
  _has_bits_[0] |= 0x00004000u;
  if (category_level_4_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_4_text_style_ = p;
  }
  return category_level_4_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_4_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_4_text_style)
  return _internal_mutable_category_level_4_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_4_text_style(::TSP::Reference* category_level_4_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_text_style_);
  }
  if (category_level_4_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_4_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_4_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  category_level_4_text_style_ = category_level_4_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_4_text_style)
}

// optional .TSP.Reference category_level_5_text_style = 17;
inline bool TableStyleNetworkArchive::_internal_has_category_level_5_text_style() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_5_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_5_text_style() const {
  return _internal_has_category_level_5_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_5_text_style() const {
  const ::TSP::Reference* p = category_level_5_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_5_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_5_text_style)
  return _internal_category_level_5_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_5_text_style(
    ::TSP::Reference* category_level_5_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_text_style_);
  }
  category_level_5_text_style_ = category_level_5_text_style;
  if (category_level_5_text_style) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_5_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_5_text_style() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = category_level_5_text_style_;
  category_level_5_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_5_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_5_text_style)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = category_level_5_text_style_;
  category_level_5_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_5_text_style() {
  _has_bits_[0] |= 0x00008000u;
  if (category_level_5_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_5_text_style_ = p;
  }
  return category_level_5_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_5_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_5_text_style)
  return _internal_mutable_category_level_5_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_5_text_style(::TSP::Reference* category_level_5_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_text_style_);
  }
  if (category_level_5_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_5_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_5_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  category_level_5_text_style_ = category_level_5_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_5_text_style)
}

// optional .TSP.Reference label_level_1_text_style = 23;
inline bool TableStyleNetworkArchive::_internal_has_label_level_1_text_style() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_1_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_1_text_style() const {
  return _internal_has_label_level_1_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_1_text_style() const {
  const ::TSP::Reference* p = label_level_1_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_1_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_1_text_style)
  return _internal_label_level_1_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_1_text_style(
    ::TSP::Reference* label_level_1_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_text_style_);
  }
  label_level_1_text_style_ = label_level_1_text_style;
  if (label_level_1_text_style) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_1_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_1_text_style() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSP::Reference* temp = label_level_1_text_style_;
  label_level_1_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_1_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_1_text_style)
  _has_bits_[0] &= ~0x00200000u;
  ::TSP::Reference* temp = label_level_1_text_style_;
  label_level_1_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_1_text_style() {
  _has_bits_[0] |= 0x00200000u;
  if (label_level_1_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_1_text_style_ = p;
  }
  return label_level_1_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_1_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_1_text_style)
  return _internal_mutable_label_level_1_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_1_text_style(::TSP::Reference* label_level_1_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_text_style_);
  }
  if (label_level_1_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_1_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_1_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  label_level_1_text_style_ = label_level_1_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_1_text_style)
}

// optional .TSP.Reference label_level_2_text_style = 24;
inline bool TableStyleNetworkArchive::_internal_has_label_level_2_text_style() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_2_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_2_text_style() const {
  return _internal_has_label_level_2_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_2_text_style() const {
  const ::TSP::Reference* p = label_level_2_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_2_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_2_text_style)
  return _internal_label_level_2_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_2_text_style(
    ::TSP::Reference* label_level_2_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_text_style_);
  }
  label_level_2_text_style_ = label_level_2_text_style;
  if (label_level_2_text_style) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_2_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_2_text_style() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSP::Reference* temp = label_level_2_text_style_;
  label_level_2_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_2_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_2_text_style)
  _has_bits_[0] &= ~0x00400000u;
  ::TSP::Reference* temp = label_level_2_text_style_;
  label_level_2_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_2_text_style() {
  _has_bits_[0] |= 0x00400000u;
  if (label_level_2_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_2_text_style_ = p;
  }
  return label_level_2_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_2_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_2_text_style)
  return _internal_mutable_label_level_2_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_2_text_style(::TSP::Reference* label_level_2_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_text_style_);
  }
  if (label_level_2_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_2_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_2_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  label_level_2_text_style_ = label_level_2_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_2_text_style)
}

// optional .TSP.Reference label_level_3_text_style = 25;
inline bool TableStyleNetworkArchive::_internal_has_label_level_3_text_style() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_3_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_3_text_style() const {
  return _internal_has_label_level_3_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_3_text_style() const {
  const ::TSP::Reference* p = label_level_3_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_3_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_3_text_style)
  return _internal_label_level_3_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_3_text_style(
    ::TSP::Reference* label_level_3_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_text_style_);
  }
  label_level_3_text_style_ = label_level_3_text_style;
  if (label_level_3_text_style) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_3_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_3_text_style() {
  _has_bits_[0] &= ~0x00800000u;
  ::TSP::Reference* temp = label_level_3_text_style_;
  label_level_3_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_3_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_3_text_style)
  _has_bits_[0] &= ~0x00800000u;
  ::TSP::Reference* temp = label_level_3_text_style_;
  label_level_3_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_3_text_style() {
  _has_bits_[0] |= 0x00800000u;
  if (label_level_3_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_3_text_style_ = p;
  }
  return label_level_3_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_3_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_3_text_style)
  return _internal_mutable_label_level_3_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_3_text_style(::TSP::Reference* label_level_3_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_text_style_);
  }
  if (label_level_3_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_3_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_3_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  label_level_3_text_style_ = label_level_3_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_3_text_style)
}

// optional .TSP.Reference label_level_4_text_style = 26;
inline bool TableStyleNetworkArchive::_internal_has_label_level_4_text_style() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_4_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_4_text_style() const {
  return _internal_has_label_level_4_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_4_text_style() const {
  const ::TSP::Reference* p = label_level_4_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_4_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_4_text_style)
  return _internal_label_level_4_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_4_text_style(
    ::TSP::Reference* label_level_4_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_text_style_);
  }
  label_level_4_text_style_ = label_level_4_text_style;
  if (label_level_4_text_style) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_4_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_4_text_style() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSP::Reference* temp = label_level_4_text_style_;
  label_level_4_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_4_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_4_text_style)
  _has_bits_[0] &= ~0x01000000u;
  ::TSP::Reference* temp = label_level_4_text_style_;
  label_level_4_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_4_text_style() {
  _has_bits_[0] |= 0x01000000u;
  if (label_level_4_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_4_text_style_ = p;
  }
  return label_level_4_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_4_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_4_text_style)
  return _internal_mutable_label_level_4_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_4_text_style(::TSP::Reference* label_level_4_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_text_style_);
  }
  if (label_level_4_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_4_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_4_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  label_level_4_text_style_ = label_level_4_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_4_text_style)
}

// optional .TSP.Reference label_level_5_text_style = 27;
inline bool TableStyleNetworkArchive::_internal_has_label_level_5_text_style() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_5_text_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_5_text_style() const {
  return _internal_has_label_level_5_text_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_5_text_style() const {
  const ::TSP::Reference* p = label_level_5_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_5_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_5_text_style)
  return _internal_label_level_5_text_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_5_text_style(
    ::TSP::Reference* label_level_5_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_text_style_);
  }
  label_level_5_text_style_ = label_level_5_text_style;
  if (label_level_5_text_style) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_5_text_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_5_text_style() {
  _has_bits_[0] &= ~0x02000000u;
  ::TSP::Reference* temp = label_level_5_text_style_;
  label_level_5_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_5_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_5_text_style)
  _has_bits_[0] &= ~0x02000000u;
  ::TSP::Reference* temp = label_level_5_text_style_;
  label_level_5_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_5_text_style() {
  _has_bits_[0] |= 0x02000000u;
  if (label_level_5_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_5_text_style_ = p;
  }
  return label_level_5_text_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_5_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_5_text_style)
  return _internal_mutable_label_level_5_text_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_5_text_style(::TSP::Reference* label_level_5_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_text_style_);
  }
  if (label_level_5_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_5_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_5_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  label_level_5_text_style_ = label_level_5_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_5_text_style)
}

// required .TSP.Reference body_cell_style = 5;
inline bool TableStyleNetworkArchive::_internal_has_body_cell_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || body_cell_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_body_cell_style() const {
  return _internal_has_body_cell_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_body_cell_style() const {
  const ::TSP::Reference* p = body_cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::body_cell_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.body_cell_style)
  return _internal_body_cell_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_body_cell_style(
    ::TSP::Reference* body_cell_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_cell_style_);
  }
  body_cell_style_ = body_cell_style;
  if (body_cell_style) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.body_cell_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_body_cell_style() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = body_cell_style_;
  body_cell_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_body_cell_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.body_cell_style)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = body_cell_style_;
  body_cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_body_cell_style() {
  _has_bits_[0] |= 0x00000010u;
  if (body_cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    body_cell_style_ = p;
  }
  return body_cell_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_body_cell_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.body_cell_style)
  return _internal_mutable_body_cell_style();
}
inline void TableStyleNetworkArchive::set_allocated_body_cell_style(::TSP::Reference* body_cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_cell_style_);
  }
  if (body_cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_cell_style)->GetArena();
    if (message_arena != submessage_arena) {
      body_cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_cell_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  body_cell_style_ = body_cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.body_cell_style)
}

// required .TSP.Reference header_row_style = 6;
inline bool TableStyleNetworkArchive::_internal_has_header_row_style() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || header_row_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_header_row_style() const {
  return _internal_has_header_row_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_header_row_style() const {
  const ::TSP::Reference* p = header_row_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::header_row_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.header_row_style)
  return _internal_header_row_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_header_row_style(
    ::TSP::Reference* header_row_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_style_);
  }
  header_row_style_ = header_row_style;
  if (header_row_style) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.header_row_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_header_row_style() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = header_row_style_;
  header_row_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_header_row_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.header_row_style)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = header_row_style_;
  header_row_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_header_row_style() {
  _has_bits_[0] |= 0x00000020u;
  if (header_row_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_row_style_ = p;
  }
  return header_row_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_header_row_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.header_row_style)
  return _internal_mutable_header_row_style();
}
inline void TableStyleNetworkArchive::set_allocated_header_row_style(::TSP::Reference* header_row_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_style_);
  }
  if (header_row_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  header_row_style_ = header_row_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.header_row_style)
}

// required .TSP.Reference header_column_style = 7;
inline bool TableStyleNetworkArchive::_internal_has_header_column_style() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || header_column_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_header_column_style() const {
  return _internal_has_header_column_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_header_column_style() const {
  const ::TSP::Reference* p = header_column_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::header_column_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.header_column_style)
  return _internal_header_column_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_header_column_style(
    ::TSP::Reference* header_column_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_style_);
  }
  header_column_style_ = header_column_style;
  if (header_column_style) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.header_column_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_header_column_style() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = header_column_style_;
  header_column_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_header_column_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.header_column_style)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = header_column_style_;
  header_column_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_header_column_style() {
  _has_bits_[0] |= 0x00000040u;
  if (header_column_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_column_style_ = p;
  }
  return header_column_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_header_column_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.header_column_style)
  return _internal_mutable_header_column_style();
}
inline void TableStyleNetworkArchive::set_allocated_header_column_style(::TSP::Reference* header_column_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_style_);
  }
  if (header_column_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  header_column_style_ = header_column_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.header_column_style)
}

// required .TSP.Reference footer_row_style = 8;
inline bool TableStyleNetworkArchive::_internal_has_footer_row_style() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_footer_row_style() const {
  return _internal_has_footer_row_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_footer_row_style() const {
  const ::TSP::Reference* p = footer_row_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::footer_row_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.footer_row_style)
  return _internal_footer_row_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_footer_row_style(
    ::TSP::Reference* footer_row_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_style_);
  }
  footer_row_style_ = footer_row_style;
  if (footer_row_style) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.footer_row_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_footer_row_style() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = footer_row_style_;
  footer_row_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_footer_row_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.footer_row_style)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = footer_row_style_;
  footer_row_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_footer_row_style() {
  _has_bits_[0] |= 0x00000080u;
  if (footer_row_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    footer_row_style_ = p;
  }
  return footer_row_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_footer_row_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.footer_row_style)
  return _internal_mutable_footer_row_style();
}
inline void TableStyleNetworkArchive::set_allocated_footer_row_style(::TSP::Reference* footer_row_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_style_);
  }
  if (footer_row_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_style)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  footer_row_style_ = footer_row_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.footer_row_style)
}

// optional .TSP.Reference category_level_1_style = 18;
inline bool TableStyleNetworkArchive::_internal_has_category_level_1_style() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_1_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_1_style() const {
  return _internal_has_category_level_1_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_1_style() const {
  const ::TSP::Reference* p = category_level_1_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_1_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_1_style)
  return _internal_category_level_1_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_1_style(
    ::TSP::Reference* category_level_1_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_style_);
  }
  category_level_1_style_ = category_level_1_style;
  if (category_level_1_style) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_1_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_1_style() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = category_level_1_style_;
  category_level_1_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_1_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_1_style)
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = category_level_1_style_;
  category_level_1_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_1_style() {
  _has_bits_[0] |= 0x00010000u;
  if (category_level_1_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_1_style_ = p;
  }
  return category_level_1_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_1_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_1_style)
  return _internal_mutable_category_level_1_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_1_style(::TSP::Reference* category_level_1_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_style_);
  }
  if (category_level_1_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_1_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_1_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  category_level_1_style_ = category_level_1_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_1_style)
}

// optional .TSP.Reference category_level_2_style = 19;
inline bool TableStyleNetworkArchive::_internal_has_category_level_2_style() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_2_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_2_style() const {
  return _internal_has_category_level_2_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_2_style() const {
  const ::TSP::Reference* p = category_level_2_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_2_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_2_style)
  return _internal_category_level_2_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_2_style(
    ::TSP::Reference* category_level_2_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_style_);
  }
  category_level_2_style_ = category_level_2_style;
  if (category_level_2_style) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_2_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_2_style() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = category_level_2_style_;
  category_level_2_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_2_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_2_style)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = category_level_2_style_;
  category_level_2_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_2_style() {
  _has_bits_[0] |= 0x00020000u;
  if (category_level_2_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_2_style_ = p;
  }
  return category_level_2_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_2_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_2_style)
  return _internal_mutable_category_level_2_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_2_style(::TSP::Reference* category_level_2_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_style_);
  }
  if (category_level_2_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_2_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_2_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  category_level_2_style_ = category_level_2_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_2_style)
}

// optional .TSP.Reference category_level_3_style = 20;
inline bool TableStyleNetworkArchive::_internal_has_category_level_3_style() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_3_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_3_style() const {
  return _internal_has_category_level_3_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_3_style() const {
  const ::TSP::Reference* p = category_level_3_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_3_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_3_style)
  return _internal_category_level_3_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_3_style(
    ::TSP::Reference* category_level_3_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_style_);
  }
  category_level_3_style_ = category_level_3_style;
  if (category_level_3_style) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_3_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_3_style() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = category_level_3_style_;
  category_level_3_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_3_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_3_style)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = category_level_3_style_;
  category_level_3_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_3_style() {
  _has_bits_[0] |= 0x00040000u;
  if (category_level_3_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_3_style_ = p;
  }
  return category_level_3_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_3_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_3_style)
  return _internal_mutable_category_level_3_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_3_style(::TSP::Reference* category_level_3_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_style_);
  }
  if (category_level_3_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_3_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_3_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  category_level_3_style_ = category_level_3_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_3_style)
}

// optional .TSP.Reference category_level_4_style = 21;
inline bool TableStyleNetworkArchive::_internal_has_category_level_4_style() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_4_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_4_style() const {
  return _internal_has_category_level_4_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_4_style() const {
  const ::TSP::Reference* p = category_level_4_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_4_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_4_style)
  return _internal_category_level_4_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_4_style(
    ::TSP::Reference* category_level_4_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_style_);
  }
  category_level_4_style_ = category_level_4_style;
  if (category_level_4_style) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_4_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_4_style() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = category_level_4_style_;
  category_level_4_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_4_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_4_style)
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = category_level_4_style_;
  category_level_4_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_4_style() {
  _has_bits_[0] |= 0x00080000u;
  if (category_level_4_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_4_style_ = p;
  }
  return category_level_4_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_4_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_4_style)
  return _internal_mutable_category_level_4_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_4_style(::TSP::Reference* category_level_4_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_style_);
  }
  if (category_level_4_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_4_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_4_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  category_level_4_style_ = category_level_4_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_4_style)
}

// optional .TSP.Reference category_level_5_style = 22;
inline bool TableStyleNetworkArchive::_internal_has_category_level_5_style() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_5_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_category_level_5_style() const {
  return _internal_has_category_level_5_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_category_level_5_style() const {
  const ::TSP::Reference* p = category_level_5_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::category_level_5_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.category_level_5_style)
  return _internal_category_level_5_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_category_level_5_style(
    ::TSP::Reference* category_level_5_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_style_);
  }
  category_level_5_style_ = category_level_5_style;
  if (category_level_5_style) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.category_level_5_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_category_level_5_style() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSP::Reference* temp = category_level_5_style_;
  category_level_5_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_category_level_5_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.category_level_5_style)
  _has_bits_[0] &= ~0x00100000u;
  ::TSP::Reference* temp = category_level_5_style_;
  category_level_5_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_category_level_5_style() {
  _has_bits_[0] |= 0x00100000u;
  if (category_level_5_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_5_style_ = p;
  }
  return category_level_5_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_category_level_5_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.category_level_5_style)
  return _internal_mutable_category_level_5_style();
}
inline void TableStyleNetworkArchive::set_allocated_category_level_5_style(::TSP::Reference* category_level_5_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_style_);
  }
  if (category_level_5_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_5_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_5_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  category_level_5_style_ = category_level_5_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.category_level_5_style)
}

// optional .TSP.Reference label_level_1_style = 28;
inline bool TableStyleNetworkArchive::_internal_has_label_level_1_style() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_1_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_1_style() const {
  return _internal_has_label_level_1_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_1_style() const {
  const ::TSP::Reference* p = label_level_1_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_1_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_1_style)
  return _internal_label_level_1_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_1_style(
    ::TSP::Reference* label_level_1_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_style_);
  }
  label_level_1_style_ = label_level_1_style;
  if (label_level_1_style) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_1_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_1_style() {
  _has_bits_[0] &= ~0x04000000u;
  ::TSP::Reference* temp = label_level_1_style_;
  label_level_1_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_1_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_1_style)
  _has_bits_[0] &= ~0x04000000u;
  ::TSP::Reference* temp = label_level_1_style_;
  label_level_1_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_1_style() {
  _has_bits_[0] |= 0x04000000u;
  if (label_level_1_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_1_style_ = p;
  }
  return label_level_1_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_1_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_1_style)
  return _internal_mutable_label_level_1_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_1_style(::TSP::Reference* label_level_1_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_style_);
  }
  if (label_level_1_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_1_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_1_style, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  label_level_1_style_ = label_level_1_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_1_style)
}

// optional .TSP.Reference label_level_2_style = 29;
inline bool TableStyleNetworkArchive::_internal_has_label_level_2_style() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_2_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_2_style() const {
  return _internal_has_label_level_2_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_2_style() const {
  const ::TSP::Reference* p = label_level_2_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_2_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_2_style)
  return _internal_label_level_2_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_2_style(
    ::TSP::Reference* label_level_2_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_style_);
  }
  label_level_2_style_ = label_level_2_style;
  if (label_level_2_style) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_2_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_2_style() {
  _has_bits_[0] &= ~0x08000000u;
  ::TSP::Reference* temp = label_level_2_style_;
  label_level_2_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_2_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_2_style)
  _has_bits_[0] &= ~0x08000000u;
  ::TSP::Reference* temp = label_level_2_style_;
  label_level_2_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_2_style() {
  _has_bits_[0] |= 0x08000000u;
  if (label_level_2_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_2_style_ = p;
  }
  return label_level_2_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_2_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_2_style)
  return _internal_mutable_label_level_2_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_2_style(::TSP::Reference* label_level_2_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_style_);
  }
  if (label_level_2_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_2_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_2_style, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  label_level_2_style_ = label_level_2_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_2_style)
}

// optional .TSP.Reference label_level_3_style = 30;
inline bool TableStyleNetworkArchive::_internal_has_label_level_3_style() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_3_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_3_style() const {
  return _internal_has_label_level_3_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_3_style() const {
  const ::TSP::Reference* p = label_level_3_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_3_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_3_style)
  return _internal_label_level_3_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_3_style(
    ::TSP::Reference* label_level_3_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_style_);
  }
  label_level_3_style_ = label_level_3_style;
  if (label_level_3_style) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_3_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_3_style() {
  _has_bits_[0] &= ~0x10000000u;
  ::TSP::Reference* temp = label_level_3_style_;
  label_level_3_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_3_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_3_style)
  _has_bits_[0] &= ~0x10000000u;
  ::TSP::Reference* temp = label_level_3_style_;
  label_level_3_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_3_style() {
  _has_bits_[0] |= 0x10000000u;
  if (label_level_3_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_3_style_ = p;
  }
  return label_level_3_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_3_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_3_style)
  return _internal_mutable_label_level_3_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_3_style(::TSP::Reference* label_level_3_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_style_);
  }
  if (label_level_3_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_3_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_3_style, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  label_level_3_style_ = label_level_3_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_3_style)
}

// optional .TSP.Reference label_level_4_style = 31;
inline bool TableStyleNetworkArchive::_internal_has_label_level_4_style() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_4_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_4_style() const {
  return _internal_has_label_level_4_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_4_style() const {
  const ::TSP::Reference* p = label_level_4_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_4_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_4_style)
  return _internal_label_level_4_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_4_style(
    ::TSP::Reference* label_level_4_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_style_);
  }
  label_level_4_style_ = label_level_4_style;
  if (label_level_4_style) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_4_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_4_style() {
  _has_bits_[0] &= ~0x20000000u;
  ::TSP::Reference* temp = label_level_4_style_;
  label_level_4_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_4_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_4_style)
  _has_bits_[0] &= ~0x20000000u;
  ::TSP::Reference* temp = label_level_4_style_;
  label_level_4_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_4_style() {
  _has_bits_[0] |= 0x20000000u;
  if (label_level_4_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_4_style_ = p;
  }
  return label_level_4_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_4_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_4_style)
  return _internal_mutable_label_level_4_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_4_style(::TSP::Reference* label_level_4_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_style_);
  }
  if (label_level_4_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_4_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_4_style, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  label_level_4_style_ = label_level_4_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_4_style)
}

// optional .TSP.Reference label_level_5_style = 32;
inline bool TableStyleNetworkArchive::_internal_has_label_level_5_style() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_5_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_label_level_5_style() const {
  return _internal_has_label_level_5_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_label_level_5_style() const {
  const ::TSP::Reference* p = label_level_5_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::label_level_5_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.label_level_5_style)
  return _internal_label_level_5_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_label_level_5_style(
    ::TSP::Reference* label_level_5_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_style_);
  }
  label_level_5_style_ = label_level_5_style;
  if (label_level_5_style) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.label_level_5_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_label_level_5_style() {
  _has_bits_[0] &= ~0x40000000u;
  ::TSP::Reference* temp = label_level_5_style_;
  label_level_5_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_label_level_5_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.label_level_5_style)
  _has_bits_[0] &= ~0x40000000u;
  ::TSP::Reference* temp = label_level_5_style_;
  label_level_5_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_label_level_5_style() {
  _has_bits_[0] |= 0x40000000u;
  if (label_level_5_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_5_style_ = p;
  }
  return label_level_5_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_label_level_5_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.label_level_5_style)
  return _internal_mutable_label_level_5_style();
}
inline void TableStyleNetworkArchive::set_allocated_label_level_5_style(::TSP::Reference* label_level_5_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_style_);
  }
  if (label_level_5_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_5_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_5_style, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  label_level_5_style_ = label_level_5_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.label_level_5_style)
}

// optional .TSP.Reference table_name_style = 10;
inline bool TableStyleNetworkArchive::_internal_has_table_name_style() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || table_name_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_table_name_style() const {
  return _internal_has_table_name_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_table_name_style() const {
  const ::TSP::Reference* p = table_name_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::table_name_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.table_name_style)
  return _internal_table_name_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_table_name_style(
    ::TSP::Reference* table_name_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_style_);
  }
  table_name_style_ = table_name_style;
  if (table_name_style) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.table_name_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_table_name_style() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = table_name_style_;
  table_name_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_table_name_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.table_name_style)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = table_name_style_;
  table_name_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_table_name_style() {
  _has_bits_[0] |= 0x00000200u;
  if (table_name_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_name_style_ = p;
  }
  return table_name_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_table_name_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.table_name_style)
  return _internal_mutable_table_name_style();
}
inline void TableStyleNetworkArchive::set_allocated_table_name_style(::TSP::Reference* table_name_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_style_);
  }
  if (table_name_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_style)->GetArena();
    if (message_arena != submessage_arena) {
      table_name_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_name_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  table_name_style_ = table_name_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.table_name_style)
}

// optional .TSP.Reference table_name_shape_style = 11;
inline bool TableStyleNetworkArchive::_internal_has_table_name_shape_style() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || table_name_shape_style_ != nullptr);
  return value;
}
inline bool TableStyleNetworkArchive::has_table_name_shape_style() const {
  return _internal_has_table_name_shape_style();
}
inline const ::TSP::Reference& TableStyleNetworkArchive::_internal_table_name_shape_style() const {
  const ::TSP::Reference* p = table_name_shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableStyleNetworkArchive::table_name_shape_style() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.table_name_shape_style)
  return _internal_table_name_shape_style();
}
inline void TableStyleNetworkArchive::unsafe_arena_set_allocated_table_name_shape_style(
    ::TSP::Reference* table_name_shape_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_shape_style_);
  }
  table_name_shape_style_ = table_name_shape_style;
  if (table_name_shape_style) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleNetworkArchive.table_name_shape_style)
}
inline ::TSP::Reference* TableStyleNetworkArchive::release_table_name_shape_style() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = table_name_shape_style_;
  table_name_shape_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::unsafe_arena_release_table_name_shape_style() {
  // @@protoc_insertion_point(field_release:TST.TableStyleNetworkArchive.table_name_shape_style)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = table_name_shape_style_;
  table_name_shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableStyleNetworkArchive::_internal_mutable_table_name_shape_style() {
  _has_bits_[0] |= 0x00000400u;
  if (table_name_shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_name_shape_style_ = p;
  }
  return table_name_shape_style_;
}
inline ::TSP::Reference* TableStyleNetworkArchive::mutable_table_name_shape_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleNetworkArchive.table_name_shape_style)
  return _internal_mutable_table_name_shape_style();
}
inline void TableStyleNetworkArchive::set_allocated_table_name_shape_style(::TSP::Reference* table_name_shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_shape_style_);
  }
  if (table_name_shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_shape_style)->GetArena();
    if (message_arena != submessage_arena) {
      table_name_shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_name_shape_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  table_name_shape_style_ = table_name_shape_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleNetworkArchive.table_name_shape_style)
}

// optional uint32 preset_id = 12;
inline bool TableStyleNetworkArchive::_internal_has_preset_id() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TableStyleNetworkArchive::has_preset_id() const {
  return _internal_has_preset_id();
}
inline void TableStyleNetworkArchive::clear_preset_id() {
  preset_id_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableStyleNetworkArchive::_internal_preset_id() const {
  return preset_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableStyleNetworkArchive::preset_id() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleNetworkArchive.preset_id)
  return _internal_preset_id();
}
inline void TableStyleNetworkArchive::_internal_set_preset_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  preset_id_ = value;
}
inline void TableStyleNetworkArchive::set_preset_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preset_id(value);
  // @@protoc_insertion_point(field_set:TST.TableStyleNetworkArchive.preset_id)
}

// -------------------------------------------------------------------

// TableSortOrderArchive_SortRuleArchive

// required uint32 column = 1;
inline bool TableSortOrderArchive_SortRuleArchive::_internal_has_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableSortOrderArchive_SortRuleArchive::has_column() const {
  return _internal_has_column();
}
inline void TableSortOrderArchive_SortRuleArchive::clear_column() {
  column_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSortOrderArchive_SortRuleArchive::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableSortOrderArchive_SortRuleArchive::column() const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderArchive.SortRuleArchive.column)
  return _internal_column();
}
inline void TableSortOrderArchive_SortRuleArchive::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  column_ = value;
}
inline void TableSortOrderArchive_SortRuleArchive::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:TST.TableSortOrderArchive.SortRuleArchive.column)
}

// required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
inline bool TableSortOrderArchive_SortRuleArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableSortOrderArchive_SortRuleArchive::has_direction() const {
  return _internal_has_direction();
}
inline void TableSortOrderArchive_SortRuleArchive::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::_internal_direction() const {
  return static_cast< ::TST::TableSortOrderArchive_SortRuleArchive_Direction >(direction_);
}
inline ::TST::TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderArchive.SortRuleArchive.direction)
  return _internal_direction();
}
inline void TableSortOrderArchive_SortRuleArchive::_internal_set_direction(::TST::TableSortOrderArchive_SortRuleArchive_Direction value) {
  assert(::TST::TableSortOrderArchive_SortRuleArchive_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  direction_ = value;
}
inline void TableSortOrderArchive_SortRuleArchive::set_direction(::TST::TableSortOrderArchive_SortRuleArchive_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.TableSortOrderArchive.SortRuleArchive.direction)
}

// -------------------------------------------------------------------

// TableSortOrderArchive

// required .TST.TableSortOrderArchive.SortType type = 1;
inline bool TableSortOrderArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableSortOrderArchive::has_type() const {
  return _internal_has_type();
}
inline void TableSortOrderArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TST::TableSortOrderArchive_SortType TableSortOrderArchive::_internal_type() const {
  return static_cast< ::TST::TableSortOrderArchive_SortType >(type_);
}
inline ::TST::TableSortOrderArchive_SortType TableSortOrderArchive::type() const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderArchive.type)
  return _internal_type();
}
inline void TableSortOrderArchive::_internal_set_type(::TST::TableSortOrderArchive_SortType value) {
  assert(::TST::TableSortOrderArchive_SortType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void TableSortOrderArchive::set_type(::TST::TableSortOrderArchive_SortType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TST.TableSortOrderArchive.type)
}

// repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
inline int TableSortOrderArchive::_internal_rules_size() const {
  return rules_.size();
}
inline int TableSortOrderArchive::rules_size() const {
  return _internal_rules_size();
}
inline void TableSortOrderArchive::clear_rules() {
  rules_.Clear();
}
inline ::TST::TableSortOrderArchive_SortRuleArchive* TableSortOrderArchive::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TableSortOrderArchive.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderArchive_SortRuleArchive >*
TableSortOrderArchive::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:TST.TableSortOrderArchive.rules)
  return &rules_;
}
inline const ::TST::TableSortOrderArchive_SortRuleArchive& TableSortOrderArchive::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::TST::TableSortOrderArchive_SortRuleArchive& TableSortOrderArchive::rules(int index) const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderArchive.rules)
  return _internal_rules(index);
}
inline ::TST::TableSortOrderArchive_SortRuleArchive* TableSortOrderArchive::_internal_add_rules() {
  return rules_.Add();
}
inline ::TST::TableSortOrderArchive_SortRuleArchive* TableSortOrderArchive::add_rules() {
  // @@protoc_insertion_point(field_add:TST.TableSortOrderArchive.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderArchive_SortRuleArchive >&
TableSortOrderArchive::rules() const {
  // @@protoc_insertion_point(field_list:TST.TableSortOrderArchive.rules)
  return rules_;
}

// -------------------------------------------------------------------

// TableSortOrderUIDArchive_SortRuleArchive

// required .TSP.UUID column_uid = 1;
inline bool TableSortOrderUIDArchive_SortRuleArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool TableSortOrderUIDArchive_SortRuleArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& TableSortOrderUIDArchive_SortRuleArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& TableSortOrderUIDArchive_SortRuleArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderUIDArchive.SortRuleArchive.column_uid)
  return _internal_column_uid();
}
inline void TableSortOrderUIDArchive_SortRuleArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableSortOrderUIDArchive.SortRuleArchive.column_uid)
}
inline ::TSP::UUID* TableSortOrderUIDArchive_SortRuleArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* TableSortOrderUIDArchive_SortRuleArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TST.TableSortOrderUIDArchive.SortRuleArchive.column_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* TableSortOrderUIDArchive_SortRuleArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* TableSortOrderUIDArchive_SortRuleArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TST.TableSortOrderUIDArchive.SortRuleArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void TableSortOrderUIDArchive_SortRuleArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.TableSortOrderUIDArchive.SortRuleArchive.column_uid)
}

// required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
inline bool TableSortOrderUIDArchive_SortRuleArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableSortOrderUIDArchive_SortRuleArchive::has_direction() const {
  return _internal_has_direction();
}
inline void TableSortOrderUIDArchive_SortRuleArchive::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::_internal_direction() const {
  return static_cast< ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction >(direction_);
}
inline ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::direction() const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderUIDArchive.SortRuleArchive.direction)
  return _internal_direction();
}
inline void TableSortOrderUIDArchive_SortRuleArchive::_internal_set_direction(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction value) {
  assert(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  direction_ = value;
}
inline void TableSortOrderUIDArchive_SortRuleArchive::set_direction(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TST.TableSortOrderUIDArchive.SortRuleArchive.direction)
}

// -------------------------------------------------------------------

// TableSortOrderUIDArchive

// required .TST.TableSortOrderUIDArchive.SortType type = 1;
inline bool TableSortOrderUIDArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableSortOrderUIDArchive::has_type() const {
  return _internal_has_type();
}
inline void TableSortOrderUIDArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TST::TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::_internal_type() const {
  return static_cast< ::TST::TableSortOrderUIDArchive_SortType >(type_);
}
inline ::TST::TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::type() const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderUIDArchive.type)
  return _internal_type();
}
inline void TableSortOrderUIDArchive::_internal_set_type(::TST::TableSortOrderUIDArchive_SortType value) {
  assert(::TST::TableSortOrderUIDArchive_SortType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void TableSortOrderUIDArchive::set_type(::TST::TableSortOrderUIDArchive_SortType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TST.TableSortOrderUIDArchive.type)
}

// repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
inline int TableSortOrderUIDArchive::_internal_rules_size() const {
  return rules_.size();
}
inline int TableSortOrderUIDArchive::rules_size() const {
  return _internal_rules_size();
}
inline void TableSortOrderUIDArchive::clear_rules() {
  rules_.Clear();
}
inline ::TST::TableSortOrderUIDArchive_SortRuleArchive* TableSortOrderUIDArchive::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:TST.TableSortOrderUIDArchive.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderUIDArchive_SortRuleArchive >*
TableSortOrderUIDArchive::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:TST.TableSortOrderUIDArchive.rules)
  return &rules_;
}
inline const ::TST::TableSortOrderUIDArchive_SortRuleArchive& TableSortOrderUIDArchive::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::TST::TableSortOrderUIDArchive_SortRuleArchive& TableSortOrderUIDArchive::rules(int index) const {
  // @@protoc_insertion_point(field_get:TST.TableSortOrderUIDArchive.rules)
  return _internal_rules(index);
}
inline ::TST::TableSortOrderUIDArchive_SortRuleArchive* TableSortOrderUIDArchive::_internal_add_rules() {
  return rules_.Add();
}
inline ::TST::TableSortOrderUIDArchive_SortRuleArchive* TableSortOrderUIDArchive::add_rules() {
  // @@protoc_insertion_point(field_add:TST.TableSortOrderUIDArchive.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::TableSortOrderUIDArchive_SortRuleArchive >&
TableSortOrderUIDArchive::rules() const {
  // @@protoc_insertion_point(field_list:TST.TableSortOrderUIDArchive.rules)
  return rules_;
}

// -------------------------------------------------------------------

// SortRuleReferenceTrackerArchive

// required .TSP.Reference reference_tracker = 1;
inline bool SortRuleReferenceTrackerArchive::_internal_has_reference_tracker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reference_tracker_ != nullptr);
  return value;
}
inline bool SortRuleReferenceTrackerArchive::has_reference_tracker() const {
  return _internal_has_reference_tracker();
}
inline const ::TSP::Reference& SortRuleReferenceTrackerArchive::_internal_reference_tracker() const {
  const ::TSP::Reference* p = reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SortRuleReferenceTrackerArchive::reference_tracker() const {
  // @@protoc_insertion_point(field_get:TST.SortRuleReferenceTrackerArchive.reference_tracker)
  return _internal_reference_tracker();
}
inline void SortRuleReferenceTrackerArchive::unsafe_arena_set_allocated_reference_tracker(
    ::TSP::Reference* reference_tracker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker_);
  }
  reference_tracker_ = reference_tracker;
  if (reference_tracker) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SortRuleReferenceTrackerArchive.reference_tracker)
}
inline ::TSP::Reference* SortRuleReferenceTrackerArchive::release_reference_tracker() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = reference_tracker_;
  reference_tracker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SortRuleReferenceTrackerArchive::unsafe_arena_release_reference_tracker() {
  // @@protoc_insertion_point(field_release:TST.SortRuleReferenceTrackerArchive.reference_tracker)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = reference_tracker_;
  reference_tracker_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SortRuleReferenceTrackerArchive::_internal_mutable_reference_tracker() {
  _has_bits_[0] |= 0x00000001u;
  if (reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    reference_tracker_ = p;
  }
  return reference_tracker_;
}
inline ::TSP::Reference* SortRuleReferenceTrackerArchive::mutable_reference_tracker() {
  // @@protoc_insertion_point(field_mutable:TST.SortRuleReferenceTrackerArchive.reference_tracker)
  return _internal_mutable_reference_tracker();
}
inline void SortRuleReferenceTrackerArchive::set_allocated_reference_tracker(::TSP::Reference* reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker_);
  }
  if (reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_tracker)->GetArena();
    if (message_arena != submessage_arena) {
      reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_tracker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reference_tracker_ = reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TST.SortRuleReferenceTrackerArchive.reference_tracker)
}

// -------------------------------------------------------------------

// CellRegion

// repeated .TST.CellRange cell_ranges = 1;
inline int CellRegion::_internal_cell_ranges_size() const {
  return cell_ranges_.size();
}
inline int CellRegion::cell_ranges_size() const {
  return _internal_cell_ranges_size();
}
inline void CellRegion::clear_cell_ranges() {
  cell_ranges_.Clear();
}
inline ::TST::CellRange* CellRegion::mutable_cell_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellRegion.cell_ranges)
  return cell_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
CellRegion::mutable_cell_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellRegion.cell_ranges)
  return &cell_ranges_;
}
inline const ::TST::CellRange& CellRegion::_internal_cell_ranges(int index) const {
  return cell_ranges_.Get(index);
}
inline const ::TST::CellRange& CellRegion::cell_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellRegion.cell_ranges)
  return _internal_cell_ranges(index);
}
inline ::TST::CellRange* CellRegion::_internal_add_cell_ranges() {
  return cell_ranges_.Add();
}
inline ::TST::CellRange* CellRegion::add_cell_ranges() {
  // @@protoc_insertion_point(field_add:TST.CellRegion.cell_ranges)
  return _internal_add_cell_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
CellRegion::cell_ranges() const {
  // @@protoc_insertion_point(field_list:TST.CellRegion.cell_ranges)
  return cell_ranges_;
}

// -------------------------------------------------------------------

// CellUIDRegionArchive

// repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
inline int CellUIDRegionArchive::_internal_cell_uid_ranges_size() const {
  return cell_uid_ranges_.size();
}
inline int CellUIDRegionArchive::cell_uid_ranges_size() const {
  return _internal_cell_uid_ranges_size();
}
inline ::TSP::UUIDRectArchive* CellUIDRegionArchive::mutable_cell_uid_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellUIDRegionArchive.cell_uid_ranges)
  return cell_uid_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
CellUIDRegionArchive::mutable_cell_uid_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellUIDRegionArchive.cell_uid_ranges)
  return &cell_uid_ranges_;
}
inline const ::TSP::UUIDRectArchive& CellUIDRegionArchive::_internal_cell_uid_ranges(int index) const {
  return cell_uid_ranges_.Get(index);
}
inline const ::TSP::UUIDRectArchive& CellUIDRegionArchive::cell_uid_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellUIDRegionArchive.cell_uid_ranges)
  return _internal_cell_uid_ranges(index);
}
inline ::TSP::UUIDRectArchive* CellUIDRegionArchive::_internal_add_cell_uid_ranges() {
  return cell_uid_ranges_.Add();
}
inline ::TSP::UUIDRectArchive* CellUIDRegionArchive::add_cell_uid_ranges() {
  // @@protoc_insertion_point(field_add:TST.CellUIDRegionArchive.cell_uid_ranges)
  return _internal_add_cell_uid_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
CellUIDRegionArchive::cell_uid_ranges() const {
  // @@protoc_insertion_point(field_list:TST.CellUIDRegionArchive.cell_uid_ranges)
  return cell_uid_ranges_;
}

// -------------------------------------------------------------------

// StructuredTextImportRecord

// required .TSK.StructuredTextImportSettings import_settings = 1;
inline bool StructuredTextImportRecord::_internal_has_import_settings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || import_settings_ != nullptr);
  return value;
}
inline bool StructuredTextImportRecord::has_import_settings() const {
  return _internal_has_import_settings();
}
inline const ::TSK::StructuredTextImportSettings& StructuredTextImportRecord::_internal_import_settings() const {
  const ::TSK::StructuredTextImportSettings* p = import_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::StructuredTextImportSettings&>(
      ::TSK::_StructuredTextImportSettings_default_instance_);
}
inline const ::TSK::StructuredTextImportSettings& StructuredTextImportRecord::import_settings() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.import_settings)
  return _internal_import_settings();
}
inline void StructuredTextImportRecord::unsafe_arena_set_allocated_import_settings(
    ::TSK::StructuredTextImportSettings* import_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(import_settings_);
  }
  import_settings_ = import_settings;
  if (import_settings) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StructuredTextImportRecord.import_settings)
}
inline ::TSK::StructuredTextImportSettings* StructuredTextImportRecord::release_import_settings() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::StructuredTextImportSettings* temp = import_settings_;
  import_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::StructuredTextImportSettings* StructuredTextImportRecord::unsafe_arena_release_import_settings() {
  // @@protoc_insertion_point(field_release:TST.StructuredTextImportRecord.import_settings)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::StructuredTextImportSettings* temp = import_settings_;
  import_settings_ = nullptr;
  return temp;
}
inline ::TSK::StructuredTextImportSettings* StructuredTextImportRecord::_internal_mutable_import_settings() {
  _has_bits_[0] |= 0x00000004u;
  if (import_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::StructuredTextImportSettings>(GetArena());
    import_settings_ = p;
  }
  return import_settings_;
}
inline ::TSK::StructuredTextImportSettings* StructuredTextImportRecord::mutable_import_settings() {
  // @@protoc_insertion_point(field_mutable:TST.StructuredTextImportRecord.import_settings)
  return _internal_mutable_import_settings();
}
inline void StructuredTextImportRecord::set_allocated_import_settings(::TSK::StructuredTextImportSettings* import_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(import_settings_);
  }
  if (import_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(import_settings)->GetArena();
    if (message_arena != submessage_arena) {
      import_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, import_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  import_settings_ = import_settings;
  // @@protoc_insertion_point(field_set_allocated:TST.StructuredTextImportRecord.import_settings)
}

// optional string import_source = 2;
inline bool StructuredTextImportRecord::_internal_has_import_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_import_source() const {
  return _internal_has_import_source();
}
inline void StructuredTextImportRecord::clear_import_source() {
  import_source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StructuredTextImportRecord::import_source() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.import_source)
  return _internal_import_source();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StructuredTextImportRecord::set_import_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 import_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.import_source)
}
inline std::string* StructuredTextImportRecord::mutable_import_source() {
  // @@protoc_insertion_point(field_mutable:TST.StructuredTextImportRecord.import_source)
  return _internal_mutable_import_source();
}
inline const std::string& StructuredTextImportRecord::_internal_import_source() const {
  return import_source_.Get();
}
inline void StructuredTextImportRecord::_internal_set_import_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  import_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StructuredTextImportRecord::_internal_mutable_import_source() {
  _has_bits_[0] |= 0x00000001u;
  return import_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StructuredTextImportRecord::release_import_source() {
  // @@protoc_insertion_point(field_release:TST.StructuredTextImportRecord.import_source)
  if (!_internal_has_import_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return import_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StructuredTextImportRecord::set_allocated_import_source(std::string* import_source) {
  if (import_source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  import_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), import_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.StructuredTextImportRecord.import_source)
}

// optional double import_date = 3;
inline bool StructuredTextImportRecord::_internal_has_import_date() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_import_date() const {
  return _internal_has_import_date();
}
inline void StructuredTextImportRecord::clear_import_date() {
  import_date_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double StructuredTextImportRecord::_internal_import_date() const {
  return import_date_;
}
inline double StructuredTextImportRecord::import_date() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.import_date)
  return _internal_import_date();
}
inline void StructuredTextImportRecord::_internal_set_import_date(double value) {
  _has_bits_[0] |= 0x00000010u;
  import_date_ = value;
}
inline void StructuredTextImportRecord::set_import_date(double value) {
  _internal_set_import_date(value);
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.import_date)
}

// optional bytes source_data = 4;
inline bool StructuredTextImportRecord::_internal_has_source_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_source_data() const {
  return _internal_has_source_data();
}
inline void StructuredTextImportRecord::clear_source_data() {
  source_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StructuredTextImportRecord::source_data() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.source_data)
  return _internal_source_data();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StructuredTextImportRecord::set_source_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 source_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.source_data)
}
inline std::string* StructuredTextImportRecord::mutable_source_data() {
  // @@protoc_insertion_point(field_mutable:TST.StructuredTextImportRecord.source_data)
  return _internal_mutable_source_data();
}
inline const std::string& StructuredTextImportRecord::_internal_source_data() const {
  return source_data_.Get();
}
inline void StructuredTextImportRecord::_internal_set_source_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StructuredTextImportRecord::_internal_mutable_source_data() {
  _has_bits_[0] |= 0x00000002u;
  return source_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StructuredTextImportRecord::release_source_data() {
  // @@protoc_insertion_point(field_release:TST.StructuredTextImportRecord.source_data)
  if (!_internal_has_source_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return source_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StructuredTextImportRecord::set_allocated_source_data(std::string* source_data) {
  if (source_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.StructuredTextImportRecord.source_data)
}

// optional uint64 source_encoding = 5;
inline bool StructuredTextImportRecord::_internal_has_source_encoding() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_source_encoding() const {
  return _internal_has_source_encoding();
}
inline void StructuredTextImportRecord::clear_source_encoding() {
  source_encoding_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportRecord::_internal_source_encoding() const {
  return source_encoding_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportRecord::source_encoding() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.source_encoding)
  return _internal_source_encoding();
}
inline void StructuredTextImportRecord::_internal_set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  source_encoding_ = value;
}
inline void StructuredTextImportRecord::set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_encoding(value);
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.source_encoding)
}

// optional float confidence = 6;
inline bool StructuredTextImportRecord::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_confidence() const {
  return _internal_has_confidence();
}
inline void StructuredTextImportRecord::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float StructuredTextImportRecord::_internal_confidence() const {
  return confidence_;
}
inline float StructuredTextImportRecord::confidence() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.confidence)
  return _internal_confidence();
}
inline void StructuredTextImportRecord::_internal_set_confidence(float value) {
  _has_bits_[0] |= 0x00000100u;
  confidence_ = value;
}
inline void StructuredTextImportRecord::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.confidence)
}

// optional .TST.CellRegion imported_region = 7;
inline bool StructuredTextImportRecord::_internal_has_imported_region() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || imported_region_ != nullptr);
  return value;
}
inline bool StructuredTextImportRecord::has_imported_region() const {
  return _internal_has_imported_region();
}
inline void StructuredTextImportRecord::clear_imported_region() {
  if (imported_region_ != nullptr) imported_region_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TST::CellRegion& StructuredTextImportRecord::_internal_imported_region() const {
  const ::TST::CellRegion* p = imported_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRegion&>(
      ::TST::_CellRegion_default_instance_);
}
inline const ::TST::CellRegion& StructuredTextImportRecord::imported_region() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.imported_region)
  return _internal_imported_region();
}
inline void StructuredTextImportRecord::unsafe_arena_set_allocated_imported_region(
    ::TST::CellRegion* imported_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imported_region_);
  }
  imported_region_ = imported_region;
  if (imported_region) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StructuredTextImportRecord.imported_region)
}
inline ::TST::CellRegion* StructuredTextImportRecord::release_imported_region() {
  _has_bits_[0] &= ~0x00000008u;
  ::TST::CellRegion* temp = imported_region_;
  imported_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRegion* StructuredTextImportRecord::unsafe_arena_release_imported_region() {
  // @@protoc_insertion_point(field_release:TST.StructuredTextImportRecord.imported_region)
  _has_bits_[0] &= ~0x00000008u;
  ::TST::CellRegion* temp = imported_region_;
  imported_region_ = nullptr;
  return temp;
}
inline ::TST::CellRegion* StructuredTextImportRecord::_internal_mutable_imported_region() {
  _has_bits_[0] |= 0x00000008u;
  if (imported_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRegion>(GetArena());
    imported_region_ = p;
  }
  return imported_region_;
}
inline ::TST::CellRegion* StructuredTextImportRecord::mutable_imported_region() {
  // @@protoc_insertion_point(field_mutable:TST.StructuredTextImportRecord.imported_region)
  return _internal_mutable_imported_region();
}
inline void StructuredTextImportRecord::set_allocated_imported_region(::TST::CellRegion* imported_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imported_region_;
  }
  if (imported_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imported_region);
    if (message_arena != submessage_arena) {
      imported_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imported_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  imported_region_ = imported_region;
  // @@protoc_insertion_point(field_set_allocated:TST.StructuredTextImportRecord.imported_region)
}

// optional uint64 source_row_count = 8;
inline bool StructuredTextImportRecord::_internal_has_source_row_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_source_row_count() const {
  return _internal_has_source_row_count();
}
inline void StructuredTextImportRecord::clear_source_row_count() {
  source_row_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportRecord::_internal_source_row_count() const {
  return source_row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportRecord::source_row_count() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.source_row_count)
  return _internal_source_row_count();
}
inline void StructuredTextImportRecord::_internal_set_source_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  source_row_count_ = value;
}
inline void StructuredTextImportRecord::set_source_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_row_count(value);
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.source_row_count)
}

// optional uint64 source_column_count = 9;
inline bool StructuredTextImportRecord::_internal_has_source_column_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StructuredTextImportRecord::has_source_column_count() const {
  return _internal_has_source_column_count();
}
inline void StructuredTextImportRecord::clear_source_column_count() {
  source_column_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportRecord::_internal_source_column_count() const {
  return source_column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportRecord::source_column_count() const {
  // @@protoc_insertion_point(field_get:TST.StructuredTextImportRecord.source_column_count)
  return _internal_source_column_count();
}
inline void StructuredTextImportRecord::_internal_set_source_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  source_column_count_ = value;
}
inline void StructuredTextImportRecord::set_source_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_column_count(value);
  // @@protoc_insertion_point(field_set:TST.StructuredTextImportRecord.source_column_count)
}

// -------------------------------------------------------------------

// TableModelArchive

// required string table_id = 1;
inline bool TableModelArchive::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableModelArchive::has_table_id() const {
  return _internal_has_table_id();
}
inline void TableModelArchive::clear_table_id() {
  table_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableModelArchive::table_id() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_id)
  return _internal_table_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TableModelArchive::set_table_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.table_id)
}
inline std::string* TableModelArchive::mutable_table_id() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.table_id)
  return _internal_mutable_table_id();
}
inline const std::string& TableModelArchive::_internal_table_id() const {
  return table_id_.Get();
}
inline void TableModelArchive::_internal_set_table_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TableModelArchive::_internal_mutable_table_id() {
  _has_bits_[0] |= 0x00000001u;
  return table_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableModelArchive::release_table_id() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.table_id)
  if (!_internal_has_table_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return table_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableModelArchive::set_allocated_table_id(std::string* table_id) {
  if (table_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.table_id)
}

// optional string from_table_id = 43;
inline bool TableModelArchive::_internal_has_from_table_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TableModelArchive::has_from_table_id() const {
  return _internal_has_from_table_id();
}
inline void TableModelArchive::clear_from_table_id() {
  from_table_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TableModelArchive::from_table_id() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.from_table_id)
  return _internal_from_table_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TableModelArchive::set_from_table_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 from_table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.from_table_id)
}
inline std::string* TableModelArchive::mutable_from_table_id() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.from_table_id)
  return _internal_mutable_from_table_id();
}
inline const std::string& TableModelArchive::_internal_from_table_id() const {
  return from_table_id_.Get();
}
inline void TableModelArchive::_internal_set_from_table_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  from_table_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TableModelArchive::_internal_mutable_from_table_id() {
  _has_bits_[0] |= 0x00000004u;
  return from_table_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableModelArchive::release_from_table_id() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.from_table_id)
  if (!_internal_has_from_table_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return from_table_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableModelArchive::set_allocated_from_table_id(std::string* from_table_id) {
  if (from_table_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  from_table_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_table_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.from_table_id)
}

// optional bool was_cut = 50;
inline bool TableModelArchive::_internal_has_was_cut() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool TableModelArchive::has_was_cut() const {
  return _internal_has_was_cut();
}
inline void TableModelArchive::clear_was_cut() {
  was_cut_ = false;
  _has_bits_[2] &= ~0x00000008u;
}
inline bool TableModelArchive::_internal_was_cut() const {
  return was_cut_;
}
inline bool TableModelArchive::was_cut() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.was_cut)
  return _internal_was_cut();
}
inline void TableModelArchive::_internal_set_was_cut(bool value) {
  _has_bits_[2] |= 0x00000008u;
  was_cut_ = value;
}
inline void TableModelArchive::set_was_cut(bool value) {
  _internal_set_was_cut(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.was_cut)
}

// required .TSP.Reference table_style = 3;
inline bool TableModelArchive::_internal_has_table_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || table_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_table_style() const {
  return _internal_has_table_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_table_style() const {
  const ::TSP::Reference* p = table_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::table_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_style)
  return _internal_table_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_table_style(
    ::TSP::Reference* table_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_);
  }
  table_style_ = table_style;
  if (table_style) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.table_style)
}
inline ::TSP::Reference* TableModelArchive::release_table_style() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = table_style_;
  table_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_table_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.table_style)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = table_style_;
  table_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_table_style() {
  _has_bits_[0] |= 0x00000010u;
  if (table_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_style_ = p;
  }
  return table_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_table_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.table_style)
  return _internal_mutable_table_style();
}
inline void TableModelArchive::set_allocated_table_style(::TSP::Reference* table_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_);
  }
  if (table_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style)->GetArena();
    if (message_arena != submessage_arena) {
      table_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  table_style_ = table_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.table_style)
}

// required .TSP.Reference body_text_style = 24;
inline bool TableModelArchive::_internal_has_body_text_style() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || body_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_body_text_style() const {
  return _internal_has_body_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_body_text_style() const {
  const ::TSP::Reference* p = body_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::body_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.body_text_style)
  return _internal_body_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_body_text_style(
    ::TSP::Reference* body_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_text_style_);
  }
  body_text_style_ = body_text_style;
  if (body_text_style) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.body_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_body_text_style() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = body_text_style_;
  body_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_body_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.body_text_style)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = body_text_style_;
  body_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_body_text_style() {
  _has_bits_[0] |= 0x00001000u;
  if (body_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    body_text_style_ = p;
  }
  return body_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_body_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.body_text_style)
  return _internal_mutable_body_text_style();
}
inline void TableModelArchive::set_allocated_body_text_style(::TSP::Reference* body_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_text_style_);
  }
  if (body_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      body_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  body_text_style_ = body_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.body_text_style)
}

// required .TSP.Reference header_row_text_style = 25;
inline bool TableModelArchive::_internal_has_header_row_text_style() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || header_row_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_header_row_text_style() const {
  return _internal_has_header_row_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_header_row_text_style() const {
  const ::TSP::Reference* p = header_row_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::header_row_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.header_row_text_style)
  return _internal_header_row_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_header_row_text_style(
    ::TSP::Reference* header_row_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_text_style_);
  }
  header_row_text_style_ = header_row_text_style;
  if (header_row_text_style) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.header_row_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_header_row_text_style() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = header_row_text_style_;
  header_row_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_header_row_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.header_row_text_style)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = header_row_text_style_;
  header_row_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_header_row_text_style() {
  _has_bits_[0] |= 0x00002000u;
  if (header_row_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_row_text_style_ = p;
  }
  return header_row_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_header_row_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.header_row_text_style)
  return _internal_mutable_header_row_text_style();
}
inline void TableModelArchive::set_allocated_header_row_text_style(::TSP::Reference* header_row_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_text_style_);
  }
  if (header_row_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  header_row_text_style_ = header_row_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.header_row_text_style)
}

// required .TSP.Reference header_column_text_style = 26;
inline bool TableModelArchive::_internal_has_header_column_text_style() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || header_column_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_header_column_text_style() const {
  return _internal_has_header_column_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_header_column_text_style() const {
  const ::TSP::Reference* p = header_column_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::header_column_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.header_column_text_style)
  return _internal_header_column_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_header_column_text_style(
    ::TSP::Reference* header_column_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_text_style_);
  }
  header_column_text_style_ = header_column_text_style;
  if (header_column_text_style) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.header_column_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_header_column_text_style() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::Reference* temp = header_column_text_style_;
  header_column_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_header_column_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.header_column_text_style)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::Reference* temp = header_column_text_style_;
  header_column_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_header_column_text_style() {
  _has_bits_[0] |= 0x00004000u;
  if (header_column_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_column_text_style_ = p;
  }
  return header_column_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_header_column_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.header_column_text_style)
  return _internal_mutable_header_column_text_style();
}
inline void TableModelArchive::set_allocated_header_column_text_style(::TSP::Reference* header_column_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_text_style_);
  }
  if (header_column_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  header_column_text_style_ = header_column_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.header_column_text_style)
}

// required .TSP.Reference footer_row_text_style = 27;
inline bool TableModelArchive::_internal_has_footer_row_text_style() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_footer_row_text_style() const {
  return _internal_has_footer_row_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_footer_row_text_style() const {
  const ::TSP::Reference* p = footer_row_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::footer_row_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.footer_row_text_style)
  return _internal_footer_row_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_footer_row_text_style(
    ::TSP::Reference* footer_row_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_text_style_);
  }
  footer_row_text_style_ = footer_row_text_style;
  if (footer_row_text_style) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.footer_row_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_footer_row_text_style() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = footer_row_text_style_;
  footer_row_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_footer_row_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.footer_row_text_style)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::Reference* temp = footer_row_text_style_;
  footer_row_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_footer_row_text_style() {
  _has_bits_[0] |= 0x00008000u;
  if (footer_row_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    footer_row_text_style_ = p;
  }
  return footer_row_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_footer_row_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.footer_row_text_style)
  return _internal_mutable_footer_row_text_style();
}
inline void TableModelArchive::set_allocated_footer_row_text_style(::TSP::Reference* footer_row_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_text_style_);
  }
  if (footer_row_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  footer_row_text_style_ = footer_row_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.footer_row_text_style)
}

// required .TSP.Reference body_cell_style = 18;
inline bool TableModelArchive::_internal_has_body_cell_style() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || body_cell_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_body_cell_style() const {
  return _internal_has_body_cell_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_body_cell_style() const {
  const ::TSP::Reference* p = body_cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::body_cell_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.body_cell_style)
  return _internal_body_cell_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_body_cell_style(
    ::TSP::Reference* body_cell_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_cell_style_);
  }
  body_cell_style_ = body_cell_style;
  if (body_cell_style) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.body_cell_style)
}
inline ::TSP::Reference* TableModelArchive::release_body_cell_style() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = body_cell_style_;
  body_cell_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_body_cell_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.body_cell_style)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = body_cell_style_;
  body_cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_body_cell_style() {
  _has_bits_[0] |= 0x00000080u;
  if (body_cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    body_cell_style_ = p;
  }
  return body_cell_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_body_cell_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.body_cell_style)
  return _internal_mutable_body_cell_style();
}
inline void TableModelArchive::set_allocated_body_cell_style(::TSP::Reference* body_cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_cell_style_);
  }
  if (body_cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_cell_style)->GetArena();
    if (message_arena != submessage_arena) {
      body_cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body_cell_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  body_cell_style_ = body_cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.body_cell_style)
}

// required .TSP.Reference header_row_style = 19;
inline bool TableModelArchive::_internal_has_header_row_style() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || header_row_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_header_row_style() const {
  return _internal_has_header_row_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_header_row_style() const {
  const ::TSP::Reference* p = header_row_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::header_row_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.header_row_style)
  return _internal_header_row_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_header_row_style(
    ::TSP::Reference* header_row_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_style_);
  }
  header_row_style_ = header_row_style;
  if (header_row_style) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.header_row_style)
}
inline ::TSP::Reference* TableModelArchive::release_header_row_style() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = header_row_style_;
  header_row_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_header_row_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.header_row_style)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = header_row_style_;
  header_row_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_header_row_style() {
  _has_bits_[0] |= 0x00000100u;
  if (header_row_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_row_style_ = p;
  }
  return header_row_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_header_row_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.header_row_style)
  return _internal_mutable_header_row_style();
}
inline void TableModelArchive::set_allocated_header_row_style(::TSP::Reference* header_row_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_style_);
  }
  if (header_row_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_row_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_row_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_row_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  header_row_style_ = header_row_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.header_row_style)
}

// required .TSP.Reference header_column_style = 20;
inline bool TableModelArchive::_internal_has_header_column_style() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || header_column_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_header_column_style() const {
  return _internal_has_header_column_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_header_column_style() const {
  const ::TSP::Reference* p = header_column_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::header_column_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.header_column_style)
  return _internal_header_column_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_header_column_style(
    ::TSP::Reference* header_column_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_style_);
  }
  header_column_style_ = header_column_style;
  if (header_column_style) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.header_column_style)
}
inline ::TSP::Reference* TableModelArchive::release_header_column_style() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = header_column_style_;
  header_column_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_header_column_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.header_column_style)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = header_column_style_;
  header_column_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_header_column_style() {
  _has_bits_[0] |= 0x00000200u;
  if (header_column_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    header_column_style_ = p;
  }
  return header_column_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_header_column_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.header_column_style)
  return _internal_mutable_header_column_style();
}
inline void TableModelArchive::set_allocated_header_column_style(::TSP::Reference* header_column_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_style_);
  }
  if (header_column_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_column_style)->GetArena();
    if (message_arena != submessage_arena) {
      header_column_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_column_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  header_column_style_ = header_column_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.header_column_style)
}

// required .TSP.Reference footer_row_style = 21;
inline bool TableModelArchive::_internal_has_footer_row_style() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || footer_row_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_footer_row_style() const {
  return _internal_has_footer_row_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_footer_row_style() const {
  const ::TSP::Reference* p = footer_row_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::footer_row_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.footer_row_style)
  return _internal_footer_row_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_footer_row_style(
    ::TSP::Reference* footer_row_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_style_);
  }
  footer_row_style_ = footer_row_style;
  if (footer_row_style) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.footer_row_style)
}
inline ::TSP::Reference* TableModelArchive::release_footer_row_style() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = footer_row_style_;
  footer_row_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_footer_row_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.footer_row_style)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = footer_row_style_;
  footer_row_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_footer_row_style() {
  _has_bits_[0] |= 0x00000400u;
  if (footer_row_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    footer_row_style_ = p;
  }
  return footer_row_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_footer_row_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.footer_row_style)
  return _internal_mutable_footer_row_style();
}
inline void TableModelArchive::set_allocated_footer_row_style(::TSP::Reference* footer_row_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_style_);
  }
  if (footer_row_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_row_style)->GetArena();
    if (message_arena != submessage_arena) {
      footer_row_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer_row_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  footer_row_style_ = footer_row_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.footer_row_style)
}

// optional .TSP.Reference table_name_style = 30;
inline bool TableModelArchive::_internal_has_table_name_style() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || table_name_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_table_name_style() const {
  return _internal_has_table_name_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_table_name_style() const {
  const ::TSP::Reference* p = table_name_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::table_name_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_name_style)
  return _internal_table_name_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_table_name_style(
    ::TSP::Reference* table_name_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_style_);
  }
  table_name_style_ = table_name_style;
  if (table_name_style) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.table_name_style)
}
inline ::TSP::Reference* TableModelArchive::release_table_name_style() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = table_name_style_;
  table_name_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_table_name_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.table_name_style)
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::Reference* temp = table_name_style_;
  table_name_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_table_name_style() {
  _has_bits_[0] |= 0x00010000u;
  if (table_name_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_name_style_ = p;
  }
  return table_name_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_table_name_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.table_name_style)
  return _internal_mutable_table_name_style();
}
inline void TableModelArchive::set_allocated_table_name_style(::TSP::Reference* table_name_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_style_);
  }
  if (table_name_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_style)->GetArena();
    if (message_arena != submessage_arena) {
      table_name_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_name_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  table_name_style_ = table_name_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.table_name_style)
}

// optional .TSP.Reference table_name_shape_style = 36;
inline bool TableModelArchive::_internal_has_table_name_shape_style() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || table_name_shape_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_table_name_shape_style() const {
  return _internal_has_table_name_shape_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_table_name_shape_style() const {
  const ::TSP::Reference* p = table_name_shape_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::table_name_shape_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_name_shape_style)
  return _internal_table_name_shape_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_table_name_shape_style(
    ::TSP::Reference* table_name_shape_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_shape_style_);
  }
  table_name_shape_style_ = table_name_shape_style;
  if (table_name_shape_style) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.table_name_shape_style)
}
inline ::TSP::Reference* TableModelArchive::release_table_name_shape_style() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = table_name_shape_style_;
  table_name_shape_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_table_name_shape_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.table_name_shape_style)
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::Reference* temp = table_name_shape_style_;
  table_name_shape_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_table_name_shape_style() {
  _has_bits_[0] |= 0x00080000u;
  if (table_name_shape_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_name_shape_style_ = p;
  }
  return table_name_shape_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_table_name_shape_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.table_name_shape_style)
  return _internal_mutable_table_name_shape_style();
}
inline void TableModelArchive::set_allocated_table_name_shape_style(::TSP::Reference* table_name_shape_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_shape_style_);
  }
  if (table_name_shape_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_name_shape_style)->GetArena();
    if (message_arena != submessage_arena) {
      table_name_shape_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_name_shape_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  table_name_shape_style_ = table_name_shape_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.table_name_shape_style)
}

// optional .TSP.Reference table_style_preset = 48;
inline bool TableModelArchive::_internal_has_table_style_preset() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || table_style_preset_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_table_style_preset() const {
  return _internal_has_table_style_preset();
}
inline const ::TSP::Reference& TableModelArchive::_internal_table_style_preset() const {
  const ::TSP::Reference* p = table_style_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::table_style_preset() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_style_preset)
  return _internal_table_style_preset();
}
inline void TableModelArchive::unsafe_arena_set_allocated_table_style_preset(
    ::TSP::Reference* table_style_preset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_preset_);
  }
  table_style_preset_ = table_style_preset;
  if (table_style_preset) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.table_style_preset)
}
inline ::TSP::Reference* TableModelArchive::release_table_style_preset() {
  _has_bits_[0] &= ~0x04000000u;
  ::TSP::Reference* temp = table_style_preset_;
  table_style_preset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_table_style_preset() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.table_style_preset)
  _has_bits_[0] &= ~0x04000000u;
  ::TSP::Reference* temp = table_style_preset_;
  table_style_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_table_style_preset() {
  _has_bits_[0] |= 0x04000000u;
  if (table_style_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_style_preset_ = p;
  }
  return table_style_preset_;
}
inline ::TSP::Reference* TableModelArchive::mutable_table_style_preset() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.table_style_preset)
  return _internal_mutable_table_style_preset();
}
inline void TableModelArchive::set_allocated_table_style_preset(::TSP::Reference* table_style_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_preset_);
  }
  if (table_style_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_preset)->GetArena();
    if (message_arena != submessage_arena) {
      table_style_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_style_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  table_style_preset_ = table_style_preset;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.table_style_preset)
}

// optional uint32 preset_index = 28;
inline bool TableModelArchive::_internal_has_preset_index() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool TableModelArchive::has_preset_index() const {
  return _internal_has_preset_index();
}
inline void TableModelArchive::clear_preset_index() {
  preset_index_ = 0u;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_preset_index() const {
  return preset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::preset_index() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.preset_index)
  return _internal_preset_index();
}
inline void TableModelArchive::_internal_set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000004u;
  preset_index_ = value;
}
inline void TableModelArchive::set_preset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preset_index(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.preset_index)
}

// required .TST.DataStore base_data_store = 4;
inline bool TableModelArchive::_internal_has_base_data_store() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || base_data_store_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_base_data_store() const {
  return _internal_has_base_data_store();
}
inline void TableModelArchive::clear_base_data_store() {
  if (base_data_store_ != nullptr) base_data_store_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TST::DataStore& TableModelArchive::_internal_base_data_store() const {
  const ::TST::DataStore* p = base_data_store_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::DataStore&>(
      ::TST::_DataStore_default_instance_);
}
inline const ::TST::DataStore& TableModelArchive::base_data_store() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.base_data_store)
  return _internal_base_data_store();
}
inline void TableModelArchive::unsafe_arena_set_allocated_base_data_store(
    ::TST::DataStore* base_data_store) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_data_store_);
  }
  base_data_store_ = base_data_store;
  if (base_data_store) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.base_data_store)
}
inline ::TST::DataStore* TableModelArchive::release_base_data_store() {
  _has_bits_[0] &= ~0x00000020u;
  ::TST::DataStore* temp = base_data_store_;
  base_data_store_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::DataStore* TableModelArchive::unsafe_arena_release_base_data_store() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.base_data_store)
  _has_bits_[0] &= ~0x00000020u;
  ::TST::DataStore* temp = base_data_store_;
  base_data_store_ = nullptr;
  return temp;
}
inline ::TST::DataStore* TableModelArchive::_internal_mutable_base_data_store() {
  _has_bits_[0] |= 0x00000020u;
  if (base_data_store_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::DataStore>(GetArena());
    base_data_store_ = p;
  }
  return base_data_store_;
}
inline ::TST::DataStore* TableModelArchive::mutable_base_data_store() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.base_data_store)
  return _internal_mutable_base_data_store();
}
inline void TableModelArchive::set_allocated_base_data_store(::TST::DataStore* base_data_store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_data_store_;
  }
  if (base_data_store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_data_store);
    if (message_arena != submessage_arena) {
      base_data_store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_data_store, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  base_data_store_ = base_data_store;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.base_data_store)
}

// optional .TSP.Reference provider = 5;
inline bool TableModelArchive::_internal_has_provider() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || provider_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_provider() const {
  return _internal_has_provider();
}
inline const ::TSP::Reference& TableModelArchive::_internal_provider() const {
  const ::TSP::Reference* p = provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::provider() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.provider)
  return _internal_provider();
}
inline void TableModelArchive::unsafe_arena_set_allocated_provider(
    ::TSP::Reference* provider) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  provider_ = provider;
  if (provider) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.provider)
}
inline ::TSP::Reference* TableModelArchive::release_provider() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = provider_;
  provider_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.provider)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_provider() {
  _has_bits_[0] |= 0x00000040u;
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    provider_ = p;
  }
  return provider_;
}
inline ::TSP::Reference* TableModelArchive::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.provider)
  return _internal_mutable_provider();
}
inline void TableModelArchive::set_allocated_provider(::TSP::Reference* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider)->GetArena();
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.provider)
}

// required uint32 number_of_rows = 6;
inline bool TableModelArchive::_internal_has_number_of_rows() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_rows() const {
  return _internal_has_number_of_rows();
}
inline void TableModelArchive::clear_number_of_rows() {
  number_of_rows_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_rows() const {
  return number_of_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_rows)
  return _internal_number_of_rows();
}
inline void TableModelArchive::_internal_set_number_of_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00200000u;
  number_of_rows_ = value;
}
inline void TableModelArchive::set_number_of_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_rows)
}

// required uint32 number_of_columns = 7;
inline bool TableModelArchive::_internal_has_number_of_columns() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_columns() const {
  return _internal_has_number_of_columns();
}
inline void TableModelArchive::clear_number_of_columns() {
  number_of_columns_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_columns() const {
  return number_of_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_columns() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_columns)
  return _internal_number_of_columns();
}
inline void TableModelArchive::_internal_set_number_of_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  number_of_columns_ = value;
}
inline void TableModelArchive::set_number_of_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_columns(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_columns)
}

// required string table_name = 8;
inline bool TableModelArchive::_internal_has_table_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TableModelArchive::has_table_name() const {
  return _internal_has_table_name();
}
inline void TableModelArchive::clear_table_name() {
  table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TableModelArchive::table_name() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TableModelArchive::set_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.table_name)
}
inline std::string* TableModelArchive::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& TableModelArchive::_internal_table_name() const {
  return table_name_.Get();
}
inline void TableModelArchive::_internal_set_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TableModelArchive::_internal_mutable_table_name() {
  _has_bits_[0] |= 0x00000002u;
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableModelArchive::release_table_name() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.table_name)
  if (!_internal_has_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableModelArchive::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.table_name)
}

// optional bool table_name_enabled = 22;
inline bool TableModelArchive::_internal_has_table_name_enabled() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool TableModelArchive::has_table_name_enabled() const {
  return _internal_has_table_name_enabled();
}
inline void TableModelArchive::clear_table_name_enabled() {
  table_name_enabled_ = false;
  _has_bits_[2] &= ~0x00000010u;
}
inline bool TableModelArchive::_internal_table_name_enabled() const {
  return table_name_enabled_;
}
inline bool TableModelArchive::table_name_enabled() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_name_enabled)
  return _internal_table_name_enabled();
}
inline void TableModelArchive::_internal_set_table_name_enabled(bool value) {
  _has_bits_[2] |= 0x00000010u;
  table_name_enabled_ = value;
}
inline void TableModelArchive::set_table_name_enabled(bool value) {
  _internal_set_table_name_enabled(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.table_name_enabled)
}

// optional double table_name_height = 33;
inline bool TableModelArchive::_internal_has_table_name_height() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool TableModelArchive::has_table_name_height() const {
  return _internal_has_table_name_height();
}
inline void TableModelArchive::clear_table_name_height() {
  table_name_height_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline double TableModelArchive::_internal_table_name_height() const {
  return table_name_height_;
}
inline double TableModelArchive::table_name_height() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_name_height)
  return _internal_table_name_height();
}
inline void TableModelArchive::_internal_set_table_name_height(double value) {
  _has_bits_[2] |= 0x00000080u;
  table_name_height_ = value;
}
inline void TableModelArchive::set_table_name_height(double value) {
  _internal_set_table_name_height(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.table_name_height)
}

// optional bool table_name_border_enabled = 37;
inline bool TableModelArchive::_internal_has_table_name_border_enabled() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool TableModelArchive::has_table_name_border_enabled() const {
  return _internal_has_table_name_border_enabled();
}
inline void TableModelArchive::clear_table_name_border_enabled() {
  table_name_border_enabled_ = false;
  _has_bits_[2] &= ~0x00000020u;
}
inline bool TableModelArchive::_internal_table_name_border_enabled() const {
  return table_name_border_enabled_;
}
inline bool TableModelArchive::table_name_border_enabled() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.table_name_border_enabled)
  return _internal_table_name_border_enabled();
}
inline void TableModelArchive::_internal_set_table_name_border_enabled(bool value) {
  _has_bits_[2] |= 0x00000020u;
  table_name_border_enabled_ = value;
}
inline void TableModelArchive::set_table_name_border_enabled(bool value) {
  _internal_set_table_name_border_enabled(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.table_name_border_enabled)
}

// optional uint32 number_of_header_rows = 9;
inline bool TableModelArchive::_internal_has_number_of_header_rows() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_header_rows() const {
  return _internal_has_number_of_header_rows();
}
inline void TableModelArchive::clear_number_of_header_rows() {
  number_of_header_rows_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_header_rows() const {
  return number_of_header_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_header_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_header_rows)
  return _internal_number_of_header_rows();
}
inline void TableModelArchive::_internal_set_number_of_header_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  number_of_header_rows_ = value;
}
inline void TableModelArchive::set_number_of_header_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_header_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_header_rows)
}

// optional uint32 number_of_header_columns = 10;
inline bool TableModelArchive::_internal_has_number_of_header_columns() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_header_columns() const {
  return _internal_has_number_of_header_columns();
}
inline void TableModelArchive::clear_number_of_header_columns() {
  number_of_header_columns_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_header_columns() const {
  return number_of_header_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_header_columns() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_header_columns)
  return _internal_number_of_header_columns();
}
inline void TableModelArchive::_internal_set_number_of_header_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  number_of_header_columns_ = value;
}
inline void TableModelArchive::set_number_of_header_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_header_columns(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_header_columns)
}

// optional uint32 number_of_footer_rows = 11;
inline bool TableModelArchive::_internal_has_number_of_footer_rows() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_footer_rows() const {
  return _internal_has_number_of_footer_rows();
}
inline void TableModelArchive::clear_number_of_footer_rows() {
  number_of_footer_rows_ = 0u;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_footer_rows() const {
  return number_of_footer_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_footer_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_footer_rows)
  return _internal_number_of_footer_rows();
}
inline void TableModelArchive::_internal_set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x02000000u;
  number_of_footer_rows_ = value;
}
inline void TableModelArchive::set_number_of_footer_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_footer_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_footer_rows)
}

// optional bool header_rows_frozen = 12;
inline bool TableModelArchive::_internal_has_header_rows_frozen() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool TableModelArchive::has_header_rows_frozen() const {
  return _internal_has_header_rows_frozen();
}
inline void TableModelArchive::clear_header_rows_frozen() {
  header_rows_frozen_ = false;
  _has_bits_[2] &= ~0x00000040u;
}
inline bool TableModelArchive::_internal_header_rows_frozen() const {
  return header_rows_frozen_;
}
inline bool TableModelArchive::header_rows_frozen() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.header_rows_frozen)
  return _internal_header_rows_frozen();
}
inline void TableModelArchive::_internal_set_header_rows_frozen(bool value) {
  _has_bits_[2] |= 0x00000040u;
  header_rows_frozen_ = value;
}
inline void TableModelArchive::set_header_rows_frozen(bool value) {
  _internal_set_header_rows_frozen(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.header_rows_frozen)
}

// optional bool header_columns_frozen = 13;
inline bool TableModelArchive::_internal_has_header_columns_frozen() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_header_columns_frozen() const {
  return _internal_has_header_columns_frozen();
}
inline void TableModelArchive::clear_header_columns_frozen() {
  header_columns_frozen_ = false;
  _has_bits_[1] &= ~0x40000000u;
}
inline bool TableModelArchive::_internal_header_columns_frozen() const {
  return header_columns_frozen_;
}
inline bool TableModelArchive::header_columns_frozen() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.header_columns_frozen)
  return _internal_header_columns_frozen();
}
inline void TableModelArchive::_internal_set_header_columns_frozen(bool value) {
  _has_bits_[1] |= 0x40000000u;
  header_columns_frozen_ = value;
}
inline void TableModelArchive::set_header_columns_frozen(bool value) {
  _internal_set_header_columns_frozen(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.header_columns_frozen)
}

// optional uint32 number_of_hidden_rows = 14;
inline bool TableModelArchive::_internal_has_number_of_hidden_rows() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_hidden_rows() const {
  return _internal_has_number_of_hidden_rows();
}
inline void TableModelArchive::clear_number_of_hidden_rows() {
  number_of_hidden_rows_ = 0u;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_hidden_rows() const {
  return number_of_hidden_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_hidden_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_hidden_rows)
  return _internal_number_of_hidden_rows();
}
inline void TableModelArchive::_internal_set_number_of_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x04000000u;
  number_of_hidden_rows_ = value;
}
inline void TableModelArchive::set_number_of_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_hidden_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_hidden_rows)
}

// optional uint32 number_of_hidden_columns = 15;
inline bool TableModelArchive::_internal_has_number_of_hidden_columns() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_hidden_columns() const {
  return _internal_has_number_of_hidden_columns();
}
inline void TableModelArchive::clear_number_of_hidden_columns() {
  number_of_hidden_columns_ = 0u;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_hidden_columns() const {
  return number_of_hidden_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_hidden_columns() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_hidden_columns)
  return _internal_number_of_hidden_columns();
}
inline void TableModelArchive::_internal_set_number_of_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x20000000u;
  number_of_hidden_columns_ = value;
}
inline void TableModelArchive::set_number_of_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_hidden_columns(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_hidden_columns)
}

// optional uint32 number_of_user_hidden_rows = 41;
inline bool TableModelArchive::_internal_has_number_of_user_hidden_rows() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_user_hidden_rows() const {
  return _internal_has_number_of_user_hidden_rows();
}
inline void TableModelArchive::clear_number_of_user_hidden_rows() {
  number_of_user_hidden_rows_ = 0u;
  _has_bits_[2] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_user_hidden_rows() const {
  return number_of_user_hidden_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_user_hidden_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_user_hidden_rows)
  return _internal_number_of_user_hidden_rows();
}
inline void TableModelArchive::_internal_set_number_of_user_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000200u;
  number_of_user_hidden_rows_ = value;
}
inline void TableModelArchive::set_number_of_user_hidden_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_user_hidden_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_user_hidden_rows)
}

// optional uint32 number_of_user_hidden_columns = 42;
inline bool TableModelArchive::_internal_has_number_of_user_hidden_columns() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_user_hidden_columns() const {
  return _internal_has_number_of_user_hidden_columns();
}
inline void TableModelArchive::clear_number_of_user_hidden_columns() {
  number_of_user_hidden_columns_ = 0u;
  _has_bits_[2] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_user_hidden_columns() const {
  return number_of_user_hidden_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_user_hidden_columns() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_user_hidden_columns)
  return _internal_number_of_user_hidden_columns();
}
inline void TableModelArchive::_internal_set_number_of_user_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000400u;
  number_of_user_hidden_columns_ = value;
}
inline void TableModelArchive::set_number_of_user_hidden_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_user_hidden_columns(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_user_hidden_columns)
}

// optional uint32 number_of_filtered_rows = 40;
inline bool TableModelArchive::_internal_has_number_of_filtered_rows() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool TableModelArchive::has_number_of_filtered_rows() const {
  return _internal_has_number_of_filtered_rows();
}
inline void TableModelArchive::clear_number_of_filtered_rows() {
  number_of_filtered_rows_ = 0u;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::_internal_number_of_filtered_rows() const {
  return number_of_filtered_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableModelArchive::number_of_filtered_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.number_of_filtered_rows)
  return _internal_number_of_filtered_rows();
}
inline void TableModelArchive::_internal_set_number_of_filtered_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000100u;
  number_of_filtered_rows_ = value;
}
inline void TableModelArchive::set_number_of_filtered_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_filtered_rows(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.number_of_filtered_rows)
}

// required double default_row_height = 16;
inline bool TableModelArchive::_internal_has_default_row_height() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_default_row_height() const {
  return _internal_has_default_row_height();
}
inline void TableModelArchive::clear_default_row_height() {
  default_row_height_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline double TableModelArchive::_internal_default_row_height() const {
  return default_row_height_;
}
inline double TableModelArchive::default_row_height() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.default_row_height)
  return _internal_default_row_height();
}
inline void TableModelArchive::_internal_set_default_row_height(double value) {
  _has_bits_[1] |= 0x08000000u;
  default_row_height_ = value;
}
inline void TableModelArchive::set_default_row_height(double value) {
  _internal_set_default_row_height(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.default_row_height)
}

// required double default_column_width = 17;
inline bool TableModelArchive::_internal_has_default_column_width() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_default_column_width() const {
  return _internal_has_default_column_width();
}
inline void TableModelArchive::clear_default_column_width() {
  default_column_width_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline double TableModelArchive::_internal_default_column_width() const {
  return default_column_width_;
}
inline double TableModelArchive::default_column_width() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.default_column_width)
  return _internal_default_column_width();
}
inline void TableModelArchive::_internal_set_default_column_width(double value) {
  _has_bits_[1] |= 0x10000000u;
  default_column_width_ = value;
}
inline void TableModelArchive::set_default_column_width(double value) {
  _internal_set_default_column_width(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.default_column_width)
}

// optional .TST.CellID origin_offset = 23 [deprecated = true];
inline bool TableModelArchive::_internal_has_origin_offset() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || origin_offset_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_origin_offset() const {
  return _internal_has_origin_offset();
}
inline void TableModelArchive::clear_origin_offset() {
  if (origin_offset_ != nullptr) origin_offset_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TST::CellID& TableModelArchive::_internal_origin_offset() const {
  const ::TST::CellID* p = origin_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& TableModelArchive::origin_offset() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.origin_offset)
  return _internal_origin_offset();
}
inline void TableModelArchive::unsafe_arena_set_allocated_origin_offset(
    ::TST::CellID* origin_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_offset_);
  }
  origin_offset_ = origin_offset;
  if (origin_offset) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.origin_offset)
}
inline ::TST::CellID* TableModelArchive::release_origin_offset() {
  _has_bits_[0] &= ~0x00000800u;
  ::TST::CellID* temp = origin_offset_;
  origin_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* TableModelArchive::unsafe_arena_release_origin_offset() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.origin_offset)
  _has_bits_[0] &= ~0x00000800u;
  ::TST::CellID* temp = origin_offset_;
  origin_offset_ = nullptr;
  return temp;
}
inline ::TST::CellID* TableModelArchive::_internal_mutable_origin_offset() {
  _has_bits_[0] |= 0x00000800u;
  if (origin_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    origin_offset_ = p;
  }
  return origin_offset_;
}
inline ::TST::CellID* TableModelArchive::mutable_origin_offset() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.origin_offset)
  return _internal_mutable_origin_offset();
}
inline void TableModelArchive::set_allocated_origin_offset(::TST::CellID* origin_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_offset_;
  }
  if (origin_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin_offset);
    if (message_arena != submessage_arena) {
      origin_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  origin_offset_ = origin_offset;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.origin_offset)
}

// optional bool repeating_header_rows_enabled = 29;
inline bool TableModelArchive::_internal_has_repeating_header_rows_enabled() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool TableModelArchive::has_repeating_header_rows_enabled() const {
  return _internal_has_repeating_header_rows_enabled();
}
inline void TableModelArchive::clear_repeating_header_rows_enabled() {
  repeating_header_rows_enabled_ = false;
  _has_bits_[1] &= ~0x80000000u;
}
inline bool TableModelArchive::_internal_repeating_header_rows_enabled() const {
  return repeating_header_rows_enabled_;
}
inline bool TableModelArchive::repeating_header_rows_enabled() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.repeating_header_rows_enabled)
  return _internal_repeating_header_rows_enabled();
}
inline void TableModelArchive::_internal_set_repeating_header_rows_enabled(bool value) {
  _has_bits_[1] |= 0x80000000u;
  repeating_header_rows_enabled_ = value;
}
inline void TableModelArchive::set_repeating_header_rows_enabled(bool value) {
  _internal_set_repeating_header_rows_enabled(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.repeating_header_rows_enabled)
}

// optional bool repeating_header_columns_enabled = 32;
inline bool TableModelArchive::_internal_has_repeating_header_columns_enabled() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool TableModelArchive::has_repeating_header_columns_enabled() const {
  return _internal_has_repeating_header_columns_enabled();
}
inline void TableModelArchive::clear_repeating_header_columns_enabled() {
  repeating_header_columns_enabled_ = false;
  _has_bits_[2] &= ~0x00000001u;
}
inline bool TableModelArchive::_internal_repeating_header_columns_enabled() const {
  return repeating_header_columns_enabled_;
}
inline bool TableModelArchive::repeating_header_columns_enabled() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.repeating_header_columns_enabled)
  return _internal_repeating_header_columns_enabled();
}
inline void TableModelArchive::_internal_set_repeating_header_columns_enabled(bool value) {
  _has_bits_[2] |= 0x00000001u;
  repeating_header_columns_enabled_ = value;
}
inline void TableModelArchive::set_repeating_header_columns_enabled(bool value) {
  _internal_set_repeating_header_columns_enabled(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.repeating_header_columns_enabled)
}

// optional bool style_apply_clears_all = 31;
inline bool TableModelArchive::_internal_has_style_apply_clears_all() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool TableModelArchive::has_style_apply_clears_all() const {
  return _internal_has_style_apply_clears_all();
}
inline void TableModelArchive::clear_style_apply_clears_all() {
  style_apply_clears_all_ = false;
  _has_bits_[2] &= ~0x00000002u;
}
inline bool TableModelArchive::_internal_style_apply_clears_all() const {
  return style_apply_clears_all_;
}
inline bool TableModelArchive::style_apply_clears_all() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.style_apply_clears_all)
  return _internal_style_apply_clears_all();
}
inline void TableModelArchive::_internal_set_style_apply_clears_all(bool value) {
  _has_bits_[2] |= 0x00000002u;
  style_apply_clears_all_ = value;
}
inline void TableModelArchive::set_style_apply_clears_all(bool value) {
  _internal_set_style_apply_clears_all(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.style_apply_clears_all)
}

// optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
inline bool TableModelArchive::_internal_has_hidden_state_formula_owner_for_columns() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || hidden_state_formula_owner_for_columns_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_hidden_state_formula_owner_for_columns() const {
  return _internal_has_hidden_state_formula_owner_for_columns();
}
inline const ::TSP::Reference& TableModelArchive::_internal_hidden_state_formula_owner_for_columns() const {
  const ::TSP::Reference* p = hidden_state_formula_owner_for_columns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::hidden_state_formula_owner_for_columns() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.hidden_state_formula_owner_for_columns)
  return _internal_hidden_state_formula_owner_for_columns();
}
inline void TableModelArchive::unsafe_arena_set_allocated_hidden_state_formula_owner_for_columns(
    ::TSP::Reference* hidden_state_formula_owner_for_columns) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_formula_owner_for_columns_);
  }
  hidden_state_formula_owner_for_columns_ = hidden_state_formula_owner_for_columns;
  if (hidden_state_formula_owner_for_columns) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.hidden_state_formula_owner_for_columns)
}
inline ::TSP::Reference* TableModelArchive::release_hidden_state_formula_owner_for_columns() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = hidden_state_formula_owner_for_columns_;
  hidden_state_formula_owner_for_columns_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_hidden_state_formula_owner_for_columns() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.hidden_state_formula_owner_for_columns)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::Reference* temp = hidden_state_formula_owner_for_columns_;
  hidden_state_formula_owner_for_columns_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_hidden_state_formula_owner_for_columns() {
  _has_bits_[0] |= 0x00020000u;
  if (hidden_state_formula_owner_for_columns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    hidden_state_formula_owner_for_columns_ = p;
  }
  return hidden_state_formula_owner_for_columns_;
}
inline ::TSP::Reference* TableModelArchive::mutable_hidden_state_formula_owner_for_columns() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.hidden_state_formula_owner_for_columns)
  return _internal_mutable_hidden_state_formula_owner_for_columns();
}
inline void TableModelArchive::set_allocated_hidden_state_formula_owner_for_columns(::TSP::Reference* hidden_state_formula_owner_for_columns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_formula_owner_for_columns_);
  }
  if (hidden_state_formula_owner_for_columns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_formula_owner_for_columns)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_state_formula_owner_for_columns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_state_formula_owner_for_columns, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  hidden_state_formula_owner_for_columns_ = hidden_state_formula_owner_for_columns;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.hidden_state_formula_owner_for_columns)
}

// optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
inline bool TableModelArchive::_internal_has_hidden_state_formula_owner_for_rows() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || hidden_state_formula_owner_for_rows_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_hidden_state_formula_owner_for_rows() const {
  return _internal_has_hidden_state_formula_owner_for_rows();
}
inline const ::TSP::Reference& TableModelArchive::_internal_hidden_state_formula_owner_for_rows() const {
  const ::TSP::Reference* p = hidden_state_formula_owner_for_rows_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::hidden_state_formula_owner_for_rows() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.hidden_state_formula_owner_for_rows)
  return _internal_hidden_state_formula_owner_for_rows();
}
inline void TableModelArchive::unsafe_arena_set_allocated_hidden_state_formula_owner_for_rows(
    ::TSP::Reference* hidden_state_formula_owner_for_rows) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_formula_owner_for_rows_);
  }
  hidden_state_formula_owner_for_rows_ = hidden_state_formula_owner_for_rows;
  if (hidden_state_formula_owner_for_rows) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.hidden_state_formula_owner_for_rows)
}
inline ::TSP::Reference* TableModelArchive::release_hidden_state_formula_owner_for_rows() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = hidden_state_formula_owner_for_rows_;
  hidden_state_formula_owner_for_rows_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_hidden_state_formula_owner_for_rows() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.hidden_state_formula_owner_for_rows)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::Reference* temp = hidden_state_formula_owner_for_rows_;
  hidden_state_formula_owner_for_rows_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_hidden_state_formula_owner_for_rows() {
  _has_bits_[0] |= 0x00040000u;
  if (hidden_state_formula_owner_for_rows_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    hidden_state_formula_owner_for_rows_ = p;
  }
  return hidden_state_formula_owner_for_rows_;
}
inline ::TSP::Reference* TableModelArchive::mutable_hidden_state_formula_owner_for_rows() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.hidden_state_formula_owner_for_rows)
  return _internal_mutable_hidden_state_formula_owner_for_rows();
}
inline void TableModelArchive::set_allocated_hidden_state_formula_owner_for_rows(::TSP::Reference* hidden_state_formula_owner_for_rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_formula_owner_for_rows_);
  }
  if (hidden_state_formula_owner_for_rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_formula_owner_for_rows)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_state_formula_owner_for_rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_state_formula_owner_for_rows, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  hidden_state_formula_owner_for_rows_ = hidden_state_formula_owner_for_rows;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.hidden_state_formula_owner_for_rows)
}

// optional .TSP.Reference filter_set = 38;
inline bool TableModelArchive::_internal_has_filter_set() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || filter_set_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_filter_set() const {
  return _internal_has_filter_set();
}
inline const ::TSP::Reference& TableModelArchive::_internal_filter_set() const {
  const ::TSP::Reference* p = filter_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::filter_set() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.filter_set)
  return _internal_filter_set();
}
inline void TableModelArchive::unsafe_arena_set_allocated_filter_set(
    ::TSP::Reference* filter_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set_);
  }
  filter_set_ = filter_set;
  if (filter_set) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.filter_set)
}
inline ::TSP::Reference* TableModelArchive::release_filter_set() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSP::Reference* temp = filter_set_;
  filter_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_filter_set() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.filter_set)
  _has_bits_[0] &= ~0x00100000u;
  ::TSP::Reference* temp = filter_set_;
  filter_set_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_filter_set() {
  _has_bits_[0] |= 0x00100000u;
  if (filter_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    filter_set_ = p;
  }
  return filter_set_;
}
inline ::TSP::Reference* TableModelArchive::mutable_filter_set() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.filter_set)
  return _internal_mutable_filter_set();
}
inline void TableModelArchive::set_allocated_filter_set(::TSP::Reference* filter_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set_);
  }
  if (filter_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_set)->GetArena();
    if (message_arena != submessage_arena) {
      filter_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  filter_set_ = filter_set;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.filter_set)
}

// optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
inline bool TableModelArchive::_internal_has_conditional_style_formula_owner_id() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || conditional_style_formula_owner_id_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_conditional_style_formula_owner_id() const {
  return _internal_has_conditional_style_formula_owner_id();
}
inline const ::TSP::CFUUIDArchive& TableModelArchive::_internal_conditional_style_formula_owner_id() const {
  const ::TSP::CFUUIDArchive* p = conditional_style_formula_owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& TableModelArchive::conditional_style_formula_owner_id() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.conditional_style_formula_owner_id)
  return _internal_conditional_style_formula_owner_id();
}
inline void TableModelArchive::unsafe_arena_set_allocated_conditional_style_formula_owner_id(
    ::TSP::CFUUIDArchive* conditional_style_formula_owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_formula_owner_id_);
  }
  conditional_style_formula_owner_id_ = conditional_style_formula_owner_id;
  if (conditional_style_formula_owner_id) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.conditional_style_formula_owner_id)
}
inline ::TSP::CFUUIDArchive* TableModelArchive::release_conditional_style_formula_owner_id() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSP::CFUUIDArchive* temp = conditional_style_formula_owner_id_;
  conditional_style_formula_owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* TableModelArchive::unsafe_arena_release_conditional_style_formula_owner_id() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.conditional_style_formula_owner_id)
  _has_bits_[0] &= ~0x00200000u;
  ::TSP::CFUUIDArchive* temp = conditional_style_formula_owner_id_;
  conditional_style_formula_owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* TableModelArchive::_internal_mutable_conditional_style_formula_owner_id() {
  _has_bits_[0] |= 0x00200000u;
  if (conditional_style_formula_owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    conditional_style_formula_owner_id_ = p;
  }
  return conditional_style_formula_owner_id_;
}
inline ::TSP::CFUUIDArchive* TableModelArchive::mutable_conditional_style_formula_owner_id() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.conditional_style_formula_owner_id)
  return _internal_mutable_conditional_style_formula_owner_id();
}
inline void TableModelArchive::set_allocated_conditional_style_formula_owner_id(::TSP::CFUUIDArchive* conditional_style_formula_owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_formula_owner_id_);
  }
  if (conditional_style_formula_owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_formula_owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      conditional_style_formula_owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style_formula_owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  conditional_style_formula_owner_id_ = conditional_style_formula_owner_id;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.conditional_style_formula_owner_id)
}

// optional .TST.TableSortOrderArchive sort_order = 44;
inline bool TableModelArchive::_internal_has_sort_order() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || sort_order_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_sort_order() const {
  return _internal_has_sort_order();
}
inline void TableModelArchive::clear_sort_order() {
  if (sort_order_ != nullptr) sort_order_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::TST::TableSortOrderArchive& TableModelArchive::_internal_sort_order() const {
  const ::TST::TableSortOrderArchive* p = sort_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableSortOrderArchive&>(
      ::TST::_TableSortOrderArchive_default_instance_);
}
inline const ::TST::TableSortOrderArchive& TableModelArchive::sort_order() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.sort_order)
  return _internal_sort_order();
}
inline void TableModelArchive::unsafe_arena_set_allocated_sort_order(
    ::TST::TableSortOrderArchive* sort_order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_order_);
  }
  sort_order_ = sort_order;
  if (sort_order) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.sort_order)
}
inline ::TST::TableSortOrderArchive* TableModelArchive::release_sort_order() {
  _has_bits_[0] &= ~0x00400000u;
  ::TST::TableSortOrderArchive* temp = sort_order_;
  sort_order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TableSortOrderArchive* TableModelArchive::unsafe_arena_release_sort_order() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.sort_order)
  _has_bits_[0] &= ~0x00400000u;
  ::TST::TableSortOrderArchive* temp = sort_order_;
  sort_order_ = nullptr;
  return temp;
}
inline ::TST::TableSortOrderArchive* TableModelArchive::_internal_mutable_sort_order() {
  _has_bits_[0] |= 0x00400000u;
  if (sort_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableSortOrderArchive>(GetArena());
    sort_order_ = p;
  }
  return sort_order_;
}
inline ::TST::TableSortOrderArchive* TableModelArchive::mutable_sort_order() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.sort_order)
  return _internal_mutable_sort_order();
}
inline void TableModelArchive::set_allocated_sort_order(::TST::TableSortOrderArchive* sort_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sort_order_;
  }
  if (sort_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sort_order);
    if (message_arena != submessage_arena) {
      sort_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_order, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  sort_order_ = sort_order;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.sort_order)
}

// optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
inline bool TableModelArchive::_internal_has_sort_rule_reference_tracker() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || sort_rule_reference_tracker_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_sort_rule_reference_tracker() const {
  return _internal_has_sort_rule_reference_tracker();
}
inline void TableModelArchive::clear_sort_rule_reference_tracker() {
  if (sort_rule_reference_tracker_ != nullptr) sort_rule_reference_tracker_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::TST::SortRuleReferenceTrackerArchive& TableModelArchive::_internal_sort_rule_reference_tracker() const {
  const ::TST::SortRuleReferenceTrackerArchive* p = sort_rule_reference_tracker_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::SortRuleReferenceTrackerArchive&>(
      ::TST::_SortRuleReferenceTrackerArchive_default_instance_);
}
inline const ::TST::SortRuleReferenceTrackerArchive& TableModelArchive::sort_rule_reference_tracker() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.sort_rule_reference_tracker)
  return _internal_sort_rule_reference_tracker();
}
inline void TableModelArchive::unsafe_arena_set_allocated_sort_rule_reference_tracker(
    ::TST::SortRuleReferenceTrackerArchive* sort_rule_reference_tracker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_rule_reference_tracker_);
  }
  sort_rule_reference_tracker_ = sort_rule_reference_tracker;
  if (sort_rule_reference_tracker) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.sort_rule_reference_tracker)
}
inline ::TST::SortRuleReferenceTrackerArchive* TableModelArchive::release_sort_rule_reference_tracker() {
  _has_bits_[0] &= ~0x00800000u;
  ::TST::SortRuleReferenceTrackerArchive* temp = sort_rule_reference_tracker_;
  sort_rule_reference_tracker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::SortRuleReferenceTrackerArchive* TableModelArchive::unsafe_arena_release_sort_rule_reference_tracker() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.sort_rule_reference_tracker)
  _has_bits_[0] &= ~0x00800000u;
  ::TST::SortRuleReferenceTrackerArchive* temp = sort_rule_reference_tracker_;
  sort_rule_reference_tracker_ = nullptr;
  return temp;
}
inline ::TST::SortRuleReferenceTrackerArchive* TableModelArchive::_internal_mutable_sort_rule_reference_tracker() {
  _has_bits_[0] |= 0x00800000u;
  if (sort_rule_reference_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::SortRuleReferenceTrackerArchive>(GetArena());
    sort_rule_reference_tracker_ = p;
  }
  return sort_rule_reference_tracker_;
}
inline ::TST::SortRuleReferenceTrackerArchive* TableModelArchive::mutable_sort_rule_reference_tracker() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.sort_rule_reference_tracker)
  return _internal_mutable_sort_rule_reference_tracker();
}
inline void TableModelArchive::set_allocated_sort_rule_reference_tracker(::TST::SortRuleReferenceTrackerArchive* sort_rule_reference_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sort_rule_reference_tracker_;
  }
  if (sort_rule_reference_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sort_rule_reference_tracker);
    if (message_arena != submessage_arena) {
      sort_rule_reference_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_rule_reference_tracker, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  sort_rule_reference_tracker_ = sort_rule_reference_tracker;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.sort_rule_reference_tracker)
}

// optional .TSP.Reference base_column_row_uids = 46;
inline bool TableModelArchive::_internal_has_base_column_row_uids() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || base_column_row_uids_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_base_column_row_uids() const {
  return _internal_has_base_column_row_uids();
}
inline const ::TSP::Reference& TableModelArchive::_internal_base_column_row_uids() const {
  const ::TSP::Reference* p = base_column_row_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::base_column_row_uids() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.base_column_row_uids)
  return _internal_base_column_row_uids();
}
inline void TableModelArchive::unsafe_arena_set_allocated_base_column_row_uids(
    ::TSP::Reference* base_column_row_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_column_row_uids_);
  }
  base_column_row_uids_ = base_column_row_uids;
  if (base_column_row_uids) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.base_column_row_uids)
}
inline ::TSP::Reference* TableModelArchive::release_base_column_row_uids() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSP::Reference* temp = base_column_row_uids_;
  base_column_row_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_base_column_row_uids() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.base_column_row_uids)
  _has_bits_[0] &= ~0x01000000u;
  ::TSP::Reference* temp = base_column_row_uids_;
  base_column_row_uids_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_base_column_row_uids() {
  _has_bits_[0] |= 0x01000000u;
  if (base_column_row_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    base_column_row_uids_ = p;
  }
  return base_column_row_uids_;
}
inline ::TSP::Reference* TableModelArchive::mutable_base_column_row_uids() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.base_column_row_uids)
  return _internal_mutable_base_column_row_uids();
}
inline void TableModelArchive::set_allocated_base_column_row_uids(::TSP::Reference* base_column_row_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_column_row_uids_);
  }
  if (base_column_row_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_column_row_uids)->GetArena();
    if (message_arena != submessage_arena) {
      base_column_row_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_column_row_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  base_column_row_uids_ = base_column_row_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.base_column_row_uids)
}

// optional .TST.MergeOwnerArchive merge_owner = 47;
inline bool TableModelArchive::_internal_has_merge_owner() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || merge_owner_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_merge_owner() const {
  return _internal_has_merge_owner();
}
inline void TableModelArchive::clear_merge_owner() {
  if (merge_owner_ != nullptr) merge_owner_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::TST::MergeOwnerArchive& TableModelArchive::_internal_merge_owner() const {
  const ::TST::MergeOwnerArchive* p = merge_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::MergeOwnerArchive&>(
      ::TST::_MergeOwnerArchive_default_instance_);
}
inline const ::TST::MergeOwnerArchive& TableModelArchive::merge_owner() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.merge_owner)
  return _internal_merge_owner();
}
inline void TableModelArchive::unsafe_arena_set_allocated_merge_owner(
    ::TST::MergeOwnerArchive* merge_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(merge_owner_);
  }
  merge_owner_ = merge_owner;
  if (merge_owner) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.merge_owner)
}
inline ::TST::MergeOwnerArchive* TableModelArchive::release_merge_owner() {
  _has_bits_[0] &= ~0x02000000u;
  ::TST::MergeOwnerArchive* temp = merge_owner_;
  merge_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::MergeOwnerArchive* TableModelArchive::unsafe_arena_release_merge_owner() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.merge_owner)
  _has_bits_[0] &= ~0x02000000u;
  ::TST::MergeOwnerArchive* temp = merge_owner_;
  merge_owner_ = nullptr;
  return temp;
}
inline ::TST::MergeOwnerArchive* TableModelArchive::_internal_mutable_merge_owner() {
  _has_bits_[0] |= 0x02000000u;
  if (merge_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::MergeOwnerArchive>(GetArena());
    merge_owner_ = p;
  }
  return merge_owner_;
}
inline ::TST::MergeOwnerArchive* TableModelArchive::mutable_merge_owner() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.merge_owner)
  return _internal_mutable_merge_owner();
}
inline void TableModelArchive::set_allocated_merge_owner(::TST::MergeOwnerArchive* merge_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete merge_owner_;
  }
  if (merge_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(merge_owner);
    if (message_arena != submessage_arena) {
      merge_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, merge_owner, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  merge_owner_ = merge_owner;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.merge_owner)
}

// optional .TSP.Reference stroke_sidecar = 49;
inline bool TableModelArchive::_internal_has_stroke_sidecar() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || stroke_sidecar_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_stroke_sidecar() const {
  return _internal_has_stroke_sidecar();
}
inline const ::TSP::Reference& TableModelArchive::_internal_stroke_sidecar() const {
  const ::TSP::Reference* p = stroke_sidecar_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::stroke_sidecar() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.stroke_sidecar)
  return _internal_stroke_sidecar();
}
inline void TableModelArchive::unsafe_arena_set_allocated_stroke_sidecar(
    ::TSP::Reference* stroke_sidecar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_sidecar_);
  }
  stroke_sidecar_ = stroke_sidecar;
  if (stroke_sidecar) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.stroke_sidecar)
}
inline ::TSP::Reference* TableModelArchive::release_stroke_sidecar() {
  _has_bits_[0] &= ~0x08000000u;
  ::TSP::Reference* temp = stroke_sidecar_;
  stroke_sidecar_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_stroke_sidecar() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.stroke_sidecar)
  _has_bits_[0] &= ~0x08000000u;
  ::TSP::Reference* temp = stroke_sidecar_;
  stroke_sidecar_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_stroke_sidecar() {
  _has_bits_[0] |= 0x08000000u;
  if (stroke_sidecar_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stroke_sidecar_ = p;
  }
  return stroke_sidecar_;
}
inline ::TSP::Reference* TableModelArchive::mutable_stroke_sidecar() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.stroke_sidecar)
  return _internal_mutable_stroke_sidecar();
}
inline void TableModelArchive::set_allocated_stroke_sidecar(::TSP::Reference* stroke_sidecar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_sidecar_);
  }
  if (stroke_sidecar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_sidecar)->GetArena();
    if (message_arena != submessage_arena) {
      stroke_sidecar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stroke_sidecar, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  stroke_sidecar_ = stroke_sidecar;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.stroke_sidecar)
}

// optional bool preset_needs_strong_ownership = 51;
inline bool TableModelArchive::_internal_has_preset_needs_strong_ownership() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool TableModelArchive::has_preset_needs_strong_ownership() const {
  return _internal_has_preset_needs_strong_ownership();
}
inline void TableModelArchive::clear_preset_needs_strong_ownership() {
  preset_needs_strong_ownership_ = false;
  _has_bits_[2] &= ~0x00000800u;
}
inline bool TableModelArchive::_internal_preset_needs_strong_ownership() const {
  return preset_needs_strong_ownership_;
}
inline bool TableModelArchive::preset_needs_strong_ownership() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.preset_needs_strong_ownership)
  return _internal_preset_needs_strong_ownership();
}
inline void TableModelArchive::_internal_set_preset_needs_strong_ownership(bool value) {
  _has_bits_[2] |= 0x00000800u;
  preset_needs_strong_ownership_ = value;
}
inline void TableModelArchive::set_preset_needs_strong_ownership(bool value) {
  _internal_set_preset_needs_strong_ownership(value);
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.preset_needs_strong_ownership)
}

// optional .TST.StructuredTextImportRecord text_import_record = 52;
inline bool TableModelArchive::_internal_has_text_import_record() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || text_import_record_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_text_import_record() const {
  return _internal_has_text_import_record();
}
inline void TableModelArchive::clear_text_import_record() {
  if (text_import_record_ != nullptr) text_import_record_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::TST::StructuredTextImportRecord& TableModelArchive::_internal_text_import_record() const {
  const ::TST::StructuredTextImportRecord* p = text_import_record_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::StructuredTextImportRecord&>(
      ::TST::_StructuredTextImportRecord_default_instance_);
}
inline const ::TST::StructuredTextImportRecord& TableModelArchive::text_import_record() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.text_import_record)
  return _internal_text_import_record();
}
inline void TableModelArchive::unsafe_arena_set_allocated_text_import_record(
    ::TST::StructuredTextImportRecord* text_import_record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_import_record_);
  }
  text_import_record_ = text_import_record;
  if (text_import_record) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.text_import_record)
}
inline ::TST::StructuredTextImportRecord* TableModelArchive::release_text_import_record() {
  _has_bits_[0] &= ~0x10000000u;
  ::TST::StructuredTextImportRecord* temp = text_import_record_;
  text_import_record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::StructuredTextImportRecord* TableModelArchive::unsafe_arena_release_text_import_record() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.text_import_record)
  _has_bits_[0] &= ~0x10000000u;
  ::TST::StructuredTextImportRecord* temp = text_import_record_;
  text_import_record_ = nullptr;
  return temp;
}
inline ::TST::StructuredTextImportRecord* TableModelArchive::_internal_mutable_text_import_record() {
  _has_bits_[0] |= 0x10000000u;
  if (text_import_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::StructuredTextImportRecord>(GetArena());
    text_import_record_ = p;
  }
  return text_import_record_;
}
inline ::TST::StructuredTextImportRecord* TableModelArchive::mutable_text_import_record() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.text_import_record)
  return _internal_mutable_text_import_record();
}
inline void TableModelArchive::set_allocated_text_import_record(::TST::StructuredTextImportRecord* text_import_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_import_record_;
  }
  if (text_import_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text_import_record);
    if (message_arena != submessage_arena) {
      text_import_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_import_record, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  text_import_record_ = text_import_record;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.text_import_record)
}

// optional .TSP.Reference category_level_1_style = 60;
inline bool TableModelArchive::_internal_has_category_level_1_style() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_1_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_1_style() const {
  return _internal_has_category_level_1_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_1_style() const {
  const ::TSP::Reference* p = category_level_1_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_1_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_1_style)
  return _internal_category_level_1_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_1_style(
    ::TSP::Reference* category_level_1_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_style_);
  }
  category_level_1_style_ = category_level_1_style;
  if (category_level_1_style) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_1_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_1_style() {
  _has_bits_[0] &= ~0x20000000u;
  ::TSP::Reference* temp = category_level_1_style_;
  category_level_1_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_1_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_1_style)
  _has_bits_[0] &= ~0x20000000u;
  ::TSP::Reference* temp = category_level_1_style_;
  category_level_1_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_1_style() {
  _has_bits_[0] |= 0x20000000u;
  if (category_level_1_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_1_style_ = p;
  }
  return category_level_1_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_1_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_1_style)
  return _internal_mutable_category_level_1_style();
}
inline void TableModelArchive::set_allocated_category_level_1_style(::TSP::Reference* category_level_1_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_style_);
  }
  if (category_level_1_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_1_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_1_style, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  category_level_1_style_ = category_level_1_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_1_style)
}

// optional .TSP.Reference category_level_2_style = 61;
inline bool TableModelArchive::_internal_has_category_level_2_style() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_2_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_2_style() const {
  return _internal_has_category_level_2_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_2_style() const {
  const ::TSP::Reference* p = category_level_2_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_2_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_2_style)
  return _internal_category_level_2_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_2_style(
    ::TSP::Reference* category_level_2_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_style_);
  }
  category_level_2_style_ = category_level_2_style;
  if (category_level_2_style) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_2_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_2_style() {
  _has_bits_[0] &= ~0x40000000u;
  ::TSP::Reference* temp = category_level_2_style_;
  category_level_2_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_2_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_2_style)
  _has_bits_[0] &= ~0x40000000u;
  ::TSP::Reference* temp = category_level_2_style_;
  category_level_2_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_2_style() {
  _has_bits_[0] |= 0x40000000u;
  if (category_level_2_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_2_style_ = p;
  }
  return category_level_2_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_2_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_2_style)
  return _internal_mutable_category_level_2_style();
}
inline void TableModelArchive::set_allocated_category_level_2_style(::TSP::Reference* category_level_2_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_style_);
  }
  if (category_level_2_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_2_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_2_style, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  category_level_2_style_ = category_level_2_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_2_style)
}

// optional .TSP.Reference category_level_3_style = 62;
inline bool TableModelArchive::_internal_has_category_level_3_style() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || category_level_3_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_3_style() const {
  return _internal_has_category_level_3_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_3_style() const {
  const ::TSP::Reference* p = category_level_3_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_3_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_3_style)
  return _internal_category_level_3_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_3_style(
    ::TSP::Reference* category_level_3_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_style_);
  }
  category_level_3_style_ = category_level_3_style;
  if (category_level_3_style) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_3_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_3_style() {
  _has_bits_[0] &= ~0x80000000u;
  ::TSP::Reference* temp = category_level_3_style_;
  category_level_3_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_3_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_3_style)
  _has_bits_[0] &= ~0x80000000u;
  ::TSP::Reference* temp = category_level_3_style_;
  category_level_3_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_3_style() {
  _has_bits_[0] |= 0x80000000u;
  if (category_level_3_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_3_style_ = p;
  }
  return category_level_3_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_3_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_3_style)
  return _internal_mutable_category_level_3_style();
}
inline void TableModelArchive::set_allocated_category_level_3_style(::TSP::Reference* category_level_3_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_style_);
  }
  if (category_level_3_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_3_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_3_style, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  category_level_3_style_ = category_level_3_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_3_style)
}

// optional .TSP.Reference category_level_4_style = 63;
inline bool TableModelArchive::_internal_has_category_level_4_style() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || category_level_4_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_4_style() const {
  return _internal_has_category_level_4_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_4_style() const {
  const ::TSP::Reference* p = category_level_4_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_4_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_4_style)
  return _internal_category_level_4_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_4_style(
    ::TSP::Reference* category_level_4_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_style_);
  }
  category_level_4_style_ = category_level_4_style;
  if (category_level_4_style) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_4_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_4_style() {
  _has_bits_[1] &= ~0x00000001u;
  ::TSP::Reference* temp = category_level_4_style_;
  category_level_4_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_4_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_4_style)
  _has_bits_[1] &= ~0x00000001u;
  ::TSP::Reference* temp = category_level_4_style_;
  category_level_4_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_4_style() {
  _has_bits_[1] |= 0x00000001u;
  if (category_level_4_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_4_style_ = p;
  }
  return category_level_4_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_4_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_4_style)
  return _internal_mutable_category_level_4_style();
}
inline void TableModelArchive::set_allocated_category_level_4_style(::TSP::Reference* category_level_4_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_style_);
  }
  if (category_level_4_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_4_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_4_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  category_level_4_style_ = category_level_4_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_4_style)
}

// optional .TSP.Reference category_level_5_style = 64;
inline bool TableModelArchive::_internal_has_category_level_5_style() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || category_level_5_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_5_style() const {
  return _internal_has_category_level_5_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_5_style() const {
  const ::TSP::Reference* p = category_level_5_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_5_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_5_style)
  return _internal_category_level_5_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_5_style(
    ::TSP::Reference* category_level_5_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_style_);
  }
  category_level_5_style_ = category_level_5_style;
  if (category_level_5_style) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_5_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_5_style() {
  _has_bits_[1] &= ~0x00000002u;
  ::TSP::Reference* temp = category_level_5_style_;
  category_level_5_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_5_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_5_style)
  _has_bits_[1] &= ~0x00000002u;
  ::TSP::Reference* temp = category_level_5_style_;
  category_level_5_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_5_style() {
  _has_bits_[1] |= 0x00000002u;
  if (category_level_5_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_5_style_ = p;
  }
  return category_level_5_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_5_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_5_style)
  return _internal_mutable_category_level_5_style();
}
inline void TableModelArchive::set_allocated_category_level_5_style(::TSP::Reference* category_level_5_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_style_);
  }
  if (category_level_5_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_5_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_5_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  category_level_5_style_ = category_level_5_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_5_style)
}

// optional .TSP.Reference label_level_1_style = 71;
inline bool TableModelArchive::_internal_has_label_level_1_style() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || label_level_1_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_1_style() const {
  return _internal_has_label_level_1_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_1_style() const {
  const ::TSP::Reference* p = label_level_1_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_1_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_1_style)
  return _internal_label_level_1_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_1_style(
    ::TSP::Reference* label_level_1_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_style_);
  }
  label_level_1_style_ = label_level_1_style;
  if (label_level_1_style) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_1_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_1_style() {
  _has_bits_[1] &= ~0x00000100u;
  ::TSP::Reference* temp = label_level_1_style_;
  label_level_1_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_1_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_1_style)
  _has_bits_[1] &= ~0x00000100u;
  ::TSP::Reference* temp = label_level_1_style_;
  label_level_1_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_1_style() {
  _has_bits_[1] |= 0x00000100u;
  if (label_level_1_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_1_style_ = p;
  }
  return label_level_1_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_1_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_1_style)
  return _internal_mutable_label_level_1_style();
}
inline void TableModelArchive::set_allocated_label_level_1_style(::TSP::Reference* label_level_1_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_style_);
  }
  if (label_level_1_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_1_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_1_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  label_level_1_style_ = label_level_1_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_1_style)
}

// optional .TSP.Reference label_level_2_style = 72;
inline bool TableModelArchive::_internal_has_label_level_2_style() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || label_level_2_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_2_style() const {
  return _internal_has_label_level_2_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_2_style() const {
  const ::TSP::Reference* p = label_level_2_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_2_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_2_style)
  return _internal_label_level_2_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_2_style(
    ::TSP::Reference* label_level_2_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_style_);
  }
  label_level_2_style_ = label_level_2_style;
  if (label_level_2_style) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_2_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_2_style() {
  _has_bits_[1] &= ~0x00000200u;
  ::TSP::Reference* temp = label_level_2_style_;
  label_level_2_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_2_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_2_style)
  _has_bits_[1] &= ~0x00000200u;
  ::TSP::Reference* temp = label_level_2_style_;
  label_level_2_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_2_style() {
  _has_bits_[1] |= 0x00000200u;
  if (label_level_2_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_2_style_ = p;
  }
  return label_level_2_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_2_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_2_style)
  return _internal_mutable_label_level_2_style();
}
inline void TableModelArchive::set_allocated_label_level_2_style(::TSP::Reference* label_level_2_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_style_);
  }
  if (label_level_2_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_2_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_2_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  label_level_2_style_ = label_level_2_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_2_style)
}

// optional .TSP.Reference label_level_3_style = 73;
inline bool TableModelArchive::_internal_has_label_level_3_style() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || label_level_3_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_3_style() const {
  return _internal_has_label_level_3_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_3_style() const {
  const ::TSP::Reference* p = label_level_3_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_3_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_3_style)
  return _internal_label_level_3_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_3_style(
    ::TSP::Reference* label_level_3_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_style_);
  }
  label_level_3_style_ = label_level_3_style;
  if (label_level_3_style) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_3_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_3_style() {
  _has_bits_[1] &= ~0x00000400u;
  ::TSP::Reference* temp = label_level_3_style_;
  label_level_3_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_3_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_3_style)
  _has_bits_[1] &= ~0x00000400u;
  ::TSP::Reference* temp = label_level_3_style_;
  label_level_3_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_3_style() {
  _has_bits_[1] |= 0x00000400u;
  if (label_level_3_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_3_style_ = p;
  }
  return label_level_3_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_3_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_3_style)
  return _internal_mutable_label_level_3_style();
}
inline void TableModelArchive::set_allocated_label_level_3_style(::TSP::Reference* label_level_3_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_style_);
  }
  if (label_level_3_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_3_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_3_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  label_level_3_style_ = label_level_3_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_3_style)
}

// optional .TSP.Reference label_level_4_style = 74;
inline bool TableModelArchive::_internal_has_label_level_4_style() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || label_level_4_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_4_style() const {
  return _internal_has_label_level_4_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_4_style() const {
  const ::TSP::Reference* p = label_level_4_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_4_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_4_style)
  return _internal_label_level_4_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_4_style(
    ::TSP::Reference* label_level_4_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_style_);
  }
  label_level_4_style_ = label_level_4_style;
  if (label_level_4_style) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_4_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_4_style() {
  _has_bits_[1] &= ~0x00000800u;
  ::TSP::Reference* temp = label_level_4_style_;
  label_level_4_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_4_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_4_style)
  _has_bits_[1] &= ~0x00000800u;
  ::TSP::Reference* temp = label_level_4_style_;
  label_level_4_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_4_style() {
  _has_bits_[1] |= 0x00000800u;
  if (label_level_4_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_4_style_ = p;
  }
  return label_level_4_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_4_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_4_style)
  return _internal_mutable_label_level_4_style();
}
inline void TableModelArchive::set_allocated_label_level_4_style(::TSP::Reference* label_level_4_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_style_);
  }
  if (label_level_4_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_4_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_4_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  label_level_4_style_ = label_level_4_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_4_style)
}

// optional .TSP.Reference label_level_5_style = 75;
inline bool TableModelArchive::_internal_has_label_level_5_style() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_5_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_5_style() const {
  return _internal_has_label_level_5_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_5_style() const {
  const ::TSP::Reference* p = label_level_5_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_5_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_5_style)
  return _internal_label_level_5_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_5_style(
    ::TSP::Reference* label_level_5_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_style_);
  }
  label_level_5_style_ = label_level_5_style;
  if (label_level_5_style) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_5_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_5_style() {
  _has_bits_[1] &= ~0x00001000u;
  ::TSP::Reference* temp = label_level_5_style_;
  label_level_5_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_5_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_5_style)
  _has_bits_[1] &= ~0x00001000u;
  ::TSP::Reference* temp = label_level_5_style_;
  label_level_5_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_5_style() {
  _has_bits_[1] |= 0x00001000u;
  if (label_level_5_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_5_style_ = p;
  }
  return label_level_5_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_5_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_5_style)
  return _internal_mutable_label_level_5_style();
}
inline void TableModelArchive::set_allocated_label_level_5_style(::TSP::Reference* label_level_5_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_style_);
  }
  if (label_level_5_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_5_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_5_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  label_level_5_style_ = label_level_5_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_5_style)
}

// optional .TSP.Reference category_level_1_text_style = 65;
inline bool TableModelArchive::_internal_has_category_level_1_text_style() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || category_level_1_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_1_text_style() const {
  return _internal_has_category_level_1_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_1_text_style() const {
  const ::TSP::Reference* p = category_level_1_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_1_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_1_text_style)
  return _internal_category_level_1_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_1_text_style(
    ::TSP::Reference* category_level_1_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_text_style_);
  }
  category_level_1_text_style_ = category_level_1_text_style;
  if (category_level_1_text_style) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_1_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_1_text_style() {
  _has_bits_[1] &= ~0x00000004u;
  ::TSP::Reference* temp = category_level_1_text_style_;
  category_level_1_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_1_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_1_text_style)
  _has_bits_[1] &= ~0x00000004u;
  ::TSP::Reference* temp = category_level_1_text_style_;
  category_level_1_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_1_text_style() {
  _has_bits_[1] |= 0x00000004u;
  if (category_level_1_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_1_text_style_ = p;
  }
  return category_level_1_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_1_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_1_text_style)
  return _internal_mutable_category_level_1_text_style();
}
inline void TableModelArchive::set_allocated_category_level_1_text_style(::TSP::Reference* category_level_1_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_text_style_);
  }
  if (category_level_1_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_1_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_1_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_1_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  category_level_1_text_style_ = category_level_1_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_1_text_style)
}

// optional .TSP.Reference category_level_2_text_style = 66;
inline bool TableModelArchive::_internal_has_category_level_2_text_style() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || category_level_2_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_2_text_style() const {
  return _internal_has_category_level_2_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_2_text_style() const {
  const ::TSP::Reference* p = category_level_2_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_2_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_2_text_style)
  return _internal_category_level_2_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_2_text_style(
    ::TSP::Reference* category_level_2_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_text_style_);
  }
  category_level_2_text_style_ = category_level_2_text_style;
  if (category_level_2_text_style) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_2_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_2_text_style() {
  _has_bits_[1] &= ~0x00000008u;
  ::TSP::Reference* temp = category_level_2_text_style_;
  category_level_2_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_2_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_2_text_style)
  _has_bits_[1] &= ~0x00000008u;
  ::TSP::Reference* temp = category_level_2_text_style_;
  category_level_2_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_2_text_style() {
  _has_bits_[1] |= 0x00000008u;
  if (category_level_2_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_2_text_style_ = p;
  }
  return category_level_2_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_2_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_2_text_style)
  return _internal_mutable_category_level_2_text_style();
}
inline void TableModelArchive::set_allocated_category_level_2_text_style(::TSP::Reference* category_level_2_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_text_style_);
  }
  if (category_level_2_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_2_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_2_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_2_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  category_level_2_text_style_ = category_level_2_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_2_text_style)
}

// optional .TSP.Reference category_level_3_text_style = 67;
inline bool TableModelArchive::_internal_has_category_level_3_text_style() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || category_level_3_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_3_text_style() const {
  return _internal_has_category_level_3_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_3_text_style() const {
  const ::TSP::Reference* p = category_level_3_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_3_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_3_text_style)
  return _internal_category_level_3_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_3_text_style(
    ::TSP::Reference* category_level_3_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_text_style_);
  }
  category_level_3_text_style_ = category_level_3_text_style;
  if (category_level_3_text_style) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_3_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_3_text_style() {
  _has_bits_[1] &= ~0x00000010u;
  ::TSP::Reference* temp = category_level_3_text_style_;
  category_level_3_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_3_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_3_text_style)
  _has_bits_[1] &= ~0x00000010u;
  ::TSP::Reference* temp = category_level_3_text_style_;
  category_level_3_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_3_text_style() {
  _has_bits_[1] |= 0x00000010u;
  if (category_level_3_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_3_text_style_ = p;
  }
  return category_level_3_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_3_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_3_text_style)
  return _internal_mutable_category_level_3_text_style();
}
inline void TableModelArchive::set_allocated_category_level_3_text_style(::TSP::Reference* category_level_3_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_text_style_);
  }
  if (category_level_3_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_3_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_3_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_3_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  category_level_3_text_style_ = category_level_3_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_3_text_style)
}

// optional .TSP.Reference category_level_4_text_style = 68;
inline bool TableModelArchive::_internal_has_category_level_4_text_style() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || category_level_4_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_4_text_style() const {
  return _internal_has_category_level_4_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_4_text_style() const {
  const ::TSP::Reference* p = category_level_4_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_4_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_4_text_style)
  return _internal_category_level_4_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_4_text_style(
    ::TSP::Reference* category_level_4_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_text_style_);
  }
  category_level_4_text_style_ = category_level_4_text_style;
  if (category_level_4_text_style) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_4_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_4_text_style() {
  _has_bits_[1] &= ~0x00000020u;
  ::TSP::Reference* temp = category_level_4_text_style_;
  category_level_4_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_4_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_4_text_style)
  _has_bits_[1] &= ~0x00000020u;
  ::TSP::Reference* temp = category_level_4_text_style_;
  category_level_4_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_4_text_style() {
  _has_bits_[1] |= 0x00000020u;
  if (category_level_4_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_4_text_style_ = p;
  }
  return category_level_4_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_4_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_4_text_style)
  return _internal_mutable_category_level_4_text_style();
}
inline void TableModelArchive::set_allocated_category_level_4_text_style(::TSP::Reference* category_level_4_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_text_style_);
  }
  if (category_level_4_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_4_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_4_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_4_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  category_level_4_text_style_ = category_level_4_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_4_text_style)
}

// optional .TSP.Reference category_level_5_text_style = 69;
inline bool TableModelArchive::_internal_has_category_level_5_text_style() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || category_level_5_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_level_5_text_style() const {
  return _internal_has_category_level_5_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_category_level_5_text_style() const {
  const ::TSP::Reference* p = category_level_5_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::category_level_5_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_level_5_text_style)
  return _internal_category_level_5_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_level_5_text_style(
    ::TSP::Reference* category_level_5_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_text_style_);
  }
  category_level_5_text_style_ = category_level_5_text_style;
  if (category_level_5_text_style) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_level_5_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_category_level_5_text_style() {
  _has_bits_[1] &= ~0x00000040u;
  ::TSP::Reference* temp = category_level_5_text_style_;
  category_level_5_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_category_level_5_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_level_5_text_style)
  _has_bits_[1] &= ~0x00000040u;
  ::TSP::Reference* temp = category_level_5_text_style_;
  category_level_5_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_category_level_5_text_style() {
  _has_bits_[1] |= 0x00000040u;
  if (category_level_5_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    category_level_5_text_style_ = p;
  }
  return category_level_5_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_category_level_5_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_level_5_text_style)
  return _internal_mutable_category_level_5_text_style();
}
inline void TableModelArchive::set_allocated_category_level_5_text_style(::TSP::Reference* category_level_5_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_text_style_);
  }
  if (category_level_5_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_level_5_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      category_level_5_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_level_5_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  category_level_5_text_style_ = category_level_5_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_level_5_text_style)
}

// optional .TSP.Reference label_level_1_text_style = 76;
inline bool TableModelArchive::_internal_has_label_level_1_text_style() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_1_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_1_text_style() const {
  return _internal_has_label_level_1_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_1_text_style() const {
  const ::TSP::Reference* p = label_level_1_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_1_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_1_text_style)
  return _internal_label_level_1_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_1_text_style(
    ::TSP::Reference* label_level_1_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_text_style_);
  }
  label_level_1_text_style_ = label_level_1_text_style;
  if (label_level_1_text_style) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_1_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_1_text_style() {
  _has_bits_[1] &= ~0x00002000u;
  ::TSP::Reference* temp = label_level_1_text_style_;
  label_level_1_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_1_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_1_text_style)
  _has_bits_[1] &= ~0x00002000u;
  ::TSP::Reference* temp = label_level_1_text_style_;
  label_level_1_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_1_text_style() {
  _has_bits_[1] |= 0x00002000u;
  if (label_level_1_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_1_text_style_ = p;
  }
  return label_level_1_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_1_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_1_text_style)
  return _internal_mutable_label_level_1_text_style();
}
inline void TableModelArchive::set_allocated_label_level_1_text_style(::TSP::Reference* label_level_1_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_text_style_);
  }
  if (label_level_1_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_1_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_1_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_1_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  label_level_1_text_style_ = label_level_1_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_1_text_style)
}

// optional .TSP.Reference label_level_2_text_style = 77;
inline bool TableModelArchive::_internal_has_label_level_2_text_style() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_2_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_2_text_style() const {
  return _internal_has_label_level_2_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_2_text_style() const {
  const ::TSP::Reference* p = label_level_2_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_2_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_2_text_style)
  return _internal_label_level_2_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_2_text_style(
    ::TSP::Reference* label_level_2_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_text_style_);
  }
  label_level_2_text_style_ = label_level_2_text_style;
  if (label_level_2_text_style) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_2_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_2_text_style() {
  _has_bits_[1] &= ~0x00004000u;
  ::TSP::Reference* temp = label_level_2_text_style_;
  label_level_2_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_2_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_2_text_style)
  _has_bits_[1] &= ~0x00004000u;
  ::TSP::Reference* temp = label_level_2_text_style_;
  label_level_2_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_2_text_style() {
  _has_bits_[1] |= 0x00004000u;
  if (label_level_2_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_2_text_style_ = p;
  }
  return label_level_2_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_2_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_2_text_style)
  return _internal_mutable_label_level_2_text_style();
}
inline void TableModelArchive::set_allocated_label_level_2_text_style(::TSP::Reference* label_level_2_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_text_style_);
  }
  if (label_level_2_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_2_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_2_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_2_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  label_level_2_text_style_ = label_level_2_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_2_text_style)
}

// optional .TSP.Reference label_level_3_text_style = 78;
inline bool TableModelArchive::_internal_has_label_level_3_text_style() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_3_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_3_text_style() const {
  return _internal_has_label_level_3_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_3_text_style() const {
  const ::TSP::Reference* p = label_level_3_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_3_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_3_text_style)
  return _internal_label_level_3_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_3_text_style(
    ::TSP::Reference* label_level_3_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_text_style_);
  }
  label_level_3_text_style_ = label_level_3_text_style;
  if (label_level_3_text_style) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_3_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_3_text_style() {
  _has_bits_[1] &= ~0x00008000u;
  ::TSP::Reference* temp = label_level_3_text_style_;
  label_level_3_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_3_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_3_text_style)
  _has_bits_[1] &= ~0x00008000u;
  ::TSP::Reference* temp = label_level_3_text_style_;
  label_level_3_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_3_text_style() {
  _has_bits_[1] |= 0x00008000u;
  if (label_level_3_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_3_text_style_ = p;
  }
  return label_level_3_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_3_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_3_text_style)
  return _internal_mutable_label_level_3_text_style();
}
inline void TableModelArchive::set_allocated_label_level_3_text_style(::TSP::Reference* label_level_3_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_text_style_);
  }
  if (label_level_3_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_3_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_3_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_3_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  label_level_3_text_style_ = label_level_3_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_3_text_style)
}

// optional .TSP.Reference label_level_4_text_style = 79;
inline bool TableModelArchive::_internal_has_label_level_4_text_style() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_4_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_4_text_style() const {
  return _internal_has_label_level_4_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_4_text_style() const {
  const ::TSP::Reference* p = label_level_4_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_4_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_4_text_style)
  return _internal_label_level_4_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_4_text_style(
    ::TSP::Reference* label_level_4_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_text_style_);
  }
  label_level_4_text_style_ = label_level_4_text_style;
  if (label_level_4_text_style) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_4_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_4_text_style() {
  _has_bits_[1] &= ~0x00010000u;
  ::TSP::Reference* temp = label_level_4_text_style_;
  label_level_4_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_4_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_4_text_style)
  _has_bits_[1] &= ~0x00010000u;
  ::TSP::Reference* temp = label_level_4_text_style_;
  label_level_4_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_4_text_style() {
  _has_bits_[1] |= 0x00010000u;
  if (label_level_4_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_4_text_style_ = p;
  }
  return label_level_4_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_4_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_4_text_style)
  return _internal_mutable_label_level_4_text_style();
}
inline void TableModelArchive::set_allocated_label_level_4_text_style(::TSP::Reference* label_level_4_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_text_style_);
  }
  if (label_level_4_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_4_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_4_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_4_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  label_level_4_text_style_ = label_level_4_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_4_text_style)
}

// optional .TSP.Reference label_level_5_text_style = 80;
inline bool TableModelArchive::_internal_has_label_level_5_text_style() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || label_level_5_text_style_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_label_level_5_text_style() const {
  return _internal_has_label_level_5_text_style();
}
inline const ::TSP::Reference& TableModelArchive::_internal_label_level_5_text_style() const {
  const ::TSP::Reference* p = label_level_5_text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TableModelArchive::label_level_5_text_style() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.label_level_5_text_style)
  return _internal_label_level_5_text_style();
}
inline void TableModelArchive::unsafe_arena_set_allocated_label_level_5_text_style(
    ::TSP::Reference* label_level_5_text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_text_style_);
  }
  label_level_5_text_style_ = label_level_5_text_style;
  if (label_level_5_text_style) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.label_level_5_text_style)
}
inline ::TSP::Reference* TableModelArchive::release_label_level_5_text_style() {
  _has_bits_[1] &= ~0x00020000u;
  ::TSP::Reference* temp = label_level_5_text_style_;
  label_level_5_text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TableModelArchive::unsafe_arena_release_label_level_5_text_style() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.label_level_5_text_style)
  _has_bits_[1] &= ~0x00020000u;
  ::TSP::Reference* temp = label_level_5_text_style_;
  label_level_5_text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TableModelArchive::_internal_mutable_label_level_5_text_style() {
  _has_bits_[1] |= 0x00020000u;
  if (label_level_5_text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    label_level_5_text_style_ = p;
  }
  return label_level_5_text_style_;
}
inline ::TSP::Reference* TableModelArchive::mutable_label_level_5_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.label_level_5_text_style)
  return _internal_mutable_label_level_5_text_style();
}
inline void TableModelArchive::set_allocated_label_level_5_text_style(::TSP::Reference* label_level_5_text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_text_style_);
  }
  if (label_level_5_text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_level_5_text_style)->GetArena();
    if (message_arena != submessage_arena) {
      label_level_5_text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label_level_5_text_style, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  label_level_5_text_style_ = label_level_5_text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.label_level_5_text_style)
}

// optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
inline bool TableModelArchive::_internal_has_hidden_states_owner() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hidden_states_owner_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_hidden_states_owner() const {
  return _internal_has_hidden_states_owner();
}
inline void TableModelArchive::clear_hidden_states_owner() {
  if (hidden_states_owner_ != nullptr) hidden_states_owner_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::TST::HiddenStatesOwnerArchive& TableModelArchive::_internal_hidden_states_owner() const {
  const ::TST::HiddenStatesOwnerArchive* p = hidden_states_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::HiddenStatesOwnerArchive&>(
      ::TST::_HiddenStatesOwnerArchive_default_instance_);
}
inline const ::TST::HiddenStatesOwnerArchive& TableModelArchive::hidden_states_owner() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.hidden_states_owner)
  return _internal_hidden_states_owner();
}
inline void TableModelArchive::unsafe_arena_set_allocated_hidden_states_owner(
    ::TST::HiddenStatesOwnerArchive* hidden_states_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_owner_);
  }
  hidden_states_owner_ = hidden_states_owner;
  if (hidden_states_owner) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.hidden_states_owner)
}
inline ::TST::HiddenStatesOwnerArchive* TableModelArchive::release_hidden_states_owner() {
  _has_bits_[1] &= ~0x00000080u;
  ::TST::HiddenStatesOwnerArchive* temp = hidden_states_owner_;
  hidden_states_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::HiddenStatesOwnerArchive* TableModelArchive::unsafe_arena_release_hidden_states_owner() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.hidden_states_owner)
  _has_bits_[1] &= ~0x00000080u;
  ::TST::HiddenStatesOwnerArchive* temp = hidden_states_owner_;
  hidden_states_owner_ = nullptr;
  return temp;
}
inline ::TST::HiddenStatesOwnerArchive* TableModelArchive::_internal_mutable_hidden_states_owner() {
  _has_bits_[1] |= 0x00000080u;
  if (hidden_states_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::HiddenStatesOwnerArchive>(GetArena());
    hidden_states_owner_ = p;
  }
  return hidden_states_owner_;
}
inline ::TST::HiddenStatesOwnerArchive* TableModelArchive::mutable_hidden_states_owner() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.hidden_states_owner)
  return _internal_mutable_hidden_states_owner();
}
inline void TableModelArchive::set_allocated_hidden_states_owner(::TST::HiddenStatesOwnerArchive* hidden_states_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hidden_states_owner_;
  }
  if (hidden_states_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hidden_states_owner);
    if (message_arena != submessage_arena) {
      hidden_states_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_states_owner, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  hidden_states_owner_ = hidden_states_owner;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.hidden_states_owner)
}

// optional .TST.CategoryOwnerArchive category_owner = 81;
inline bool TableModelArchive::_internal_has_category_owner() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || category_owner_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_category_owner() const {
  return _internal_has_category_owner();
}
inline void TableModelArchive::clear_category_owner() {
  if (category_owner_ != nullptr) category_owner_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::TST::CategoryOwnerArchive& TableModelArchive::_internal_category_owner() const {
  const ::TST::CategoryOwnerArchive* p = category_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CategoryOwnerArchive&>(
      ::TST::_CategoryOwnerArchive_default_instance_);
}
inline const ::TST::CategoryOwnerArchive& TableModelArchive::category_owner() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.category_owner)
  return _internal_category_owner();
}
inline void TableModelArchive::unsafe_arena_set_allocated_category_owner(
    ::TST::CategoryOwnerArchive* category_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_owner_);
  }
  category_owner_ = category_owner;
  if (category_owner) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.category_owner)
}
inline ::TST::CategoryOwnerArchive* TableModelArchive::release_category_owner() {
  _has_bits_[1] &= ~0x00040000u;
  ::TST::CategoryOwnerArchive* temp = category_owner_;
  category_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CategoryOwnerArchive* TableModelArchive::unsafe_arena_release_category_owner() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.category_owner)
  _has_bits_[1] &= ~0x00040000u;
  ::TST::CategoryOwnerArchive* temp = category_owner_;
  category_owner_ = nullptr;
  return temp;
}
inline ::TST::CategoryOwnerArchive* TableModelArchive::_internal_mutable_category_owner() {
  _has_bits_[1] |= 0x00040000u;
  if (category_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CategoryOwnerArchive>(GetArena());
    category_owner_ = p;
  }
  return category_owner_;
}
inline ::TST::CategoryOwnerArchive* TableModelArchive::mutable_category_owner() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.category_owner)
  return _internal_mutable_category_owner();
}
inline void TableModelArchive::set_allocated_category_owner(::TST::CategoryOwnerArchive* category_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete category_owner_;
  }
  if (category_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(category_owner);
    if (message_arena != submessage_arena) {
      category_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_owner, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  category_owner_ = category_owner;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.category_owner)
}

// optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
inline bool TableModelArchive::_internal_has_pencil_annotation_owner() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_owner_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_pencil_annotation_owner() const {
  return _internal_has_pencil_annotation_owner();
}
inline void TableModelArchive::clear_pencil_annotation_owner() {
  if (pencil_annotation_owner_ != nullptr) pencil_annotation_owner_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::TST::PencilAnnotationOwnerArchive& TableModelArchive::_internal_pencil_annotation_owner() const {
  const ::TST::PencilAnnotationOwnerArchive* p = pencil_annotation_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::PencilAnnotationOwnerArchive&>(
      ::TST::_PencilAnnotationOwnerArchive_default_instance_);
}
inline const ::TST::PencilAnnotationOwnerArchive& TableModelArchive::pencil_annotation_owner() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.pencil_annotation_owner)
  return _internal_pencil_annotation_owner();
}
inline void TableModelArchive::unsafe_arena_set_allocated_pencil_annotation_owner(
    ::TST::PencilAnnotationOwnerArchive* pencil_annotation_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_owner_);
  }
  pencil_annotation_owner_ = pencil_annotation_owner;
  if (pencil_annotation_owner) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.pencil_annotation_owner)
}
inline ::TST::PencilAnnotationOwnerArchive* TableModelArchive::release_pencil_annotation_owner() {
  _has_bits_[1] &= ~0x00080000u;
  ::TST::PencilAnnotationOwnerArchive* temp = pencil_annotation_owner_;
  pencil_annotation_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::PencilAnnotationOwnerArchive* TableModelArchive::unsafe_arena_release_pencil_annotation_owner() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.pencil_annotation_owner)
  _has_bits_[1] &= ~0x00080000u;
  ::TST::PencilAnnotationOwnerArchive* temp = pencil_annotation_owner_;
  pencil_annotation_owner_ = nullptr;
  return temp;
}
inline ::TST::PencilAnnotationOwnerArchive* TableModelArchive::_internal_mutable_pencil_annotation_owner() {
  _has_bits_[1] |= 0x00080000u;
  if (pencil_annotation_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::PencilAnnotationOwnerArchive>(GetArena());
    pencil_annotation_owner_ = p;
  }
  return pencil_annotation_owner_;
}
inline ::TST::PencilAnnotationOwnerArchive* TableModelArchive::mutable_pencil_annotation_owner() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.pencil_annotation_owner)
  return _internal_mutable_pencil_annotation_owner();
}
inline void TableModelArchive::set_allocated_pencil_annotation_owner(::TST::PencilAnnotationOwnerArchive* pencil_annotation_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pencil_annotation_owner_;
  }
  if (pencil_annotation_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pencil_annotation_owner);
    if (message_arena != submessage_arena) {
      pencil_annotation_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_owner, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  pencil_annotation_owner_ = pencil_annotation_owner;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.pencil_annotation_owner)
}

// optional string from_group_by_uid = 83;
inline bool TableModelArchive::_internal_has_from_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TableModelArchive::has_from_group_by_uid() const {
  return _internal_has_from_group_by_uid();
}
inline void TableModelArchive::clear_from_group_by_uid() {
  from_group_by_uid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TableModelArchive::from_group_by_uid() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.from_group_by_uid)
  return _internal_from_group_by_uid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TableModelArchive::set_from_group_by_uid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 from_group_by_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.TableModelArchive.from_group_by_uid)
}
inline std::string* TableModelArchive::mutable_from_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.from_group_by_uid)
  return _internal_mutable_from_group_by_uid();
}
inline const std::string& TableModelArchive::_internal_from_group_by_uid() const {
  return from_group_by_uid_.Get();
}
inline void TableModelArchive::_internal_set_from_group_by_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  from_group_by_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TableModelArchive::_internal_mutable_from_group_by_uid() {
  _has_bits_[0] |= 0x00000008u;
  return from_group_by_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableModelArchive::release_from_group_by_uid() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.from_group_by_uid)
  if (!_internal_has_from_group_by_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return from_group_by_uid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableModelArchive::set_allocated_from_group_by_uid(std::string* from_group_by_uid) {
  if (from_group_by_uid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  from_group_by_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_group_by_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.from_group_by_uid)
}

// optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
inline bool TableModelArchive::_internal_has_haunted_owner() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || haunted_owner_ != nullptr);
  return value;
}
inline bool TableModelArchive::has_haunted_owner() const {
  return _internal_has_haunted_owner();
}
inline const ::TSCE::HauntedOwnerArchive& TableModelArchive::_internal_haunted_owner() const {
  const ::TSCE::HauntedOwnerArchive* p = haunted_owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::HauntedOwnerArchive&>(
      ::TSCE::_HauntedOwnerArchive_default_instance_);
}
inline const ::TSCE::HauntedOwnerArchive& TableModelArchive::haunted_owner() const {
  // @@protoc_insertion_point(field_get:TST.TableModelArchive.haunted_owner)
  return _internal_haunted_owner();
}
inline void TableModelArchive::unsafe_arena_set_allocated_haunted_owner(
    ::TSCE::HauntedOwnerArchive* haunted_owner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(haunted_owner_);
  }
  haunted_owner_ = haunted_owner;
  if (haunted_owner) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableModelArchive.haunted_owner)
}
inline ::TSCE::HauntedOwnerArchive* TableModelArchive::release_haunted_owner() {
  _has_bits_[1] &= ~0x00100000u;
  ::TSCE::HauntedOwnerArchive* temp = haunted_owner_;
  haunted_owner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::HauntedOwnerArchive* TableModelArchive::unsafe_arena_release_haunted_owner() {
  // @@protoc_insertion_point(field_release:TST.TableModelArchive.haunted_owner)
  _has_bits_[1] &= ~0x00100000u;
  ::TSCE::HauntedOwnerArchive* temp = haunted_owner_;
  haunted_owner_ = nullptr;
  return temp;
}
inline ::TSCE::HauntedOwnerArchive* TableModelArchive::_internal_mutable_haunted_owner() {
  _has_bits_[1] |= 0x00100000u;
  if (haunted_owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::HauntedOwnerArchive>(GetArena());
    haunted_owner_ = p;
  }
  return haunted_owner_;
}
inline ::TSCE::HauntedOwnerArchive* TableModelArchive::mutable_haunted_owner() {
  // @@protoc_insertion_point(field_mutable:TST.TableModelArchive.haunted_owner)
  return _internal_mutable_haunted_owner();
}
inline void TableModelArchive::set_allocated_haunted_owner(::TSCE::HauntedOwnerArchive* haunted_owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(haunted_owner_);
  }
  if (haunted_owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(haunted_owner)->GetArena();
    if (message_arena != submessage_arena) {
      haunted_owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, haunted_owner, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  haunted_owner_ = haunted_owner;
  // @@protoc_insertion_point(field_set_allocated:TST.TableModelArchive.haunted_owner)
}

// -------------------------------------------------------------------

// SummaryModelArchive

// required .TSP.Reference table_info = 1;
inline bool SummaryModelArchive::_internal_has_table_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_info_ != nullptr);
  return value;
}
inline bool SummaryModelArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& SummaryModelArchive::_internal_table_info() const {
  const ::TSP::Reference* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SummaryModelArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.table_info)
  return _internal_table_info();
}
inline void SummaryModelArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryModelArchive.table_info)
}
inline ::TSP::Reference* SummaryModelArchive::release_table_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SummaryModelArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.SummaryModelArchive.table_info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SummaryModelArchive::_internal_mutable_table_info() {
  _has_bits_[0] |= 0x00000001u;
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::TSP::Reference* SummaryModelArchive::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryModelArchive.table_info)
  return _internal_mutable_table_info();
}
inline void SummaryModelArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info)->GetArena();
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryModelArchive.table_info)
}

// optional .TST.DataStore data_store = 2;
inline bool SummaryModelArchive::_internal_has_data_store() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_store_ != nullptr);
  return value;
}
inline bool SummaryModelArchive::has_data_store() const {
  return _internal_has_data_store();
}
inline void SummaryModelArchive::clear_data_store() {
  if (data_store_ != nullptr) data_store_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::DataStore& SummaryModelArchive::_internal_data_store() const {
  const ::TST::DataStore* p = data_store_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::DataStore&>(
      ::TST::_DataStore_default_instance_);
}
inline const ::TST::DataStore& SummaryModelArchive::data_store() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.data_store)
  return _internal_data_store();
}
inline void SummaryModelArchive::unsafe_arena_set_allocated_data_store(
    ::TST::DataStore* data_store) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_store_);
  }
  data_store_ = data_store;
  if (data_store) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryModelArchive.data_store)
}
inline ::TST::DataStore* SummaryModelArchive::release_data_store() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::DataStore* temp = data_store_;
  data_store_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::DataStore* SummaryModelArchive::unsafe_arena_release_data_store() {
  // @@protoc_insertion_point(field_release:TST.SummaryModelArchive.data_store)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::DataStore* temp = data_store_;
  data_store_ = nullptr;
  return temp;
}
inline ::TST::DataStore* SummaryModelArchive::_internal_mutable_data_store() {
  _has_bits_[0] |= 0x00000002u;
  if (data_store_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::DataStore>(GetArena());
    data_store_ = p;
  }
  return data_store_;
}
inline ::TST::DataStore* SummaryModelArchive::mutable_data_store() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryModelArchive.data_store)
  return _internal_mutable_data_store();
}
inline void SummaryModelArchive::set_allocated_data_store(::TST::DataStore* data_store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_store_;
  }
  if (data_store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_store);
    if (message_arena != submessage_arena) {
      data_store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_store, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_store_ = data_store;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryModelArchive.data_store)
}

// optional .TSP.Reference column_row_uids = 3;
inline bool SummaryModelArchive::_internal_has_column_row_uids() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || column_row_uids_ != nullptr);
  return value;
}
inline bool SummaryModelArchive::has_column_row_uids() const {
  return _internal_has_column_row_uids();
}
inline const ::TSP::Reference& SummaryModelArchive::_internal_column_row_uids() const {
  const ::TSP::Reference* p = column_row_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SummaryModelArchive::column_row_uids() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.column_row_uids)
  return _internal_column_row_uids();
}
inline void SummaryModelArchive::unsafe_arena_set_allocated_column_row_uids(
    ::TSP::Reference* column_row_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_row_uids_);
  }
  column_row_uids_ = column_row_uids;
  if (column_row_uids) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryModelArchive.column_row_uids)
}
inline ::TSP::Reference* SummaryModelArchive::release_column_row_uids() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = column_row_uids_;
  column_row_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SummaryModelArchive::unsafe_arena_release_column_row_uids() {
  // @@protoc_insertion_point(field_release:TST.SummaryModelArchive.column_row_uids)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = column_row_uids_;
  column_row_uids_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SummaryModelArchive::_internal_mutable_column_row_uids() {
  _has_bits_[0] |= 0x00000004u;
  if (column_row_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    column_row_uids_ = p;
  }
  return column_row_uids_;
}
inline ::TSP::Reference* SummaryModelArchive::mutable_column_row_uids() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryModelArchive.column_row_uids)
  return _internal_mutable_column_row_uids();
}
inline void SummaryModelArchive::set_allocated_column_row_uids(::TSP::Reference* column_row_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_row_uids_);
  }
  if (column_row_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_row_uids)->GetArena();
    if (message_arena != submessage_arena) {
      column_row_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_row_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  column_row_uids_ = column_row_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryModelArchive.column_row_uids)
}

// optional .TSP.UUID aggregate_formula_owner_uuid = 4;
inline bool SummaryModelArchive::_internal_has_aggregate_formula_owner_uuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || aggregate_formula_owner_uuid_ != nullptr);
  return value;
}
inline bool SummaryModelArchive::has_aggregate_formula_owner_uuid() const {
  return _internal_has_aggregate_formula_owner_uuid();
}
inline const ::TSP::UUID& SummaryModelArchive::_internal_aggregate_formula_owner_uuid() const {
  const ::TSP::UUID* p = aggregate_formula_owner_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SummaryModelArchive::aggregate_formula_owner_uuid() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.aggregate_formula_owner_uuid)
  return _internal_aggregate_formula_owner_uuid();
}
inline void SummaryModelArchive::unsafe_arena_set_allocated_aggregate_formula_owner_uuid(
    ::TSP::UUID* aggregate_formula_owner_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregate_formula_owner_uuid_);
  }
  aggregate_formula_owner_uuid_ = aggregate_formula_owner_uuid;
  if (aggregate_formula_owner_uuid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryModelArchive.aggregate_formula_owner_uuid)
}
inline ::TSP::UUID* SummaryModelArchive::release_aggregate_formula_owner_uuid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = aggregate_formula_owner_uuid_;
  aggregate_formula_owner_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SummaryModelArchive::unsafe_arena_release_aggregate_formula_owner_uuid() {
  // @@protoc_insertion_point(field_release:TST.SummaryModelArchive.aggregate_formula_owner_uuid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = aggregate_formula_owner_uuid_;
  aggregate_formula_owner_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SummaryModelArchive::_internal_mutable_aggregate_formula_owner_uuid() {
  _has_bits_[0] |= 0x00000008u;
  if (aggregate_formula_owner_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    aggregate_formula_owner_uuid_ = p;
  }
  return aggregate_formula_owner_uuid_;
}
inline ::TSP::UUID* SummaryModelArchive::mutable_aggregate_formula_owner_uuid() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryModelArchive.aggregate_formula_owner_uuid)
  return _internal_mutable_aggregate_formula_owner_uuid();
}
inline void SummaryModelArchive::set_allocated_aggregate_formula_owner_uuid(::TSP::UUID* aggregate_formula_owner_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregate_formula_owner_uuid_);
  }
  if (aggregate_formula_owner_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggregate_formula_owner_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      aggregate_formula_owner_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate_formula_owner_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  aggregate_formula_owner_uuid_ = aggregate_formula_owner_uuid;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryModelArchive.aggregate_formula_owner_uuid)
}

// optional .TSP.Reference summary_cell_vendor = 5;
inline bool SummaryModelArchive::_internal_has_summary_cell_vendor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || summary_cell_vendor_ != nullptr);
  return value;
}
inline bool SummaryModelArchive::has_summary_cell_vendor() const {
  return _internal_has_summary_cell_vendor();
}
inline const ::TSP::Reference& SummaryModelArchive::_internal_summary_cell_vendor() const {
  const ::TSP::Reference* p = summary_cell_vendor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SummaryModelArchive::summary_cell_vendor() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_cell_vendor)
  return _internal_summary_cell_vendor();
}
inline void SummaryModelArchive::unsafe_arena_set_allocated_summary_cell_vendor(
    ::TSP::Reference* summary_cell_vendor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_cell_vendor_);
  }
  summary_cell_vendor_ = summary_cell_vendor;
  if (summary_cell_vendor) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryModelArchive.summary_cell_vendor)
}
inline ::TSP::Reference* SummaryModelArchive::release_summary_cell_vendor() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = summary_cell_vendor_;
  summary_cell_vendor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SummaryModelArchive::unsafe_arena_release_summary_cell_vendor() {
  // @@protoc_insertion_point(field_release:TST.SummaryModelArchive.summary_cell_vendor)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = summary_cell_vendor_;
  summary_cell_vendor_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SummaryModelArchive::_internal_mutable_summary_cell_vendor() {
  _has_bits_[0] |= 0x00000010u;
  if (summary_cell_vendor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    summary_cell_vendor_ = p;
  }
  return summary_cell_vendor_;
}
inline ::TSP::Reference* SummaryModelArchive::mutable_summary_cell_vendor() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryModelArchive.summary_cell_vendor)
  return _internal_mutable_summary_cell_vendor();
}
inline void SummaryModelArchive::set_allocated_summary_cell_vendor(::TSP::Reference* summary_cell_vendor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_cell_vendor_);
  }
  if (summary_cell_vendor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_cell_vendor)->GetArena();
    if (message_arena != submessage_arena) {
      summary_cell_vendor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary_cell_vendor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  summary_cell_vendor_ = summary_cell_vendor;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryModelArchive.summary_cell_vendor)
}

// optional double category_column_width = 10;
inline bool SummaryModelArchive::_internal_has_category_column_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_category_column_width() const {
  return _internal_has_category_column_width();
}
inline void SummaryModelArchive::clear_category_column_width() {
  category_column_width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SummaryModelArchive::_internal_category_column_width() const {
  return category_column_width_;
}
inline double SummaryModelArchive::category_column_width() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.category_column_width)
  return _internal_category_column_width();
}
inline void SummaryModelArchive::_internal_set_category_column_width(double value) {
  _has_bits_[0] |= 0x00000020u;
  category_column_width_ = value;
}
inline void SummaryModelArchive::set_category_column_width(double value) {
  _internal_set_category_column_width(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.category_column_width)
}

// optional double summary_row_level_1_height = 11 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_row_level_1_height() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_row_level_1_height() const {
  return _internal_has_summary_row_level_1_height();
}
inline void SummaryModelArchive::clear_summary_row_level_1_height() {
  summary_row_level_1_height_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SummaryModelArchive::_internal_summary_row_level_1_height() const {
  return summary_row_level_1_height_;
}
inline double SummaryModelArchive::summary_row_level_1_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_row_level_1_height)
  return _internal_summary_row_level_1_height();
}
inline void SummaryModelArchive::_internal_set_summary_row_level_1_height(double value) {
  _has_bits_[0] |= 0x00000040u;
  summary_row_level_1_height_ = value;
}
inline void SummaryModelArchive::set_summary_row_level_1_height(double value) {
  _internal_set_summary_row_level_1_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_row_level_1_height)
}

// optional double summary_row_level_2_height = 12 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_row_level_2_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_row_level_2_height() const {
  return _internal_has_summary_row_level_2_height();
}
inline void SummaryModelArchive::clear_summary_row_level_2_height() {
  summary_row_level_2_height_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SummaryModelArchive::_internal_summary_row_level_2_height() const {
  return summary_row_level_2_height_;
}
inline double SummaryModelArchive::summary_row_level_2_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_row_level_2_height)
  return _internal_summary_row_level_2_height();
}
inline void SummaryModelArchive::_internal_set_summary_row_level_2_height(double value) {
  _has_bits_[0] |= 0x00000080u;
  summary_row_level_2_height_ = value;
}
inline void SummaryModelArchive::set_summary_row_level_2_height(double value) {
  _internal_set_summary_row_level_2_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_row_level_2_height)
}

// optional double summary_row_level_3_height = 13 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_row_level_3_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_row_level_3_height() const {
  return _internal_has_summary_row_level_3_height();
}
inline void SummaryModelArchive::clear_summary_row_level_3_height() {
  summary_row_level_3_height_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SummaryModelArchive::_internal_summary_row_level_3_height() const {
  return summary_row_level_3_height_;
}
inline double SummaryModelArchive::summary_row_level_3_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_row_level_3_height)
  return _internal_summary_row_level_3_height();
}
inline void SummaryModelArchive::_internal_set_summary_row_level_3_height(double value) {
  _has_bits_[0] |= 0x00000100u;
  summary_row_level_3_height_ = value;
}
inline void SummaryModelArchive::set_summary_row_level_3_height(double value) {
  _internal_set_summary_row_level_3_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_row_level_3_height)
}

// optional double summary_row_level_4_height = 14 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_row_level_4_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_row_level_4_height() const {
  return _internal_has_summary_row_level_4_height();
}
inline void SummaryModelArchive::clear_summary_row_level_4_height() {
  summary_row_level_4_height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SummaryModelArchive::_internal_summary_row_level_4_height() const {
  return summary_row_level_4_height_;
}
inline double SummaryModelArchive::summary_row_level_4_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_row_level_4_height)
  return _internal_summary_row_level_4_height();
}
inline void SummaryModelArchive::_internal_set_summary_row_level_4_height(double value) {
  _has_bits_[0] |= 0x00000200u;
  summary_row_level_4_height_ = value;
}
inline void SummaryModelArchive::set_summary_row_level_4_height(double value) {
  _internal_set_summary_row_level_4_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_row_level_4_height)
}

// optional double summary_row_level_5_height = 15 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_row_level_5_height() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_row_level_5_height() const {
  return _internal_has_summary_row_level_5_height();
}
inline void SummaryModelArchive::clear_summary_row_level_5_height() {
  summary_row_level_5_height_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SummaryModelArchive::_internal_summary_row_level_5_height() const {
  return summary_row_level_5_height_;
}
inline double SummaryModelArchive::summary_row_level_5_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_row_level_5_height)
  return _internal_summary_row_level_5_height();
}
inline void SummaryModelArchive::_internal_set_summary_row_level_5_height(double value) {
  _has_bits_[0] |= 0x00000400u;
  summary_row_level_5_height_ = value;
}
inline void SummaryModelArchive::set_summary_row_level_5_height(double value) {
  _internal_set_summary_row_level_5_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_row_level_5_height)
}

// optional double summary_label_row_level_1_height = 16 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_label_row_level_1_height() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_label_row_level_1_height() const {
  return _internal_has_summary_label_row_level_1_height();
}
inline void SummaryModelArchive::clear_summary_label_row_level_1_height() {
  summary_label_row_level_1_height_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SummaryModelArchive::_internal_summary_label_row_level_1_height() const {
  return summary_label_row_level_1_height_;
}
inline double SummaryModelArchive::summary_label_row_level_1_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_label_row_level_1_height)
  return _internal_summary_label_row_level_1_height();
}
inline void SummaryModelArchive::_internal_set_summary_label_row_level_1_height(double value) {
  _has_bits_[0] |= 0x00000800u;
  summary_label_row_level_1_height_ = value;
}
inline void SummaryModelArchive::set_summary_label_row_level_1_height(double value) {
  _internal_set_summary_label_row_level_1_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_label_row_level_1_height)
}

// optional double summary_label_row_level_2_height = 17 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_label_row_level_2_height() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_label_row_level_2_height() const {
  return _internal_has_summary_label_row_level_2_height();
}
inline void SummaryModelArchive::clear_summary_label_row_level_2_height() {
  summary_label_row_level_2_height_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SummaryModelArchive::_internal_summary_label_row_level_2_height() const {
  return summary_label_row_level_2_height_;
}
inline double SummaryModelArchive::summary_label_row_level_2_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_label_row_level_2_height)
  return _internal_summary_label_row_level_2_height();
}
inline void SummaryModelArchive::_internal_set_summary_label_row_level_2_height(double value) {
  _has_bits_[0] |= 0x00001000u;
  summary_label_row_level_2_height_ = value;
}
inline void SummaryModelArchive::set_summary_label_row_level_2_height(double value) {
  _internal_set_summary_label_row_level_2_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_label_row_level_2_height)
}

// optional double summary_label_row_level_3_height = 18 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_label_row_level_3_height() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_label_row_level_3_height() const {
  return _internal_has_summary_label_row_level_3_height();
}
inline void SummaryModelArchive::clear_summary_label_row_level_3_height() {
  summary_label_row_level_3_height_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SummaryModelArchive::_internal_summary_label_row_level_3_height() const {
  return summary_label_row_level_3_height_;
}
inline double SummaryModelArchive::summary_label_row_level_3_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_label_row_level_3_height)
  return _internal_summary_label_row_level_3_height();
}
inline void SummaryModelArchive::_internal_set_summary_label_row_level_3_height(double value) {
  _has_bits_[0] |= 0x00002000u;
  summary_label_row_level_3_height_ = value;
}
inline void SummaryModelArchive::set_summary_label_row_level_3_height(double value) {
  _internal_set_summary_label_row_level_3_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_label_row_level_3_height)
}

// optional double summary_label_row_level_4_height = 19 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_label_row_level_4_height() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_label_row_level_4_height() const {
  return _internal_has_summary_label_row_level_4_height();
}
inline void SummaryModelArchive::clear_summary_label_row_level_4_height() {
  summary_label_row_level_4_height_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SummaryModelArchive::_internal_summary_label_row_level_4_height() const {
  return summary_label_row_level_4_height_;
}
inline double SummaryModelArchive::summary_label_row_level_4_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_label_row_level_4_height)
  return _internal_summary_label_row_level_4_height();
}
inline void SummaryModelArchive::_internal_set_summary_label_row_level_4_height(double value) {
  _has_bits_[0] |= 0x00004000u;
  summary_label_row_level_4_height_ = value;
}
inline void SummaryModelArchive::set_summary_label_row_level_4_height(double value) {
  _internal_set_summary_label_row_level_4_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_label_row_level_4_height)
}

// optional double summary_label_row_level_5_height = 20 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_summary_label_row_level_5_height() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_summary_label_row_level_5_height() const {
  return _internal_has_summary_label_row_level_5_height();
}
inline void SummaryModelArchive::clear_summary_label_row_level_5_height() {
  summary_label_row_level_5_height_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SummaryModelArchive::_internal_summary_label_row_level_5_height() const {
  return summary_label_row_level_5_height_;
}
inline double SummaryModelArchive::summary_label_row_level_5_height() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_label_row_level_5_height)
  return _internal_summary_label_row_level_5_height();
}
inline void SummaryModelArchive::_internal_set_summary_label_row_level_5_height(double value) {
  _has_bits_[0] |= 0x00008000u;
  summary_label_row_level_5_height_ = value;
}
inline void SummaryModelArchive::set_summary_label_row_level_5_height(double value) {
  _internal_set_summary_label_row_level_5_height(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_label_row_level_5_height)
}

// optional uint32 label_row_visibility_1 = 21 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_label_row_visibility_1() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_label_row_visibility_1() const {
  return _internal_has_label_row_visibility_1();
}
inline void SummaryModelArchive::clear_label_row_visibility_1() {
  label_row_visibility_1_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::_internal_label_row_visibility_1() const {
  return label_row_visibility_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::label_row_visibility_1() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_visibility_1)
  return _internal_label_row_visibility_1();
}
inline void SummaryModelArchive::_internal_set_label_row_visibility_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  label_row_visibility_1_ = value;
}
inline void SummaryModelArchive::set_label_row_visibility_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label_row_visibility_1(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_visibility_1)
}

// optional uint32 label_row_visibility_2 = 22 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_label_row_visibility_2() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_label_row_visibility_2() const {
  return _internal_has_label_row_visibility_2();
}
inline void SummaryModelArchive::clear_label_row_visibility_2() {
  label_row_visibility_2_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::_internal_label_row_visibility_2() const {
  return label_row_visibility_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::label_row_visibility_2() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_visibility_2)
  return _internal_label_row_visibility_2();
}
inline void SummaryModelArchive::_internal_set_label_row_visibility_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  label_row_visibility_2_ = value;
}
inline void SummaryModelArchive::set_label_row_visibility_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label_row_visibility_2(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_visibility_2)
}

// optional uint32 label_row_visibility_3 = 23 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_label_row_visibility_3() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_label_row_visibility_3() const {
  return _internal_has_label_row_visibility_3();
}
inline void SummaryModelArchive::clear_label_row_visibility_3() {
  label_row_visibility_3_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::_internal_label_row_visibility_3() const {
  return label_row_visibility_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::label_row_visibility_3() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_visibility_3)
  return _internal_label_row_visibility_3();
}
inline void SummaryModelArchive::_internal_set_label_row_visibility_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  label_row_visibility_3_ = value;
}
inline void SummaryModelArchive::set_label_row_visibility_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label_row_visibility_3(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_visibility_3)
}

// optional uint32 label_row_visibility_4 = 24 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_label_row_visibility_4() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_label_row_visibility_4() const {
  return _internal_has_label_row_visibility_4();
}
inline void SummaryModelArchive::clear_label_row_visibility_4() {
  label_row_visibility_4_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::_internal_label_row_visibility_4() const {
  return label_row_visibility_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::label_row_visibility_4() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_visibility_4)
  return _internal_label_row_visibility_4();
}
inline void SummaryModelArchive::_internal_set_label_row_visibility_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  label_row_visibility_4_ = value;
}
inline void SummaryModelArchive::set_label_row_visibility_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label_row_visibility_4(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_visibility_4)
}

// optional uint32 label_row_visibility_5 = 25 [deprecated = true];
inline bool SummaryModelArchive::_internal_has_label_row_visibility_5() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SummaryModelArchive::has_label_row_visibility_5() const {
  return _internal_has_label_row_visibility_5();
}
inline void SummaryModelArchive::clear_label_row_visibility_5() {
  label_row_visibility_5_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::_internal_label_row_visibility_5() const {
  return label_row_visibility_5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::label_row_visibility_5() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_visibility_5)
  return _internal_label_row_visibility_5();
}
inline void SummaryModelArchive::_internal_set_label_row_visibility_5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  label_row_visibility_5_ = value;
}
inline void SummaryModelArchive::set_label_row_visibility_5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label_row_visibility_5(value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_visibility_5)
}

// repeated double summary_row_height_list = 26;
inline int SummaryModelArchive::_internal_summary_row_height_list_size() const {
  return summary_row_height_list_.size();
}
inline int SummaryModelArchive::summary_row_height_list_size() const {
  return _internal_summary_row_height_list_size();
}
inline void SummaryModelArchive::clear_summary_row_height_list() {
  summary_row_height_list_.Clear();
}
inline double SummaryModelArchive::_internal_summary_row_height_list(int index) const {
  return summary_row_height_list_.Get(index);
}
inline double SummaryModelArchive::summary_row_height_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.summary_row_height_list)
  return _internal_summary_row_height_list(index);
}
inline void SummaryModelArchive::set_summary_row_height_list(int index, double value) {
  summary_row_height_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.summary_row_height_list)
}
inline void SummaryModelArchive::_internal_add_summary_row_height_list(double value) {
  summary_row_height_list_.Add(value);
}
inline void SummaryModelArchive::add_summary_row_height_list(double value) {
  _internal_add_summary_row_height_list(value);
  // @@protoc_insertion_point(field_add:TST.SummaryModelArchive.summary_row_height_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelArchive::_internal_summary_row_height_list() const {
  return summary_row_height_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelArchive::summary_row_height_list() const {
  // @@protoc_insertion_point(field_list:TST.SummaryModelArchive.summary_row_height_list)
  return _internal_summary_row_height_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelArchive::_internal_mutable_summary_row_height_list() {
  return &summary_row_height_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelArchive::mutable_summary_row_height_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryModelArchive.summary_row_height_list)
  return _internal_mutable_summary_row_height_list();
}

// repeated double label_row_height_list = 27;
inline int SummaryModelArchive::_internal_label_row_height_list_size() const {
  return label_row_height_list_.size();
}
inline int SummaryModelArchive::label_row_height_list_size() const {
  return _internal_label_row_height_list_size();
}
inline void SummaryModelArchive::clear_label_row_height_list() {
  label_row_height_list_.Clear();
}
inline double SummaryModelArchive::_internal_label_row_height_list(int index) const {
  return label_row_height_list_.Get(index);
}
inline double SummaryModelArchive::label_row_height_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_height_list)
  return _internal_label_row_height_list(index);
}
inline void SummaryModelArchive::set_label_row_height_list(int index, double value) {
  label_row_height_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_height_list)
}
inline void SummaryModelArchive::_internal_add_label_row_height_list(double value) {
  label_row_height_list_.Add(value);
}
inline void SummaryModelArchive::add_label_row_height_list(double value) {
  _internal_add_label_row_height_list(value);
  // @@protoc_insertion_point(field_add:TST.SummaryModelArchive.label_row_height_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelArchive::_internal_label_row_height_list() const {
  return label_row_height_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelArchive::label_row_height_list() const {
  // @@protoc_insertion_point(field_list:TST.SummaryModelArchive.label_row_height_list)
  return _internal_label_row_height_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelArchive::_internal_mutable_label_row_height_list() {
  return &label_row_height_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelArchive::mutable_label_row_height_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryModelArchive.label_row_height_list)
  return _internal_mutable_label_row_height_list();
}

// repeated uint32 label_row_visibility_list = 28;
inline int SummaryModelArchive::_internal_label_row_visibility_list_size() const {
  return label_row_visibility_list_.size();
}
inline int SummaryModelArchive::label_row_visibility_list_size() const {
  return _internal_label_row_visibility_list_size();
}
inline void SummaryModelArchive::clear_label_row_visibility_list() {
  label_row_visibility_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::_internal_label_row_visibility_list(int index) const {
  return label_row_visibility_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelArchive::label_row_visibility_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelArchive.label_row_visibility_list)
  return _internal_label_row_visibility_list(index);
}
inline void SummaryModelArchive::set_label_row_visibility_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  label_row_visibility_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelArchive.label_row_visibility_list)
}
inline void SummaryModelArchive::_internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  label_row_visibility_list_.Add(value);
}
inline void SummaryModelArchive::add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_label_row_visibility_list(value);
  // @@protoc_insertion_point(field_add:TST.SummaryModelArchive.label_row_visibility_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SummaryModelArchive::_internal_label_row_visibility_list() const {
  return label_row_visibility_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SummaryModelArchive::label_row_visibility_list() const {
  // @@protoc_insertion_point(field_list:TST.SummaryModelArchive.label_row_visibility_list)
  return _internal_label_row_visibility_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SummaryModelArchive::_internal_mutable_label_row_visibility_list() {
  return &label_row_visibility_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SummaryModelArchive::mutable_label_row_visibility_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryModelArchive.label_row_visibility_list)
  return _internal_mutable_label_row_visibility_list();
}

// -------------------------------------------------------------------

// SummaryModelGroupByChangeStateArchive

// optional .TSP.Reference cell_map = 1;
inline bool SummaryModelGroupByChangeStateArchive::_internal_has_cell_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_map_ != nullptr);
  return value;
}
inline bool SummaryModelGroupByChangeStateArchive::has_cell_map() const {
  return _internal_has_cell_map();
}
inline const ::TSP::Reference& SummaryModelGroupByChangeStateArchive::_internal_cell_map() const {
  const ::TSP::Reference* p = cell_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SummaryModelGroupByChangeStateArchive::cell_map() const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelGroupByChangeStateArchive.cell_map)
  return _internal_cell_map();
}
inline void SummaryModelGroupByChangeStateArchive::unsafe_arena_set_allocated_cell_map(
    ::TSP::Reference* cell_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_map_);
  }
  cell_map_ = cell_map;
  if (cell_map) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryModelGroupByChangeStateArchive.cell_map)
}
inline ::TSP::Reference* SummaryModelGroupByChangeStateArchive::release_cell_map() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = cell_map_;
  cell_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SummaryModelGroupByChangeStateArchive::unsafe_arena_release_cell_map() {
  // @@protoc_insertion_point(field_release:TST.SummaryModelGroupByChangeStateArchive.cell_map)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = cell_map_;
  cell_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SummaryModelGroupByChangeStateArchive::_internal_mutable_cell_map() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    cell_map_ = p;
  }
  return cell_map_;
}
inline ::TSP::Reference* SummaryModelGroupByChangeStateArchive::mutable_cell_map() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryModelGroupByChangeStateArchive.cell_map)
  return _internal_mutable_cell_map();
}
inline void SummaryModelGroupByChangeStateArchive::set_allocated_cell_map(::TSP::Reference* cell_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_map_);
  }
  if (cell_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_map)->GetArena();
    if (message_arena != submessage_arena) {
      cell_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_map_ = cell_map;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryModelGroupByChangeStateArchive.cell_map)
}

// repeated double summary_row_height_list = 2;
inline int SummaryModelGroupByChangeStateArchive::_internal_summary_row_height_list_size() const {
  return summary_row_height_list_.size();
}
inline int SummaryModelGroupByChangeStateArchive::summary_row_height_list_size() const {
  return _internal_summary_row_height_list_size();
}
inline void SummaryModelGroupByChangeStateArchive::clear_summary_row_height_list() {
  summary_row_height_list_.Clear();
}
inline double SummaryModelGroupByChangeStateArchive::_internal_summary_row_height_list(int index) const {
  return summary_row_height_list_.Get(index);
}
inline double SummaryModelGroupByChangeStateArchive::summary_row_height_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelGroupByChangeStateArchive.summary_row_height_list)
  return _internal_summary_row_height_list(index);
}
inline void SummaryModelGroupByChangeStateArchive::set_summary_row_height_list(int index, double value) {
  summary_row_height_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelGroupByChangeStateArchive.summary_row_height_list)
}
inline void SummaryModelGroupByChangeStateArchive::_internal_add_summary_row_height_list(double value) {
  summary_row_height_list_.Add(value);
}
inline void SummaryModelGroupByChangeStateArchive::add_summary_row_height_list(double value) {
  _internal_add_summary_row_height_list(value);
  // @@protoc_insertion_point(field_add:TST.SummaryModelGroupByChangeStateArchive.summary_row_height_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelGroupByChangeStateArchive::_internal_summary_row_height_list() const {
  return summary_row_height_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelGroupByChangeStateArchive::summary_row_height_list() const {
  // @@protoc_insertion_point(field_list:TST.SummaryModelGroupByChangeStateArchive.summary_row_height_list)
  return _internal_summary_row_height_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelGroupByChangeStateArchive::_internal_mutable_summary_row_height_list() {
  return &summary_row_height_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelGroupByChangeStateArchive::mutable_summary_row_height_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryModelGroupByChangeStateArchive.summary_row_height_list)
  return _internal_mutable_summary_row_height_list();
}

// repeated double label_row_height_list = 3;
inline int SummaryModelGroupByChangeStateArchive::_internal_label_row_height_list_size() const {
  return label_row_height_list_.size();
}
inline int SummaryModelGroupByChangeStateArchive::label_row_height_list_size() const {
  return _internal_label_row_height_list_size();
}
inline void SummaryModelGroupByChangeStateArchive::clear_label_row_height_list() {
  label_row_height_list_.Clear();
}
inline double SummaryModelGroupByChangeStateArchive::_internal_label_row_height_list(int index) const {
  return label_row_height_list_.Get(index);
}
inline double SummaryModelGroupByChangeStateArchive::label_row_height_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelGroupByChangeStateArchive.label_row_height_list)
  return _internal_label_row_height_list(index);
}
inline void SummaryModelGroupByChangeStateArchive::set_label_row_height_list(int index, double value) {
  label_row_height_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelGroupByChangeStateArchive.label_row_height_list)
}
inline void SummaryModelGroupByChangeStateArchive::_internal_add_label_row_height_list(double value) {
  label_row_height_list_.Add(value);
}
inline void SummaryModelGroupByChangeStateArchive::add_label_row_height_list(double value) {
  _internal_add_label_row_height_list(value);
  // @@protoc_insertion_point(field_add:TST.SummaryModelGroupByChangeStateArchive.label_row_height_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelGroupByChangeStateArchive::_internal_label_row_height_list() const {
  return label_row_height_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryModelGroupByChangeStateArchive::label_row_height_list() const {
  // @@protoc_insertion_point(field_list:TST.SummaryModelGroupByChangeStateArchive.label_row_height_list)
  return _internal_label_row_height_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelGroupByChangeStateArchive::_internal_mutable_label_row_height_list() {
  return &label_row_height_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryModelGroupByChangeStateArchive::mutable_label_row_height_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryModelGroupByChangeStateArchive.label_row_height_list)
  return _internal_mutable_label_row_height_list();
}

// repeated uint32 label_row_visibility_list = 4;
inline int SummaryModelGroupByChangeStateArchive::_internal_label_row_visibility_list_size() const {
  return label_row_visibility_list_.size();
}
inline int SummaryModelGroupByChangeStateArchive::label_row_visibility_list_size() const {
  return _internal_label_row_visibility_list_size();
}
inline void SummaryModelGroupByChangeStateArchive::clear_label_row_visibility_list() {
  label_row_visibility_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelGroupByChangeStateArchive::_internal_label_row_visibility_list(int index) const {
  return label_row_visibility_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryModelGroupByChangeStateArchive::label_row_visibility_list(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryModelGroupByChangeStateArchive.label_row_visibility_list)
  return _internal_label_row_visibility_list(index);
}
inline void SummaryModelGroupByChangeStateArchive::set_label_row_visibility_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  label_row_visibility_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.SummaryModelGroupByChangeStateArchive.label_row_visibility_list)
}
inline void SummaryModelGroupByChangeStateArchive::_internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  label_row_visibility_list_.Add(value);
}
inline void SummaryModelGroupByChangeStateArchive::add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_label_row_visibility_list(value);
  // @@protoc_insertion_point(field_add:TST.SummaryModelGroupByChangeStateArchive.label_row_visibility_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SummaryModelGroupByChangeStateArchive::_internal_label_row_visibility_list() const {
  return label_row_visibility_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SummaryModelGroupByChangeStateArchive::label_row_visibility_list() const {
  // @@protoc_insertion_point(field_list:TST.SummaryModelGroupByChangeStateArchive.label_row_visibility_list)
  return _internal_label_row_visibility_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SummaryModelGroupByChangeStateArchive::_internal_mutable_label_row_visibility_list() {
  return &label_row_visibility_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SummaryModelGroupByChangeStateArchive::mutable_label_row_visibility_list() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryModelGroupByChangeStateArchive.label_row_visibility_list)
  return _internal_mutable_label_row_visibility_list();
}

// -------------------------------------------------------------------

// ColumnRowUIDMapArchive

// repeated .TSP.UUID sorted_column_uids = 1;
inline int ColumnRowUIDMapArchive::_internal_sorted_column_uids_size() const {
  return sorted_column_uids_.size();
}
inline int ColumnRowUIDMapArchive::sorted_column_uids_size() const {
  return _internal_sorted_column_uids_size();
}
inline ::TSP::UUID* ColumnRowUIDMapArchive::mutable_sorted_column_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowUIDMapArchive.sorted_column_uids)
  return sorted_column_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ColumnRowUIDMapArchive::mutable_sorted_column_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowUIDMapArchive.sorted_column_uids)
  return &sorted_column_uids_;
}
inline const ::TSP::UUID& ColumnRowUIDMapArchive::_internal_sorted_column_uids(int index) const {
  return sorted_column_uids_.Get(index);
}
inline const ::TSP::UUID& ColumnRowUIDMapArchive::sorted_column_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowUIDMapArchive.sorted_column_uids)
  return _internal_sorted_column_uids(index);
}
inline ::TSP::UUID* ColumnRowUIDMapArchive::_internal_add_sorted_column_uids() {
  return sorted_column_uids_.Add();
}
inline ::TSP::UUID* ColumnRowUIDMapArchive::add_sorted_column_uids() {
  // @@protoc_insertion_point(field_add:TST.ColumnRowUIDMapArchive.sorted_column_uids)
  return _internal_add_sorted_column_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ColumnRowUIDMapArchive::sorted_column_uids() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowUIDMapArchive.sorted_column_uids)
  return sorted_column_uids_;
}

// repeated uint32 column_index_for_uid = 2;
inline int ColumnRowUIDMapArchive::_internal_column_index_for_uid_size() const {
  return column_index_for_uid_.size();
}
inline int ColumnRowUIDMapArchive::column_index_for_uid_size() const {
  return _internal_column_index_for_uid_size();
}
inline void ColumnRowUIDMapArchive::clear_column_index_for_uid() {
  column_index_for_uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::_internal_column_index_for_uid(int index) const {
  return column_index_for_uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::column_index_for_uid(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowUIDMapArchive.column_index_for_uid)
  return _internal_column_index_for_uid(index);
}
inline void ColumnRowUIDMapArchive::set_column_index_for_uid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  column_index_for_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowUIDMapArchive.column_index_for_uid)
}
inline void ColumnRowUIDMapArchive::_internal_add_column_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  column_index_for_uid_.Add(value);
}
inline void ColumnRowUIDMapArchive::add_column_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_column_index_for_uid(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowUIDMapArchive.column_index_for_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::_internal_column_index_for_uid() const {
  return column_index_for_uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::column_index_for_uid() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowUIDMapArchive.column_index_for_uid)
  return _internal_column_index_for_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::_internal_mutable_column_index_for_uid() {
  return &column_index_for_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::mutable_column_index_for_uid() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowUIDMapArchive.column_index_for_uid)
  return _internal_mutable_column_index_for_uid();
}

// repeated uint32 column_uid_for_index = 3;
inline int ColumnRowUIDMapArchive::_internal_column_uid_for_index_size() const {
  return column_uid_for_index_.size();
}
inline int ColumnRowUIDMapArchive::column_uid_for_index_size() const {
  return _internal_column_uid_for_index_size();
}
inline void ColumnRowUIDMapArchive::clear_column_uid_for_index() {
  column_uid_for_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::_internal_column_uid_for_index(int index) const {
  return column_uid_for_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::column_uid_for_index(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowUIDMapArchive.column_uid_for_index)
  return _internal_column_uid_for_index(index);
}
inline void ColumnRowUIDMapArchive::set_column_uid_for_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  column_uid_for_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowUIDMapArchive.column_uid_for_index)
}
inline void ColumnRowUIDMapArchive::_internal_add_column_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  column_uid_for_index_.Add(value);
}
inline void ColumnRowUIDMapArchive::add_column_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_column_uid_for_index(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowUIDMapArchive.column_uid_for_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::_internal_column_uid_for_index() const {
  return column_uid_for_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::column_uid_for_index() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowUIDMapArchive.column_uid_for_index)
  return _internal_column_uid_for_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::_internal_mutable_column_uid_for_index() {
  return &column_uid_for_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::mutable_column_uid_for_index() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowUIDMapArchive.column_uid_for_index)
  return _internal_mutable_column_uid_for_index();
}

// repeated .TSP.UUID sorted_row_uids = 4;
inline int ColumnRowUIDMapArchive::_internal_sorted_row_uids_size() const {
  return sorted_row_uids_.size();
}
inline int ColumnRowUIDMapArchive::sorted_row_uids_size() const {
  return _internal_sorted_row_uids_size();
}
inline ::TSP::UUID* ColumnRowUIDMapArchive::mutable_sorted_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnRowUIDMapArchive.sorted_row_uids)
  return sorted_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ColumnRowUIDMapArchive::mutable_sorted_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowUIDMapArchive.sorted_row_uids)
  return &sorted_row_uids_;
}
inline const ::TSP::UUID& ColumnRowUIDMapArchive::_internal_sorted_row_uids(int index) const {
  return sorted_row_uids_.Get(index);
}
inline const ::TSP::UUID& ColumnRowUIDMapArchive::sorted_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowUIDMapArchive.sorted_row_uids)
  return _internal_sorted_row_uids(index);
}
inline ::TSP::UUID* ColumnRowUIDMapArchive::_internal_add_sorted_row_uids() {
  return sorted_row_uids_.Add();
}
inline ::TSP::UUID* ColumnRowUIDMapArchive::add_sorted_row_uids() {
  // @@protoc_insertion_point(field_add:TST.ColumnRowUIDMapArchive.sorted_row_uids)
  return _internal_add_sorted_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ColumnRowUIDMapArchive::sorted_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowUIDMapArchive.sorted_row_uids)
  return sorted_row_uids_;
}

// repeated uint32 row_index_for_uid = 5;
inline int ColumnRowUIDMapArchive::_internal_row_index_for_uid_size() const {
  return row_index_for_uid_.size();
}
inline int ColumnRowUIDMapArchive::row_index_for_uid_size() const {
  return _internal_row_index_for_uid_size();
}
inline void ColumnRowUIDMapArchive::clear_row_index_for_uid() {
  row_index_for_uid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::_internal_row_index_for_uid(int index) const {
  return row_index_for_uid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::row_index_for_uid(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowUIDMapArchive.row_index_for_uid)
  return _internal_row_index_for_uid(index);
}
inline void ColumnRowUIDMapArchive::set_row_index_for_uid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  row_index_for_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowUIDMapArchive.row_index_for_uid)
}
inline void ColumnRowUIDMapArchive::_internal_add_row_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  row_index_for_uid_.Add(value);
}
inline void ColumnRowUIDMapArchive::add_row_index_for_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_row_index_for_uid(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowUIDMapArchive.row_index_for_uid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::_internal_row_index_for_uid() const {
  return row_index_for_uid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::row_index_for_uid() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowUIDMapArchive.row_index_for_uid)
  return _internal_row_index_for_uid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::_internal_mutable_row_index_for_uid() {
  return &row_index_for_uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::mutable_row_index_for_uid() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowUIDMapArchive.row_index_for_uid)
  return _internal_mutable_row_index_for_uid();
}

// repeated uint32 row_uid_for_index = 6;
inline int ColumnRowUIDMapArchive::_internal_row_uid_for_index_size() const {
  return row_uid_for_index_.size();
}
inline int ColumnRowUIDMapArchive::row_uid_for_index_size() const {
  return _internal_row_uid_for_index_size();
}
inline void ColumnRowUIDMapArchive::clear_row_uid_for_index() {
  row_uid_for_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::_internal_row_uid_for_index(int index) const {
  return row_uid_for_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnRowUIDMapArchive::row_uid_for_index(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnRowUIDMapArchive.row_uid_for_index)
  return _internal_row_uid_for_index(index);
}
inline void ColumnRowUIDMapArchive::set_row_uid_for_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  row_uid_for_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.ColumnRowUIDMapArchive.row_uid_for_index)
}
inline void ColumnRowUIDMapArchive::_internal_add_row_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  row_uid_for_index_.Add(value);
}
inline void ColumnRowUIDMapArchive::add_row_uid_for_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_row_uid_for_index(value);
  // @@protoc_insertion_point(field_add:TST.ColumnRowUIDMapArchive.row_uid_for_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::_internal_row_uid_for_index() const {
  return row_uid_for_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ColumnRowUIDMapArchive::row_uid_for_index() const {
  // @@protoc_insertion_point(field_list:TST.ColumnRowUIDMapArchive.row_uid_for_index)
  return _internal_row_uid_for_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::_internal_mutable_row_uid_for_index() {
  return &row_uid_for_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ColumnRowUIDMapArchive::mutable_row_uid_for_index() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnRowUIDMapArchive.row_uid_for_index)
  return _internal_mutable_row_uid_for_index();
}

// -------------------------------------------------------------------

// StrokeLayerArchive_StrokeRunArchive

// optional int32 origin = 1;
inline bool StrokeLayerArchive_StrokeRunArchive::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StrokeLayerArchive_StrokeRunArchive::has_origin() const {
  return _internal_has_origin();
}
inline void StrokeLayerArchive_StrokeRunArchive::clear_origin() {
  origin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokeLayerArchive_StrokeRunArchive::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokeLayerArchive_StrokeRunArchive::origin() const {
  // @@protoc_insertion_point(field_get:TST.StrokeLayerArchive.StrokeRunArchive.origin)
  return _internal_origin();
}
inline void StrokeLayerArchive_StrokeRunArchive::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  origin_ = value;
}
inline void StrokeLayerArchive_StrokeRunArchive::set_origin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:TST.StrokeLayerArchive.StrokeRunArchive.origin)
}

// optional uint32 length = 2;
inline bool StrokeLayerArchive_StrokeRunArchive::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StrokeLayerArchive_StrokeRunArchive::has_length() const {
  return _internal_has_length();
}
inline void StrokeLayerArchive_StrokeRunArchive::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeLayerArchive_StrokeRunArchive::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeLayerArchive_StrokeRunArchive::length() const {
  // @@protoc_insertion_point(field_get:TST.StrokeLayerArchive.StrokeRunArchive.length)
  return _internal_length();
}
inline void StrokeLayerArchive_StrokeRunArchive::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void StrokeLayerArchive_StrokeRunArchive::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:TST.StrokeLayerArchive.StrokeRunArchive.length)
}

// optional .TSD.StrokeArchive stroke = 3;
inline bool StrokeLayerArchive_StrokeRunArchive::_internal_has_stroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stroke_ != nullptr);
  return value;
}
inline bool StrokeLayerArchive_StrokeRunArchive::has_stroke() const {
  return _internal_has_stroke();
}
inline const ::TSD::StrokeArchive& StrokeLayerArchive_StrokeRunArchive::_internal_stroke() const {
  const ::TSD::StrokeArchive* p = stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& StrokeLayerArchive_StrokeRunArchive::stroke() const {
  // @@protoc_insertion_point(field_get:TST.StrokeLayerArchive.StrokeRunArchive.stroke)
  return _internal_stroke();
}
inline void StrokeLayerArchive_StrokeRunArchive::unsafe_arena_set_allocated_stroke(
    ::TSD::StrokeArchive* stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_);
  }
  stroke_ = stroke;
  if (stroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StrokeLayerArchive.StrokeRunArchive.stroke)
}
inline ::TSD::StrokeArchive* StrokeLayerArchive_StrokeRunArchive::release_stroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* StrokeLayerArchive_StrokeRunArchive::unsafe_arena_release_stroke() {
  // @@protoc_insertion_point(field_release:TST.StrokeLayerArchive.StrokeRunArchive.stroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = stroke_;
  stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* StrokeLayerArchive_StrokeRunArchive::_internal_mutable_stroke() {
  _has_bits_[0] |= 0x00000001u;
  if (stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    stroke_ = p;
  }
  return stroke_;
}
inline ::TSD::StrokeArchive* StrokeLayerArchive_StrokeRunArchive::mutable_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.StrokeLayerArchive.StrokeRunArchive.stroke)
  return _internal_mutable_stroke();
}
inline void StrokeLayerArchive_StrokeRunArchive::set_allocated_stroke(::TSD::StrokeArchive* stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke_);
  }
  if (stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stroke)->GetArena();
    if (message_arena != submessage_arena) {
      stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stroke_ = stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.StrokeLayerArchive.StrokeRunArchive.stroke)
}

// optional uint32 order = 4;
inline bool StrokeLayerArchive_StrokeRunArchive::_internal_has_order() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StrokeLayerArchive_StrokeRunArchive::has_order() const {
  return _internal_has_order();
}
inline void StrokeLayerArchive_StrokeRunArchive::clear_order() {
  order_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeLayerArchive_StrokeRunArchive::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeLayerArchive_StrokeRunArchive::order() const {
  // @@protoc_insertion_point(field_get:TST.StrokeLayerArchive.StrokeRunArchive.order)
  return _internal_order();
}
inline void StrokeLayerArchive_StrokeRunArchive::_internal_set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  order_ = value;
}
inline void StrokeLayerArchive_StrokeRunArchive::set_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:TST.StrokeLayerArchive.StrokeRunArchive.order)
}

// -------------------------------------------------------------------

// StrokeLayerArchive

// optional uint32 row_column_index = 1;
inline bool StrokeLayerArchive::_internal_has_row_column_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrokeLayerArchive::has_row_column_index() const {
  return _internal_has_row_column_index();
}
inline void StrokeLayerArchive::clear_row_column_index() {
  row_column_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeLayerArchive::_internal_row_column_index() const {
  return row_column_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeLayerArchive::row_column_index() const {
  // @@protoc_insertion_point(field_get:TST.StrokeLayerArchive.row_column_index)
  return _internal_row_column_index();
}
inline void StrokeLayerArchive::_internal_set_row_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  row_column_index_ = value;
}
inline void StrokeLayerArchive::set_row_column_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_column_index(value);
  // @@protoc_insertion_point(field_set:TST.StrokeLayerArchive.row_column_index)
}

// repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
inline int StrokeLayerArchive::_internal_stroke_runs_size() const {
  return stroke_runs_.size();
}
inline int StrokeLayerArchive::stroke_runs_size() const {
  return _internal_stroke_runs_size();
}
inline void StrokeLayerArchive::clear_stroke_runs() {
  stroke_runs_.Clear();
}
inline ::TST::StrokeLayerArchive_StrokeRunArchive* StrokeLayerArchive::mutable_stroke_runs(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokeLayerArchive.stroke_runs)
  return stroke_runs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokeLayerArchive_StrokeRunArchive >*
StrokeLayerArchive::mutable_stroke_runs() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokeLayerArchive.stroke_runs)
  return &stroke_runs_;
}
inline const ::TST::StrokeLayerArchive_StrokeRunArchive& StrokeLayerArchive::_internal_stroke_runs(int index) const {
  return stroke_runs_.Get(index);
}
inline const ::TST::StrokeLayerArchive_StrokeRunArchive& StrokeLayerArchive::stroke_runs(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokeLayerArchive.stroke_runs)
  return _internal_stroke_runs(index);
}
inline ::TST::StrokeLayerArchive_StrokeRunArchive* StrokeLayerArchive::_internal_add_stroke_runs() {
  return stroke_runs_.Add();
}
inline ::TST::StrokeLayerArchive_StrokeRunArchive* StrokeLayerArchive::add_stroke_runs() {
  // @@protoc_insertion_point(field_add:TST.StrokeLayerArchive.stroke_runs)
  return _internal_add_stroke_runs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StrokeLayerArchive_StrokeRunArchive >&
StrokeLayerArchive::stroke_runs() const {
  // @@protoc_insertion_point(field_list:TST.StrokeLayerArchive.stroke_runs)
  return stroke_runs_;
}

// -------------------------------------------------------------------

// StrokeSidecarArchive

// optional uint32 max_order = 1;
inline bool StrokeSidecarArchive::_internal_has_max_order() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrokeSidecarArchive::has_max_order() const {
  return _internal_has_max_order();
}
inline void StrokeSidecarArchive::clear_max_order() {
  max_order_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeSidecarArchive::_internal_max_order() const {
  return max_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeSidecarArchive::max_order() const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.max_order)
  return _internal_max_order();
}
inline void StrokeSidecarArchive::_internal_set_max_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  max_order_ = value;
}
inline void StrokeSidecarArchive::set_max_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_order(value);
  // @@protoc_insertion_point(field_set:TST.StrokeSidecarArchive.max_order)
}

// optional uint32 column_count = 2;
inline bool StrokeSidecarArchive::_internal_has_column_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StrokeSidecarArchive::has_column_count() const {
  return _internal_has_column_count();
}
inline void StrokeSidecarArchive::clear_column_count() {
  column_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeSidecarArchive::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeSidecarArchive::column_count() const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.column_count)
  return _internal_column_count();
}
inline void StrokeSidecarArchive::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  column_count_ = value;
}
inline void StrokeSidecarArchive::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:TST.StrokeSidecarArchive.column_count)
}

// optional uint32 row_count = 3;
inline bool StrokeSidecarArchive::_internal_has_row_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StrokeSidecarArchive::has_row_count() const {
  return _internal_has_row_count();
}
inline void StrokeSidecarArchive::clear_row_count() {
  row_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeSidecarArchive::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StrokeSidecarArchive::row_count() const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.row_count)
  return _internal_row_count();
}
inline void StrokeSidecarArchive::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  row_count_ = value;
}
inline void StrokeSidecarArchive::set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:TST.StrokeSidecarArchive.row_count)
}

// repeated .TSP.Reference left_column_stroke_layers = 4;
inline int StrokeSidecarArchive::_internal_left_column_stroke_layers_size() const {
  return left_column_stroke_layers_.size();
}
inline int StrokeSidecarArchive::left_column_stroke_layers_size() const {
  return _internal_left_column_stroke_layers_size();
}
inline ::TSP::Reference* StrokeSidecarArchive::mutable_left_column_stroke_layers(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokeSidecarArchive.left_column_stroke_layers)
  return left_column_stroke_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StrokeSidecarArchive::mutable_left_column_stroke_layers() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokeSidecarArchive.left_column_stroke_layers)
  return &left_column_stroke_layers_;
}
inline const ::TSP::Reference& StrokeSidecarArchive::_internal_left_column_stroke_layers(int index) const {
  return left_column_stroke_layers_.Get(index);
}
inline const ::TSP::Reference& StrokeSidecarArchive::left_column_stroke_layers(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.left_column_stroke_layers)
  return _internal_left_column_stroke_layers(index);
}
inline ::TSP::Reference* StrokeSidecarArchive::_internal_add_left_column_stroke_layers() {
  return left_column_stroke_layers_.Add();
}
inline ::TSP::Reference* StrokeSidecarArchive::add_left_column_stroke_layers() {
  // @@protoc_insertion_point(field_add:TST.StrokeSidecarArchive.left_column_stroke_layers)
  return _internal_add_left_column_stroke_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StrokeSidecarArchive::left_column_stroke_layers() const {
  // @@protoc_insertion_point(field_list:TST.StrokeSidecarArchive.left_column_stroke_layers)
  return left_column_stroke_layers_;
}

// repeated .TSP.Reference right_column_stroke_layers = 5;
inline int StrokeSidecarArchive::_internal_right_column_stroke_layers_size() const {
  return right_column_stroke_layers_.size();
}
inline int StrokeSidecarArchive::right_column_stroke_layers_size() const {
  return _internal_right_column_stroke_layers_size();
}
inline ::TSP::Reference* StrokeSidecarArchive::mutable_right_column_stroke_layers(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokeSidecarArchive.right_column_stroke_layers)
  return right_column_stroke_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StrokeSidecarArchive::mutable_right_column_stroke_layers() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokeSidecarArchive.right_column_stroke_layers)
  return &right_column_stroke_layers_;
}
inline const ::TSP::Reference& StrokeSidecarArchive::_internal_right_column_stroke_layers(int index) const {
  return right_column_stroke_layers_.Get(index);
}
inline const ::TSP::Reference& StrokeSidecarArchive::right_column_stroke_layers(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.right_column_stroke_layers)
  return _internal_right_column_stroke_layers(index);
}
inline ::TSP::Reference* StrokeSidecarArchive::_internal_add_right_column_stroke_layers() {
  return right_column_stroke_layers_.Add();
}
inline ::TSP::Reference* StrokeSidecarArchive::add_right_column_stroke_layers() {
  // @@protoc_insertion_point(field_add:TST.StrokeSidecarArchive.right_column_stroke_layers)
  return _internal_add_right_column_stroke_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StrokeSidecarArchive::right_column_stroke_layers() const {
  // @@protoc_insertion_point(field_list:TST.StrokeSidecarArchive.right_column_stroke_layers)
  return right_column_stroke_layers_;
}

// repeated .TSP.Reference top_row_stroke_layers = 6;
inline int StrokeSidecarArchive::_internal_top_row_stroke_layers_size() const {
  return top_row_stroke_layers_.size();
}
inline int StrokeSidecarArchive::top_row_stroke_layers_size() const {
  return _internal_top_row_stroke_layers_size();
}
inline ::TSP::Reference* StrokeSidecarArchive::mutable_top_row_stroke_layers(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokeSidecarArchive.top_row_stroke_layers)
  return top_row_stroke_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StrokeSidecarArchive::mutable_top_row_stroke_layers() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokeSidecarArchive.top_row_stroke_layers)
  return &top_row_stroke_layers_;
}
inline const ::TSP::Reference& StrokeSidecarArchive::_internal_top_row_stroke_layers(int index) const {
  return top_row_stroke_layers_.Get(index);
}
inline const ::TSP::Reference& StrokeSidecarArchive::top_row_stroke_layers(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.top_row_stroke_layers)
  return _internal_top_row_stroke_layers(index);
}
inline ::TSP::Reference* StrokeSidecarArchive::_internal_add_top_row_stroke_layers() {
  return top_row_stroke_layers_.Add();
}
inline ::TSP::Reference* StrokeSidecarArchive::add_top_row_stroke_layers() {
  // @@protoc_insertion_point(field_add:TST.StrokeSidecarArchive.top_row_stroke_layers)
  return _internal_add_top_row_stroke_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StrokeSidecarArchive::top_row_stroke_layers() const {
  // @@protoc_insertion_point(field_list:TST.StrokeSidecarArchive.top_row_stroke_layers)
  return top_row_stroke_layers_;
}

// repeated .TSP.Reference bottom_row_stroke_layers = 7;
inline int StrokeSidecarArchive::_internal_bottom_row_stroke_layers_size() const {
  return bottom_row_stroke_layers_.size();
}
inline int StrokeSidecarArchive::bottom_row_stroke_layers_size() const {
  return _internal_bottom_row_stroke_layers_size();
}
inline ::TSP::Reference* StrokeSidecarArchive::mutable_bottom_row_stroke_layers(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StrokeSidecarArchive.bottom_row_stroke_layers)
  return bottom_row_stroke_layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
StrokeSidecarArchive::mutable_bottom_row_stroke_layers() {
  // @@protoc_insertion_point(field_mutable_list:TST.StrokeSidecarArchive.bottom_row_stroke_layers)
  return &bottom_row_stroke_layers_;
}
inline const ::TSP::Reference& StrokeSidecarArchive::_internal_bottom_row_stroke_layers(int index) const {
  return bottom_row_stroke_layers_.Get(index);
}
inline const ::TSP::Reference& StrokeSidecarArchive::bottom_row_stroke_layers(int index) const {
  // @@protoc_insertion_point(field_get:TST.StrokeSidecarArchive.bottom_row_stroke_layers)
  return _internal_bottom_row_stroke_layers(index);
}
inline ::TSP::Reference* StrokeSidecarArchive::_internal_add_bottom_row_stroke_layers() {
  return bottom_row_stroke_layers_.Add();
}
inline ::TSP::Reference* StrokeSidecarArchive::add_bottom_row_stroke_layers() {
  // @@protoc_insertion_point(field_add:TST.StrokeSidecarArchive.bottom_row_stroke_layers)
  return _internal_add_bottom_row_stroke_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
StrokeSidecarArchive::bottom_row_stroke_layers() const {
  // @@protoc_insertion_point(field_list:TST.StrokeSidecarArchive.bottom_row_stroke_layers)
  return bottom_row_stroke_layers_;
}

// -------------------------------------------------------------------

// DurationWrapperArchive

// -------------------------------------------------------------------

// Cell

// required .TST.CellValueType valueType = 2;
inline bool Cell::_internal_has_valuetype() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Cell::has_valuetype() const {
  return _internal_has_valuetype();
}
inline void Cell::clear_valuetype() {
  valuetype_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::TST::CellValueType Cell::_internal_valuetype() const {
  return static_cast< ::TST::CellValueType >(valuetype_);
}
inline ::TST::CellValueType Cell::valuetype() const {
  // @@protoc_insertion_point(field_get:TST.Cell.valueType)
  return _internal_valuetype();
}
inline void Cell::_internal_set_valuetype(::TST::CellValueType value) {
  assert(::TST::CellValueType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  valuetype_ = value;
}
inline void Cell::set_valuetype(::TST::CellValueType value) {
  _internal_set_valuetype(value);
  // @@protoc_insertion_point(field_set:TST.Cell.valueType)
}

// optional .TSP.Reference cell_style = 3;
inline bool Cell::_internal_has_cell_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_style_ != nullptr);
  return value;
}
inline bool Cell::has_cell_style() const {
  return _internal_has_cell_style();
}
inline const ::TSP::Reference& Cell::_internal_cell_style() const {
  const ::TSP::Reference* p = cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Cell::cell_style() const {
  // @@protoc_insertion_point(field_get:TST.Cell.cell_style)
  return _internal_cell_style();
}
inline void Cell::unsafe_arena_set_allocated_cell_style(
    ::TSP::Reference* cell_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_);
  }
  cell_style_ = cell_style;
  if (cell_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.cell_style)
}
inline ::TSP::Reference* Cell::release_cell_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cell_style_;
  cell_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Cell::unsafe_arena_release_cell_style() {
  // @@protoc_insertion_point(field_release:TST.Cell.cell_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cell_style_;
  cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Cell::_internal_mutable_cell_style() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    cell_style_ = p;
  }
  return cell_style_;
}
inline ::TSP::Reference* Cell::mutable_cell_style() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.cell_style)
  return _internal_mutable_cell_style();
}
inline void Cell::set_allocated_cell_style(::TSP::Reference* cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_);
  }
  if (cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style)->GetArena();
    if (message_arena != submessage_arena) {
      cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_style_ = cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.cell_style)
}

// optional .TSP.Reference text_style = 4;
inline bool Cell::_internal_has_text_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || text_style_ != nullptr);
  return value;
}
inline bool Cell::has_text_style() const {
  return _internal_has_text_style();
}
inline const ::TSP::Reference& Cell::_internal_text_style() const {
  const ::TSP::Reference* p = text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Cell::text_style() const {
  // @@protoc_insertion_point(field_get:TST.Cell.text_style)
  return _internal_text_style();
}
inline void Cell::unsafe_arena_set_allocated_text_style(
    ::TSP::Reference* text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style_);
  }
  text_style_ = text_style;
  if (text_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.text_style)
}
inline ::TSP::Reference* Cell::release_text_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = text_style_;
  text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Cell::unsafe_arena_release_text_style() {
  // @@protoc_insertion_point(field_release:TST.Cell.text_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = text_style_;
  text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Cell::_internal_mutable_text_style() {
  _has_bits_[0] |= 0x00000004u;
  if (text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    text_style_ = p;
  }
  return text_style_;
}
inline ::TSP::Reference* Cell::mutable_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.text_style)
  return _internal_mutable_text_style();
}
inline void Cell::set_allocated_text_style(::TSP::Reference* text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style_);
  }
  if (text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style)->GetArena();
    if (message_arena != submessage_arena) {
      text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_style_ = text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.text_style)
}

// optional double numberValue = 5;
inline bool Cell::_internal_has_numbervalue() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Cell::has_numbervalue() const {
  return _internal_has_numbervalue();
}
inline void Cell::clear_numbervalue() {
  numbervalue_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double Cell::_internal_numbervalue() const {
  return numbervalue_;
}
inline double Cell::numbervalue() const {
  // @@protoc_insertion_point(field_get:TST.Cell.numberValue)
  return _internal_numbervalue();
}
inline void Cell::_internal_set_numbervalue(double value) {
  _has_bits_[0] |= 0x00400000u;
  numbervalue_ = value;
}
inline void Cell::set_numbervalue(double value) {
  _internal_set_numbervalue(value);
  // @@protoc_insertion_point(field_set:TST.Cell.numberValue)
}

// optional string stringValue = 6;
inline bool Cell::_internal_has_stringvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cell::has_stringvalue() const {
  return _internal_has_stringvalue();
}
inline void Cell::clear_stringvalue() {
  stringvalue_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Cell::stringvalue() const {
  // @@protoc_insertion_point(field_get:TST.Cell.stringValue)
  return _internal_stringvalue();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Cell::set_stringvalue(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.Cell.stringValue)
}
inline std::string* Cell::mutable_stringvalue() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.stringValue)
  return _internal_mutable_stringvalue();
}
inline const std::string& Cell::_internal_stringvalue() const {
  return stringvalue_.Get();
}
inline void Cell::_internal_set_stringvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Cell::_internal_mutable_stringvalue() {
  _has_bits_[0] |= 0x00000001u;
  return stringvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Cell::release_stringvalue() {
  // @@protoc_insertion_point(field_release:TST.Cell.stringValue)
  if (!_internal_has_stringvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stringvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cell::set_allocated_stringvalue(std::string* stringvalue) {
  if (stringvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stringvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.stringValue)
}

// optional bool boolValue = 7;
inline bool Cell::_internal_has_boolvalue() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Cell::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void Cell::clear_boolvalue() {
  boolvalue_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool Cell::_internal_boolvalue() const {
  return boolvalue_;
}
inline bool Cell::boolvalue() const {
  // @@protoc_insertion_point(field_get:TST.Cell.boolValue)
  return _internal_boolvalue();
}
inline void Cell::_internal_set_boolvalue(bool value) {
  _has_bits_[0] |= 0x00200000u;
  boolvalue_ = value;
}
inline void Cell::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:TST.Cell.boolValue)
}

// optional .TSK.FormatStructArchive current_format = 9;
inline bool Cell::_internal_has_current_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || current_format_ != nullptr);
  return value;
}
inline bool Cell::has_current_format() const {
  return _internal_has_current_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_current_format() const {
  const ::TSK::FormatStructArchive* p = current_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::current_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.current_format)
  return _internal_current_format();
}
inline void Cell::unsafe_arena_set_allocated_current_format(
    ::TSK::FormatStructArchive* current_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_format_);
  }
  current_format_ = current_format;
  if (current_format) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.current_format)
}
inline ::TSK::FormatStructArchive* Cell::release_current_format() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = current_format_;
  current_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_current_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.current_format)
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = current_format_;
  current_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_current_format() {
  _has_bits_[0] |= 0x00000008u;
  if (current_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    current_format_ = p;
  }
  return current_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_current_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.current_format)
  return _internal_mutable_current_format();
}
inline void Cell::set_allocated_current_format(::TSK::FormatStructArchive* current_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_format_);
  }
  if (current_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_format)->GetArena();
    if (message_arena != submessage_arena) {
      current_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  current_format_ = current_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.current_format)
}

// optional .TSP.Reference formulaError = 10;
inline bool Cell::_internal_has_formulaerror() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || formulaerror_ != nullptr);
  return value;
}
inline bool Cell::has_formulaerror() const {
  return _internal_has_formulaerror();
}
inline const ::TSP::Reference& Cell::_internal_formulaerror() const {
  const ::TSP::Reference* p = formulaerror_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Cell::formulaerror() const {
  // @@protoc_insertion_point(field_get:TST.Cell.formulaError)
  return _internal_formulaerror();
}
inline void Cell::unsafe_arena_set_allocated_formulaerror(
    ::TSP::Reference* formulaerror) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulaerror_);
  }
  formulaerror_ = formulaerror;
  if (formulaerror) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.formulaError)
}
inline ::TSP::Reference* Cell::release_formulaerror() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = formulaerror_;
  formulaerror_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Cell::unsafe_arena_release_formulaerror() {
  // @@protoc_insertion_point(field_release:TST.Cell.formulaError)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = formulaerror_;
  formulaerror_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Cell::_internal_mutable_formulaerror() {
  _has_bits_[0] |= 0x00000010u;
  if (formulaerror_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formulaerror_ = p;
  }
  return formulaerror_;
}
inline ::TSP::Reference* Cell::mutable_formulaerror() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.formulaError)
  return _internal_mutable_formulaerror();
}
inline void Cell::set_allocated_formulaerror(::TSP::Reference* formulaerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulaerror_);
  }
  if (formulaerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formulaerror)->GetArena();
    if (message_arena != submessage_arena) {
      formulaerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formulaerror, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  formulaerror_ = formulaerror;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.formulaError)
}

// optional .TSK.FormatStructArchive number_format = 11;
inline bool Cell::_internal_has_number_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || number_format_ != nullptr);
  return value;
}
inline bool Cell::has_number_format() const {
  return _internal_has_number_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_number_format() const {
  const ::TSK::FormatStructArchive* p = number_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::number_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.number_format)
  return _internal_number_format();
}
inline void Cell::unsafe_arena_set_allocated_number_format(
    ::TSK::FormatStructArchive* number_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_format_);
  }
  number_format_ = number_format;
  if (number_format) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.number_format)
}
inline ::TSK::FormatStructArchive* Cell::release_number_format() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = number_format_;
  number_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_number_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.number_format)
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = number_format_;
  number_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_number_format() {
  _has_bits_[0] |= 0x00000020u;
  if (number_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    number_format_ = p;
  }
  return number_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_number_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.number_format)
  return _internal_mutable_number_format();
}
inline void Cell::set_allocated_number_format(::TSK::FormatStructArchive* number_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_format_);
  }
  if (number_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_format)->GetArena();
    if (message_arena != submessage_arena) {
      number_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  number_format_ = number_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.number_format)
}

// optional .TSK.FormatStructArchive currency_format = 12;
inline bool Cell::_internal_has_currency_format() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || currency_format_ != nullptr);
  return value;
}
inline bool Cell::has_currency_format() const {
  return _internal_has_currency_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_currency_format() const {
  const ::TSK::FormatStructArchive* p = currency_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::currency_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.currency_format)
  return _internal_currency_format();
}
inline void Cell::unsafe_arena_set_allocated_currency_format(
    ::TSK::FormatStructArchive* currency_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_format_);
  }
  currency_format_ = currency_format;
  if (currency_format) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.currency_format)
}
inline ::TSK::FormatStructArchive* Cell::release_currency_format() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = currency_format_;
  currency_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_currency_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.currency_format)
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = currency_format_;
  currency_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_currency_format() {
  _has_bits_[0] |= 0x00000040u;
  if (currency_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    currency_format_ = p;
  }
  return currency_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_currency_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.currency_format)
  return _internal_mutable_currency_format();
}
inline void Cell::set_allocated_currency_format(::TSK::FormatStructArchive* currency_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_format_);
  }
  if (currency_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_format)->GetArena();
    if (message_arena != submessage_arena) {
      currency_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  currency_format_ = currency_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.currency_format)
}

// optional .TSK.FormatStructArchive duration_format = 13;
inline bool Cell::_internal_has_duration_format() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || duration_format_ != nullptr);
  return value;
}
inline bool Cell::has_duration_format() const {
  return _internal_has_duration_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_duration_format() const {
  const ::TSK::FormatStructArchive* p = duration_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::duration_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.duration_format)
  return _internal_duration_format();
}
inline void Cell::unsafe_arena_set_allocated_duration_format(
    ::TSK::FormatStructArchive* duration_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_format_);
  }
  duration_format_ = duration_format;
  if (duration_format) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.duration_format)
}
inline ::TSK::FormatStructArchive* Cell::release_duration_format() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = duration_format_;
  duration_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_duration_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.duration_format)
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = duration_format_;
  duration_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_duration_format() {
  _has_bits_[0] |= 0x00000080u;
  if (duration_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    duration_format_ = p;
  }
  return duration_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_duration_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.duration_format)
  return _internal_mutable_duration_format();
}
inline void Cell::set_allocated_duration_format(::TSK::FormatStructArchive* duration_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_format_);
  }
  if (duration_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_format)->GetArena();
    if (message_arena != submessage_arena) {
      duration_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  duration_format_ = duration_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.duration_format)
}

// optional .TSK.FormatStructArchive date_format = 14;
inline bool Cell::_internal_has_date_format() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || date_format_ != nullptr);
  return value;
}
inline bool Cell::has_date_format() const {
  return _internal_has_date_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_date_format() const {
  const ::TSK::FormatStructArchive* p = date_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::date_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.date_format)
  return _internal_date_format();
}
inline void Cell::unsafe_arena_set_allocated_date_format(
    ::TSK::FormatStructArchive* date_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_format_);
  }
  date_format_ = date_format;
  if (date_format) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.date_format)
}
inline ::TSK::FormatStructArchive* Cell::release_date_format() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = date_format_;
  date_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_date_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.date_format)
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = date_format_;
  date_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_date_format() {
  _has_bits_[0] |= 0x00000100u;
  if (date_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    date_format_ = p;
  }
  return date_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_date_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.date_format)
  return _internal_mutable_date_format();
}
inline void Cell::set_allocated_date_format(::TSK::FormatStructArchive* date_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_format_);
  }
  if (date_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_format)->GetArena();
    if (message_arena != submessage_arena) {
      date_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  date_format_ = date_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.date_format)
}

// optional .TSK.FormatStructArchive custom_format = 16;
inline bool Cell::_internal_has_custom_format() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || custom_format_ != nullptr);
  return value;
}
inline bool Cell::has_custom_format() const {
  return _internal_has_custom_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_custom_format() const {
  const ::TSK::FormatStructArchive* p = custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::custom_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.custom_format)
  return _internal_custom_format();
}
inline void Cell::unsafe_arena_set_allocated_custom_format(
    ::TSK::FormatStructArchive* custom_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_);
  }
  custom_format_ = custom_format;
  if (custom_format) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.custom_format)
}
inline ::TSK::FormatStructArchive* Cell::release_custom_format() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSK::FormatStructArchive* temp = custom_format_;
  custom_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_custom_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.custom_format)
  _has_bits_[0] &= ~0x00000200u;
  ::TSK::FormatStructArchive* temp = custom_format_;
  custom_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_custom_format() {
  _has_bits_[0] |= 0x00000200u;
  if (custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    custom_format_ = p;
  }
  return custom_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_custom_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.custom_format)
  return _internal_mutable_custom_format();
}
inline void Cell::set_allocated_custom_format(::TSK::FormatStructArchive* custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_);
  }
  if (custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format)->GetArena();
    if (message_arena != submessage_arena) {
      custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  custom_format_ = custom_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.custom_format)
}

// optional .TSK.FormatStructArchive base_format = 17;
inline bool Cell::_internal_has_base_format() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || base_format_ != nullptr);
  return value;
}
inline bool Cell::has_base_format() const {
  return _internal_has_base_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_base_format() const {
  const ::TSK::FormatStructArchive* p = base_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::base_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.base_format)
  return _internal_base_format();
}
inline void Cell::unsafe_arena_set_allocated_base_format(
    ::TSK::FormatStructArchive* base_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_format_);
  }
  base_format_ = base_format;
  if (base_format) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.base_format)
}
inline ::TSK::FormatStructArchive* Cell::release_base_format() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::FormatStructArchive* temp = base_format_;
  base_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_base_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.base_format)
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::FormatStructArchive* temp = base_format_;
  base_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_base_format() {
  _has_bits_[0] |= 0x00000400u;
  if (base_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    base_format_ = p;
  }
  return base_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_base_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.base_format)
  return _internal_mutable_base_format();
}
inline void Cell::set_allocated_base_format(::TSK::FormatStructArchive* base_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_format_);
  }
  if (base_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_format)->GetArena();
    if (message_arena != submessage_arena) {
      base_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  base_format_ = base_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.base_format)
}

// optional uint32 explicit_format_flags = 19;
inline bool Cell::_internal_has_explicit_format_flags() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Cell::has_explicit_format_flags() const {
  return _internal_has_explicit_format_flags();
}
inline void Cell::clear_explicit_format_flags() {
  explicit_format_flags_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cell::_internal_explicit_format_flags() const {
  return explicit_format_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cell::explicit_format_flags() const {
  // @@protoc_insertion_point(field_get:TST.Cell.explicit_format_flags)
  return _internal_explicit_format_flags();
}
inline void Cell::_internal_set_explicit_format_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  explicit_format_flags_ = value;
}
inline void Cell::set_explicit_format_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_explicit_format_flags(value);
  // @@protoc_insertion_point(field_set:TST.Cell.explicit_format_flags)
}

// optional .TSP.Reference richText = 20;
inline bool Cell::_internal_has_richtext() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || richtext_ != nullptr);
  return value;
}
inline bool Cell::has_richtext() const {
  return _internal_has_richtext();
}
inline const ::TSP::Reference& Cell::_internal_richtext() const {
  const ::TSP::Reference* p = richtext_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Cell::richtext() const {
  // @@protoc_insertion_point(field_get:TST.Cell.richText)
  return _internal_richtext();
}
inline void Cell::unsafe_arena_set_allocated_richtext(
    ::TSP::Reference* richtext) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtext_);
  }
  richtext_ = richtext;
  if (richtext) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.richText)
}
inline ::TSP::Reference* Cell::release_richtext() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = richtext_;
  richtext_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Cell::unsafe_arena_release_richtext() {
  // @@protoc_insertion_point(field_release:TST.Cell.richText)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Reference* temp = richtext_;
  richtext_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Cell::_internal_mutable_richtext() {
  _has_bits_[0] |= 0x00000800u;
  if (richtext_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    richtext_ = p;
  }
  return richtext_;
}
inline ::TSP::Reference* Cell::mutable_richtext() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.richText)
  return _internal_mutable_richtext();
}
inline void Cell::set_allocated_richtext(::TSP::Reference* richtext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtext_);
  }
  if (richtext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtext)->GetArena();
    if (message_arena != submessage_arena) {
      richtext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, richtext, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  richtext_ = richtext;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.richText)
}

// optional .TSP.Reference conditional_style = 21;
inline bool Cell::_internal_has_conditional_style() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || conditional_style_ != nullptr);
  return value;
}
inline bool Cell::has_conditional_style() const {
  return _internal_has_conditional_style();
}
inline const ::TSP::Reference& Cell::_internal_conditional_style() const {
  const ::TSP::Reference* p = conditional_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Cell::conditional_style() const {
  // @@protoc_insertion_point(field_get:TST.Cell.conditional_style)
  return _internal_conditional_style();
}
inline void Cell::unsafe_arena_set_allocated_conditional_style(
    ::TSP::Reference* conditional_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_);
  }
  conditional_style_ = conditional_style;
  if (conditional_style) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.conditional_style)
}
inline ::TSP::Reference* Cell::release_conditional_style() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = conditional_style_;
  conditional_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Cell::unsafe_arena_release_conditional_style() {
  // @@protoc_insertion_point(field_release:TST.Cell.conditional_style)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::Reference* temp = conditional_style_;
  conditional_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Cell::_internal_mutable_conditional_style() {
  _has_bits_[0] |= 0x00001000u;
  if (conditional_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    conditional_style_ = p;
  }
  return conditional_style_;
}
inline ::TSP::Reference* Cell::mutable_conditional_style() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.conditional_style)
  return _internal_mutable_conditional_style();
}
inline void Cell::set_allocated_conditional_style(::TSP::Reference* conditional_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style_);
  }
  if (conditional_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditional_style)->GetArena();
    if (message_arena != submessage_arena) {
      conditional_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  conditional_style_ = conditional_style;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.conditional_style)
}

// optional .TSP.Reference comment_storage = 23;
inline bool Cell::_internal_has_comment_storage() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || comment_storage_ != nullptr);
  return value;
}
inline bool Cell::has_comment_storage() const {
  return _internal_has_comment_storage();
}
inline const ::TSP::Reference& Cell::_internal_comment_storage() const {
  const ::TSP::Reference* p = comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& Cell::comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.Cell.comment_storage)
  return _internal_comment_storage();
}
inline void Cell::unsafe_arena_set_allocated_comment_storage(
    ::TSP::Reference* comment_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  comment_storage_ = comment_storage;
  if (comment_storage) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.comment_storage)
}
inline ::TSP::Reference* Cell::release_comment_storage() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* Cell::unsafe_arena_release_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.Cell.comment_storage)
  _has_bits_[0] &= ~0x00002000u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* Cell::_internal_mutable_comment_storage() {
  _has_bits_[0] |= 0x00002000u;
  if (comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    comment_storage_ = p;
  }
  return comment_storage_;
}
inline ::TSP::Reference* Cell::mutable_comment_storage() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.comment_storage)
  return _internal_mutable_comment_storage();
}
inline void Cell::set_allocated_comment_storage(::TSP::Reference* comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  if (comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage)->GetArena();
    if (message_arena != submessage_arena) {
      comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  comment_storage_ = comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.comment_storage)
}

// optional uint32 conditional_style_applied_rule = 24;
inline bool Cell::_internal_has_conditional_style_applied_rule() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Cell::has_conditional_style_applied_rule() const {
  return _internal_has_conditional_style_applied_rule();
}
inline void Cell::clear_conditional_style_applied_rule() {
  conditional_style_applied_rule_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cell::_internal_conditional_style_applied_rule() const {
  return conditional_style_applied_rule_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cell::conditional_style_applied_rule() const {
  // @@protoc_insertion_point(field_get:TST.Cell.conditional_style_applied_rule)
  return _internal_conditional_style_applied_rule();
}
inline void Cell::_internal_set_conditional_style_applied_rule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  conditional_style_applied_rule_ = value;
}
inline void Cell::set_conditional_style_applied_rule(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conditional_style_applied_rule(value);
  // @@protoc_insertion_point(field_set:TST.Cell.conditional_style_applied_rule)
}

// optional .TST.ImportWarningSetArchive import_warning_set = 25;
inline bool Cell::_internal_has_import_warning_set() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || import_warning_set_ != nullptr);
  return value;
}
inline bool Cell::has_import_warning_set() const {
  return _internal_has_import_warning_set();
}
inline void Cell::clear_import_warning_set() {
  if (import_warning_set_ != nullptr) import_warning_set_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::TST::ImportWarningSetArchive& Cell::_internal_import_warning_set() const {
  const ::TST::ImportWarningSetArchive* p = import_warning_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ImportWarningSetArchive&>(
      ::TST::_ImportWarningSetArchive_default_instance_);
}
inline const ::TST::ImportWarningSetArchive& Cell::import_warning_set() const {
  // @@protoc_insertion_point(field_get:TST.Cell.import_warning_set)
  return _internal_import_warning_set();
}
inline void Cell::unsafe_arena_set_allocated_import_warning_set(
    ::TST::ImportWarningSetArchive* import_warning_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(import_warning_set_);
  }
  import_warning_set_ = import_warning_set;
  if (import_warning_set) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.import_warning_set)
}
inline ::TST::ImportWarningSetArchive* Cell::release_import_warning_set() {
  _has_bits_[0] &= ~0x00004000u;
  ::TST::ImportWarningSetArchive* temp = import_warning_set_;
  import_warning_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ImportWarningSetArchive* Cell::unsafe_arena_release_import_warning_set() {
  // @@protoc_insertion_point(field_release:TST.Cell.import_warning_set)
  _has_bits_[0] &= ~0x00004000u;
  ::TST::ImportWarningSetArchive* temp = import_warning_set_;
  import_warning_set_ = nullptr;
  return temp;
}
inline ::TST::ImportWarningSetArchive* Cell::_internal_mutable_import_warning_set() {
  _has_bits_[0] |= 0x00004000u;
  if (import_warning_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ImportWarningSetArchive>(GetArena());
    import_warning_set_ = p;
  }
  return import_warning_set_;
}
inline ::TST::ImportWarningSetArchive* Cell::mutable_import_warning_set() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.import_warning_set)
  return _internal_mutable_import_warning_set();
}
inline void Cell::set_allocated_import_warning_set(::TST::ImportWarningSetArchive* import_warning_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete import_warning_set_;
  }
  if (import_warning_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(import_warning_set);
    if (message_arena != submessage_arena) {
      import_warning_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, import_warning_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  import_warning_set_ = import_warning_set;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.import_warning_set)
}

// optional .TSK.CustomFormatArchive custom_format_object = 26;
inline bool Cell::_internal_has_custom_format_object() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || custom_format_object_ != nullptr);
  return value;
}
inline bool Cell::has_custom_format_object() const {
  return _internal_has_custom_format_object();
}
inline const ::TSK::CustomFormatArchive& Cell::_internal_custom_format_object() const {
  const ::TSK::CustomFormatArchive* p = custom_format_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& Cell::custom_format_object() const {
  // @@protoc_insertion_point(field_get:TST.Cell.custom_format_object)
  return _internal_custom_format_object();
}
inline void Cell::unsafe_arena_set_allocated_custom_format_object(
    ::TSK::CustomFormatArchive* custom_format_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_object_);
  }
  custom_format_object_ = custom_format_object;
  if (custom_format_object) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.custom_format_object)
}
inline ::TSK::CustomFormatArchive* Cell::release_custom_format_object() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSK::CustomFormatArchive* temp = custom_format_object_;
  custom_format_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CustomFormatArchive* Cell::unsafe_arena_release_custom_format_object() {
  // @@protoc_insertion_point(field_release:TST.Cell.custom_format_object)
  _has_bits_[0] &= ~0x00008000u;
  ::TSK::CustomFormatArchive* temp = custom_format_object_;
  custom_format_object_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* Cell::_internal_mutable_custom_format_object() {
  _has_bits_[0] |= 0x00008000u;
  if (custom_format_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArena());
    custom_format_object_ = p;
  }
  return custom_format_object_;
}
inline ::TSK::CustomFormatArchive* Cell::mutable_custom_format_object() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.custom_format_object)
  return _internal_mutable_custom_format_object();
}
inline void Cell::set_allocated_custom_format_object(::TSK::CustomFormatArchive* custom_format_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_object_);
  }
  if (custom_format_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_object)->GetArena();
    if (message_arena != submessage_arena) {
      custom_format_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  custom_format_object_ = custom_format_object;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.custom_format_object)
}

// optional .TST.CellBorderArchive cell_border = 27;
inline bool Cell::_internal_has_cell_border() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || cell_border_ != nullptr);
  return value;
}
inline bool Cell::has_cell_border() const {
  return _internal_has_cell_border();
}
inline void Cell::clear_cell_border() {
  if (cell_border_ != nullptr) cell_border_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::TST::CellBorderArchive& Cell::_internal_cell_border() const {
  const ::TST::CellBorderArchive* p = cell_border_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellBorderArchive&>(
      ::TST::_CellBorderArchive_default_instance_);
}
inline const ::TST::CellBorderArchive& Cell::cell_border() const {
  // @@protoc_insertion_point(field_get:TST.Cell.cell_border)
  return _internal_cell_border();
}
inline void Cell::unsafe_arena_set_allocated_cell_border(
    ::TST::CellBorderArchive* cell_border) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_border_);
  }
  cell_border_ = cell_border;
  if (cell_border) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.cell_border)
}
inline ::TST::CellBorderArchive* Cell::release_cell_border() {
  _has_bits_[0] &= ~0x00010000u;
  ::TST::CellBorderArchive* temp = cell_border_;
  cell_border_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellBorderArchive* Cell::unsafe_arena_release_cell_border() {
  // @@protoc_insertion_point(field_release:TST.Cell.cell_border)
  _has_bits_[0] &= ~0x00010000u;
  ::TST::CellBorderArchive* temp = cell_border_;
  cell_border_ = nullptr;
  return temp;
}
inline ::TST::CellBorderArchive* Cell::_internal_mutable_cell_border() {
  _has_bits_[0] |= 0x00010000u;
  if (cell_border_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellBorderArchive>(GetArena());
    cell_border_ = p;
  }
  return cell_border_;
}
inline ::TST::CellBorderArchive* Cell::mutable_cell_border() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.cell_border)
  return _internal_mutable_cell_border();
}
inline void Cell::set_allocated_cell_border(::TST::CellBorderArchive* cell_border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_border_;
  }
  if (cell_border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_border);
    if (message_arena != submessage_arena) {
      cell_border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_border, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  cell_border_ = cell_border;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.cell_border)
}

// optional .TST.CellSpecArchive cell_spec = 28;
inline bool Cell::_internal_has_cell_spec() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || cell_spec_ != nullptr);
  return value;
}
inline bool Cell::has_cell_spec() const {
  return _internal_has_cell_spec();
}
inline void Cell::clear_cell_spec() {
  if (cell_spec_ != nullptr) cell_spec_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::TST::CellSpecArchive& Cell::_internal_cell_spec() const {
  const ::TST::CellSpecArchive* p = cell_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellSpecArchive&>(
      ::TST::_CellSpecArchive_default_instance_);
}
inline const ::TST::CellSpecArchive& Cell::cell_spec() const {
  // @@protoc_insertion_point(field_get:TST.Cell.cell_spec)
  return _internal_cell_spec();
}
inline void Cell::unsafe_arena_set_allocated_cell_spec(
    ::TST::CellSpecArchive* cell_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_spec_);
  }
  cell_spec_ = cell_spec;
  if (cell_spec) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.cell_spec)
}
inline ::TST::CellSpecArchive* Cell::release_cell_spec() {
  _has_bits_[0] &= ~0x00020000u;
  ::TST::CellSpecArchive* temp = cell_spec_;
  cell_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellSpecArchive* Cell::unsafe_arena_release_cell_spec() {
  // @@protoc_insertion_point(field_release:TST.Cell.cell_spec)
  _has_bits_[0] &= ~0x00020000u;
  ::TST::CellSpecArchive* temp = cell_spec_;
  cell_spec_ = nullptr;
  return temp;
}
inline ::TST::CellSpecArchive* Cell::_internal_mutable_cell_spec() {
  _has_bits_[0] |= 0x00020000u;
  if (cell_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellSpecArchive>(GetArena());
    cell_spec_ = p;
  }
  return cell_spec_;
}
inline ::TST::CellSpecArchive* Cell::mutable_cell_spec() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.cell_spec)
  return _internal_mutable_cell_spec();
}
inline void Cell::set_allocated_cell_spec(::TST::CellSpecArchive* cell_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_spec_;
  }
  if (cell_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_spec);
    if (message_arena != submessage_arena) {
      cell_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  cell_spec_ = cell_spec;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.cell_spec)
}

// optional uint32 cell_format_kind = 29;
inline bool Cell::_internal_has_cell_format_kind() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Cell::has_cell_format_kind() const {
  return _internal_has_cell_format_kind();
}
inline void Cell::clear_cell_format_kind() {
  cell_format_kind_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cell::_internal_cell_format_kind() const {
  return cell_format_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cell::cell_format_kind() const {
  // @@protoc_insertion_point(field_get:TST.Cell.cell_format_kind)
  return _internal_cell_format_kind();
}
inline void Cell::_internal_set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  cell_format_kind_ = value;
}
inline void Cell::set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_format_kind(value);
  // @@protoc_insertion_point(field_set:TST.Cell.cell_format_kind)
}

// optional .TSK.FormatStructArchive text_format = 30;
inline bool Cell::_internal_has_text_format() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || text_format_ != nullptr);
  return value;
}
inline bool Cell::has_text_format() const {
  return _internal_has_text_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_text_format() const {
  const ::TSK::FormatStructArchive* p = text_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::text_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.text_format)
  return _internal_text_format();
}
inline void Cell::unsafe_arena_set_allocated_text_format(
    ::TSK::FormatStructArchive* text_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_format_);
  }
  text_format_ = text_format;
  if (text_format) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.text_format)
}
inline ::TSK::FormatStructArchive* Cell::release_text_format() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSK::FormatStructArchive* temp = text_format_;
  text_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_text_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.text_format)
  _has_bits_[0] &= ~0x00040000u;
  ::TSK::FormatStructArchive* temp = text_format_;
  text_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_text_format() {
  _has_bits_[0] |= 0x00040000u;
  if (text_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    text_format_ = p;
  }
  return text_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_text_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.text_format)
  return _internal_mutable_text_format();
}
inline void Cell::set_allocated_text_format(::TSK::FormatStructArchive* text_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_format_);
  }
  if (text_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_format)->GetArena();
    if (message_arena != submessage_arena) {
      text_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  text_format_ = text_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.text_format)
}

// optional .TSK.FormatStructArchive boolean_format = 31;
inline bool Cell::_internal_has_boolean_format() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || boolean_format_ != nullptr);
  return value;
}
inline bool Cell::has_boolean_format() const {
  return _internal_has_boolean_format();
}
inline const ::TSK::FormatStructArchive& Cell::_internal_boolean_format() const {
  const ::TSK::FormatStructArchive* p = boolean_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& Cell::boolean_format() const {
  // @@protoc_insertion_point(field_get:TST.Cell.boolean_format)
  return _internal_boolean_format();
}
inline void Cell::unsafe_arena_set_allocated_boolean_format(
    ::TSK::FormatStructArchive* boolean_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_format_);
  }
  boolean_format_ = boolean_format;
  if (boolean_format) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.Cell.boolean_format)
}
inline ::TSK::FormatStructArchive* Cell::release_boolean_format() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSK::FormatStructArchive* temp = boolean_format_;
  boolean_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::unsafe_arena_release_boolean_format() {
  // @@protoc_insertion_point(field_release:TST.Cell.boolean_format)
  _has_bits_[0] &= ~0x00080000u;
  ::TSK::FormatStructArchive* temp = boolean_format_;
  boolean_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* Cell::_internal_mutable_boolean_format() {
  _has_bits_[0] |= 0x00080000u;
  if (boolean_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    boolean_format_ = p;
  }
  return boolean_format_;
}
inline ::TSK::FormatStructArchive* Cell::mutable_boolean_format() {
  // @@protoc_insertion_point(field_mutable:TST.Cell.boolean_format)
  return _internal_mutable_boolean_format();
}
inline void Cell::set_allocated_boolean_format(::TSK::FormatStructArchive* boolean_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_format_);
  }
  if (boolean_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_format)->GetArena();
    if (message_arena != submessage_arena) {
      boolean_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  boolean_format_ = boolean_format;
  // @@protoc_insertion_point(field_set_allocated:TST.Cell.boolean_format)
}

// optional uint64 decimal_value_low = 32;
inline bool Cell::_internal_has_decimal_value_low() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Cell::has_decimal_value_low() const {
  return _internal_has_decimal_value_low();
}
inline void Cell::clear_decimal_value_low() {
  decimal_value_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::_internal_decimal_value_low() const {
  return decimal_value_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::decimal_value_low() const {
  // @@protoc_insertion_point(field_get:TST.Cell.decimal_value_low)
  return _internal_decimal_value_low();
}
inline void Cell::_internal_set_decimal_value_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x04000000u;
  decimal_value_low_ = value;
}
inline void Cell::set_decimal_value_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_value_low(value);
  // @@protoc_insertion_point(field_set:TST.Cell.decimal_value_low)
}

// optional uint64 decimal_value_high = 33;
inline bool Cell::_internal_has_decimal_value_high() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Cell::has_decimal_value_high() const {
  return _internal_has_decimal_value_high();
}
inline void Cell::clear_decimal_value_high() {
  decimal_value_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::_internal_decimal_value_high() const {
  return decimal_value_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Cell::decimal_value_high() const {
  // @@protoc_insertion_point(field_get:TST.Cell.decimal_value_high)
  return _internal_decimal_value_high();
}
inline void Cell::_internal_set_decimal_value_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x08000000u;
  decimal_value_high_ = value;
}
inline void Cell::set_decimal_value_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_value_high(value);
  // @@protoc_insertion_point(field_set:TST.Cell.decimal_value_high)
}

// -------------------------------------------------------------------

// MergeRegionMapArchive

// repeated .TST.CellRange cell_range = 1;
inline int MergeRegionMapArchive::_internal_cell_range_size() const {
  return cell_range_.size();
}
inline int MergeRegionMapArchive::cell_range_size() const {
  return _internal_cell_range_size();
}
inline void MergeRegionMapArchive::clear_cell_range() {
  cell_range_.Clear();
}
inline ::TST::CellRange* MergeRegionMapArchive::mutable_cell_range(int index) {
  // @@protoc_insertion_point(field_mutable:TST.MergeRegionMapArchive.cell_range)
  return cell_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
MergeRegionMapArchive::mutable_cell_range() {
  // @@protoc_insertion_point(field_mutable_list:TST.MergeRegionMapArchive.cell_range)
  return &cell_range_;
}
inline const ::TST::CellRange& MergeRegionMapArchive::_internal_cell_range(int index) const {
  return cell_range_.Get(index);
}
inline const ::TST::CellRange& MergeRegionMapArchive::cell_range(int index) const {
  // @@protoc_insertion_point(field_get:TST.MergeRegionMapArchive.cell_range)
  return _internal_cell_range(index);
}
inline ::TST::CellRange* MergeRegionMapArchive::_internal_add_cell_range() {
  return cell_range_.Add();
}
inline ::TST::CellRange* MergeRegionMapArchive::add_cell_range() {
  // @@protoc_insertion_point(field_add:TST.MergeRegionMapArchive.cell_range)
  return _internal_add_cell_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
MergeRegionMapArchive::cell_range() const {
  // @@protoc_insertion_point(field_list:TST.MergeRegionMapArchive.cell_range)
  return cell_range_;
}

// -------------------------------------------------------------------

// CellMapArchive

// repeated .TSP.Reference cell_tiles = 2;
inline int CellMapArchive::_internal_cell_tiles_size() const {
  return cell_tiles_.size();
}
inline int CellMapArchive::cell_tiles_size() const {
  return _internal_cell_tiles_size();
}
inline ::TSP::Reference* CellMapArchive::mutable_cell_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellMapArchive.cell_tiles)
  return cell_tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CellMapArchive::mutable_cell_tiles() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellMapArchive.cell_tiles)
  return &cell_tiles_;
}
inline const ::TSP::Reference& CellMapArchive::_internal_cell_tiles(int index) const {
  return cell_tiles_.Get(index);
}
inline const ::TSP::Reference& CellMapArchive::cell_tiles(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.cell_tiles)
  return _internal_cell_tiles(index);
}
inline ::TSP::Reference* CellMapArchive::_internal_add_cell_tiles() {
  return cell_tiles_.Add();
}
inline ::TSP::Reference* CellMapArchive::add_cell_tiles() {
  // @@protoc_insertion_point(field_add:TST.CellMapArchive.cell_tiles)
  return _internal_add_cell_tiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CellMapArchive::cell_tiles() const {
  // @@protoc_insertion_point(field_list:TST.CellMapArchive.cell_tiles)
  return cell_tiles_;
}

// required bool uid_based = 3;
inline bool CellMapArchive::_internal_has_uid_based() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellMapArchive::has_uid_based() const {
  return _internal_has_uid_based();
}
inline void CellMapArchive::clear_uid_based() {
  uid_based_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CellMapArchive::_internal_uid_based() const {
  return uid_based_;
}
inline bool CellMapArchive::uid_based() const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.uid_based)
  return _internal_uid_based();
}
inline void CellMapArchive::_internal_set_uid_based(bool value) {
  _has_bits_[0] |= 0x00000002u;
  uid_based_ = value;
}
inline void CellMapArchive::set_uid_based(bool value) {
  _internal_set_uid_based(value);
  // @@protoc_insertion_point(field_set:TST.CellMapArchive.uid_based)
}

// repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
inline int CellMapArchive::_internal_expanded_cell_ids_size() const {
  return expanded_cell_ids_.size();
}
inline int CellMapArchive::expanded_cell_ids_size() const {
  return _internal_expanded_cell_ids_size();
}
inline ::TSCE::CellCoordinateArchive* CellMapArchive::mutable_expanded_cell_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellMapArchive.expanded_cell_ids)
  return expanded_cell_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
CellMapArchive::mutable_expanded_cell_ids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellMapArchive.expanded_cell_ids)
  return &expanded_cell_ids_;
}
inline const ::TSCE::CellCoordinateArchive& CellMapArchive::_internal_expanded_cell_ids(int index) const {
  return expanded_cell_ids_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& CellMapArchive::expanded_cell_ids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.expanded_cell_ids)
  return _internal_expanded_cell_ids(index);
}
inline ::TSCE::CellCoordinateArchive* CellMapArchive::_internal_add_expanded_cell_ids() {
  return expanded_cell_ids_.Add();
}
inline ::TSCE::CellCoordinateArchive* CellMapArchive::add_expanded_cell_ids() {
  // @@protoc_insertion_point(field_add:TST.CellMapArchive.expanded_cell_ids)
  return _internal_add_expanded_cell_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
CellMapArchive::expanded_cell_ids() const {
  // @@protoc_insertion_point(field_list:TST.CellMapArchive.expanded_cell_ids)
  return expanded_cell_ids_;
}

// optional .TST.CellUIDListArchive cell_uid_list = 5;
inline bool CellMapArchive::_internal_has_cell_uid_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_uid_list_ != nullptr);
  return value;
}
inline bool CellMapArchive::has_cell_uid_list() const {
  return _internal_has_cell_uid_list();
}
inline void CellMapArchive::clear_cell_uid_list() {
  if (cell_uid_list_ != nullptr) cell_uid_list_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellUIDListArchive& CellMapArchive::_internal_cell_uid_list() const {
  const ::TST::CellUIDListArchive* p = cell_uid_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CellMapArchive::cell_uid_list() const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.cell_uid_list)
  return _internal_cell_uid_list();
}
inline void CellMapArchive::unsafe_arena_set_allocated_cell_uid_list(
    ::TST::CellUIDListArchive* cell_uid_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_list_);
  }
  cell_uid_list_ = cell_uid_list;
  if (cell_uid_list) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellMapArchive.cell_uid_list)
}
inline ::TST::CellUIDListArchive* CellMapArchive::release_cell_uid_list() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellUIDListArchive* temp = cell_uid_list_;
  cell_uid_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDListArchive* CellMapArchive::unsafe_arena_release_cell_uid_list() {
  // @@protoc_insertion_point(field_release:TST.CellMapArchive.cell_uid_list)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellUIDListArchive* temp = cell_uid_list_;
  cell_uid_list_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CellMapArchive::_internal_mutable_cell_uid_list() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_uid_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArena());
    cell_uid_list_ = p;
  }
  return cell_uid_list_;
}
inline ::TST::CellUIDListArchive* CellMapArchive::mutable_cell_uid_list() {
  // @@protoc_insertion_point(field_mutable:TST.CellMapArchive.cell_uid_list)
  return _internal_mutable_cell_uid_list();
}
inline void CellMapArchive::set_allocated_cell_uid_list(::TST::CellUIDListArchive* cell_uid_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_uid_list_;
  }
  if (cell_uid_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_uid_list);
    if (message_arena != submessage_arena) {
      cell_uid_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_uid_list_ = cell_uid_list;
  // @@protoc_insertion_point(field_set_allocated:TST.CellMapArchive.cell_uid_list)
}

// repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
inline int CellMapArchive::_internal_merge_uid_ranges_size() const {
  return merge_uid_ranges_.size();
}
inline int CellMapArchive::merge_uid_ranges_size() const {
  return _internal_merge_uid_ranges_size();
}
inline ::TSP::UUIDRectArchive* CellMapArchive::mutable_merge_uid_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellMapArchive.merge_uid_ranges)
  return merge_uid_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
CellMapArchive::mutable_merge_uid_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellMapArchive.merge_uid_ranges)
  return &merge_uid_ranges_;
}
inline const ::TSP::UUIDRectArchive& CellMapArchive::_internal_merge_uid_ranges(int index) const {
  return merge_uid_ranges_.Get(index);
}
inline const ::TSP::UUIDRectArchive& CellMapArchive::merge_uid_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.merge_uid_ranges)
  return _internal_merge_uid_ranges(index);
}
inline ::TSP::UUIDRectArchive* CellMapArchive::_internal_add_merge_uid_ranges() {
  return merge_uid_ranges_.Add();
}
inline ::TSP::UUIDRectArchive* CellMapArchive::add_merge_uid_ranges() {
  // @@protoc_insertion_point(field_add:TST.CellMapArchive.merge_uid_ranges)
  return _internal_add_merge_uid_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
CellMapArchive::merge_uid_ranges() const {
  // @@protoc_insertion_point(field_list:TST.CellMapArchive.merge_uid_ranges)
  return merge_uid_ranges_;
}

// repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
inline int CellMapArchive::_internal_unmerge_uid_ranges_size() const {
  return unmerge_uid_ranges_.size();
}
inline int CellMapArchive::unmerge_uid_ranges_size() const {
  return _internal_unmerge_uid_ranges_size();
}
inline ::TSP::UUIDRectArchive* CellMapArchive::mutable_unmerge_uid_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellMapArchive.unmerge_uid_ranges)
  return unmerge_uid_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
CellMapArchive::mutable_unmerge_uid_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellMapArchive.unmerge_uid_ranges)
  return &unmerge_uid_ranges_;
}
inline const ::TSP::UUIDRectArchive& CellMapArchive::_internal_unmerge_uid_ranges(int index) const {
  return unmerge_uid_ranges_.Get(index);
}
inline const ::TSP::UUIDRectArchive& CellMapArchive::unmerge_uid_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.unmerge_uid_ranges)
  return _internal_unmerge_uid_ranges(index);
}
inline ::TSP::UUIDRectArchive* CellMapArchive::_internal_add_unmerge_uid_ranges() {
  return unmerge_uid_ranges_.Add();
}
inline ::TSP::UUIDRectArchive* CellMapArchive::add_unmerge_uid_ranges() {
  // @@protoc_insertion_point(field_add:TST.CellMapArchive.unmerge_uid_ranges)
  return _internal_add_unmerge_uid_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
CellMapArchive::unmerge_uid_ranges() const {
  // @@protoc_insertion_point(field_list:TST.CellMapArchive.unmerge_uid_ranges)
  return unmerge_uid_ranges_;
}

// repeated .TST.MergeOperationArchive merge_actions = 13;
inline int CellMapArchive::_internal_merge_actions_size() const {
  return merge_actions_.size();
}
inline int CellMapArchive::merge_actions_size() const {
  return _internal_merge_actions_size();
}
inline void CellMapArchive::clear_merge_actions() {
  merge_actions_.Clear();
}
inline ::TST::MergeOperationArchive* CellMapArchive::mutable_merge_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellMapArchive.merge_actions)
  return merge_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >*
CellMapArchive::mutable_merge_actions() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellMapArchive.merge_actions)
  return &merge_actions_;
}
inline const ::TST::MergeOperationArchive& CellMapArchive::_internal_merge_actions(int index) const {
  return merge_actions_.Get(index);
}
inline const ::TST::MergeOperationArchive& CellMapArchive::merge_actions(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.merge_actions)
  return _internal_merge_actions(index);
}
inline ::TST::MergeOperationArchive* CellMapArchive::_internal_add_merge_actions() {
  return merge_actions_.Add();
}
inline ::TST::MergeOperationArchive* CellMapArchive::add_merge_actions() {
  // @@protoc_insertion_point(field_add:TST.CellMapArchive.merge_actions)
  return _internal_add_merge_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >&
CellMapArchive::merge_actions() const {
  // @@protoc_insertion_point(field_list:TST.CellMapArchive.merge_actions)
  return merge_actions_;
}

// optional bool may_modify_formulas_in_cells = 10 [default = true];
inline bool CellMapArchive::_internal_has_may_modify_formulas_in_cells() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellMapArchive::has_may_modify_formulas_in_cells() const {
  return _internal_has_may_modify_formulas_in_cells();
}
inline void CellMapArchive::clear_may_modify_formulas_in_cells() {
  may_modify_formulas_in_cells_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CellMapArchive::_internal_may_modify_formulas_in_cells() const {
  return may_modify_formulas_in_cells_;
}
inline bool CellMapArchive::may_modify_formulas_in_cells() const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.may_modify_formulas_in_cells)
  return _internal_may_modify_formulas_in_cells();
}
inline void CellMapArchive::_internal_set_may_modify_formulas_in_cells(bool value) {
  _has_bits_[0] |= 0x00000004u;
  may_modify_formulas_in_cells_ = value;
}
inline void CellMapArchive::set_may_modify_formulas_in_cells(bool value) {
  _internal_set_may_modify_formulas_in_cells(value);
  // @@protoc_insertion_point(field_set:TST.CellMapArchive.may_modify_formulas_in_cells)
}

// optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
inline bool CellMapArchive::_internal_has_may_modify_values_referenced_by_formulas() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CellMapArchive::has_may_modify_values_referenced_by_formulas() const {
  return _internal_has_may_modify_values_referenced_by_formulas();
}
inline void CellMapArchive::clear_may_modify_values_referenced_by_formulas() {
  may_modify_values_referenced_by_formulas_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CellMapArchive::_internal_may_modify_values_referenced_by_formulas() const {
  return may_modify_values_referenced_by_formulas_;
}
inline bool CellMapArchive::may_modify_values_referenced_by_formulas() const {
  // @@protoc_insertion_point(field_get:TST.CellMapArchive.may_modify_values_referenced_by_formulas)
  return _internal_may_modify_values_referenced_by_formulas();
}
inline void CellMapArchive::_internal_set_may_modify_values_referenced_by_formulas(bool value) {
  _has_bits_[0] |= 0x00000008u;
  may_modify_values_referenced_by_formulas_ = value;
}
inline void CellMapArchive::set_may_modify_values_referenced_by_formulas(bool value) {
  _internal_set_may_modify_values_referenced_by_formulas(value);
  // @@protoc_insertion_point(field_set:TST.CellMapArchive.may_modify_values_referenced_by_formulas)
}

// -------------------------------------------------------------------

// CellListArchive_OptionalCell

// optional .TST.Cell cell = 1;
inline bool CellListArchive_OptionalCell::_internal_has_cell() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_ != nullptr);
  return value;
}
inline bool CellListArchive_OptionalCell::has_cell() const {
  return _internal_has_cell();
}
inline void CellListArchive_OptionalCell::clear_cell() {
  if (cell_ != nullptr) cell_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::Cell& CellListArchive_OptionalCell::_internal_cell() const {
  const ::TST::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& CellListArchive_OptionalCell::cell() const {
  // @@protoc_insertion_point(field_get:TST.CellListArchive.OptionalCell.cell)
  return _internal_cell();
}
inline void CellListArchive_OptionalCell::unsafe_arena_set_allocated_cell(
    ::TST::Cell* cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellListArchive.OptionalCell.cell)
}
inline ::TST::Cell* CellListArchive_OptionalCell::release_cell() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::Cell* temp = cell_;
  cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Cell* CellListArchive_OptionalCell::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:TST.CellListArchive.OptionalCell.cell)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* CellListArchive_OptionalCell::_internal_mutable_cell() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArena());
    cell_ = p;
  }
  return cell_;
}
inline ::TST::Cell* CellListArchive_OptionalCell::mutable_cell() {
  // @@protoc_insertion_point(field_mutable:TST.CellListArchive.OptionalCell.cell)
  return _internal_mutable_cell();
}
inline void CellListArchive_OptionalCell::set_allocated_cell(::TST::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_;
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell);
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:TST.CellListArchive.OptionalCell.cell)
}

// -------------------------------------------------------------------

// CellListArchive

// repeated .TST.CellListArchive.OptionalCell cells = 1;
inline int CellListArchive::_internal_cells_size() const {
  return cells_.size();
}
inline int CellListArchive::cells_size() const {
  return _internal_cells_size();
}
inline void CellListArchive::clear_cells() {
  cells_.Clear();
}
inline ::TST::CellListArchive_OptionalCell* CellListArchive::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellListArchive.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellListArchive_OptionalCell >*
CellListArchive::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellListArchive.cells)
  return &cells_;
}
inline const ::TST::CellListArchive_OptionalCell& CellListArchive::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::TST::CellListArchive_OptionalCell& CellListArchive::cells(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellListArchive.cells)
  return _internal_cells(index);
}
inline ::TST::CellListArchive_OptionalCell* CellListArchive::_internal_add_cells() {
  return cells_.Add();
}
inline ::TST::CellListArchive_OptionalCell* CellListArchive::add_cells() {
  // @@protoc_insertion_point(field_add:TST.CellListArchive.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellListArchive_OptionalCell >&
CellListArchive::cells() const {
  // @@protoc_insertion_point(field_list:TST.CellListArchive.cells)
  return cells_;
}

// optional uint32 trailing_empty_cell_count = 2;
inline bool CellListArchive::_internal_has_trailing_empty_cell_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellListArchive::has_trailing_empty_cell_count() const {
  return _internal_has_trailing_empty_cell_count();
}
inline void CellListArchive::clear_trailing_empty_cell_count() {
  trailing_empty_cell_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellListArchive::_internal_trailing_empty_cell_count() const {
  return trailing_empty_cell_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellListArchive::trailing_empty_cell_count() const {
  // @@protoc_insertion_point(field_get:TST.CellListArchive.trailing_empty_cell_count)
  return _internal_trailing_empty_cell_count();
}
inline void CellListArchive::_internal_set_trailing_empty_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  trailing_empty_cell_count_ = value;
}
inline void CellListArchive::set_trailing_empty_cell_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trailing_empty_cell_count(value);
  // @@protoc_insertion_point(field_set:TST.CellListArchive.trailing_empty_cell_count)
}

// -------------------------------------------------------------------

// ConcurrentCellMapArchive

// repeated .TSP.Reference cell_lists = 1;
inline int ConcurrentCellMapArchive::_internal_cell_lists_size() const {
  return cell_lists_.size();
}
inline int ConcurrentCellMapArchive::cell_lists_size() const {
  return _internal_cell_lists_size();
}
inline ::TSP::Reference* ConcurrentCellMapArchive::mutable_cell_lists(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ConcurrentCellMapArchive.cell_lists)
  return cell_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ConcurrentCellMapArchive::mutable_cell_lists() {
  // @@protoc_insertion_point(field_mutable_list:TST.ConcurrentCellMapArchive.cell_lists)
  return &cell_lists_;
}
inline const ::TSP::Reference& ConcurrentCellMapArchive::_internal_cell_lists(int index) const {
  return cell_lists_.Get(index);
}
inline const ::TSP::Reference& ConcurrentCellMapArchive::cell_lists(int index) const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellMapArchive.cell_lists)
  return _internal_cell_lists(index);
}
inline ::TSP::Reference* ConcurrentCellMapArchive::_internal_add_cell_lists() {
  return cell_lists_.Add();
}
inline ::TSP::Reference* ConcurrentCellMapArchive::add_cell_lists() {
  // @@protoc_insertion_point(field_add:TST.ConcurrentCellMapArchive.cell_lists)
  return _internal_add_cell_lists();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ConcurrentCellMapArchive::cell_lists() const {
  // @@protoc_insertion_point(field_list:TST.ConcurrentCellMapArchive.cell_lists)
  return cell_lists_;
}

// required bool uid_based = 2;
inline bool ConcurrentCellMapArchive::_internal_has_uid_based() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConcurrentCellMapArchive::has_uid_based() const {
  return _internal_has_uid_based();
}
inline void ConcurrentCellMapArchive::clear_uid_based() {
  uid_based_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ConcurrentCellMapArchive::_internal_uid_based() const {
  return uid_based_;
}
inline bool ConcurrentCellMapArchive::uid_based() const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellMapArchive.uid_based)
  return _internal_uid_based();
}
inline void ConcurrentCellMapArchive::_internal_set_uid_based(bool value) {
  _has_bits_[0] |= 0x00000001u;
  uid_based_ = value;
}
inline void ConcurrentCellMapArchive::set_uid_based(bool value) {
  _internal_set_uid_based(value);
  // @@protoc_insertion_point(field_set:TST.ConcurrentCellMapArchive.uid_based)
}

// repeated .TST.MergeOperationArchive merge_actions = 3;
inline int ConcurrentCellMapArchive::_internal_merge_actions_size() const {
  return merge_actions_.size();
}
inline int ConcurrentCellMapArchive::merge_actions_size() const {
  return _internal_merge_actions_size();
}
inline void ConcurrentCellMapArchive::clear_merge_actions() {
  merge_actions_.Clear();
}
inline ::TST::MergeOperationArchive* ConcurrentCellMapArchive::mutable_merge_actions(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ConcurrentCellMapArchive.merge_actions)
  return merge_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >*
ConcurrentCellMapArchive::mutable_merge_actions() {
  // @@protoc_insertion_point(field_mutable_list:TST.ConcurrentCellMapArchive.merge_actions)
  return &merge_actions_;
}
inline const ::TST::MergeOperationArchive& ConcurrentCellMapArchive::_internal_merge_actions(int index) const {
  return merge_actions_.Get(index);
}
inline const ::TST::MergeOperationArchive& ConcurrentCellMapArchive::merge_actions(int index) const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellMapArchive.merge_actions)
  return _internal_merge_actions(index);
}
inline ::TST::MergeOperationArchive* ConcurrentCellMapArchive::_internal_add_merge_actions() {
  return merge_actions_.Add();
}
inline ::TST::MergeOperationArchive* ConcurrentCellMapArchive::add_merge_actions() {
  // @@protoc_insertion_point(field_add:TST.ConcurrentCellMapArchive.merge_actions)
  return _internal_add_merge_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::MergeOperationArchive >&
ConcurrentCellMapArchive::merge_actions() const {
  // @@protoc_insertion_point(field_list:TST.ConcurrentCellMapArchive.merge_actions)
  return merge_actions_;
}

// optional bool may_modify_formulas_in_cells = 4 [default = true];
inline bool ConcurrentCellMapArchive::_internal_has_may_modify_formulas_in_cells() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConcurrentCellMapArchive::has_may_modify_formulas_in_cells() const {
  return _internal_has_may_modify_formulas_in_cells();
}
inline void ConcurrentCellMapArchive::clear_may_modify_formulas_in_cells() {
  may_modify_formulas_in_cells_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ConcurrentCellMapArchive::_internal_may_modify_formulas_in_cells() const {
  return may_modify_formulas_in_cells_;
}
inline bool ConcurrentCellMapArchive::may_modify_formulas_in_cells() const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellMapArchive.may_modify_formulas_in_cells)
  return _internal_may_modify_formulas_in_cells();
}
inline void ConcurrentCellMapArchive::_internal_set_may_modify_formulas_in_cells(bool value) {
  _has_bits_[0] |= 0x00000002u;
  may_modify_formulas_in_cells_ = value;
}
inline void ConcurrentCellMapArchive::set_may_modify_formulas_in_cells(bool value) {
  _internal_set_may_modify_formulas_in_cells(value);
  // @@protoc_insertion_point(field_set:TST.ConcurrentCellMapArchive.may_modify_formulas_in_cells)
}

// optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
inline bool ConcurrentCellMapArchive::_internal_has_may_modify_values_referenced_by_formulas() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConcurrentCellMapArchive::has_may_modify_values_referenced_by_formulas() const {
  return _internal_has_may_modify_values_referenced_by_formulas();
}
inline void ConcurrentCellMapArchive::clear_may_modify_values_referenced_by_formulas() {
  may_modify_values_referenced_by_formulas_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ConcurrentCellMapArchive::_internal_may_modify_values_referenced_by_formulas() const {
  return may_modify_values_referenced_by_formulas_;
}
inline bool ConcurrentCellMapArchive::may_modify_values_referenced_by_formulas() const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellMapArchive.may_modify_values_referenced_by_formulas)
  return _internal_may_modify_values_referenced_by_formulas();
}
inline void ConcurrentCellMapArchive::_internal_set_may_modify_values_referenced_by_formulas(bool value) {
  _has_bits_[0] |= 0x00000004u;
  may_modify_values_referenced_by_formulas_ = value;
}
inline void ConcurrentCellMapArchive::set_may_modify_values_referenced_by_formulas(bool value) {
  _internal_set_may_modify_values_referenced_by_formulas(value);
  // @@protoc_insertion_point(field_set:TST.ConcurrentCellMapArchive.may_modify_values_referenced_by_formulas)
}

// -------------------------------------------------------------------

// ConcurrentCellListArchive_OptionalCell

// optional .TST.Cell cell = 1;
inline bool ConcurrentCellListArchive_OptionalCell::_internal_has_cell() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_ != nullptr);
  return value;
}
inline bool ConcurrentCellListArchive_OptionalCell::has_cell() const {
  return _internal_has_cell();
}
inline void ConcurrentCellListArchive_OptionalCell::clear_cell() {
  if (cell_ != nullptr) cell_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::Cell& ConcurrentCellListArchive_OptionalCell::_internal_cell() const {
  const ::TST::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& ConcurrentCellListArchive_OptionalCell::cell() const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellListArchive.OptionalCell.cell)
  return _internal_cell();
}
inline void ConcurrentCellListArchive_OptionalCell::unsafe_arena_set_allocated_cell(
    ::TST::Cell* cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ConcurrentCellListArchive.OptionalCell.cell)
}
inline ::TST::Cell* ConcurrentCellListArchive_OptionalCell::release_cell() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::Cell* temp = cell_;
  cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Cell* ConcurrentCellListArchive_OptionalCell::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:TST.ConcurrentCellListArchive.OptionalCell.cell)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* ConcurrentCellListArchive_OptionalCell::_internal_mutable_cell() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArena());
    cell_ = p;
  }
  return cell_;
}
inline ::TST::Cell* ConcurrentCellListArchive_OptionalCell::mutable_cell() {
  // @@protoc_insertion_point(field_mutable:TST.ConcurrentCellListArchive.OptionalCell.cell)
  return _internal_mutable_cell();
}
inline void ConcurrentCellListArchive_OptionalCell::set_allocated_cell(::TST::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_;
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell);
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:TST.ConcurrentCellListArchive.OptionalCell.cell)
}

// -------------------------------------------------------------------

// ConcurrentCellListArchive

// repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
inline int ConcurrentCellListArchive::_internal_cells_size() const {
  return cells_.size();
}
inline int ConcurrentCellListArchive::cells_size() const {
  return _internal_cells_size();
}
inline void ConcurrentCellListArchive::clear_cells() {
  cells_.Clear();
}
inline ::TST::ConcurrentCellListArchive_OptionalCell* ConcurrentCellListArchive::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ConcurrentCellListArchive.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConcurrentCellListArchive_OptionalCell >*
ConcurrentCellListArchive::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:TST.ConcurrentCellListArchive.cells)
  return &cells_;
}
inline const ::TST::ConcurrentCellListArchive_OptionalCell& ConcurrentCellListArchive::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::TST::ConcurrentCellListArchive_OptionalCell& ConcurrentCellListArchive::cells(int index) const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellListArchive.cells)
  return _internal_cells(index);
}
inline ::TST::ConcurrentCellListArchive_OptionalCell* ConcurrentCellListArchive::_internal_add_cells() {
  return cells_.Add();
}
inline ::TST::ConcurrentCellListArchive_OptionalCell* ConcurrentCellListArchive::add_cells() {
  // @@protoc_insertion_point(field_add:TST.ConcurrentCellListArchive.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConcurrentCellListArchive_OptionalCell >&
ConcurrentCellListArchive::cells() const {
  // @@protoc_insertion_point(field_list:TST.ConcurrentCellListArchive.cells)
  return cells_;
}

// optional .TSP.UUIDRectArchive cell_uid_range = 2;
inline bool ConcurrentCellListArchive::_internal_has_cell_uid_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_uid_range_ != nullptr);
  return value;
}
inline bool ConcurrentCellListArchive::has_cell_uid_range() const {
  return _internal_has_cell_uid_range();
}
inline const ::TSP::UUIDRectArchive& ConcurrentCellListArchive::_internal_cell_uid_range() const {
  const ::TSP::UUIDRectArchive* p = cell_uid_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDRectArchive&>(
      ::TSP::_UUIDRectArchive_default_instance_);
}
inline const ::TSP::UUIDRectArchive& ConcurrentCellListArchive::cell_uid_range() const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellListArchive.cell_uid_range)
  return _internal_cell_uid_range();
}
inline void ConcurrentCellListArchive::unsafe_arena_set_allocated_cell_uid_range(
    ::TSP::UUIDRectArchive* cell_uid_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_range_);
  }
  cell_uid_range_ = cell_uid_range;
  if (cell_uid_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ConcurrentCellListArchive.cell_uid_range)
}
inline ::TSP::UUIDRectArchive* ConcurrentCellListArchive::release_cell_uid_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDRectArchive* temp = cell_uid_range_;
  cell_uid_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDRectArchive* ConcurrentCellListArchive::unsafe_arena_release_cell_uid_range() {
  // @@protoc_insertion_point(field_release:TST.ConcurrentCellListArchive.cell_uid_range)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDRectArchive* temp = cell_uid_range_;
  cell_uid_range_ = nullptr;
  return temp;
}
inline ::TSP::UUIDRectArchive* ConcurrentCellListArchive::_internal_mutable_cell_uid_range() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_uid_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDRectArchive>(GetArena());
    cell_uid_range_ = p;
  }
  return cell_uid_range_;
}
inline ::TSP::UUIDRectArchive* ConcurrentCellListArchive::mutable_cell_uid_range() {
  // @@protoc_insertion_point(field_mutable:TST.ConcurrentCellListArchive.cell_uid_range)
  return _internal_mutable_cell_uid_range();
}
inline void ConcurrentCellListArchive::set_allocated_cell_uid_range(::TSP::UUIDRectArchive* cell_uid_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_range_);
  }
  if (cell_uid_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_range)->GetArena();
    if (message_arena != submessage_arena) {
      cell_uid_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_uid_range_ = cell_uid_range;
  // @@protoc_insertion_point(field_set_allocated:TST.ConcurrentCellListArchive.cell_uid_range)
}

// optional .TST.CellRange cell_range = 3;
inline bool ConcurrentCellListArchive::_internal_has_cell_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_range_ != nullptr);
  return value;
}
inline bool ConcurrentCellListArchive::has_cell_range() const {
  return _internal_has_cell_range();
}
inline void ConcurrentCellListArchive::clear_cell_range() {
  if (cell_range_ != nullptr) cell_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CellRange& ConcurrentCellListArchive::_internal_cell_range() const {
  const ::TST::CellRange* p = cell_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& ConcurrentCellListArchive::cell_range() const {
  // @@protoc_insertion_point(field_get:TST.ConcurrentCellListArchive.cell_range)
  return _internal_cell_range();
}
inline void ConcurrentCellListArchive::unsafe_arena_set_allocated_cell_range(
    ::TST::CellRange* cell_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_range_);
  }
  cell_range_ = cell_range;
  if (cell_range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ConcurrentCellListArchive.cell_range)
}
inline ::TST::CellRange* ConcurrentCellListArchive::release_cell_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellRange* temp = cell_range_;
  cell_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRange* ConcurrentCellListArchive::unsafe_arena_release_cell_range() {
  // @@protoc_insertion_point(field_release:TST.ConcurrentCellListArchive.cell_range)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellRange* temp = cell_range_;
  cell_range_ = nullptr;
  return temp;
}
inline ::TST::CellRange* ConcurrentCellListArchive::_internal_mutable_cell_range() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArena());
    cell_range_ = p;
  }
  return cell_range_;
}
inline ::TST::CellRange* ConcurrentCellListArchive::mutable_cell_range() {
  // @@protoc_insertion_point(field_mutable:TST.ConcurrentCellListArchive.cell_range)
  return _internal_mutable_cell_range();
}
inline void ConcurrentCellListArchive::set_allocated_cell_range(::TST::CellRange* cell_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_range_;
  }
  if (cell_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_range);
    if (message_arena != submessage_arena) {
      cell_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_range_ = cell_range;
  // @@protoc_insertion_point(field_set_allocated:TST.ConcurrentCellListArchive.cell_range)
}

// -------------------------------------------------------------------

// CellFormatAndValueArchive

// required .TST.CellValueType valueType = 1;
inline bool CellFormatAndValueArchive::_internal_has_valuetype() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_valuetype() const {
  return _internal_has_valuetype();
}
inline void CellFormatAndValueArchive::clear_valuetype() {
  valuetype_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::TST::CellValueType CellFormatAndValueArchive::_internal_valuetype() const {
  return static_cast< ::TST::CellValueType >(valuetype_);
}
inline ::TST::CellValueType CellFormatAndValueArchive::valuetype() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.valueType)
  return _internal_valuetype();
}
inline void CellFormatAndValueArchive::_internal_set_valuetype(::TST::CellValueType value) {
  assert(::TST::CellValueType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  valuetype_ = value;
}
inline void CellFormatAndValueArchive::set_valuetype(::TST::CellValueType value) {
  _internal_set_valuetype(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.valueType)
}

// optional double numberValue = 2;
inline bool CellFormatAndValueArchive::_internal_has_numbervalue() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_numbervalue() const {
  return _internal_has_numbervalue();
}
inline void CellFormatAndValueArchive::clear_numbervalue() {
  numbervalue_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double CellFormatAndValueArchive::_internal_numbervalue() const {
  return numbervalue_;
}
inline double CellFormatAndValueArchive::numbervalue() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.numberValue)
  return _internal_numbervalue();
}
inline void CellFormatAndValueArchive::_internal_set_numbervalue(double value) {
  _has_bits_[0] |= 0x00000400u;
  numbervalue_ = value;
}
inline void CellFormatAndValueArchive::set_numbervalue(double value) {
  _internal_set_numbervalue(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.numberValue)
}

// optional string stringValue = 3;
inline bool CellFormatAndValueArchive::_internal_has_stringvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_stringvalue() const {
  return _internal_has_stringvalue();
}
inline void CellFormatAndValueArchive::clear_stringvalue() {
  stringvalue_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CellFormatAndValueArchive::stringvalue() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.stringValue)
  return _internal_stringvalue();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CellFormatAndValueArchive::set_stringvalue(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.stringValue)
}
inline std::string* CellFormatAndValueArchive::mutable_stringvalue() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.stringValue)
  return _internal_mutable_stringvalue();
}
inline const std::string& CellFormatAndValueArchive::_internal_stringvalue() const {
  return stringvalue_.Get();
}
inline void CellFormatAndValueArchive::_internal_set_stringvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stringvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CellFormatAndValueArchive::_internal_mutable_stringvalue() {
  _has_bits_[0] |= 0x00000001u;
  return stringvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CellFormatAndValueArchive::release_stringvalue() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.stringValue)
  if (!_internal_has_stringvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stringvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CellFormatAndValueArchive::set_allocated_stringvalue(std::string* stringvalue) {
  if (stringvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stringvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.stringValue)
}

// optional bool boolValue = 4;
inline bool CellFormatAndValueArchive::_internal_has_boolvalue() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void CellFormatAndValueArchive::clear_boolvalue() {
  boolvalue_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CellFormatAndValueArchive::_internal_boolvalue() const {
  return boolvalue_;
}
inline bool CellFormatAndValueArchive::boolvalue() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.boolValue)
  return _internal_boolvalue();
}
inline void CellFormatAndValueArchive::_internal_set_boolvalue(bool value) {
  _has_bits_[0] |= 0x00004000u;
  boolvalue_ = value;
}
inline void CellFormatAndValueArchive::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.boolValue)
}

// optional .TSP.Reference richTextStorage = 5;
inline bool CellFormatAndValueArchive::_internal_has_richtextstorage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || richtextstorage_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_richtextstorage() const {
  return _internal_has_richtextstorage();
}
inline const ::TSP::Reference& CellFormatAndValueArchive::_internal_richtextstorage() const {
  const ::TSP::Reference* p = richtextstorage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CellFormatAndValueArchive::richtextstorage() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.richTextStorage)
  return _internal_richtextstorage();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_richtextstorage(
    ::TSP::Reference* richtextstorage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtextstorage_);
  }
  richtextstorage_ = richtextstorage;
  if (richtextstorage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.richTextStorage)
}
inline ::TSP::Reference* CellFormatAndValueArchive::release_richtextstorage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = richtextstorage_;
  richtextstorage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CellFormatAndValueArchive::unsafe_arena_release_richtextstorage() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.richTextStorage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = richtextstorage_;
  richtextstorage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CellFormatAndValueArchive::_internal_mutable_richtextstorage() {
  _has_bits_[0] |= 0x00000004u;
  if (richtextstorage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    richtextstorage_ = p;
  }
  return richtextstorage_;
}
inline ::TSP::Reference* CellFormatAndValueArchive::mutable_richtextstorage() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.richTextStorage)
  return _internal_mutable_richtextstorage();
}
inline void CellFormatAndValueArchive::set_allocated_richtextstorage(::TSP::Reference* richtextstorage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtextstorage_);
  }
  if (richtextstorage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(richtextstorage)->GetArena();
    if (message_arena != submessage_arena) {
      richtextstorage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, richtextstorage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  richtextstorage_ = richtextstorage;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.richTextStorage)
}

// required bool use_all_spare_formats = 6;
inline bool CellFormatAndValueArchive::_internal_has_use_all_spare_formats() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_use_all_spare_formats() const {
  return _internal_has_use_all_spare_formats();
}
inline void CellFormatAndValueArchive::clear_use_all_spare_formats() {
  use_all_spare_formats_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CellFormatAndValueArchive::_internal_use_all_spare_formats() const {
  return use_all_spare_formats_;
}
inline bool CellFormatAndValueArchive::use_all_spare_formats() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.use_all_spare_formats)
  return _internal_use_all_spare_formats();
}
inline void CellFormatAndValueArchive::_internal_set_use_all_spare_formats(bool value) {
  _has_bits_[0] |= 0x00008000u;
  use_all_spare_formats_ = value;
}
inline void CellFormatAndValueArchive::set_use_all_spare_formats(bool value) {
  _internal_set_use_all_spare_formats(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.use_all_spare_formats)
}

// required uint32 explicit_flags = 7;
inline bool CellFormatAndValueArchive::_internal_has_explicit_flags() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_explicit_flags() const {
  return _internal_has_explicit_flags();
}
inline void CellFormatAndValueArchive::clear_explicit_flags() {
  explicit_flags_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellFormatAndValueArchive::_internal_explicit_flags() const {
  return explicit_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellFormatAndValueArchive::explicit_flags() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.explicit_flags)
  return _internal_explicit_flags();
}
inline void CellFormatAndValueArchive::_internal_set_explicit_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  explicit_flags_ = value;
}
inline void CellFormatAndValueArchive::set_explicit_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_explicit_flags(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.explicit_flags)
}

// required uint32 cell_format_kind = 8;
inline bool CellFormatAndValueArchive::_internal_has_cell_format_kind() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_cell_format_kind() const {
  return _internal_has_cell_format_kind();
}
inline void CellFormatAndValueArchive::clear_cell_format_kind() {
  cell_format_kind_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellFormatAndValueArchive::_internal_cell_format_kind() const {
  return cell_format_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellFormatAndValueArchive::cell_format_kind() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.cell_format_kind)
  return _internal_cell_format_kind();
}
inline void CellFormatAndValueArchive::_internal_set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  cell_format_kind_ = value;
}
inline void CellFormatAndValueArchive::set_cell_format_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_format_kind(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.cell_format_kind)
}

// optional .TSK.FormatStructArchive number_format = 10;
inline bool CellFormatAndValueArchive::_internal_has_number_format() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || number_format_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_number_format() const {
  return _internal_has_number_format();
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::_internal_number_format() const {
  const ::TSK::FormatStructArchive* p = number_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::number_format() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.number_format)
  return _internal_number_format();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_number_format(
    ::TSK::FormatStructArchive* number_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_format_);
  }
  number_format_ = number_format;
  if (number_format) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.number_format)
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::release_number_format() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = number_format_;
  number_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::unsafe_arena_release_number_format() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.number_format)
  _has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = number_format_;
  number_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::_internal_mutable_number_format() {
  _has_bits_[0] |= 0x00000008u;
  if (number_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    number_format_ = p;
  }
  return number_format_;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::mutable_number_format() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.number_format)
  return _internal_mutable_number_format();
}
inline void CellFormatAndValueArchive::set_allocated_number_format(::TSK::FormatStructArchive* number_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_format_);
  }
  if (number_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_format)->GetArena();
    if (message_arena != submessage_arena) {
      number_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  number_format_ = number_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.number_format)
}

// optional .TSK.FormatStructArchive currency_format = 11;
inline bool CellFormatAndValueArchive::_internal_has_currency_format() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || currency_format_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_currency_format() const {
  return _internal_has_currency_format();
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::_internal_currency_format() const {
  const ::TSK::FormatStructArchive* p = currency_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::currency_format() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.currency_format)
  return _internal_currency_format();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_currency_format(
    ::TSK::FormatStructArchive* currency_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_format_);
  }
  currency_format_ = currency_format;
  if (currency_format) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.currency_format)
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::release_currency_format() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::FormatStructArchive* temp = currency_format_;
  currency_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::unsafe_arena_release_currency_format() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.currency_format)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::FormatStructArchive* temp = currency_format_;
  currency_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::_internal_mutable_currency_format() {
  _has_bits_[0] |= 0x00000010u;
  if (currency_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    currency_format_ = p;
  }
  return currency_format_;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::mutable_currency_format() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.currency_format)
  return _internal_mutable_currency_format();
}
inline void CellFormatAndValueArchive::set_allocated_currency_format(::TSK::FormatStructArchive* currency_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_format_);
  }
  if (currency_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currency_format)->GetArena();
    if (message_arena != submessage_arena) {
      currency_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currency_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  currency_format_ = currency_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.currency_format)
}

// optional .TSK.FormatStructArchive date_format = 12;
inline bool CellFormatAndValueArchive::_internal_has_date_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || date_format_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_date_format() const {
  return _internal_has_date_format();
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::_internal_date_format() const {
  const ::TSK::FormatStructArchive* p = date_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::date_format() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.date_format)
  return _internal_date_format();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_date_format(
    ::TSK::FormatStructArchive* date_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_format_);
  }
  date_format_ = date_format;
  if (date_format) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.date_format)
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::release_date_format() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = date_format_;
  date_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::unsafe_arena_release_date_format() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.date_format)
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = date_format_;
  date_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::_internal_mutable_date_format() {
  _has_bits_[0] |= 0x00000020u;
  if (date_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    date_format_ = p;
  }
  return date_format_;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::mutable_date_format() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.date_format)
  return _internal_mutable_date_format();
}
inline void CellFormatAndValueArchive::set_allocated_date_format(::TSK::FormatStructArchive* date_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_format_);
  }
  if (date_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_format)->GetArena();
    if (message_arena != submessage_arena) {
      date_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  date_format_ = date_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.date_format)
}

// optional .TSK.FormatStructArchive duration_format = 13;
inline bool CellFormatAndValueArchive::_internal_has_duration_format() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || duration_format_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_duration_format() const {
  return _internal_has_duration_format();
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::_internal_duration_format() const {
  const ::TSK::FormatStructArchive* p = duration_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::duration_format() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.duration_format)
  return _internal_duration_format();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_duration_format(
    ::TSK::FormatStructArchive* duration_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_format_);
  }
  duration_format_ = duration_format;
  if (duration_format) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.duration_format)
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::release_duration_format() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = duration_format_;
  duration_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::unsafe_arena_release_duration_format() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.duration_format)
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = duration_format_;
  duration_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::_internal_mutable_duration_format() {
  _has_bits_[0] |= 0x00000040u;
  if (duration_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    duration_format_ = p;
  }
  return duration_format_;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::mutable_duration_format() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.duration_format)
  return _internal_mutable_duration_format();
}
inline void CellFormatAndValueArchive::set_allocated_duration_format(::TSK::FormatStructArchive* duration_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_format_);
  }
  if (duration_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_format)->GetArena();
    if (message_arena != submessage_arena) {
      duration_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  duration_format_ = duration_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.duration_format)
}

// optional .TSK.FormatStructArchive text_format = 14;
inline bool CellFormatAndValueArchive::_internal_has_text_format() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || text_format_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_text_format() const {
  return _internal_has_text_format();
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::_internal_text_format() const {
  const ::TSK::FormatStructArchive* p = text_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::text_format() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.text_format)
  return _internal_text_format();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_text_format(
    ::TSK::FormatStructArchive* text_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_format_);
  }
  text_format_ = text_format;
  if (text_format) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.text_format)
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::release_text_format() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = text_format_;
  text_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::unsafe_arena_release_text_format() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.text_format)
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = text_format_;
  text_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::_internal_mutable_text_format() {
  _has_bits_[0] |= 0x00000080u;
  if (text_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    text_format_ = p;
  }
  return text_format_;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::mutable_text_format() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.text_format)
  return _internal_mutable_text_format();
}
inline void CellFormatAndValueArchive::set_allocated_text_format(::TSK::FormatStructArchive* text_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_format_);
  }
  if (text_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_format)->GetArena();
    if (message_arena != submessage_arena) {
      text_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  text_format_ = text_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.text_format)
}

// optional .TSK.FormatStructArchive boolean_format = 15;
inline bool CellFormatAndValueArchive::_internal_has_boolean_format() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || boolean_format_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_boolean_format() const {
  return _internal_has_boolean_format();
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::_internal_boolean_format() const {
  const ::TSK::FormatStructArchive* p = boolean_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CellFormatAndValueArchive::boolean_format() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.boolean_format)
  return _internal_boolean_format();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_boolean_format(
    ::TSK::FormatStructArchive* boolean_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_format_);
  }
  boolean_format_ = boolean_format;
  if (boolean_format) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.boolean_format)
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::release_boolean_format() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = boolean_format_;
  boolean_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::unsafe_arena_release_boolean_format() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.boolean_format)
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = boolean_format_;
  boolean_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::_internal_mutable_boolean_format() {
  _has_bits_[0] |= 0x00000100u;
  if (boolean_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    boolean_format_ = p;
  }
  return boolean_format_;
}
inline ::TSK::FormatStructArchive* CellFormatAndValueArchive::mutable_boolean_format() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.boolean_format)
  return _internal_mutable_boolean_format();
}
inline void CellFormatAndValueArchive::set_allocated_boolean_format(::TSK::FormatStructArchive* boolean_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_format_);
  }
  if (boolean_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boolean_format)->GetArena();
    if (message_arena != submessage_arena) {
      boolean_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boolean_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  boolean_format_ = boolean_format;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.boolean_format)
}

// optional string formatted_value = 16;
inline bool CellFormatAndValueArchive::_internal_has_formatted_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_formatted_value() const {
  return _internal_has_formatted_value();
}
inline void CellFormatAndValueArchive::clear_formatted_value() {
  formatted_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CellFormatAndValueArchive::formatted_value() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.formatted_value)
  return _internal_formatted_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CellFormatAndValueArchive::set_formatted_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 formatted_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.formatted_value)
}
inline std::string* CellFormatAndValueArchive::mutable_formatted_value() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.formatted_value)
  return _internal_mutable_formatted_value();
}
inline const std::string& CellFormatAndValueArchive::_internal_formatted_value() const {
  return formatted_value_.Get();
}
inline void CellFormatAndValueArchive::_internal_set_formatted_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  formatted_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CellFormatAndValueArchive::_internal_mutable_formatted_value() {
  _has_bits_[0] |= 0x00000002u;
  return formatted_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CellFormatAndValueArchive::release_formatted_value() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.formatted_value)
  if (!_internal_has_formatted_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return formatted_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CellFormatAndValueArchive::set_allocated_formatted_value(std::string* formatted_value) {
  if (formatted_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  formatted_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formatted_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.formatted_value)
}

// optional .TSP.Reference formatted_rich_text_value = 17;
inline bool CellFormatAndValueArchive::_internal_has_formatted_rich_text_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || formatted_rich_text_value_ != nullptr);
  return value;
}
inline bool CellFormatAndValueArchive::has_formatted_rich_text_value() const {
  return _internal_has_formatted_rich_text_value();
}
inline const ::TSP::Reference& CellFormatAndValueArchive::_internal_formatted_rich_text_value() const {
  const ::TSP::Reference* p = formatted_rich_text_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CellFormatAndValueArchive::formatted_rich_text_value() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.formatted_rich_text_value)
  return _internal_formatted_rich_text_value();
}
inline void CellFormatAndValueArchive::unsafe_arena_set_allocated_formatted_rich_text_value(
    ::TSP::Reference* formatted_rich_text_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formatted_rich_text_value_);
  }
  formatted_rich_text_value_ = formatted_rich_text_value;
  if (formatted_rich_text_value) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFormatAndValueArchive.formatted_rich_text_value)
}
inline ::TSP::Reference* CellFormatAndValueArchive::release_formatted_rich_text_value() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = formatted_rich_text_value_;
  formatted_rich_text_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CellFormatAndValueArchive::unsafe_arena_release_formatted_rich_text_value() {
  // @@protoc_insertion_point(field_release:TST.CellFormatAndValueArchive.formatted_rich_text_value)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = formatted_rich_text_value_;
  formatted_rich_text_value_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CellFormatAndValueArchive::_internal_mutable_formatted_rich_text_value() {
  _has_bits_[0] |= 0x00000200u;
  if (formatted_rich_text_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    formatted_rich_text_value_ = p;
  }
  return formatted_rich_text_value_;
}
inline ::TSP::Reference* CellFormatAndValueArchive::mutable_formatted_rich_text_value() {
  // @@protoc_insertion_point(field_mutable:TST.CellFormatAndValueArchive.formatted_rich_text_value)
  return _internal_mutable_formatted_rich_text_value();
}
inline void CellFormatAndValueArchive::set_allocated_formatted_rich_text_value(::TSP::Reference* formatted_rich_text_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formatted_rich_text_value_);
  }
  if (formatted_rich_text_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formatted_rich_text_value)->GetArena();
    if (message_arena != submessage_arena) {
      formatted_rich_text_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formatted_rich_text_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  formatted_rich_text_value_ = formatted_rich_text_value;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFormatAndValueArchive.formatted_rich_text_value)
}

// required bool apply_spare_format_only = 18;
inline bool CellFormatAndValueArchive::_internal_has_apply_spare_format_only() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_apply_spare_format_only() const {
  return _internal_has_apply_spare_format_only();
}
inline void CellFormatAndValueArchive::clear_apply_spare_format_only() {
  apply_spare_format_only_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CellFormatAndValueArchive::_internal_apply_spare_format_only() const {
  return apply_spare_format_only_;
}
inline bool CellFormatAndValueArchive::apply_spare_format_only() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.apply_spare_format_only)
  return _internal_apply_spare_format_only();
}
inline void CellFormatAndValueArchive::_internal_set_apply_spare_format_only(bool value) {
  _has_bits_[0] |= 0x00010000u;
  apply_spare_format_only_ = value;
}
inline void CellFormatAndValueArchive::set_apply_spare_format_only(bool value) {
  _internal_set_apply_spare_format_only(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.apply_spare_format_only)
}

// required bool spare_format_type = 19;
inline bool CellFormatAndValueArchive::_internal_has_spare_format_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_spare_format_type() const {
  return _internal_has_spare_format_type();
}
inline void CellFormatAndValueArchive::clear_spare_format_type() {
  spare_format_type_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CellFormatAndValueArchive::_internal_spare_format_type() const {
  return spare_format_type_;
}
inline bool CellFormatAndValueArchive::spare_format_type() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.spare_format_type)
  return _internal_spare_format_type();
}
inline void CellFormatAndValueArchive::_internal_set_spare_format_type(bool value) {
  _has_bits_[0] |= 0x00020000u;
  spare_format_type_ = value;
}
inline void CellFormatAndValueArchive::set_spare_format_type(bool value) {
  _internal_set_spare_format_type(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.spare_format_type)
}

// optional uint64 decimal_low = 20;
inline bool CellFormatAndValueArchive::_internal_has_decimal_low() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_decimal_low() const {
  return _internal_has_decimal_low();
}
inline void CellFormatAndValueArchive::clear_decimal_low() {
  decimal_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellFormatAndValueArchive::_internal_decimal_low() const {
  return decimal_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellFormatAndValueArchive::decimal_low() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.decimal_low)
  return _internal_decimal_low();
}
inline void CellFormatAndValueArchive::_internal_set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  decimal_low_ = value;
}
inline void CellFormatAndValueArchive::set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_low(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.decimal_low)
}

// optional uint64 decimal_high = 21;
inline bool CellFormatAndValueArchive::_internal_has_decimal_high() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CellFormatAndValueArchive::has_decimal_high() const {
  return _internal_has_decimal_high();
}
inline void CellFormatAndValueArchive::clear_decimal_high() {
  decimal_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellFormatAndValueArchive::_internal_decimal_high() const {
  return decimal_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CellFormatAndValueArchive::decimal_high() const {
  // @@protoc_insertion_point(field_get:TST.CellFormatAndValueArchive.decimal_high)
  return _internal_decimal_high();
}
inline void CellFormatAndValueArchive::_internal_set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  decimal_high_ = value;
}
inline void CellFormatAndValueArchive::set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_high(value);
  // @@protoc_insertion_point(field_set:TST.CellFormatAndValueArchive.decimal_high)
}

// -------------------------------------------------------------------

// CellSpecArchive

// required uint32 interaction_type = 1;
inline bool CellSpecArchive::_internal_has_interaction_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellSpecArchive::has_interaction_type() const {
  return _internal_has_interaction_type();
}
inline void CellSpecArchive::clear_interaction_type() {
  interaction_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellSpecArchive::_internal_interaction_type() const {
  return interaction_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellSpecArchive::interaction_type() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.interaction_type)
  return _internal_interaction_type();
}
inline void CellSpecArchive::_internal_set_interaction_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  interaction_type_ = value;
}
inline void CellSpecArchive::set_interaction_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interaction_type(value);
  // @@protoc_insertion_point(field_set:TST.CellSpecArchive.interaction_type)
}

// optional .TSCE.FormulaArchive formula = 2;
inline bool CellSpecArchive::_internal_has_formula() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_ != nullptr);
  return value;
}
inline bool CellSpecArchive::has_formula() const {
  return _internal_has_formula();
}
inline const ::TSCE::FormulaArchive& CellSpecArchive::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& CellSpecArchive::formula() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.formula)
  return _internal_formula();
}
inline void CellSpecArchive::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  formula_ = formula;
  if (formula) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellSpecArchive.formula)
}
inline ::TSCE::FormulaArchive* CellSpecArchive::release_formula() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaArchive* CellSpecArchive::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TST.CellSpecArchive.formula)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* CellSpecArchive::_internal_mutable_formula() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArena());
    formula_ = p;
  }
  return formula_;
}
inline ::TSCE::FormulaArchive* CellSpecArchive::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CellSpecArchive.formula)
  return _internal_mutable_formula();
}
inline void CellSpecArchive::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula)->GetArena();
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CellSpecArchive.formula)
}

// optional double range_control_min = 3;
inline bool CellSpecArchive::_internal_has_range_control_min() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellSpecArchive::has_range_control_min() const {
  return _internal_has_range_control_min();
}
inline void CellSpecArchive::clear_range_control_min() {
  range_control_min_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CellSpecArchive::_internal_range_control_min() const {
  return range_control_min_;
}
inline double CellSpecArchive::range_control_min() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.range_control_min)
  return _internal_range_control_min();
}
inline void CellSpecArchive::_internal_set_range_control_min(double value) {
  _has_bits_[0] |= 0x00000004u;
  range_control_min_ = value;
}
inline void CellSpecArchive::set_range_control_min(double value) {
  _internal_set_range_control_min(value);
  // @@protoc_insertion_point(field_set:TST.CellSpecArchive.range_control_min)
}

// optional double range_control_max = 4;
inline bool CellSpecArchive::_internal_has_range_control_max() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CellSpecArchive::has_range_control_max() const {
  return _internal_has_range_control_max();
}
inline void CellSpecArchive::clear_range_control_max() {
  range_control_max_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CellSpecArchive::_internal_range_control_max() const {
  return range_control_max_;
}
inline double CellSpecArchive::range_control_max() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.range_control_max)
  return _internal_range_control_max();
}
inline void CellSpecArchive::_internal_set_range_control_max(double value) {
  _has_bits_[0] |= 0x00000008u;
  range_control_max_ = value;
}
inline void CellSpecArchive::set_range_control_max(double value) {
  _internal_set_range_control_max(value);
  // @@protoc_insertion_point(field_set:TST.CellSpecArchive.range_control_max)
}

// optional double range_control_inc = 5;
inline bool CellSpecArchive::_internal_has_range_control_inc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellSpecArchive::has_range_control_inc() const {
  return _internal_has_range_control_inc();
}
inline void CellSpecArchive::clear_range_control_inc() {
  range_control_inc_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CellSpecArchive::_internal_range_control_inc() const {
  return range_control_inc_;
}
inline double CellSpecArchive::range_control_inc() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.range_control_inc)
  return _internal_range_control_inc();
}
inline void CellSpecArchive::_internal_set_range_control_inc(double value) {
  _has_bits_[0] |= 0x00000010u;
  range_control_inc_ = value;
}
inline void CellSpecArchive::set_range_control_inc(double value) {
  _internal_set_range_control_inc(value);
  // @@protoc_insertion_point(field_set:TST.CellSpecArchive.range_control_inc)
}

// optional .TSP.Reference chooser_control_popup_model = 6;
inline bool CellSpecArchive::_internal_has_chooser_control_popup_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chooser_control_popup_model_ != nullptr);
  return value;
}
inline bool CellSpecArchive::has_chooser_control_popup_model() const {
  return _internal_has_chooser_control_popup_model();
}
inline const ::TSP::Reference& CellSpecArchive::_internal_chooser_control_popup_model() const {
  const ::TSP::Reference* p = chooser_control_popup_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CellSpecArchive::chooser_control_popup_model() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.chooser_control_popup_model)
  return _internal_chooser_control_popup_model();
}
inline void CellSpecArchive::unsafe_arena_set_allocated_chooser_control_popup_model(
    ::TSP::Reference* chooser_control_popup_model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chooser_control_popup_model_);
  }
  chooser_control_popup_model_ = chooser_control_popup_model;
  if (chooser_control_popup_model) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellSpecArchive.chooser_control_popup_model)
}
inline ::TSP::Reference* CellSpecArchive::release_chooser_control_popup_model() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = chooser_control_popup_model_;
  chooser_control_popup_model_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CellSpecArchive::unsafe_arena_release_chooser_control_popup_model() {
  // @@protoc_insertion_point(field_release:TST.CellSpecArchive.chooser_control_popup_model)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = chooser_control_popup_model_;
  chooser_control_popup_model_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CellSpecArchive::_internal_mutable_chooser_control_popup_model() {
  _has_bits_[0] |= 0x00000002u;
  if (chooser_control_popup_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    chooser_control_popup_model_ = p;
  }
  return chooser_control_popup_model_;
}
inline ::TSP::Reference* CellSpecArchive::mutable_chooser_control_popup_model() {
  // @@protoc_insertion_point(field_mutable:TST.CellSpecArchive.chooser_control_popup_model)
  return _internal_mutable_chooser_control_popup_model();
}
inline void CellSpecArchive::set_allocated_chooser_control_popup_model(::TSP::Reference* chooser_control_popup_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chooser_control_popup_model_);
  }
  if (chooser_control_popup_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chooser_control_popup_model)->GetArena();
    if (message_arena != submessage_arena) {
      chooser_control_popup_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chooser_control_popup_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chooser_control_popup_model_ = chooser_control_popup_model;
  // @@protoc_insertion_point(field_set_allocated:TST.CellSpecArchive.chooser_control_popup_model)
}

// optional bool chooser_control_start_w_first = 7;
inline bool CellSpecArchive::_internal_has_chooser_control_start_w_first() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CellSpecArchive::has_chooser_control_start_w_first() const {
  return _internal_has_chooser_control_start_w_first();
}
inline void CellSpecArchive::clear_chooser_control_start_w_first() {
  chooser_control_start_w_first_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CellSpecArchive::_internal_chooser_control_start_w_first() const {
  return chooser_control_start_w_first_;
}
inline bool CellSpecArchive::chooser_control_start_w_first() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.chooser_control_start_w_first)
  return _internal_chooser_control_start_w_first();
}
inline void CellSpecArchive::_internal_set_chooser_control_start_w_first(bool value) {
  _has_bits_[0] |= 0x00000040u;
  chooser_control_start_w_first_ = value;
}
inline void CellSpecArchive::set_chooser_control_start_w_first(bool value) {
  _internal_set_chooser_control_start_w_first(value);
  // @@protoc_insertion_point(field_set:TST.CellSpecArchive.chooser_control_start_w_first)
}

// optional bool category_summary_should_display_label = 8 [deprecated = true];
inline bool CellSpecArchive::_internal_has_category_summary_should_display_label() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CellSpecArchive::has_category_summary_should_display_label() const {
  return _internal_has_category_summary_should_display_label();
}
inline void CellSpecArchive::clear_category_summary_should_display_label() {
  category_summary_should_display_label_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CellSpecArchive::_internal_category_summary_should_display_label() const {
  return category_summary_should_display_label_;
}
inline bool CellSpecArchive::category_summary_should_display_label() const {
  // @@protoc_insertion_point(field_get:TST.CellSpecArchive.category_summary_should_display_label)
  return _internal_category_summary_should_display_label();
}
inline void CellSpecArchive::_internal_set_category_summary_should_display_label(bool value) {
  _has_bits_[0] |= 0x00000080u;
  category_summary_should_display_label_ = value;
}
inline void CellSpecArchive::set_category_summary_should_display_label(bool value) {
  _internal_set_category_summary_should_display_label(value);
  // @@protoc_insertion_point(field_set:TST.CellSpecArchive.category_summary_should_display_label)
}

// -------------------------------------------------------------------

// CommentStorageWrapperArchive

// optional .TSP.Reference comment_storage = 1;
inline bool CommentStorageWrapperArchive::_internal_has_comment_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || comment_storage_ != nullptr);
  return value;
}
inline bool CommentStorageWrapperArchive::has_comment_storage() const {
  return _internal_has_comment_storage();
}
inline const ::TSP::Reference& CommentStorageWrapperArchive::_internal_comment_storage() const {
  const ::TSP::Reference* p = comment_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommentStorageWrapperArchive::comment_storage() const {
  // @@protoc_insertion_point(field_get:TST.CommentStorageWrapperArchive.comment_storage)
  return _internal_comment_storage();
}
inline void CommentStorageWrapperArchive::unsafe_arena_set_allocated_comment_storage(
    ::TSP::Reference* comment_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  comment_storage_ = comment_storage;
  if (comment_storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CommentStorageWrapperArchive.comment_storage)
}
inline ::TSP::Reference* CommentStorageWrapperArchive::release_comment_storage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommentStorageWrapperArchive::unsafe_arena_release_comment_storage() {
  // @@protoc_insertion_point(field_release:TST.CommentStorageWrapperArchive.comment_storage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = comment_storage_;
  comment_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommentStorageWrapperArchive::_internal_mutable_comment_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (comment_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    comment_storage_ = p;
  }
  return comment_storage_;
}
inline ::TSP::Reference* CommentStorageWrapperArchive::mutable_comment_storage() {
  // @@protoc_insertion_point(field_mutable:TST.CommentStorageWrapperArchive.comment_storage)
  return _internal_mutable_comment_storage();
}
inline void CommentStorageWrapperArchive::set_allocated_comment_storage(::TSP::Reference* comment_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage_);
  }
  if (comment_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_storage)->GetArena();
    if (message_arena != submessage_arena) {
      comment_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comment_storage_ = comment_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.CommentStorageWrapperArchive.comment_storage)
}

// -------------------------------------------------------------------

// CellDiffArchive

// required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
inline bool CellDiffArchive::_internal_has_property_map_to_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || property_map_to_set_ != nullptr);
  return value;
}
inline bool CellDiffArchive::has_property_map_to_set() const {
  return _internal_has_property_map_to_set();
}
inline const ::TSS::CommandPropertyMapArchive& CellDiffArchive::_internal_property_map_to_set() const {
  const ::TSS::CommandPropertyMapArchive* p = property_map_to_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::CommandPropertyMapArchive&>(
      ::TSS::_CommandPropertyMapArchive_default_instance_);
}
inline const ::TSS::CommandPropertyMapArchive& CellDiffArchive::property_map_to_set() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffArchive.property_map_to_set)
  return _internal_property_map_to_set();
}
inline void CellDiffArchive::unsafe_arena_set_allocated_property_map_to_set(
    ::TSS::CommandPropertyMapArchive* property_map_to_set) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_map_to_set_);
  }
  property_map_to_set_ = property_map_to_set;
  if (property_map_to_set) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellDiffArchive.property_map_to_set)
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::release_property_map_to_set() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::CommandPropertyMapArchive* temp = property_map_to_set_;
  property_map_to_set_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::unsafe_arena_release_property_map_to_set() {
  // @@protoc_insertion_point(field_release:TST.CellDiffArchive.property_map_to_set)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::CommandPropertyMapArchive* temp = property_map_to_set_;
  property_map_to_set_ = nullptr;
  return temp;
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::_internal_mutable_property_map_to_set() {
  _has_bits_[0] |= 0x00000001u;
  if (property_map_to_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::CommandPropertyMapArchive>(GetArena());
    property_map_to_set_ = p;
  }
  return property_map_to_set_;
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::mutable_property_map_to_set() {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffArchive.property_map_to_set)
  return _internal_mutable_property_map_to_set();
}
inline void CellDiffArchive::set_allocated_property_map_to_set(::TSS::CommandPropertyMapArchive* property_map_to_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_map_to_set_);
  }
  if (property_map_to_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_map_to_set)->GetArena();
    if (message_arena != submessage_arena) {
      property_map_to_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_map_to_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_map_to_set_ = property_map_to_set;
  // @@protoc_insertion_point(field_set_allocated:TST.CellDiffArchive.property_map_to_set)
}

// required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
inline bool CellDiffArchive::_internal_has_property_map_to_reset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || property_map_to_reset_ != nullptr);
  return value;
}
inline bool CellDiffArchive::has_property_map_to_reset() const {
  return _internal_has_property_map_to_reset();
}
inline const ::TSS::CommandPropertyMapArchive& CellDiffArchive::_internal_property_map_to_reset() const {
  const ::TSS::CommandPropertyMapArchive* p = property_map_to_reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::CommandPropertyMapArchive&>(
      ::TSS::_CommandPropertyMapArchive_default_instance_);
}
inline const ::TSS::CommandPropertyMapArchive& CellDiffArchive::property_map_to_reset() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffArchive.property_map_to_reset)
  return _internal_property_map_to_reset();
}
inline void CellDiffArchive::unsafe_arena_set_allocated_property_map_to_reset(
    ::TSS::CommandPropertyMapArchive* property_map_to_reset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_map_to_reset_);
  }
  property_map_to_reset_ = property_map_to_reset;
  if (property_map_to_reset) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellDiffArchive.property_map_to_reset)
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::release_property_map_to_reset() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::CommandPropertyMapArchive* temp = property_map_to_reset_;
  property_map_to_reset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::unsafe_arena_release_property_map_to_reset() {
  // @@protoc_insertion_point(field_release:TST.CellDiffArchive.property_map_to_reset)
  _has_bits_[0] &= ~0x00000002u;
  ::TSS::CommandPropertyMapArchive* temp = property_map_to_reset_;
  property_map_to_reset_ = nullptr;
  return temp;
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::_internal_mutable_property_map_to_reset() {
  _has_bits_[0] |= 0x00000002u;
  if (property_map_to_reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::CommandPropertyMapArchive>(GetArena());
    property_map_to_reset_ = p;
  }
  return property_map_to_reset_;
}
inline ::TSS::CommandPropertyMapArchive* CellDiffArchive::mutable_property_map_to_reset() {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffArchive.property_map_to_reset)
  return _internal_mutable_property_map_to_reset();
}
inline void CellDiffArchive::set_allocated_property_map_to_reset(::TSS::CommandPropertyMapArchive* property_map_to_reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_map_to_reset_);
  }
  if (property_map_to_reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_map_to_reset)->GetArena();
    if (message_arena != submessage_arena) {
      property_map_to_reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_map_to_reset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  property_map_to_reset_ = property_map_to_reset;
  // @@protoc_insertion_point(field_set_allocated:TST.CellDiffArchive.property_map_to_reset)
}

// -------------------------------------------------------------------

// CellDiffArray

// optional .TSP.LargeArray large_array = 1;
inline bool CellDiffArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool CellDiffArray::has_large_array() const {
  return _internal_has_large_array();
}
inline const ::TSP::LargeArray& CellDiffArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& CellDiffArray::large_array() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffArray.large_array)
  return _internal_large_array();
}
inline void CellDiffArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellDiffArray.large_array)
}
inline ::TSP::LargeArray* CellDiffArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* CellDiffArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TST.CellDiffArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* CellDiffArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* CellDiffArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffArray.large_array)
  return _internal_mutable_large_array();
}
inline void CellDiffArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array)->GetArena();
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TST.CellDiffArray.large_array)
}

// -------------------------------------------------------------------

// CellDiffArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool CellDiffArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool CellDiffArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline const ::TSP::LargeArraySegment& CellDiffArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& CellDiffArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void CellDiffArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellDiffArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* CellDiffArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* CellDiffArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TST.CellDiffArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* CellDiffArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* CellDiffArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void CellDiffArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment)->GetArena();
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TST.CellDiffArraySegment.large_array_segment)
}

// repeated .TST.CellDiffArchive elements = 2;
inline int CellDiffArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int CellDiffArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void CellDiffArraySegment::clear_elements() {
  elements_.Clear();
}
inline ::TST::CellDiffArchive* CellDiffArraySegment::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffArraySegment.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellDiffArchive >*
CellDiffArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellDiffArraySegment.elements)
  return &elements_;
}
inline const ::TST::CellDiffArchive& CellDiffArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TST::CellDiffArchive& CellDiffArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellDiffArraySegment.elements)
  return _internal_elements(index);
}
inline ::TST::CellDiffArchive* CellDiffArraySegment::_internal_add_elements() {
  return elements_.Add();
}
inline ::TST::CellDiffArchive* CellDiffArraySegment::add_elements() {
  // @@protoc_insertion_point(field_add:TST.CellDiffArraySegment.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellDiffArchive >&
CellDiffArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TST.CellDiffArraySegment.elements)
  return elements_;
}

// -------------------------------------------------------------------

// CellDiffMapArchive

// required bool uid_based = 1;
inline bool CellDiffMapArchive::_internal_has_uid_based() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellDiffMapArchive::has_uid_based() const {
  return _internal_has_uid_based();
}
inline void CellDiffMapArchive::clear_uid_based() {
  uid_based_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CellDiffMapArchive::_internal_uid_based() const {
  return uid_based_;
}
inline bool CellDiffMapArchive::uid_based() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffMapArchive.uid_based)
  return _internal_uid_based();
}
inline void CellDiffMapArchive::_internal_set_uid_based(bool value) {
  _has_bits_[0] |= 0x00000004u;
  uid_based_ = value;
}
inline void CellDiffMapArchive::set_uid_based(bool value) {
  _internal_set_uid_based(value);
  // @@protoc_insertion_point(field_set:TST.CellDiffMapArchive.uid_based)
}

// repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
inline int CellDiffMapArchive::_internal_expanded_cell_ids_size() const {
  return expanded_cell_ids_.size();
}
inline int CellDiffMapArchive::expanded_cell_ids_size() const {
  return _internal_expanded_cell_ids_size();
}
inline ::TSCE::CellCoordinateArchive* CellDiffMapArchive::mutable_expanded_cell_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffMapArchive.expanded_cell_ids)
  return expanded_cell_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
CellDiffMapArchive::mutable_expanded_cell_ids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CellDiffMapArchive.expanded_cell_ids)
  return &expanded_cell_ids_;
}
inline const ::TSCE::CellCoordinateArchive& CellDiffMapArchive::_internal_expanded_cell_ids(int index) const {
  return expanded_cell_ids_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& CellDiffMapArchive::expanded_cell_ids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CellDiffMapArchive.expanded_cell_ids)
  return _internal_expanded_cell_ids(index);
}
inline ::TSCE::CellCoordinateArchive* CellDiffMapArchive::_internal_add_expanded_cell_ids() {
  return expanded_cell_ids_.Add();
}
inline ::TSCE::CellCoordinateArchive* CellDiffMapArchive::add_expanded_cell_ids() {
  // @@protoc_insertion_point(field_add:TST.CellDiffMapArchive.expanded_cell_ids)
  return _internal_add_expanded_cell_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
CellDiffMapArchive::expanded_cell_ids() const {
  // @@protoc_insertion_point(field_list:TST.CellDiffMapArchive.expanded_cell_ids)
  return expanded_cell_ids_;
}

// required .TST.CellUIDListArchive cell_uids = 3;
inline bool CellDiffMapArchive::_internal_has_cell_uids() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_uids_ != nullptr);
  return value;
}
inline bool CellDiffMapArchive::has_cell_uids() const {
  return _internal_has_cell_uids();
}
inline void CellDiffMapArchive::clear_cell_uids() {
  if (cell_uids_ != nullptr) cell_uids_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellUIDListArchive& CellDiffMapArchive::_internal_cell_uids() const {
  const ::TST::CellUIDListArchive* p = cell_uids_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDListArchive&>(
      ::TST::_CellUIDListArchive_default_instance_);
}
inline const ::TST::CellUIDListArchive& CellDiffMapArchive::cell_uids() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffMapArchive.cell_uids)
  return _internal_cell_uids();
}
inline void CellDiffMapArchive::unsafe_arena_set_allocated_cell_uids(
    ::TST::CellUIDListArchive* cell_uids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uids_);
  }
  cell_uids_ = cell_uids;
  if (cell_uids) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellDiffMapArchive.cell_uids)
}
inline ::TST::CellUIDListArchive* CellDiffMapArchive::release_cell_uids() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellUIDListArchive* temp = cell_uids_;
  cell_uids_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDListArchive* CellDiffMapArchive::unsafe_arena_release_cell_uids() {
  // @@protoc_insertion_point(field_release:TST.CellDiffMapArchive.cell_uids)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellUIDListArchive* temp = cell_uids_;
  cell_uids_ = nullptr;
  return temp;
}
inline ::TST::CellUIDListArchive* CellDiffMapArchive::_internal_mutable_cell_uids() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_uids_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDListArchive>(GetArena());
    cell_uids_ = p;
  }
  return cell_uids_;
}
inline ::TST::CellUIDListArchive* CellDiffMapArchive::mutable_cell_uids() {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffMapArchive.cell_uids)
  return _internal_mutable_cell_uids();
}
inline void CellDiffMapArchive::set_allocated_cell_uids(::TST::CellUIDListArchive* cell_uids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_uids_;
  }
  if (cell_uids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_uids);
    if (message_arena != submessage_arena) {
      cell_uids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_uids_ = cell_uids;
  // @@protoc_insertion_point(field_set_allocated:TST.CellDiffMapArchive.cell_uids)
}

// optional .TSP.Reference cell_diff_array = 4;
inline bool CellDiffMapArchive::_internal_has_cell_diff_array() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_diff_array_ != nullptr);
  return value;
}
inline bool CellDiffMapArchive::has_cell_diff_array() const {
  return _internal_has_cell_diff_array();
}
inline const ::TSP::Reference& CellDiffMapArchive::_internal_cell_diff_array() const {
  const ::TSP::Reference* p = cell_diff_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CellDiffMapArchive::cell_diff_array() const {
  // @@protoc_insertion_point(field_get:TST.CellDiffMapArchive.cell_diff_array)
  return _internal_cell_diff_array();
}
inline void CellDiffMapArchive::unsafe_arena_set_allocated_cell_diff_array(
    ::TSP::Reference* cell_diff_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_array_);
  }
  cell_diff_array_ = cell_diff_array;
  if (cell_diff_array) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellDiffMapArchive.cell_diff_array)
}
inline ::TSP::Reference* CellDiffMapArchive::release_cell_diff_array() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cell_diff_array_;
  cell_diff_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CellDiffMapArchive::unsafe_arena_release_cell_diff_array() {
  // @@protoc_insertion_point(field_release:TST.CellDiffMapArchive.cell_diff_array)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cell_diff_array_;
  cell_diff_array_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CellDiffMapArchive::_internal_mutable_cell_diff_array() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_diff_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    cell_diff_array_ = p;
  }
  return cell_diff_array_;
}
inline ::TSP::Reference* CellDiffMapArchive::mutable_cell_diff_array() {
  // @@protoc_insertion_point(field_mutable:TST.CellDiffMapArchive.cell_diff_array)
  return _internal_mutable_cell_diff_array();
}
inline void CellDiffMapArchive::set_allocated_cell_diff_array(::TSP::Reference* cell_diff_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_array_);
  }
  if (cell_diff_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_diff_array)->GetArena();
    if (message_arena != submessage_arena) {
      cell_diff_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_diff_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_diff_array_ = cell_diff_array;
  // @@protoc_insertion_point(field_set_allocated:TST.CellDiffMapArchive.cell_diff_array)
}

// -------------------------------------------------------------------

// DoubleStyleMapArchive_DoubleStyleMapEntryArchive

// required .TST.CellID cell_id = 1;
inline bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_id_ != nullptr);
  return value;
}
inline bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::clear_cell_id() {
  if (cell_id_ != nullptr) cell_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellID& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_cell_id() const {
  const ::TST::CellID* p = cell_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::cell_id() const {
  // @@protoc_insertion_point(field_get:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.cell_id)
  return _internal_cell_id();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::unsafe_arena_set_allocated_cell_id(
    ::TST::CellID* cell_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_id_);
  }
  cell_id_ = cell_id;
  if (cell_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.cell_id)
}
inline ::TST::CellID* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::release_cell_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = cell_id_;
  cell_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::unsafe_arena_release_cell_id() {
  // @@protoc_insertion_point(field_release:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.cell_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellID* temp = cell_id_;
  cell_id_ = nullptr;
  return temp;
}
inline ::TST::CellID* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_mutable_cell_id() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    cell_id_ = p;
  }
  return cell_id_;
}
inline ::TST::CellID* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::mutable_cell_id() {
  // @@protoc_insertion_point(field_mutable:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.cell_id)
  return _internal_mutable_cell_id();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::set_allocated_cell_id(::TST::CellID* cell_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_id_;
  }
  if (cell_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_id);
    if (message_arena != submessage_arena) {
      cell_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_id_ = cell_id;
  // @@protoc_insertion_point(field_set_allocated:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.cell_id)
}

// required .TSP.Reference old_style = 2;
inline bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_has_old_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_style_ != nullptr);
  return value;
}
inline bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSP::Reference& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_old_style() const {
  const ::TSP::Reference* p = old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.old_style)
  return _internal_old_style();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::unsafe_arena_set_allocated_old_style(
    ::TSP::Reference* old_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_);
  }
  old_style_ = old_style;
  if (old_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.old_style)
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::release_old_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_style_;
  old_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.old_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_style_;
  old_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_mutable_old_style() {
  _has_bits_[0] |= 0x00000002u;
  if (old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_style_ = p;
  }
  return old_style_;
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::mutable_old_style() {
  // @@protoc_insertion_point(field_mutable:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.old_style)
  return _internal_mutable_old_style();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style)->GetArena();
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.old_style)
}

// required .TSP.Reference new_style = 3;
inline bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_has_new_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_style_ != nullptr);
  return value;
}
inline bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_new_style() const {
  const ::TSP::Reference* p = new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DoubleStyleMapArchive_DoubleStyleMapEntryArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.new_style)
  return _internal_new_style();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  new_style_ = new_style;
  if (new_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.new_style)
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::release_new_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.new_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_internal_mutable_new_style() {
  _has_bits_[0] |= 0x00000004u;
  if (new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    new_style_ = p;
  }
  return new_style_;
}
inline ::TSP::Reference* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::mutable_new_style() {
  // @@protoc_insertion_point(field_mutable:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.new_style)
  return _internal_mutable_new_style();
}
inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style)->GetArena();
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.new_style)
}

// -------------------------------------------------------------------

// DoubleStyleMapArchive

// required uint32 capacity = 1;
inline bool DoubleStyleMapArchive::_internal_has_capacity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoubleStyleMapArchive::has_capacity() const {
  return _internal_has_capacity();
}
inline void DoubleStyleMapArchive::clear_capacity() {
  capacity_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoubleStyleMapArchive::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoubleStyleMapArchive::capacity() const {
  // @@protoc_insertion_point(field_get:TST.DoubleStyleMapArchive.capacity)
  return _internal_capacity();
}
inline void DoubleStyleMapArchive::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  capacity_ = value;
}
inline void DoubleStyleMapArchive::set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:TST.DoubleStyleMapArchive.capacity)
}

// required uint32 count = 2;
inline bool DoubleStyleMapArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DoubleStyleMapArchive::has_count() const {
  return _internal_has_count();
}
inline void DoubleStyleMapArchive::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoubleStyleMapArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DoubleStyleMapArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.DoubleStyleMapArchive.count)
  return _internal_count();
}
inline void DoubleStyleMapArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void DoubleStyleMapArchive::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.DoubleStyleMapArchive.count)
}

// repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
inline int DoubleStyleMapArchive::_internal_cell_map_entry_size() const {
  return cell_map_entry_.size();
}
inline int DoubleStyleMapArchive::cell_map_entry_size() const {
  return _internal_cell_map_entry_size();
}
inline void DoubleStyleMapArchive::clear_cell_map_entry() {
  cell_map_entry_.Clear();
}
inline ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* DoubleStyleMapArchive::mutable_cell_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TST.DoubleStyleMapArchive.cell_map_entry)
  return cell_map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >*
DoubleStyleMapArchive::mutable_cell_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:TST.DoubleStyleMapArchive.cell_map_entry)
  return &cell_map_entry_;
}
inline const ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive& DoubleStyleMapArchive::_internal_cell_map_entry(int index) const {
  return cell_map_entry_.Get(index);
}
inline const ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive& DoubleStyleMapArchive::cell_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:TST.DoubleStyleMapArchive.cell_map_entry)
  return _internal_cell_map_entry(index);
}
inline ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* DoubleStyleMapArchive::_internal_add_cell_map_entry() {
  return cell_map_entry_.Add();
}
inline ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive* DoubleStyleMapArchive::add_cell_map_entry() {
  // @@protoc_insertion_point(field_add:TST.DoubleStyleMapArchive.cell_map_entry)
  return _internal_add_cell_map_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >&
DoubleStyleMapArchive::cell_map_entry() const {
  // @@protoc_insertion_point(field_list:TST.DoubleStyleMapArchive.cell_map_entry)
  return cell_map_entry_;
}

// -------------------------------------------------------------------

// StyleTableMapArchive_StyleTableMapEntryArchive

// required uint32 key = 1;
inline bool StyleTableMapArchive_StyleTableMapEntryArchive::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StyleTableMapArchive_StyleTableMapEntryArchive::has_key() const {
  return _internal_has_key();
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::clear_key() {
  key_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleTableMapArchive_StyleTableMapEntryArchive::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleTableMapArchive_StyleTableMapEntryArchive::key() const {
  // @@protoc_insertion_point(field_get:TST.StyleTableMapArchive.StyleTableMapEntryArchive.key)
  return _internal_key();
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  key_ = value;
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:TST.StyleTableMapArchive.StyleTableMapEntryArchive.key)
}

// required .TSP.Reference old_style = 2;
inline bool StyleTableMapArchive_StyleTableMapEntryArchive::_internal_has_old_style() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || old_style_ != nullptr);
  return value;
}
inline bool StyleTableMapArchive_StyleTableMapEntryArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSP::Reference& StyleTableMapArchive_StyleTableMapEntryArchive::_internal_old_style() const {
  const ::TSP::Reference* p = old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleTableMapArchive_StyleTableMapEntryArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TST.StyleTableMapArchive.StyleTableMapEntryArchive.old_style)
  return _internal_old_style();
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::unsafe_arena_set_allocated_old_style(
    ::TSP::Reference* old_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_);
  }
  old_style_ = old_style;
  if (old_style) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StyleTableMapArchive.StyleTableMapEntryArchive.old_style)
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::release_old_style() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = old_style_;
  old_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TST.StyleTableMapArchive.StyleTableMapEntryArchive.old_style)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = old_style_;
  old_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::_internal_mutable_old_style() {
  _has_bits_[0] |= 0x00000001u;
  if (old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_style_ = p;
  }
  return old_style_;
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::mutable_old_style() {
  // @@protoc_insertion_point(field_mutable:TST.StyleTableMapArchive.StyleTableMapEntryArchive.old_style)
  return _internal_mutable_old_style();
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style)->GetArena();
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TST.StyleTableMapArchive.StyleTableMapEntryArchive.old_style)
}

// required .TSP.Reference new_style = 3;
inline bool StyleTableMapArchive_StyleTableMapEntryArchive::_internal_has_new_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_style_ != nullptr);
  return value;
}
inline bool StyleTableMapArchive_StyleTableMapEntryArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& StyleTableMapArchive_StyleTableMapEntryArchive::_internal_new_style() const {
  const ::TSP::Reference* p = new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyleTableMapArchive_StyleTableMapEntryArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TST.StyleTableMapArchive.StyleTableMapEntryArchive.new_style)
  return _internal_new_style();
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  new_style_ = new_style;
  if (new_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StyleTableMapArchive.StyleTableMapEntryArchive.new_style)
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::release_new_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TST.StyleTableMapArchive.StyleTableMapEntryArchive.new_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::_internal_mutable_new_style() {
  _has_bits_[0] |= 0x00000002u;
  if (new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    new_style_ = p;
  }
  return new_style_;
}
inline ::TSP::Reference* StyleTableMapArchive_StyleTableMapEntryArchive::mutable_new_style() {
  // @@protoc_insertion_point(field_mutable:TST.StyleTableMapArchive.StyleTableMapEntryArchive.new_style)
  return _internal_mutable_new_style();
}
inline void StyleTableMapArchive_StyleTableMapEntryArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style)->GetArena();
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TST.StyleTableMapArchive.StyleTableMapEntryArchive.new_style)
}

// -------------------------------------------------------------------

// StyleTableMapArchive

// required uint32 capacity = 1;
inline bool StyleTableMapArchive::_internal_has_capacity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StyleTableMapArchive::has_capacity() const {
  return _internal_has_capacity();
}
inline void StyleTableMapArchive::clear_capacity() {
  capacity_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleTableMapArchive::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleTableMapArchive::capacity() const {
  // @@protoc_insertion_point(field_get:TST.StyleTableMapArchive.capacity)
  return _internal_capacity();
}
inline void StyleTableMapArchive::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  capacity_ = value;
}
inline void StyleTableMapArchive::set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:TST.StyleTableMapArchive.capacity)
}

// required uint32 count = 2;
inline bool StyleTableMapArchive::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StyleTableMapArchive::has_count() const {
  return _internal_has_count();
}
inline void StyleTableMapArchive::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleTableMapArchive::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleTableMapArchive::count() const {
  // @@protoc_insertion_point(field_get:TST.StyleTableMapArchive.count)
  return _internal_count();
}
inline void StyleTableMapArchive::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void StyleTableMapArchive::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:TST.StyleTableMapArchive.count)
}

// repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
inline int StyleTableMapArchive::_internal_map_entry_size() const {
  return map_entry_.size();
}
inline int StyleTableMapArchive::map_entry_size() const {
  return _internal_map_entry_size();
}
inline void StyleTableMapArchive::clear_map_entry() {
  map_entry_.Clear();
}
inline ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* StyleTableMapArchive::mutable_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:TST.StyleTableMapArchive.map_entry)
  return map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >*
StyleTableMapArchive::mutable_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:TST.StyleTableMapArchive.map_entry)
  return &map_entry_;
}
inline const ::TST::StyleTableMapArchive_StyleTableMapEntryArchive& StyleTableMapArchive::_internal_map_entry(int index) const {
  return map_entry_.Get(index);
}
inline const ::TST::StyleTableMapArchive_StyleTableMapEntryArchive& StyleTableMapArchive::map_entry(int index) const {
  // @@protoc_insertion_point(field_get:TST.StyleTableMapArchive.map_entry)
  return _internal_map_entry(index);
}
inline ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* StyleTableMapArchive::_internal_add_map_entry() {
  return map_entry_.Add();
}
inline ::TST::StyleTableMapArchive_StyleTableMapEntryArchive* StyleTableMapArchive::add_map_entry() {
  // @@protoc_insertion_point(field_add:TST.StyleTableMapArchive.map_entry)
  return _internal_add_map_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >&
StyleTableMapArchive::map_entry() const {
  // @@protoc_insertion_point(field_list:TST.StyleTableMapArchive.map_entry)
  return map_entry_;
}

// -------------------------------------------------------------------

// SelectionArchive

// optional .TSP.Reference tableModel = 1 [deprecated = true];
inline bool SelectionArchive::_internal_has_tablemodel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tablemodel_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_tablemodel() const {
  return _internal_has_tablemodel();
}
inline const ::TSP::Reference& SelectionArchive::_internal_tablemodel() const {
  const ::TSP::Reference* p = tablemodel_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SelectionArchive::tablemodel() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.tableModel)
  return _internal_tablemodel();
}
inline void SelectionArchive::unsafe_arena_set_allocated_tablemodel(
    ::TSP::Reference* tablemodel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel_);
  }
  tablemodel_ = tablemodel;
  if (tablemodel) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.tableModel)
}
inline ::TSP::Reference* SelectionArchive::release_tablemodel() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = tablemodel_;
  tablemodel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SelectionArchive::unsafe_arena_release_tablemodel() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.tableModel)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = tablemodel_;
  tablemodel_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SelectionArchive::_internal_mutable_tablemodel() {
  _has_bits_[0] |= 0x00000001u;
  if (tablemodel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    tablemodel_ = p;
  }
  return tablemodel_;
}
inline ::TSP::Reference* SelectionArchive::mutable_tablemodel() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.tableModel)
  return _internal_mutable_tablemodel();
}
inline void SelectionArchive::set_allocated_tablemodel(::TSP::Reference* tablemodel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel_);
  }
  if (tablemodel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tablemodel)->GetArena();
    if (message_arena != submessage_arena) {
      tablemodel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tablemodel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tablemodel_ = tablemodel;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.tableModel)
}

// required .TST.SelectionTypeArchive selection_type = 4;
inline bool SelectionArchive::_internal_has_selection_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SelectionArchive::has_selection_type() const {
  return _internal_has_selection_type();
}
inline void SelectionArchive::clear_selection_type() {
  selection_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::TST::SelectionTypeArchive SelectionArchive::_internal_selection_type() const {
  return static_cast< ::TST::SelectionTypeArchive >(selection_type_);
}
inline ::TST::SelectionTypeArchive SelectionArchive::selection_type() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.selection_type)
  return _internal_selection_type();
}
inline void SelectionArchive::_internal_set_selection_type(::TST::SelectionTypeArchive value) {
  assert(::TST::SelectionTypeArchive_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  selection_type_ = value;
}
inline void SelectionArchive::set_selection_type(::TST::SelectionTypeArchive value) {
  _internal_set_selection_type(value);
  // @@protoc_insertion_point(field_set:TST.SelectionArchive.selection_type)
}

// optional .TST.CellID anchor_cell = 5;
inline bool SelectionArchive::_internal_has_anchor_cell() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || anchor_cell_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_anchor_cell() const {
  return _internal_has_anchor_cell();
}
inline void SelectionArchive::clear_anchor_cell() {
  if (anchor_cell_ != nullptr) anchor_cell_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CellID& SelectionArchive::_internal_anchor_cell() const {
  const ::TST::CellID* p = anchor_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& SelectionArchive::anchor_cell() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.anchor_cell)
  return _internal_anchor_cell();
}
inline void SelectionArchive::unsafe_arena_set_allocated_anchor_cell(
    ::TST::CellID* anchor_cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_);
  }
  anchor_cell_ = anchor_cell;
  if (anchor_cell) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.anchor_cell)
}
inline ::TST::CellID* SelectionArchive::release_anchor_cell() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellID* temp = anchor_cell_;
  anchor_cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* SelectionArchive::unsafe_arena_release_anchor_cell() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.anchor_cell)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellID* temp = anchor_cell_;
  anchor_cell_ = nullptr;
  return temp;
}
inline ::TST::CellID* SelectionArchive::_internal_mutable_anchor_cell() {
  _has_bits_[0] |= 0x00000002u;
  if (anchor_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    anchor_cell_ = p;
  }
  return anchor_cell_;
}
inline ::TST::CellID* SelectionArchive::mutable_anchor_cell() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.anchor_cell)
  return _internal_mutable_anchor_cell();
}
inline void SelectionArchive::set_allocated_anchor_cell(::TST::CellID* anchor_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anchor_cell_;
  }
  if (anchor_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anchor_cell);
    if (message_arena != submessage_arena) {
      anchor_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  anchor_cell_ = anchor_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.anchor_cell)
}

// repeated .TST.CellRange cell_ranges = 6;
inline int SelectionArchive::_internal_cell_ranges_size() const {
  return cell_ranges_.size();
}
inline int SelectionArchive::cell_ranges_size() const {
  return _internal_cell_ranges_size();
}
inline void SelectionArchive::clear_cell_ranges() {
  cell_ranges_.Clear();
}
inline ::TST::CellRange* SelectionArchive::mutable_cell_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.cell_ranges)
  return cell_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
SelectionArchive::mutable_cell_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.SelectionArchive.cell_ranges)
  return &cell_ranges_;
}
inline const ::TST::CellRange& SelectionArchive::_internal_cell_ranges(int index) const {
  return cell_ranges_.Get(index);
}
inline const ::TST::CellRange& SelectionArchive::cell_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.cell_ranges)
  return _internal_cell_ranges(index);
}
inline ::TST::CellRange* SelectionArchive::_internal_add_cell_ranges() {
  return cell_ranges_.Add();
}
inline ::TST::CellRange* SelectionArchive::add_cell_ranges() {
  // @@protoc_insertion_point(field_add:TST.SelectionArchive.cell_ranges)
  return _internal_add_cell_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
SelectionArchive::cell_ranges() const {
  // @@protoc_insertion_point(field_list:TST.SelectionArchive.cell_ranges)
  return cell_ranges_;
}

// repeated .TST.CellRange base_ranges = 7;
inline int SelectionArchive::_internal_base_ranges_size() const {
  return base_ranges_.size();
}
inline int SelectionArchive::base_ranges_size() const {
  return _internal_base_ranges_size();
}
inline void SelectionArchive::clear_base_ranges() {
  base_ranges_.Clear();
}
inline ::TST::CellRange* SelectionArchive::mutable_base_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.base_ranges)
  return base_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >*
SelectionArchive::mutable_base_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.SelectionArchive.base_ranges)
  return &base_ranges_;
}
inline const ::TST::CellRange& SelectionArchive::_internal_base_ranges(int index) const {
  return base_ranges_.Get(index);
}
inline const ::TST::CellRange& SelectionArchive::base_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.base_ranges)
  return _internal_base_ranges(index);
}
inline ::TST::CellRange* SelectionArchive::_internal_add_base_ranges() {
  return base_ranges_.Add();
}
inline ::TST::CellRange* SelectionArchive::add_base_ranges() {
  // @@protoc_insertion_point(field_add:TST.SelectionArchive.base_ranges)
  return _internal_add_base_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CellRange >&
SelectionArchive::base_ranges() const {
  // @@protoc_insertion_point(field_list:TST.SelectionArchive.base_ranges)
  return base_ranges_;
}

// optional .TST.CellID cursor_cell = 8;
inline bool SelectionArchive::_internal_has_cursor_cell() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cursor_cell_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_cursor_cell() const {
  return _internal_has_cursor_cell();
}
inline void SelectionArchive::clear_cursor_cell() {
  if (cursor_cell_ != nullptr) cursor_cell_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::CellID& SelectionArchive::_internal_cursor_cell() const {
  const ::TST::CellID* p = cursor_cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& SelectionArchive::cursor_cell() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.cursor_cell)
  return _internal_cursor_cell();
}
inline void SelectionArchive::unsafe_arena_set_allocated_cursor_cell(
    ::TST::CellID* cursor_cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_);
  }
  cursor_cell_ = cursor_cell;
  if (cursor_cell) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.cursor_cell)
}
inline ::TST::CellID* SelectionArchive::release_cursor_cell() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CellID* temp = cursor_cell_;
  cursor_cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* SelectionArchive::unsafe_arena_release_cursor_cell() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.cursor_cell)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CellID* temp = cursor_cell_;
  cursor_cell_ = nullptr;
  return temp;
}
inline ::TST::CellID* SelectionArchive::_internal_mutable_cursor_cell() {
  _has_bits_[0] |= 0x00000004u;
  if (cursor_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    cursor_cell_ = p;
  }
  return cursor_cell_;
}
inline ::TST::CellID* SelectionArchive::mutable_cursor_cell() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.cursor_cell)
  return _internal_mutable_cursor_cell();
}
inline void SelectionArchive::set_allocated_cursor_cell(::TST::CellID* cursor_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cursor_cell_;
  }
  if (cursor_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cursor_cell);
    if (message_arena != submessage_arena) {
      cursor_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor_cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cursor_cell_ = cursor_cell;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.cursor_cell)
}

// optional .TSP.Reference table_info = 9;
inline bool SelectionArchive::_internal_has_table_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || table_info_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& SelectionArchive::_internal_table_info() const {
  const ::TSP::Reference* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SelectionArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.table_info)
  return _internal_table_info();
}
inline void SelectionArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.table_info)
}
inline ::TSP::Reference* SelectionArchive::release_table_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SelectionArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.table_info)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SelectionArchive::_internal_mutable_table_info() {
  _has_bits_[0] |= 0x00000008u;
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::TSP::Reference* SelectionArchive::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.table_info)
  return _internal_mutable_table_info();
}
inline void SelectionArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info)->GetArena();
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.table_info)
}

// optional .TST.CellUIDRegionArchive cell_uid_region = 10;
inline bool SelectionArchive::_internal_has_cell_uid_region() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || cell_uid_region_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_cell_uid_region() const {
  return _internal_has_cell_uid_region();
}
inline void SelectionArchive::clear_cell_uid_region() {
  if (cell_uid_region_ != nullptr) cell_uid_region_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::CellUIDRegionArchive& SelectionArchive::_internal_cell_uid_region() const {
  const ::TST::CellUIDRegionArchive* p = cell_uid_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDRegionArchive&>(
      ::TST::_CellUIDRegionArchive_default_instance_);
}
inline const ::TST::CellUIDRegionArchive& SelectionArchive::cell_uid_region() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.cell_uid_region)
  return _internal_cell_uid_region();
}
inline void SelectionArchive::unsafe_arena_set_allocated_cell_uid_region(
    ::TST::CellUIDRegionArchive* cell_uid_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_region_);
  }
  cell_uid_region_ = cell_uid_region;
  if (cell_uid_region) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.cell_uid_region)
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::release_cell_uid_region() {
  _has_bits_[0] &= ~0x00000010u;
  ::TST::CellUIDRegionArchive* temp = cell_uid_region_;
  cell_uid_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::unsafe_arena_release_cell_uid_region() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.cell_uid_region)
  _has_bits_[0] &= ~0x00000010u;
  ::TST::CellUIDRegionArchive* temp = cell_uid_region_;
  cell_uid_region_ = nullptr;
  return temp;
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::_internal_mutable_cell_uid_region() {
  _has_bits_[0] |= 0x00000010u;
  if (cell_uid_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDRegionArchive>(GetArena());
    cell_uid_region_ = p;
  }
  return cell_uid_region_;
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::mutable_cell_uid_region() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.cell_uid_region)
  return _internal_mutable_cell_uid_region();
}
inline void SelectionArchive::set_allocated_cell_uid_region(::TST::CellUIDRegionArchive* cell_uid_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_uid_region_;
  }
  if (cell_uid_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_uid_region);
    if (message_arena != submessage_arena) {
      cell_uid_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cell_uid_region_ = cell_uid_region;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.cell_uid_region)
}

// optional .TST.CellUIDRegionArchive base_uid_region = 11;
inline bool SelectionArchive::_internal_has_base_uid_region() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || base_uid_region_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_base_uid_region() const {
  return _internal_has_base_uid_region();
}
inline void SelectionArchive::clear_base_uid_region() {
  if (base_uid_region_ != nullptr) base_uid_region_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TST::CellUIDRegionArchive& SelectionArchive::_internal_base_uid_region() const {
  const ::TST::CellUIDRegionArchive* p = base_uid_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDRegionArchive&>(
      ::TST::_CellUIDRegionArchive_default_instance_);
}
inline const ::TST::CellUIDRegionArchive& SelectionArchive::base_uid_region() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.base_uid_region)
  return _internal_base_uid_region();
}
inline void SelectionArchive::unsafe_arena_set_allocated_base_uid_region(
    ::TST::CellUIDRegionArchive* base_uid_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_uid_region_);
  }
  base_uid_region_ = base_uid_region;
  if (base_uid_region) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.base_uid_region)
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::release_base_uid_region() {
  _has_bits_[0] &= ~0x00000020u;
  ::TST::CellUIDRegionArchive* temp = base_uid_region_;
  base_uid_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::unsafe_arena_release_base_uid_region() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.base_uid_region)
  _has_bits_[0] &= ~0x00000020u;
  ::TST::CellUIDRegionArchive* temp = base_uid_region_;
  base_uid_region_ = nullptr;
  return temp;
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::_internal_mutable_base_uid_region() {
  _has_bits_[0] |= 0x00000020u;
  if (base_uid_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDRegionArchive>(GetArena());
    base_uid_region_ = p;
  }
  return base_uid_region_;
}
inline ::TST::CellUIDRegionArchive* SelectionArchive::mutable_base_uid_region() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.base_uid_region)
  return _internal_mutable_base_uid_region();
}
inline void SelectionArchive::set_allocated_base_uid_region(::TST::CellUIDRegionArchive* base_uid_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_uid_region_;
  }
  if (base_uid_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_uid_region);
    if (message_arena != submessage_arena) {
      base_uid_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_uid_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  base_uid_region_ = base_uid_region;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.base_uid_region)
}

// optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
inline bool SelectionArchive::_internal_has_anchor_cell_uid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || anchor_cell_uid_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_anchor_cell_uid() const {
  return _internal_has_anchor_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& SelectionArchive::_internal_anchor_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = anchor_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& SelectionArchive::anchor_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.anchor_cell_uid)
  return _internal_anchor_cell_uid();
}
inline void SelectionArchive::unsafe_arena_set_allocated_anchor_cell_uid(
    ::TSP::UUIDCoordArchive* anchor_cell_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid_);
  }
  anchor_cell_uid_ = anchor_cell_uid;
  if (anchor_cell_uid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.anchor_cell_uid)
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::release_anchor_cell_uid() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUIDCoordArchive* temp = anchor_cell_uid_;
  anchor_cell_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::unsafe_arena_release_anchor_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.anchor_cell_uid)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUIDCoordArchive* temp = anchor_cell_uid_;
  anchor_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::_internal_mutable_anchor_cell_uid() {
  _has_bits_[0] |= 0x00000040u;
  if (anchor_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArena());
    anchor_cell_uid_ = p;
  }
  return anchor_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::mutable_anchor_cell_uid() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.anchor_cell_uid)
  return _internal_mutable_anchor_cell_uid();
}
inline void SelectionArchive::set_allocated_anchor_cell_uid(::TSP::UUIDCoordArchive* anchor_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid_);
  }
  if (anchor_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid)->GetArena();
    if (message_arena != submessage_arena) {
      anchor_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_cell_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  anchor_cell_uid_ = anchor_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.anchor_cell_uid)
}

// optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
inline bool SelectionArchive::_internal_has_cursor_cell_uid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || cursor_cell_uid_ != nullptr);
  return value;
}
inline bool SelectionArchive::has_cursor_cell_uid() const {
  return _internal_has_cursor_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& SelectionArchive::_internal_cursor_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = cursor_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& SelectionArchive::cursor_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.SelectionArchive.cursor_cell_uid)
  return _internal_cursor_cell_uid();
}
inline void SelectionArchive::unsafe_arena_set_allocated_cursor_cell_uid(
    ::TSP::UUIDCoordArchive* cursor_cell_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid_);
  }
  cursor_cell_uid_ = cursor_cell_uid;
  if (cursor_cell_uid) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SelectionArchive.cursor_cell_uid)
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::release_cursor_cell_uid() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUIDCoordArchive* temp = cursor_cell_uid_;
  cursor_cell_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::unsafe_arena_release_cursor_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.SelectionArchive.cursor_cell_uid)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUIDCoordArchive* temp = cursor_cell_uid_;
  cursor_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::_internal_mutable_cursor_cell_uid() {
  _has_bits_[0] |= 0x00000080u;
  if (cursor_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArena());
    cursor_cell_uid_ = p;
  }
  return cursor_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* SelectionArchive::mutable_cursor_cell_uid() {
  // @@protoc_insertion_point(field_mutable:TST.SelectionArchive.cursor_cell_uid)
  return _internal_mutable_cursor_cell_uid();
}
inline void SelectionArchive::set_allocated_cursor_cell_uid(::TSP::UUIDCoordArchive* cursor_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid_);
  }
  if (cursor_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid)->GetArena();
    if (message_arena != submessage_arena) {
      cursor_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor_cell_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  cursor_cell_uid_ = cursor_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.SelectionArchive.cursor_cell_uid)
}

// -------------------------------------------------------------------

// DeathhawkRdar39989167CellSelectionArchive

// optional .TSP.Reference table_info = 1;
inline bool DeathhawkRdar39989167CellSelectionArchive::_internal_has_table_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_info_ != nullptr);
  return value;
}
inline bool DeathhawkRdar39989167CellSelectionArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& DeathhawkRdar39989167CellSelectionArchive::_internal_table_info() const {
  const ::TSP::Reference* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DeathhawkRdar39989167CellSelectionArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.DeathhawkRdar39989167CellSelectionArchive.table_info)
  return _internal_table_info();
}
inline void DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.table_info)
}
inline ::TSP::Reference* DeathhawkRdar39989167CellSelectionArchive::release_table_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.DeathhawkRdar39989167CellSelectionArchive.table_info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DeathhawkRdar39989167CellSelectionArchive::_internal_mutable_table_info() {
  _has_bits_[0] |= 0x00000001u;
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::TSP::Reference* DeathhawkRdar39989167CellSelectionArchive::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:TST.DeathhawkRdar39989167CellSelectionArchive.table_info)
  return _internal_mutable_table_info();
}
inline void DeathhawkRdar39989167CellSelectionArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info)->GetArena();
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.table_info)
}

// optional .TST.SelectionTypeArchive selection_type = 2;
inline bool DeathhawkRdar39989167CellSelectionArchive::_internal_has_selection_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeathhawkRdar39989167CellSelectionArchive::has_selection_type() const {
  return _internal_has_selection_type();
}
inline void DeathhawkRdar39989167CellSelectionArchive::clear_selection_type() {
  selection_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TST::SelectionTypeArchive DeathhawkRdar39989167CellSelectionArchive::_internal_selection_type() const {
  return static_cast< ::TST::SelectionTypeArchive >(selection_type_);
}
inline ::TST::SelectionTypeArchive DeathhawkRdar39989167CellSelectionArchive::selection_type() const {
  // @@protoc_insertion_point(field_get:TST.DeathhawkRdar39989167CellSelectionArchive.selection_type)
  return _internal_selection_type();
}
inline void DeathhawkRdar39989167CellSelectionArchive::_internal_set_selection_type(::TST::SelectionTypeArchive value) {
  assert(::TST::SelectionTypeArchive_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  selection_type_ = value;
}
inline void DeathhawkRdar39989167CellSelectionArchive::set_selection_type(::TST::SelectionTypeArchive value) {
  _internal_set_selection_type(value);
  // @@protoc_insertion_point(field_set:TST.DeathhawkRdar39989167CellSelectionArchive.selection_type)
}

// optional .TST.CellUIDRegionArchive cell_uid_region = 3;
inline bool DeathhawkRdar39989167CellSelectionArchive::_internal_has_cell_uid_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_uid_region_ != nullptr);
  return value;
}
inline bool DeathhawkRdar39989167CellSelectionArchive::has_cell_uid_region() const {
  return _internal_has_cell_uid_region();
}
inline void DeathhawkRdar39989167CellSelectionArchive::clear_cell_uid_region() {
  if (cell_uid_region_ != nullptr) cell_uid_region_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CellUIDRegionArchive& DeathhawkRdar39989167CellSelectionArchive::_internal_cell_uid_region() const {
  const ::TST::CellUIDRegionArchive* p = cell_uid_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDRegionArchive&>(
      ::TST::_CellUIDRegionArchive_default_instance_);
}
inline const ::TST::CellUIDRegionArchive& DeathhawkRdar39989167CellSelectionArchive::cell_uid_region() const {
  // @@protoc_insertion_point(field_get:TST.DeathhawkRdar39989167CellSelectionArchive.cell_uid_region)
  return _internal_cell_uid_region();
}
inline void DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_set_allocated_cell_uid_region(
    ::TST::CellUIDRegionArchive* cell_uid_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_uid_region_);
  }
  cell_uid_region_ = cell_uid_region;
  if (cell_uid_region) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.cell_uid_region)
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::release_cell_uid_region() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDRegionArchive* temp = cell_uid_region_;
  cell_uid_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_release_cell_uid_region() {
  // @@protoc_insertion_point(field_release:TST.DeathhawkRdar39989167CellSelectionArchive.cell_uid_region)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellUIDRegionArchive* temp = cell_uid_region_;
  cell_uid_region_ = nullptr;
  return temp;
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::_internal_mutable_cell_uid_region() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_uid_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDRegionArchive>(GetArena());
    cell_uid_region_ = p;
  }
  return cell_uid_region_;
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::mutable_cell_uid_region() {
  // @@protoc_insertion_point(field_mutable:TST.DeathhawkRdar39989167CellSelectionArchive.cell_uid_region)
  return _internal_mutable_cell_uid_region();
}
inline void DeathhawkRdar39989167CellSelectionArchive::set_allocated_cell_uid_region(::TST::CellUIDRegionArchive* cell_uid_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_uid_region_;
  }
  if (cell_uid_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell_uid_region);
    if (message_arena != submessage_arena) {
      cell_uid_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_uid_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_uid_region_ = cell_uid_region;
  // @@protoc_insertion_point(field_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.cell_uid_region)
}

// optional .TST.CellUIDRegionArchive base_uid_region = 4;
inline bool DeathhawkRdar39989167CellSelectionArchive::_internal_has_base_uid_region() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || base_uid_region_ != nullptr);
  return value;
}
inline bool DeathhawkRdar39989167CellSelectionArchive::has_base_uid_region() const {
  return _internal_has_base_uid_region();
}
inline void DeathhawkRdar39989167CellSelectionArchive::clear_base_uid_region() {
  if (base_uid_region_ != nullptr) base_uid_region_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::CellUIDRegionArchive& DeathhawkRdar39989167CellSelectionArchive::_internal_base_uid_region() const {
  const ::TST::CellUIDRegionArchive* p = base_uid_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellUIDRegionArchive&>(
      ::TST::_CellUIDRegionArchive_default_instance_);
}
inline const ::TST::CellUIDRegionArchive& DeathhawkRdar39989167CellSelectionArchive::base_uid_region() const {
  // @@protoc_insertion_point(field_get:TST.DeathhawkRdar39989167CellSelectionArchive.base_uid_region)
  return _internal_base_uid_region();
}
inline void DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_set_allocated_base_uid_region(
    ::TST::CellUIDRegionArchive* base_uid_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_uid_region_);
  }
  base_uid_region_ = base_uid_region;
  if (base_uid_region) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.base_uid_region)
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::release_base_uid_region() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CellUIDRegionArchive* temp = base_uid_region_;
  base_uid_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_release_base_uid_region() {
  // @@protoc_insertion_point(field_release:TST.DeathhawkRdar39989167CellSelectionArchive.base_uid_region)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CellUIDRegionArchive* temp = base_uid_region_;
  base_uid_region_ = nullptr;
  return temp;
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::_internal_mutable_base_uid_region() {
  _has_bits_[0] |= 0x00000004u;
  if (base_uid_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellUIDRegionArchive>(GetArena());
    base_uid_region_ = p;
  }
  return base_uid_region_;
}
inline ::TST::CellUIDRegionArchive* DeathhawkRdar39989167CellSelectionArchive::mutable_base_uid_region() {
  // @@protoc_insertion_point(field_mutable:TST.DeathhawkRdar39989167CellSelectionArchive.base_uid_region)
  return _internal_mutable_base_uid_region();
}
inline void DeathhawkRdar39989167CellSelectionArchive::set_allocated_base_uid_region(::TST::CellUIDRegionArchive* base_uid_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_uid_region_;
  }
  if (base_uid_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_uid_region);
    if (message_arena != submessage_arena) {
      base_uid_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_uid_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  base_uid_region_ = base_uid_region;
  // @@protoc_insertion_point(field_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.base_uid_region)
}

// optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
inline bool DeathhawkRdar39989167CellSelectionArchive::_internal_has_anchor_cell_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || anchor_cell_uid_ != nullptr);
  return value;
}
inline bool DeathhawkRdar39989167CellSelectionArchive::has_anchor_cell_uid() const {
  return _internal_has_anchor_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& DeathhawkRdar39989167CellSelectionArchive::_internal_anchor_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = anchor_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& DeathhawkRdar39989167CellSelectionArchive::anchor_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.DeathhawkRdar39989167CellSelectionArchive.anchor_cell_uid)
  return _internal_anchor_cell_uid();
}
inline void DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_set_allocated_anchor_cell_uid(
    ::TSP::UUIDCoordArchive* anchor_cell_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid_);
  }
  anchor_cell_uid_ = anchor_cell_uid;
  if (anchor_cell_uid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.anchor_cell_uid)
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::release_anchor_cell_uid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUIDCoordArchive* temp = anchor_cell_uid_;
  anchor_cell_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_release_anchor_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.DeathhawkRdar39989167CellSelectionArchive.anchor_cell_uid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUIDCoordArchive* temp = anchor_cell_uid_;
  anchor_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::_internal_mutable_anchor_cell_uid() {
  _has_bits_[0] |= 0x00000008u;
  if (anchor_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArena());
    anchor_cell_uid_ = p;
  }
  return anchor_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::mutable_anchor_cell_uid() {
  // @@protoc_insertion_point(field_mutable:TST.DeathhawkRdar39989167CellSelectionArchive.anchor_cell_uid)
  return _internal_mutable_anchor_cell_uid();
}
inline void DeathhawkRdar39989167CellSelectionArchive::set_allocated_anchor_cell_uid(::TSP::UUIDCoordArchive* anchor_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid_);
  }
  if (anchor_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_cell_uid)->GetArena();
    if (message_arena != submessage_arena) {
      anchor_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_cell_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  anchor_cell_uid_ = anchor_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.anchor_cell_uid)
}

// optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
inline bool DeathhawkRdar39989167CellSelectionArchive::_internal_has_cursor_cell_uid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || cursor_cell_uid_ != nullptr);
  return value;
}
inline bool DeathhawkRdar39989167CellSelectionArchive::has_cursor_cell_uid() const {
  return _internal_has_cursor_cell_uid();
}
inline const ::TSP::UUIDCoordArchive& DeathhawkRdar39989167CellSelectionArchive::_internal_cursor_cell_uid() const {
  const ::TSP::UUIDCoordArchive* p = cursor_cell_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& DeathhawkRdar39989167CellSelectionArchive::cursor_cell_uid() const {
  // @@protoc_insertion_point(field_get:TST.DeathhawkRdar39989167CellSelectionArchive.cursor_cell_uid)
  return _internal_cursor_cell_uid();
}
inline void DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_set_allocated_cursor_cell_uid(
    ::TSP::UUIDCoordArchive* cursor_cell_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid_);
  }
  cursor_cell_uid_ = cursor_cell_uid;
  if (cursor_cell_uid) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.cursor_cell_uid)
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::release_cursor_cell_uid() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDCoordArchive* temp = cursor_cell_uid_;
  cursor_cell_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::unsafe_arena_release_cursor_cell_uid() {
  // @@protoc_insertion_point(field_release:TST.DeathhawkRdar39989167CellSelectionArchive.cursor_cell_uid)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDCoordArchive* temp = cursor_cell_uid_;
  cursor_cell_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::_internal_mutable_cursor_cell_uid() {
  _has_bits_[0] |= 0x00000010u;
  if (cursor_cell_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArena());
    cursor_cell_uid_ = p;
  }
  return cursor_cell_uid_;
}
inline ::TSP::UUIDCoordArchive* DeathhawkRdar39989167CellSelectionArchive::mutable_cursor_cell_uid() {
  // @@protoc_insertion_point(field_mutable:TST.DeathhawkRdar39989167CellSelectionArchive.cursor_cell_uid)
  return _internal_mutable_cursor_cell_uid();
}
inline void DeathhawkRdar39989167CellSelectionArchive::set_allocated_cursor_cell_uid(::TSP::UUIDCoordArchive* cursor_cell_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid_);
  }
  if (cursor_cell_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cursor_cell_uid)->GetArena();
    if (message_arena != submessage_arena) {
      cursor_cell_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cursor_cell_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cursor_cell_uid_ = cursor_cell_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.DeathhawkRdar39989167CellSelectionArchive.cursor_cell_uid)
}

// -------------------------------------------------------------------

// StrokeSelectionArchive

// optional int32 mask = 1;
inline bool StrokeSelectionArchive::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrokeSelectionArchive::has_mask() const {
  return _internal_has_mask();
}
inline void StrokeSelectionArchive::clear_mask() {
  mask_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokeSelectionArchive::_internal_mask() const {
  return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrokeSelectionArchive::mask() const {
  // @@protoc_insertion_point(field_get:TST.StrokeSelectionArchive.mask)
  return _internal_mask();
}
inline void StrokeSelectionArchive::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mask_ = value;
}
inline void StrokeSelectionArchive::set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:TST.StrokeSelectionArchive.mask)
}

// -------------------------------------------------------------------

// ControlCellSelectionArchive

// -------------------------------------------------------------------

// StockCellSelectionArchive

// -------------------------------------------------------------------

// TableNameSelectionArchive

// -------------------------------------------------------------------

// AutofillSelectionArchive

// optional .TST.CellRange source_cell_range = 1;
inline bool AutofillSelectionArchive::_internal_has_source_cell_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || source_cell_range_ != nullptr);
  return value;
}
inline bool AutofillSelectionArchive::has_source_cell_range() const {
  return _internal_has_source_cell_range();
}
inline void AutofillSelectionArchive::clear_source_cell_range() {
  if (source_cell_range_ != nullptr) source_cell_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellRange& AutofillSelectionArchive::_internal_source_cell_range() const {
  const ::TST::CellRange* p = source_cell_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& AutofillSelectionArchive::source_cell_range() const {
  // @@protoc_insertion_point(field_get:TST.AutofillSelectionArchive.source_cell_range)
  return _internal_source_cell_range();
}
inline void AutofillSelectionArchive::unsafe_arena_set_allocated_source_cell_range(
    ::TST::CellRange* source_cell_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_cell_range_);
  }
  source_cell_range_ = source_cell_range;
  if (source_cell_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.AutofillSelectionArchive.source_cell_range)
}
inline ::TST::CellRange* AutofillSelectionArchive::release_source_cell_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellRange* temp = source_cell_range_;
  source_cell_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRange* AutofillSelectionArchive::unsafe_arena_release_source_cell_range() {
  // @@protoc_insertion_point(field_release:TST.AutofillSelectionArchive.source_cell_range)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellRange* temp = source_cell_range_;
  source_cell_range_ = nullptr;
  return temp;
}
inline ::TST::CellRange* AutofillSelectionArchive::_internal_mutable_source_cell_range() {
  _has_bits_[0] |= 0x00000001u;
  if (source_cell_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArena());
    source_cell_range_ = p;
  }
  return source_cell_range_;
}
inline ::TST::CellRange* AutofillSelectionArchive::mutable_source_cell_range() {
  // @@protoc_insertion_point(field_mutable:TST.AutofillSelectionArchive.source_cell_range)
  return _internal_mutable_source_cell_range();
}
inline void AutofillSelectionArchive::set_allocated_source_cell_range(::TST::CellRange* source_cell_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_cell_range_;
  }
  if (source_cell_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_cell_range);
    if (message_arena != submessage_arena) {
      source_cell_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_cell_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_cell_range_ = source_cell_range;
  // @@protoc_insertion_point(field_set_allocated:TST.AutofillSelectionArchive.source_cell_range)
}

// optional .TST.CellRange target_cell_range = 2;
inline bool AutofillSelectionArchive::_internal_has_target_cell_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_cell_range_ != nullptr);
  return value;
}
inline bool AutofillSelectionArchive::has_target_cell_range() const {
  return _internal_has_target_cell_range();
}
inline void AutofillSelectionArchive::clear_target_cell_range() {
  if (target_cell_range_ != nullptr) target_cell_range_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CellRange& AutofillSelectionArchive::_internal_target_cell_range() const {
  const ::TST::CellRange* p = target_cell_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& AutofillSelectionArchive::target_cell_range() const {
  // @@protoc_insertion_point(field_get:TST.AutofillSelectionArchive.target_cell_range)
  return _internal_target_cell_range();
}
inline void AutofillSelectionArchive::unsafe_arena_set_allocated_target_cell_range(
    ::TST::CellRange* target_cell_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_cell_range_);
  }
  target_cell_range_ = target_cell_range;
  if (target_cell_range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.AutofillSelectionArchive.target_cell_range)
}
inline ::TST::CellRange* AutofillSelectionArchive::release_target_cell_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellRange* temp = target_cell_range_;
  target_cell_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRange* AutofillSelectionArchive::unsafe_arena_release_target_cell_range() {
  // @@protoc_insertion_point(field_release:TST.AutofillSelectionArchive.target_cell_range)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellRange* temp = target_cell_range_;
  target_cell_range_ = nullptr;
  return temp;
}
inline ::TST::CellRange* AutofillSelectionArchive::_internal_mutable_target_cell_range() {
  _has_bits_[0] |= 0x00000002u;
  if (target_cell_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArena());
    target_cell_range_ = p;
  }
  return target_cell_range_;
}
inline ::TST::CellRange* AutofillSelectionArchive::mutable_target_cell_range() {
  // @@protoc_insertion_point(field_mutable:TST.AutofillSelectionArchive.target_cell_range)
  return _internal_mutable_target_cell_range();
}
inline void AutofillSelectionArchive::set_allocated_target_cell_range(::TST::CellRange* target_cell_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_cell_range_;
  }
  if (target_cell_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_cell_range);
    if (message_arena != submessage_arena) {
      target_cell_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_cell_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_cell_range_ = target_cell_range;
  // @@protoc_insertion_point(field_set_allocated:TST.AutofillSelectionArchive.target_cell_range)
}

// -------------------------------------------------------------------

// FilterRuleArchive

// required .TST.FormulaPredicateArchive predicate = 1;
inline bool FilterRuleArchive::_internal_has_predicate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || predicate_ != nullptr);
  return value;
}
inline bool FilterRuleArchive::has_predicate() const {
  return _internal_has_predicate();
}
inline void FilterRuleArchive::clear_predicate() {
  if (predicate_ != nullptr) predicate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::FormulaPredicateArchive& FilterRuleArchive::_internal_predicate() const {
  const ::TST::FormulaPredicateArchive* p = predicate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaPredicateArchive&>(
      ::TST::_FormulaPredicateArchive_default_instance_);
}
inline const ::TST::FormulaPredicateArchive& FilterRuleArchive::predicate() const {
  // @@protoc_insertion_point(field_get:TST.FilterRuleArchive.predicate)
  return _internal_predicate();
}
inline void FilterRuleArchive::unsafe_arena_set_allocated_predicate(
    ::TST::FormulaPredicateArchive* predicate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_);
  }
  predicate_ = predicate;
  if (predicate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FilterRuleArchive.predicate)
}
inline ::TST::FormulaPredicateArchive* FilterRuleArchive::release_predicate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::FormulaPredicateArchive* temp = predicate_;
  predicate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::FormulaPredicateArchive* FilterRuleArchive::unsafe_arena_release_predicate() {
  // @@protoc_insertion_point(field_release:TST.FilterRuleArchive.predicate)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::FormulaPredicateArchive* temp = predicate_;
  predicate_ = nullptr;
  return temp;
}
inline ::TST::FormulaPredicateArchive* FilterRuleArchive::_internal_mutable_predicate() {
  _has_bits_[0] |= 0x00000001u;
  if (predicate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaPredicateArchive>(GetArena());
    predicate_ = p;
  }
  return predicate_;
}
inline ::TST::FormulaPredicateArchive* FilterRuleArchive::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable:TST.FilterRuleArchive.predicate)
  return _internal_mutable_predicate();
}
inline void FilterRuleArchive::set_allocated_predicate(::TST::FormulaPredicateArchive* predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete predicate_;
  }
  if (predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(predicate);
    if (message_arena != submessage_arena) {
      predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  predicate_ = predicate;
  // @@protoc_insertion_point(field_set_allocated:TST.FilterRuleArchive.predicate)
}

// optional bool disabled = 2;
inline bool FilterRuleArchive::_internal_has_disabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilterRuleArchive::has_disabled() const {
  return _internal_has_disabled();
}
inline void FilterRuleArchive::clear_disabled() {
  disabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FilterRuleArchive::_internal_disabled() const {
  return disabled_;
}
inline bool FilterRuleArchive::disabled() const {
  // @@protoc_insertion_point(field_get:TST.FilterRuleArchive.disabled)
  return _internal_disabled();
}
inline void FilterRuleArchive::_internal_set_disabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  disabled_ = value;
}
inline void FilterRuleArchive::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:TST.FilterRuleArchive.disabled)
}

// -------------------------------------------------------------------

// TableStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool TableStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TableStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& TableStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& TableStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleArchive.super)
  return _internal_super();
}
inline void TableStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleArchive.super)
}
inline ::TSS::StyleArchive* TableStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* TableStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TableStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* TableStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* TableStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleArchive.super)
  return _internal_mutable_super();
}
inline void TableStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool TableStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TableStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void TableStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleArchive.override_count)
  return _internal_override_count();
}
inline void TableStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void TableStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TST.TableStyleArchive.override_count)
}

// optional .TST.TableStylePropertiesArchive table_properties = 11;
inline bool TableStyleArchive::_internal_has_table_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_properties_ != nullptr);
  return value;
}
inline bool TableStyleArchive::has_table_properties() const {
  return _internal_has_table_properties();
}
inline const ::TST::TableStylePropertiesArchive& TableStyleArchive::_internal_table_properties() const {
  const ::TST::TableStylePropertiesArchive* p = table_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TableStylePropertiesArchive&>(
      ::TST::_TableStylePropertiesArchive_default_instance_);
}
inline const ::TST::TableStylePropertiesArchive& TableStyleArchive::table_properties() const {
  // @@protoc_insertion_point(field_get:TST.TableStyleArchive.table_properties)
  return _internal_table_properties();
}
inline void TableStyleArchive::unsafe_arena_set_allocated_table_properties(
    ::TST::TableStylePropertiesArchive* table_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_properties_);
  }
  table_properties_ = table_properties;
  if (table_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TableStyleArchive.table_properties)
}
inline ::TST::TableStylePropertiesArchive* TableStyleArchive::release_table_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::TableStylePropertiesArchive* temp = table_properties_;
  table_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TableStylePropertiesArchive* TableStyleArchive::unsafe_arena_release_table_properties() {
  // @@protoc_insertion_point(field_release:TST.TableStyleArchive.table_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::TableStylePropertiesArchive* temp = table_properties_;
  table_properties_ = nullptr;
  return temp;
}
inline ::TST::TableStylePropertiesArchive* TableStyleArchive::_internal_mutable_table_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (table_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TableStylePropertiesArchive>(GetArena());
    table_properties_ = p;
  }
  return table_properties_;
}
inline ::TST::TableStylePropertiesArchive* TableStyleArchive::mutable_table_properties() {
  // @@protoc_insertion_point(field_mutable:TST.TableStyleArchive.table_properties)
  return _internal_mutable_table_properties();
}
inline void TableStyleArchive::set_allocated_table_properties(::TST::TableStylePropertiesArchive* table_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_properties_);
  }
  if (table_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_properties)->GetArena();
    if (message_arena != submessage_arena) {
      table_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_properties_ = table_properties;
  // @@protoc_insertion_point(field_set_allocated:TST.TableStyleArchive.table_properties)
}

// -------------------------------------------------------------------

// CellStyleArchive

// required .TSS.StyleArchive super = 1;
inline bool CellStyleArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CellStyleArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& CellStyleArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& CellStyleArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CellStyleArchive.super)
  return _internal_super();
}
inline void CellStyleArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStyleArchive.super)
}
inline ::TSS::StyleArchive* CellStyleArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::StyleArchive* CellStyleArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CellStyleArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* CellStyleArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::StyleArchive* CellStyleArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.CellStyleArchive.super)
  return _internal_mutable_super();
}
inline void CellStyleArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStyleArchive.super)
}

// optional uint32 override_count = 10 [default = 0];
inline bool CellStyleArchive::_internal_has_override_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellStyleArchive::has_override_count() const {
  return _internal_has_override_count();
}
inline void CellStyleArchive::clear_override_count() {
  override_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellStyleArchive::_internal_override_count() const {
  return override_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellStyleArchive::override_count() const {
  // @@protoc_insertion_point(field_get:TST.CellStyleArchive.override_count)
  return _internal_override_count();
}
inline void CellStyleArchive::_internal_set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  override_count_ = value;
}
inline void CellStyleArchive::set_override_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_override_count(value);
  // @@protoc_insertion_point(field_set:TST.CellStyleArchive.override_count)
}

// optional .TST.CellStylePropertiesArchive cell_properties = 11;
inline bool CellStyleArchive::_internal_has_cell_properties() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_properties_ != nullptr);
  return value;
}
inline bool CellStyleArchive::has_cell_properties() const {
  return _internal_has_cell_properties();
}
inline const ::TST::CellStylePropertiesArchive& CellStyleArchive::_internal_cell_properties() const {
  const ::TST::CellStylePropertiesArchive* p = cell_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellStylePropertiesArchive&>(
      ::TST::_CellStylePropertiesArchive_default_instance_);
}
inline const ::TST::CellStylePropertiesArchive& CellStyleArchive::cell_properties() const {
  // @@protoc_insertion_point(field_get:TST.CellStyleArchive.cell_properties)
  return _internal_cell_properties();
}
inline void CellStyleArchive::unsafe_arena_set_allocated_cell_properties(
    ::TST::CellStylePropertiesArchive* cell_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_properties_);
  }
  cell_properties_ = cell_properties;
  if (cell_properties) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellStyleArchive.cell_properties)
}
inline ::TST::CellStylePropertiesArchive* CellStyleArchive::release_cell_properties() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellStylePropertiesArchive* temp = cell_properties_;
  cell_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellStylePropertiesArchive* CellStyleArchive::unsafe_arena_release_cell_properties() {
  // @@protoc_insertion_point(field_release:TST.CellStyleArchive.cell_properties)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellStylePropertiesArchive* temp = cell_properties_;
  cell_properties_ = nullptr;
  return temp;
}
inline ::TST::CellStylePropertiesArchive* CellStyleArchive::_internal_mutable_cell_properties() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellStylePropertiesArchive>(GetArena());
    cell_properties_ = p;
  }
  return cell_properties_;
}
inline ::TST::CellStylePropertiesArchive* CellStyleArchive::mutable_cell_properties() {
  // @@protoc_insertion_point(field_mutable:TST.CellStyleArchive.cell_properties)
  return _internal_mutable_cell_properties();
}
inline void CellStyleArchive::set_allocated_cell_properties(::TST::CellStylePropertiesArchive* cell_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_properties_);
  }
  if (cell_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_properties)->GetArena();
    if (message_arena != submessage_arena) {
      cell_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_properties_ = cell_properties;
  // @@protoc_insertion_point(field_set_allocated:TST.CellStyleArchive.cell_properties)
}

// -------------------------------------------------------------------

// FormulaPredicateArchive

// required .TSCE.FormulaArchive formula = 1;
inline bool FormulaPredicateArchive::_internal_has_formula() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_ != nullptr);
  return value;
}
inline bool FormulaPredicateArchive::has_formula() const {
  return _internal_has_formula();
}
inline const ::TSCE::FormulaArchive& FormulaPredicateArchive::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& FormulaPredicateArchive::formula() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.formula)
  return _internal_formula();
}
inline void FormulaPredicateArchive::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  formula_ = formula;
  if (formula) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaPredicateArchive.formula)
}
inline ::TSCE::FormulaArchive* FormulaPredicateArchive::release_formula() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaArchive* FormulaPredicateArchive::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TST.FormulaPredicateArchive.formula)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* FormulaPredicateArchive::_internal_mutable_formula() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArena());
    formula_ = p;
  }
  return formula_;
}
inline ::TSCE::FormulaArchive* FormulaPredicateArchive::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:TST.FormulaPredicateArchive.formula)
  return _internal_mutable_formula();
}
inline void FormulaPredicateArchive::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula)->GetArena();
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaPredicateArchive.formula)
}

// required .TST.FormulaPredicateArchive.FormulaPredicateType predicate_type = 2;
inline bool FormulaPredicateArchive::_internal_has_predicate_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaPredicateArchive::has_predicate_type() const {
  return _internal_has_predicate_type();
}
inline void FormulaPredicateArchive::clear_predicate_type() {
  predicate_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::_internal_predicate_type() const {
  return static_cast< ::TST::FormulaPredicateArchive_FormulaPredicateType >(predicate_type_);
}
inline ::TST::FormulaPredicateArchive_FormulaPredicateType FormulaPredicateArchive::predicate_type() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.predicate_type)
  return _internal_predicate_type();
}
inline void FormulaPredicateArchive::_internal_set_predicate_type(::TST::FormulaPredicateArchive_FormulaPredicateType value) {
  assert(::TST::FormulaPredicateArchive_FormulaPredicateType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  predicate_type_ = value;
}
inline void FormulaPredicateArchive::set_predicate_type(::TST::FormulaPredicateArchive_FormulaPredicateType value) {
  _internal_set_predicate_type(value);
  // @@protoc_insertion_point(field_set:TST.FormulaPredicateArchive.predicate_type)
}

// required .TST.FormulaPredicateArchive.QualifierType qualifier1 = 3;
inline bool FormulaPredicateArchive::_internal_has_qualifier1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormulaPredicateArchive::has_qualifier1() const {
  return _internal_has_qualifier1();
}
inline void FormulaPredicateArchive::clear_qualifier1() {
  qualifier1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TST::FormulaPredicateArchive_QualifierType FormulaPredicateArchive::_internal_qualifier1() const {
  return static_cast< ::TST::FormulaPredicateArchive_QualifierType >(qualifier1_);
}
inline ::TST::FormulaPredicateArchive_QualifierType FormulaPredicateArchive::qualifier1() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.qualifier1)
  return _internal_qualifier1();
}
inline void FormulaPredicateArchive::_internal_set_qualifier1(::TST::FormulaPredicateArchive_QualifierType value) {
  assert(::TST::FormulaPredicateArchive_QualifierType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  qualifier1_ = value;
}
inline void FormulaPredicateArchive::set_qualifier1(::TST::FormulaPredicateArchive_QualifierType value) {
  _internal_set_qualifier1(value);
  // @@protoc_insertion_point(field_set:TST.FormulaPredicateArchive.qualifier1)
}

// required .TST.FormulaPredicateArchive.QualifierType qualifier2 = 4;
inline bool FormulaPredicateArchive::_internal_has_qualifier2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormulaPredicateArchive::has_qualifier2() const {
  return _internal_has_qualifier2();
}
inline void FormulaPredicateArchive::clear_qualifier2() {
  qualifier2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TST::FormulaPredicateArchive_QualifierType FormulaPredicateArchive::_internal_qualifier2() const {
  return static_cast< ::TST::FormulaPredicateArchive_QualifierType >(qualifier2_);
}
inline ::TST::FormulaPredicateArchive_QualifierType FormulaPredicateArchive::qualifier2() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.qualifier2)
  return _internal_qualifier2();
}
inline void FormulaPredicateArchive::_internal_set_qualifier2(::TST::FormulaPredicateArchive_QualifierType value) {
  assert(::TST::FormulaPredicateArchive_QualifierType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  qualifier2_ = value;
}
inline void FormulaPredicateArchive::set_qualifier2(::TST::FormulaPredicateArchive_QualifierType value) {
  _internal_set_qualifier2(value);
  // @@protoc_insertion_point(field_set:TST.FormulaPredicateArchive.qualifier2)
}

// required int32 param_index1 = 5;
inline bool FormulaPredicateArchive::_internal_has_param_index1() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormulaPredicateArchive::has_param_index1() const {
  return _internal_has_param_index1();
}
inline void FormulaPredicateArchive::clear_param_index1() {
  param_index1_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormulaPredicateArchive::_internal_param_index1() const {
  return param_index1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormulaPredicateArchive::param_index1() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.param_index1)
  return _internal_param_index1();
}
inline void FormulaPredicateArchive::_internal_set_param_index1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  param_index1_ = value;
}
inline void FormulaPredicateArchive::set_param_index1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param_index1(value);
  // @@protoc_insertion_point(field_set:TST.FormulaPredicateArchive.param_index1)
}

// required int32 param_index2 = 6;
inline bool FormulaPredicateArchive::_internal_has_param_index2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormulaPredicateArchive::has_param_index2() const {
  return _internal_has_param_index2();
}
inline void FormulaPredicateArchive::clear_param_index2() {
  param_index2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormulaPredicateArchive::_internal_param_index2() const {
  return param_index2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormulaPredicateArchive::param_index2() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.param_index2)
  return _internal_param_index2();
}
inline void FormulaPredicateArchive::_internal_set_param_index2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  param_index2_ = value;
}
inline void FormulaPredicateArchive::set_param_index2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param_index2(value);
  // @@protoc_insertion_point(field_set:TST.FormulaPredicateArchive.param_index2)
}

// required int32 param_index0 = 7;
inline bool FormulaPredicateArchive::_internal_has_param_index0() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormulaPredicateArchive::has_param_index0() const {
  return _internal_has_param_index0();
}
inline void FormulaPredicateArchive::clear_param_index0() {
  param_index0_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormulaPredicateArchive::_internal_param_index0() const {
  return param_index0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FormulaPredicateArchive::param_index0() const {
  // @@protoc_insertion_point(field_get:TST.FormulaPredicateArchive.param_index0)
  return _internal_param_index0();
}
inline void FormulaPredicateArchive::_internal_set_param_index0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  param_index0_ = value;
}
inline void FormulaPredicateArchive::set_param_index0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param_index0(value);
  // @@protoc_insertion_point(field_set:TST.FormulaPredicateArchive.param_index0)
}

// -------------------------------------------------------------------

// ConditionalStyleSetArchive_ConditionalStyleRule

// required .TST.FormulaPredicateArchive predicate = 1;
inline bool ConditionalStyleSetArchive_ConditionalStyleRule::_internal_has_predicate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || predicate_ != nullptr);
  return value;
}
inline bool ConditionalStyleSetArchive_ConditionalStyleRule::has_predicate() const {
  return _internal_has_predicate();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::clear_predicate() {
  if (predicate_ != nullptr) predicate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::FormulaPredicateArchive& ConditionalStyleSetArchive_ConditionalStyleRule::_internal_predicate() const {
  const ::TST::FormulaPredicateArchive* p = predicate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaPredicateArchive&>(
      ::TST::_FormulaPredicateArchive_default_instance_);
}
inline const ::TST::FormulaPredicateArchive& ConditionalStyleSetArchive_ConditionalStyleRule::predicate() const {
  // @@protoc_insertion_point(field_get:TST.ConditionalStyleSetArchive.ConditionalStyleRule.predicate)
  return _internal_predicate();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::unsafe_arena_set_allocated_predicate(
    ::TST::FormulaPredicateArchive* predicate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(predicate_);
  }
  predicate_ = predicate;
  if (predicate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ConditionalStyleSetArchive.ConditionalStyleRule.predicate)
}
inline ::TST::FormulaPredicateArchive* ConditionalStyleSetArchive_ConditionalStyleRule::release_predicate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::FormulaPredicateArchive* temp = predicate_;
  predicate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::FormulaPredicateArchive* ConditionalStyleSetArchive_ConditionalStyleRule::unsafe_arena_release_predicate() {
  // @@protoc_insertion_point(field_release:TST.ConditionalStyleSetArchive.ConditionalStyleRule.predicate)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::FormulaPredicateArchive* temp = predicate_;
  predicate_ = nullptr;
  return temp;
}
inline ::TST::FormulaPredicateArchive* ConditionalStyleSetArchive_ConditionalStyleRule::_internal_mutable_predicate() {
  _has_bits_[0] |= 0x00000001u;
  if (predicate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaPredicateArchive>(GetArena());
    predicate_ = p;
  }
  return predicate_;
}
inline ::TST::FormulaPredicateArchive* ConditionalStyleSetArchive_ConditionalStyleRule::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable:TST.ConditionalStyleSetArchive.ConditionalStyleRule.predicate)
  return _internal_mutable_predicate();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::set_allocated_predicate(::TST::FormulaPredicateArchive* predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete predicate_;
  }
  if (predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(predicate);
    if (message_arena != submessage_arena) {
      predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  predicate_ = predicate;
  // @@protoc_insertion_point(field_set_allocated:TST.ConditionalStyleSetArchive.ConditionalStyleRule.predicate)
}

// required .TSP.Reference cell_style = 2;
inline bool ConditionalStyleSetArchive_ConditionalStyleRule::_internal_has_cell_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cell_style_ != nullptr);
  return value;
}
inline bool ConditionalStyleSetArchive_ConditionalStyleRule::has_cell_style() const {
  return _internal_has_cell_style();
}
inline const ::TSP::Reference& ConditionalStyleSetArchive_ConditionalStyleRule::_internal_cell_style() const {
  const ::TSP::Reference* p = cell_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConditionalStyleSetArchive_ConditionalStyleRule::cell_style() const {
  // @@protoc_insertion_point(field_get:TST.ConditionalStyleSetArchive.ConditionalStyleRule.cell_style)
  return _internal_cell_style();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::unsafe_arena_set_allocated_cell_style(
    ::TSP::Reference* cell_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_);
  }
  cell_style_ = cell_style;
  if (cell_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ConditionalStyleSetArchive.ConditionalStyleRule.cell_style)
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::release_cell_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cell_style_;
  cell_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::unsafe_arena_release_cell_style() {
  // @@protoc_insertion_point(field_release:TST.ConditionalStyleSetArchive.ConditionalStyleRule.cell_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = cell_style_;
  cell_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::_internal_mutable_cell_style() {
  _has_bits_[0] |= 0x00000002u;
  if (cell_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    cell_style_ = p;
  }
  return cell_style_;
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::mutable_cell_style() {
  // @@protoc_insertion_point(field_mutable:TST.ConditionalStyleSetArchive.ConditionalStyleRule.cell_style)
  return _internal_mutable_cell_style();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::set_allocated_cell_style(::TSP::Reference* cell_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style_);
  }
  if (cell_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_style)->GetArena();
    if (message_arena != submessage_arena) {
      cell_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cell_style_ = cell_style;
  // @@protoc_insertion_point(field_set_allocated:TST.ConditionalStyleSetArchive.ConditionalStyleRule.cell_style)
}

// required .TSP.Reference text_style = 3;
inline bool ConditionalStyleSetArchive_ConditionalStyleRule::_internal_has_text_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || text_style_ != nullptr);
  return value;
}
inline bool ConditionalStyleSetArchive_ConditionalStyleRule::has_text_style() const {
  return _internal_has_text_style();
}
inline const ::TSP::Reference& ConditionalStyleSetArchive_ConditionalStyleRule::_internal_text_style() const {
  const ::TSP::Reference* p = text_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ConditionalStyleSetArchive_ConditionalStyleRule::text_style() const {
  // @@protoc_insertion_point(field_get:TST.ConditionalStyleSetArchive.ConditionalStyleRule.text_style)
  return _internal_text_style();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::unsafe_arena_set_allocated_text_style(
    ::TSP::Reference* text_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style_);
  }
  text_style_ = text_style;
  if (text_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ConditionalStyleSetArchive.ConditionalStyleRule.text_style)
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::release_text_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = text_style_;
  text_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::unsafe_arena_release_text_style() {
  // @@protoc_insertion_point(field_release:TST.ConditionalStyleSetArchive.ConditionalStyleRule.text_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = text_style_;
  text_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::_internal_mutable_text_style() {
  _has_bits_[0] |= 0x00000004u;
  if (text_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    text_style_ = p;
  }
  return text_style_;
}
inline ::TSP::Reference* ConditionalStyleSetArchive_ConditionalStyleRule::mutable_text_style() {
  // @@protoc_insertion_point(field_mutable:TST.ConditionalStyleSetArchive.ConditionalStyleRule.text_style)
  return _internal_mutable_text_style();
}
inline void ConditionalStyleSetArchive_ConditionalStyleRule::set_allocated_text_style(::TSP::Reference* text_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style_);
  }
  if (text_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_style)->GetArena();
    if (message_arena != submessage_arena) {
      text_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_style_ = text_style;
  // @@protoc_insertion_point(field_set_allocated:TST.ConditionalStyleSetArchive.ConditionalStyleRule.text_style)
}

// -------------------------------------------------------------------

// ConditionalStyleSetArchive

// required uint32 ruleCount = 1;
inline bool ConditionalStyleSetArchive::_internal_has_rulecount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConditionalStyleSetArchive::has_rulecount() const {
  return _internal_has_rulecount();
}
inline void ConditionalStyleSetArchive::clear_rulecount() {
  rulecount_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConditionalStyleSetArchive::_internal_rulecount() const {
  return rulecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConditionalStyleSetArchive::rulecount() const {
  // @@protoc_insertion_point(field_get:TST.ConditionalStyleSetArchive.ruleCount)
  return _internal_rulecount();
}
inline void ConditionalStyleSetArchive::_internal_set_rulecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rulecount_ = value;
}
inline void ConditionalStyleSetArchive::set_rulecount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rulecount(value);
  // @@protoc_insertion_point(field_set:TST.ConditionalStyleSetArchive.ruleCount)
}

// repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rules = 2;
inline int ConditionalStyleSetArchive::_internal_rules_size() const {
  return rules_.size();
}
inline int ConditionalStyleSetArchive::rules_size() const {
  return _internal_rules_size();
}
inline void ConditionalStyleSetArchive::clear_rules() {
  rules_.Clear();
}
inline ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* ConditionalStyleSetArchive::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ConditionalStyleSetArchive.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >*
ConditionalStyleSetArchive::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:TST.ConditionalStyleSetArchive.rules)
  return &rules_;
}
inline const ::TST::ConditionalStyleSetArchive_ConditionalStyleRule& ConditionalStyleSetArchive::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const ::TST::ConditionalStyleSetArchive_ConditionalStyleRule& ConditionalStyleSetArchive::rules(int index) const {
  // @@protoc_insertion_point(field_get:TST.ConditionalStyleSetArchive.rules)
  return _internal_rules(index);
}
inline ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* ConditionalStyleSetArchive::_internal_add_rules() {
  return rules_.Add();
}
inline ::TST::ConditionalStyleSetArchive_ConditionalStyleRule* ConditionalStyleSetArchive::add_rules() {
  // @@protoc_insertion_point(field_add:TST.ConditionalStyleSetArchive.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >&
ConditionalStyleSetArchive::rules() const {
  // @@protoc_insertion_point(field_list:TST.ConditionalStyleSetArchive.rules)
  return rules_;
}

// -------------------------------------------------------------------

// FilterSetArchive

// optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
inline bool FilterSetArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FilterSetArchive::has_type() const {
  return _internal_has_type();
}
inline void FilterSetArchive::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TST::FilterSetArchive_FilterSetType FilterSetArchive::_internal_type() const {
  return static_cast< ::TST::FilterSetArchive_FilterSetType >(type_);
}
inline ::TST::FilterSetArchive_FilterSetType FilterSetArchive::type() const {
  // @@protoc_insertion_point(field_get:TST.FilterSetArchive.type)
  return _internal_type();
}
inline void FilterSetArchive::_internal_set_type(::TST::FilterSetArchive_FilterSetType value) {
  assert(::TST::FilterSetArchive_FilterSetType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void FilterSetArchive::set_type(::TST::FilterSetArchive_FilterSetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TST.FilterSetArchive.type)
}

// optional bool is_enabled = 2 [default = true];
inline bool FilterSetArchive::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FilterSetArchive::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void FilterSetArchive::clear_is_enabled() {
  is_enabled_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FilterSetArchive::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool FilterSetArchive::is_enabled() const {
  // @@protoc_insertion_point(field_get:TST.FilterSetArchive.is_enabled)
  return _internal_is_enabled();
}
inline void FilterSetArchive::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_enabled_ = value;
}
inline void FilterSetArchive::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:TST.FilterSetArchive.is_enabled)
}

// repeated .TST.FilterRuleArchive filter_rules = 3;
inline int FilterSetArchive::_internal_filter_rules_size() const {
  return filter_rules_.size();
}
inline int FilterSetArchive::filter_rules_size() const {
  return _internal_filter_rules_size();
}
inline void FilterSetArchive::clear_filter_rules() {
  filter_rules_.Clear();
}
inline ::TST::FilterRuleArchive* FilterSetArchive::mutable_filter_rules(int index) {
  // @@protoc_insertion_point(field_mutable:TST.FilterSetArchive.filter_rules)
  return filter_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >*
FilterSetArchive::mutable_filter_rules() {
  // @@protoc_insertion_point(field_mutable_list:TST.FilterSetArchive.filter_rules)
  return &filter_rules_;
}
inline const ::TST::FilterRuleArchive& FilterSetArchive::_internal_filter_rules(int index) const {
  return filter_rules_.Get(index);
}
inline const ::TST::FilterRuleArchive& FilterSetArchive::filter_rules(int index) const {
  // @@protoc_insertion_point(field_get:TST.FilterSetArchive.filter_rules)
  return _internal_filter_rules(index);
}
inline ::TST::FilterRuleArchive* FilterSetArchive::_internal_add_filter_rules() {
  return filter_rules_.Add();
}
inline ::TST::FilterRuleArchive* FilterSetArchive::add_filter_rules() {
  // @@protoc_insertion_point(field_add:TST.FilterSetArchive.filter_rules)
  return _internal_add_filter_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FilterRuleArchive >&
FilterSetArchive::filter_rules() const {
  // @@protoc_insertion_point(field_list:TST.FilterSetArchive.filter_rules)
  return filter_rules_;
}

// optional bool needs_formula_rewrite_for_import = 4 [default = false];
inline bool FilterSetArchive::_internal_has_needs_formula_rewrite_for_import() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FilterSetArchive::has_needs_formula_rewrite_for_import() const {
  return _internal_has_needs_formula_rewrite_for_import();
}
inline void FilterSetArchive::clear_needs_formula_rewrite_for_import() {
  needs_formula_rewrite_for_import_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FilterSetArchive::_internal_needs_formula_rewrite_for_import() const {
  return needs_formula_rewrite_for_import_;
}
inline bool FilterSetArchive::needs_formula_rewrite_for_import() const {
  // @@protoc_insertion_point(field_get:TST.FilterSetArchive.needs_formula_rewrite_for_import)
  return _internal_needs_formula_rewrite_for_import();
}
inline void FilterSetArchive::_internal_set_needs_formula_rewrite_for_import(bool value) {
  _has_bits_[0] |= 0x00000002u;
  needs_formula_rewrite_for_import_ = value;
}
inline void FilterSetArchive::set_needs_formula_rewrite_for_import(bool value) {
  _internal_set_needs_formula_rewrite_for_import(value);
  // @@protoc_insertion_point(field_set:TST.FilterSetArchive.needs_formula_rewrite_for_import)
}

// repeated uint32 filter_offsets = 5;
inline int FilterSetArchive::_internal_filter_offsets_size() const {
  return filter_offsets_.size();
}
inline int FilterSetArchive::filter_offsets_size() const {
  return _internal_filter_offsets_size();
}
inline void FilterSetArchive::clear_filter_offsets() {
  filter_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterSetArchive::_internal_filter_offsets(int index) const {
  return filter_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilterSetArchive::filter_offsets(int index) const {
  // @@protoc_insertion_point(field_get:TST.FilterSetArchive.filter_offsets)
  return _internal_filter_offsets(index);
}
inline void FilterSetArchive::set_filter_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  filter_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.FilterSetArchive.filter_offsets)
}
inline void FilterSetArchive::_internal_add_filter_offsets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  filter_offsets_.Add(value);
}
inline void FilterSetArchive::add_filter_offsets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_filter_offsets(value);
  // @@protoc_insertion_point(field_add:TST.FilterSetArchive.filter_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FilterSetArchive::_internal_filter_offsets() const {
  return filter_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FilterSetArchive::filter_offsets() const {
  // @@protoc_insertion_point(field_list:TST.FilterSetArchive.filter_offsets)
  return _internal_filter_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FilterSetArchive::_internal_mutable_filter_offsets() {
  return &filter_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FilterSetArchive::mutable_filter_offsets() {
  // @@protoc_insertion_point(field_mutable_list:TST.FilterSetArchive.filter_offsets)
  return _internal_mutable_filter_offsets();
}

// repeated bool filter_enabled = 6;
inline int FilterSetArchive::_internal_filter_enabled_size() const {
  return filter_enabled_.size();
}
inline int FilterSetArchive::filter_enabled_size() const {
  return _internal_filter_enabled_size();
}
inline void FilterSetArchive::clear_filter_enabled() {
  filter_enabled_.Clear();
}
inline bool FilterSetArchive::_internal_filter_enabled(int index) const {
  return filter_enabled_.Get(index);
}
inline bool FilterSetArchive::filter_enabled(int index) const {
  // @@protoc_insertion_point(field_get:TST.FilterSetArchive.filter_enabled)
  return _internal_filter_enabled(index);
}
inline void FilterSetArchive::set_filter_enabled(int index, bool value) {
  filter_enabled_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.FilterSetArchive.filter_enabled)
}
inline void FilterSetArchive::_internal_add_filter_enabled(bool value) {
  filter_enabled_.Add(value);
}
inline void FilterSetArchive::add_filter_enabled(bool value) {
  _internal_add_filter_enabled(value);
  // @@protoc_insertion_point(field_add:TST.FilterSetArchive.filter_enabled)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
FilterSetArchive::_internal_filter_enabled() const {
  return filter_enabled_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
FilterSetArchive::filter_enabled() const {
  // @@protoc_insertion_point(field_list:TST.FilterSetArchive.filter_enabled)
  return _internal_filter_enabled();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
FilterSetArchive::_internal_mutable_filter_enabled() {
  return &filter_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
FilterSetArchive::mutable_filter_enabled() {
  // @@protoc_insertion_point(field_mutable_list:TST.FilterSetArchive.filter_enabled)
  return _internal_mutable_filter_enabled();
}

// -------------------------------------------------------------------

// HiddenStateExtentArchive_RowOrColumnState

// required .TSP.UUID row_or_column_uid = 1;
inline bool HiddenStateExtentArchive_RowOrColumnState::_internal_has_row_or_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || row_or_column_uid_ != nullptr);
  return value;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::has_row_or_column_uid() const {
  return _internal_has_row_or_column_uid();
}
inline const ::TSP::UUID& HiddenStateExtentArchive_RowOrColumnState::_internal_row_or_column_uid() const {
  const ::TSP::UUID* p = row_or_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HiddenStateExtentArchive_RowOrColumnState::row_or_column_uid() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.RowOrColumnState.row_or_column_uid)
  return _internal_row_or_column_uid();
}
inline void HiddenStateExtentArchive_RowOrColumnState::unsafe_arena_set_allocated_row_or_column_uid(
    ::TSP::UUID* row_or_column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_or_column_uid_);
  }
  row_or_column_uid_ = row_or_column_uid;
  if (row_or_column_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStateExtentArchive.RowOrColumnState.row_or_column_uid)
}
inline ::TSP::UUID* HiddenStateExtentArchive_RowOrColumnState::release_row_or_column_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = row_or_column_uid_;
  row_or_column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HiddenStateExtentArchive_RowOrColumnState::unsafe_arena_release_row_or_column_uid() {
  // @@protoc_insertion_point(field_release:TST.HiddenStateExtentArchive.RowOrColumnState.row_or_column_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = row_or_column_uid_;
  row_or_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HiddenStateExtentArchive_RowOrColumnState::_internal_mutable_row_or_column_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (row_or_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    row_or_column_uid_ = p;
  }
  return row_or_column_uid_;
}
inline ::TSP::UUID* HiddenStateExtentArchive_RowOrColumnState::mutable_row_or_column_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateExtentArchive.RowOrColumnState.row_or_column_uid)
  return _internal_mutable_row_or_column_uid();
}
inline void HiddenStateExtentArchive_RowOrColumnState::set_allocated_row_or_column_uid(::TSP::UUID* row_or_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_or_column_uid_);
  }
  if (row_or_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_or_column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      row_or_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_or_column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  row_or_column_uid_ = row_or_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStateExtentArchive.RowOrColumnState.row_or_column_uid)
}

// optional bool user_hidden = 2;
inline bool HiddenStateExtentArchive_RowOrColumnState::_internal_has_user_hidden() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::has_user_hidden() const {
  return _internal_has_user_hidden();
}
inline void HiddenStateExtentArchive_RowOrColumnState::clear_user_hidden() {
  user_hidden_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::_internal_user_hidden() const {
  return user_hidden_;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::user_hidden() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.RowOrColumnState.user_hidden)
  return _internal_user_hidden();
}
inline void HiddenStateExtentArchive_RowOrColumnState::_internal_set_user_hidden(bool value) {
  _has_bits_[0] |= 0x00000002u;
  user_hidden_ = value;
}
inline void HiddenStateExtentArchive_RowOrColumnState::set_user_hidden(bool value) {
  _internal_set_user_hidden(value);
  // @@protoc_insertion_point(field_set:TST.HiddenStateExtentArchive.RowOrColumnState.user_hidden)
}

// optional bool filtered = 3;
inline bool HiddenStateExtentArchive_RowOrColumnState::_internal_has_filtered() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::has_filtered() const {
  return _internal_has_filtered();
}
inline void HiddenStateExtentArchive_RowOrColumnState::clear_filtered() {
  filtered_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::_internal_filtered() const {
  return filtered_;
}
inline bool HiddenStateExtentArchive_RowOrColumnState::filtered() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.RowOrColumnState.filtered)
  return _internal_filtered();
}
inline void HiddenStateExtentArchive_RowOrColumnState::_internal_set_filtered(bool value) {
  _has_bits_[0] |= 0x00000004u;
  filtered_ = value;
}
inline void HiddenStateExtentArchive_RowOrColumnState::set_filtered(bool value) {
  _internal_set_filtered(value);
  // @@protoc_insertion_point(field_set:TST.HiddenStateExtentArchive.RowOrColumnState.filtered)
}

// -------------------------------------------------------------------

// HiddenStateExtentArchive

// required .TSP.UUID hidden_state_extent_uid = 1;
inline bool HiddenStateExtentArchive::_internal_has_hidden_state_extent_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hidden_state_extent_uid_ != nullptr);
  return value;
}
inline bool HiddenStateExtentArchive::has_hidden_state_extent_uid() const {
  return _internal_has_hidden_state_extent_uid();
}
inline const ::TSP::UUID& HiddenStateExtentArchive::_internal_hidden_state_extent_uid() const {
  const ::TSP::UUID* p = hidden_state_extent_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HiddenStateExtentArchive::hidden_state_extent_uid() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.hidden_state_extent_uid)
  return _internal_hidden_state_extent_uid();
}
inline void HiddenStateExtentArchive::unsafe_arena_set_allocated_hidden_state_extent_uid(
    ::TSP::UUID* hidden_state_extent_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_extent_uid_);
  }
  hidden_state_extent_uid_ = hidden_state_extent_uid;
  if (hidden_state_extent_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStateExtentArchive.hidden_state_extent_uid)
}
inline ::TSP::UUID* HiddenStateExtentArchive::release_hidden_state_extent_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = hidden_state_extent_uid_;
  hidden_state_extent_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HiddenStateExtentArchive::unsafe_arena_release_hidden_state_extent_uid() {
  // @@protoc_insertion_point(field_release:TST.HiddenStateExtentArchive.hidden_state_extent_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = hidden_state_extent_uid_;
  hidden_state_extent_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HiddenStateExtentArchive::_internal_mutable_hidden_state_extent_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (hidden_state_extent_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    hidden_state_extent_uid_ = p;
  }
  return hidden_state_extent_uid_;
}
inline ::TSP::UUID* HiddenStateExtentArchive::mutable_hidden_state_extent_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateExtentArchive.hidden_state_extent_uid)
  return _internal_mutable_hidden_state_extent_uid();
}
inline void HiddenStateExtentArchive::set_allocated_hidden_state_extent_uid(::TSP::UUID* hidden_state_extent_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_extent_uid_);
  }
  if (hidden_state_extent_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_state_extent_uid)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_state_extent_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_state_extent_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hidden_state_extent_uid_ = hidden_state_extent_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStateExtentArchive.hidden_state_extent_uid)
}

// repeated .TST.HiddenStateExtentArchive.RowOrColumnState hidden_states = 2;
inline int HiddenStateExtentArchive::_internal_hidden_states_size() const {
  return hidden_states_.size();
}
inline int HiddenStateExtentArchive::hidden_states_size() const {
  return _internal_hidden_states_size();
}
inline void HiddenStateExtentArchive::clear_hidden_states() {
  hidden_states_.Clear();
}
inline ::TST::HiddenStateExtentArchive_RowOrColumnState* HiddenStateExtentArchive::mutable_hidden_states(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateExtentArchive.hidden_states)
  return hidden_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStateExtentArchive_RowOrColumnState >*
HiddenStateExtentArchive::mutable_hidden_states() {
  // @@protoc_insertion_point(field_mutable_list:TST.HiddenStateExtentArchive.hidden_states)
  return &hidden_states_;
}
inline const ::TST::HiddenStateExtentArchive_RowOrColumnState& HiddenStateExtentArchive::_internal_hidden_states(int index) const {
  return hidden_states_.Get(index);
}
inline const ::TST::HiddenStateExtentArchive_RowOrColumnState& HiddenStateExtentArchive::hidden_states(int index) const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.hidden_states)
  return _internal_hidden_states(index);
}
inline ::TST::HiddenStateExtentArchive_RowOrColumnState* HiddenStateExtentArchive::_internal_add_hidden_states() {
  return hidden_states_.Add();
}
inline ::TST::HiddenStateExtentArchive_RowOrColumnState* HiddenStateExtentArchive::add_hidden_states() {
  // @@protoc_insertion_point(field_add:TST.HiddenStateExtentArchive.hidden_states)
  return _internal_add_hidden_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStateExtentArchive_RowOrColumnState >&
HiddenStateExtentArchive::hidden_states() const {
  // @@protoc_insertion_point(field_list:TST.HiddenStateExtentArchive.hidden_states)
  return hidden_states_;
}

// required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
inline bool HiddenStateExtentArchive::_internal_has_row_or_column_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HiddenStateExtentArchive::has_row_or_column_direction() const {
  return _internal_has_row_or_column_direction();
}
inline void HiddenStateExtentArchive::clear_row_or_column_direction() {
  row_or_column_direction_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::_internal_row_or_column_direction() const {
  return static_cast< ::TST::HiddenStateExtentArchive_RowOrColumnDirection >(row_or_column_direction_);
}
inline ::TST::HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::row_or_column_direction() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.row_or_column_direction)
  return _internal_row_or_column_direction();
}
inline void HiddenStateExtentArchive::_internal_set_row_or_column_direction(::TST::HiddenStateExtentArchive_RowOrColumnDirection value) {
  assert(::TST::HiddenStateExtentArchive_RowOrColumnDirection_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  row_or_column_direction_ = value;
}
inline void HiddenStateExtentArchive::set_row_or_column_direction(::TST::HiddenStateExtentArchive_RowOrColumnDirection value) {
  _internal_set_row_or_column_direction(value);
  // @@protoc_insertion_point(field_set:TST.HiddenStateExtentArchive.row_or_column_direction)
}

// repeated .TSCE.CellValueArchive threshold_value = 5;
inline int HiddenStateExtentArchive::_internal_threshold_value_size() const {
  return threshold_value_.size();
}
inline int HiddenStateExtentArchive::threshold_value_size() const {
  return _internal_threshold_value_size();
}
inline ::TSCE::CellValueArchive* HiddenStateExtentArchive::mutable_threshold_value(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateExtentArchive.threshold_value)
  return threshold_value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
HiddenStateExtentArchive::mutable_threshold_value() {
  // @@protoc_insertion_point(field_mutable_list:TST.HiddenStateExtentArchive.threshold_value)
  return &threshold_value_;
}
inline const ::TSCE::CellValueArchive& HiddenStateExtentArchive::_internal_threshold_value(int index) const {
  return threshold_value_.Get(index);
}
inline const ::TSCE::CellValueArchive& HiddenStateExtentArchive::threshold_value(int index) const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.threshold_value)
  return _internal_threshold_value(index);
}
inline ::TSCE::CellValueArchive* HiddenStateExtentArchive::_internal_add_threshold_value() {
  return threshold_value_.Add();
}
inline ::TSCE::CellValueArchive* HiddenStateExtentArchive::add_threshold_value() {
  // @@protoc_insertion_point(field_add:TST.HiddenStateExtentArchive.threshold_value)
  return _internal_add_threshold_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
HiddenStateExtentArchive::threshold_value() const {
  // @@protoc_insertion_point(field_list:TST.HiddenStateExtentArchive.threshold_value)
  return threshold_value_;
}

// optional bool needs_to_update_filter_set_for_import = 6 [default = false];
inline bool HiddenStateExtentArchive::_internal_has_needs_to_update_filter_set_for_import() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HiddenStateExtentArchive::has_needs_to_update_filter_set_for_import() const {
  return _internal_has_needs_to_update_filter_set_for_import();
}
inline void HiddenStateExtentArchive::clear_needs_to_update_filter_set_for_import() {
  needs_to_update_filter_set_for_import_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HiddenStateExtentArchive::_internal_needs_to_update_filter_set_for_import() const {
  return needs_to_update_filter_set_for_import_;
}
inline bool HiddenStateExtentArchive::needs_to_update_filter_set_for_import() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.needs_to_update_filter_set_for_import)
  return _internal_needs_to_update_filter_set_for_import();
}
inline void HiddenStateExtentArchive::_internal_set_needs_to_update_filter_set_for_import(bool value) {
  _has_bits_[0] |= 0x00000004u;
  needs_to_update_filter_set_for_import_ = value;
}
inline void HiddenStateExtentArchive::set_needs_to_update_filter_set_for_import(bool value) {
  _internal_set_needs_to_update_filter_set_for_import(value);
  // @@protoc_insertion_point(field_set:TST.HiddenStateExtentArchive.needs_to_update_filter_set_for_import)
}

// repeated .TSP.UUID collapsed_group_uids = 7;
inline int HiddenStateExtentArchive::_internal_collapsed_group_uids_size() const {
  return collapsed_group_uids_.size();
}
inline int HiddenStateExtentArchive::collapsed_group_uids_size() const {
  return _internal_collapsed_group_uids_size();
}
inline ::TSP::UUID* HiddenStateExtentArchive::mutable_collapsed_group_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateExtentArchive.collapsed_group_uids)
  return collapsed_group_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
HiddenStateExtentArchive::mutable_collapsed_group_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.HiddenStateExtentArchive.collapsed_group_uids)
  return &collapsed_group_uids_;
}
inline const ::TSP::UUID& HiddenStateExtentArchive::_internal_collapsed_group_uids(int index) const {
  return collapsed_group_uids_.Get(index);
}
inline const ::TSP::UUID& HiddenStateExtentArchive::collapsed_group_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateExtentArchive.collapsed_group_uids)
  return _internal_collapsed_group_uids(index);
}
inline ::TSP::UUID* HiddenStateExtentArchive::_internal_add_collapsed_group_uids() {
  return collapsed_group_uids_.Add();
}
inline ::TSP::UUID* HiddenStateExtentArchive::add_collapsed_group_uids() {
  // @@protoc_insertion_point(field_add:TST.HiddenStateExtentArchive.collapsed_group_uids)
  return _internal_add_collapsed_group_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
HiddenStateExtentArchive::collapsed_group_uids() const {
  // @@protoc_insertion_point(field_list:TST.HiddenStateExtentArchive.collapsed_group_uids)
  return collapsed_group_uids_;
}

// -------------------------------------------------------------------

// HiddenStatesArchive

// required .TSP.UUID hidden_states_uid = 1;
inline bool HiddenStatesArchive::_internal_has_hidden_states_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hidden_states_uid_ != nullptr);
  return value;
}
inline bool HiddenStatesArchive::has_hidden_states_uid() const {
  return _internal_has_hidden_states_uid();
}
inline const ::TSP::UUID& HiddenStatesArchive::_internal_hidden_states_uid() const {
  const ::TSP::UUID* p = hidden_states_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HiddenStatesArchive::hidden_states_uid() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStatesArchive.hidden_states_uid)
  return _internal_hidden_states_uid();
}
inline void HiddenStatesArchive::unsafe_arena_set_allocated_hidden_states_uid(
    ::TSP::UUID* hidden_states_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_uid_);
  }
  hidden_states_uid_ = hidden_states_uid;
  if (hidden_states_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStatesArchive.hidden_states_uid)
}
inline ::TSP::UUID* HiddenStatesArchive::release_hidden_states_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = hidden_states_uid_;
  hidden_states_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HiddenStatesArchive::unsafe_arena_release_hidden_states_uid() {
  // @@protoc_insertion_point(field_release:TST.HiddenStatesArchive.hidden_states_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = hidden_states_uid_;
  hidden_states_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HiddenStatesArchive::_internal_mutable_hidden_states_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (hidden_states_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    hidden_states_uid_ = p;
  }
  return hidden_states_uid_;
}
inline ::TSP::UUID* HiddenStatesArchive::mutable_hidden_states_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStatesArchive.hidden_states_uid)
  return _internal_mutable_hidden_states_uid();
}
inline void HiddenStatesArchive::set_allocated_hidden_states_uid(::TSP::UUID* hidden_states_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_uid_);
  }
  if (hidden_states_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_states_uid)->GetArena();
    if (message_arena != submessage_arena) {
      hidden_states_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_states_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hidden_states_uid_ = hidden_states_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStatesArchive.hidden_states_uid)
}

// required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
inline bool HiddenStatesArchive::_internal_has_column_hidden_state_extent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || column_hidden_state_extent_ != nullptr);
  return value;
}
inline bool HiddenStatesArchive::has_column_hidden_state_extent() const {
  return _internal_has_column_hidden_state_extent();
}
inline void HiddenStatesArchive::clear_column_hidden_state_extent() {
  if (column_hidden_state_extent_ != nullptr) column_hidden_state_extent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::HiddenStateExtentArchive& HiddenStatesArchive::_internal_column_hidden_state_extent() const {
  const ::TST::HiddenStateExtentArchive* p = column_hidden_state_extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::HiddenStateExtentArchive&>(
      ::TST::_HiddenStateExtentArchive_default_instance_);
}
inline const ::TST::HiddenStateExtentArchive& HiddenStatesArchive::column_hidden_state_extent() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStatesArchive.column_hidden_state_extent)
  return _internal_column_hidden_state_extent();
}
inline void HiddenStatesArchive::unsafe_arena_set_allocated_column_hidden_state_extent(
    ::TST::HiddenStateExtentArchive* column_hidden_state_extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_hidden_state_extent_);
  }
  column_hidden_state_extent_ = column_hidden_state_extent;
  if (column_hidden_state_extent) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStatesArchive.column_hidden_state_extent)
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::release_column_hidden_state_extent() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::HiddenStateExtentArchive* temp = column_hidden_state_extent_;
  column_hidden_state_extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::unsafe_arena_release_column_hidden_state_extent() {
  // @@protoc_insertion_point(field_release:TST.HiddenStatesArchive.column_hidden_state_extent)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::HiddenStateExtentArchive* temp = column_hidden_state_extent_;
  column_hidden_state_extent_ = nullptr;
  return temp;
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::_internal_mutable_column_hidden_state_extent() {
  _has_bits_[0] |= 0x00000002u;
  if (column_hidden_state_extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::HiddenStateExtentArchive>(GetArena());
    column_hidden_state_extent_ = p;
  }
  return column_hidden_state_extent_;
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::mutable_column_hidden_state_extent() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStatesArchive.column_hidden_state_extent)
  return _internal_mutable_column_hidden_state_extent();
}
inline void HiddenStatesArchive::set_allocated_column_hidden_state_extent(::TST::HiddenStateExtentArchive* column_hidden_state_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete column_hidden_state_extent_;
  }
  if (column_hidden_state_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(column_hidden_state_extent);
    if (message_arena != submessage_arena) {
      column_hidden_state_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_hidden_state_extent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  column_hidden_state_extent_ = column_hidden_state_extent;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStatesArchive.column_hidden_state_extent)
}

// required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
inline bool HiddenStatesArchive::_internal_has_row_hidden_state_extent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || row_hidden_state_extent_ != nullptr);
  return value;
}
inline bool HiddenStatesArchive::has_row_hidden_state_extent() const {
  return _internal_has_row_hidden_state_extent();
}
inline void HiddenStatesArchive::clear_row_hidden_state_extent() {
  if (row_hidden_state_extent_ != nullptr) row_hidden_state_extent_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::HiddenStateExtentArchive& HiddenStatesArchive::_internal_row_hidden_state_extent() const {
  const ::TST::HiddenStateExtentArchive* p = row_hidden_state_extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::HiddenStateExtentArchive&>(
      ::TST::_HiddenStateExtentArchive_default_instance_);
}
inline const ::TST::HiddenStateExtentArchive& HiddenStatesArchive::row_hidden_state_extent() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStatesArchive.row_hidden_state_extent)
  return _internal_row_hidden_state_extent();
}
inline void HiddenStatesArchive::unsafe_arena_set_allocated_row_hidden_state_extent(
    ::TST::HiddenStateExtentArchive* row_hidden_state_extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_hidden_state_extent_);
  }
  row_hidden_state_extent_ = row_hidden_state_extent;
  if (row_hidden_state_extent) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStatesArchive.row_hidden_state_extent)
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::release_row_hidden_state_extent() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::HiddenStateExtentArchive* temp = row_hidden_state_extent_;
  row_hidden_state_extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::unsafe_arena_release_row_hidden_state_extent() {
  // @@protoc_insertion_point(field_release:TST.HiddenStatesArchive.row_hidden_state_extent)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::HiddenStateExtentArchive* temp = row_hidden_state_extent_;
  row_hidden_state_extent_ = nullptr;
  return temp;
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::_internal_mutable_row_hidden_state_extent() {
  _has_bits_[0] |= 0x00000004u;
  if (row_hidden_state_extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::HiddenStateExtentArchive>(GetArena());
    row_hidden_state_extent_ = p;
  }
  return row_hidden_state_extent_;
}
inline ::TST::HiddenStateExtentArchive* HiddenStatesArchive::mutable_row_hidden_state_extent() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStatesArchive.row_hidden_state_extent)
  return _internal_mutable_row_hidden_state_extent();
}
inline void HiddenStatesArchive::set_allocated_row_hidden_state_extent(::TST::HiddenStateExtentArchive* row_hidden_state_extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete row_hidden_state_extent_;
  }
  if (row_hidden_state_extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(row_hidden_state_extent);
    if (message_arena != submessage_arena) {
      row_hidden_state_extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_hidden_state_extent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  row_hidden_state_extent_ = row_hidden_state_extent;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStatesArchive.row_hidden_state_extent)
}

// -------------------------------------------------------------------

// HiddenStatesOwnerArchive

// required .TSP.UUID owner_uid = 1;
inline bool HiddenStatesOwnerArchive::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool HiddenStatesOwnerArchive::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& HiddenStatesOwnerArchive::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HiddenStatesOwnerArchive::owner_uid() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStatesOwnerArchive.owner_uid)
  return _internal_owner_uid();
}
inline void HiddenStatesOwnerArchive::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStatesOwnerArchive.owner_uid)
}
inline ::TSP::UUID* HiddenStatesOwnerArchive::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HiddenStatesOwnerArchive::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TST.HiddenStatesOwnerArchive.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HiddenStatesOwnerArchive::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* HiddenStatesOwnerArchive::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStatesOwnerArchive.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void HiddenStatesOwnerArchive::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStatesOwnerArchive.owner_uid)
}

// repeated .TST.HiddenStatesArchive hidden_states = 2;
inline int HiddenStatesOwnerArchive::_internal_hidden_states_size() const {
  return hidden_states_.size();
}
inline int HiddenStatesOwnerArchive::hidden_states_size() const {
  return _internal_hidden_states_size();
}
inline void HiddenStatesOwnerArchive::clear_hidden_states() {
  hidden_states_.Clear();
}
inline ::TST::HiddenStatesArchive* HiddenStatesOwnerArchive::mutable_hidden_states(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStatesOwnerArchive.hidden_states)
  return hidden_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStatesArchive >*
HiddenStatesOwnerArchive::mutable_hidden_states() {
  // @@protoc_insertion_point(field_mutable_list:TST.HiddenStatesOwnerArchive.hidden_states)
  return &hidden_states_;
}
inline const ::TST::HiddenStatesArchive& HiddenStatesOwnerArchive::_internal_hidden_states(int index) const {
  return hidden_states_.Get(index);
}
inline const ::TST::HiddenStatesArchive& HiddenStatesOwnerArchive::hidden_states(int index) const {
  // @@protoc_insertion_point(field_get:TST.HiddenStatesOwnerArchive.hidden_states)
  return _internal_hidden_states(index);
}
inline ::TST::HiddenStatesArchive* HiddenStatesOwnerArchive::_internal_add_hidden_states() {
  return hidden_states_.Add();
}
inline ::TST::HiddenStatesArchive* HiddenStatesOwnerArchive::add_hidden_states() {
  // @@protoc_insertion_point(field_add:TST.HiddenStatesOwnerArchive.hidden_states)
  return _internal_add_hidden_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HiddenStatesArchive >&
HiddenStatesOwnerArchive::hidden_states() const {
  // @@protoc_insertion_point(field_list:TST.HiddenStatesOwnerArchive.hidden_states)
  return hidden_states_;
}

// -------------------------------------------------------------------

// ExpandCollapseStateArchive

// repeated .TSP.UUID uids_collapsed = 1;
inline int ExpandCollapseStateArchive::_internal_uids_collapsed_size() const {
  return uids_collapsed_.size();
}
inline int ExpandCollapseStateArchive::uids_collapsed_size() const {
  return _internal_uids_collapsed_size();
}
inline ::TSP::UUID* ExpandCollapseStateArchive::mutable_uids_collapsed(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ExpandCollapseStateArchive.uids_collapsed)
  return uids_collapsed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ExpandCollapseStateArchive::mutable_uids_collapsed() {
  // @@protoc_insertion_point(field_mutable_list:TST.ExpandCollapseStateArchive.uids_collapsed)
  return &uids_collapsed_;
}
inline const ::TSP::UUID& ExpandCollapseStateArchive::_internal_uids_collapsed(int index) const {
  return uids_collapsed_.Get(index);
}
inline const ::TSP::UUID& ExpandCollapseStateArchive::uids_collapsed(int index) const {
  // @@protoc_insertion_point(field_get:TST.ExpandCollapseStateArchive.uids_collapsed)
  return _internal_uids_collapsed(index);
}
inline ::TSP::UUID* ExpandCollapseStateArchive::_internal_add_uids_collapsed() {
  return uids_collapsed_.Add();
}
inline ::TSP::UUID* ExpandCollapseStateArchive::add_uids_collapsed() {
  // @@protoc_insertion_point(field_add:TST.ExpandCollapseStateArchive.uids_collapsed)
  return _internal_add_uids_collapsed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ExpandCollapseStateArchive::uids_collapsed() const {
  // @@protoc_insertion_point(field_list:TST.ExpandCollapseStateArchive.uids_collapsed)
  return uids_collapsed_;
}

// repeated .TSP.UUID uids_expanded = 2;
inline int ExpandCollapseStateArchive::_internal_uids_expanded_size() const {
  return uids_expanded_.size();
}
inline int ExpandCollapseStateArchive::uids_expanded_size() const {
  return _internal_uids_expanded_size();
}
inline ::TSP::UUID* ExpandCollapseStateArchive::mutable_uids_expanded(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ExpandCollapseStateArchive.uids_expanded)
  return uids_expanded_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ExpandCollapseStateArchive::mutable_uids_expanded() {
  // @@protoc_insertion_point(field_mutable_list:TST.ExpandCollapseStateArchive.uids_expanded)
  return &uids_expanded_;
}
inline const ::TSP::UUID& ExpandCollapseStateArchive::_internal_uids_expanded(int index) const {
  return uids_expanded_.Get(index);
}
inline const ::TSP::UUID& ExpandCollapseStateArchive::uids_expanded(int index) const {
  // @@protoc_insertion_point(field_get:TST.ExpandCollapseStateArchive.uids_expanded)
  return _internal_uids_expanded(index);
}
inline ::TSP::UUID* ExpandCollapseStateArchive::_internal_add_uids_expanded() {
  return uids_expanded_.Add();
}
inline ::TSP::UUID* ExpandCollapseStateArchive::add_uids_expanded() {
  // @@protoc_insertion_point(field_add:TST.ExpandCollapseStateArchive.uids_expanded)
  return _internal_add_uids_expanded();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ExpandCollapseStateArchive::uids_expanded() const {
  // @@protoc_insertion_point(field_list:TST.ExpandCollapseStateArchive.uids_expanded)
  return uids_expanded_;
}

// -------------------------------------------------------------------

// TokenAttachmentArchive

// required .TSWP.UIGraphicalAttachment super = 1;
inline bool TokenAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool TokenAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::UIGraphicalAttachment& TokenAttachmentArchive::_internal_super() const {
  const ::TSWP::UIGraphicalAttachment* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UIGraphicalAttachment&>(
      ::TSWP::_UIGraphicalAttachment_default_instance_);
}
inline const ::TSWP::UIGraphicalAttachment& TokenAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.TokenAttachmentArchive.super)
  return _internal_super();
}
inline void TokenAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::UIGraphicalAttachment* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TokenAttachmentArchive.super)
}
inline ::TSWP::UIGraphicalAttachment* TokenAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UIGraphicalAttachment* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UIGraphicalAttachment* TokenAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.TokenAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UIGraphicalAttachment* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::UIGraphicalAttachment* TokenAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UIGraphicalAttachment>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::UIGraphicalAttachment* TokenAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.TokenAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void TokenAttachmentArchive::set_allocated_super(::TSWP::UIGraphicalAttachment* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.TokenAttachmentArchive.super)
}

// optional .TSP.Reference expressionNode = 2;
inline bool TokenAttachmentArchive::_internal_has_expressionnode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || expressionnode_ != nullptr);
  return value;
}
inline bool TokenAttachmentArchive::has_expressionnode() const {
  return _internal_has_expressionnode();
}
inline const ::TSP::Reference& TokenAttachmentArchive::_internal_expressionnode() const {
  const ::TSP::Reference* p = expressionnode_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TokenAttachmentArchive::expressionnode() const {
  // @@protoc_insertion_point(field_get:TST.TokenAttachmentArchive.expressionNode)
  return _internal_expressionnode();
}
inline void TokenAttachmentArchive::unsafe_arena_set_allocated_expressionnode(
    ::TSP::Reference* expressionnode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expressionnode_);
  }
  expressionnode_ = expressionnode;
  if (expressionnode) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.TokenAttachmentArchive.expressionNode)
}
inline ::TSP::Reference* TokenAttachmentArchive::release_expressionnode() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = expressionnode_;
  expressionnode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TokenAttachmentArchive::unsafe_arena_release_expressionnode() {
  // @@protoc_insertion_point(field_release:TST.TokenAttachmentArchive.expressionNode)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = expressionnode_;
  expressionnode_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TokenAttachmentArchive::_internal_mutable_expressionnode() {
  _has_bits_[0] |= 0x00000002u;
  if (expressionnode_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    expressionnode_ = p;
  }
  return expressionnode_;
}
inline ::TSP::Reference* TokenAttachmentArchive::mutable_expressionnode() {
  // @@protoc_insertion_point(field_mutable:TST.TokenAttachmentArchive.expressionNode)
  return _internal_mutable_expressionnode();
}
inline void TokenAttachmentArchive::set_allocated_expressionnode(::TSP::Reference* expressionnode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expressionnode_);
  }
  if (expressionnode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expressionnode)->GetArena();
    if (message_arena != submessage_arena) {
      expressionnode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expressionnode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  expressionnode_ = expressionnode;
  // @@protoc_insertion_point(field_set_allocated:TST.TokenAttachmentArchive.expressionNode)
}

// -------------------------------------------------------------------

// FormulaArchive

// optional .TSP.Reference expressionTree = 1;
inline bool FormulaArchive::_internal_has_expressiontree() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || expressiontree_ != nullptr);
  return value;
}
inline bool FormulaArchive::has_expressiontree() const {
  return _internal_has_expressiontree();
}
inline const ::TSP::Reference& FormulaArchive::_internal_expressiontree() const {
  const ::TSP::Reference* p = expressiontree_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FormulaArchive::expressiontree() const {
  // @@protoc_insertion_point(field_get:TST.FormulaArchive.expressionTree)
  return _internal_expressiontree();
}
inline void FormulaArchive::unsafe_arena_set_allocated_expressiontree(
    ::TSP::Reference* expressiontree) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expressiontree_);
  }
  expressiontree_ = expressiontree;
  if (expressiontree) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaArchive.expressionTree)
}
inline ::TSP::Reference* FormulaArchive::release_expressiontree() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = expressiontree_;
  expressiontree_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FormulaArchive::unsafe_arena_release_expressiontree() {
  // @@protoc_insertion_point(field_release:TST.FormulaArchive.expressionTree)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = expressiontree_;
  expressiontree_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FormulaArchive::_internal_mutable_expressiontree() {
  _has_bits_[0] |= 0x00000001u;
  if (expressiontree_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    expressiontree_ = p;
  }
  return expressiontree_;
}
inline ::TSP::Reference* FormulaArchive::mutable_expressiontree() {
  // @@protoc_insertion_point(field_mutable:TST.FormulaArchive.expressionTree)
  return _internal_mutable_expressiontree();
}
inline void FormulaArchive::set_allocated_expressiontree(::TSP::Reference* expressiontree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expressiontree_);
  }
  if (expressiontree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expressiontree)->GetArena();
    if (message_arena != submessage_arena) {
      expressiontree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expressiontree, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  expressiontree_ = expressiontree;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaArchive.expressionTree)
}

// -------------------------------------------------------------------

// ExpressionNodeArchive

// repeated .TSP.Reference children = 1;
inline int ExpressionNodeArchive::_internal_children_size() const {
  return children_.size();
}
inline int ExpressionNodeArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* ExpressionNodeArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ExpressionNodeArchive.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ExpressionNodeArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TST.ExpressionNodeArchive.children)
  return &children_;
}
inline const ::TSP::Reference& ExpressionNodeArchive::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::TSP::Reference& ExpressionNodeArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:TST.ExpressionNodeArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* ExpressionNodeArchive::_internal_add_children() {
  return children_.Add();
}
inline ::TSP::Reference* ExpressionNodeArchive::add_children() {
  // @@protoc_insertion_point(field_add:TST.ExpressionNodeArchive.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ExpressionNodeArchive::children() const {
  // @@protoc_insertion_point(field_list:TST.ExpressionNodeArchive.children)
  return children_;
}

// optional uint64 first_index = 2 [default = 0];
inline bool ExpressionNodeArchive::_internal_has_first_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExpressionNodeArchive::has_first_index() const {
  return _internal_has_first_index();
}
inline void ExpressionNodeArchive::clear_first_index() {
  first_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExpressionNodeArchive::_internal_first_index() const {
  return first_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExpressionNodeArchive::first_index() const {
  // @@protoc_insertion_point(field_get:TST.ExpressionNodeArchive.first_index)
  return _internal_first_index();
}
inline void ExpressionNodeArchive::_internal_set_first_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  first_index_ = value;
}
inline void ExpressionNodeArchive::set_first_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_index(value);
  // @@protoc_insertion_point(field_set:TST.ExpressionNodeArchive.first_index)
}

// optional uint64 last_index = 3 [default = 0];
inline bool ExpressionNodeArchive::_internal_has_last_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExpressionNodeArchive::has_last_index() const {
  return _internal_has_last_index();
}
inline void ExpressionNodeArchive::clear_last_index() {
  last_index_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExpressionNodeArchive::_internal_last_index() const {
  return last_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExpressionNodeArchive::last_index() const {
  // @@protoc_insertion_point(field_get:TST.ExpressionNodeArchive.last_index)
  return _internal_last_index();
}
inline void ExpressionNodeArchive::_internal_set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_index_ = value;
}
inline void ExpressionNodeArchive::set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_index(value);
  // @@protoc_insertion_point(field_set:TST.ExpressionNodeArchive.last_index)
}

// -------------------------------------------------------------------

// BooleanNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool BooleanNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool BooleanNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void BooleanNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& BooleanNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& BooleanNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.BooleanNodeArchive.super)
  return _internal_super();
}
inline void BooleanNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.BooleanNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* BooleanNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* BooleanNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.BooleanNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* BooleanNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* BooleanNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.BooleanNodeArchive.super)
  return _internal_mutable_super();
}
inline void BooleanNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.BooleanNodeArchive.super)
}

// required bool value = 2;
inline bool BooleanNodeArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BooleanNodeArchive::has_value() const {
  return _internal_has_value();
}
inline void BooleanNodeArchive::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BooleanNodeArchive::_internal_value() const {
  return value_;
}
inline bool BooleanNodeArchive::value() const {
  // @@protoc_insertion_point(field_get:TST.BooleanNodeArchive.value)
  return _internal_value();
}
inline void BooleanNodeArchive::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void BooleanNodeArchive::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TST.BooleanNodeArchive.value)
}

// -------------------------------------------------------------------

// NumberNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool NumberNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool NumberNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void NumberNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& NumberNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& NumberNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.NumberNodeArchive.super)
  return _internal_super();
}
inline void NumberNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.NumberNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* NumberNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* NumberNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.NumberNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* NumberNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* NumberNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.NumberNodeArchive.super)
  return _internal_mutable_super();
}
inline void NumberNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.NumberNodeArchive.super)
}

// optional double number = 2;
inline bool NumberNodeArchive::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NumberNodeArchive::has_number() const {
  return _internal_has_number();
}
inline void NumberNodeArchive::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double NumberNodeArchive::_internal_number() const {
  return number_;
}
inline double NumberNodeArchive::number() const {
  // @@protoc_insertion_point(field_get:TST.NumberNodeArchive.number)
  return _internal_number();
}
inline void NumberNodeArchive::_internal_set_number(double value) {
  _has_bits_[0] |= 0x00000002u;
  number_ = value;
}
inline void NumberNodeArchive::set_number(double value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:TST.NumberNodeArchive.number)
}

// optional uint64 decimal_low = 3;
inline bool NumberNodeArchive::_internal_has_decimal_low() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NumberNodeArchive::has_decimal_low() const {
  return _internal_has_decimal_low();
}
inline void NumberNodeArchive::clear_decimal_low() {
  decimal_low_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberNodeArchive::_internal_decimal_low() const {
  return decimal_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberNodeArchive::decimal_low() const {
  // @@protoc_insertion_point(field_get:TST.NumberNodeArchive.decimal_low)
  return _internal_decimal_low();
}
inline void NumberNodeArchive::_internal_set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  decimal_low_ = value;
}
inline void NumberNodeArchive::set_decimal_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_low(value);
  // @@protoc_insertion_point(field_set:TST.NumberNodeArchive.decimal_low)
}

// optional uint64 decimal_high = 4;
inline bool NumberNodeArchive::_internal_has_decimal_high() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NumberNodeArchive::has_decimal_high() const {
  return _internal_has_decimal_high();
}
inline void NumberNodeArchive::clear_decimal_high() {
  decimal_high_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberNodeArchive::_internal_decimal_high() const {
  return decimal_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberNodeArchive::decimal_high() const {
  // @@protoc_insertion_point(field_get:TST.NumberNodeArchive.decimal_high)
  return _internal_decimal_high();
}
inline void NumberNodeArchive::_internal_set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  decimal_high_ = value;
}
inline void NumberNodeArchive::set_decimal_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_decimal_high(value);
  // @@protoc_insertion_point(field_set:TST.NumberNodeArchive.decimal_high)
}

// -------------------------------------------------------------------

// StringNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool StringNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StringNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void StringNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ExpressionNodeArchive& StringNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& StringNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.StringNodeArchive.super)
  return _internal_super();
}
inline void StringNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.StringNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* StringNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* StringNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.StringNodeArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* StringNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* StringNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.StringNodeArchive.super)
  return _internal_mutable_super();
}
inline void StringNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.StringNodeArchive.super)
}

// required string value = 2;
inline bool StringNodeArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringNodeArchive::has_value() const {
  return _internal_has_value();
}
inline void StringNodeArchive::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringNodeArchive::value() const {
  // @@protoc_insertion_point(field_get:TST.StringNodeArchive.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void StringNodeArchive::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.StringNodeArchive.value)
}
inline std::string* StringNodeArchive::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TST.StringNodeArchive.value)
  return _internal_mutable_value();
}
inline const std::string& StringNodeArchive::_internal_value() const {
  return value_.Get();
}
inline void StringNodeArchive::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* StringNodeArchive::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringNodeArchive::release_value() {
  // @@protoc_insertion_point(field_release:TST.StringNodeArchive.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringNodeArchive::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.StringNodeArchive.value)
}

// -------------------------------------------------------------------

// IdentifierNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool IdentifierNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool IdentifierNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void IdentifierNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ExpressionNodeArchive& IdentifierNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& IdentifierNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.IdentifierNodeArchive.super)
  return _internal_super();
}
inline void IdentifierNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.IdentifierNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* IdentifierNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* IdentifierNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.IdentifierNodeArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* IdentifierNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* IdentifierNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.IdentifierNodeArchive.super)
  return _internal_mutable_super();
}
inline void IdentifierNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.IdentifierNodeArchive.super)
}

// optional string identifier = 2;
inline bool IdentifierNodeArchive::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IdentifierNodeArchive::has_identifier() const {
  return _internal_has_identifier();
}
inline void IdentifierNodeArchive::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IdentifierNodeArchive::identifier() const {
  // @@protoc_insertion_point(field_get:TST.IdentifierNodeArchive.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void IdentifierNodeArchive::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.IdentifierNodeArchive.identifier)
}
inline std::string* IdentifierNodeArchive::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:TST.IdentifierNodeArchive.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& IdentifierNodeArchive::_internal_identifier() const {
  return identifier_.Get();
}
inline void IdentifierNodeArchive::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* IdentifierNodeArchive::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IdentifierNodeArchive::release_identifier() {
  // @@protoc_insertion_point(field_release:TST.IdentifierNodeArchive.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IdentifierNodeArchive::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.IdentifierNodeArchive.identifier)
}

// optional uint32 symbol = 3;
inline bool IdentifierNodeArchive::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IdentifierNodeArchive::has_symbol() const {
  return _internal_has_symbol();
}
inline void IdentifierNodeArchive::clear_symbol() {
  symbol_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IdentifierNodeArchive::_internal_symbol() const {
  return symbol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IdentifierNodeArchive::symbol() const {
  // @@protoc_insertion_point(field_get:TST.IdentifierNodeArchive.symbol)
  return _internal_symbol();
}
inline void IdentifierNodeArchive::_internal_set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  symbol_ = value;
}
inline void IdentifierNodeArchive::set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TST.IdentifierNodeArchive.symbol)
}

// -------------------------------------------------------------------

// ArrayNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool ArrayNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ArrayNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void ArrayNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& ArrayNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& ArrayNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.ArrayNodeArchive.super)
  return _internal_super();
}
inline void ArrayNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ArrayNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* ArrayNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* ArrayNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.ArrayNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* ArrayNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* ArrayNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.ArrayNodeArchive.super)
  return _internal_mutable_super();
}
inline void ArrayNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.ArrayNodeArchive.super)
}

// optional uint32 columns = 2;
inline bool ArrayNodeArchive::_internal_has_columns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArrayNodeArchive::has_columns() const {
  return _internal_has_columns();
}
inline void ArrayNodeArchive::clear_columns() {
  columns_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArrayNodeArchive::_internal_columns() const {
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArrayNodeArchive::columns() const {
  // @@protoc_insertion_point(field_get:TST.ArrayNodeArchive.columns)
  return _internal_columns();
}
inline void ArrayNodeArchive::_internal_set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  columns_ = value;
}
inline void ArrayNodeArchive::set_columns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:TST.ArrayNodeArchive.columns)
}

// optional uint32 rows = 3;
inline bool ArrayNodeArchive::_internal_has_rows() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArrayNodeArchive::has_rows() const {
  return _internal_has_rows();
}
inline void ArrayNodeArchive::clear_rows() {
  rows_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArrayNodeArchive::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArrayNodeArchive::rows() const {
  // @@protoc_insertion_point(field_get:TST.ArrayNodeArchive.rows)
  return _internal_rows();
}
inline void ArrayNodeArchive::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rows_ = value;
}
inline void ArrayNodeArchive::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:TST.ArrayNodeArchive.rows)
}

// -------------------------------------------------------------------

// ListNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool ListNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ListNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void ListNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& ListNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& ListNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.ListNodeArchive.super)
  return _internal_super();
}
inline void ListNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ListNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* ListNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* ListNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.ListNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* ListNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* ListNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.ListNodeArchive.super)
  return _internal_mutable_super();
}
inline void ListNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.ListNodeArchive.super)
}

// -------------------------------------------------------------------

// OperatorNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool OperatorNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool OperatorNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void OperatorNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& OperatorNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& OperatorNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.OperatorNodeArchive.super)
  return _internal_super();
}
inline void OperatorNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.OperatorNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* OperatorNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* OperatorNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.OperatorNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* OperatorNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* OperatorNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.OperatorNodeArchive.super)
  return _internal_mutable_super();
}
inline void OperatorNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.OperatorNodeArchive.super)
}

// required uint32 operatorChar = 2;
inline bool OperatorNodeArchive::_internal_has_operatorchar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperatorNodeArchive::has_operatorchar() const {
  return _internal_has_operatorchar();
}
inline void OperatorNodeArchive::clear_operatorchar() {
  operatorchar_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperatorNodeArchive::_internal_operatorchar() const {
  return operatorchar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperatorNodeArchive::operatorchar() const {
  // @@protoc_insertion_point(field_get:TST.OperatorNodeArchive.operatorChar)
  return _internal_operatorchar();
}
inline void OperatorNodeArchive::_internal_set_operatorchar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  operatorchar_ = value;
}
inline void OperatorNodeArchive::set_operatorchar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operatorchar(value);
  // @@protoc_insertion_point(field_set:TST.OperatorNodeArchive.operatorChar)
}

// -------------------------------------------------------------------

// PostfixOperatorNodeArchive

// required .TST.OperatorNodeArchive super = 1;
inline bool PostfixOperatorNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PostfixOperatorNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void PostfixOperatorNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::OperatorNodeArchive& PostfixOperatorNodeArchive::_internal_super() const {
  const ::TST::OperatorNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::OperatorNodeArchive&>(
      ::TST::_OperatorNodeArchive_default_instance_);
}
inline const ::TST::OperatorNodeArchive& PostfixOperatorNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.PostfixOperatorNodeArchive.super)
  return _internal_super();
}
inline void PostfixOperatorNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::OperatorNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PostfixOperatorNodeArchive.super)
}
inline ::TST::OperatorNodeArchive* PostfixOperatorNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::OperatorNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::OperatorNodeArchive* PostfixOperatorNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.PostfixOperatorNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::OperatorNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::OperatorNodeArchive* PostfixOperatorNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::OperatorNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::OperatorNodeArchive* PostfixOperatorNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.PostfixOperatorNodeArchive.super)
  return _internal_mutable_super();
}
inline void PostfixOperatorNodeArchive::set_allocated_super(::TST::OperatorNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.PostfixOperatorNodeArchive.super)
}

// -------------------------------------------------------------------

// PrefixOperatorNodeArchive

// required .TST.OperatorNodeArchive super = 1;
inline bool PrefixOperatorNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PrefixOperatorNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void PrefixOperatorNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::OperatorNodeArchive& PrefixOperatorNodeArchive::_internal_super() const {
  const ::TST::OperatorNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::OperatorNodeArchive&>(
      ::TST::_OperatorNodeArchive_default_instance_);
}
inline const ::TST::OperatorNodeArchive& PrefixOperatorNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.PrefixOperatorNodeArchive.super)
  return _internal_super();
}
inline void PrefixOperatorNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::OperatorNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PrefixOperatorNodeArchive.super)
}
inline ::TST::OperatorNodeArchive* PrefixOperatorNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::OperatorNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::OperatorNodeArchive* PrefixOperatorNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.PrefixOperatorNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::OperatorNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::OperatorNodeArchive* PrefixOperatorNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::OperatorNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::OperatorNodeArchive* PrefixOperatorNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.PrefixOperatorNodeArchive.super)
  return _internal_mutable_super();
}
inline void PrefixOperatorNodeArchive::set_allocated_super(::TST::OperatorNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.PrefixOperatorNodeArchive.super)
}

// -------------------------------------------------------------------

// FunctionNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool FunctionNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FunctionNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void FunctionNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ExpressionNodeArchive& FunctionNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& FunctionNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FunctionNodeArchive.super)
  return _internal_super();
}
inline void FunctionNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FunctionNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* FunctionNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* FunctionNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FunctionNodeArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* FunctionNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* FunctionNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.FunctionNodeArchive.super)
  return _internal_mutable_super();
}
inline void FunctionNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FunctionNodeArchive.super)
}

// required uint32 functionIndex = 2;
inline bool FunctionNodeArchive::_internal_has_functionindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionNodeArchive::has_functionindex() const {
  return _internal_has_functionindex();
}
inline void FunctionNodeArchive::clear_functionindex() {
  functionindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FunctionNodeArchive::_internal_functionindex() const {
  return functionindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FunctionNodeArchive::functionindex() const {
  // @@protoc_insertion_point(field_get:TST.FunctionNodeArchive.functionIndex)
  return _internal_functionindex();
}
inline void FunctionNodeArchive::_internal_set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  functionindex_ = value;
}
inline void FunctionNodeArchive::set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_functionindex(value);
  // @@protoc_insertion_point(field_set:TST.FunctionNodeArchive.functionIndex)
}

// optional string invalidFunctionName = 3;
inline bool FunctionNodeArchive::_internal_has_invalidfunctionname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionNodeArchive::has_invalidfunctionname() const {
  return _internal_has_invalidfunctionname();
}
inline void FunctionNodeArchive::clear_invalidfunctionname() {
  invalidfunctionname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionNodeArchive::invalidfunctionname() const {
  // @@protoc_insertion_point(field_get:TST.FunctionNodeArchive.invalidFunctionName)
  return _internal_invalidfunctionname();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FunctionNodeArchive::set_invalidfunctionname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 invalidfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.FunctionNodeArchive.invalidFunctionName)
}
inline std::string* FunctionNodeArchive::mutable_invalidfunctionname() {
  // @@protoc_insertion_point(field_mutable:TST.FunctionNodeArchive.invalidFunctionName)
  return _internal_mutable_invalidfunctionname();
}
inline const std::string& FunctionNodeArchive::_internal_invalidfunctionname() const {
  return invalidfunctionname_.Get();
}
inline void FunctionNodeArchive::_internal_set_invalidfunctionname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invalidfunctionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FunctionNodeArchive::_internal_mutable_invalidfunctionname() {
  _has_bits_[0] |= 0x00000001u;
  return invalidfunctionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FunctionNodeArchive::release_invalidfunctionname() {
  // @@protoc_insertion_point(field_release:TST.FunctionNodeArchive.invalidFunctionName)
  if (!_internal_has_invalidfunctionname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return invalidfunctionname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FunctionNodeArchive::set_allocated_invalidfunctionname(std::string* invalidfunctionname) {
  if (invalidfunctionname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invalidfunctionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invalidfunctionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.FunctionNodeArchive.invalidFunctionName)
}

// -------------------------------------------------------------------

// FunctionEndNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool FunctionEndNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FunctionEndNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void FunctionEndNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& FunctionEndNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& FunctionEndNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FunctionEndNodeArchive.super)
  return _internal_super();
}
inline void FunctionEndNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FunctionEndNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* FunctionEndNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* FunctionEndNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FunctionEndNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* FunctionEndNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* FunctionEndNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.FunctionEndNodeArchive.super)
  return _internal_mutable_super();
}
inline void FunctionEndNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FunctionEndNodeArchive.super)
}

// -------------------------------------------------------------------

// DateNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool DateNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DateNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void DateNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::ExpressionNodeArchive& DateNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& DateNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.DateNodeArchive.super)
  return _internal_super();
}
inline void DateNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DateNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* DateNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* DateNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.DateNodeArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* DateNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* DateNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.DateNodeArchive.super)
  return _internal_mutable_super();
}
inline void DateNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.DateNodeArchive.super)
}

// required string value = 2;
inline bool DateNodeArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DateNodeArchive::has_value() const {
  return _internal_has_value();
}
inline void DateNodeArchive::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DateNodeArchive::value() const {
  // @@protoc_insertion_point(field_get:TST.DateNodeArchive.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DateNodeArchive::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.DateNodeArchive.value)
}
inline std::string* DateNodeArchive::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TST.DateNodeArchive.value)
  return _internal_mutable_value();
}
inline const std::string& DateNodeArchive::_internal_value() const {
  return value_.Get();
}
inline void DateNodeArchive::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DateNodeArchive::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateNodeArchive::release_value() {
  // @@protoc_insertion_point(field_release:TST.DateNodeArchive.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateNodeArchive::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.DateNodeArchive.value)
}

// optional string format = 3;
inline bool DateNodeArchive::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DateNodeArchive::has_format() const {
  return _internal_has_format();
}
inline void DateNodeArchive::clear_format() {
  format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DateNodeArchive::format() const {
  // @@protoc_insertion_point(field_get:TST.DateNodeArchive.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DateNodeArchive::set_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.DateNodeArchive.format)
}
inline std::string* DateNodeArchive::mutable_format() {
  // @@protoc_insertion_point(field_mutable:TST.DateNodeArchive.format)
  return _internal_mutable_format();
}
inline const std::string& DateNodeArchive::_internal_format() const {
  return format_.Get();
}
inline void DateNodeArchive::_internal_set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DateNodeArchive::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000002u;
  return format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DateNodeArchive::release_format() {
  // @@protoc_insertion_point(field_release:TST.DateNodeArchive.format)
  if (!_internal_has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateNodeArchive::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.DateNodeArchive.format)
}

// -------------------------------------------------------------------

// ReferenceNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool ReferenceNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void ReferenceNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ExpressionNodeArchive& ReferenceNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& ReferenceNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.super)
  return _internal_super();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* ReferenceNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* ReferenceNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* ReferenceNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* ReferenceNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.super)
  return _internal_mutable_super();
}
inline void ReferenceNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.super)
}

// optional .TSCE.RangeReferenceArchive rangeReference = 2;
inline bool ReferenceNodeArchive::_internal_has_rangereference() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rangereference_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_rangereference() const {
  return _internal_has_rangereference();
}
inline const ::TSCE::RangeReferenceArchive& ReferenceNodeArchive::_internal_rangereference() const {
  const ::TSCE::RangeReferenceArchive* p = rangereference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RangeReferenceArchive&>(
      ::TSCE::_RangeReferenceArchive_default_instance_);
}
inline const ::TSCE::RangeReferenceArchive& ReferenceNodeArchive::rangereference() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.rangeReference)
  return _internal_rangereference();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_rangereference(
    ::TSCE::RangeReferenceArchive* rangereference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rangereference_);
  }
  rangereference_ = rangereference;
  if (rangereference) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.rangeReference)
}
inline ::TSCE::RangeReferenceArchive* ReferenceNodeArchive::release_rangereference() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeReferenceArchive* temp = rangereference_;
  rangereference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ReferenceNodeArchive::unsafe_arena_release_rangereference() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.rangeReference)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::RangeReferenceArchive* temp = rangereference_;
  rangereference_ = nullptr;
  return temp;
}
inline ::TSCE::RangeReferenceArchive* ReferenceNodeArchive::_internal_mutable_rangereference() {
  _has_bits_[0] |= 0x00000004u;
  if (rangereference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RangeReferenceArchive>(GetArena());
    rangereference_ = p;
  }
  return rangereference_;
}
inline ::TSCE::RangeReferenceArchive* ReferenceNodeArchive::mutable_rangereference() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.rangeReference)
  return _internal_mutable_rangereference();
}
inline void ReferenceNodeArchive::set_allocated_rangereference(::TSCE::RangeReferenceArchive* rangereference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rangereference_);
  }
  if (rangereference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rangereference)->GetArena();
    if (message_arena != submessage_arena) {
      rangereference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rangereference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rangereference_ = rangereference;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.rangeReference)
}

// required uint32 preserve_flags = 3;
inline bool ReferenceNodeArchive::_internal_has_preserve_flags() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReferenceNodeArchive::has_preserve_flags() const {
  return _internal_has_preserve_flags();
}
inline void ReferenceNodeArchive::clear_preserve_flags() {
  preserve_flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReferenceNodeArchive::_internal_preserve_flags() const {
  return preserve_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReferenceNodeArchive::preserve_flags() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.preserve_flags)
  return _internal_preserve_flags();
}
inline void ReferenceNodeArchive::_internal_set_preserve_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  preserve_flags_ = value;
}
inline void ReferenceNodeArchive::set_preserve_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preserve_flags(value);
  // @@protoc_insertion_point(field_set:TST.ReferenceNodeArchive.preserve_flags)
}

// optional string hostTableID = 4;
inline bool ReferenceNodeArchive::_internal_has_hosttableid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferenceNodeArchive::has_hosttableid() const {
  return _internal_has_hosttableid();
}
inline void ReferenceNodeArchive::clear_hosttableid() {
  hosttableid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReferenceNodeArchive::hosttableid() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.hostTableID)
  return _internal_hosttableid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ReferenceNodeArchive::set_hosttableid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 hosttableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.ReferenceNodeArchive.hostTableID)
}
inline std::string* ReferenceNodeArchive::mutable_hosttableid() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.hostTableID)
  return _internal_mutable_hosttableid();
}
inline const std::string& ReferenceNodeArchive::_internal_hosttableid() const {
  return hosttableid_.Get();
}
inline void ReferenceNodeArchive::_internal_set_hosttableid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hosttableid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ReferenceNodeArchive::_internal_mutable_hosttableid() {
  _has_bits_[0] |= 0x00000001u;
  return hosttableid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReferenceNodeArchive::release_hosttableid() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.hostTableID)
  if (!_internal_has_hosttableid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hosttableid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReferenceNodeArchive::set_allocated_hosttableid(std::string* hosttableid) {
  if (hosttableid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hosttableid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosttableid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.hostTableID)
}

// optional .TSCE.CellReferenceArchive host_cell_ref = 10;
inline bool ReferenceNodeArchive::_internal_has_host_cell_ref() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || host_cell_ref_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_host_cell_ref() const {
  return _internal_has_host_cell_ref();
}
inline const ::TSCE::CellReferenceArchive& ReferenceNodeArchive::_internal_host_cell_ref() const {
  const ::TSCE::CellReferenceArchive* p = host_cell_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellReferenceArchive&>(
      ::TSCE::_CellReferenceArchive_default_instance_);
}
inline const ::TSCE::CellReferenceArchive& ReferenceNodeArchive::host_cell_ref() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.host_cell_ref)
  return _internal_host_cell_ref();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_host_cell_ref(
    ::TSCE::CellReferenceArchive* host_cell_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_cell_ref_);
  }
  host_cell_ref_ = host_cell_ref;
  if (host_cell_ref) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.host_cell_ref)
}
inline ::TSCE::CellReferenceArchive* ReferenceNodeArchive::release_host_cell_ref() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CellReferenceArchive* temp = host_cell_ref_;
  host_cell_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellReferenceArchive* ReferenceNodeArchive::unsafe_arena_release_host_cell_ref() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.host_cell_ref)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CellReferenceArchive* temp = host_cell_ref_;
  host_cell_ref_ = nullptr;
  return temp;
}
inline ::TSCE::CellReferenceArchive* ReferenceNodeArchive::_internal_mutable_host_cell_ref() {
  _has_bits_[0] |= 0x00000100u;
  if (host_cell_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellReferenceArchive>(GetArena());
    host_cell_ref_ = p;
  }
  return host_cell_ref_;
}
inline ::TSCE::CellReferenceArchive* ReferenceNodeArchive::mutable_host_cell_ref() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.host_cell_ref)
  return _internal_mutable_host_cell_ref();
}
inline void ReferenceNodeArchive::set_allocated_host_cell_ref(::TSCE::CellReferenceArchive* host_cell_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_cell_ref_);
  }
  if (host_cell_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_cell_ref)->GetArena();
    if (message_arena != submessage_arena) {
      host_cell_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_cell_ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  host_cell_ref_ = host_cell_ref;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.host_cell_ref)
}

// optional .TSP.UUID table_uid = 5;
inline bool ReferenceNodeArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& ReferenceNodeArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ReferenceNodeArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.table_uid)
  return _internal_table_uid();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.table_uid)
}
inline ::TSP::UUID* ReferenceNodeArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ReferenceNodeArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.table_uid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ReferenceNodeArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000008u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* ReferenceNodeArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void ReferenceNodeArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.table_uid)
}

// optional .TSP.UUIDCoordArchive range_top_left = 6;
inline bool ReferenceNodeArchive::_internal_has_range_top_left() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || range_top_left_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_range_top_left() const {
  return _internal_has_range_top_left();
}
inline const ::TSP::UUIDCoordArchive& ReferenceNodeArchive::_internal_range_top_left() const {
  const ::TSP::UUIDCoordArchive* p = range_top_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& ReferenceNodeArchive::range_top_left() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.range_top_left)
  return _internal_range_top_left();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_range_top_left(
    ::TSP::UUIDCoordArchive* range_top_left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_top_left_);
  }
  range_top_left_ = range_top_left;
  if (range_top_left) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.range_top_left)
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::release_range_top_left() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDCoordArchive* temp = range_top_left_;
  range_top_left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::unsafe_arena_release_range_top_left() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.range_top_left)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUIDCoordArchive* temp = range_top_left_;
  range_top_left_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::_internal_mutable_range_top_left() {
  _has_bits_[0] |= 0x00000010u;
  if (range_top_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArena());
    range_top_left_ = p;
  }
  return range_top_left_;
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::mutable_range_top_left() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.range_top_left)
  return _internal_mutable_range_top_left();
}
inline void ReferenceNodeArchive::set_allocated_range_top_left(::TSP::UUIDCoordArchive* range_top_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_top_left_);
  }
  if (range_top_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_top_left)->GetArena();
    if (message_arena != submessage_arena) {
      range_top_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_top_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  range_top_left_ = range_top_left;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.range_top_left)
}

// optional .TSP.UUIDCoordArchive range_bottom_right = 7;
inline bool ReferenceNodeArchive::_internal_has_range_bottom_right() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || range_bottom_right_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_range_bottom_right() const {
  return _internal_has_range_bottom_right();
}
inline const ::TSP::UUIDCoordArchive& ReferenceNodeArchive::_internal_range_bottom_right() const {
  const ::TSP::UUIDCoordArchive* p = range_bottom_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDCoordArchive&>(
      ::TSP::_UUIDCoordArchive_default_instance_);
}
inline const ::TSP::UUIDCoordArchive& ReferenceNodeArchive::range_bottom_right() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.range_bottom_right)
  return _internal_range_bottom_right();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_range_bottom_right(
    ::TSP::UUIDCoordArchive* range_bottom_right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_bottom_right_);
  }
  range_bottom_right_ = range_bottom_right;
  if (range_bottom_right) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.range_bottom_right)
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::release_range_bottom_right() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUIDCoordArchive* temp = range_bottom_right_;
  range_bottom_right_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::unsafe_arena_release_range_bottom_right() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.range_bottom_right)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUIDCoordArchive* temp = range_bottom_right_;
  range_bottom_right_ = nullptr;
  return temp;
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::_internal_mutable_range_bottom_right() {
  _has_bits_[0] |= 0x00000020u;
  if (range_bottom_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDCoordArchive>(GetArena());
    range_bottom_right_ = p;
  }
  return range_bottom_right_;
}
inline ::TSP::UUIDCoordArchive* ReferenceNodeArchive::mutable_range_bottom_right() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.range_bottom_right)
  return _internal_mutable_range_bottom_right();
}
inline void ReferenceNodeArchive::set_allocated_range_bottom_right(::TSP::UUIDCoordArchive* range_bottom_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_bottom_right_);
  }
  if (range_bottom_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_bottom_right)->GetArena();
    if (message_arena != submessage_arena) {
      range_bottom_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_bottom_right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  range_bottom_right_ = range_bottom_right;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.range_bottom_right)
}

// optional .TSCE.CategoryReferenceArchive category_ref = 8;
inline bool ReferenceNodeArchive::_internal_has_category_ref() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || category_ref_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_category_ref() const {
  return _internal_has_category_ref();
}
inline const ::TSCE::CategoryReferenceArchive& ReferenceNodeArchive::_internal_category_ref() const {
  const ::TSCE::CategoryReferenceArchive* p = category_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CategoryReferenceArchive&>(
      ::TSCE::_CategoryReferenceArchive_default_instance_);
}
inline const ::TSCE::CategoryReferenceArchive& ReferenceNodeArchive::category_ref() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.category_ref)
  return _internal_category_ref();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_category_ref(
    ::TSCE::CategoryReferenceArchive* category_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_ref_);
  }
  category_ref_ = category_ref;
  if (category_ref) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.category_ref)
}
inline ::TSCE::CategoryReferenceArchive* ReferenceNodeArchive::release_category_ref() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::CategoryReferenceArchive* temp = category_ref_;
  category_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CategoryReferenceArchive* ReferenceNodeArchive::unsafe_arena_release_category_ref() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.category_ref)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::CategoryReferenceArchive* temp = category_ref_;
  category_ref_ = nullptr;
  return temp;
}
inline ::TSCE::CategoryReferenceArchive* ReferenceNodeArchive::_internal_mutable_category_ref() {
  _has_bits_[0] |= 0x00000040u;
  if (category_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CategoryReferenceArchive>(GetArena());
    category_ref_ = p;
  }
  return category_ref_;
}
inline ::TSCE::CategoryReferenceArchive* ReferenceNodeArchive::mutable_category_ref() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.category_ref)
  return _internal_mutable_category_ref();
}
inline void ReferenceNodeArchive::set_allocated_category_ref(::TSCE::CategoryReferenceArchive* category_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_ref_);
  }
  if (category_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_ref)->GetArena();
    if (message_arena != submessage_arena) {
      category_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_ref, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  category_ref_ = category_ref;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.category_ref)
}

// optional .TSP.UUIDRectArchive uid_range_rect = 9;
inline bool ReferenceNodeArchive::_internal_has_uid_range_rect() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || uid_range_rect_ != nullptr);
  return value;
}
inline bool ReferenceNodeArchive::has_uid_range_rect() const {
  return _internal_has_uid_range_rect();
}
inline const ::TSP::UUIDRectArchive& ReferenceNodeArchive::_internal_uid_range_rect() const {
  const ::TSP::UUIDRectArchive* p = uid_range_rect_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDRectArchive&>(
      ::TSP::_UUIDRectArchive_default_instance_);
}
inline const ::TSP::UUIDRectArchive& ReferenceNodeArchive::uid_range_rect() const {
  // @@protoc_insertion_point(field_get:TST.ReferenceNodeArchive.uid_range_rect)
  return _internal_uid_range_rect();
}
inline void ReferenceNodeArchive::unsafe_arena_set_allocated_uid_range_rect(
    ::TSP::UUIDRectArchive* uid_range_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_range_rect_);
  }
  uid_range_rect_ = uid_range_rect;
  if (uid_range_rect) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ReferenceNodeArchive.uid_range_rect)
}
inline ::TSP::UUIDRectArchive* ReferenceNodeArchive::release_uid_range_rect() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUIDRectArchive* temp = uid_range_rect_;
  uid_range_rect_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDRectArchive* ReferenceNodeArchive::unsafe_arena_release_uid_range_rect() {
  // @@protoc_insertion_point(field_release:TST.ReferenceNodeArchive.uid_range_rect)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::UUIDRectArchive* temp = uid_range_rect_;
  uid_range_rect_ = nullptr;
  return temp;
}
inline ::TSP::UUIDRectArchive* ReferenceNodeArchive::_internal_mutable_uid_range_rect() {
  _has_bits_[0] |= 0x00000080u;
  if (uid_range_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDRectArchive>(GetArena());
    uid_range_rect_ = p;
  }
  return uid_range_rect_;
}
inline ::TSP::UUIDRectArchive* ReferenceNodeArchive::mutable_uid_range_rect() {
  // @@protoc_insertion_point(field_mutable:TST.ReferenceNodeArchive.uid_range_rect)
  return _internal_mutable_uid_range_rect();
}
inline void ReferenceNodeArchive::set_allocated_uid_range_rect(::TSP::UUIDRectArchive* uid_range_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_range_rect_);
  }
  if (uid_range_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_range_rect)->GetArena();
    if (message_arena != submessage_arena) {
      uid_range_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_range_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  uid_range_rect_ = uid_range_rect;
  // @@protoc_insertion_point(field_set_allocated:TST.ReferenceNodeArchive.uid_range_rect)
}

// -------------------------------------------------------------------

// DurationNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool DurationNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DurationNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void DurationNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& DurationNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& DurationNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.DurationNodeArchive.super)
  return _internal_super();
}
inline void DurationNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DurationNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* DurationNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* DurationNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.DurationNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* DurationNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* DurationNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.DurationNodeArchive.super)
  return _internal_mutable_super();
}
inline void DurationNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.DurationNodeArchive.super)
}

// required double timeinterval = 2;
inline bool DurationNodeArchive::_internal_has_timeinterval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DurationNodeArchive::has_timeinterval() const {
  return _internal_has_timeinterval();
}
inline void DurationNodeArchive::clear_timeinterval() {
  timeinterval_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DurationNodeArchive::_internal_timeinterval() const {
  return timeinterval_;
}
inline double DurationNodeArchive::timeinterval() const {
  // @@protoc_insertion_point(field_get:TST.DurationNodeArchive.timeinterval)
  return _internal_timeinterval();
}
inline void DurationNodeArchive::_internal_set_timeinterval(double value) {
  _has_bits_[0] |= 0x00000002u;
  timeinterval_ = value;
}
inline void DurationNodeArchive::set_timeinterval(double value) {
  _internal_set_timeinterval(value);
  // @@protoc_insertion_point(field_set:TST.DurationNodeArchive.timeinterval)
}

// required uint32 smallest = 3;
inline bool DurationNodeArchive::_internal_has_smallest() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DurationNodeArchive::has_smallest() const {
  return _internal_has_smallest();
}
inline void DurationNodeArchive::clear_smallest() {
  smallest_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DurationNodeArchive::_internal_smallest() const {
  return smallest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DurationNodeArchive::smallest() const {
  // @@protoc_insertion_point(field_get:TST.DurationNodeArchive.smallest)
  return _internal_smallest();
}
inline void DurationNodeArchive::_internal_set_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  smallest_ = value;
}
inline void DurationNodeArchive::set_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_smallest(value);
  // @@protoc_insertion_point(field_set:TST.DurationNodeArchive.smallest)
}

// required uint32 largest = 4;
inline bool DurationNodeArchive::_internal_has_largest() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DurationNodeArchive::has_largest() const {
  return _internal_has_largest();
}
inline void DurationNodeArchive::clear_largest() {
  largest_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DurationNodeArchive::_internal_largest() const {
  return largest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DurationNodeArchive::largest() const {
  // @@protoc_insertion_point(field_get:TST.DurationNodeArchive.largest)
  return _internal_largest();
}
inline void DurationNodeArchive::_internal_set_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  largest_ = value;
}
inline void DurationNodeArchive::set_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_largest(value);
  // @@protoc_insertion_point(field_set:TST.DurationNodeArchive.largest)
}

// required uint32 style = 5;
inline bool DurationNodeArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DurationNodeArchive::has_style() const {
  return _internal_has_style();
}
inline void DurationNodeArchive::clear_style() {
  style_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DurationNodeArchive::_internal_style() const {
  return style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DurationNodeArchive::style() const {
  // @@protoc_insertion_point(field_get:TST.DurationNodeArchive.style)
  return _internal_style();
}
inline void DurationNodeArchive::_internal_set_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  style_ = value;
}
inline void DurationNodeArchive::set_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:TST.DurationNodeArchive.style)
}

// -------------------------------------------------------------------

// ArgumentPlaceholderNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool ArgumentPlaceholderNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ArgumentPlaceholderNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void ArgumentPlaceholderNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& ArgumentPlaceholderNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& ArgumentPlaceholderNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.ArgumentPlaceholderNodeArchive.super)
  return _internal_super();
}
inline void ArgumentPlaceholderNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ArgumentPlaceholderNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* ArgumentPlaceholderNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* ArgumentPlaceholderNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.ArgumentPlaceholderNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* ArgumentPlaceholderNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* ArgumentPlaceholderNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.ArgumentPlaceholderNodeArchive.super)
  return _internal_mutable_super();
}
inline void ArgumentPlaceholderNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.ArgumentPlaceholderNodeArchive.super)
}

// optional uint32 functionIndex = 2;
inline bool ArgumentPlaceholderNodeArchive::_internal_has_functionindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArgumentPlaceholderNodeArchive::has_functionindex() const {
  return _internal_has_functionindex();
}
inline void ArgumentPlaceholderNodeArchive::clear_functionindex() {
  functionindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgumentPlaceholderNodeArchive::_internal_functionindex() const {
  return functionindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgumentPlaceholderNodeArchive::functionindex() const {
  // @@protoc_insertion_point(field_get:TST.ArgumentPlaceholderNodeArchive.functionIndex)
  return _internal_functionindex();
}
inline void ArgumentPlaceholderNodeArchive::_internal_set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  functionindex_ = value;
}
inline void ArgumentPlaceholderNodeArchive::set_functionindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_functionindex(value);
  // @@protoc_insertion_point(field_set:TST.ArgumentPlaceholderNodeArchive.functionIndex)
}

// optional uint32 argumentIndex = 3;
inline bool ArgumentPlaceholderNodeArchive::_internal_has_argumentindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArgumentPlaceholderNodeArchive::has_argumentindex() const {
  return _internal_has_argumentindex();
}
inline void ArgumentPlaceholderNodeArchive::clear_argumentindex() {
  argumentindex_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgumentPlaceholderNodeArchive::_internal_argumentindex() const {
  return argumentindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgumentPlaceholderNodeArchive::argumentindex() const {
  // @@protoc_insertion_point(field_get:TST.ArgumentPlaceholderNodeArchive.argumentIndex)
  return _internal_argumentindex();
}
inline void ArgumentPlaceholderNodeArchive::_internal_set_argumentindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  argumentindex_ = value;
}
inline void ArgumentPlaceholderNodeArchive::set_argumentindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_argumentindex(value);
  // @@protoc_insertion_point(field_set:TST.ArgumentPlaceholderNodeArchive.argumentIndex)
}

// optional uint32 mode = 4;
inline bool ArgumentPlaceholderNodeArchive::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ArgumentPlaceholderNodeArchive::has_mode() const {
  return _internal_has_mode();
}
inline void ArgumentPlaceholderNodeArchive::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgumentPlaceholderNodeArchive::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArgumentPlaceholderNodeArchive::mode() const {
  // @@protoc_insertion_point(field_get:TST.ArgumentPlaceholderNodeArchive.mode)
  return _internal_mode();
}
inline void ArgumentPlaceholderNodeArchive::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mode_ = value;
}
inline void ArgumentPlaceholderNodeArchive::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:TST.ArgumentPlaceholderNodeArchive.mode)
}

// -------------------------------------------------------------------

// EmptyExpressionNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool EmptyExpressionNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool EmptyExpressionNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void EmptyExpressionNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& EmptyExpressionNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& EmptyExpressionNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.EmptyExpressionNodeArchive.super)
  return _internal_super();
}
inline void EmptyExpressionNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.EmptyExpressionNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* EmptyExpressionNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* EmptyExpressionNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.EmptyExpressionNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* EmptyExpressionNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* EmptyExpressionNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.EmptyExpressionNodeArchive.super)
  return _internal_mutable_super();
}
inline void EmptyExpressionNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.EmptyExpressionNodeArchive.super)
}

// -------------------------------------------------------------------

// LetNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool LetNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool LetNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void LetNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TST::ExpressionNodeArchive& LetNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& LetNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.LetNodeArchive.super)
  return _internal_super();
}
inline void LetNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.LetNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* LetNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000010u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* LetNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.LetNodeArchive.super)
  _has_bits_[0] &= ~0x00000010u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* LetNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000010u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* LetNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.LetNodeArchive.super)
  return _internal_mutable_super();
}
inline void LetNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.LetNodeArchive.super)
}

// optional string whitespace_after_let = 2;
inline bool LetNodeArchive::_internal_has_whitespace_after_let() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LetNodeArchive::has_whitespace_after_let() const {
  return _internal_has_whitespace_after_let();
}
inline void LetNodeArchive::clear_whitespace_after_let() {
  whitespace_after_let_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LetNodeArchive::whitespace_after_let() const {
  // @@protoc_insertion_point(field_get:TST.LetNodeArchive.whitespace_after_let)
  return _internal_whitespace_after_let();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LetNodeArchive::set_whitespace_after_let(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 whitespace_after_let_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.LetNodeArchive.whitespace_after_let)
}
inline std::string* LetNodeArchive::mutable_whitespace_after_let() {
  // @@protoc_insertion_point(field_mutable:TST.LetNodeArchive.whitespace_after_let)
  return _internal_mutable_whitespace_after_let();
}
inline const std::string& LetNodeArchive::_internal_whitespace_after_let() const {
  return whitespace_after_let_.Get();
}
inline void LetNodeArchive::_internal_set_whitespace_after_let(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  whitespace_after_let_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LetNodeArchive::_internal_mutable_whitespace_after_let() {
  _has_bits_[0] |= 0x00000001u;
  return whitespace_after_let_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LetNodeArchive::release_whitespace_after_let() {
  // @@protoc_insertion_point(field_release:TST.LetNodeArchive.whitespace_after_let)
  if (!_internal_has_whitespace_after_let()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return whitespace_after_let_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LetNodeArchive::set_allocated_whitespace_after_let(std::string* whitespace_after_let) {
  if (whitespace_after_let != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  whitespace_after_let_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whitespace_after_let,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.LetNodeArchive.whitespace_after_let)
}

// optional string whitespace_after_identifier = 3;
inline bool LetNodeArchive::_internal_has_whitespace_after_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LetNodeArchive::has_whitespace_after_identifier() const {
  return _internal_has_whitespace_after_identifier();
}
inline void LetNodeArchive::clear_whitespace_after_identifier() {
  whitespace_after_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LetNodeArchive::whitespace_after_identifier() const {
  // @@protoc_insertion_point(field_get:TST.LetNodeArchive.whitespace_after_identifier)
  return _internal_whitespace_after_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LetNodeArchive::set_whitespace_after_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 whitespace_after_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.LetNodeArchive.whitespace_after_identifier)
}
inline std::string* LetNodeArchive::mutable_whitespace_after_identifier() {
  // @@protoc_insertion_point(field_mutable:TST.LetNodeArchive.whitespace_after_identifier)
  return _internal_mutable_whitespace_after_identifier();
}
inline const std::string& LetNodeArchive::_internal_whitespace_after_identifier() const {
  return whitespace_after_identifier_.Get();
}
inline void LetNodeArchive::_internal_set_whitespace_after_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  whitespace_after_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LetNodeArchive::_internal_mutable_whitespace_after_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return whitespace_after_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LetNodeArchive::release_whitespace_after_identifier() {
  // @@protoc_insertion_point(field_release:TST.LetNodeArchive.whitespace_after_identifier)
  if (!_internal_has_whitespace_after_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return whitespace_after_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LetNodeArchive::set_allocated_whitespace_after_identifier(std::string* whitespace_after_identifier) {
  if (whitespace_after_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  whitespace_after_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whitespace_after_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.LetNodeArchive.whitespace_after_identifier)
}

// optional string whitespace_after_equals = 4;
inline bool LetNodeArchive::_internal_has_whitespace_after_equals() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LetNodeArchive::has_whitespace_after_equals() const {
  return _internal_has_whitespace_after_equals();
}
inline void LetNodeArchive::clear_whitespace_after_equals() {
  whitespace_after_equals_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LetNodeArchive::whitespace_after_equals() const {
  // @@protoc_insertion_point(field_get:TST.LetNodeArchive.whitespace_after_equals)
  return _internal_whitespace_after_equals();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LetNodeArchive::set_whitespace_after_equals(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 whitespace_after_equals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.LetNodeArchive.whitespace_after_equals)
}
inline std::string* LetNodeArchive::mutable_whitespace_after_equals() {
  // @@protoc_insertion_point(field_mutable:TST.LetNodeArchive.whitespace_after_equals)
  return _internal_mutable_whitespace_after_equals();
}
inline const std::string& LetNodeArchive::_internal_whitespace_after_equals() const {
  return whitespace_after_equals_.Get();
}
inline void LetNodeArchive::_internal_set_whitespace_after_equals(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  whitespace_after_equals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LetNodeArchive::_internal_mutable_whitespace_after_equals() {
  _has_bits_[0] |= 0x00000004u;
  return whitespace_after_equals_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LetNodeArchive::release_whitespace_after_equals() {
  // @@protoc_insertion_point(field_release:TST.LetNodeArchive.whitespace_after_equals)
  if (!_internal_has_whitespace_after_equals()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return whitespace_after_equals_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LetNodeArchive::set_allocated_whitespace_after_equals(std::string* whitespace_after_equals) {
  if (whitespace_after_equals != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  whitespace_after_equals_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whitespace_after_equals,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.LetNodeArchive.whitespace_after_equals)
}

// optional string whitespace_after_delimiter = 5;
inline bool LetNodeArchive::_internal_has_whitespace_after_delimiter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LetNodeArchive::has_whitespace_after_delimiter() const {
  return _internal_has_whitespace_after_delimiter();
}
inline void LetNodeArchive::clear_whitespace_after_delimiter() {
  whitespace_after_delimiter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LetNodeArchive::whitespace_after_delimiter() const {
  // @@protoc_insertion_point(field_get:TST.LetNodeArchive.whitespace_after_delimiter)
  return _internal_whitespace_after_delimiter();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void LetNodeArchive::set_whitespace_after_delimiter(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 whitespace_after_delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.LetNodeArchive.whitespace_after_delimiter)
}
inline std::string* LetNodeArchive::mutable_whitespace_after_delimiter() {
  // @@protoc_insertion_point(field_mutable:TST.LetNodeArchive.whitespace_after_delimiter)
  return _internal_mutable_whitespace_after_delimiter();
}
inline const std::string& LetNodeArchive::_internal_whitespace_after_delimiter() const {
  return whitespace_after_delimiter_.Get();
}
inline void LetNodeArchive::_internal_set_whitespace_after_delimiter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  whitespace_after_delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* LetNodeArchive::_internal_mutable_whitespace_after_delimiter() {
  _has_bits_[0] |= 0x00000008u;
  return whitespace_after_delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LetNodeArchive::release_whitespace_after_delimiter() {
  // @@protoc_insertion_point(field_release:TST.LetNodeArchive.whitespace_after_delimiter)
  if (!_internal_has_whitespace_after_delimiter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return whitespace_after_delimiter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LetNodeArchive::set_allocated_whitespace_after_delimiter(std::string* whitespace_after_delimiter) {
  if (whitespace_after_delimiter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  whitespace_after_delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whitespace_after_delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.LetNodeArchive.whitespace_after_delimiter)
}

// -------------------------------------------------------------------

// InNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool InNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void InNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::ExpressionNodeArchive& InNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& InNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.InNodeArchive.super)
  return _internal_super();
}
inline void InNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.InNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* InNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* InNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.InNodeArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* InNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* InNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.InNodeArchive.super)
  return _internal_mutable_super();
}
inline void InNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.InNodeArchive.super)
}

// -------------------------------------------------------------------

// VariableNodeArchive

// required .TST.ExpressionNodeArchive super = 1;
inline bool VariableNodeArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool VariableNodeArchive::has_super() const {
  return _internal_has_super();
}
inline void VariableNodeArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::ExpressionNodeArchive& VariableNodeArchive::_internal_super() const {
  const ::TST::ExpressionNodeArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::ExpressionNodeArchive&>(
      ::TST::_ExpressionNodeArchive_default_instance_);
}
inline const ::TST::ExpressionNodeArchive& VariableNodeArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.VariableNodeArchive.super)
  return _internal_super();
}
inline void VariableNodeArchive::unsafe_arena_set_allocated_super(
    ::TST::ExpressionNodeArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.VariableNodeArchive.super)
}
inline ::TST::ExpressionNodeArchive* VariableNodeArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::ExpressionNodeArchive* VariableNodeArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.VariableNodeArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::ExpressionNodeArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::ExpressionNodeArchive* VariableNodeArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::ExpressionNodeArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::ExpressionNodeArchive* VariableNodeArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.VariableNodeArchive.super)
  return _internal_mutable_super();
}
inline void VariableNodeArchive::set_allocated_super(::TST::ExpressionNodeArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.VariableNodeArchive.super)
}

// required string identifier = 2;
inline bool VariableNodeArchive::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VariableNodeArchive::has_identifier() const {
  return _internal_has_identifier();
}
inline void VariableNodeArchive::clear_identifier() {
  identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VariableNodeArchive::identifier() const {
  // @@protoc_insertion_point(field_get:TST.VariableNodeArchive.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void VariableNodeArchive::set_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.VariableNodeArchive.identifier)
}
inline std::string* VariableNodeArchive::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:TST.VariableNodeArchive.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& VariableNodeArchive::_internal_identifier() const {
  return identifier_.Get();
}
inline void VariableNodeArchive::_internal_set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* VariableNodeArchive::_internal_mutable_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VariableNodeArchive::release_identifier() {
  // @@protoc_insertion_point(field_release:TST.VariableNodeArchive.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariableNodeArchive::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.VariableNodeArchive.identifier)
}

// required uint32 symbol = 3;
inline bool VariableNodeArchive::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VariableNodeArchive::has_symbol() const {
  return _internal_has_symbol();
}
inline void VariableNodeArchive::clear_symbol() {
  symbol_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VariableNodeArchive::_internal_symbol() const {
  return symbol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VariableNodeArchive::symbol() const {
  // @@protoc_insertion_point(field_get:TST.VariableNodeArchive.symbol)
  return _internal_symbol();
}
inline void VariableNodeArchive::_internal_set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  symbol_ = value;
}
inline void VariableNodeArchive::set_symbol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:TST.VariableNodeArchive.symbol)
}

// -------------------------------------------------------------------

// LayoutHintArchive

// required bool isValid = 1;
inline bool LayoutHintArchive::_internal_has_isvalid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LayoutHintArchive::has_isvalid() const {
  return _internal_has_isvalid();
}
inline void LayoutHintArchive::clear_isvalid() {
  isvalid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LayoutHintArchive::_internal_isvalid() const {
  return isvalid_;
}
inline bool LayoutHintArchive::isvalid() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.isValid)
  return _internal_isvalid();
}
inline void LayoutHintArchive::_internal_set_isvalid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  isvalid_ = value;
}
inline void LayoutHintArchive::set_isvalid(bool value) {
  _internal_set_isvalid(value);
  // @@protoc_insertion_point(field_set:TST.LayoutHintArchive.isValid)
}

// optional .TST.CellRange cellRange = 2;
inline bool LayoutHintArchive::_internal_has_cellrange() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cellrange_ != nullptr);
  return value;
}
inline bool LayoutHintArchive::has_cellrange() const {
  return _internal_has_cellrange();
}
inline void LayoutHintArchive::clear_cellrange() {
  if (cellrange_ != nullptr) cellrange_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::CellRange& LayoutHintArchive::_internal_cellrange() const {
  const ::TST::CellRange* p = cellrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellRange&>(
      ::TST::_CellRange_default_instance_);
}
inline const ::TST::CellRange& LayoutHintArchive::cellrange() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.cellRange)
  return _internal_cellrange();
}
inline void LayoutHintArchive::unsafe_arena_set_allocated_cellrange(
    ::TST::CellRange* cellrange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellrange_);
  }
  cellrange_ = cellrange;
  if (cellrange) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.LayoutHintArchive.cellRange)
}
inline ::TST::CellRange* LayoutHintArchive::release_cellrange() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellRange* temp = cellrange_;
  cellrange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellRange* LayoutHintArchive::unsafe_arena_release_cellrange() {
  // @@protoc_insertion_point(field_release:TST.LayoutHintArchive.cellRange)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::CellRange* temp = cellrange_;
  cellrange_ = nullptr;
  return temp;
}
inline ::TST::CellRange* LayoutHintArchive::_internal_mutable_cellrange() {
  _has_bits_[0] |= 0x00000001u;
  if (cellrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellRange>(GetArena());
    cellrange_ = p;
  }
  return cellrange_;
}
inline ::TST::CellRange* LayoutHintArchive::mutable_cellrange() {
  // @@protoc_insertion_point(field_mutable:TST.LayoutHintArchive.cellRange)
  return _internal_mutable_cellrange();
}
inline void LayoutHintArchive::set_allocated_cellrange(::TST::CellRange* cellrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cellrange_;
  }
  if (cellrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cellrange);
    if (message_arena != submessage_arena) {
      cellrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellrange, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cellrange_ = cellrange;
  // @@protoc_insertion_point(field_set_allocated:TST.LayoutHintArchive.cellRange)
}

// optional .TST.CellID hintID = 3;
inline bool LayoutHintArchive::_internal_has_hintid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || hintid_ != nullptr);
  return value;
}
inline bool LayoutHintArchive::has_hintid() const {
  return _internal_has_hintid();
}
inline void LayoutHintArchive::clear_hintid() {
  if (hintid_ != nullptr) hintid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CellID& LayoutHintArchive::_internal_hintid() const {
  const ::TST::CellID* p = hintid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& LayoutHintArchive::hintid() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.hintID)
  return _internal_hintid();
}
inline void LayoutHintArchive::unsafe_arena_set_allocated_hintid(
    ::TST::CellID* hintid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hintid_);
  }
  hintid_ = hintid;
  if (hintid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.LayoutHintArchive.hintID)
}
inline ::TST::CellID* LayoutHintArchive::release_hintid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellID* temp = hintid_;
  hintid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* LayoutHintArchive::unsafe_arena_release_hintid() {
  // @@protoc_insertion_point(field_release:TST.LayoutHintArchive.hintID)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CellID* temp = hintid_;
  hintid_ = nullptr;
  return temp;
}
inline ::TST::CellID* LayoutHintArchive::_internal_mutable_hintid() {
  _has_bits_[0] |= 0x00000002u;
  if (hintid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    hintid_ = p;
  }
  return hintid_;
}
inline ::TST::CellID* LayoutHintArchive::mutable_hintid() {
  // @@protoc_insertion_point(field_mutable:TST.LayoutHintArchive.hintID)
  return _internal_mutable_hintid();
}
inline void LayoutHintArchive::set_allocated_hintid(::TST::CellID* hintid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hintid_;
  }
  if (hintid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hintid);
    if (message_arena != submessage_arena) {
      hintid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hintid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hintid_ = hintid;
  // @@protoc_insertion_point(field_set_allocated:TST.LayoutHintArchive.hintID)
}

// required .TSP.Size maximumSize = 4;
inline bool LayoutHintArchive::_internal_has_maximumsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || maximumsize_ != nullptr);
  return value;
}
inline bool LayoutHintArchive::has_maximumsize() const {
  return _internal_has_maximumsize();
}
inline const ::TSP::Size& LayoutHintArchive::_internal_maximumsize() const {
  const ::TSP::Size* p = maximumsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& LayoutHintArchive::maximumsize() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.maximumSize)
  return _internal_maximumsize();
}
inline void LayoutHintArchive::unsafe_arena_set_allocated_maximumsize(
    ::TSP::Size* maximumsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumsize_);
  }
  maximumsize_ = maximumsize;
  if (maximumsize) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.LayoutHintArchive.maximumSize)
}
inline ::TSP::Size* LayoutHintArchive::release_maximumsize() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = maximumsize_;
  maximumsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* LayoutHintArchive::unsafe_arena_release_maximumsize() {
  // @@protoc_insertion_point(field_release:TST.LayoutHintArchive.maximumSize)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = maximumsize_;
  maximumsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* LayoutHintArchive::_internal_mutable_maximumsize() {
  _has_bits_[0] |= 0x00000004u;
  if (maximumsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    maximumsize_ = p;
  }
  return maximumsize_;
}
inline ::TSP::Size* LayoutHintArchive::mutable_maximumsize() {
  // @@protoc_insertion_point(field_mutable:TST.LayoutHintArchive.maximumSize)
  return _internal_mutable_maximumsize();
}
inline void LayoutHintArchive::set_allocated_maximumsize(::TSP::Size* maximumsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumsize_);
  }
  if (maximumsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumsize)->GetArena();
    if (message_arena != submessage_arena) {
      maximumsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximumsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  maximumsize_ = maximumsize;
  // @@protoc_insertion_point(field_set_allocated:TST.LayoutHintArchive.maximumSize)
}

// required uint32 partitionPosition = 5;
inline bool LayoutHintArchive::_internal_has_partitionposition() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LayoutHintArchive::has_partitionposition() const {
  return _internal_has_partitionposition();
}
inline void LayoutHintArchive::clear_partitionposition() {
  partitionposition_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutHintArchive::_internal_partitionposition() const {
  return partitionposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutHintArchive::partitionposition() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.partitionPosition)
  return _internal_partitionposition();
}
inline void LayoutHintArchive::_internal_set_partitionposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  partitionposition_ = value;
}
inline void LayoutHintArchive::set_partitionposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_partitionposition(value);
  // @@protoc_insertion_point(field_set:TST.LayoutHintArchive.partitionPosition)
}

// required bool horizontal = 6;
inline bool LayoutHintArchive::_internal_has_horizontal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LayoutHintArchive::has_horizontal() const {
  return _internal_has_horizontal();
}
inline void LayoutHintArchive::clear_horizontal() {
  horizontal_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LayoutHintArchive::_internal_horizontal() const {
  return horizontal_;
}
inline bool LayoutHintArchive::horizontal() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.horizontal)
  return _internal_horizontal();
}
inline void LayoutHintArchive::_internal_set_horizontal(bool value) {
  _has_bits_[0] |= 0x00000020u;
  horizontal_ = value;
}
inline void LayoutHintArchive::set_horizontal(bool value) {
  _internal_set_horizontal(value);
  // @@protoc_insertion_point(field_set:TST.LayoutHintArchive.horizontal)
}

// optional .TSP.Size effectiveSize = 7;
inline bool LayoutHintArchive::_internal_has_effectivesize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || effectivesize_ != nullptr);
  return value;
}
inline bool LayoutHintArchive::has_effectivesize() const {
  return _internal_has_effectivesize();
}
inline const ::TSP::Size& LayoutHintArchive::_internal_effectivesize() const {
  const ::TSP::Size* p = effectivesize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& LayoutHintArchive::effectivesize() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.effectiveSize)
  return _internal_effectivesize();
}
inline void LayoutHintArchive::unsafe_arena_set_allocated_effectivesize(
    ::TSP::Size* effectivesize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectivesize_);
  }
  effectivesize_ = effectivesize;
  if (effectivesize) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.LayoutHintArchive.effectiveSize)
}
inline ::TSP::Size* LayoutHintArchive::release_effectivesize() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = effectivesize_;
  effectivesize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* LayoutHintArchive::unsafe_arena_release_effectivesize() {
  // @@protoc_insertion_point(field_release:TST.LayoutHintArchive.effectiveSize)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = effectivesize_;
  effectivesize_ = nullptr;
  return temp;
}
inline ::TSP::Size* LayoutHintArchive::_internal_mutable_effectivesize() {
  _has_bits_[0] |= 0x00000008u;
  if (effectivesize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    effectivesize_ = p;
  }
  return effectivesize_;
}
inline ::TSP::Size* LayoutHintArchive::mutable_effectivesize() {
  // @@protoc_insertion_point(field_mutable:TST.LayoutHintArchive.effectiveSize)
  return _internal_mutable_effectivesize();
}
inline void LayoutHintArchive::set_allocated_effectivesize(::TSP::Size* effectivesize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectivesize_);
  }
  if (effectivesize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effectivesize)->GetArena();
    if (message_arena != submessage_arena) {
      effectivesize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effectivesize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  effectivesize_ = effectivesize;
  // @@protoc_insertion_point(field_set_allocated:TST.LayoutHintArchive.effectiveSize)
}

// optional uint32 partitioningPass = 8;
inline bool LayoutHintArchive::_internal_has_partitioningpass() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LayoutHintArchive::has_partitioningpass() const {
  return _internal_has_partitioningpass();
}
inline void LayoutHintArchive::clear_partitioningpass() {
  partitioningpass_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutHintArchive::_internal_partitioningpass() const {
  return partitioningpass_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayoutHintArchive::partitioningpass() const {
  // @@protoc_insertion_point(field_get:TST.LayoutHintArchive.partitioningPass)
  return _internal_partitioningpass();
}
inline void LayoutHintArchive::_internal_set_partitioningpass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  partitioningpass_ = value;
}
inline void LayoutHintArchive::set_partitioningpass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_partitioningpass(value);
  // @@protoc_insertion_point(field_set:TST.LayoutHintArchive.partitioningPass)
}

// -------------------------------------------------------------------

// CompletionTokenAttachmentArchive

// required .TST.TokenAttachmentArchive super = 1;
inline bool CompletionTokenAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CompletionTokenAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline void CompletionTokenAttachmentArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::TokenAttachmentArchive& CompletionTokenAttachmentArchive::_internal_super() const {
  const ::TST::TokenAttachmentArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::TokenAttachmentArchive&>(
      ::TST::_TokenAttachmentArchive_default_instance_);
}
inline const ::TST::TokenAttachmentArchive& CompletionTokenAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.CompletionTokenAttachmentArchive.super)
  return _internal_super();
}
inline void CompletionTokenAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TST::TokenAttachmentArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CompletionTokenAttachmentArchive.super)
}
inline ::TST::TokenAttachmentArchive* CompletionTokenAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::TokenAttachmentArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::TokenAttachmentArchive* CompletionTokenAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.CompletionTokenAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::TokenAttachmentArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TST::TokenAttachmentArchive* CompletionTokenAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::TokenAttachmentArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TST::TokenAttachmentArchive* CompletionTokenAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.CompletionTokenAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void CompletionTokenAttachmentArchive::set_allocated_super(::TST::TokenAttachmentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.CompletionTokenAttachmentArchive.super)
}

// optional string completionText = 2;
inline bool CompletionTokenAttachmentArchive::_internal_has_completiontext() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompletionTokenAttachmentArchive::has_completiontext() const {
  return _internal_has_completiontext();
}
inline void CompletionTokenAttachmentArchive::clear_completiontext() {
  completiontext_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompletionTokenAttachmentArchive::completiontext() const {
  // @@protoc_insertion_point(field_get:TST.CompletionTokenAttachmentArchive.completionText)
  return _internal_completiontext();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CompletionTokenAttachmentArchive::set_completiontext(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 completiontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.CompletionTokenAttachmentArchive.completionText)
}
inline std::string* CompletionTokenAttachmentArchive::mutable_completiontext() {
  // @@protoc_insertion_point(field_mutable:TST.CompletionTokenAttachmentArchive.completionText)
  return _internal_mutable_completiontext();
}
inline const std::string& CompletionTokenAttachmentArchive::_internal_completiontext() const {
  return completiontext_.Get();
}
inline void CompletionTokenAttachmentArchive::_internal_set_completiontext(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  completiontext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CompletionTokenAttachmentArchive::_internal_mutable_completiontext() {
  _has_bits_[0] |= 0x00000001u;
  return completiontext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompletionTokenAttachmentArchive::release_completiontext() {
  // @@protoc_insertion_point(field_release:TST.CompletionTokenAttachmentArchive.completionText)
  if (!_internal_has_completiontext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return completiontext_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompletionTokenAttachmentArchive::set_allocated_completiontext(std::string* completiontext) {
  if (completiontext != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  completiontext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), completiontext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.CompletionTokenAttachmentArchive.completionText)
}

// optional uint32 caretPosition = 3;
inline bool CompletionTokenAttachmentArchive::_internal_has_caretposition() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CompletionTokenAttachmentArchive::has_caretposition() const {
  return _internal_has_caretposition();
}
inline void CompletionTokenAttachmentArchive::clear_caretposition() {
  caretposition_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompletionTokenAttachmentArchive::_internal_caretposition() const {
  return caretposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompletionTokenAttachmentArchive::caretposition() const {
  // @@protoc_insertion_point(field_get:TST.CompletionTokenAttachmentArchive.caretPosition)
  return _internal_caretposition();
}
inline void CompletionTokenAttachmentArchive::_internal_set_caretposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  caretposition_ = value;
}
inline void CompletionTokenAttachmentArchive::set_caretposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_caretposition(value);
  // @@protoc_insertion_point(field_set:TST.CompletionTokenAttachmentArchive.caretPosition)
}

// optional uint32 prefixStart = 4;
inline bool CompletionTokenAttachmentArchive::_internal_has_prefixstart() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CompletionTokenAttachmentArchive::has_prefixstart() const {
  return _internal_has_prefixstart();
}
inline void CompletionTokenAttachmentArchive::clear_prefixstart() {
  prefixstart_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompletionTokenAttachmentArchive::_internal_prefixstart() const {
  return prefixstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompletionTokenAttachmentArchive::prefixstart() const {
  // @@protoc_insertion_point(field_get:TST.CompletionTokenAttachmentArchive.prefixStart)
  return _internal_prefixstart();
}
inline void CompletionTokenAttachmentArchive::_internal_set_prefixstart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  prefixstart_ = value;
}
inline void CompletionTokenAttachmentArchive::set_prefixstart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixstart(value);
  // @@protoc_insertion_point(field_set:TST.CompletionTokenAttachmentArchive.prefixStart)
}

// -------------------------------------------------------------------

// HiddenStateFormulaOwnerArchive

// optional .TSP.CFUUIDArchive owner_id = 1;
inline bool HiddenStateFormulaOwnerArchive::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_id_ != nullptr);
  return value;
}
inline bool HiddenStateFormulaOwnerArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline const ::TSP::CFUUIDArchive& HiddenStateFormulaOwnerArchive::_internal_owner_id() const {
  const ::TSP::CFUUIDArchive* p = owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& HiddenStateFormulaOwnerArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateFormulaOwnerArchive.owner_id)
  return _internal_owner_id();
}
inline void HiddenStateFormulaOwnerArchive::unsafe_arena_set_allocated_owner_id(
    ::TSP::CFUUIDArchive* owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  owner_id_ = owner_id;
  if (owner_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HiddenStateFormulaOwnerArchive.owner_id)
}
inline ::TSP::CFUUIDArchive* HiddenStateFormulaOwnerArchive::release_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* HiddenStateFormulaOwnerArchive::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TST.HiddenStateFormulaOwnerArchive.owner_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* HiddenStateFormulaOwnerArchive::_internal_mutable_owner_id() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    owner_id_ = p;
  }
  return owner_id_;
}
inline ::TSP::CFUUIDArchive* HiddenStateFormulaOwnerArchive::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateFormulaOwnerArchive.owner_id)
  return _internal_mutable_owner_id();
}
inline void HiddenStateFormulaOwnerArchive::set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TST.HiddenStateFormulaOwnerArchive.owner_id)
}

// repeated .TSCE.CellValueArchive threshold_value = 2;
inline int HiddenStateFormulaOwnerArchive::_internal_threshold_value_size() const {
  return threshold_value_.size();
}
inline int HiddenStateFormulaOwnerArchive::threshold_value_size() const {
  return _internal_threshold_value_size();
}
inline ::TSCE::CellValueArchive* HiddenStateFormulaOwnerArchive::mutable_threshold_value(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HiddenStateFormulaOwnerArchive.threshold_value)
  return threshold_value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
HiddenStateFormulaOwnerArchive::mutable_threshold_value() {
  // @@protoc_insertion_point(field_mutable_list:TST.HiddenStateFormulaOwnerArchive.threshold_value)
  return &threshold_value_;
}
inline const ::TSCE::CellValueArchive& HiddenStateFormulaOwnerArchive::_internal_threshold_value(int index) const {
  return threshold_value_.Get(index);
}
inline const ::TSCE::CellValueArchive& HiddenStateFormulaOwnerArchive::threshold_value(int index) const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateFormulaOwnerArchive.threshold_value)
  return _internal_threshold_value(index);
}
inline ::TSCE::CellValueArchive* HiddenStateFormulaOwnerArchive::_internal_add_threshold_value() {
  return threshold_value_.Add();
}
inline ::TSCE::CellValueArchive* HiddenStateFormulaOwnerArchive::add_threshold_value() {
  // @@protoc_insertion_point(field_add:TST.HiddenStateFormulaOwnerArchive.threshold_value)
  return _internal_add_threshold_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
HiddenStateFormulaOwnerArchive::threshold_value() const {
  // @@protoc_insertion_point(field_list:TST.HiddenStateFormulaOwnerArchive.threshold_value)
  return threshold_value_;
}

// optional bool needs_to_update_filter_set_for_import = 3 [default = false];
inline bool HiddenStateFormulaOwnerArchive::_internal_has_needs_to_update_filter_set_for_import() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HiddenStateFormulaOwnerArchive::has_needs_to_update_filter_set_for_import() const {
  return _internal_has_needs_to_update_filter_set_for_import();
}
inline void HiddenStateFormulaOwnerArchive::clear_needs_to_update_filter_set_for_import() {
  needs_to_update_filter_set_for_import_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HiddenStateFormulaOwnerArchive::_internal_needs_to_update_filter_set_for_import() const {
  return needs_to_update_filter_set_for_import_;
}
inline bool HiddenStateFormulaOwnerArchive::needs_to_update_filter_set_for_import() const {
  // @@protoc_insertion_point(field_get:TST.HiddenStateFormulaOwnerArchive.needs_to_update_filter_set_for_import)
  return _internal_needs_to_update_filter_set_for_import();
}
inline void HiddenStateFormulaOwnerArchive::_internal_set_needs_to_update_filter_set_for_import(bool value) {
  _has_bits_[0] |= 0x00000002u;
  needs_to_update_filter_set_for_import_ = value;
}
inline void HiddenStateFormulaOwnerArchive::set_needs_to_update_filter_set_for_import(bool value) {
  _internal_set_needs_to_update_filter_set_for_import(value);
  // @@protoc_insertion_point(field_set:TST.HiddenStateFormulaOwnerArchive.needs_to_update_filter_set_for_import)
}

// -------------------------------------------------------------------

// FormulaStoreArchive_FormulaStorePair

// required uint32 formula_index = 1;
inline bool FormulaStoreArchive_FormulaStorePair::_internal_has_formula_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaStoreArchive_FormulaStorePair::has_formula_index() const {
  return _internal_has_formula_index();
}
inline void FormulaStoreArchive_FormulaStorePair::clear_formula_index() {
  formula_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaStoreArchive_FormulaStorePair::_internal_formula_index() const {
  return formula_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaStoreArchive_FormulaStorePair::formula_index() const {
  // @@protoc_insertion_point(field_get:TST.FormulaStoreArchive.FormulaStorePair.formula_index)
  return _internal_formula_index();
}
inline void FormulaStoreArchive_FormulaStorePair::_internal_set_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  formula_index_ = value;
}
inline void FormulaStoreArchive_FormulaStorePair::set_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_formula_index(value);
  // @@protoc_insertion_point(field_set:TST.FormulaStoreArchive.FormulaStorePair.formula_index)
}

// required .TSCE.FormulaArchive formula = 2;
inline bool FormulaStoreArchive_FormulaStorePair::_internal_has_formula() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_ != nullptr);
  return value;
}
inline bool FormulaStoreArchive_FormulaStorePair::has_formula() const {
  return _internal_has_formula();
}
inline const ::TSCE::FormulaArchive& FormulaStoreArchive_FormulaStorePair::_internal_formula() const {
  const ::TSCE::FormulaArchive* p = formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FormulaArchive&>(
      ::TSCE::_FormulaArchive_default_instance_);
}
inline const ::TSCE::FormulaArchive& FormulaStoreArchive_FormulaStorePair::formula() const {
  // @@protoc_insertion_point(field_get:TST.FormulaStoreArchive.FormulaStorePair.formula)
  return _internal_formula();
}
inline void FormulaStoreArchive_FormulaStorePair::unsafe_arena_set_allocated_formula(
    ::TSCE::FormulaArchive* formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  formula_ = formula;
  if (formula) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaStoreArchive.FormulaStorePair.formula)
}
inline ::TSCE::FormulaArchive* FormulaStoreArchive_FormulaStorePair::release_formula() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FormulaArchive* FormulaStoreArchive_FormulaStorePair::unsafe_arena_release_formula() {
  // @@protoc_insertion_point(field_release:TST.FormulaStoreArchive.FormulaStorePair.formula)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::FormulaArchive* temp = formula_;
  formula_ = nullptr;
  return temp;
}
inline ::TSCE::FormulaArchive* FormulaStoreArchive_FormulaStorePair::_internal_mutable_formula() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FormulaArchive>(GetArena());
    formula_ = p;
  }
  return formula_;
}
inline ::TSCE::FormulaArchive* FormulaStoreArchive_FormulaStorePair::mutable_formula() {
  // @@protoc_insertion_point(field_mutable:TST.FormulaStoreArchive.FormulaStorePair.formula)
  return _internal_mutable_formula();
}
inline void FormulaStoreArchive_FormulaStorePair::set_allocated_formula(::TSCE::FormulaArchive* formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_);
  }
  if (formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula)->GetArena();
    if (message_arena != submessage_arena) {
      formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_ = formula;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaStoreArchive.FormulaStorePair.formula)
}

// -------------------------------------------------------------------

// FormulaStoreArchive

// required uint32 next_formula_index = 2;
inline bool FormulaStoreArchive::_internal_has_next_formula_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormulaStoreArchive::has_next_formula_index() const {
  return _internal_has_next_formula_index();
}
inline void FormulaStoreArchive::clear_next_formula_index() {
  next_formula_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaStoreArchive::_internal_next_formula_index() const {
  return next_formula_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaStoreArchive::next_formula_index() const {
  // @@protoc_insertion_point(field_get:TST.FormulaStoreArchive.next_formula_index)
  return _internal_next_formula_index();
}
inline void FormulaStoreArchive::_internal_set_next_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  next_formula_index_ = value;
}
inline void FormulaStoreArchive::set_next_formula_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_next_formula_index(value);
  // @@protoc_insertion_point(field_set:TST.FormulaStoreArchive.next_formula_index)
}

// repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
inline int FormulaStoreArchive::_internal_formulas_size() const {
  return formulas_.size();
}
inline int FormulaStoreArchive::formulas_size() const {
  return _internal_formulas_size();
}
inline void FormulaStoreArchive::clear_formulas() {
  formulas_.Clear();
}
inline ::TST::FormulaStoreArchive_FormulaStorePair* FormulaStoreArchive::mutable_formulas(int index) {
  // @@protoc_insertion_point(field_mutable:TST.FormulaStoreArchive.formulas)
  return formulas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FormulaStoreArchive_FormulaStorePair >*
FormulaStoreArchive::mutable_formulas() {
  // @@protoc_insertion_point(field_mutable_list:TST.FormulaStoreArchive.formulas)
  return &formulas_;
}
inline const ::TST::FormulaStoreArchive_FormulaStorePair& FormulaStoreArchive::_internal_formulas(int index) const {
  return formulas_.Get(index);
}
inline const ::TST::FormulaStoreArchive_FormulaStorePair& FormulaStoreArchive::formulas(int index) const {
  // @@protoc_insertion_point(field_get:TST.FormulaStoreArchive.formulas)
  return _internal_formulas(index);
}
inline ::TST::FormulaStoreArchive_FormulaStorePair* FormulaStoreArchive::_internal_add_formulas() {
  return formulas_.Add();
}
inline ::TST::FormulaStoreArchive_FormulaStorePair* FormulaStoreArchive::add_formulas() {
  // @@protoc_insertion_point(field_add:TST.FormulaStoreArchive.formulas)
  return _internal_add_formulas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::FormulaStoreArchive_FormulaStorePair >&
FormulaStoreArchive::formulas() const {
  // @@protoc_insertion_point(field_list:TST.FormulaStoreArchive.formulas)
  return formulas_;
}

// -------------------------------------------------------------------

// MergeOperationArchive

// required .TST.MergeActionArchive merge_type = 1;
inline bool MergeOperationArchive::_internal_has_merge_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MergeOperationArchive::has_merge_type() const {
  return _internal_has_merge_type();
}
inline void MergeOperationArchive::clear_merge_type() {
  merge_type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::TST::MergeActionArchive MergeOperationArchive::_internal_merge_type() const {
  return static_cast< ::TST::MergeActionArchive >(merge_type_);
}
inline ::TST::MergeActionArchive MergeOperationArchive::merge_type() const {
  // @@protoc_insertion_point(field_get:TST.MergeOperationArchive.merge_type)
  return _internal_merge_type();
}
inline void MergeOperationArchive::_internal_set_merge_type(::TST::MergeActionArchive value) {
  assert(::TST::MergeActionArchive_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  merge_type_ = value;
}
inline void MergeOperationArchive::set_merge_type(::TST::MergeActionArchive value) {
  _internal_set_merge_type(value);
  // @@protoc_insertion_point(field_set:TST.MergeOperationArchive.merge_type)
}

// repeated .TSP.UUIDRectArchive merge_ranges = 2;
inline int MergeOperationArchive::_internal_merge_ranges_size() const {
  return merge_ranges_.size();
}
inline int MergeOperationArchive::merge_ranges_size() const {
  return _internal_merge_ranges_size();
}
inline ::TSP::UUIDRectArchive* MergeOperationArchive::mutable_merge_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:TST.MergeOperationArchive.merge_ranges)
  return merge_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >*
MergeOperationArchive::mutable_merge_ranges() {
  // @@protoc_insertion_point(field_mutable_list:TST.MergeOperationArchive.merge_ranges)
  return &merge_ranges_;
}
inline const ::TSP::UUIDRectArchive& MergeOperationArchive::_internal_merge_ranges(int index) const {
  return merge_ranges_.Get(index);
}
inline const ::TSP::UUIDRectArchive& MergeOperationArchive::merge_ranges(int index) const {
  // @@protoc_insertion_point(field_get:TST.MergeOperationArchive.merge_ranges)
  return _internal_merge_ranges(index);
}
inline ::TSP::UUIDRectArchive* MergeOperationArchive::_internal_add_merge_ranges() {
  return merge_ranges_.Add();
}
inline ::TSP::UUIDRectArchive* MergeOperationArchive::add_merge_ranges() {
  // @@protoc_insertion_point(field_add:TST.MergeOperationArchive.merge_ranges)
  return _internal_add_merge_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDRectArchive >&
MergeOperationArchive::merge_ranges() const {
  // @@protoc_insertion_point(field_list:TST.MergeOperationArchive.merge_ranges)
  return merge_ranges_;
}

// repeated .TSCE.FormulaArchive merge_formulas = 3;
inline int MergeOperationArchive::_internal_merge_formulas_size() const {
  return merge_formulas_.size();
}
inline int MergeOperationArchive::merge_formulas_size() const {
  return _internal_merge_formulas_size();
}
inline ::TSCE::FormulaArchive* MergeOperationArchive::mutable_merge_formulas(int index) {
  // @@protoc_insertion_point(field_mutable:TST.MergeOperationArchive.merge_formulas)
  return merge_formulas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >*
MergeOperationArchive::mutable_merge_formulas() {
  // @@protoc_insertion_point(field_mutable_list:TST.MergeOperationArchive.merge_formulas)
  return &merge_formulas_;
}
inline const ::TSCE::FormulaArchive& MergeOperationArchive::_internal_merge_formulas(int index) const {
  return merge_formulas_.Get(index);
}
inline const ::TSCE::FormulaArchive& MergeOperationArchive::merge_formulas(int index) const {
  // @@protoc_insertion_point(field_get:TST.MergeOperationArchive.merge_formulas)
  return _internal_merge_formulas(index);
}
inline ::TSCE::FormulaArchive* MergeOperationArchive::_internal_add_merge_formulas() {
  return merge_formulas_.Add();
}
inline ::TSCE::FormulaArchive* MergeOperationArchive::add_merge_formulas() {
  // @@protoc_insertion_point(field_add:TST.MergeOperationArchive.merge_formulas)
  return _internal_add_merge_formulas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::FormulaArchive >&
MergeOperationArchive::merge_formulas() const {
  // @@protoc_insertion_point(field_list:TST.MergeOperationArchive.merge_formulas)
  return merge_formulas_;
}

// repeated uint32 merge_formula_indexes = 4;
inline int MergeOperationArchive::_internal_merge_formula_indexes_size() const {
  return merge_formula_indexes_.size();
}
inline int MergeOperationArchive::merge_formula_indexes_size() const {
  return _internal_merge_formula_indexes_size();
}
inline void MergeOperationArchive::clear_merge_formula_indexes() {
  merge_formula_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOperationArchive::_internal_merge_formula_indexes(int index) const {
  return merge_formula_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeOperationArchive::merge_formula_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TST.MergeOperationArchive.merge_formula_indexes)
  return _internal_merge_formula_indexes(index);
}
inline void MergeOperationArchive::set_merge_formula_indexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  merge_formula_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TST.MergeOperationArchive.merge_formula_indexes)
}
inline void MergeOperationArchive::_internal_add_merge_formula_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  merge_formula_indexes_.Add(value);
}
inline void MergeOperationArchive::add_merge_formula_indexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_merge_formula_indexes(value);
  // @@protoc_insertion_point(field_add:TST.MergeOperationArchive.merge_formula_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOperationArchive::_internal_merge_formula_indexes() const {
  return merge_formula_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MergeOperationArchive::merge_formula_indexes() const {
  // @@protoc_insertion_point(field_list:TST.MergeOperationArchive.merge_formula_indexes)
  return _internal_merge_formula_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOperationArchive::_internal_mutable_merge_formula_indexes() {
  return &merge_formula_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MergeOperationArchive::mutable_merge_formula_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TST.MergeOperationArchive.merge_formula_indexes)
  return _internal_mutable_merge_formula_indexes();
}

// -------------------------------------------------------------------

// MergeOwnerArchive

// required .TSP.CFUUIDArchive owner_id = 1;
inline bool MergeOwnerArchive::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_id_ != nullptr);
  return value;
}
inline bool MergeOwnerArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline const ::TSP::CFUUIDArchive& MergeOwnerArchive::_internal_owner_id() const {
  const ::TSP::CFUUIDArchive* p = owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& MergeOwnerArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TST.MergeOwnerArchive.owner_id)
  return _internal_owner_id();
}
inline void MergeOwnerArchive::unsafe_arena_set_allocated_owner_id(
    ::TSP::CFUUIDArchive* owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  owner_id_ = owner_id;
  if (owner_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.MergeOwnerArchive.owner_id)
}
inline ::TSP::CFUUIDArchive* MergeOwnerArchive::release_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* MergeOwnerArchive::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TST.MergeOwnerArchive.owner_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* MergeOwnerArchive::_internal_mutable_owner_id() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    owner_id_ = p;
  }
  return owner_id_;
}
inline ::TSP::CFUUIDArchive* MergeOwnerArchive::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:TST.MergeOwnerArchive.owner_id)
  return _internal_mutable_owner_id();
}
inline void MergeOwnerArchive::set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TST.MergeOwnerArchive.owner_id)
}

// optional .TST.FormulaStoreArchive formula_store = 2;
inline bool MergeOwnerArchive::_internal_has_formula_store() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || formula_store_ != nullptr);
  return value;
}
inline bool MergeOwnerArchive::has_formula_store() const {
  return _internal_has_formula_store();
}
inline void MergeOwnerArchive::clear_formula_store() {
  if (formula_store_ != nullptr) formula_store_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaStoreArchive& MergeOwnerArchive::_internal_formula_store() const {
  const ::TST::FormulaStoreArchive* p = formula_store_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaStoreArchive&>(
      ::TST::_FormulaStoreArchive_default_instance_);
}
inline const ::TST::FormulaStoreArchive& MergeOwnerArchive::formula_store() const {
  // @@protoc_insertion_point(field_get:TST.MergeOwnerArchive.formula_store)
  return _internal_formula_store();
}
inline void MergeOwnerArchive::unsafe_arena_set_allocated_formula_store(
    ::TST::FormulaStoreArchive* formula_store) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_store_);
  }
  formula_store_ = formula_store;
  if (formula_store) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.MergeOwnerArchive.formula_store)
}
inline ::TST::FormulaStoreArchive* MergeOwnerArchive::release_formula_store() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaStoreArchive* temp = formula_store_;
  formula_store_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::FormulaStoreArchive* MergeOwnerArchive::unsafe_arena_release_formula_store() {
  // @@protoc_insertion_point(field_release:TST.MergeOwnerArchive.formula_store)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaStoreArchive* temp = formula_store_;
  formula_store_ = nullptr;
  return temp;
}
inline ::TST::FormulaStoreArchive* MergeOwnerArchive::_internal_mutable_formula_store() {
  _has_bits_[0] |= 0x00000002u;
  if (formula_store_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaStoreArchive>(GetArena());
    formula_store_ = p;
  }
  return formula_store_;
}
inline ::TST::FormulaStoreArchive* MergeOwnerArchive::mutable_formula_store() {
  // @@protoc_insertion_point(field_mutable:TST.MergeOwnerArchive.formula_store)
  return _internal_mutable_formula_store();
}
inline void MergeOwnerArchive::set_allocated_formula_store(::TST::FormulaStoreArchive* formula_store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formula_store_;
  }
  if (formula_store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formula_store);
    if (message_arena != submessage_arena) {
      formula_store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_store, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  formula_store_ = formula_store;
  // @@protoc_insertion_point(field_set_allocated:TST.MergeOwnerArchive.formula_store)
}

// -------------------------------------------------------------------

// PencilAnnotationArchive

// optional .TSP.Reference table_info = 1;
inline bool PencilAnnotationArchive::_internal_has_table_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_info_ != nullptr);
  return value;
}
inline bool PencilAnnotationArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& PencilAnnotationArchive::_internal_table_info() const {
  const ::TSP::Reference* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PencilAnnotationArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.PencilAnnotationArchive.table_info)
  return _internal_table_info();
}
inline void PencilAnnotationArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PencilAnnotationArchive.table_info)
}
inline ::TSP::Reference* PencilAnnotationArchive::release_table_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PencilAnnotationArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.PencilAnnotationArchive.table_info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PencilAnnotationArchive::_internal_mutable_table_info() {
  _has_bits_[0] |= 0x00000001u;
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::TSP::Reference* PencilAnnotationArchive::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:TST.PencilAnnotationArchive.table_info)
  return _internal_mutable_table_info();
}
inline void PencilAnnotationArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info)->GetArena();
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.PencilAnnotationArchive.table_info)
}

// optional .TSP.Reference pencil_annotation_storage = 2;
inline bool PencilAnnotationArchive::_internal_has_pencil_annotation_storage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_storage_ != nullptr);
  return value;
}
inline bool PencilAnnotationArchive::has_pencil_annotation_storage() const {
  return _internal_has_pencil_annotation_storage();
}
inline const ::TSP::Reference& PencilAnnotationArchive::_internal_pencil_annotation_storage() const {
  const ::TSP::Reference* p = pencil_annotation_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PencilAnnotationArchive::pencil_annotation_storage() const {
  // @@protoc_insertion_point(field_get:TST.PencilAnnotationArchive.pencil_annotation_storage)
  return _internal_pencil_annotation_storage();
}
inline void PencilAnnotationArchive::unsafe_arena_set_allocated_pencil_annotation_storage(
    ::TSP::Reference* pencil_annotation_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_storage_);
  }
  pencil_annotation_storage_ = pencil_annotation_storage;
  if (pencil_annotation_storage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PencilAnnotationArchive.pencil_annotation_storage)
}
inline ::TSP::Reference* PencilAnnotationArchive::release_pencil_annotation_storage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = pencil_annotation_storage_;
  pencil_annotation_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PencilAnnotationArchive::unsafe_arena_release_pencil_annotation_storage() {
  // @@protoc_insertion_point(field_release:TST.PencilAnnotationArchive.pencil_annotation_storage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = pencil_annotation_storage_;
  pencil_annotation_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PencilAnnotationArchive::_internal_mutable_pencil_annotation_storage() {
  _has_bits_[0] |= 0x00000002u;
  if (pencil_annotation_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    pencil_annotation_storage_ = p;
  }
  return pencil_annotation_storage_;
}
inline ::TSP::Reference* PencilAnnotationArchive::mutable_pencil_annotation_storage() {
  // @@protoc_insertion_point(field_mutable:TST.PencilAnnotationArchive.pencil_annotation_storage)
  return _internal_mutable_pencil_annotation_storage();
}
inline void PencilAnnotationArchive::set_allocated_pencil_annotation_storage(::TSP::Reference* pencil_annotation_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_storage_);
  }
  if (pencil_annotation_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_storage)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pencil_annotation_storage_ = pencil_annotation_storage;
  // @@protoc_insertion_point(field_set_allocated:TST.PencilAnnotationArchive.pencil_annotation_storage)
}

// -------------------------------------------------------------------

// PencilAnnotationOwnerArchive

// required .TSP.CFUUIDArchive owner_id = 1;
inline bool PencilAnnotationOwnerArchive::_internal_has_owner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_id_ != nullptr);
  return value;
}
inline bool PencilAnnotationOwnerArchive::has_owner_id() const {
  return _internal_has_owner_id();
}
inline const ::TSP::CFUUIDArchive& PencilAnnotationOwnerArchive::_internal_owner_id() const {
  const ::TSP::CFUUIDArchive* p = owner_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::CFUUIDArchive&>(
      ::TSP::_CFUUIDArchive_default_instance_);
}
inline const ::TSP::CFUUIDArchive& PencilAnnotationOwnerArchive::owner_id() const {
  // @@protoc_insertion_point(field_get:TST.PencilAnnotationOwnerArchive.owner_id)
  return _internal_owner_id();
}
inline void PencilAnnotationOwnerArchive::unsafe_arena_set_allocated_owner_id(
    ::TSP::CFUUIDArchive* owner_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  owner_id_ = owner_id;
  if (owner_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PencilAnnotationOwnerArchive.owner_id)
}
inline ::TSP::CFUUIDArchive* PencilAnnotationOwnerArchive::release_owner_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::CFUUIDArchive* PencilAnnotationOwnerArchive::unsafe_arena_release_owner_id() {
  // @@protoc_insertion_point(field_release:TST.PencilAnnotationOwnerArchive.owner_id)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::CFUUIDArchive* temp = owner_id_;
  owner_id_ = nullptr;
  return temp;
}
inline ::TSP::CFUUIDArchive* PencilAnnotationOwnerArchive::_internal_mutable_owner_id() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::CFUUIDArchive>(GetArena());
    owner_id_ = p;
  }
  return owner_id_;
}
inline ::TSP::CFUUIDArchive* PencilAnnotationOwnerArchive::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:TST.PencilAnnotationOwnerArchive.owner_id)
  return _internal_mutable_owner_id();
}
inline void PencilAnnotationOwnerArchive::set_allocated_owner_id(::TSP::CFUUIDArchive* owner_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id_);
  }
  if (owner_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_id)->GetArena();
    if (message_arena != submessage_arena) {
      owner_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_id_ = owner_id;
  // @@protoc_insertion_point(field_set_allocated:TST.PencilAnnotationOwnerArchive.owner_id)
}

// optional .TST.FormulaStoreArchive formula_store = 2;
inline bool PencilAnnotationOwnerArchive::_internal_has_formula_store() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || formula_store_ != nullptr);
  return value;
}
inline bool PencilAnnotationOwnerArchive::has_formula_store() const {
  return _internal_has_formula_store();
}
inline void PencilAnnotationOwnerArchive::clear_formula_store() {
  if (formula_store_ != nullptr) formula_store_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::FormulaStoreArchive& PencilAnnotationOwnerArchive::_internal_formula_store() const {
  const ::TST::FormulaStoreArchive* p = formula_store_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::FormulaStoreArchive&>(
      ::TST::_FormulaStoreArchive_default_instance_);
}
inline const ::TST::FormulaStoreArchive& PencilAnnotationOwnerArchive::formula_store() const {
  // @@protoc_insertion_point(field_get:TST.PencilAnnotationOwnerArchive.formula_store)
  return _internal_formula_store();
}
inline void PencilAnnotationOwnerArchive::unsafe_arena_set_allocated_formula_store(
    ::TST::FormulaStoreArchive* formula_store) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_store_);
  }
  formula_store_ = formula_store;
  if (formula_store) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.PencilAnnotationOwnerArchive.formula_store)
}
inline ::TST::FormulaStoreArchive* PencilAnnotationOwnerArchive::release_formula_store() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaStoreArchive* temp = formula_store_;
  formula_store_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::FormulaStoreArchive* PencilAnnotationOwnerArchive::unsafe_arena_release_formula_store() {
  // @@protoc_insertion_point(field_release:TST.PencilAnnotationOwnerArchive.formula_store)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::FormulaStoreArchive* temp = formula_store_;
  formula_store_ = nullptr;
  return temp;
}
inline ::TST::FormulaStoreArchive* PencilAnnotationOwnerArchive::_internal_mutable_formula_store() {
  _has_bits_[0] |= 0x00000002u;
  if (formula_store_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::FormulaStoreArchive>(GetArena());
    formula_store_ = p;
  }
  return formula_store_;
}
inline ::TST::FormulaStoreArchive* PencilAnnotationOwnerArchive::mutable_formula_store() {
  // @@protoc_insertion_point(field_mutable:TST.PencilAnnotationOwnerArchive.formula_store)
  return _internal_mutable_formula_store();
}
inline void PencilAnnotationOwnerArchive::set_allocated_formula_store(::TST::FormulaStoreArchive* formula_store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formula_store_;
  }
  if (formula_store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formula_store);
    if (message_arena != submessage_arena) {
      formula_store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_store, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  formula_store_ = formula_store;
  // @@protoc_insertion_point(field_set_allocated:TST.PencilAnnotationOwnerArchive.formula_store)
}

// repeated .TSP.Reference annotations = 3;
inline int PencilAnnotationOwnerArchive::_internal_annotations_size() const {
  return annotations_.size();
}
inline int PencilAnnotationOwnerArchive::annotations_size() const {
  return _internal_annotations_size();
}
inline ::TSP::Reference* PencilAnnotationOwnerArchive::mutable_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:TST.PencilAnnotationOwnerArchive.annotations)
  return annotations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
PencilAnnotationOwnerArchive::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_list:TST.PencilAnnotationOwnerArchive.annotations)
  return &annotations_;
}
inline const ::TSP::Reference& PencilAnnotationOwnerArchive::_internal_annotations(int index) const {
  return annotations_.Get(index);
}
inline const ::TSP::Reference& PencilAnnotationOwnerArchive::annotations(int index) const {
  // @@protoc_insertion_point(field_get:TST.PencilAnnotationOwnerArchive.annotations)
  return _internal_annotations(index);
}
inline ::TSP::Reference* PencilAnnotationOwnerArchive::_internal_add_annotations() {
  return annotations_.Add();
}
inline ::TSP::Reference* PencilAnnotationOwnerArchive::add_annotations() {
  // @@protoc_insertion_point(field_add:TST.PencilAnnotationOwnerArchive.annotations)
  return _internal_add_annotations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
PencilAnnotationOwnerArchive::annotations() const {
  // @@protoc_insertion_point(field_list:TST.PencilAnnotationOwnerArchive.annotations)
  return annotations_;
}

// -------------------------------------------------------------------

// AccumulatorArchive

// optional uint32 bool_count = 1;
inline bool AccumulatorArchive::_internal_has_bool_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_bool_count() const {
  return _internal_has_bool_count();
}
inline void AccumulatorArchive::clear_bool_count() {
  bool_count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_bool_count() const {
  return bool_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::bool_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.bool_count)
  return _internal_bool_count();
}
inline void AccumulatorArchive::_internal_set_bool_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  bool_count_ = value;
}
inline void AccumulatorArchive::set_bool_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bool_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.bool_count)
}

// optional uint32 bool_true_count = 12;
inline bool AccumulatorArchive::_internal_has_bool_true_count() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_bool_true_count() const {
  return _internal_has_bool_true_count();
}
inline void AccumulatorArchive::clear_bool_true_count() {
  bool_true_count_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_bool_true_count() const {
  return bool_true_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::bool_true_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.bool_true_count)
  return _internal_bool_true_count();
}
inline void AccumulatorArchive::_internal_set_bool_true_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  bool_true_count_ = value;
}
inline void AccumulatorArchive::set_bool_true_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bool_true_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.bool_true_count)
}

// optional uint32 number_count = 2;
inline bool AccumulatorArchive::_internal_has_number_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_number_count() const {
  return _internal_has_number_count();
}
inline void AccumulatorArchive::clear_number_count() {
  number_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_number_count() const {
  return number_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::number_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.number_count)
  return _internal_number_count();
}
inline void AccumulatorArchive::_internal_set_number_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  number_count_ = value;
}
inline void AccumulatorArchive::set_number_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.number_count)
}

// optional uint32 date_count = 3;
inline bool AccumulatorArchive::_internal_has_date_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_date_count() const {
  return _internal_has_date_count();
}
inline void AccumulatorArchive::clear_date_count() {
  date_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_date_count() const {
  return date_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::date_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.date_count)
  return _internal_date_count();
}
inline void AccumulatorArchive::_internal_set_date_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  date_count_ = value;
}
inline void AccumulatorArchive::set_date_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_date_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.date_count)
}

// optional uint32 duration_count = 4;
inline bool AccumulatorArchive::_internal_has_duration_count() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_duration_count() const {
  return _internal_has_duration_count();
}
inline void AccumulatorArchive::clear_duration_count() {
  duration_count_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_duration_count() const {
  return duration_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::duration_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.duration_count)
  return _internal_duration_count();
}
inline void AccumulatorArchive::_internal_set_duration_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  duration_count_ = value;
}
inline void AccumulatorArchive::set_duration_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.duration_count)
}

// optional uint32 string_count = 5;
inline bool AccumulatorArchive::_internal_has_string_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_string_count() const {
  return _internal_has_string_count();
}
inline void AccumulatorArchive::clear_string_count() {
  string_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_string_count() const {
  return string_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::string_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.string_count)
  return _internal_string_count();
}
inline void AccumulatorArchive::_internal_set_string_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  string_count_ = value;
}
inline void AccumulatorArchive::set_string_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_string_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.string_count)
}

// optional uint32 error_count = 13;
inline bool AccumulatorArchive::_internal_has_error_count() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_error_count() const {
  return _internal_has_error_count();
}
inline void AccumulatorArchive::clear_error_count() {
  error_count_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::_internal_error_count() const {
  return error_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccumulatorArchive::error_count() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.error_count)
  return _internal_error_count();
}
inline void AccumulatorArchive::_internal_set_error_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  error_count_ = value;
}
inline void AccumulatorArchive::set_error_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error_count(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.error_count)
}

// optional bool is_circular_ref = 14;
inline bool AccumulatorArchive::_internal_has_is_circular_ref() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_is_circular_ref() const {
  return _internal_has_is_circular_ref();
}
inline void AccumulatorArchive::clear_is_circular_ref() {
  is_circular_ref_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool AccumulatorArchive::_internal_is_circular_ref() const {
  return is_circular_ref_;
}
inline bool AccumulatorArchive::is_circular_ref() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.is_circular_ref)
  return _internal_is_circular_ref();
}
inline void AccumulatorArchive::_internal_set_is_circular_ref(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_circular_ref_ = value;
}
inline void AccumulatorArchive::set_is_circular_ref(bool value) {
  _internal_set_is_circular_ref(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.is_circular_ref)
}

// required .TSCE.CellValueArchive min_value = 6;
inline bool AccumulatorArchive::_internal_has_min_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || min_value_ != nullptr);
  return value;
}
inline bool AccumulatorArchive::has_min_value() const {
  return _internal_has_min_value();
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::_internal_min_value() const {
  const ::TSCE::CellValueArchive* p = min_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::min_value() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.min_value)
  return _internal_min_value();
}
inline void AccumulatorArchive::unsafe_arena_set_allocated_min_value(
    ::TSCE::CellValueArchive* min_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_value_);
  }
  min_value_ = min_value;
  if (min_value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.AccumulatorArchive.min_value)
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::release_min_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellValueArchive* temp = min_value_;
  min_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::unsafe_arena_release_min_value() {
  // @@protoc_insertion_point(field_release:TST.AccumulatorArchive.min_value)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellValueArchive* temp = min_value_;
  min_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::_internal_mutable_min_value() {
  _has_bits_[0] |= 0x00000001u;
  if (min_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    min_value_ = p;
  }
  return min_value_;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::mutable_min_value() {
  // @@protoc_insertion_point(field_mutable:TST.AccumulatorArchive.min_value)
  return _internal_mutable_min_value();
}
inline void AccumulatorArchive::set_allocated_min_value(::TSCE::CellValueArchive* min_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_value_);
  }
  if (min_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_value)->GetArena();
    if (message_arena != submessage_arena) {
      min_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_value_ = min_value;
  // @@protoc_insertion_point(field_set_allocated:TST.AccumulatorArchive.min_value)
}

// required .TSCE.CellValueArchive max_value = 7;
inline bool AccumulatorArchive::_internal_has_max_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || max_value_ != nullptr);
  return value;
}
inline bool AccumulatorArchive::has_max_value() const {
  return _internal_has_max_value();
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::_internal_max_value() const {
  const ::TSCE::CellValueArchive* p = max_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::max_value() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.max_value)
  return _internal_max_value();
}
inline void AccumulatorArchive::unsafe_arena_set_allocated_max_value(
    ::TSCE::CellValueArchive* max_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_value_);
  }
  max_value_ = max_value;
  if (max_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.AccumulatorArchive.max_value)
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::release_max_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellValueArchive* temp = max_value_;
  max_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::unsafe_arena_release_max_value() {
  // @@protoc_insertion_point(field_release:TST.AccumulatorArchive.max_value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellValueArchive* temp = max_value_;
  max_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::_internal_mutable_max_value() {
  _has_bits_[0] |= 0x00000002u;
  if (max_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    max_value_ = p;
  }
  return max_value_;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::mutable_max_value() {
  // @@protoc_insertion_point(field_mutable:TST.AccumulatorArchive.max_value)
  return _internal_mutable_max_value();
}
inline void AccumulatorArchive::set_allocated_max_value(::TSCE::CellValueArchive* max_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_value_);
  }
  if (max_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_value)->GetArena();
    if (message_arena != submessage_arena) {
      max_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  max_value_ = max_value;
  // @@protoc_insertion_point(field_set_allocated:TST.AccumulatorArchive.max_value)
}

// required .TSCE.CellValueArchive number_total_value = 8;
inline bool AccumulatorArchive::_internal_has_number_total_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || number_total_value_ != nullptr);
  return value;
}
inline bool AccumulatorArchive::has_number_total_value() const {
  return _internal_has_number_total_value();
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::_internal_number_total_value() const {
  const ::TSCE::CellValueArchive* p = number_total_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::number_total_value() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.number_total_value)
  return _internal_number_total_value();
}
inline void AccumulatorArchive::unsafe_arena_set_allocated_number_total_value(
    ::TSCE::CellValueArchive* number_total_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_total_value_);
  }
  number_total_value_ = number_total_value;
  if (number_total_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.AccumulatorArchive.number_total_value)
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::release_number_total_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellValueArchive* temp = number_total_value_;
  number_total_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::unsafe_arena_release_number_total_value() {
  // @@protoc_insertion_point(field_release:TST.AccumulatorArchive.number_total_value)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellValueArchive* temp = number_total_value_;
  number_total_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::_internal_mutable_number_total_value() {
  _has_bits_[0] |= 0x00000004u;
  if (number_total_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    number_total_value_ = p;
  }
  return number_total_value_;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::mutable_number_total_value() {
  // @@protoc_insertion_point(field_mutable:TST.AccumulatorArchive.number_total_value)
  return _internal_mutable_number_total_value();
}
inline void AccumulatorArchive::set_allocated_number_total_value(::TSCE::CellValueArchive* number_total_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_total_value_);
  }
  if (number_total_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(number_total_value)->GetArena();
    if (message_arena != submessage_arena) {
      number_total_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number_total_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  number_total_value_ = number_total_value;
  // @@protoc_insertion_point(field_set_allocated:TST.AccumulatorArchive.number_total_value)
}

// optional .TSCE.CellValueArchive first_date_seen = 9;
inline bool AccumulatorArchive::_internal_has_first_date_seen() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || first_date_seen_ != nullptr);
  return value;
}
inline bool AccumulatorArchive::has_first_date_seen() const {
  return _internal_has_first_date_seen();
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::_internal_first_date_seen() const {
  const ::TSCE::CellValueArchive* p = first_date_seen_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& AccumulatorArchive::first_date_seen() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.first_date_seen)
  return _internal_first_date_seen();
}
inline void AccumulatorArchive::unsafe_arena_set_allocated_first_date_seen(
    ::TSCE::CellValueArchive* first_date_seen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_date_seen_);
  }
  first_date_seen_ = first_date_seen;
  if (first_date_seen) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.AccumulatorArchive.first_date_seen)
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::release_first_date_seen() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellValueArchive* temp = first_date_seen_;
  first_date_seen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::unsafe_arena_release_first_date_seen() {
  // @@protoc_insertion_point(field_release:TST.AccumulatorArchive.first_date_seen)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellValueArchive* temp = first_date_seen_;
  first_date_seen_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::_internal_mutable_first_date_seen() {
  _has_bits_[0] |= 0x00000008u;
  if (first_date_seen_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    first_date_seen_ = p;
  }
  return first_date_seen_;
}
inline ::TSCE::CellValueArchive* AccumulatorArchive::mutable_first_date_seen() {
  // @@protoc_insertion_point(field_mutable:TST.AccumulatorArchive.first_date_seen)
  return _internal_mutable_first_date_seen();
}
inline void AccumulatorArchive::set_allocated_first_date_seen(::TSCE::CellValueArchive* first_date_seen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_date_seen_);
  }
  if (first_date_seen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_date_seen)->GetArena();
    if (message_arena != submessage_arena) {
      first_date_seen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first_date_seen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  first_date_seen_ = first_date_seen;
  // @@protoc_insertion_point(field_set_allocated:TST.AccumulatorArchive.first_date_seen)
}

// optional double total_secs_since_ref_date = 10;
inline bool AccumulatorArchive::_internal_has_total_secs_since_ref_date() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_total_secs_since_ref_date() const {
  return _internal_has_total_secs_since_ref_date();
}
inline void AccumulatorArchive::clear_total_secs_since_ref_date() {
  total_secs_since_ref_date_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double AccumulatorArchive::_internal_total_secs_since_ref_date() const {
  return total_secs_since_ref_date_;
}
inline double AccumulatorArchive::total_secs_since_ref_date() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.total_secs_since_ref_date)
  return _internal_total_secs_since_ref_date();
}
inline void AccumulatorArchive::_internal_set_total_secs_since_ref_date(double value) {
  _has_bits_[0] |= 0x00000400u;
  total_secs_since_ref_date_ = value;
}
inline void AccumulatorArchive::set_total_secs_since_ref_date(double value) {
  _internal_set_total_secs_since_ref_date(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.total_secs_since_ref_date)
}

// optional double secs_to_add = 11;
inline bool AccumulatorArchive::_internal_has_secs_to_add() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AccumulatorArchive::has_secs_to_add() const {
  return _internal_has_secs_to_add();
}
inline void AccumulatorArchive::clear_secs_to_add() {
  secs_to_add_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double AccumulatorArchive::_internal_secs_to_add() const {
  return secs_to_add_;
}
inline double AccumulatorArchive::secs_to_add() const {
  // @@protoc_insertion_point(field_get:TST.AccumulatorArchive.secs_to_add)
  return _internal_secs_to_add();
}
inline void AccumulatorArchive::_internal_set_secs_to_add(double value) {
  _has_bits_[0] |= 0x00000800u;
  secs_to_add_ = value;
}
inline void AccumulatorArchive::set_secs_to_add(double value) {
  _internal_set_secs_to_add(value);
  // @@protoc_insertion_point(field_set:TST.AccumulatorArchive.secs_to_add)
}

// -------------------------------------------------------------------

// GroupColumnArchive

// required .TSP.UUID column_uid = 1;
inline bool GroupColumnArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool GroupColumnArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& GroupColumnArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& GroupColumnArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TST.GroupColumnArchive.column_uid)
  return _internal_column_uid();
}
inline void GroupColumnArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.GroupColumnArchive.column_uid)
}
inline ::TSP::UUID* GroupColumnArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* GroupColumnArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TST.GroupColumnArchive.column_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* GroupColumnArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* GroupColumnArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TST.GroupColumnArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void GroupColumnArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.GroupColumnArchive.column_uid)
}

// required .TST.GroupingType grouping_type = 2;
inline bool GroupColumnArchive::_internal_has_grouping_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GroupColumnArchive::has_grouping_type() const {
  return _internal_has_grouping_type();
}
inline void GroupColumnArchive::clear_grouping_type() {
  grouping_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TST::GroupingType GroupColumnArchive::_internal_grouping_type() const {
  return static_cast< ::TST::GroupingType >(grouping_type_);
}
inline ::TST::GroupingType GroupColumnArchive::grouping_type() const {
  // @@protoc_insertion_point(field_get:TST.GroupColumnArchive.grouping_type)
  return _internal_grouping_type();
}
inline void GroupColumnArchive::_internal_set_grouping_type(::TST::GroupingType value) {
  assert(::TST::GroupingType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  grouping_type_ = value;
}
inline void GroupColumnArchive::set_grouping_type(::TST::GroupingType value) {
  _internal_set_grouping_type(value);
  // @@protoc_insertion_point(field_set:TST.GroupColumnArchive.grouping_type)
}

// optional .TSCE.FunctorArchive grouping_functor = 3;
inline bool GroupColumnArchive::_internal_has_grouping_functor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || grouping_functor_ != nullptr);
  return value;
}
inline bool GroupColumnArchive::has_grouping_functor() const {
  return _internal_has_grouping_functor();
}
inline const ::TSCE::FunctorArchive& GroupColumnArchive::_internal_grouping_functor() const {
  const ::TSCE::FunctorArchive* p = grouping_functor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::FunctorArchive&>(
      ::TSCE::_FunctorArchive_default_instance_);
}
inline const ::TSCE::FunctorArchive& GroupColumnArchive::grouping_functor() const {
  // @@protoc_insertion_point(field_get:TST.GroupColumnArchive.grouping_functor)
  return _internal_grouping_functor();
}
inline void GroupColumnArchive::unsafe_arena_set_allocated_grouping_functor(
    ::TSCE::FunctorArchive* grouping_functor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_functor_);
  }
  grouping_functor_ = grouping_functor;
  if (grouping_functor) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.GroupColumnArchive.grouping_functor)
}
inline ::TSCE::FunctorArchive* GroupColumnArchive::release_grouping_functor() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::FunctorArchive* temp = grouping_functor_;
  grouping_functor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::FunctorArchive* GroupColumnArchive::unsafe_arena_release_grouping_functor() {
  // @@protoc_insertion_point(field_release:TST.GroupColumnArchive.grouping_functor)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::FunctorArchive* temp = grouping_functor_;
  grouping_functor_ = nullptr;
  return temp;
}
inline ::TSCE::FunctorArchive* GroupColumnArchive::_internal_mutable_grouping_functor() {
  _has_bits_[0] |= 0x00000002u;
  if (grouping_functor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::FunctorArchive>(GetArena());
    grouping_functor_ = p;
  }
  return grouping_functor_;
}
inline ::TSCE::FunctorArchive* GroupColumnArchive::mutable_grouping_functor() {
  // @@protoc_insertion_point(field_mutable:TST.GroupColumnArchive.grouping_functor)
  return _internal_mutable_grouping_functor();
}
inline void GroupColumnArchive::set_allocated_grouping_functor(::TSCE::FunctorArchive* grouping_functor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_functor_);
  }
  if (grouping_functor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_functor)->GetArena();
    if (message_arena != submessage_arena) {
      grouping_functor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_functor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  grouping_functor_ = grouping_functor;
  // @@protoc_insertion_point(field_set_allocated:TST.GroupColumnArchive.grouping_functor)
}

// optional .TSP.UUID grouping_column_uid = 4;
inline bool GroupColumnArchive::_internal_has_grouping_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || grouping_column_uid_ != nullptr);
  return value;
}
inline bool GroupColumnArchive::has_grouping_column_uid() const {
  return _internal_has_grouping_column_uid();
}
inline const ::TSP::UUID& GroupColumnArchive::_internal_grouping_column_uid() const {
  const ::TSP::UUID* p = grouping_column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& GroupColumnArchive::grouping_column_uid() const {
  // @@protoc_insertion_point(field_get:TST.GroupColumnArchive.grouping_column_uid)
  return _internal_grouping_column_uid();
}
inline void GroupColumnArchive::unsafe_arena_set_allocated_grouping_column_uid(
    ::TSP::UUID* grouping_column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_uid_);
  }
  grouping_column_uid_ = grouping_column_uid;
  if (grouping_column_uid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.GroupColumnArchive.grouping_column_uid)
}
inline ::TSP::UUID* GroupColumnArchive::release_grouping_column_uid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = grouping_column_uid_;
  grouping_column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* GroupColumnArchive::unsafe_arena_release_grouping_column_uid() {
  // @@protoc_insertion_point(field_release:TST.GroupColumnArchive.grouping_column_uid)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = grouping_column_uid_;
  grouping_column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* GroupColumnArchive::_internal_mutable_grouping_column_uid() {
  _has_bits_[0] |= 0x00000004u;
  if (grouping_column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    grouping_column_uid_ = p;
  }
  return grouping_column_uid_;
}
inline ::TSP::UUID* GroupColumnArchive::mutable_grouping_column_uid() {
  // @@protoc_insertion_point(field_mutable:TST.GroupColumnArchive.grouping_column_uid)
  return _internal_mutable_grouping_column_uid();
}
inline void GroupColumnArchive::set_allocated_grouping_column_uid(::TSP::UUID* grouping_column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_uid_);
  }
  if (grouping_column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      grouping_column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  grouping_column_uid_ = grouping_column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.GroupColumnArchive.grouping_column_uid)
}

// -------------------------------------------------------------------

// GroupColumnListArchive

// repeated .TST.GroupColumnArchive group_column = 1;
inline int GroupColumnListArchive::_internal_group_column_size() const {
  return group_column_.size();
}
inline int GroupColumnListArchive::group_column_size() const {
  return _internal_group_column_size();
}
inline void GroupColumnListArchive::clear_group_column() {
  group_column_.Clear();
}
inline ::TST::GroupColumnArchive* GroupColumnListArchive::mutable_group_column(int index) {
  // @@protoc_insertion_point(field_mutable:TST.GroupColumnListArchive.group_column)
  return group_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >*
GroupColumnListArchive::mutable_group_column() {
  // @@protoc_insertion_point(field_mutable_list:TST.GroupColumnListArchive.group_column)
  return &group_column_;
}
inline const ::TST::GroupColumnArchive& GroupColumnListArchive::_internal_group_column(int index) const {
  return group_column_.Get(index);
}
inline const ::TST::GroupColumnArchive& GroupColumnListArchive::group_column(int index) const {
  // @@protoc_insertion_point(field_get:TST.GroupColumnListArchive.group_column)
  return _internal_group_column(index);
}
inline ::TST::GroupColumnArchive* GroupColumnListArchive::_internal_add_group_column() {
  return group_column_.Add();
}
inline ::TST::GroupColumnArchive* GroupColumnListArchive::add_group_column() {
  // @@protoc_insertion_point(field_add:TST.GroupColumnListArchive.group_column)
  return _internal_add_group_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >&
GroupColumnListArchive::group_column() const {
  // @@protoc_insertion_point(field_list:TST.GroupColumnListArchive.group_column)
  return group_column_;
}

// -------------------------------------------------------------------

// ColumnAggregateArchive

// required .TSP.UUID column_uid = 1;
inline bool ColumnAggregateArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool ColumnAggregateArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& ColumnAggregateArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ColumnAggregateArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TST.ColumnAggregateArchive.column_uid)
  return _internal_column_uid();
}
inline void ColumnAggregateArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ColumnAggregateArchive.column_uid)
}
inline ::TSP::UUID* ColumnAggregateArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ColumnAggregateArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TST.ColumnAggregateArchive.column_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ColumnAggregateArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* ColumnAggregateArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TST.ColumnAggregateArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void ColumnAggregateArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.ColumnAggregateArchive.column_uid)
}

// required uint32 level = 2;
inline bool ColumnAggregateArchive::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnAggregateArchive::has_level() const {
  return _internal_has_level();
}
inline void ColumnAggregateArchive::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnAggregateArchive::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColumnAggregateArchive::level() const {
  // @@protoc_insertion_point(field_get:TST.ColumnAggregateArchive.level)
  return _internal_level();
}
inline void ColumnAggregateArchive::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void ColumnAggregateArchive::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TST.ColumnAggregateArchive.level)
}

// required .TST.AggregateType agg_type = 3;
inline bool ColumnAggregateArchive::_internal_has_agg_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColumnAggregateArchive::has_agg_type() const {
  return _internal_has_agg_type();
}
inline void ColumnAggregateArchive::clear_agg_type() {
  agg_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TST::AggregateType ColumnAggregateArchive::_internal_agg_type() const {
  return static_cast< ::TST::AggregateType >(agg_type_);
}
inline ::TST::AggregateType ColumnAggregateArchive::agg_type() const {
  // @@protoc_insertion_point(field_get:TST.ColumnAggregateArchive.agg_type)
  return _internal_agg_type();
}
inline void ColumnAggregateArchive::_internal_set_agg_type(::TST::AggregateType value) {
  assert(::TST::AggregateType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  agg_type_ = value;
}
inline void ColumnAggregateArchive::set_agg_type(::TST::AggregateType value) {
  _internal_set_agg_type(value);
  // @@protoc_insertion_point(field_set:TST.ColumnAggregateArchive.agg_type)
}

// -------------------------------------------------------------------

// ColumnAggregateListArchive

// repeated .TST.ColumnAggregateArchive aggregates = 1;
inline int ColumnAggregateListArchive::_internal_aggregates_size() const {
  return aggregates_.size();
}
inline int ColumnAggregateListArchive::aggregates_size() const {
  return _internal_aggregates_size();
}
inline void ColumnAggregateListArchive::clear_aggregates() {
  aggregates_.Clear();
}
inline ::TST::ColumnAggregateArchive* ColumnAggregateListArchive::mutable_aggregates(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ColumnAggregateListArchive.aggregates)
  return aggregates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >*
ColumnAggregateListArchive::mutable_aggregates() {
  // @@protoc_insertion_point(field_mutable_list:TST.ColumnAggregateListArchive.aggregates)
  return &aggregates_;
}
inline const ::TST::ColumnAggregateArchive& ColumnAggregateListArchive::_internal_aggregates(int index) const {
  return aggregates_.Get(index);
}
inline const ::TST::ColumnAggregateArchive& ColumnAggregateListArchive::aggregates(int index) const {
  // @@protoc_insertion_point(field_get:TST.ColumnAggregateListArchive.aggregates)
  return _internal_aggregates(index);
}
inline ::TST::ColumnAggregateArchive* ColumnAggregateListArchive::_internal_add_aggregates() {
  return aggregates_.Add();
}
inline ::TST::ColumnAggregateArchive* ColumnAggregateListArchive::add_aggregates() {
  // @@protoc_insertion_point(field_add:TST.ColumnAggregateListArchive.aggregates)
  return _internal_add_aggregates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >&
ColumnAggregateListArchive::aggregates() const {
  // @@protoc_insertion_point(field_list:TST.ColumnAggregateListArchive.aggregates)
  return aggregates_;
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive_AggNodeArchive

// required .TSCE.CellCoordinateArchive formula_coord = 1;
inline bool CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_has_formula_coord() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || formula_coord_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_AggNodeArchive::has_formula_coord() const {
  return _internal_has_formula_coord();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_formula_coord() const {
  const ::TSCE::CellCoordinateArchive* p = formula_coord_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive_AggNodeArchive::formula_coord() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.formula_coord)
  return _internal_formula_coord();
}
inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::unsafe_arena_set_allocated_formula_coord(
    ::TSCE::CellCoordinateArchive* formula_coord) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_coord_);
  }
  formula_coord_ = formula_coord;
  if (formula_coord) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.formula_coord)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::release_formula_coord() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = formula_coord_;
  formula_coord_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::unsafe_arena_release_formula_coord() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.formula_coord)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellCoordinateArchive* temp = formula_coord_;
  formula_coord_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_mutable_formula_coord() {
  _has_bits_[0] |= 0x00000001u;
  if (formula_coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    formula_coord_ = p;
  }
  return formula_coord_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::mutable_formula_coord() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.formula_coord)
  return _internal_mutable_formula_coord();
}
inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::set_allocated_formula_coord(::TSCE::CellCoordinateArchive* formula_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_coord_);
  }
  if (formula_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_coord)->GetArena();
    if (message_arena != submessage_arena) {
      formula_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_coord, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_coord_ = formula_coord;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.formula_coord)
}

// optional .TST.AccumulatorArchive accum = 2;
inline bool CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_has_accum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || accum_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_AggNodeArchive::has_accum() const {
  return _internal_has_accum();
}
inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::clear_accum() {
  if (accum_ != nullptr) accum_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::AccumulatorArchive& CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_accum() const {
  const ::TST::AccumulatorArchive* p = accum_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::AccumulatorArchive&>(
      ::TST::_AccumulatorArchive_default_instance_);
}
inline const ::TST::AccumulatorArchive& CategoryOwnerArchive_GroupByArchive_AggNodeArchive::accum() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.accum)
  return _internal_accum();
}
inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::unsafe_arena_set_allocated_accum(
    ::TST::AccumulatorArchive* accum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accum_);
  }
  accum_ = accum;
  if (accum) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.accum)
}
inline ::TST::AccumulatorArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::release_accum() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::AccumulatorArchive* temp = accum_;
  accum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::AccumulatorArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::unsafe_arena_release_accum() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.accum)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::AccumulatorArchive* temp = accum_;
  accum_ = nullptr;
  return temp;
}
inline ::TST::AccumulatorArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_mutable_accum() {
  _has_bits_[0] |= 0x00000002u;
  if (accum_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::AccumulatorArchive>(GetArena());
    accum_ = p;
  }
  return accum_;
}
inline ::TST::AccumulatorArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::mutable_accum() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.accum)
  return _internal_mutable_accum();
}
inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::set_allocated_accum(::TST::AccumulatorArchive* accum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accum_;
  }
  if (accum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accum);
    if (message_arena != submessage_arena) {
      accum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accum, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  accum_ = accum;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.accum)
}

// repeated .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive child = 3;
inline int CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_child_size() const {
  return child_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_AggNodeArchive::child_size() const {
  return _internal_child_size();
}
inline void CategoryOwnerArchive_GroupByArchive_AggNodeArchive::clear_child() {
  child_.Clear();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive >*
CategoryOwnerArchive_GroupByArchive_AggNodeArchive::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.child)
  return &child_;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_child(int index) const {
  return child_.Get(index);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& CategoryOwnerArchive_GroupByArchive_AggNodeArchive::child(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.child)
  return _internal_child(index);
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::_internal_add_child() {
  return child_.Add();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggNodeArchive::add_child() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.child)
  return _internal_add_child();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive >&
CategoryOwnerArchive_GroupByArchive_AggNodeArchive::child() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive.child)
  return child_;
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive

// repeated .TSCE.CellValueArchive value = 1;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_internal_value_size() const {
  return value_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::value_size() const {
  return _internal_value_size();
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive.value)
  return &value_;
}
inline const ::TSCE::CellValueArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::TSCE::CellValueArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::value(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive.value)
  return _internal_value(index);
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::_internal_add_value() {
  return value_.Add();
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::add_value() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellValueArchive >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive::value() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive.value)
  return value_;
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive

// repeated .TSP.UUID row_uids = 1;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_internal_row_uids_size() const {
  return row_uids_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::row_uids_size() const {
  return _internal_row_uids_size();
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::mutable_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive.row_uids)
  return row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::mutable_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive.row_uids)
  return &row_uids_;
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_internal_row_uids(int index) const {
  return row_uids_.Get(index);
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive.row_uids)
  return _internal_row_uids(index);
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_internal_add_row_uids() {
  return row_uids_.Add();
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::add_row_uids() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive.row_uids)
  return _internal_add_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::row_uids() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive.row_uids)
  return row_uids_;
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive

// optional .TSCE.CellValueArchive cell_value = 1;
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_has_cell_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cell_value_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::has_cell_value() const {
  return _internal_has_cell_value();
}
inline const ::TSCE::CellValueArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_cell_value() const {
  const ::TSCE::CellValueArchive* p = cell_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::cell_value() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.cell_value)
  return _internal_cell_value();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::unsafe_arena_set_allocated_cell_value(
    ::TSCE::CellValueArchive* cell_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_value_);
  }
  cell_value_ = cell_value;
  if (cell_value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.cell_value)
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::release_cell_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellValueArchive* temp = cell_value_;
  cell_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::unsafe_arena_release_cell_value() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.cell_value)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCE::CellValueArchive* temp = cell_value_;
  cell_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_mutable_cell_value() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    cell_value_ = p;
  }
  return cell_value_;
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::mutable_cell_value() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.cell_value)
  return _internal_mutable_cell_value();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::set_allocated_cell_value(::TSCE::CellValueArchive* cell_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_value_);
  }
  if (cell_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_value)->GetArena();
    if (message_arena != submessage_arena) {
      cell_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_value_ = cell_value;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.cell_value)
}

// repeated .TSK.FormatStructArchive formats = 2;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_formats_size() const {
  return formats_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::formats_size() const {
  return _internal_formats_size();
}
inline ::TSK::FormatStructArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::mutable_formats(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.formats)
  return formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormatStructArchive >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::mutable_formats() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.formats)
  return &formats_;
}
inline const ::TSK::FormatStructArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_formats(int index) const {
  return formats_.Get(index);
}
inline const ::TSK::FormatStructArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::formats(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.formats)
  return _internal_formats(index);
}
inline ::TSK::FormatStructArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_add_formats() {
  return formats_.Add();
}
inline ::TSK::FormatStructArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::add_formats() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.formats)
  return _internal_add_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormatStructArchive >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::formats() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.formats)
  return formats_;
}

// repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_row_sets_size() const {
  return row_sets_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::row_sets_size() const {
  return _internal_row_sets_size();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::clear_row_sets() {
  row_sets_.Clear();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::mutable_row_sets(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_sets)
  return row_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::mutable_row_sets() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_sets)
  return &row_sets_;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_row_sets(int index) const {
  return row_sets_.Get(index);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::row_sets(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_sets)
  return _internal_row_sets(index);
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::_internal_add_row_sets() {
  return row_sets_.Add();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::add_row_sets() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_sets)
  return _internal_add_row_sets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive::row_sets() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_sets)
  return row_sets_;
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive_GroupNodeArchive

// required .TSP.UUID group_uid = 1;
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_has_group_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_uid_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::has_group_uid() const {
  return _internal_has_group_uid();
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_group_uid() const {
  const ::TSP::UUID* p = group_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::group_uid() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_uid)
  return _internal_group_uid();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_set_allocated_group_uid(
    ::TSP::UUID* group_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_uid_);
  }
  group_uid_ = group_uid;
  if (group_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_uid)
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::release_group_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_uid_;
  group_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_release_group_uid() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_uid_;
  group_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_mutable_group_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_uid_ = p;
  }
  return group_uid_;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_group_uid() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_uid)
  return _internal_mutable_group_uid();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::set_allocated_group_uid(::TSP::UUID* group_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_uid_);
  }
  if (group_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_uid_ = group_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_uid)
}

// optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive group_value_tuple = 2;
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_has_group_value_tuple() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || group_value_tuple_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::has_group_value_tuple() const {
  return _internal_has_group_value_tuple();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_group_value_tuple() {
  if (group_value_tuple_ != nullptr) group_value_tuple_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_group_value_tuple() const {
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* p = group_value_tuple_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive&>(
      ::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive_default_instance_);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::group_value_tuple() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_value_tuple)
  return _internal_group_value_tuple();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_set_allocated_group_value_tuple(
    ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* group_value_tuple) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_value_tuple_);
  }
  group_value_tuple_ = group_value_tuple;
  if (group_value_tuple) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_value_tuple)
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::release_group_value_tuple() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* temp = group_value_tuple_;
  group_value_tuple_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_release_group_value_tuple() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_value_tuple)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* temp = group_value_tuple_;
  group_value_tuple_ = nullptr;
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_mutable_group_value_tuple() {
  _has_bits_[0] |= 0x00000002u;
  if (group_value_tuple_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive>(GetArena());
    group_value_tuple_ = p;
  }
  return group_value_tuple_;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_group_value_tuple() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_value_tuple)
  return _internal_mutable_group_value_tuple();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::set_allocated_group_value_tuple(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive* group_value_tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_value_tuple_;
  }
  if (group_value_tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_value_tuple);
    if (message_arena != submessage_arena) {
      group_value_tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_value_tuple, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_value_tuple_ = group_value_tuple;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_value_tuple)
}

// optional .TSCE.CellValueArchive group_cell_value = 7;
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_has_group_cell_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || group_cell_value_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::has_group_cell_value() const {
  return _internal_has_group_cell_value();
}
inline const ::TSCE::CellValueArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_group_cell_value() const {
  const ::TSCE::CellValueArchive* p = group_cell_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellValueArchive&>(
      ::TSCE::_CellValueArchive_default_instance_);
}
inline const ::TSCE::CellValueArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::group_cell_value() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_cell_value)
  return _internal_group_cell_value();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_set_allocated_group_cell_value(
    ::TSCE::CellValueArchive* group_cell_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_cell_value_);
  }
  group_cell_value_ = group_cell_value;
  if (group_cell_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_cell_value)
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::release_group_cell_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellValueArchive* temp = group_cell_value_;
  group_cell_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_release_group_cell_value() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_cell_value)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellValueArchive* temp = group_cell_value_;
  group_cell_value_ = nullptr;
  return temp;
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_mutable_group_cell_value() {
  _has_bits_[0] |= 0x00000008u;
  if (group_cell_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellValueArchive>(GetArena());
    group_cell_value_ = p;
  }
  return group_cell_value_;
}
inline ::TSCE::CellValueArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_group_cell_value() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_cell_value)
  return _internal_mutable_group_cell_value();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::set_allocated_group_cell_value(::TSCE::CellValueArchive* group_cell_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_cell_value_);
  }
  if (group_cell_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_cell_value)->GetArena();
    if (message_arena != submessage_arena) {
      group_cell_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_cell_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  group_cell_value_ = group_cell_value;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.group_cell_value)
}

// repeated .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive child = 3;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_child_size() const {
  return child_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::child_size() const {
  return _internal_child_size();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_child() {
  child_.Clear();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.child)
  return &child_;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_child(int index) const {
  return child_.Get(index);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::child(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.child)
  return _internal_child(index);
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_add_child() {
  return child_.Add();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::add_child() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.child)
  return _internal_add_child();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::child() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.child)
  return child_;
}

// repeated .TSP.UUID row_uid = 4;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_row_uid_size() const {
  return row_uid_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::row_uid_size() const {
  return _internal_row_uid_size();
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_row_uid(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.row_uid)
  return row_uid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_row_uid() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.row_uid)
  return &row_uid_;
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_row_uid(int index) const {
  return row_uid_.Get(index);
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::row_uid(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.row_uid)
  return _internal_row_uid(index);
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_add_row_uid() {
  return row_uid_.Add();
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::add_row_uid() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.row_uid)
  return _internal_add_row_uid();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::row_uid() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.row_uid)
  return row_uid_;
}

// repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_agg_formula_coords_size() const {
  return agg_formula_coords_.size();
}
inline int CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::agg_formula_coords_size() const {
  return _internal_agg_formula_coords_size();
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_agg_formula_coords(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.agg_formula_coords)
  return agg_formula_coords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >*
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_agg_formula_coords() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.agg_formula_coords)
  return &agg_formula_coords_;
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_agg_formula_coords(int index) const {
  return agg_formula_coords_.Get(index);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::agg_formula_coords(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.agg_formula_coords)
  return _internal_agg_formula_coords(index);
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_add_agg_formula_coords() {
  return agg_formula_coords_.Add();
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::add_agg_formula_coords() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.agg_formula_coords)
  return _internal_add_agg_formula_coords();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::CellCoordinateArchive >&
CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::agg_formula_coords() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.agg_formula_coords)
  return agg_formula_coords_;
}

// optional .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_has_format_manager() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || format_manager_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::has_format_manager() const {
  return _internal_has_format_manager();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::clear_format_manager() {
  if (format_manager_ != nullptr) format_manager_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_format_manager() const {
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* p = format_manager_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive&>(
      ::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive& CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::format_manager() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.format_manager)
  return _internal_format_manager();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_set_allocated_format_manager(
    ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* format_manager) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_manager_);
  }
  format_manager_ = format_manager;
  if (format_manager) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.format_manager)
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::release_format_manager() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* temp = format_manager_;
  format_manager_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::unsafe_arena_release_format_manager() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.format_manager)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* temp = format_manager_;
  format_manager_ = nullptr;
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::_internal_mutable_format_manager() {
  _has_bits_[0] |= 0x00000004u;
  if (format_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive>(GetArena());
    format_manager_ = p;
  }
  return format_manager_;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::mutable_format_manager() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.format_manager)
  return _internal_mutable_format_manager();
}
inline void CategoryOwnerArchive_GroupByArchive_GroupNodeArchive::set_allocated_format_manager(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive* format_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete format_manager_;
  }
  if (format_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(format_manager);
    if (message_arena != submessage_arena) {
      format_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  format_manager_ = format_manager;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.format_manager)
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive_AggregatorArchive

// required .TSP.UUID column_uid = 1;
inline bool CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_internal_has_column_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_uid_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_AggregatorArchive::has_column_uid() const {
  return _internal_has_column_uid();
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_internal_column_uid() const {
  const ::TSP::UUID* p = column_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive_AggregatorArchive::column_uid() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.column_uid)
  return _internal_column_uid();
}
inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::unsafe_arena_set_allocated_column_uid(
    ::TSP::UUID* column_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  column_uid_ = column_uid;
  if (column_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.column_uid)
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::release_column_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::unsafe_arena_release_column_uid() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.column_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = column_uid_;
  column_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_internal_mutable_column_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (column_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    column_uid_ = p;
  }
  return column_uid_;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::mutable_column_uid() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.column_uid)
  return _internal_mutable_column_uid();
}
inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::set_allocated_column_uid(::TSP::UUID* column_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid_);
  }
  if (column_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_uid)->GetArena();
    if (message_arena != submessage_arena) {
      column_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_uid_ = column_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.column_uid)
}

// optional .TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive agg_node = 2;
inline bool CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_internal_has_agg_node() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || agg_node_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive_AggregatorArchive::has_agg_node() const {
  return _internal_has_agg_node();
}
inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::clear_agg_node() {
  if (agg_node_ != nullptr) agg_node_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_internal_agg_node() const {
  const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* p = agg_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive&>(
      ::TST::_CategoryOwnerArchive_GroupByArchive_AggNodeArchive_default_instance_);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive& CategoryOwnerArchive_GroupByArchive_AggregatorArchive::agg_node() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.agg_node)
  return _internal_agg_node();
}
inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::unsafe_arena_set_allocated_agg_node(
    ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* agg_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agg_node_);
  }
  agg_node_ = agg_node;
  if (agg_node) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.agg_node)
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::release_agg_node() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* temp = agg_node_;
  agg_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::unsafe_arena_release_agg_node() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.agg_node)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* temp = agg_node_;
  agg_node_ = nullptr;
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::_internal_mutable_agg_node() {
  _has_bits_[0] |= 0x00000002u;
  if (agg_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive>(GetArena());
    agg_node_ = p;
  }
  return agg_node_;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* CategoryOwnerArchive_GroupByArchive_AggregatorArchive::mutable_agg_node() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.agg_node)
  return _internal_mutable_agg_node();
}
inline void CategoryOwnerArchive_GroupByArchive_AggregatorArchive::set_allocated_agg_node(::TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive* agg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agg_node_;
  }
  if (agg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agg_node);
    if (message_arena != submessage_arena) {
      agg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agg_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  agg_node_ = agg_node;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive.agg_node)
}

// -------------------------------------------------------------------

// CategoryOwnerArchive_GroupByArchive

// required .TSP.UUID group_by_uid = 1;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_group_by_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || group_by_uid_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_group_by_uid() const {
  return _internal_has_group_by_uid();
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive::_internal_group_by_uid() const {
  const ::TSP::UUID* p = group_by_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryOwnerArchive_GroupByArchive::group_by_uid() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.group_by_uid)
  return _internal_group_by_uid();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_group_by_uid(
    ::TSP::UUID* group_by_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  group_by_uid_ = group_by_uid;
  if (group_by_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.group_by_uid)
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive::release_group_by_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_group_by_uid() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.group_by_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = group_by_uid_;
  group_by_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive::_internal_mutable_group_by_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (group_by_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    group_by_uid_ = p;
  }
  return group_by_uid_;
}
inline ::TSP::UUID* CategoryOwnerArchive_GroupByArchive::mutable_group_by_uid() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.group_by_uid)
  return _internal_mutable_group_by_uid();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_group_by_uid(::TSP::UUID* group_by_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid_);
  }
  if (group_by_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_by_uid)->GetArena();
    if (message_arena != submessage_arena) {
      group_by_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_by_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  group_by_uid_ = group_by_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.group_by_uid)
}

// repeated .TST.GroupColumnArchive group_column = 2;
inline int CategoryOwnerArchive_GroupByArchive::_internal_group_column_size() const {
  return group_column_.size();
}
inline int CategoryOwnerArchive_GroupByArchive::group_column_size() const {
  return _internal_group_column_size();
}
inline void CategoryOwnerArchive_GroupByArchive::clear_group_column() {
  group_column_.Clear();
}
inline ::TST::GroupColumnArchive* CategoryOwnerArchive_GroupByArchive::mutable_group_column(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.group_column)
  return group_column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >*
CategoryOwnerArchive_GroupByArchive::mutable_group_column() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.group_column)
  return &group_column_;
}
inline const ::TST::GroupColumnArchive& CategoryOwnerArchive_GroupByArchive::_internal_group_column(int index) const {
  return group_column_.Get(index);
}
inline const ::TST::GroupColumnArchive& CategoryOwnerArchive_GroupByArchive::group_column(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.group_column)
  return _internal_group_column(index);
}
inline ::TST::GroupColumnArchive* CategoryOwnerArchive_GroupByArchive::_internal_add_group_column() {
  return group_column_.Add();
}
inline ::TST::GroupColumnArchive* CategoryOwnerArchive_GroupByArchive::add_group_column() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.group_column)
  return _internal_add_group_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::GroupColumnArchive >&
CategoryOwnerArchive_GroupByArchive::group_column() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.group_column)
  return group_column_;
}

// required .TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive group_node_root = 3;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_group_node_root() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || group_node_root_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_group_node_root() const {
  return _internal_has_group_node_root();
}
inline void CategoryOwnerArchive_GroupByArchive::clear_group_node_root() {
  if (group_node_root_ != nullptr) group_node_root_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& CategoryOwnerArchive_GroupByArchive::_internal_group_node_root() const {
  const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* p = group_node_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive&>(
      ::TST::_CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_default_instance_);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive& CategoryOwnerArchive_GroupByArchive::group_node_root() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.group_node_root)
  return _internal_group_node_root();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_group_node_root(
    ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* group_node_root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_node_root_);
  }
  group_node_root_ = group_node_root;
  if (group_node_root) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.group_node_root)
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive::release_group_node_root() {
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* temp = group_node_root_;
  group_node_root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_group_node_root() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.group_node_root)
  _has_bits_[0] &= ~0x00000002u;
  ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* temp = group_node_root_;
  group_node_root_ = nullptr;
  return temp;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_group_node_root() {
  _has_bits_[0] |= 0x00000002u;
  if (group_node_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>(GetArena());
    group_node_root_ = p;
  }
  return group_node_root_;
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* CategoryOwnerArchive_GroupByArchive::mutable_group_node_root() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.group_node_root)
  return _internal_mutable_group_node_root();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_group_node_root(::TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive* group_node_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_node_root_;
  }
  if (group_node_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_node_root);
    if (message_arena != submessage_arena) {
      group_node_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_node_root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_node_root_ = group_node_root;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.group_node_root)
}

// repeated .TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive aggregator = 4;
inline int CategoryOwnerArchive_GroupByArchive::_internal_aggregator_size() const {
  return aggregator_.size();
}
inline int CategoryOwnerArchive_GroupByArchive::aggregator_size() const {
  return _internal_aggregator_size();
}
inline void CategoryOwnerArchive_GroupByArchive::clear_aggregator() {
  aggregator_.Clear();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* CategoryOwnerArchive_GroupByArchive::mutable_aggregator(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.aggregator)
  return aggregator_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive >*
CategoryOwnerArchive_GroupByArchive::mutable_aggregator() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.aggregator)
  return &aggregator_;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive& CategoryOwnerArchive_GroupByArchive::_internal_aggregator(int index) const {
  return aggregator_.Get(index);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive& CategoryOwnerArchive_GroupByArchive::aggregator(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.aggregator)
  return _internal_aggregator(index);
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* CategoryOwnerArchive_GroupByArchive::_internal_add_aggregator() {
  return aggregator_.Add();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive* CategoryOwnerArchive_GroupByArchive::add_aggregator() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.aggregator)
  return _internal_add_aggregator();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive >&
CategoryOwnerArchive_GroupByArchive::aggregator() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.aggregator)
  return aggregator_;
}

// repeated .TST.ColumnAggregateArchive column_agg_type = 5;
inline int CategoryOwnerArchive_GroupByArchive::_internal_column_agg_type_size() const {
  return column_agg_type_.size();
}
inline int CategoryOwnerArchive_GroupByArchive::column_agg_type_size() const {
  return _internal_column_agg_type_size();
}
inline void CategoryOwnerArchive_GroupByArchive::clear_column_agg_type() {
  column_agg_type_.Clear();
}
inline ::TST::ColumnAggregateArchive* CategoryOwnerArchive_GroupByArchive::mutable_column_agg_type(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.column_agg_type)
  return column_agg_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >*
CategoryOwnerArchive_GroupByArchive::mutable_column_agg_type() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.GroupByArchive.column_agg_type)
  return &column_agg_type_;
}
inline const ::TST::ColumnAggregateArchive& CategoryOwnerArchive_GroupByArchive::_internal_column_agg_type(int index) const {
  return column_agg_type_.Get(index);
}
inline const ::TST::ColumnAggregateArchive& CategoryOwnerArchive_GroupByArchive::column_agg_type(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.column_agg_type)
  return _internal_column_agg_type(index);
}
inline ::TST::ColumnAggregateArchive* CategoryOwnerArchive_GroupByArchive::_internal_add_column_agg_type() {
  return column_agg_type_.Add();
}
inline ::TST::ColumnAggregateArchive* CategoryOwnerArchive_GroupByArchive::add_column_agg_type() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.GroupByArchive.column_agg_type)
  return _internal_add_column_agg_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::ColumnAggregateArchive >&
CategoryOwnerArchive_GroupByArchive::column_agg_type() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.GroupByArchive.column_agg_type)
  return column_agg_type_;
}

// required bool is_enabled = 6;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CategoryOwnerArchive_GroupByArchive::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CategoryOwnerArchive_GroupByArchive::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CategoryOwnerArchive_GroupByArchive::is_enabled() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.is_enabled)
  return _internal_is_enabled();
}
inline void CategoryOwnerArchive_GroupByArchive::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_enabled_ = value;
}
inline void CategoryOwnerArchive_GroupByArchive::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:TST.CategoryOwnerArchive.GroupByArchive.is_enabled)
}

// optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_indirect_agg_type_change_formula() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || indirect_agg_type_change_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_indirect_agg_type_change_formula() const {
  return _internal_has_indirect_agg_type_change_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_indirect_agg_type_change_formula() const {
  const ::TSCE::CellCoordinateArchive* p = indirect_agg_type_change_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::indirect_agg_type_change_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.indirect_agg_type_change_formula)
  return _internal_indirect_agg_type_change_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_indirect_agg_type_change_formula(
    ::TSCE::CellCoordinateArchive* indirect_agg_type_change_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indirect_agg_type_change_formula_);
  }
  indirect_agg_type_change_formula_ = indirect_agg_type_change_formula;
  if (indirect_agg_type_change_formula) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.indirect_agg_type_change_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_indirect_agg_type_change_formula() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordinateArchive* temp = indirect_agg_type_change_formula_;
  indirect_agg_type_change_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_indirect_agg_type_change_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.indirect_agg_type_change_formula)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::CellCoordinateArchive* temp = indirect_agg_type_change_formula_;
  indirect_agg_type_change_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_indirect_agg_type_change_formula() {
  _has_bits_[0] |= 0x00000004u;
  if (indirect_agg_type_change_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    indirect_agg_type_change_formula_ = p;
  }
  return indirect_agg_type_change_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_indirect_agg_type_change_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.indirect_agg_type_change_formula)
  return _internal_mutable_indirect_agg_type_change_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_indirect_agg_type_change_formula(::TSCE::CellCoordinateArchive* indirect_agg_type_change_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(indirect_agg_type_change_formula_);
  }
  if (indirect_agg_type_change_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indirect_agg_type_change_formula)->GetArena();
    if (message_arena != submessage_arena) {
      indirect_agg_type_change_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indirect_agg_type_change_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  indirect_agg_type_change_formula_ = indirect_agg_type_change_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.indirect_agg_type_change_formula)
}

// optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_grouping_columns_formula() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || grouping_columns_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_grouping_columns_formula() const {
  return _internal_has_grouping_columns_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_grouping_columns_formula() const {
  const ::TSCE::CellCoordinateArchive* p = grouping_columns_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::grouping_columns_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.grouping_columns_formula)
  return _internal_grouping_columns_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_grouping_columns_formula(
    ::TSCE::CellCoordinateArchive* grouping_columns_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_columns_formula_);
  }
  grouping_columns_formula_ = grouping_columns_formula;
  if (grouping_columns_formula) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.grouping_columns_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_grouping_columns_formula() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateArchive* temp = grouping_columns_formula_;
  grouping_columns_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_grouping_columns_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.grouping_columns_formula)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCE::CellCoordinateArchive* temp = grouping_columns_formula_;
  grouping_columns_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_grouping_columns_formula() {
  _has_bits_[0] |= 0x00000008u;
  if (grouping_columns_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    grouping_columns_formula_ = p;
  }
  return grouping_columns_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_grouping_columns_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.grouping_columns_formula)
  return _internal_mutable_grouping_columns_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_grouping_columns_formula(::TSCE::CellCoordinateArchive* grouping_columns_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_columns_formula_);
  }
  if (grouping_columns_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_columns_formula)->GetArena();
    if (message_arena != submessage_arena) {
      grouping_columns_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_columns_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  grouping_columns_formula_ = grouping_columns_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.grouping_columns_formula)
}

// optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_grouping_column_headers_formula() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || grouping_column_headers_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_grouping_column_headers_formula() const {
  return _internal_has_grouping_column_headers_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_grouping_column_headers_formula() const {
  const ::TSCE::CellCoordinateArchive* p = grouping_column_headers_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::grouping_column_headers_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.grouping_column_headers_formula)
  return _internal_grouping_column_headers_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_grouping_column_headers_formula(
    ::TSCE::CellCoordinateArchive* grouping_column_headers_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_headers_formula_);
  }
  grouping_column_headers_formula_ = grouping_column_headers_formula;
  if (grouping_column_headers_formula) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.grouping_column_headers_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_grouping_column_headers_formula() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::CellCoordinateArchive* temp = grouping_column_headers_formula_;
  grouping_column_headers_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_grouping_column_headers_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.grouping_column_headers_formula)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCE::CellCoordinateArchive* temp = grouping_column_headers_formula_;
  grouping_column_headers_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_grouping_column_headers_formula() {
  _has_bits_[0] |= 0x00000020u;
  if (grouping_column_headers_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    grouping_column_headers_formula_ = p;
  }
  return grouping_column_headers_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_grouping_column_headers_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.grouping_column_headers_formula)
  return _internal_mutable_grouping_column_headers_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_grouping_column_headers_formula(::TSCE::CellCoordinateArchive* grouping_column_headers_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_headers_formula_);
  }
  if (grouping_column_headers_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grouping_column_headers_formula)->GetArena();
    if (message_arena != submessage_arena) {
      grouping_column_headers_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grouping_column_headers_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  grouping_column_headers_formula_ = grouping_column_headers_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.grouping_column_headers_formula)
}

// optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_aggs_in_group_root_formula() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || aggs_in_group_root_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_aggs_in_group_root_formula() const {
  return _internal_has_aggs_in_group_root_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_aggs_in_group_root_formula() const {
  const ::TSCE::CellCoordinateArchive* p = aggs_in_group_root_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::aggs_in_group_root_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.aggs_in_group_root_formula)
  return _internal_aggs_in_group_root_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_aggs_in_group_root_formula(
    ::TSCE::CellCoordinateArchive* aggs_in_group_root_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggs_in_group_root_formula_);
  }
  aggs_in_group_root_formula_ = aggs_in_group_root_formula;
  if (aggs_in_group_root_formula) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.aggs_in_group_root_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_aggs_in_group_root_formula() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordinateArchive* temp = aggs_in_group_root_formula_;
  aggs_in_group_root_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_aggs_in_group_root_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.aggs_in_group_root_formula)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCE::CellCoordinateArchive* temp = aggs_in_group_root_formula_;
  aggs_in_group_root_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_aggs_in_group_root_formula() {
  _has_bits_[0] |= 0x00000010u;
  if (aggs_in_group_root_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    aggs_in_group_root_formula_ = p;
  }
  return aggs_in_group_root_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_aggs_in_group_root_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.aggs_in_group_root_formula)
  return _internal_mutable_aggs_in_group_root_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_aggs_in_group_root_formula(::TSCE::CellCoordinateArchive* aggs_in_group_root_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggs_in_group_root_formula_);
  }
  if (aggs_in_group_root_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aggs_in_group_root_formula)->GetArena();
    if (message_arena != submessage_arena) {
      aggs_in_group_root_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggs_in_group_root_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  aggs_in_group_root_formula_ = aggs_in_group_root_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.aggs_in_group_root_formula)
}

// optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_column_order_changed_formula() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || column_order_changed_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_column_order_changed_formula() const {
  return _internal_has_column_order_changed_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_column_order_changed_formula() const {
  const ::TSCE::CellCoordinateArchive* p = column_order_changed_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::column_order_changed_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.column_order_changed_formula)
  return _internal_column_order_changed_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_column_order_changed_formula(
    ::TSCE::CellCoordinateArchive* column_order_changed_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_order_changed_formula_);
  }
  column_order_changed_formula_ = column_order_changed_formula;
  if (column_order_changed_formula) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.column_order_changed_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_column_order_changed_formula() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::CellCoordinateArchive* temp = column_order_changed_formula_;
  column_order_changed_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_column_order_changed_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.column_order_changed_formula)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCE::CellCoordinateArchive* temp = column_order_changed_formula_;
  column_order_changed_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_column_order_changed_formula() {
  _has_bits_[0] |= 0x00000040u;
  if (column_order_changed_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    column_order_changed_formula_ = p;
  }
  return column_order_changed_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_column_order_changed_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.column_order_changed_formula)
  return _internal_mutable_column_order_changed_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_column_order_changed_formula(::TSCE::CellCoordinateArchive* column_order_changed_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_order_changed_formula_);
  }
  if (column_order_changed_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_order_changed_formula)->GetArena();
    if (message_arena != submessage_arena) {
      column_order_changed_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_order_changed_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  column_order_changed_formula_ = column_order_changed_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.column_order_changed_formula)
}

// optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_row_order_changed_formula() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || row_order_changed_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_row_order_changed_formula() const {
  return _internal_has_row_order_changed_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_row_order_changed_formula() const {
  const ::TSCE::CellCoordinateArchive* p = row_order_changed_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::row_order_changed_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_formula)
  return _internal_row_order_changed_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_row_order_changed_formula(
    ::TSCE::CellCoordinateArchive* row_order_changed_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_order_changed_formula_);
  }
  row_order_changed_formula_ = row_order_changed_formula;
  if (row_order_changed_formula) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_row_order_changed_formula() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::CellCoordinateArchive* temp = row_order_changed_formula_;
  row_order_changed_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_row_order_changed_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_formula)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCE::CellCoordinateArchive* temp = row_order_changed_formula_;
  row_order_changed_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_row_order_changed_formula() {
  _has_bits_[0] |= 0x00000080u;
  if (row_order_changed_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    row_order_changed_formula_ = p;
  }
  return row_order_changed_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_row_order_changed_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_formula)
  return _internal_mutable_row_order_changed_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_row_order_changed_formula(::TSCE::CellCoordinateArchive* row_order_changed_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_order_changed_formula_);
  }
  if (row_order_changed_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_order_changed_formula)->GetArena();
    if (message_arena != submessage_arena) {
      row_order_changed_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_order_changed_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  row_order_changed_formula_ = row_order_changed_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_formula)
}

// optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
inline bool CategoryOwnerArchive_GroupByArchive::_internal_has_row_order_changed_ignoring_recalc_formula() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || row_order_changed_ignoring_recalc_formula_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive_GroupByArchive::has_row_order_changed_ignoring_recalc_formula() const {
  return _internal_has_row_order_changed_ignoring_recalc_formula();
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::_internal_row_order_changed_ignoring_recalc_formula() const {
  const ::TSCE::CellCoordinateArchive* p = row_order_changed_ignoring_recalc_formula_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& CategoryOwnerArchive_GroupByArchive::row_order_changed_ignoring_recalc_formula() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_ignoring_recalc_formula)
  return _internal_row_order_changed_ignoring_recalc_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::unsafe_arena_set_allocated_row_order_changed_ignoring_recalc_formula(
    ::TSCE::CellCoordinateArchive* row_order_changed_ignoring_recalc_formula) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_order_changed_ignoring_recalc_formula_);
  }
  row_order_changed_ignoring_recalc_formula_ = row_order_changed_ignoring_recalc_formula;
  if (row_order_changed_ignoring_recalc_formula) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_ignoring_recalc_formula)
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::release_row_order_changed_ignoring_recalc_formula() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CellCoordinateArchive* temp = row_order_changed_ignoring_recalc_formula_;
  row_order_changed_ignoring_recalc_formula_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::unsafe_arena_release_row_order_changed_ignoring_recalc_formula() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_ignoring_recalc_formula)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCE::CellCoordinateArchive* temp = row_order_changed_ignoring_recalc_formula_;
  row_order_changed_ignoring_recalc_formula_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::_internal_mutable_row_order_changed_ignoring_recalc_formula() {
  _has_bits_[0] |= 0x00000100u;
  if (row_order_changed_ignoring_recalc_formula_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    row_order_changed_ignoring_recalc_formula_ = p;
  }
  return row_order_changed_ignoring_recalc_formula_;
}
inline ::TSCE::CellCoordinateArchive* CategoryOwnerArchive_GroupByArchive::mutable_row_order_changed_ignoring_recalc_formula() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_ignoring_recalc_formula)
  return _internal_mutable_row_order_changed_ignoring_recalc_formula();
}
inline void CategoryOwnerArchive_GroupByArchive::set_allocated_row_order_changed_ignoring_recalc_formula(::TSCE::CellCoordinateArchive* row_order_changed_ignoring_recalc_formula) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_order_changed_ignoring_recalc_formula_);
  }
  if (row_order_changed_ignoring_recalc_formula) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_order_changed_ignoring_recalc_formula)->GetArena();
    if (message_arena != submessage_arena) {
      row_order_changed_ignoring_recalc_formula = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_order_changed_ignoring_recalc_formula, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  row_order_changed_ignoring_recalc_formula_ = row_order_changed_ignoring_recalc_formula;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.GroupByArchive.row_order_changed_ignoring_recalc_formula)
}

// -------------------------------------------------------------------

// CategoryOwnerArchive

// required .TSP.UUID owner_uid = 1;
inline bool CategoryOwnerArchive::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool CategoryOwnerArchive::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& CategoryOwnerArchive::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CategoryOwnerArchive::owner_uid() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.owner_uid)
  return _internal_owner_uid();
}
inline void CategoryOwnerArchive::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOwnerArchive.owner_uid)
}
inline ::TSP::UUID* CategoryOwnerArchive::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TST.CategoryOwnerArchive.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CategoryOwnerArchive::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* CategoryOwnerArchive::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void CategoryOwnerArchive::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOwnerArchive.owner_uid)
}

// repeated .TST.CategoryOwnerArchive.GroupByArchive group_by = 2;
inline int CategoryOwnerArchive::_internal_group_by_size() const {
  return group_by_.size();
}
inline int CategoryOwnerArchive::group_by_size() const {
  return _internal_group_by_size();
}
inline void CategoryOwnerArchive::clear_group_by() {
  group_by_.Clear();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive* CategoryOwnerArchive::mutable_group_by(int index) {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOwnerArchive.group_by)
  return group_by_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive >*
CategoryOwnerArchive::mutable_group_by() {
  // @@protoc_insertion_point(field_mutable_list:TST.CategoryOwnerArchive.group_by)
  return &group_by_;
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive& CategoryOwnerArchive::_internal_group_by(int index) const {
  return group_by_.Get(index);
}
inline const ::TST::CategoryOwnerArchive_GroupByArchive& CategoryOwnerArchive::group_by(int index) const {
  // @@protoc_insertion_point(field_get:TST.CategoryOwnerArchive.group_by)
  return _internal_group_by(index);
}
inline ::TST::CategoryOwnerArchive_GroupByArchive* CategoryOwnerArchive::_internal_add_group_by() {
  return group_by_.Add();
}
inline ::TST::CategoryOwnerArchive_GroupByArchive* CategoryOwnerArchive::add_group_by() {
  // @@protoc_insertion_point(field_add:TST.CategoryOwnerArchive.group_by)
  return _internal_add_group_by();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::CategoryOwnerArchive_GroupByArchive >&
CategoryOwnerArchive::group_by() const {
  // @@protoc_insertion_point(field_list:TST.CategoryOwnerArchive.group_by)
  return group_by_;
}

// -------------------------------------------------------------------

// RichTextPayloadArchive

// required .TSP.Reference storage = 1;
inline bool RichTextPayloadArchive::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool RichTextPayloadArchive::has_storage() const {
  return _internal_has_storage();
}
inline const ::TSP::Reference& RichTextPayloadArchive::_internal_storage() const {
  const ::TSP::Reference* p = storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RichTextPayloadArchive::storage() const {
  // @@protoc_insertion_point(field_get:TST.RichTextPayloadArchive.storage)
  return _internal_storage();
}
inline void RichTextPayloadArchive::unsafe_arena_set_allocated_storage(
    ::TSP::Reference* storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RichTextPayloadArchive.storage)
}
inline ::TSP::Reference* RichTextPayloadArchive::release_storage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* RichTextPayloadArchive::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:TST.RichTextPayloadArchive.storage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RichTextPayloadArchive::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    storage_ = p;
  }
  return storage_;
}
inline ::TSP::Reference* RichTextPayloadArchive::mutable_storage() {
  // @@protoc_insertion_point(field_mutable:TST.RichTextPayloadArchive.storage)
  return _internal_mutable_storage();
}
inline void RichTextPayloadArchive::set_allocated_storage(::TSP::Reference* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage)->GetArena();
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:TST.RichTextPayloadArchive.storage)
}

// optional .TSP.Range range = 2;
inline bool RichTextPayloadArchive::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || range_ != nullptr);
  return value;
}
inline bool RichTextPayloadArchive::has_range() const {
  return _internal_has_range();
}
inline const ::TSP::Range& RichTextPayloadArchive::_internal_range() const {
  const ::TSP::Range* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Range&>(
      ::TSP::_Range_default_instance_);
}
inline const ::TSP::Range& RichTextPayloadArchive::range() const {
  // @@protoc_insertion_point(field_get:TST.RichTextPayloadArchive.range)
  return _internal_range();
}
inline void RichTextPayloadArchive::unsafe_arena_set_allocated_range(
    ::TSP::Range* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RichTextPayloadArchive.range)
}
inline ::TSP::Range* RichTextPayloadArchive::release_range() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Range* RichTextPayloadArchive::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:TST.RichTextPayloadArchive.range)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::TSP::Range* RichTextPayloadArchive::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000002u;
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Range>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::TSP::Range* RichTextPayloadArchive::mutable_range() {
  // @@protoc_insertion_point(field_mutable:TST.RichTextPayloadArchive.range)
  return _internal_mutable_range();
}
inline void RichTextPayloadArchive::set_allocated_range(::TSP::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range)->GetArena();
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:TST.RichTextPayloadArchive.range)
}

// required .TST.CellID cellid = 3;
inline bool RichTextPayloadArchive::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cellid_ != nullptr);
  return value;
}
inline bool RichTextPayloadArchive::has_cellid() const {
  return _internal_has_cellid();
}
inline void RichTextPayloadArchive::clear_cellid() {
  if (cellid_ != nullptr) cellid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::CellID& RichTextPayloadArchive::_internal_cellid() const {
  const ::TST::CellID* p = cellid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::CellID&>(
      ::TST::_CellID_default_instance_);
}
inline const ::TST::CellID& RichTextPayloadArchive::cellid() const {
  // @@protoc_insertion_point(field_get:TST.RichTextPayloadArchive.cellid)
  return _internal_cellid();
}
inline void RichTextPayloadArchive::unsafe_arena_set_allocated_cellid(
    ::TST::CellID* cellid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellid_);
  }
  cellid_ = cellid;
  if (cellid) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.RichTextPayloadArchive.cellid)
}
inline ::TST::CellID* RichTextPayloadArchive::release_cellid() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CellID* temp = cellid_;
  cellid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::CellID* RichTextPayloadArchive::unsafe_arena_release_cellid() {
  // @@protoc_insertion_point(field_release:TST.RichTextPayloadArchive.cellid)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::CellID* temp = cellid_;
  cellid_ = nullptr;
  return temp;
}
inline ::TST::CellID* RichTextPayloadArchive::_internal_mutable_cellid() {
  _has_bits_[0] |= 0x00000004u;
  if (cellid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::CellID>(GetArena());
    cellid_ = p;
  }
  return cellid_;
}
inline ::TST::CellID* RichTextPayloadArchive::mutable_cellid() {
  // @@protoc_insertion_point(field_mutable:TST.RichTextPayloadArchive.cellid)
  return _internal_mutable_cellid();
}
inline void RichTextPayloadArchive::set_allocated_cellid(::TST::CellID* cellid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cellid_;
  }
  if (cellid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cellid);
    if (message_arena != submessage_arena) {
      cellid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cellid_ = cellid;
  // @@protoc_insertion_point(field_set_allocated:TST.RichTextPayloadArchive.cellid)
}

// -------------------------------------------------------------------

// FormulaEqualsTokenAttachmentArchive

// required .TSWP.UIGraphicalAttachment super = 1;
inline bool FormulaEqualsTokenAttachmentArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FormulaEqualsTokenAttachmentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::UIGraphicalAttachment& FormulaEqualsTokenAttachmentArchive::_internal_super() const {
  const ::TSWP::UIGraphicalAttachment* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::UIGraphicalAttachment&>(
      ::TSWP::_UIGraphicalAttachment_default_instance_);
}
inline const ::TSWP::UIGraphicalAttachment& FormulaEqualsTokenAttachmentArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FormulaEqualsTokenAttachmentArchive.super)
  return _internal_super();
}
inline void FormulaEqualsTokenAttachmentArchive::unsafe_arena_set_allocated_super(
    ::TSWP::UIGraphicalAttachment* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaEqualsTokenAttachmentArchive.super)
}
inline ::TSWP::UIGraphicalAttachment* FormulaEqualsTokenAttachmentArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UIGraphicalAttachment* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::UIGraphicalAttachment* FormulaEqualsTokenAttachmentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FormulaEqualsTokenAttachmentArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::UIGraphicalAttachment* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::UIGraphicalAttachment* FormulaEqualsTokenAttachmentArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::UIGraphicalAttachment>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::UIGraphicalAttachment* FormulaEqualsTokenAttachmentArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.FormulaEqualsTokenAttachmentArchive.super)
  return _internal_mutable_super();
}
inline void FormulaEqualsTokenAttachmentArchive::set_allocated_super(::TSWP::UIGraphicalAttachment* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaEqualsTokenAttachmentArchive.super)
}

// -------------------------------------------------------------------

// CellFillStandIn

// required .TSD.FillArchive fill = 1;
inline bool CellFillStandIn::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fill_ != nullptr);
  return value;
}
inline bool CellFillStandIn::has_fill() const {
  return _internal_has_fill();
}
inline const ::TSD::FillArchive& CellFillStandIn::_internal_fill() const {
  const ::TSD::FillArchive* p = fill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& CellFillStandIn::fill() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.fill)
  return _internal_fill();
}
inline void CellFillStandIn::unsafe_arena_set_allocated_fill(
    ::TSD::FillArchive* fill) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  fill_ = fill;
  if (fill) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellFillStandIn.fill)
}
inline ::TSD::FillArchive* CellFillStandIn::release_fill() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = fill_;
  fill_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FillArchive* CellFillStandIn::unsafe_arena_release_fill() {
  // @@protoc_insertion_point(field_release:TST.CellFillStandIn.fill)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = fill_;
  fill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* CellFillStandIn::_internal_mutable_fill() {
  _has_bits_[0] |= 0x00000001u;
  if (fill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArena());
    fill_ = p;
  }
  return fill_;
}
inline ::TSD::FillArchive* CellFillStandIn::mutable_fill() {
  // @@protoc_insertion_point(field_mutable:TST.CellFillStandIn.fill)
  return _internal_mutable_fill();
}
inline void CellFillStandIn::set_allocated_fill(::TSD::FillArchive* fill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_);
  }
  if (fill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill)->GetArena();
    if (message_arena != submessage_arena) {
      fill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:TST.CellFillStandIn.fill)
}

// optional bool type_is_mixed = 2;
inline bool CellFillStandIn::_internal_has_type_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellFillStandIn::has_type_is_mixed() const {
  return _internal_has_type_is_mixed();
}
inline void CellFillStandIn::clear_type_is_mixed() {
  type_is_mixed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CellFillStandIn::_internal_type_is_mixed() const {
  return type_is_mixed_;
}
inline bool CellFillStandIn::type_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.type_is_mixed)
  return _internal_type_is_mixed();
}
inline void CellFillStandIn::_internal_set_type_is_mixed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  type_is_mixed_ = value;
}
inline void CellFillStandIn::set_type_is_mixed(bool value) {
  _internal_set_type_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.type_is_mixed)
}

// optional bool color_has_been_modified = 3;
inline bool CellFillStandIn::_internal_has_color_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CellFillStandIn::has_color_has_been_modified() const {
  return _internal_has_color_has_been_modified();
}
inline void CellFillStandIn::clear_color_has_been_modified() {
  color_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CellFillStandIn::_internal_color_has_been_modified() const {
  return color_has_been_modified_;
}
inline bool CellFillStandIn::color_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.color_has_been_modified)
  return _internal_color_has_been_modified();
}
inline void CellFillStandIn::_internal_set_color_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00000004u;
  color_has_been_modified_ = value;
}
inline void CellFillStandIn::set_color_has_been_modified(bool value) {
  _internal_set_color_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.color_has_been_modified)
}

// optional bool color_is_mixed = 4;
inline bool CellFillStandIn::_internal_has_color_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CellFillStandIn::has_color_is_mixed() const {
  return _internal_has_color_is_mixed();
}
inline void CellFillStandIn::clear_color_is_mixed() {
  color_is_mixed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CellFillStandIn::_internal_color_is_mixed() const {
  return color_is_mixed_;
}
inline bool CellFillStandIn::color_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.color_is_mixed)
  return _internal_color_is_mixed();
}
inline void CellFillStandIn::_internal_set_color_is_mixed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  color_is_mixed_ = value;
}
inline void CellFillStandIn::set_color_is_mixed(bool value) {
  _internal_set_color_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.color_is_mixed)
}

// optional bool first_color_has_been_modified = 5;
inline bool CellFillStandIn::_internal_has_first_color_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellFillStandIn::has_first_color_has_been_modified() const {
  return _internal_has_first_color_has_been_modified();
}
inline void CellFillStandIn::clear_first_color_has_been_modified() {
  first_color_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CellFillStandIn::_internal_first_color_has_been_modified() const {
  return first_color_has_been_modified_;
}
inline bool CellFillStandIn::first_color_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.first_color_has_been_modified)
  return _internal_first_color_has_been_modified();
}
inline void CellFillStandIn::_internal_set_first_color_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00000010u;
  first_color_has_been_modified_ = value;
}
inline void CellFillStandIn::set_first_color_has_been_modified(bool value) {
  _internal_set_first_color_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.first_color_has_been_modified)
}

// optional bool first_color_is_mixed = 6;
inline bool CellFillStandIn::_internal_has_first_color_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellFillStandIn::has_first_color_is_mixed() const {
  return _internal_has_first_color_is_mixed();
}
inline void CellFillStandIn::clear_first_color_is_mixed() {
  first_color_is_mixed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CellFillStandIn::_internal_first_color_is_mixed() const {
  return first_color_is_mixed_;
}
inline bool CellFillStandIn::first_color_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.first_color_is_mixed)
  return _internal_first_color_is_mixed();
}
inline void CellFillStandIn::_internal_set_first_color_is_mixed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  first_color_is_mixed_ = value;
}
inline void CellFillStandIn::set_first_color_is_mixed(bool value) {
  _internal_set_first_color_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.first_color_is_mixed)
}

// optional bool last_color_has_been_modified = 7;
inline bool CellFillStandIn::_internal_has_last_color_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CellFillStandIn::has_last_color_has_been_modified() const {
  return _internal_has_last_color_has_been_modified();
}
inline void CellFillStandIn::clear_last_color_has_been_modified() {
  last_color_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CellFillStandIn::_internal_last_color_has_been_modified() const {
  return last_color_has_been_modified_;
}
inline bool CellFillStandIn::last_color_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.last_color_has_been_modified)
  return _internal_last_color_has_been_modified();
}
inline void CellFillStandIn::_internal_set_last_color_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00000040u;
  last_color_has_been_modified_ = value;
}
inline void CellFillStandIn::set_last_color_has_been_modified(bool value) {
  _internal_set_last_color_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.last_color_has_been_modified)
}

// optional bool last_color_is_mixed = 8;
inline bool CellFillStandIn::_internal_has_last_color_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CellFillStandIn::has_last_color_is_mixed() const {
  return _internal_has_last_color_is_mixed();
}
inline void CellFillStandIn::clear_last_color_is_mixed() {
  last_color_is_mixed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CellFillStandIn::_internal_last_color_is_mixed() const {
  return last_color_is_mixed_;
}
inline bool CellFillStandIn::last_color_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.last_color_is_mixed)
  return _internal_last_color_is_mixed();
}
inline void CellFillStandIn::_internal_set_last_color_is_mixed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  last_color_is_mixed_ = value;
}
inline void CellFillStandIn::set_last_color_is_mixed(bool value) {
  _internal_set_last_color_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.last_color_is_mixed)
}

// optional bool gradient_type_has_been_modified = 9;
inline bool CellFillStandIn::_internal_has_gradient_type_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CellFillStandIn::has_gradient_type_has_been_modified() const {
  return _internal_has_gradient_type_has_been_modified();
}
inline void CellFillStandIn::clear_gradient_type_has_been_modified() {
  gradient_type_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CellFillStandIn::_internal_gradient_type_has_been_modified() const {
  return gradient_type_has_been_modified_;
}
inline bool CellFillStandIn::gradient_type_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.gradient_type_has_been_modified)
  return _internal_gradient_type_has_been_modified();
}
inline void CellFillStandIn::_internal_set_gradient_type_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00000100u;
  gradient_type_has_been_modified_ = value;
}
inline void CellFillStandIn::set_gradient_type_has_been_modified(bool value) {
  _internal_set_gradient_type_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.gradient_type_has_been_modified)
}

// optional bool gradient_type_is_mixed = 10;
inline bool CellFillStandIn::_internal_has_gradient_type_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CellFillStandIn::has_gradient_type_is_mixed() const {
  return _internal_has_gradient_type_is_mixed();
}
inline void CellFillStandIn::clear_gradient_type_is_mixed() {
  gradient_type_is_mixed_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CellFillStandIn::_internal_gradient_type_is_mixed() const {
  return gradient_type_is_mixed_;
}
inline bool CellFillStandIn::gradient_type_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.gradient_type_is_mixed)
  return _internal_gradient_type_is_mixed();
}
inline void CellFillStandIn::_internal_set_gradient_type_is_mixed(bool value) {
  _has_bits_[0] |= 0x00000200u;
  gradient_type_is_mixed_ = value;
}
inline void CellFillStandIn::set_gradient_type_is_mixed(bool value) {
  _internal_set_gradient_type_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.gradient_type_is_mixed)
}

// optional bool gradient_angle_has_been_modified = 11;
inline bool CellFillStandIn::_internal_has_gradient_angle_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CellFillStandIn::has_gradient_angle_has_been_modified() const {
  return _internal_has_gradient_angle_has_been_modified();
}
inline void CellFillStandIn::clear_gradient_angle_has_been_modified() {
  gradient_angle_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CellFillStandIn::_internal_gradient_angle_has_been_modified() const {
  return gradient_angle_has_been_modified_;
}
inline bool CellFillStandIn::gradient_angle_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.gradient_angle_has_been_modified)
  return _internal_gradient_angle_has_been_modified();
}
inline void CellFillStandIn::_internal_set_gradient_angle_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00000400u;
  gradient_angle_has_been_modified_ = value;
}
inline void CellFillStandIn::set_gradient_angle_has_been_modified(bool value) {
  _internal_set_gradient_angle_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.gradient_angle_has_been_modified)
}

// optional bool gradient_angle_is_mixed = 12;
inline bool CellFillStandIn::_internal_has_gradient_angle_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CellFillStandIn::has_gradient_angle_is_mixed() const {
  return _internal_has_gradient_angle_is_mixed();
}
inline void CellFillStandIn::clear_gradient_angle_is_mixed() {
  gradient_angle_is_mixed_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CellFillStandIn::_internal_gradient_angle_is_mixed() const {
  return gradient_angle_is_mixed_;
}
inline bool CellFillStandIn::gradient_angle_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.gradient_angle_is_mixed)
  return _internal_gradient_angle_is_mixed();
}
inline void CellFillStandIn::_internal_set_gradient_angle_is_mixed(bool value) {
  _has_bits_[0] |= 0x00000800u;
  gradient_angle_is_mixed_ = value;
}
inline void CellFillStandIn::set_gradient_angle_is_mixed(bool value) {
  _internal_set_gradient_angle_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.gradient_angle_is_mixed)
}

// optional bool image_data_has_been_modified = 13;
inline bool CellFillStandIn::_internal_has_image_data_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_image_data_has_been_modified() const {
  return _internal_has_image_data_has_been_modified();
}
inline void CellFillStandIn::clear_image_data_has_been_modified() {
  image_data_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CellFillStandIn::_internal_image_data_has_been_modified() const {
  return image_data_has_been_modified_;
}
inline bool CellFillStandIn::image_data_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.image_data_has_been_modified)
  return _internal_image_data_has_been_modified();
}
inline void CellFillStandIn::_internal_set_image_data_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00001000u;
  image_data_has_been_modified_ = value;
}
inline void CellFillStandIn::set_image_data_has_been_modified(bool value) {
  _internal_set_image_data_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.image_data_has_been_modified)
}

// optional bool image_data_is_mixed = 14;
inline bool CellFillStandIn::_internal_has_image_data_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_image_data_is_mixed() const {
  return _internal_has_image_data_is_mixed();
}
inline void CellFillStandIn::clear_image_data_is_mixed() {
  image_data_is_mixed_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CellFillStandIn::_internal_image_data_is_mixed() const {
  return image_data_is_mixed_;
}
inline bool CellFillStandIn::image_data_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.image_data_is_mixed)
  return _internal_image_data_is_mixed();
}
inline void CellFillStandIn::_internal_set_image_data_is_mixed(bool value) {
  _has_bits_[0] |= 0x00002000u;
  image_data_is_mixed_ = value;
}
inline void CellFillStandIn::set_image_data_is_mixed(bool value) {
  _internal_set_image_data_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.image_data_is_mixed)
}

// optional bool tint_color_has_been_modified = 15;
inline bool CellFillStandIn::_internal_has_tint_color_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_tint_color_has_been_modified() const {
  return _internal_has_tint_color_has_been_modified();
}
inline void CellFillStandIn::clear_tint_color_has_been_modified() {
  tint_color_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CellFillStandIn::_internal_tint_color_has_been_modified() const {
  return tint_color_has_been_modified_;
}
inline bool CellFillStandIn::tint_color_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.tint_color_has_been_modified)
  return _internal_tint_color_has_been_modified();
}
inline void CellFillStandIn::_internal_set_tint_color_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00004000u;
  tint_color_has_been_modified_ = value;
}
inline void CellFillStandIn::set_tint_color_has_been_modified(bool value) {
  _internal_set_tint_color_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.tint_color_has_been_modified)
}

// optional bool tint_color_is_mixed = 16;
inline bool CellFillStandIn::_internal_has_tint_color_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_tint_color_is_mixed() const {
  return _internal_has_tint_color_is_mixed();
}
inline void CellFillStandIn::clear_tint_color_is_mixed() {
  tint_color_is_mixed_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CellFillStandIn::_internal_tint_color_is_mixed() const {
  return tint_color_is_mixed_;
}
inline bool CellFillStandIn::tint_color_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.tint_color_is_mixed)
  return _internal_tint_color_is_mixed();
}
inline void CellFillStandIn::_internal_set_tint_color_is_mixed(bool value) {
  _has_bits_[0] |= 0x00008000u;
  tint_color_is_mixed_ = value;
}
inline void CellFillStandIn::set_tint_color_is_mixed(bool value) {
  _internal_set_tint_color_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.tint_color_is_mixed)
}

// optional bool scale_has_been_modified = 17;
inline bool CellFillStandIn::_internal_has_scale_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_scale_has_been_modified() const {
  return _internal_has_scale_has_been_modified();
}
inline void CellFillStandIn::clear_scale_has_been_modified() {
  scale_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CellFillStandIn::_internal_scale_has_been_modified() const {
  return scale_has_been_modified_;
}
inline bool CellFillStandIn::scale_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.scale_has_been_modified)
  return _internal_scale_has_been_modified();
}
inline void CellFillStandIn::_internal_set_scale_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00010000u;
  scale_has_been_modified_ = value;
}
inline void CellFillStandIn::set_scale_has_been_modified(bool value) {
  _internal_set_scale_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.scale_has_been_modified)
}

// optional bool scale_is_mixed = 18;
inline bool CellFillStandIn::_internal_has_scale_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_scale_is_mixed() const {
  return _internal_has_scale_is_mixed();
}
inline void CellFillStandIn::clear_scale_is_mixed() {
  scale_is_mixed_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CellFillStandIn::_internal_scale_is_mixed() const {
  return scale_is_mixed_;
}
inline bool CellFillStandIn::scale_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.scale_is_mixed)
  return _internal_scale_is_mixed();
}
inline void CellFillStandIn::_internal_set_scale_is_mixed(bool value) {
  _has_bits_[0] |= 0x00020000u;
  scale_is_mixed_ = value;
}
inline void CellFillStandIn::set_scale_is_mixed(bool value) {
  _internal_set_scale_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.scale_is_mixed)
}

// optional bool technique_has_been_modified = 19;
inline bool CellFillStandIn::_internal_has_technique_has_been_modified() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_technique_has_been_modified() const {
  return _internal_has_technique_has_been_modified();
}
inline void CellFillStandIn::clear_technique_has_been_modified() {
  technique_has_been_modified_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CellFillStandIn::_internal_technique_has_been_modified() const {
  return technique_has_been_modified_;
}
inline bool CellFillStandIn::technique_has_been_modified() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.technique_has_been_modified)
  return _internal_technique_has_been_modified();
}
inline void CellFillStandIn::_internal_set_technique_has_been_modified(bool value) {
  _has_bits_[0] |= 0x00040000u;
  technique_has_been_modified_ = value;
}
inline void CellFillStandIn::set_technique_has_been_modified(bool value) {
  _internal_set_technique_has_been_modified(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.technique_has_been_modified)
}

// optional bool technique_is_mixed = 20;
inline bool CellFillStandIn::_internal_has_technique_is_mixed() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CellFillStandIn::has_technique_is_mixed() const {
  return _internal_has_technique_is_mixed();
}
inline void CellFillStandIn::clear_technique_is_mixed() {
  technique_is_mixed_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CellFillStandIn::_internal_technique_is_mixed() const {
  return technique_is_mixed_;
}
inline bool CellFillStandIn::technique_is_mixed() const {
  // @@protoc_insertion_point(field_get:TST.CellFillStandIn.technique_is_mixed)
  return _internal_technique_is_mixed();
}
inline void CellFillStandIn::_internal_set_technique_is_mixed(bool value) {
  _has_bits_[0] |= 0x00080000u;
  technique_is_mixed_ = value;
}
inline void CellFillStandIn::set_technique_is_mixed(bool value) {
  _internal_set_technique_is_mixed(value);
  // @@protoc_insertion_point(field_set:TST.CellFillStandIn.technique_is_mixed)
}

// -------------------------------------------------------------------

// FormulaSelectionArchive

// required .TSWP.SelectionArchive super = 1;
inline bool FormulaSelectionArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FormulaSelectionArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::SelectionArchive& FormulaSelectionArchive::_internal_super() const {
  const ::TSWP::SelectionArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::SelectionArchive&>(
      ::TSWP::_SelectionArchive_default_instance_);
}
inline const ::TSWP::SelectionArchive& FormulaSelectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TST.FormulaSelectionArchive.super)
  return _internal_super();
}
inline void FormulaSelectionArchive::unsafe_arena_set_allocated_super(
    ::TSWP::SelectionArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.FormulaSelectionArchive.super)
}
inline ::TSWP::SelectionArchive* FormulaSelectionArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::SelectionArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSWP::SelectionArchive* FormulaSelectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TST.FormulaSelectionArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSWP::SelectionArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSWP::SelectionArchive* FormulaSelectionArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::SelectionArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSWP::SelectionArchive* FormulaSelectionArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TST.FormulaSelectionArchive.super)
  return _internal_mutable_super();
}
inline void FormulaSelectionArchive::set_allocated_super(::TSWP::SelectionArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TST.FormulaSelectionArchive.super)
}

// optional uint32 activeTokenCharIndex = 2;
inline bool FormulaSelectionArchive::_internal_has_activetokencharindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormulaSelectionArchive::has_activetokencharindex() const {
  return _internal_has_activetokencharindex();
}
inline void FormulaSelectionArchive::clear_activetokencharindex() {
  activetokencharindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaSelectionArchive::_internal_activetokencharindex() const {
  return activetokencharindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormulaSelectionArchive::activetokencharindex() const {
  // @@protoc_insertion_point(field_get:TST.FormulaSelectionArchive.activeTokenCharIndex)
  return _internal_activetokencharindex();
}
inline void FormulaSelectionArchive::_internal_set_activetokencharindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  activetokencharindex_ = value;
}
inline void FormulaSelectionArchive::set_activetokencharindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activetokencharindex(value);
  // @@protoc_insertion_point(field_set:TST.FormulaSelectionArchive.activeTokenCharIndex)
}

// -------------------------------------------------------------------

// CellBorderArchive

// optional .TSD.StrokeArchive top_stroke = 1;
inline bool CellBorderArchive::_internal_has_top_stroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || top_stroke_ != nullptr);
  return value;
}
inline bool CellBorderArchive::has_top_stroke() const {
  return _internal_has_top_stroke();
}
inline const ::TSD::StrokeArchive& CellBorderArchive::_internal_top_stroke() const {
  const ::TSD::StrokeArchive* p = top_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellBorderArchive::top_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.top_stroke)
  return _internal_top_stroke();
}
inline void CellBorderArchive::unsafe_arena_set_allocated_top_stroke(
    ::TSD::StrokeArchive* top_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_stroke_);
  }
  top_stroke_ = top_stroke;
  if (top_stroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellBorderArchive.top_stroke)
}
inline ::TSD::StrokeArchive* CellBorderArchive::release_top_stroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = top_stroke_;
  top_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::unsafe_arena_release_top_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellBorderArchive.top_stroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = top_stroke_;
  top_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::_internal_mutable_top_stroke() {
  _has_bits_[0] |= 0x00000001u;
  if (top_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    top_stroke_ = p;
  }
  return top_stroke_;
}
inline ::TSD::StrokeArchive* CellBorderArchive::mutable_top_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellBorderArchive.top_stroke)
  return _internal_mutable_top_stroke();
}
inline void CellBorderArchive::set_allocated_top_stroke(::TSD::StrokeArchive* top_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_stroke_);
  }
  if (top_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      top_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  top_stroke_ = top_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellBorderArchive.top_stroke)
}

// optional int32 top_stroke_order = 2;
inline bool CellBorderArchive::_internal_has_top_stroke_order() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CellBorderArchive::has_top_stroke_order() const {
  return _internal_has_top_stroke_order();
}
inline void CellBorderArchive::clear_top_stroke_order() {
  top_stroke_order_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::_internal_top_stroke_order() const {
  return top_stroke_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::top_stroke_order() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.top_stroke_order)
  return _internal_top_stroke_order();
}
inline void CellBorderArchive::_internal_set_top_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  top_stroke_order_ = value;
}
inline void CellBorderArchive::set_top_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_stroke_order(value);
  // @@protoc_insertion_point(field_set:TST.CellBorderArchive.top_stroke_order)
}

// optional .TSD.StrokeArchive right_stroke = 3;
inline bool CellBorderArchive::_internal_has_right_stroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || right_stroke_ != nullptr);
  return value;
}
inline bool CellBorderArchive::has_right_stroke() const {
  return _internal_has_right_stroke();
}
inline const ::TSD::StrokeArchive& CellBorderArchive::_internal_right_stroke() const {
  const ::TSD::StrokeArchive* p = right_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellBorderArchive::right_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.right_stroke)
  return _internal_right_stroke();
}
inline void CellBorderArchive::unsafe_arena_set_allocated_right_stroke(
    ::TSD::StrokeArchive* right_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_stroke_);
  }
  right_stroke_ = right_stroke;
  if (right_stroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellBorderArchive.right_stroke)
}
inline ::TSD::StrokeArchive* CellBorderArchive::release_right_stroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = right_stroke_;
  right_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::unsafe_arena_release_right_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellBorderArchive.right_stroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = right_stroke_;
  right_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::_internal_mutable_right_stroke() {
  _has_bits_[0] |= 0x00000002u;
  if (right_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    right_stroke_ = p;
  }
  return right_stroke_;
}
inline ::TSD::StrokeArchive* CellBorderArchive::mutable_right_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellBorderArchive.right_stroke)
  return _internal_mutable_right_stroke();
}
inline void CellBorderArchive::set_allocated_right_stroke(::TSD::StrokeArchive* right_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_stroke_);
  }
  if (right_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      right_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  right_stroke_ = right_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellBorderArchive.right_stroke)
}

// optional int32 right_stroke_order = 4;
inline bool CellBorderArchive::_internal_has_right_stroke_order() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CellBorderArchive::has_right_stroke_order() const {
  return _internal_has_right_stroke_order();
}
inline void CellBorderArchive::clear_right_stroke_order() {
  right_stroke_order_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::_internal_right_stroke_order() const {
  return right_stroke_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::right_stroke_order() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.right_stroke_order)
  return _internal_right_stroke_order();
}
inline void CellBorderArchive::_internal_set_right_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  right_stroke_order_ = value;
}
inline void CellBorderArchive::set_right_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right_stroke_order(value);
  // @@protoc_insertion_point(field_set:TST.CellBorderArchive.right_stroke_order)
}

// optional .TSD.StrokeArchive bottom_stroke = 5;
inline bool CellBorderArchive::_internal_has_bottom_stroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bottom_stroke_ != nullptr);
  return value;
}
inline bool CellBorderArchive::has_bottom_stroke() const {
  return _internal_has_bottom_stroke();
}
inline const ::TSD::StrokeArchive& CellBorderArchive::_internal_bottom_stroke() const {
  const ::TSD::StrokeArchive* p = bottom_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellBorderArchive::bottom_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.bottom_stroke)
  return _internal_bottom_stroke();
}
inline void CellBorderArchive::unsafe_arena_set_allocated_bottom_stroke(
    ::TSD::StrokeArchive* bottom_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_stroke_);
  }
  bottom_stroke_ = bottom_stroke;
  if (bottom_stroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellBorderArchive.bottom_stroke)
}
inline ::TSD::StrokeArchive* CellBorderArchive::release_bottom_stroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = bottom_stroke_;
  bottom_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::unsafe_arena_release_bottom_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellBorderArchive.bottom_stroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = bottom_stroke_;
  bottom_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::_internal_mutable_bottom_stroke() {
  _has_bits_[0] |= 0x00000004u;
  if (bottom_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    bottom_stroke_ = p;
  }
  return bottom_stroke_;
}
inline ::TSD::StrokeArchive* CellBorderArchive::mutable_bottom_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellBorderArchive.bottom_stroke)
  return _internal_mutable_bottom_stroke();
}
inline void CellBorderArchive::set_allocated_bottom_stroke(::TSD::StrokeArchive* bottom_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_stroke_);
  }
  if (bottom_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottom_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      bottom_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bottom_stroke_ = bottom_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellBorderArchive.bottom_stroke)
}

// optional int32 bottom_stroke_order = 6;
inline bool CellBorderArchive::_internal_has_bottom_stroke_order() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CellBorderArchive::has_bottom_stroke_order() const {
  return _internal_has_bottom_stroke_order();
}
inline void CellBorderArchive::clear_bottom_stroke_order() {
  bottom_stroke_order_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::_internal_bottom_stroke_order() const {
  return bottom_stroke_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::bottom_stroke_order() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.bottom_stroke_order)
  return _internal_bottom_stroke_order();
}
inline void CellBorderArchive::_internal_set_bottom_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  bottom_stroke_order_ = value;
}
inline void CellBorderArchive::set_bottom_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bottom_stroke_order(value);
  // @@protoc_insertion_point(field_set:TST.CellBorderArchive.bottom_stroke_order)
}

// optional .TSD.StrokeArchive left_stroke = 7;
inline bool CellBorderArchive::_internal_has_left_stroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || left_stroke_ != nullptr);
  return value;
}
inline bool CellBorderArchive::has_left_stroke() const {
  return _internal_has_left_stroke();
}
inline const ::TSD::StrokeArchive& CellBorderArchive::_internal_left_stroke() const {
  const ::TSD::StrokeArchive* p = left_stroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& CellBorderArchive::left_stroke() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.left_stroke)
  return _internal_left_stroke();
}
inline void CellBorderArchive::unsafe_arena_set_allocated_left_stroke(
    ::TSD::StrokeArchive* left_stroke) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_stroke_);
  }
  left_stroke_ = left_stroke;
  if (left_stroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CellBorderArchive.left_stroke)
}
inline ::TSD::StrokeArchive* CellBorderArchive::release_left_stroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = left_stroke_;
  left_stroke_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::unsafe_arena_release_left_stroke() {
  // @@protoc_insertion_point(field_release:TST.CellBorderArchive.left_stroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = left_stroke_;
  left_stroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* CellBorderArchive::_internal_mutable_left_stroke() {
  _has_bits_[0] |= 0x00000008u;
  if (left_stroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArena());
    left_stroke_ = p;
  }
  return left_stroke_;
}
inline ::TSD::StrokeArchive* CellBorderArchive::mutable_left_stroke() {
  // @@protoc_insertion_point(field_mutable:TST.CellBorderArchive.left_stroke)
  return _internal_mutable_left_stroke();
}
inline void CellBorderArchive::set_allocated_left_stroke(::TSD::StrokeArchive* left_stroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_stroke_);
  }
  if (left_stroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_stroke)->GetArena();
    if (message_arena != submessage_arena) {
      left_stroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_stroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  left_stroke_ = left_stroke;
  // @@protoc_insertion_point(field_set_allocated:TST.CellBorderArchive.left_stroke)
}

// optional int32 left_stroke_order = 8;
inline bool CellBorderArchive::_internal_has_left_stroke_order() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CellBorderArchive::has_left_stroke_order() const {
  return _internal_has_left_stroke_order();
}
inline void CellBorderArchive::clear_left_stroke_order() {
  left_stroke_order_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::_internal_left_stroke_order() const {
  return left_stroke_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CellBorderArchive::left_stroke_order() const {
  // @@protoc_insertion_point(field_get:TST.CellBorderArchive.left_stroke_order)
  return _internal_left_stroke_order();
}
inline void CellBorderArchive::_internal_set_left_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  left_stroke_order_ = value;
}
inline void CellBorderArchive::set_left_stroke_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left_stroke_order(value);
  // @@protoc_insertion_point(field_set:TST.CellBorderArchive.left_stroke_order)
}

// -------------------------------------------------------------------

// DefaultCellStylesContainerArchive

// required .TSP.Reference table_style_network = 1;
inline bool DefaultCellStylesContainerArchive::_internal_has_table_style_network() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_style_network_ != nullptr);
  return value;
}
inline bool DefaultCellStylesContainerArchive::has_table_style_network() const {
  return _internal_has_table_style_network();
}
inline const ::TSP::Reference& DefaultCellStylesContainerArchive::_internal_table_style_network() const {
  const ::TSP::Reference* p = table_style_network_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DefaultCellStylesContainerArchive::table_style_network() const {
  // @@protoc_insertion_point(field_get:TST.DefaultCellStylesContainerArchive.table_style_network)
  return _internal_table_style_network();
}
inline void DefaultCellStylesContainerArchive::unsafe_arena_set_allocated_table_style_network(
    ::TSP::Reference* table_style_network) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_network_);
  }
  table_style_network_ = table_style_network;
  if (table_style_network) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.DefaultCellStylesContainerArchive.table_style_network)
}
inline ::TSP::Reference* DefaultCellStylesContainerArchive::release_table_style_network() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_style_network_;
  table_style_network_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DefaultCellStylesContainerArchive::unsafe_arena_release_table_style_network() {
  // @@protoc_insertion_point(field_release:TST.DefaultCellStylesContainerArchive.table_style_network)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_style_network_;
  table_style_network_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DefaultCellStylesContainerArchive::_internal_mutable_table_style_network() {
  _has_bits_[0] |= 0x00000001u;
  if (table_style_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_style_network_ = p;
  }
  return table_style_network_;
}
inline ::TSP::Reference* DefaultCellStylesContainerArchive::mutable_table_style_network() {
  // @@protoc_insertion_point(field_mutable:TST.DefaultCellStylesContainerArchive.table_style_network)
  return _internal_mutable_table_style_network();
}
inline void DefaultCellStylesContainerArchive::set_allocated_table_style_network(::TSP::Reference* table_style_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_network_);
  }
  if (table_style_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_style_network)->GetArena();
    if (message_arena != submessage_arena) {
      table_style_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_style_network, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_style_network_ = table_style_network;
  // @@protoc_insertion_point(field_set_allocated:TST.DefaultCellStylesContainerArchive.table_style_network)
}

// repeated .TSP.UUID header_row_uids = 2;
inline int DefaultCellStylesContainerArchive::_internal_header_row_uids_size() const {
  return header_row_uids_.size();
}
inline int DefaultCellStylesContainerArchive::header_row_uids_size() const {
  return _internal_header_row_uids_size();
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::mutable_header_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.DefaultCellStylesContainerArchive.header_row_uids)
  return header_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
DefaultCellStylesContainerArchive::mutable_header_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.DefaultCellStylesContainerArchive.header_row_uids)
  return &header_row_uids_;
}
inline const ::TSP::UUID& DefaultCellStylesContainerArchive::_internal_header_row_uids(int index) const {
  return header_row_uids_.Get(index);
}
inline const ::TSP::UUID& DefaultCellStylesContainerArchive::header_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.DefaultCellStylesContainerArchive.header_row_uids)
  return _internal_header_row_uids(index);
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::_internal_add_header_row_uids() {
  return header_row_uids_.Add();
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::add_header_row_uids() {
  // @@protoc_insertion_point(field_add:TST.DefaultCellStylesContainerArchive.header_row_uids)
  return _internal_add_header_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
DefaultCellStylesContainerArchive::header_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.DefaultCellStylesContainerArchive.header_row_uids)
  return header_row_uids_;
}

// repeated .TSP.UUID footer_row_uids = 3;
inline int DefaultCellStylesContainerArchive::_internal_footer_row_uids_size() const {
  return footer_row_uids_.size();
}
inline int DefaultCellStylesContainerArchive::footer_row_uids_size() const {
  return _internal_footer_row_uids_size();
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::mutable_footer_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.DefaultCellStylesContainerArchive.footer_row_uids)
  return footer_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
DefaultCellStylesContainerArchive::mutable_footer_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.DefaultCellStylesContainerArchive.footer_row_uids)
  return &footer_row_uids_;
}
inline const ::TSP::UUID& DefaultCellStylesContainerArchive::_internal_footer_row_uids(int index) const {
  return footer_row_uids_.Get(index);
}
inline const ::TSP::UUID& DefaultCellStylesContainerArchive::footer_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.DefaultCellStylesContainerArchive.footer_row_uids)
  return _internal_footer_row_uids(index);
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::_internal_add_footer_row_uids() {
  return footer_row_uids_.Add();
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::add_footer_row_uids() {
  // @@protoc_insertion_point(field_add:TST.DefaultCellStylesContainerArchive.footer_row_uids)
  return _internal_add_footer_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
DefaultCellStylesContainerArchive::footer_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.DefaultCellStylesContainerArchive.footer_row_uids)
  return footer_row_uids_;
}

// repeated .TSP.UUID header_column_uids = 4;
inline int DefaultCellStylesContainerArchive::_internal_header_column_uids_size() const {
  return header_column_uids_.size();
}
inline int DefaultCellStylesContainerArchive::header_column_uids_size() const {
  return _internal_header_column_uids_size();
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::mutable_header_column_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.DefaultCellStylesContainerArchive.header_column_uids)
  return header_column_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
DefaultCellStylesContainerArchive::mutable_header_column_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.DefaultCellStylesContainerArchive.header_column_uids)
  return &header_column_uids_;
}
inline const ::TSP::UUID& DefaultCellStylesContainerArchive::_internal_header_column_uids(int index) const {
  return header_column_uids_.Get(index);
}
inline const ::TSP::UUID& DefaultCellStylesContainerArchive::header_column_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.DefaultCellStylesContainerArchive.header_column_uids)
  return _internal_header_column_uids(index);
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::_internal_add_header_column_uids() {
  return header_column_uids_.Add();
}
inline ::TSP::UUID* DefaultCellStylesContainerArchive::add_header_column_uids() {
  // @@protoc_insertion_point(field_add:TST.DefaultCellStylesContainerArchive.header_column_uids)
  return _internal_add_header_column_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
DefaultCellStylesContainerArchive::header_column_uids() const {
  // @@protoc_insertion_point(field_list:TST.DefaultCellStylesContainerArchive.header_column_uids)
  return header_column_uids_;
}

// -------------------------------------------------------------------

// MultiTableRemapperArchive

// required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
inline bool MultiTableRemapperArchive::_internal_has_mapping_purpose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MultiTableRemapperArchive::has_mapping_purpose() const {
  return _internal_has_mapping_purpose();
}
inline void MultiTableRemapperArchive::clear_mapping_purpose() {
  mapping_purpose_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TST::MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::_internal_mapping_purpose() const {
  return static_cast< ::TST::MultiTableRemapperArchive_Purpose >(mapping_purpose_);
}
inline ::TST::MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::mapping_purpose() const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.mapping_purpose)
  return _internal_mapping_purpose();
}
inline void MultiTableRemapperArchive::_internal_set_mapping_purpose(::TST::MultiTableRemapperArchive_Purpose value) {
  assert(::TST::MultiTableRemapperArchive_Purpose_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  mapping_purpose_ = value;
}
inline void MultiTableRemapperArchive::set_mapping_purpose(::TST::MultiTableRemapperArchive_Purpose value) {
  _internal_set_mapping_purpose(value);
  // @@protoc_insertion_point(field_set:TST.MultiTableRemapperArchive.mapping_purpose)
}

// required bool should_steal_references = 2;
inline bool MultiTableRemapperArchive::_internal_has_should_steal_references() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MultiTableRemapperArchive::has_should_steal_references() const {
  return _internal_has_should_steal_references();
}
inline void MultiTableRemapperArchive::clear_should_steal_references() {
  should_steal_references_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MultiTableRemapperArchive::_internal_should_steal_references() const {
  return should_steal_references_;
}
inline bool MultiTableRemapperArchive::should_steal_references() const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.should_steal_references)
  return _internal_should_steal_references();
}
inline void MultiTableRemapperArchive::_internal_set_should_steal_references(bool value) {
  _has_bits_[0] |= 0x00000004u;
  should_steal_references_ = value;
}
inline void MultiTableRemapperArchive::set_should_steal_references(bool value) {
  _internal_set_should_steal_references(value);
  // @@protoc_insertion_point(field_set:TST.MultiTableRemapperArchive.should_steal_references)
}

// required bool can_reuse_table_names = 3;
inline bool MultiTableRemapperArchive::_internal_has_can_reuse_table_names() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MultiTableRemapperArchive::has_can_reuse_table_names() const {
  return _internal_has_can_reuse_table_names();
}
inline void MultiTableRemapperArchive::clear_can_reuse_table_names() {
  can_reuse_table_names_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MultiTableRemapperArchive::_internal_can_reuse_table_names() const {
  return can_reuse_table_names_;
}
inline bool MultiTableRemapperArchive::can_reuse_table_names() const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.can_reuse_table_names)
  return _internal_can_reuse_table_names();
}
inline void MultiTableRemapperArchive::_internal_set_can_reuse_table_names(bool value) {
  _has_bits_[0] |= 0x00000008u;
  can_reuse_table_names_ = value;
}
inline void MultiTableRemapperArchive::set_can_reuse_table_names(bool value) {
  _internal_set_can_reuse_table_names(value);
  // @@protoc_insertion_point(field_set:TST.MultiTableRemapperArchive.can_reuse_table_names)
}

// repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
inline int MultiTableRemapperArchive::_internal_owner_uid_mapper_size() const {
  return owner_uid_mapper_.size();
}
inline int MultiTableRemapperArchive::owner_uid_mapper_size() const {
  return _internal_owner_uid_mapper_size();
}
inline ::TSCE::OwnerUIDMapperArchive* MultiTableRemapperArchive::mutable_owner_uid_mapper(int index) {
  // @@protoc_insertion_point(field_mutable:TST.MultiTableRemapperArchive.owner_uid_mapper)
  return owner_uid_mapper_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerUIDMapperArchive >*
MultiTableRemapperArchive::mutable_owner_uid_mapper() {
  // @@protoc_insertion_point(field_mutable_list:TST.MultiTableRemapperArchive.owner_uid_mapper)
  return &owner_uid_mapper_;
}
inline const ::TSCE::OwnerUIDMapperArchive& MultiTableRemapperArchive::_internal_owner_uid_mapper(int index) const {
  return owner_uid_mapper_.Get(index);
}
inline const ::TSCE::OwnerUIDMapperArchive& MultiTableRemapperArchive::owner_uid_mapper(int index) const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.owner_uid_mapper)
  return _internal_owner_uid_mapper(index);
}
inline ::TSCE::OwnerUIDMapperArchive* MultiTableRemapperArchive::_internal_add_owner_uid_mapper() {
  return owner_uid_mapper_.Add();
}
inline ::TSCE::OwnerUIDMapperArchive* MultiTableRemapperArchive::add_owner_uid_mapper() {
  // @@protoc_insertion_point(field_add:TST.MultiTableRemapperArchive.owner_uid_mapper)
  return _internal_add_owner_uid_mapper();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::OwnerUIDMapperArchive >&
MultiTableRemapperArchive::owner_uid_mapper() const {
  // @@protoc_insertion_point(field_list:TST.MultiTableRemapperArchive.owner_uid_mapper)
  return owner_uid_mapper_;
}

// required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
inline bool MultiTableRemapperArchive::_internal_has_backing_tables_for_charts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || backing_tables_for_charts_ != nullptr);
  return value;
}
inline bool MultiTableRemapperArchive::has_backing_tables_for_charts() const {
  return _internal_has_backing_tables_for_charts();
}
inline const ::TSP::UUIDMapArchive& MultiTableRemapperArchive::_internal_backing_tables_for_charts() const {
  const ::TSP::UUIDMapArchive* p = backing_tables_for_charts_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDMapArchive&>(
      ::TSP::_UUIDMapArchive_default_instance_);
}
inline const ::TSP::UUIDMapArchive& MultiTableRemapperArchive::backing_tables_for_charts() const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.backing_tables_for_charts)
  return _internal_backing_tables_for_charts();
}
inline void MultiTableRemapperArchive::unsafe_arena_set_allocated_backing_tables_for_charts(
    ::TSP::UUIDMapArchive* backing_tables_for_charts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backing_tables_for_charts_);
  }
  backing_tables_for_charts_ = backing_tables_for_charts;
  if (backing_tables_for_charts) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.MultiTableRemapperArchive.backing_tables_for_charts)
}
inline ::TSP::UUIDMapArchive* MultiTableRemapperArchive::release_backing_tables_for_charts() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDMapArchive* temp = backing_tables_for_charts_;
  backing_tables_for_charts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDMapArchive* MultiTableRemapperArchive::unsafe_arena_release_backing_tables_for_charts() {
  // @@protoc_insertion_point(field_release:TST.MultiTableRemapperArchive.backing_tables_for_charts)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDMapArchive* temp = backing_tables_for_charts_;
  backing_tables_for_charts_ = nullptr;
  return temp;
}
inline ::TSP::UUIDMapArchive* MultiTableRemapperArchive::_internal_mutable_backing_tables_for_charts() {
  _has_bits_[0] |= 0x00000001u;
  if (backing_tables_for_charts_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDMapArchive>(GetArena());
    backing_tables_for_charts_ = p;
  }
  return backing_tables_for_charts_;
}
inline ::TSP::UUIDMapArchive* MultiTableRemapperArchive::mutable_backing_tables_for_charts() {
  // @@protoc_insertion_point(field_mutable:TST.MultiTableRemapperArchive.backing_tables_for_charts)
  return _internal_mutable_backing_tables_for_charts();
}
inline void MultiTableRemapperArchive::set_allocated_backing_tables_for_charts(::TSP::UUIDMapArchive* backing_tables_for_charts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(backing_tables_for_charts_);
  }
  if (backing_tables_for_charts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(backing_tables_for_charts)->GetArena();
    if (message_arena != submessage_arena) {
      backing_tables_for_charts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backing_tables_for_charts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  backing_tables_for_charts_ = backing_tables_for_charts;
  // @@protoc_insertion_point(field_set_allocated:TST.MultiTableRemapperArchive.backing_tables_for_charts)
}

// required bool cross_document_paste = 6;
inline bool MultiTableRemapperArchive::_internal_has_cross_document_paste() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MultiTableRemapperArchive::has_cross_document_paste() const {
  return _internal_has_cross_document_paste();
}
inline void MultiTableRemapperArchive::clear_cross_document_paste() {
  cross_document_paste_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MultiTableRemapperArchive::_internal_cross_document_paste() const {
  return cross_document_paste_;
}
inline bool MultiTableRemapperArchive::cross_document_paste() const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.cross_document_paste)
  return _internal_cross_document_paste();
}
inline void MultiTableRemapperArchive::_internal_set_cross_document_paste(bool value) {
  _has_bits_[0] |= 0x00000010u;
  cross_document_paste_ = value;
}
inline void MultiTableRemapperArchive::set_cross_document_paste(bool value) {
  _internal_set_cross_document_paste(value);
  // @@protoc_insertion_point(field_set:TST.MultiTableRemapperArchive.cross_document_paste)
}

// required bool nested_inner_mapper = 7;
inline bool MultiTableRemapperArchive::_internal_has_nested_inner_mapper() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MultiTableRemapperArchive::has_nested_inner_mapper() const {
  return _internal_has_nested_inner_mapper();
}
inline void MultiTableRemapperArchive::clear_nested_inner_mapper() {
  nested_inner_mapper_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MultiTableRemapperArchive::_internal_nested_inner_mapper() const {
  return nested_inner_mapper_;
}
inline bool MultiTableRemapperArchive::nested_inner_mapper() const {
  // @@protoc_insertion_point(field_get:TST.MultiTableRemapperArchive.nested_inner_mapper)
  return _internal_nested_inner_mapper();
}
inline void MultiTableRemapperArchive::_internal_set_nested_inner_mapper(bool value) {
  _has_bits_[0] |= 0x00000020u;
  nested_inner_mapper_ = value;
}
inline void MultiTableRemapperArchive::set_nested_inner_mapper(bool value) {
  _internal_set_nested_inner_mapper(value);
  // @@protoc_insertion_point(field_set:TST.MultiTableRemapperArchive.nested_inner_mapper)
}

// -------------------------------------------------------------------

// ChangePropagationMapWrapper

// required int32 replacement_behavior = 1;
inline bool ChangePropagationMapWrapper::_internal_has_replacement_behavior() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChangePropagationMapWrapper::has_replacement_behavior() const {
  return _internal_has_replacement_behavior();
}
inline void ChangePropagationMapWrapper::clear_replacement_behavior() {
  replacement_behavior_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangePropagationMapWrapper::_internal_replacement_behavior() const {
  return replacement_behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangePropagationMapWrapper::replacement_behavior() const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.replacement_behavior)
  return _internal_replacement_behavior();
}
inline void ChangePropagationMapWrapper::_internal_set_replacement_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  replacement_behavior_ = value;
}
inline void ChangePropagationMapWrapper::set_replacement_behavior(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replacement_behavior(value);
  // @@protoc_insertion_point(field_set:TST.ChangePropagationMapWrapper.replacement_behavior)
}

// repeated .TSP.Reference style_replace_prototypes = 2;
inline int ChangePropagationMapWrapper::_internal_style_replace_prototypes_size() const {
  return style_replace_prototypes_.size();
}
inline int ChangePropagationMapWrapper::style_replace_prototypes_size() const {
  return _internal_style_replace_prototypes_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_replace_prototypes(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_replace_prototypes)
  return style_replace_prototypes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_replace_prototypes() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_replace_prototypes)
  return &style_replace_prototypes_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_replace_prototypes(int index) const {
  return style_replace_prototypes_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_replace_prototypes(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_replace_prototypes)
  return _internal_style_replace_prototypes(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_replace_prototypes() {
  return style_replace_prototypes_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_replace_prototypes() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_replace_prototypes)
  return _internal_add_style_replace_prototypes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_replace_prototypes() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_replace_prototypes)
  return style_replace_prototypes_;
}

// repeated .TSP.Reference style_replace_replacements = 3;
inline int ChangePropagationMapWrapper::_internal_style_replace_replacements_size() const {
  return style_replace_replacements_.size();
}
inline int ChangePropagationMapWrapper::style_replace_replacements_size() const {
  return _internal_style_replace_replacements_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_replace_replacements(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_replace_replacements)
  return style_replace_replacements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_replace_replacements() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_replace_replacements)
  return &style_replace_replacements_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_replace_replacements(int index) const {
  return style_replace_replacements_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_replace_replacements(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_replace_replacements)
  return _internal_style_replace_replacements(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_replace_replacements() {
  return style_replace_replacements_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_replace_replacements() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_replace_replacements)
  return _internal_add_style_replace_replacements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_replace_replacements() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_replace_replacements)
  return style_replace_replacements_;
}

// repeated .TSP.Reference style_modify_styles = 4;
inline int ChangePropagationMapWrapper::_internal_style_modify_styles_size() const {
  return style_modify_styles_.size();
}
inline int ChangePropagationMapWrapper::style_modify_styles_size() const {
  return _internal_style_modify_styles_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_modify_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_modify_styles)
  return style_modify_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_modify_styles() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_modify_styles)
  return &style_modify_styles_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_modify_styles(int index) const {
  return style_modify_styles_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_modify_styles(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_modify_styles)
  return _internal_style_modify_styles(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_modify_styles() {
  return style_modify_styles_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_modify_styles() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_modify_styles)
  return _internal_add_style_modify_styles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_modify_styles() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_modify_styles)
  return style_modify_styles_;
}

// repeated .TSP.Reference style_modify_old_prop_maps = 5;
inline int ChangePropagationMapWrapper::_internal_style_modify_old_prop_maps_size() const {
  return style_modify_old_prop_maps_.size();
}
inline int ChangePropagationMapWrapper::style_modify_old_prop_maps_size() const {
  return _internal_style_modify_old_prop_maps_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_modify_old_prop_maps(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_modify_old_prop_maps)
  return style_modify_old_prop_maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_modify_old_prop_maps() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_modify_old_prop_maps)
  return &style_modify_old_prop_maps_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_modify_old_prop_maps(int index) const {
  return style_modify_old_prop_maps_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_modify_old_prop_maps(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_modify_old_prop_maps)
  return _internal_style_modify_old_prop_maps(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_modify_old_prop_maps() {
  return style_modify_old_prop_maps_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_modify_old_prop_maps() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_modify_old_prop_maps)
  return _internal_add_style_modify_old_prop_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_modify_old_prop_maps() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_modify_old_prop_maps)
  return style_modify_old_prop_maps_;
}

// repeated .TSP.Reference style_modify_new_prop_maps = 6;
inline int ChangePropagationMapWrapper::_internal_style_modify_new_prop_maps_size() const {
  return style_modify_new_prop_maps_.size();
}
inline int ChangePropagationMapWrapper::style_modify_new_prop_maps_size() const {
  return _internal_style_modify_new_prop_maps_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_modify_new_prop_maps(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_modify_new_prop_maps)
  return style_modify_new_prop_maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_modify_new_prop_maps() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_modify_new_prop_maps)
  return &style_modify_new_prop_maps_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_modify_new_prop_maps(int index) const {
  return style_modify_new_prop_maps_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_modify_new_prop_maps(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_modify_new_prop_maps)
  return _internal_style_modify_new_prop_maps(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_modify_new_prop_maps() {
  return style_modify_new_prop_maps_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_modify_new_prop_maps() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_modify_new_prop_maps)
  return _internal_add_style_modify_new_prop_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_modify_new_prop_maps() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_modify_new_prop_maps)
  return style_modify_new_prop_maps_;
}

// repeated .TSP.Reference style_delete_prototypes = 7;
inline int ChangePropagationMapWrapper::_internal_style_delete_prototypes_size() const {
  return style_delete_prototypes_.size();
}
inline int ChangePropagationMapWrapper::style_delete_prototypes_size() const {
  return _internal_style_delete_prototypes_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_delete_prototypes(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_delete_prototypes)
  return style_delete_prototypes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_delete_prototypes() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_delete_prototypes)
  return &style_delete_prototypes_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_delete_prototypes(int index) const {
  return style_delete_prototypes_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_delete_prototypes(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_delete_prototypes)
  return _internal_style_delete_prototypes(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_delete_prototypes() {
  return style_delete_prototypes_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_delete_prototypes() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_delete_prototypes)
  return _internal_add_style_delete_prototypes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_delete_prototypes() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_delete_prototypes)
  return style_delete_prototypes_;
}

// repeated .TSP.Reference style_delete_replacements = 8;
inline int ChangePropagationMapWrapper::_internal_style_delete_replacements_size() const {
  return style_delete_replacements_.size();
}
inline int ChangePropagationMapWrapper::style_delete_replacements_size() const {
  return _internal_style_delete_replacements_size();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_style_delete_replacements(int index) {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.style_delete_replacements)
  return style_delete_replacements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChangePropagationMapWrapper::mutable_style_delete_replacements() {
  // @@protoc_insertion_point(field_mutable_list:TST.ChangePropagationMapWrapper.style_delete_replacements)
  return &style_delete_replacements_;
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_style_delete_replacements(int index) const {
  return style_delete_replacements_.Get(index);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::style_delete_replacements(int index) const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.style_delete_replacements)
  return _internal_style_delete_replacements(index);
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_add_style_delete_replacements() {
  return style_delete_replacements_.Add();
}
inline ::TSP::Reference* ChangePropagationMapWrapper::add_style_delete_replacements() {
  // @@protoc_insertion_point(field_add:TST.ChangePropagationMapWrapper.style_delete_replacements)
  return _internal_add_style_delete_replacements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChangePropagationMapWrapper::style_delete_replacements() const {
  // @@protoc_insertion_point(field_list:TST.ChangePropagationMapWrapper.style_delete_replacements)
  return style_delete_replacements_;
}

// optional .TSP.Reference table_preset_replace_prototype = 9;
inline bool ChangePropagationMapWrapper::_internal_has_table_preset_replace_prototype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_preset_replace_prototype_ != nullptr);
  return value;
}
inline bool ChangePropagationMapWrapper::has_table_preset_replace_prototype() const {
  return _internal_has_table_preset_replace_prototype();
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_table_preset_replace_prototype() const {
  const ::TSP::Reference* p = table_preset_replace_prototype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::table_preset_replace_prototype() const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.table_preset_replace_prototype)
  return _internal_table_preset_replace_prototype();
}
inline void ChangePropagationMapWrapper::unsafe_arena_set_allocated_table_preset_replace_prototype(
    ::TSP::Reference* table_preset_replace_prototype) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_replace_prototype_);
  }
  table_preset_replace_prototype_ = table_preset_replace_prototype;
  if (table_preset_replace_prototype) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ChangePropagationMapWrapper.table_preset_replace_prototype)
}
inline ::TSP::Reference* ChangePropagationMapWrapper::release_table_preset_replace_prototype() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_preset_replace_prototype_;
  table_preset_replace_prototype_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::unsafe_arena_release_table_preset_replace_prototype() {
  // @@protoc_insertion_point(field_release:TST.ChangePropagationMapWrapper.table_preset_replace_prototype)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_preset_replace_prototype_;
  table_preset_replace_prototype_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_mutable_table_preset_replace_prototype() {
  _has_bits_[0] |= 0x00000001u;
  if (table_preset_replace_prototype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_preset_replace_prototype_ = p;
  }
  return table_preset_replace_prototype_;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_table_preset_replace_prototype() {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.table_preset_replace_prototype)
  return _internal_mutable_table_preset_replace_prototype();
}
inline void ChangePropagationMapWrapper::set_allocated_table_preset_replace_prototype(::TSP::Reference* table_preset_replace_prototype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_replace_prototype_);
  }
  if (table_preset_replace_prototype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_replace_prototype)->GetArena();
    if (message_arena != submessage_arena) {
      table_preset_replace_prototype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_preset_replace_prototype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_preset_replace_prototype_ = table_preset_replace_prototype;
  // @@protoc_insertion_point(field_set_allocated:TST.ChangePropagationMapWrapper.table_preset_replace_prototype)
}

// optional .TSP.Reference table_preset_replace_replacement = 10;
inline bool ChangePropagationMapWrapper::_internal_has_table_preset_replace_replacement() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || table_preset_replace_replacement_ != nullptr);
  return value;
}
inline bool ChangePropagationMapWrapper::has_table_preset_replace_replacement() const {
  return _internal_has_table_preset_replace_replacement();
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_table_preset_replace_replacement() const {
  const ::TSP::Reference* p = table_preset_replace_replacement_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::table_preset_replace_replacement() const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.table_preset_replace_replacement)
  return _internal_table_preset_replace_replacement();
}
inline void ChangePropagationMapWrapper::unsafe_arena_set_allocated_table_preset_replace_replacement(
    ::TSP::Reference* table_preset_replace_replacement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_replace_replacement_);
  }
  table_preset_replace_replacement_ = table_preset_replace_replacement;
  if (table_preset_replace_replacement) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ChangePropagationMapWrapper.table_preset_replace_replacement)
}
inline ::TSP::Reference* ChangePropagationMapWrapper::release_table_preset_replace_replacement() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = table_preset_replace_replacement_;
  table_preset_replace_replacement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::unsafe_arena_release_table_preset_replace_replacement() {
  // @@protoc_insertion_point(field_release:TST.ChangePropagationMapWrapper.table_preset_replace_replacement)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = table_preset_replace_replacement_;
  table_preset_replace_replacement_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_mutable_table_preset_replace_replacement() {
  _has_bits_[0] |= 0x00000002u;
  if (table_preset_replace_replacement_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_preset_replace_replacement_ = p;
  }
  return table_preset_replace_replacement_;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_table_preset_replace_replacement() {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.table_preset_replace_replacement)
  return _internal_mutable_table_preset_replace_replacement();
}
inline void ChangePropagationMapWrapper::set_allocated_table_preset_replace_replacement(::TSP::Reference* table_preset_replace_replacement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_replace_replacement_);
  }
  if (table_preset_replace_replacement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_replace_replacement)->GetArena();
    if (message_arena != submessage_arena) {
      table_preset_replace_replacement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_preset_replace_replacement, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  table_preset_replace_replacement_ = table_preset_replace_replacement;
  // @@protoc_insertion_point(field_set_allocated:TST.ChangePropagationMapWrapper.table_preset_replace_replacement)
}

// optional .TSP.Reference table_preset_delete_prototype = 11;
inline bool ChangePropagationMapWrapper::_internal_has_table_preset_delete_prototype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || table_preset_delete_prototype_ != nullptr);
  return value;
}
inline bool ChangePropagationMapWrapper::has_table_preset_delete_prototype() const {
  return _internal_has_table_preset_delete_prototype();
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_table_preset_delete_prototype() const {
  const ::TSP::Reference* p = table_preset_delete_prototype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::table_preset_delete_prototype() const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.table_preset_delete_prototype)
  return _internal_table_preset_delete_prototype();
}
inline void ChangePropagationMapWrapper::unsafe_arena_set_allocated_table_preset_delete_prototype(
    ::TSP::Reference* table_preset_delete_prototype) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_delete_prototype_);
  }
  table_preset_delete_prototype_ = table_preset_delete_prototype;
  if (table_preset_delete_prototype) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ChangePropagationMapWrapper.table_preset_delete_prototype)
}
inline ::TSP::Reference* ChangePropagationMapWrapper::release_table_preset_delete_prototype() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = table_preset_delete_prototype_;
  table_preset_delete_prototype_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::unsafe_arena_release_table_preset_delete_prototype() {
  // @@protoc_insertion_point(field_release:TST.ChangePropagationMapWrapper.table_preset_delete_prototype)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = table_preset_delete_prototype_;
  table_preset_delete_prototype_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_mutable_table_preset_delete_prototype() {
  _has_bits_[0] |= 0x00000004u;
  if (table_preset_delete_prototype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_preset_delete_prototype_ = p;
  }
  return table_preset_delete_prototype_;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_table_preset_delete_prototype() {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.table_preset_delete_prototype)
  return _internal_mutable_table_preset_delete_prototype();
}
inline void ChangePropagationMapWrapper::set_allocated_table_preset_delete_prototype(::TSP::Reference* table_preset_delete_prototype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_delete_prototype_);
  }
  if (table_preset_delete_prototype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_delete_prototype)->GetArena();
    if (message_arena != submessage_arena) {
      table_preset_delete_prototype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_preset_delete_prototype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  table_preset_delete_prototype_ = table_preset_delete_prototype;
  // @@protoc_insertion_point(field_set_allocated:TST.ChangePropagationMapWrapper.table_preset_delete_prototype)
}

// optional .TSP.Reference table_preset_delete_replacement = 12;
inline bool ChangePropagationMapWrapper::_internal_has_table_preset_delete_replacement() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || table_preset_delete_replacement_ != nullptr);
  return value;
}
inline bool ChangePropagationMapWrapper::has_table_preset_delete_replacement() const {
  return _internal_has_table_preset_delete_replacement();
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::_internal_table_preset_delete_replacement() const {
  const ::TSP::Reference* p = table_preset_delete_replacement_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChangePropagationMapWrapper::table_preset_delete_replacement() const {
  // @@protoc_insertion_point(field_get:TST.ChangePropagationMapWrapper.table_preset_delete_replacement)
  return _internal_table_preset_delete_replacement();
}
inline void ChangePropagationMapWrapper::unsafe_arena_set_allocated_table_preset_delete_replacement(
    ::TSP::Reference* table_preset_delete_replacement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_delete_replacement_);
  }
  table_preset_delete_replacement_ = table_preset_delete_replacement;
  if (table_preset_delete_replacement) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.ChangePropagationMapWrapper.table_preset_delete_replacement)
}
inline ::TSP::Reference* ChangePropagationMapWrapper::release_table_preset_delete_replacement() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = table_preset_delete_replacement_;
  table_preset_delete_replacement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::unsafe_arena_release_table_preset_delete_replacement() {
  // @@protoc_insertion_point(field_release:TST.ChangePropagationMapWrapper.table_preset_delete_replacement)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = table_preset_delete_replacement_;
  table_preset_delete_replacement_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::_internal_mutable_table_preset_delete_replacement() {
  _has_bits_[0] |= 0x00000008u;
  if (table_preset_delete_replacement_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_preset_delete_replacement_ = p;
  }
  return table_preset_delete_replacement_;
}
inline ::TSP::Reference* ChangePropagationMapWrapper::mutable_table_preset_delete_replacement() {
  // @@protoc_insertion_point(field_mutable:TST.ChangePropagationMapWrapper.table_preset_delete_replacement)
  return _internal_mutable_table_preset_delete_replacement();
}
inline void ChangePropagationMapWrapper::set_allocated_table_preset_delete_replacement(::TSP::Reference* table_preset_delete_replacement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_delete_replacement_);
  }
  if (table_preset_delete_replacement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_preset_delete_replacement)->GetArena();
    if (message_arena != submessage_arena) {
      table_preset_delete_replacement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_preset_delete_replacement, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  table_preset_delete_replacement_ = table_preset_delete_replacement;
  // @@protoc_insertion_point(field_set_allocated:TST.ChangePropagationMapWrapper.table_preset_delete_replacement)
}

// -------------------------------------------------------------------

// SummaryCellVendorArchive_SummaryCellEntry

// required .TSP.UUID wildcardUID = 1;
inline bool SummaryCellVendorArchive_SummaryCellEntry::_internal_has_wildcarduid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || wildcarduid_ != nullptr);
  return value;
}
inline bool SummaryCellVendorArchive_SummaryCellEntry::has_wildcarduid() const {
  return _internal_has_wildcarduid();
}
inline const ::TSP::UUID& SummaryCellVendorArchive_SummaryCellEntry::_internal_wildcarduid() const {
  const ::TSP::UUID* p = wildcarduid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SummaryCellVendorArchive_SummaryCellEntry::wildcarduid() const {
  // @@protoc_insertion_point(field_get:TST.SummaryCellVendorArchive.SummaryCellEntry.wildcardUID)
  return _internal_wildcarduid();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::unsafe_arena_set_allocated_wildcarduid(
    ::TSP::UUID* wildcarduid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wildcarduid_);
  }
  wildcarduid_ = wildcarduid;
  if (wildcarduid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryCellVendorArchive.SummaryCellEntry.wildcardUID)
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::release_wildcarduid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = wildcarduid_;
  wildcarduid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::unsafe_arena_release_wildcarduid() {
  // @@protoc_insertion_point(field_release:TST.SummaryCellVendorArchive.SummaryCellEntry.wildcardUID)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = wildcarduid_;
  wildcarduid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::_internal_mutable_wildcarduid() {
  _has_bits_[0] |= 0x00000001u;
  if (wildcarduid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    wildcarduid_ = p;
  }
  return wildcarduid_;
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::mutable_wildcarduid() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryCellVendorArchive.SummaryCellEntry.wildcardUID)
  return _internal_mutable_wildcarduid();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::set_allocated_wildcarduid(::TSP::UUID* wildcarduid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wildcarduid_);
  }
  if (wildcarduid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wildcarduid)->GetArena();
    if (message_arena != submessage_arena) {
      wildcarduid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wildcarduid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  wildcarduid_ = wildcarduid;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryCellVendorArchive.SummaryCellEntry.wildcardUID)
}

// required .TSP.UUID columnUID = 2;
inline bool SummaryCellVendorArchive_SummaryCellEntry::_internal_has_columnuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || columnuid_ != nullptr);
  return value;
}
inline bool SummaryCellVendorArchive_SummaryCellEntry::has_columnuid() const {
  return _internal_has_columnuid();
}
inline const ::TSP::UUID& SummaryCellVendorArchive_SummaryCellEntry::_internal_columnuid() const {
  const ::TSP::UUID* p = columnuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& SummaryCellVendorArchive_SummaryCellEntry::columnuid() const {
  // @@protoc_insertion_point(field_get:TST.SummaryCellVendorArchive.SummaryCellEntry.columnUID)
  return _internal_columnuid();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::unsafe_arena_set_allocated_columnuid(
    ::TSP::UUID* columnuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnuid_);
  }
  columnuid_ = columnuid;
  if (columnuid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryCellVendorArchive.SummaryCellEntry.columnUID)
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::release_columnuid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = columnuid_;
  columnuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::unsafe_arena_release_columnuid() {
  // @@protoc_insertion_point(field_release:TST.SummaryCellVendorArchive.SummaryCellEntry.columnUID)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = columnuid_;
  columnuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::_internal_mutable_columnuid() {
  _has_bits_[0] |= 0x00000002u;
  if (columnuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    columnuid_ = p;
  }
  return columnuid_;
}
inline ::TSP::UUID* SummaryCellVendorArchive_SummaryCellEntry::mutable_columnuid() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryCellVendorArchive.SummaryCellEntry.columnUID)
  return _internal_mutable_columnuid();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::set_allocated_columnuid(::TSP::UUID* columnuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnuid_);
  }
  if (columnuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnuid)->GetArena();
    if (message_arena != submessage_arena) {
      columnuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columnuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  columnuid_ = columnuid;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryCellVendorArchive.SummaryCellEntry.columnUID)
}

// required .TST.Cell cell = 3;
inline bool SummaryCellVendorArchive_SummaryCellEntry::_internal_has_cell() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cell_ != nullptr);
  return value;
}
inline bool SummaryCellVendorArchive_SummaryCellEntry::has_cell() const {
  return _internal_has_cell();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::clear_cell() {
  if (cell_ != nullptr) cell_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TST::Cell& SummaryCellVendorArchive_SummaryCellEntry::_internal_cell() const {
  const ::TST::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::Cell&>(
      ::TST::_Cell_default_instance_);
}
inline const ::TST::Cell& SummaryCellVendorArchive_SummaryCellEntry::cell() const {
  // @@protoc_insertion_point(field_get:TST.SummaryCellVendorArchive.SummaryCellEntry.cell)
  return _internal_cell();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::unsafe_arena_set_allocated_cell(
    ::TST::Cell* cell) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryCellVendorArchive.SummaryCellEntry.cell)
}
inline ::TST::Cell* SummaryCellVendorArchive_SummaryCellEntry::release_cell() {
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = cell_;
  cell_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::Cell* SummaryCellVendorArchive_SummaryCellEntry::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:TST.SummaryCellVendorArchive.SummaryCellEntry.cell)
  _has_bits_[0] &= ~0x00000004u;
  ::TST::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::TST::Cell* SummaryCellVendorArchive_SummaryCellEntry::_internal_mutable_cell() {
  _has_bits_[0] |= 0x00000004u;
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::Cell>(GetArena());
    cell_ = p;
  }
  return cell_;
}
inline ::TST::Cell* SummaryCellVendorArchive_SummaryCellEntry::mutable_cell() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryCellVendorArchive.SummaryCellEntry.cell)
  return _internal_mutable_cell();
}
inline void SummaryCellVendorArchive_SummaryCellEntry::set_allocated_cell(::TST::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cell_;
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cell);
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryCellVendorArchive.SummaryCellEntry.cell)
}

// -------------------------------------------------------------------

// SummaryCellVendorArchive

// required .TSP.Reference table_info = 1;
inline bool SummaryCellVendorArchive::_internal_has_table_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_info_ != nullptr);
  return value;
}
inline bool SummaryCellVendorArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& SummaryCellVendorArchive::_internal_table_info() const {
  const ::TSP::Reference* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SummaryCellVendorArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.SummaryCellVendorArchive.table_info)
  return _internal_table_info();
}
inline void SummaryCellVendorArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.SummaryCellVendorArchive.table_info)
}
inline ::TSP::Reference* SummaryCellVendorArchive::release_table_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SummaryCellVendorArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.SummaryCellVendorArchive.table_info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SummaryCellVendorArchive::_internal_mutable_table_info() {
  _has_bits_[0] |= 0x00000001u;
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::TSP::Reference* SummaryCellVendorArchive::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:TST.SummaryCellVendorArchive.table_info)
  return _internal_mutable_table_info();
}
inline void SummaryCellVendorArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info)->GetArena();
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.SummaryCellVendorArchive.table_info)
}

// repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
inline int SummaryCellVendorArchive::_internal_entries_size() const {
  return entries_.size();
}
inline int SummaryCellVendorArchive::entries_size() const {
  return _internal_entries_size();
}
inline void SummaryCellVendorArchive::clear_entries() {
  entries_.Clear();
}
inline ::TST::SummaryCellVendorArchive_SummaryCellEntry* SummaryCellVendorArchive::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TST.SummaryCellVendorArchive.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::SummaryCellVendorArchive_SummaryCellEntry >*
SummaryCellVendorArchive::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TST.SummaryCellVendorArchive.entries)
  return &entries_;
}
inline const ::TST::SummaryCellVendorArchive_SummaryCellEntry& SummaryCellVendorArchive::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TST::SummaryCellVendorArchive_SummaryCellEntry& SummaryCellVendorArchive::entries(int index) const {
  // @@protoc_insertion_point(field_get:TST.SummaryCellVendorArchive.entries)
  return _internal_entries(index);
}
inline ::TST::SummaryCellVendorArchive_SummaryCellEntry* SummaryCellVendorArchive::_internal_add_entries() {
  return entries_.Add();
}
inline ::TST::SummaryCellVendorArchive_SummaryCellEntry* SummaryCellVendorArchive::add_entries() {
  // @@protoc_insertion_point(field_add:TST.SummaryCellVendorArchive.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::SummaryCellVendorArchive_SummaryCellEntry >&
SummaryCellVendorArchive::entries() const {
  // @@protoc_insertion_point(field_list:TST.SummaryCellVendorArchive.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CategoryOrderArchive

// required .TSP.Reference table_info = 1;
inline bool CategoryOrderArchive::_internal_has_table_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_info_ != nullptr);
  return value;
}
inline bool CategoryOrderArchive::has_table_info() const {
  return _internal_has_table_info();
}
inline const ::TSP::Reference& CategoryOrderArchive::_internal_table_info() const {
  const ::TSP::Reference* p = table_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CategoryOrderArchive::table_info() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOrderArchive.table_info)
  return _internal_table_info();
}
inline void CategoryOrderArchive::unsafe_arena_set_allocated_table_info(
    ::TSP::Reference* table_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  table_info_ = table_info;
  if (table_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOrderArchive.table_info)
}
inline ::TSP::Reference* CategoryOrderArchive::release_table_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CategoryOrderArchive::unsafe_arena_release_table_info() {
  // @@protoc_insertion_point(field_release:TST.CategoryOrderArchive.table_info)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = table_info_;
  table_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CategoryOrderArchive::_internal_mutable_table_info() {
  _has_bits_[0] |= 0x00000001u;
  if (table_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    table_info_ = p;
  }
  return table_info_;
}
inline ::TSP::Reference* CategoryOrderArchive::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOrderArchive.table_info)
  return _internal_mutable_table_info();
}
inline void CategoryOrderArchive::set_allocated_table_info(::TSP::Reference* table_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info_);
  }
  if (table_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_info)->GetArena();
    if (message_arena != submessage_arena) {
      table_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOrderArchive.table_info)
}

// required .TSP.Reference uid_map = 2;
inline bool CategoryOrderArchive::_internal_has_uid_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uid_map_ != nullptr);
  return value;
}
inline bool CategoryOrderArchive::has_uid_map() const {
  return _internal_has_uid_map();
}
inline const ::TSP::Reference& CategoryOrderArchive::_internal_uid_map() const {
  const ::TSP::Reference* p = uid_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CategoryOrderArchive::uid_map() const {
  // @@protoc_insertion_point(field_get:TST.CategoryOrderArchive.uid_map)
  return _internal_uid_map();
}
inline void CategoryOrderArchive::unsafe_arena_set_allocated_uid_map(
    ::TSP::Reference* uid_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_map_);
  }
  uid_map_ = uid_map;
  if (uid_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.CategoryOrderArchive.uid_map)
}
inline ::TSP::Reference* CategoryOrderArchive::release_uid_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = uid_map_;
  uid_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CategoryOrderArchive::unsafe_arena_release_uid_map() {
  // @@protoc_insertion_point(field_release:TST.CategoryOrderArchive.uid_map)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = uid_map_;
  uid_map_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CategoryOrderArchive::_internal_mutable_uid_map() {
  _has_bits_[0] |= 0x00000002u;
  if (uid_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    uid_map_ = p;
  }
  return uid_map_;
}
inline ::TSP::Reference* CategoryOrderArchive::mutable_uid_map() {
  // @@protoc_insertion_point(field_mutable:TST.CategoryOrderArchive.uid_map)
  return _internal_mutable_uid_map();
}
inline void CategoryOrderArchive::set_allocated_uid_map(::TSP::Reference* uid_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_map_);
  }
  if (uid_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_map)->GetArena();
    if (message_arena != submessage_arena) {
      uid_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uid_map_ = uid_map;
  // @@protoc_insertion_point(field_set_allocated:TST.CategoryOrderArchive.uid_map)
}

// -------------------------------------------------------------------

// HeaderNameMgrTileArchive_NameFragmentArchive

// required string name_fragment = 1;
inline bool HeaderNameMgrTileArchive_NameFragmentArchive::_internal_has_name_fragment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeaderNameMgrTileArchive_NameFragmentArchive::has_name_fragment() const {
  return _internal_has_name_fragment();
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::clear_name_fragment() {
  name_fragment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeaderNameMgrTileArchive_NameFragmentArchive::name_fragment() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment)
  return _internal_name_fragment();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void HeaderNameMgrTileArchive_NameFragmentArchive::set_name_fragment(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment)
}
inline std::string* HeaderNameMgrTileArchive_NameFragmentArchive::mutable_name_fragment() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment)
  return _internal_mutable_name_fragment();
}
inline const std::string& HeaderNameMgrTileArchive_NameFragmentArchive::_internal_name_fragment() const {
  return name_fragment_.Get();
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::_internal_set_name_fragment(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* HeaderNameMgrTileArchive_NameFragmentArchive::_internal_mutable_name_fragment() {
  _has_bits_[0] |= 0x00000001u;
  return name_fragment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HeaderNameMgrTileArchive_NameFragmentArchive::release_name_fragment() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment)
  if (!_internal_has_name_fragment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_fragment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::set_allocated_name_fragment(std::string* name_fragment) {
  if (name_fragment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_fragment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_fragment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment)
}

// required .TSCE.CellCoordinateArchive name_precedent = 2;
inline bool HeaderNameMgrTileArchive_NameFragmentArchive::_internal_has_name_precedent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || name_precedent_ != nullptr);
  return value;
}
inline bool HeaderNameMgrTileArchive_NameFragmentArchive::has_name_precedent() const {
  return _internal_has_name_precedent();
}
inline const ::TSCE::CellCoordinateArchive& HeaderNameMgrTileArchive_NameFragmentArchive::_internal_name_precedent() const {
  const ::TSCE::CellCoordinateArchive* p = name_precedent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& HeaderNameMgrTileArchive_NameFragmentArchive::name_precedent() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_precedent)
  return _internal_name_precedent();
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::unsafe_arena_set_allocated_name_precedent(
    ::TSCE::CellCoordinateArchive* name_precedent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_precedent_);
  }
  name_precedent_ = name_precedent;
  if (name_precedent) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_precedent)
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrTileArchive_NameFragmentArchive::release_name_precedent() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordinateArchive* temp = name_precedent_;
  name_precedent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrTileArchive_NameFragmentArchive::unsafe_arena_release_name_precedent() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_precedent)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordinateArchive* temp = name_precedent_;
  name_precedent_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrTileArchive_NameFragmentArchive::_internal_mutable_name_precedent() {
  _has_bits_[0] |= 0x00000002u;
  if (name_precedent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    name_precedent_ = p;
  }
  return name_precedent_;
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrTileArchive_NameFragmentArchive::mutable_name_precedent() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_precedent)
  return _internal_mutable_name_precedent();
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::set_allocated_name_precedent(::TSCE::CellCoordinateArchive* name_precedent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_precedent_);
  }
  if (name_precedent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_precedent)->GetArena();
    if (message_arena != submessage_arena) {
      name_precedent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name_precedent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_precedent_ = name_precedent;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_precedent)
}

// optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
inline bool HeaderNameMgrTileArchive_NameFragmentArchive::_internal_has_uses_of_name_fragment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || uses_of_name_fragment_ != nullptr);
  return value;
}
inline bool HeaderNameMgrTileArchive_NameFragmentArchive::has_uses_of_name_fragment() const {
  return _internal_has_uses_of_name_fragment();
}
inline const ::TSCE::UidCellRefSetArchive& HeaderNameMgrTileArchive_NameFragmentArchive::_internal_uses_of_name_fragment() const {
  const ::TSCE::UidCellRefSetArchive* p = uses_of_name_fragment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::UidCellRefSetArchive&>(
      ::TSCE::_UidCellRefSetArchive_default_instance_);
}
inline const ::TSCE::UidCellRefSetArchive& HeaderNameMgrTileArchive_NameFragmentArchive::uses_of_name_fragment() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrTileArchive.NameFragmentArchive.uses_of_name_fragment)
  return _internal_uses_of_name_fragment();
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::unsafe_arena_set_allocated_uses_of_name_fragment(
    ::TSCE::UidCellRefSetArchive* uses_of_name_fragment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uses_of_name_fragment_);
  }
  uses_of_name_fragment_ = uses_of_name_fragment;
  if (uses_of_name_fragment) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderNameMgrTileArchive.NameFragmentArchive.uses_of_name_fragment)
}
inline ::TSCE::UidCellRefSetArchive* HeaderNameMgrTileArchive_NameFragmentArchive::release_uses_of_name_fragment() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::UidCellRefSetArchive* temp = uses_of_name_fragment_;
  uses_of_name_fragment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::UidCellRefSetArchive* HeaderNameMgrTileArchive_NameFragmentArchive::unsafe_arena_release_uses_of_name_fragment() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrTileArchive.NameFragmentArchive.uses_of_name_fragment)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCE::UidCellRefSetArchive* temp = uses_of_name_fragment_;
  uses_of_name_fragment_ = nullptr;
  return temp;
}
inline ::TSCE::UidCellRefSetArchive* HeaderNameMgrTileArchive_NameFragmentArchive::_internal_mutable_uses_of_name_fragment() {
  _has_bits_[0] |= 0x00000004u;
  if (uses_of_name_fragment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::UidCellRefSetArchive>(GetArena());
    uses_of_name_fragment_ = p;
  }
  return uses_of_name_fragment_;
}
inline ::TSCE::UidCellRefSetArchive* HeaderNameMgrTileArchive_NameFragmentArchive::mutable_uses_of_name_fragment() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrTileArchive.NameFragmentArchive.uses_of_name_fragment)
  return _internal_mutable_uses_of_name_fragment();
}
inline void HeaderNameMgrTileArchive_NameFragmentArchive::set_allocated_uses_of_name_fragment(::TSCE::UidCellRefSetArchive* uses_of_name_fragment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uses_of_name_fragment_);
  }
  if (uses_of_name_fragment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uses_of_name_fragment)->GetArena();
    if (message_arena != submessage_arena) {
      uses_of_name_fragment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uses_of_name_fragment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uses_of_name_fragment_ = uses_of_name_fragment;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrTileArchive.NameFragmentArchive.uses_of_name_fragment)
}

// -------------------------------------------------------------------

// HeaderNameMgrTileArchive

// required string first_fragment = 1;
inline bool HeaderNameMgrTileArchive::_internal_has_first_fragment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeaderNameMgrTileArchive::has_first_fragment() const {
  return _internal_has_first_fragment();
}
inline void HeaderNameMgrTileArchive::clear_first_fragment() {
  first_fragment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeaderNameMgrTileArchive::first_fragment() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrTileArchive.first_fragment)
  return _internal_first_fragment();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void HeaderNameMgrTileArchive::set_first_fragment(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 first_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.HeaderNameMgrTileArchive.first_fragment)
}
inline std::string* HeaderNameMgrTileArchive::mutable_first_fragment() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrTileArchive.first_fragment)
  return _internal_mutable_first_fragment();
}
inline const std::string& HeaderNameMgrTileArchive::_internal_first_fragment() const {
  return first_fragment_.Get();
}
inline void HeaderNameMgrTileArchive::_internal_set_first_fragment(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  first_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* HeaderNameMgrTileArchive::_internal_mutable_first_fragment() {
  _has_bits_[0] |= 0x00000001u;
  return first_fragment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HeaderNameMgrTileArchive::release_first_fragment() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrTileArchive.first_fragment)
  if (!_internal_has_first_fragment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return first_fragment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeaderNameMgrTileArchive::set_allocated_first_fragment(std::string* first_fragment) {
  if (first_fragment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_fragment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_fragment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrTileArchive.first_fragment)
}

// required string last_fragment = 2;
inline bool HeaderNameMgrTileArchive::_internal_has_last_fragment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeaderNameMgrTileArchive::has_last_fragment() const {
  return _internal_has_last_fragment();
}
inline void HeaderNameMgrTileArchive::clear_last_fragment() {
  last_fragment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HeaderNameMgrTileArchive::last_fragment() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrTileArchive.last_fragment)
  return _internal_last_fragment();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void HeaderNameMgrTileArchive::set_last_fragment(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 last_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TST.HeaderNameMgrTileArchive.last_fragment)
}
inline std::string* HeaderNameMgrTileArchive::mutable_last_fragment() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrTileArchive.last_fragment)
  return _internal_mutable_last_fragment();
}
inline const std::string& HeaderNameMgrTileArchive::_internal_last_fragment() const {
  return last_fragment_.Get();
}
inline void HeaderNameMgrTileArchive::_internal_set_last_fragment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_fragment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* HeaderNameMgrTileArchive::_internal_mutable_last_fragment() {
  _has_bits_[0] |= 0x00000002u;
  return last_fragment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HeaderNameMgrTileArchive::release_last_fragment() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrTileArchive.last_fragment)
  if (!_internal_has_last_fragment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_fragment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeaderNameMgrTileArchive::set_allocated_last_fragment(std::string* last_fragment) {
  if (last_fragment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_fragment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_fragment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrTileArchive.last_fragment)
}

// repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
inline int HeaderNameMgrTileArchive::_internal_name_frag_entries_size() const {
  return name_frag_entries_.size();
}
inline int HeaderNameMgrTileArchive::name_frag_entries_size() const {
  return _internal_name_frag_entries_size();
}
inline void HeaderNameMgrTileArchive::clear_name_frag_entries() {
  name_frag_entries_.Clear();
}
inline ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* HeaderNameMgrTileArchive::mutable_name_frag_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrTileArchive.name_frag_entries)
  return name_frag_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >*
HeaderNameMgrTileArchive::mutable_name_frag_entries() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrTileArchive.name_frag_entries)
  return &name_frag_entries_;
}
inline const ::TST::HeaderNameMgrTileArchive_NameFragmentArchive& HeaderNameMgrTileArchive::_internal_name_frag_entries(int index) const {
  return name_frag_entries_.Get(index);
}
inline const ::TST::HeaderNameMgrTileArchive_NameFragmentArchive& HeaderNameMgrTileArchive::name_frag_entries(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrTileArchive.name_frag_entries)
  return _internal_name_frag_entries(index);
}
inline ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* HeaderNameMgrTileArchive::_internal_add_name_frag_entries() {
  return name_frag_entries_.Add();
}
inline ::TST::HeaderNameMgrTileArchive_NameFragmentArchive* HeaderNameMgrTileArchive::add_name_frag_entries() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrTileArchive.name_frag_entries)
  return _internal_add_name_frag_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >&
HeaderNameMgrTileArchive::name_frag_entries() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrTileArchive.name_frag_entries)
  return name_frag_entries_;
}

// -------------------------------------------------------------------

// HeaderNameMgrArchive_PerTableArchive

// required .TSP.UUID table_uid = 1;
inline bool HeaderNameMgrArchive_PerTableArchive::_internal_has_table_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || table_uid_ != nullptr);
  return value;
}
inline bool HeaderNameMgrArchive_PerTableArchive::has_table_uid() const {
  return _internal_has_table_uid();
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::_internal_table_uid() const {
  const ::TSP::UUID* p = table_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::table_uid() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.table_uid)
  return _internal_table_uid();
}
inline void HeaderNameMgrArchive_PerTableArchive::unsafe_arena_set_allocated_table_uid(
    ::TSP::UUID* table_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  table_uid_ = table_uid;
  if (table_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderNameMgrArchive.PerTableArchive.table_uid)
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::release_table_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::unsafe_arena_release_table_uid() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrArchive.PerTableArchive.table_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = table_uid_;
  table_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::_internal_mutable_table_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (table_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    table_uid_ = p;
  }
  return table_uid_;
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::mutable_table_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.PerTableArchive.table_uid)
  return _internal_mutable_table_uid();
}
inline void HeaderNameMgrArchive_PerTableArchive::set_allocated_table_uid(::TSP::UUID* table_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid_);
  }
  if (table_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_uid)->GetArena();
    if (message_arena != submessage_arena) {
      table_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_uid_ = table_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrArchive.PerTableArchive.table_uid)
}

// required .TSCE.CellCoordinateArchive per_table_precedent = 2;
inline bool HeaderNameMgrArchive_PerTableArchive::_internal_has_per_table_precedent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || per_table_precedent_ != nullptr);
  return value;
}
inline bool HeaderNameMgrArchive_PerTableArchive::has_per_table_precedent() const {
  return _internal_has_per_table_precedent();
}
inline const ::TSCE::CellCoordinateArchive& HeaderNameMgrArchive_PerTableArchive::_internal_per_table_precedent() const {
  const ::TSCE::CellCoordinateArchive* p = per_table_precedent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::CellCoordinateArchive&>(
      ::TSCE::_CellCoordinateArchive_default_instance_);
}
inline const ::TSCE::CellCoordinateArchive& HeaderNameMgrArchive_PerTableArchive::per_table_precedent() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.per_table_precedent)
  return _internal_per_table_precedent();
}
inline void HeaderNameMgrArchive_PerTableArchive::unsafe_arena_set_allocated_per_table_precedent(
    ::TSCE::CellCoordinateArchive* per_table_precedent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(per_table_precedent_);
  }
  per_table_precedent_ = per_table_precedent;
  if (per_table_precedent) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderNameMgrArchive.PerTableArchive.per_table_precedent)
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrArchive_PerTableArchive::release_per_table_precedent() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordinateArchive* temp = per_table_precedent_;
  per_table_precedent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrArchive_PerTableArchive::unsafe_arena_release_per_table_precedent() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrArchive.PerTableArchive.per_table_precedent)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCE::CellCoordinateArchive* temp = per_table_precedent_;
  per_table_precedent_ = nullptr;
  return temp;
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrArchive_PerTableArchive::_internal_mutable_per_table_precedent() {
  _has_bits_[0] |= 0x00000002u;
  if (per_table_precedent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::CellCoordinateArchive>(GetArena());
    per_table_precedent_ = p;
  }
  return per_table_precedent_;
}
inline ::TSCE::CellCoordinateArchive* HeaderNameMgrArchive_PerTableArchive::mutable_per_table_precedent() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.PerTableArchive.per_table_precedent)
  return _internal_mutable_per_table_precedent();
}
inline void HeaderNameMgrArchive_PerTableArchive::set_allocated_per_table_precedent(::TSCE::CellCoordinateArchive* per_table_precedent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(per_table_precedent_);
  }
  if (per_table_precedent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(per_table_precedent)->GetArena();
    if (message_arena != submessage_arena) {
      per_table_precedent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, per_table_precedent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  per_table_precedent_ = per_table_precedent;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrArchive.PerTableArchive.per_table_precedent)
}

// optional bool is_deleted = 3;
inline bool HeaderNameMgrArchive_PerTableArchive::_internal_has_is_deleted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeaderNameMgrArchive_PerTableArchive::has_is_deleted() const {
  return _internal_has_is_deleted();
}
inline void HeaderNameMgrArchive_PerTableArchive::clear_is_deleted() {
  is_deleted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HeaderNameMgrArchive_PerTableArchive::_internal_is_deleted() const {
  return is_deleted_;
}
inline bool HeaderNameMgrArchive_PerTableArchive::is_deleted() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.is_deleted)
  return _internal_is_deleted();
}
inline void HeaderNameMgrArchive_PerTableArchive::_internal_set_is_deleted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_deleted_ = value;
}
inline void HeaderNameMgrArchive_PerTableArchive::set_is_deleted(bool value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:TST.HeaderNameMgrArchive.PerTableArchive.is_deleted)
}

// repeated .TSP.UUID header_row_uids = 5;
inline int HeaderNameMgrArchive_PerTableArchive::_internal_header_row_uids_size() const {
  return header_row_uids_.size();
}
inline int HeaderNameMgrArchive_PerTableArchive::header_row_uids_size() const {
  return _internal_header_row_uids_size();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::mutable_header_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.PerTableArchive.header_row_uids)
  return header_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
HeaderNameMgrArchive_PerTableArchive::mutable_header_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrArchive.PerTableArchive.header_row_uids)
  return &header_row_uids_;
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::_internal_header_row_uids(int index) const {
  return header_row_uids_.Get(index);
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::header_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.header_row_uids)
  return _internal_header_row_uids(index);
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::_internal_add_header_row_uids() {
  return header_row_uids_.Add();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::add_header_row_uids() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrArchive.PerTableArchive.header_row_uids)
  return _internal_add_header_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
HeaderNameMgrArchive_PerTableArchive::header_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrArchive.PerTableArchive.header_row_uids)
  return header_row_uids_;
}

// repeated .TSP.UUID header_column_uids = 6;
inline int HeaderNameMgrArchive_PerTableArchive::_internal_header_column_uids_size() const {
  return header_column_uids_.size();
}
inline int HeaderNameMgrArchive_PerTableArchive::header_column_uids_size() const {
  return _internal_header_column_uids_size();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::mutable_header_column_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.PerTableArchive.header_column_uids)
  return header_column_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
HeaderNameMgrArchive_PerTableArchive::mutable_header_column_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrArchive.PerTableArchive.header_column_uids)
  return &header_column_uids_;
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::_internal_header_column_uids(int index) const {
  return header_column_uids_.Get(index);
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::header_column_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.header_column_uids)
  return _internal_header_column_uids(index);
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::_internal_add_header_column_uids() {
  return header_column_uids_.Add();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::add_header_column_uids() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrArchive.PerTableArchive.header_column_uids)
  return _internal_add_header_column_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
HeaderNameMgrArchive_PerTableArchive::header_column_uids() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrArchive.PerTableArchive.header_column_uids)
  return header_column_uids_;
}

// repeated .TSP.UUID update_header_row_uids = 7;
inline int HeaderNameMgrArchive_PerTableArchive::_internal_update_header_row_uids_size() const {
  return update_header_row_uids_.size();
}
inline int HeaderNameMgrArchive_PerTableArchive::update_header_row_uids_size() const {
  return _internal_update_header_row_uids_size();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::mutable_update_header_row_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.PerTableArchive.update_header_row_uids)
  return update_header_row_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
HeaderNameMgrArchive_PerTableArchive::mutable_update_header_row_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrArchive.PerTableArchive.update_header_row_uids)
  return &update_header_row_uids_;
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::_internal_update_header_row_uids(int index) const {
  return update_header_row_uids_.Get(index);
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::update_header_row_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.update_header_row_uids)
  return _internal_update_header_row_uids(index);
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::_internal_add_update_header_row_uids() {
  return update_header_row_uids_.Add();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::add_update_header_row_uids() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrArchive.PerTableArchive.update_header_row_uids)
  return _internal_add_update_header_row_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
HeaderNameMgrArchive_PerTableArchive::update_header_row_uids() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrArchive.PerTableArchive.update_header_row_uids)
  return update_header_row_uids_;
}

// repeated .TSP.UUID update_header_column_uids = 8;
inline int HeaderNameMgrArchive_PerTableArchive::_internal_update_header_column_uids_size() const {
  return update_header_column_uids_.size();
}
inline int HeaderNameMgrArchive_PerTableArchive::update_header_column_uids_size() const {
  return _internal_update_header_column_uids_size();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::mutable_update_header_column_uids(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.PerTableArchive.update_header_column_uids)
  return update_header_column_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
HeaderNameMgrArchive_PerTableArchive::mutable_update_header_column_uids() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrArchive.PerTableArchive.update_header_column_uids)
  return &update_header_column_uids_;
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::_internal_update_header_column_uids(int index) const {
  return update_header_column_uids_.Get(index);
}
inline const ::TSP::UUID& HeaderNameMgrArchive_PerTableArchive::update_header_column_uids(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.PerTableArchive.update_header_column_uids)
  return _internal_update_header_column_uids(index);
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::_internal_add_update_header_column_uids() {
  return update_header_column_uids_.Add();
}
inline ::TSP::UUID* HeaderNameMgrArchive_PerTableArchive::add_update_header_column_uids() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrArchive.PerTableArchive.update_header_column_uids)
  return _internal_add_update_header_column_uids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
HeaderNameMgrArchive_PerTableArchive::update_header_column_uids() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrArchive.PerTableArchive.update_header_column_uids)
  return update_header_column_uids_;
}

// -------------------------------------------------------------------

// HeaderNameMgrArchive

// required .TSP.UUID owner_uid = 1;
inline bool HeaderNameMgrArchive::_internal_has_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_uid_ != nullptr);
  return value;
}
inline bool HeaderNameMgrArchive::has_owner_uid() const {
  return _internal_has_owner_uid();
}
inline const ::TSP::UUID& HeaderNameMgrArchive::_internal_owner_uid() const {
  const ::TSP::UUID* p = owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HeaderNameMgrArchive::owner_uid() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.owner_uid)
  return _internal_owner_uid();
}
inline void HeaderNameMgrArchive::unsafe_arena_set_allocated_owner_uid(
    ::TSP::UUID* owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  owner_uid_ = owner_uid;
  if (owner_uid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderNameMgrArchive.owner_uid)
}
inline ::TSP::UUID* HeaderNameMgrArchive::release_owner_uid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HeaderNameMgrArchive::unsafe_arena_release_owner_uid() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrArchive.owner_uid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = owner_uid_;
  owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HeaderNameMgrArchive::_internal_mutable_owner_uid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    owner_uid_ = p;
  }
  return owner_uid_;
}
inline ::TSP::UUID* HeaderNameMgrArchive::mutable_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.owner_uid)
  return _internal_mutable_owner_uid();
}
inline void HeaderNameMgrArchive::set_allocated_owner_uid(::TSP::UUID* owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid_);
  }
  if (owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_uid_ = owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrArchive.owner_uid)
}

// optional .TSP.UUID nrm_owner_uid = 2;
inline bool HeaderNameMgrArchive::_internal_has_nrm_owner_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || nrm_owner_uid_ != nullptr);
  return value;
}
inline bool HeaderNameMgrArchive::has_nrm_owner_uid() const {
  return _internal_has_nrm_owner_uid();
}
inline const ::TSP::UUID& HeaderNameMgrArchive::_internal_nrm_owner_uid() const {
  const ::TSP::UUID* p = nrm_owner_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& HeaderNameMgrArchive::nrm_owner_uid() const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.nrm_owner_uid)
  return _internal_nrm_owner_uid();
}
inline void HeaderNameMgrArchive::unsafe_arena_set_allocated_nrm_owner_uid(
    ::TSP::UUID* nrm_owner_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nrm_owner_uid_);
  }
  nrm_owner_uid_ = nrm_owner_uid;
  if (nrm_owner_uid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.HeaderNameMgrArchive.nrm_owner_uid)
}
inline ::TSP::UUID* HeaderNameMgrArchive::release_nrm_owner_uid() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = nrm_owner_uid_;
  nrm_owner_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* HeaderNameMgrArchive::unsafe_arena_release_nrm_owner_uid() {
  // @@protoc_insertion_point(field_release:TST.HeaderNameMgrArchive.nrm_owner_uid)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = nrm_owner_uid_;
  nrm_owner_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* HeaderNameMgrArchive::_internal_mutable_nrm_owner_uid() {
  _has_bits_[0] |= 0x00000002u;
  if (nrm_owner_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    nrm_owner_uid_ = p;
  }
  return nrm_owner_uid_;
}
inline ::TSP::UUID* HeaderNameMgrArchive::mutable_nrm_owner_uid() {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.nrm_owner_uid)
  return _internal_mutable_nrm_owner_uid();
}
inline void HeaderNameMgrArchive::set_allocated_nrm_owner_uid(::TSP::UUID* nrm_owner_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nrm_owner_uid_);
  }
  if (nrm_owner_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nrm_owner_uid)->GetArena();
    if (message_arena != submessage_arena) {
      nrm_owner_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nrm_owner_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nrm_owner_uid_ = nrm_owner_uid;
  // @@protoc_insertion_point(field_set_allocated:TST.HeaderNameMgrArchive.nrm_owner_uid)
}

// repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
inline int HeaderNameMgrArchive::_internal_per_tables_size() const {
  return per_tables_.size();
}
inline int HeaderNameMgrArchive::per_tables_size() const {
  return _internal_per_tables_size();
}
inline void HeaderNameMgrArchive::clear_per_tables() {
  per_tables_.Clear();
}
inline ::TST::HeaderNameMgrArchive_PerTableArchive* HeaderNameMgrArchive::mutable_per_tables(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.per_tables)
  return per_tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrArchive_PerTableArchive >*
HeaderNameMgrArchive::mutable_per_tables() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrArchive.per_tables)
  return &per_tables_;
}
inline const ::TST::HeaderNameMgrArchive_PerTableArchive& HeaderNameMgrArchive::_internal_per_tables(int index) const {
  return per_tables_.Get(index);
}
inline const ::TST::HeaderNameMgrArchive_PerTableArchive& HeaderNameMgrArchive::per_tables(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.per_tables)
  return _internal_per_tables(index);
}
inline ::TST::HeaderNameMgrArchive_PerTableArchive* HeaderNameMgrArchive::_internal_add_per_tables() {
  return per_tables_.Add();
}
inline ::TST::HeaderNameMgrArchive_PerTableArchive* HeaderNameMgrArchive::add_per_tables() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrArchive.per_tables)
  return _internal_add_per_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::HeaderNameMgrArchive_PerTableArchive >&
HeaderNameMgrArchive::per_tables() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrArchive.per_tables)
  return per_tables_;
}

// repeated .TSP.Reference name_frag_tiles = 4;
inline int HeaderNameMgrArchive::_internal_name_frag_tiles_size() const {
  return name_frag_tiles_.size();
}
inline int HeaderNameMgrArchive::name_frag_tiles_size() const {
  return _internal_name_frag_tiles_size();
}
inline ::TSP::Reference* HeaderNameMgrArchive::mutable_name_frag_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:TST.HeaderNameMgrArchive.name_frag_tiles)
  return name_frag_tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
HeaderNameMgrArchive::mutable_name_frag_tiles() {
  // @@protoc_insertion_point(field_mutable_list:TST.HeaderNameMgrArchive.name_frag_tiles)
  return &name_frag_tiles_;
}
inline const ::TSP::Reference& HeaderNameMgrArchive::_internal_name_frag_tiles(int index) const {
  return name_frag_tiles_.Get(index);
}
inline const ::TSP::Reference& HeaderNameMgrArchive::name_frag_tiles(int index) const {
  // @@protoc_insertion_point(field_get:TST.HeaderNameMgrArchive.name_frag_tiles)
  return _internal_name_frag_tiles(index);
}
inline ::TSP::Reference* HeaderNameMgrArchive::_internal_add_name_frag_tiles() {
  return name_frag_tiles_.Add();
}
inline ::TSP::Reference* HeaderNameMgrArchive::add_name_frag_tiles() {
  // @@protoc_insertion_point(field_add:TST.HeaderNameMgrArchive.name_frag_tiles)
  return _internal_add_name_frag_tiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
HeaderNameMgrArchive::name_frag_tiles() const {
  // @@protoc_insertion_point(field_list:TST.HeaderNameMgrArchive.name_frag_tiles)
  return name_frag_tiles_;
}

// -------------------------------------------------------------------

// WidthHeightCacheFittingEntry

// optional uint32 fitting_index = 1;
inline bool WidthHeightCacheFittingEntry::_internal_has_fitting_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WidthHeightCacheFittingEntry::has_fitting_index() const {
  return _internal_has_fitting_index();
}
inline void WidthHeightCacheFittingEntry::clear_fitting_index() {
  fitting_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WidthHeightCacheFittingEntry::_internal_fitting_index() const {
  return fitting_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WidthHeightCacheFittingEntry::fitting_index() const {
  // @@protoc_insertion_point(field_get:TST.WidthHeightCacheFittingEntry.fitting_index)
  return _internal_fitting_index();
}
inline void WidthHeightCacheFittingEntry::_internal_set_fitting_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fitting_index_ = value;
}
inline void WidthHeightCacheFittingEntry::set_fitting_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fitting_index(value);
  // @@protoc_insertion_point(field_set:TST.WidthHeightCacheFittingEntry.fitting_index)
}

// optional float fitting_size = 2;
inline bool WidthHeightCacheFittingEntry::_internal_has_fitting_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WidthHeightCacheFittingEntry::has_fitting_size() const {
  return _internal_has_fitting_size();
}
inline void WidthHeightCacheFittingEntry::clear_fitting_size() {
  fitting_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float WidthHeightCacheFittingEntry::_internal_fitting_size() const {
  return fitting_size_;
}
inline float WidthHeightCacheFittingEntry::fitting_size() const {
  // @@protoc_insertion_point(field_get:TST.WidthHeightCacheFittingEntry.fitting_size)
  return _internal_fitting_size();
}
inline void WidthHeightCacheFittingEntry::_internal_set_fitting_size(float value) {
  _has_bits_[0] |= 0x00000002u;
  fitting_size_ = value;
}
inline void WidthHeightCacheFittingEntry::set_fitting_size(float value) {
  _internal_set_fitting_size(value);
  // @@protoc_insertion_point(field_set:TST.WidthHeightCacheFittingEntry.fitting_size)
}

// -------------------------------------------------------------------

// WidthHeightCache

// repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
inline int WidthHeightCache::_internal_rows_fitting_entries_size() const {
  return rows_fitting_entries_.size();
}
inline int WidthHeightCache::rows_fitting_entries_size() const {
  return _internal_rows_fitting_entries_size();
}
inline void WidthHeightCache::clear_rows_fitting_entries() {
  rows_fitting_entries_.Clear();
}
inline ::TST::WidthHeightCacheFittingEntry* WidthHeightCache::mutable_rows_fitting_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TST.WidthHeightCache.rows_fitting_entries)
  return rows_fitting_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::WidthHeightCacheFittingEntry >*
WidthHeightCache::mutable_rows_fitting_entries() {
  // @@protoc_insertion_point(field_mutable_list:TST.WidthHeightCache.rows_fitting_entries)
  return &rows_fitting_entries_;
}
inline const ::TST::WidthHeightCacheFittingEntry& WidthHeightCache::_internal_rows_fitting_entries(int index) const {
  return rows_fitting_entries_.Get(index);
}
inline const ::TST::WidthHeightCacheFittingEntry& WidthHeightCache::rows_fitting_entries(int index) const {
  // @@protoc_insertion_point(field_get:TST.WidthHeightCache.rows_fitting_entries)
  return _internal_rows_fitting_entries(index);
}
inline ::TST::WidthHeightCacheFittingEntry* WidthHeightCache::_internal_add_rows_fitting_entries() {
  return rows_fitting_entries_.Add();
}
inline ::TST::WidthHeightCacheFittingEntry* WidthHeightCache::add_rows_fitting_entries() {
  // @@protoc_insertion_point(field_add:TST.WidthHeightCache.rows_fitting_entries)
  return _internal_add_rows_fitting_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TST::WidthHeightCacheFittingEntry >&
WidthHeightCache::rows_fitting_entries() const {
  // @@protoc_insertion_point(field_list:TST.WidthHeightCache.rows_fitting_entries)
  return rows_fitting_entries_;
}

// optional uint32 columns_count = 3;
inline bool WidthHeightCache::_internal_has_columns_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WidthHeightCache::has_columns_count() const {
  return _internal_has_columns_count();
}
inline void WidthHeightCache::clear_columns_count() {
  columns_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WidthHeightCache::_internal_columns_count() const {
  return columns_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WidthHeightCache::columns_count() const {
  // @@protoc_insertion_point(field_get:TST.WidthHeightCache.columns_count)
  return _internal_columns_count();
}
inline void WidthHeightCache::_internal_set_columns_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  columns_count_ = value;
}
inline void WidthHeightCache::set_columns_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_columns_count(value);
  // @@protoc_insertion_point(field_set:TST.WidthHeightCache.columns_count)
}

// -------------------------------------------------------------------

// LayoutEngineArchive

// optional .TST.WidthHeightCache width_height_cache = 1;
inline bool LayoutEngineArchive::_internal_has_width_height_cache() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || width_height_cache_ != nullptr);
  return value;
}
inline bool LayoutEngineArchive::has_width_height_cache() const {
  return _internal_has_width_height_cache();
}
inline void LayoutEngineArchive::clear_width_height_cache() {
  if (width_height_cache_ != nullptr) width_height_cache_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TST::WidthHeightCache& LayoutEngineArchive::_internal_width_height_cache() const {
  const ::TST::WidthHeightCache* p = width_height_cache_;
  return p != nullptr ? *p : reinterpret_cast<const ::TST::WidthHeightCache&>(
      ::TST::_WidthHeightCache_default_instance_);
}
inline const ::TST::WidthHeightCache& LayoutEngineArchive::width_height_cache() const {
  // @@protoc_insertion_point(field_get:TST.LayoutEngineArchive.width_height_cache)
  return _internal_width_height_cache();
}
inline void LayoutEngineArchive::unsafe_arena_set_allocated_width_height_cache(
    ::TST::WidthHeightCache* width_height_cache) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(width_height_cache_);
  }
  width_height_cache_ = width_height_cache;
  if (width_height_cache) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TST.LayoutEngineArchive.width_height_cache)
}
inline ::TST::WidthHeightCache* LayoutEngineArchive::release_width_height_cache() {
  _has_bits_[0] &= ~0x00000001u;
  ::TST::WidthHeightCache* temp = width_height_cache_;
  width_height_cache_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TST::WidthHeightCache* LayoutEngineArchive::unsafe_arena_release_width_height_cache() {
  // @@protoc_insertion_point(field_release:TST.LayoutEngineArchive.width_height_cache)
  _has_bits_[0] &= ~0x00000001u;
  ::TST::WidthHeightCache* temp = width_height_cache_;
  width_height_cache_ = nullptr;
  return temp;
}
inline ::TST::WidthHeightCache* LayoutEngineArchive::_internal_mutable_width_height_cache() {
  _has_bits_[0] |= 0x00000001u;
  if (width_height_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::TST::WidthHeightCache>(GetArena());
    width_height_cache_ = p;
  }
  return width_height_cache_;
}
inline ::TST::WidthHeightCache* LayoutEngineArchive::mutable_width_height_cache() {
  // @@protoc_insertion_point(field_mutable:TST.LayoutEngineArchive.width_height_cache)
  return _internal_mutable_width_height_cache();
}
inline void LayoutEngineArchive::set_allocated_width_height_cache(::TST::WidthHeightCache* width_height_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete width_height_cache_;
  }
  if (width_height_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(width_height_cache);
    if (message_arena != submessage_arena) {
      width_height_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width_height_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  width_height_cache_ = width_height_cache;
  // @@protoc_insertion_point(field_set_allocated:TST.LayoutEngineArchive.width_height_cache)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TST::PopUpMenuModel_CellValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::PopUpMenuModel_CellValueType>() {
  return ::TST::PopUpMenuModel_CellValueType_descriptor();
}
template <> struct is_proto_enum< ::TST::ImportWarningSetArchive_FormulaWarningType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::ImportWarningSetArchive_FormulaWarningType>() {
  return ::TST::ImportWarningSetArchive_FormulaWarningType_descriptor();
}
template <> struct is_proto_enum< ::TST::TableDataList_ListType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableDataList_ListType>() {
  return ::TST::TableDataList_ListType_descriptor();
}
template <> struct is_proto_enum< ::TST::TableSortOrderArchive_SortRuleArchive_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableSortOrderArchive_SortRuleArchive_Direction>() {
  return ::TST::TableSortOrderArchive_SortRuleArchive_Direction_descriptor();
}
template <> struct is_proto_enum< ::TST::TableSortOrderArchive_SortType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableSortOrderArchive_SortType>() {
  return ::TST::TableSortOrderArchive_SortType_descriptor();
}
template <> struct is_proto_enum< ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction>() {
  return ::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor();
}
template <> struct is_proto_enum< ::TST::TableSortOrderUIDArchive_SortType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableSortOrderUIDArchive_SortType>() {
  return ::TST::TableSortOrderUIDArchive_SortType_descriptor();
}
template <> struct is_proto_enum< ::TST::FormulaPredicateArchive_FormulaPredicateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::FormulaPredicateArchive_FormulaPredicateType>() {
  return ::TST::FormulaPredicateArchive_FormulaPredicateType_descriptor();
}
template <> struct is_proto_enum< ::TST::FormulaPredicateArchive_QualifierType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::FormulaPredicateArchive_QualifierType>() {
  return ::TST::FormulaPredicateArchive_QualifierType_descriptor();
}
template <> struct is_proto_enum< ::TST::FilterSetArchive_FilterSetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::FilterSetArchive_FilterSetType>() {
  return ::TST::FilterSetArchive_FilterSetType_descriptor();
}
template <> struct is_proto_enum< ::TST::HiddenStateExtentArchive_RowOrColumnDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::HiddenStateExtentArchive_RowOrColumnDirection>() {
  return ::TST::HiddenStateExtentArchive_RowOrColumnDirection_descriptor();
}
template <> struct is_proto_enum< ::TST::MultiTableRemapperArchive_Purpose> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::MultiTableRemapperArchive_Purpose>() {
  return ::TST::MultiTableRemapperArchive_Purpose_descriptor();
}
template <> struct is_proto_enum< ::TST::CellType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::CellType>() {
  return ::TST::CellType_descriptor();
}
template <> struct is_proto_enum< ::TST::CellValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::CellValueType>() {
  return ::TST::CellValueType_descriptor();
}
template <> struct is_proto_enum< ::TST::TableDimensionArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::TableDimensionArchive>() {
  return ::TST::TableDimensionArchive_descriptor();
}
template <> struct is_proto_enum< ::TST::SelectionTypeArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::SelectionTypeArchive>() {
  return ::TST::SelectionTypeArchive_descriptor();
}
template <> struct is_proto_enum< ::TST::FillDirectionArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::FillDirectionArchive>() {
  return ::TST::FillDirectionArchive_descriptor();
}
template <> struct is_proto_enum< ::TST::MergeActionArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::MergeActionArchive>() {
  return ::TST::MergeActionArchive_descriptor();
}
template <> struct is_proto_enum< ::TST::HideShowActionArchive> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::HideShowActionArchive>() {
  return ::TST::HideShowActionArchive_descriptor();
}
template <> struct is_proto_enum< ::TST::GroupingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::GroupingType>() {
  return ::TST::GroupingType_descriptor();
}
template <> struct is_proto_enum< ::TST::AggregateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TST::AggregateType>() {
  return ::TST::AggregateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSTArchives_2eproto
