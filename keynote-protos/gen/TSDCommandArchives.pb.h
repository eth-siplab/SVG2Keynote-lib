// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDCommandArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSDCommandArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSDCommandArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSDArchives.sos.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSDCommandArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSDCommandArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[61]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSDCommandArchives_2eproto;
namespace TSD {
class AbstractGuideCommandArchive;
struct AbstractGuideCommandArchiveDefaultTypeInternal;
extern AbstractGuideCommandArchiveDefaultTypeInternal _AbstractGuideCommandArchive_default_instance_;
class AbstractStyleCommandArchive;
struct AbstractStyleCommandArchiveDefaultTypeInternal;
extern AbstractStyleCommandArchiveDefaultTypeInternal _AbstractStyleCommandArchive_default_instance_;
class BaseApplyPresetCommandArchive;
struct BaseApplyPresetCommandArchiveDefaultTypeInternal;
extern BaseApplyPresetCommandArchiveDefaultTypeInternal _BaseApplyPresetCommandArchive_default_instance_;
class BaseStyleSetValueCommandArchive;
struct BaseStyleSetValueCommandArchiveDefaultTypeInternal;
extern BaseStyleSetValueCommandArchiveDefaultTypeInternal _BaseStyleSetValueCommandArchive_default_instance_;
class CanvasSelectionTransformerArchive;
struct CanvasSelectionTransformerArchiveDefaultTypeInternal;
extern CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
class CommentInvalidatingCommandSelectionBehaviorArchive;
struct CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal;
extern CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal _CommentInvalidatingCommandSelectionBehaviorArchive_default_instance_;
class ConnectionLineConnectCommandArchive;
struct ConnectionLineConnectCommandArchiveDefaultTypeInternal;
extern ConnectionLineConnectCommandArchiveDefaultTypeInternal _ConnectionLineConnectCommandArchive_default_instance_;
class ContainerInsertChildrenCommandArchive;
struct ContainerInsertChildrenCommandArchiveDefaultTypeInternal;
extern ContainerInsertChildrenCommandArchiveDefaultTypeInternal _ContainerInsertChildrenCommandArchive_default_instance_;
class ContainerInsertDrawablesCommandArchive;
struct ContainerInsertDrawablesCommandArchiveDefaultTypeInternal;
extern ContainerInsertDrawablesCommandArchiveDefaultTypeInternal _ContainerInsertDrawablesCommandArchive_default_instance_;
class ContainerRemoveChildrenCommandArchive;
struct ContainerRemoveChildrenCommandArchiveDefaultTypeInternal;
extern ContainerRemoveChildrenCommandArchiveDefaultTypeInternal _ContainerRemoveChildrenCommandArchive_default_instance_;
class ContainerRemoveDrawablesCommandArchive;
struct ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal;
extern ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal _ContainerRemoveDrawablesCommandArchive_default_instance_;
class ContainerReorderChildrenCommandArchive;
struct ContainerReorderChildrenCommandArchiveDefaultTypeInternal;
extern ContainerReorderChildrenCommandArchiveDefaultTypeInternal _ContainerReorderChildrenCommandArchive_default_instance_;
class DrawableAccessibilityDescriptionCommandArchive;
struct DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal;
extern DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal _DrawableAccessibilityDescriptionCommandArchive_default_instance_;
class DrawableApplyThemeCommandArchive;
struct DrawableApplyThemeCommandArchiveDefaultTypeInternal;
extern DrawableApplyThemeCommandArchiveDefaultTypeInternal _DrawableApplyThemeCommandArchive_default_instance_;
class DrawableAspectRatioLockedCommandArchive;
struct DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal;
extern DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal _DrawableAspectRatioLockedCommandArchive_default_instance_;
class DrawableHyperlinkCommandArchive;
struct DrawableHyperlinkCommandArchiveDefaultTypeInternal;
extern DrawableHyperlinkCommandArchiveDefaultTypeInternal _DrawableHyperlinkCommandArchive_default_instance_;
class DrawableInfoCommentCommandArchive;
struct DrawableInfoCommentCommandArchiveDefaultTypeInternal;
extern DrawableInfoCommentCommandArchiveDefaultTypeInternal _DrawableInfoCommentCommandArchive_default_instance_;
class DrawableLockCommandArchive;
struct DrawableLockCommandArchiveDefaultTypeInternal;
extern DrawableLockCommandArchiveDefaultTypeInternal _DrawableLockCommandArchive_default_instance_;
class DrawablePathSourceCommandArchive;
struct DrawablePathSourceCommandArchiveDefaultTypeInternal;
extern DrawablePathSourceCommandArchiveDefaultTypeInternal _DrawablePathSourceCommandArchive_default_instance_;
class DrawablePencilAnnotationCommandArchive;
struct DrawablePencilAnnotationCommandArchiveDefaultTypeInternal;
extern DrawablePencilAnnotationCommandArchiveDefaultTypeInternal _DrawablePencilAnnotationCommandArchive_default_instance_;
class DrawableSelectionTransformerArchive;
struct DrawableSelectionTransformerArchiveDefaultTypeInternal;
extern DrawableSelectionTransformerArchiveDefaultTypeInternal _DrawableSelectionTransformerArchive_default_instance_;
class DrawablesCommandGroupArchive;
struct DrawablesCommandGroupArchiveDefaultTypeInternal;
extern DrawablesCommandGroupArchiveDefaultTypeInternal _DrawablesCommandGroupArchive_default_instance_;
class ExteriorTextWrapCommandArchive;
struct ExteriorTextWrapCommandArchiveDefaultTypeInternal;
extern ExteriorTextWrapCommandArchiveDefaultTypeInternal _ExteriorTextWrapCommandArchive_default_instance_;
class FreehandDrawingAnimationCommandArchive;
struct FreehandDrawingAnimationCommandArchiveDefaultTypeInternal;
extern FreehandDrawingAnimationCommandArchiveDefaultTypeInternal _FreehandDrawingAnimationCommandArchive_default_instance_;
class FreehandDrawingOpacityCommandArchive;
struct FreehandDrawingOpacityCommandArchiveDefaultTypeInternal;
extern FreehandDrawingOpacityCommandArchiveDefaultTypeInternal _FreehandDrawingOpacityCommandArchive_default_instance_;
class GroupDrawablesCommandArchive;
struct GroupDrawablesCommandArchiveDefaultTypeInternal;
extern GroupDrawablesCommandArchiveDefaultTypeInternal _GroupDrawablesCommandArchive_default_instance_;
class GroupSelectionTransformerArchive;
struct GroupSelectionTransformerArchiveDefaultTypeInternal;
extern GroupSelectionTransformerArchiveDefaultTypeInternal _GroupSelectionTransformerArchive_default_instance_;
class GroupUngroupInformativeCommandArchive;
struct GroupUngroupInformativeCommandArchiveDefaultTypeInternal;
extern GroupUngroupInformativeCommandArchiveDefaultTypeInternal _GroupUngroupInformativeCommandArchive_default_instance_;
class GuideCommandArchive;
struct GuideCommandArchiveDefaultTypeInternal;
extern GuideCommandArchiveDefaultTypeInternal _GuideCommandArchive_default_instance_;
class ImageAdjustmentsCommandArchive;
struct ImageAdjustmentsCommandArchiveDefaultTypeInternal;
extern ImageAdjustmentsCommandArchiveDefaultTypeInternal _ImageAdjustmentsCommandArchive_default_instance_;
class ImageInfoAbstractGeometryCommandArchive;
struct ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal;
extern ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal _ImageInfoAbstractGeometryCommandArchive_default_instance_;
class ImageInfoGeometryCommandArchive;
struct ImageInfoGeometryCommandArchiveDefaultTypeInternal;
extern ImageInfoGeometryCommandArchiveDefaultTypeInternal _ImageInfoGeometryCommandArchive_default_instance_;
class ImageInfoMaskGeometryCommandArchive;
struct ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal;
extern ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal _ImageInfoMaskGeometryCommandArchive_default_instance_;
class ImageMaskCommandArchive;
struct ImageMaskCommandArchiveDefaultTypeInternal;
extern ImageMaskCommandArchiveDefaultTypeInternal _ImageMaskCommandArchive_default_instance_;
class ImageMediaCommandArchive;
struct ImageMediaCommandArchiveDefaultTypeInternal;
extern ImageMediaCommandArchiveDefaultTypeInternal _ImageMediaCommandArchive_default_instance_;
class ImageNaturalSizeCommandArchive;
struct ImageNaturalSizeCommandArchiveDefaultTypeInternal;
extern ImageNaturalSizeCommandArchiveDefaultTypeInternal _ImageNaturalSizeCommandArchive_default_instance_;
class ImageReplaceCommandArchive;
struct ImageReplaceCommandArchiveDefaultTypeInternal;
extern ImageReplaceCommandArchiveDefaultTypeInternal _ImageReplaceCommandArchive_default_instance_;
class InfoCollectionSelectionTransformerHelperArchive;
struct InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal;
extern InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal _InfoCollectionSelectionTransformerHelperArchive_default_instance_;
class InfoCommandArchive;
struct InfoCommandArchiveDefaultTypeInternal;
extern InfoCommandArchiveDefaultTypeInternal _InfoCommandArchive_default_instance_;
class InfoGeometryCommandArchive;
struct InfoGeometryCommandArchiveDefaultTypeInternal;
extern InfoGeometryCommandArchiveDefaultTypeInternal _InfoGeometryCommandArchive_default_instance_;
class InfoHyperlinkSelectionTransformerArchive;
struct InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal;
extern InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal _InfoHyperlinkSelectionTransformerArchive_default_instance_;
class InsertCaptionOrTitleCommandArchive;
struct InsertCaptionOrTitleCommandArchiveDefaultTypeInternal;
extern InsertCaptionOrTitleCommandArchiveDefaultTypeInternal _InsertCaptionOrTitleCommandArchive_default_instance_;
class InstantAlphaCommandArchive;
struct InstantAlphaCommandArchiveDefaultTypeInternal;
extern InstantAlphaCommandArchiveDefaultTypeInternal _InstantAlphaCommandArchive_default_instance_;
class MediaApplyPresetCommandArchive;
struct MediaApplyPresetCommandArchiveDefaultTypeInternal;
extern MediaApplyPresetCommandArchiveDefaultTypeInternal _MediaApplyPresetCommandArchive_default_instance_;
class MediaFlagsCommandArchive;
struct MediaFlagsCommandArchiveDefaultTypeInternal;
extern MediaFlagsCommandArchiveDefaultTypeInternal _MediaFlagsCommandArchive_default_instance_;
class MediaInfoGeometryCommandArchive;
struct MediaInfoGeometryCommandArchiveDefaultTypeInternal;
extern MediaInfoGeometryCommandArchiveDefaultTypeInternal _MediaInfoGeometryCommandArchive_default_instance_;
class MediaOriginalSizeCommandArchive;
struct MediaOriginalSizeCommandArchiveDefaultTypeInternal;
extern MediaOriginalSizeCommandArchiveDefaultTypeInternal _MediaOriginalSizeCommandArchive_default_instance_;
class MediaStyleSetValueCommandArchive;
struct MediaStyleSetValueCommandArchiveDefaultTypeInternal;
extern MediaStyleSetValueCommandArchiveDefaultTypeInternal _MediaStyleSetValueCommandArchive_default_instance_;
class MovieSetValueCommandArchive;
struct MovieSetValueCommandArchiveDefaultTypeInternal;
extern MovieSetValueCommandArchiveDefaultTypeInternal _MovieSetValueCommandArchive_default_instance_;
class MovieSetValueCommandArchive_PropertyValue;
struct MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal;
extern MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal _MovieSetValueCommandArchive_PropertyValue_default_instance_;
class PasteStyleCommandArchive;
struct PasteStyleCommandArchiveDefaultTypeInternal;
extern PasteStyleCommandArchiveDefaultTypeInternal _PasteStyleCommandArchive_default_instance_;
class PathSelectionTransformerArchive;
struct PathSelectionTransformerArchiveDefaultTypeInternal;
extern PathSelectionTransformerArchiveDefaultTypeInternal _PathSelectionTransformerArchive_default_instance_;
class PencilAnnotationSelectionTransformerArchive;
struct PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal;
extern PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal _PencilAnnotationSelectionTransformerArchive_default_instance_;
class RemoveCaptionOrTitleCommandArchive;
struct RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal;
extern RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal _RemoveCaptionOrTitleCommandArchive_default_instance_;
class SetCaptionOrTitleVisibilityCommandArchive;
struct SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal;
extern SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal _SetCaptionOrTitleVisibilityCommandArchive_default_instance_;
class ShapeApplyPresetCommandArchive;
struct ShapeApplyPresetCommandArchiveDefaultTypeInternal;
extern ShapeApplyPresetCommandArchiveDefaultTypeInternal _ShapeApplyPresetCommandArchive_default_instance_;
class ShapeSelectionTransformerArchive;
struct ShapeSelectionTransformerArchiveDefaultTypeInternal;
extern ShapeSelectionTransformerArchiveDefaultTypeInternal _ShapeSelectionTransformerArchive_default_instance_;
class ShapeStyleSetValueCommandArchive;
struct ShapeStyleSetValueCommandArchiveDefaultTypeInternal;
extern ShapeStyleSetValueCommandArchiveDefaultTypeInternal _ShapeStyleSetValueCommandArchive_default_instance_;
class StyledInfoSetStyleCommandArchive;
struct StyledInfoSetStyleCommandArchiveDefaultTypeInternal;
extern StyledInfoSetStyleCommandArchiveDefaultTypeInternal _StyledInfoSetStyleCommandArchive_default_instance_;
class UndoObjectArchive;
struct UndoObjectArchiveDefaultTypeInternal;
extern UndoObjectArchiveDefaultTypeInternal _UndoObjectArchive_default_instance_;
class UngroupGroupCommandArchive;
struct UngroupGroupCommandArchiveDefaultTypeInternal;
extern UngroupGroupCommandArchiveDefaultTypeInternal _UngroupGroupCommandArchive_default_instance_;
}  // namespace TSD
PROTOBUF_NAMESPACE_OPEN
template<> ::TSD::AbstractGuideCommandArchive* Arena::CreateMaybeMessage<::TSD::AbstractGuideCommandArchive>(Arena*);
template<> ::TSD::AbstractStyleCommandArchive* Arena::CreateMaybeMessage<::TSD::AbstractStyleCommandArchive>(Arena*);
template<> ::TSD::BaseApplyPresetCommandArchive* Arena::CreateMaybeMessage<::TSD::BaseApplyPresetCommandArchive>(Arena*);
template<> ::TSD::BaseStyleSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::BaseStyleSetValueCommandArchive>(Arena*);
template<> ::TSD::CanvasSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::CanvasSelectionTransformerArchive>(Arena*);
template<> ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TSD::CommentInvalidatingCommandSelectionBehaviorArchive>(Arena*);
template<> ::TSD::ConnectionLineConnectCommandArchive* Arena::CreateMaybeMessage<::TSD::ConnectionLineConnectCommandArchive>(Arena*);
template<> ::TSD::ContainerInsertChildrenCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerInsertChildrenCommandArchive>(Arena*);
template<> ::TSD::ContainerInsertDrawablesCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerInsertDrawablesCommandArchive>(Arena*);
template<> ::TSD::ContainerRemoveChildrenCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerRemoveChildrenCommandArchive>(Arena*);
template<> ::TSD::ContainerRemoveDrawablesCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerRemoveDrawablesCommandArchive>(Arena*);
template<> ::TSD::ContainerReorderChildrenCommandArchive* Arena::CreateMaybeMessage<::TSD::ContainerReorderChildrenCommandArchive>(Arena*);
template<> ::TSD::DrawableAccessibilityDescriptionCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableAccessibilityDescriptionCommandArchive>(Arena*);
template<> ::TSD::DrawableApplyThemeCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableApplyThemeCommandArchive>(Arena*);
template<> ::TSD::DrawableAspectRatioLockedCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableAspectRatioLockedCommandArchive>(Arena*);
template<> ::TSD::DrawableHyperlinkCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableHyperlinkCommandArchive>(Arena*);
template<> ::TSD::DrawableInfoCommentCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableInfoCommentCommandArchive>(Arena*);
template<> ::TSD::DrawableLockCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawableLockCommandArchive>(Arena*);
template<> ::TSD::DrawablePathSourceCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawablePathSourceCommandArchive>(Arena*);
template<> ::TSD::DrawablePencilAnnotationCommandArchive* Arena::CreateMaybeMessage<::TSD::DrawablePencilAnnotationCommandArchive>(Arena*);
template<> ::TSD::DrawableSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::DrawableSelectionTransformerArchive>(Arena*);
template<> ::TSD::DrawablesCommandGroupArchive* Arena::CreateMaybeMessage<::TSD::DrawablesCommandGroupArchive>(Arena*);
template<> ::TSD::ExteriorTextWrapCommandArchive* Arena::CreateMaybeMessage<::TSD::ExteriorTextWrapCommandArchive>(Arena*);
template<> ::TSD::FreehandDrawingAnimationCommandArchive* Arena::CreateMaybeMessage<::TSD::FreehandDrawingAnimationCommandArchive>(Arena*);
template<> ::TSD::FreehandDrawingOpacityCommandArchive* Arena::CreateMaybeMessage<::TSD::FreehandDrawingOpacityCommandArchive>(Arena*);
template<> ::TSD::GroupDrawablesCommandArchive* Arena::CreateMaybeMessage<::TSD::GroupDrawablesCommandArchive>(Arena*);
template<> ::TSD::GroupSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::GroupSelectionTransformerArchive>(Arena*);
template<> ::TSD::GroupUngroupInformativeCommandArchive* Arena::CreateMaybeMessage<::TSD::GroupUngroupInformativeCommandArchive>(Arena*);
template<> ::TSD::GuideCommandArchive* Arena::CreateMaybeMessage<::TSD::GuideCommandArchive>(Arena*);
template<> ::TSD::ImageAdjustmentsCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageAdjustmentsCommandArchive>(Arena*);
template<> ::TSD::ImageInfoAbstractGeometryCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageInfoAbstractGeometryCommandArchive>(Arena*);
template<> ::TSD::ImageInfoGeometryCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageInfoGeometryCommandArchive>(Arena*);
template<> ::TSD::ImageInfoMaskGeometryCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageInfoMaskGeometryCommandArchive>(Arena*);
template<> ::TSD::ImageMaskCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageMaskCommandArchive>(Arena*);
template<> ::TSD::ImageMediaCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageMediaCommandArchive>(Arena*);
template<> ::TSD::ImageNaturalSizeCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageNaturalSizeCommandArchive>(Arena*);
template<> ::TSD::ImageReplaceCommandArchive* Arena::CreateMaybeMessage<::TSD::ImageReplaceCommandArchive>(Arena*);
template<> ::TSD::InfoCollectionSelectionTransformerHelperArchive* Arena::CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(Arena*);
template<> ::TSD::InfoCommandArchive* Arena::CreateMaybeMessage<::TSD::InfoCommandArchive>(Arena*);
template<> ::TSD::InfoGeometryCommandArchive* Arena::CreateMaybeMessage<::TSD::InfoGeometryCommandArchive>(Arena*);
template<> ::TSD::InfoHyperlinkSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::InfoHyperlinkSelectionTransformerArchive>(Arena*);
template<> ::TSD::InsertCaptionOrTitleCommandArchive* Arena::CreateMaybeMessage<::TSD::InsertCaptionOrTitleCommandArchive>(Arena*);
template<> ::TSD::InstantAlphaCommandArchive* Arena::CreateMaybeMessage<::TSD::InstantAlphaCommandArchive>(Arena*);
template<> ::TSD::MediaApplyPresetCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaApplyPresetCommandArchive>(Arena*);
template<> ::TSD::MediaFlagsCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaFlagsCommandArchive>(Arena*);
template<> ::TSD::MediaInfoGeometryCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaInfoGeometryCommandArchive>(Arena*);
template<> ::TSD::MediaOriginalSizeCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaOriginalSizeCommandArchive>(Arena*);
template<> ::TSD::MediaStyleSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::MediaStyleSetValueCommandArchive>(Arena*);
template<> ::TSD::MovieSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::MovieSetValueCommandArchive>(Arena*);
template<> ::TSD::MovieSetValueCommandArchive_PropertyValue* Arena::CreateMaybeMessage<::TSD::MovieSetValueCommandArchive_PropertyValue>(Arena*);
template<> ::TSD::PasteStyleCommandArchive* Arena::CreateMaybeMessage<::TSD::PasteStyleCommandArchive>(Arena*);
template<> ::TSD::PathSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::PathSelectionTransformerArchive>(Arena*);
template<> ::TSD::PencilAnnotationSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::PencilAnnotationSelectionTransformerArchive>(Arena*);
template<> ::TSD::RemoveCaptionOrTitleCommandArchive* Arena::CreateMaybeMessage<::TSD::RemoveCaptionOrTitleCommandArchive>(Arena*);
template<> ::TSD::SetCaptionOrTitleVisibilityCommandArchive* Arena::CreateMaybeMessage<::TSD::SetCaptionOrTitleVisibilityCommandArchive>(Arena*);
template<> ::TSD::ShapeApplyPresetCommandArchive* Arena::CreateMaybeMessage<::TSD::ShapeApplyPresetCommandArchive>(Arena*);
template<> ::TSD::ShapeSelectionTransformerArchive* Arena::CreateMaybeMessage<::TSD::ShapeSelectionTransformerArchive>(Arena*);
template<> ::TSD::ShapeStyleSetValueCommandArchive* Arena::CreateMaybeMessage<::TSD::ShapeStyleSetValueCommandArchive>(Arena*);
template<> ::TSD::StyledInfoSetStyleCommandArchive* Arena::CreateMaybeMessage<::TSD::StyledInfoSetStyleCommandArchive>(Arena*);
template<> ::TSD::UndoObjectArchive* Arena::CreateMaybeMessage<::TSD::UndoObjectArchive>(Arena*);
template<> ::TSD::UngroupGroupCommandArchive* Arena::CreateMaybeMessage<::TSD::UngroupGroupCommandArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSD {

enum GroupUngroupInformativeCommandArchive_CommandType : int {
  GroupUngroupInformativeCommandArchive_CommandType_Group = 0,
  GroupUngroupInformativeCommandArchive_CommandType_Ungroup = 1
};
bool GroupUngroupInformativeCommandArchive_CommandType_IsValid(int value);
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive_CommandType_CommandType_MIN = GroupUngroupInformativeCommandArchive_CommandType_Group;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive_CommandType_CommandType_MAX = GroupUngroupInformativeCommandArchive_CommandType_Ungroup;
constexpr int GroupUngroupInformativeCommandArchive_CommandType_CommandType_ARRAYSIZE = GroupUngroupInformativeCommandArchive_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUngroupInformativeCommandArchive_CommandType_descriptor();
template<typename T>
inline const std::string& GroupUngroupInformativeCommandArchive_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupUngroupInformativeCommandArchive_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupUngroupInformativeCommandArchive_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupUngroupInformativeCommandArchive_CommandType_descriptor(), enum_t_value);
}
inline bool GroupUngroupInformativeCommandArchive_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupUngroupInformativeCommandArchive_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupUngroupInformativeCommandArchive_CommandType>(
    GroupUngroupInformativeCommandArchive_CommandType_descriptor(), name, value);
}
enum MovieSetValueCommandArchive_LoopOption : int {
  MovieSetValueCommandArchive_LoopOption_None = 0,
  MovieSetValueCommandArchive_LoopOption_Repeat = 1,
  MovieSetValueCommandArchive_LoopOption_BackAndForth = 2
};
bool MovieSetValueCommandArchive_LoopOption_IsValid(int value);
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_LoopOption_LoopOption_MIN = MovieSetValueCommandArchive_LoopOption_None;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_LoopOption_LoopOption_MAX = MovieSetValueCommandArchive_LoopOption_BackAndForth;
constexpr int MovieSetValueCommandArchive_LoopOption_LoopOption_ARRAYSIZE = MovieSetValueCommandArchive_LoopOption_LoopOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovieSetValueCommandArchive_LoopOption_descriptor();
template<typename T>
inline const std::string& MovieSetValueCommandArchive_LoopOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MovieSetValueCommandArchive_LoopOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MovieSetValueCommandArchive_LoopOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MovieSetValueCommandArchive_LoopOption_descriptor(), enum_t_value);
}
inline bool MovieSetValueCommandArchive_LoopOption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MovieSetValueCommandArchive_LoopOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MovieSetValueCommandArchive_LoopOption>(
    MovieSetValueCommandArchive_LoopOption_descriptor(), name, value);
}
enum DrawablesCommandGroupArchive_DrawablesCommandGroupType : int {
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_Constructive = 1,
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_Destructive = 2,
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_InPlace = 3
};
bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(int value);
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MIN = DrawablesCommandGroupArchive_DrawablesCommandGroupType_Constructive;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MAX = DrawablesCommandGroupArchive_DrawablesCommandGroupType_InPlace;
constexpr int DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_ARRAYSIZE = DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor();
template<typename T>
inline const std::string& DrawablesCommandGroupArchive_DrawablesCommandGroupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrawablesCommandGroupArchive_DrawablesCommandGroupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrawablesCommandGroupArchive_DrawablesCommandGroupType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor(), enum_t_value);
}
inline bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DrawablesCommandGroupArchive_DrawablesCommandGroupType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrawablesCommandGroupArchive_DrawablesCommandGroupType>(
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor(), name, value);
}
enum CommentCommandVariant : int {
  BaseComment = 0,
  AddReply = 1,
  EditReply = 2,
  DeleteReply = 3
};
bool CommentCommandVariant_IsValid(int value);
constexpr CommentCommandVariant CommentCommandVariant_MIN = BaseComment;
constexpr CommentCommandVariant CommentCommandVariant_MAX = DeleteReply;
constexpr int CommentCommandVariant_ARRAYSIZE = CommentCommandVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommentCommandVariant_descriptor();
template<typename T>
inline const std::string& CommentCommandVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommentCommandVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommentCommandVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommentCommandVariant_descriptor(), enum_t_value);
}
inline bool CommentCommandVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommentCommandVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommentCommandVariant>(
    CommentCommandVariant_descriptor(), name, value);
}
enum CaptionOrTitleKind : int {
  Caption = 1,
  Title = 2
};
bool CaptionOrTitleKind_IsValid(int value);
constexpr CaptionOrTitleKind CaptionOrTitleKind_MIN = Caption;
constexpr CaptionOrTitleKind CaptionOrTitleKind_MAX = Title;
constexpr int CaptionOrTitleKind_ARRAYSIZE = CaptionOrTitleKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaptionOrTitleKind_descriptor();
template<typename T>
inline const std::string& CaptionOrTitleKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CaptionOrTitleKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CaptionOrTitleKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CaptionOrTitleKind_descriptor(), enum_t_value);
}
inline bool CaptionOrTitleKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CaptionOrTitleKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CaptionOrTitleKind>(
    CaptionOrTitleKind_descriptor(), name, value);
}
// ===================================================================

class UndoObjectArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.UndoObjectArchive) */ {
 public:
  inline UndoObjectArchive() : UndoObjectArchive(nullptr) {}
  ~UndoObjectArchive() override;
  explicit constexpr UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UndoObjectArchive(const UndoObjectArchive& from);
  UndoObjectArchive(UndoObjectArchive&& from) noexcept
    : UndoObjectArchive() {
    *this = ::std::move(from);
  }

  inline UndoObjectArchive& operator=(const UndoObjectArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoObjectArchive& operator=(UndoObjectArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoObjectArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoObjectArchive* internal_default_instance() {
    return reinterpret_cast<const UndoObjectArchive*>(
               &_UndoObjectArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UndoObjectArchive& a, UndoObjectArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UndoObjectArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoObjectArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UndoObjectArchive* New() const final {
    return CreateMaybeMessage<UndoObjectArchive>(nullptr);
  }

  UndoObjectArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UndoObjectArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UndoObjectArchive& from);
  void MergeFrom(const UndoObjectArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UndoObjectArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.UndoObjectArchive";
  }
  protected:
  explicit UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
    kKeysFieldNumber = 3,
    kCountsFieldNumber = 4,
    kStylesheetFieldNumber = 2,
  };
  // repeated .TSP.Reference objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::TSP::Reference* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_objects();
  private:
  const ::TSP::Reference& _internal_objects(int index) const;
  ::TSP::Reference* _internal_add_objects();
  public:
  const ::TSP::Reference& objects(int index) const;
  ::TSP::Reference* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      objects() const;

  // repeated string keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // repeated uint32 counts = 4;
  int counts_size() const;
  private:
  int _internal_counts_size() const;
  public:
  void clear_counts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_counts() const;
  void _internal_add_counts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_counts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 counts(int index) const;
  void set_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_counts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_counts();

  // optional .TSP.Reference stylesheet = 2;
  bool has_stylesheet() const;
  private:
  bool _internal_has_stylesheet() const;
  public:
  void clear_stylesheet();
  const ::TSP::Reference& stylesheet() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_stylesheet();
  ::TSP::Reference* mutable_stylesheet();
  void set_allocated_stylesheet(::TSP::Reference* stylesheet);
  private:
  const ::TSP::Reference& _internal_stylesheet() const;
  ::TSP::Reference* _internal_mutable_stylesheet();
  public:
  void unsafe_arena_set_allocated_stylesheet(
      ::TSP::Reference* stylesheet);
  ::TSP::Reference* unsafe_arena_release_stylesheet();

  // @@protoc_insertion_point(class_scope:TSD.UndoObjectArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > counts_;
  ::TSP::Reference* stylesheet_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.GroupDrawablesCommandArchive) */ {
 public:
  inline GroupDrawablesCommandArchive() : GroupDrawablesCommandArchive(nullptr) {}
  ~GroupDrawablesCommandArchive() override;
  explicit constexpr GroupDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupDrawablesCommandArchive(const GroupDrawablesCommandArchive& from);
  GroupDrawablesCommandArchive(GroupDrawablesCommandArchive&& from) noexcept
    : GroupDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline GroupDrawablesCommandArchive& operator=(const GroupDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupDrawablesCommandArchive& operator=(GroupDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GroupDrawablesCommandArchive*>(
               &_GroupDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupDrawablesCommandArchive& a, GroupDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<GroupDrawablesCommandArchive>(nullptr);
  }

  GroupDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupDrawablesCommandArchive& from);
  void MergeFrom(const GroupDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.GroupDrawablesCommandArchive";
  }
  protected:
  explicit GroupDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kSuperFieldNumber = 1,
    kGroupFieldNumber = 3,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::TSP::Reference& group() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_group();
  ::TSP::Reference* mutable_group();
  void set_allocated_group(::TSP::Reference* group);
  private:
  const ::TSP::Reference& _internal_group() const;
  ::TSP::Reference* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::TSP::Reference* group);
  ::TSP::Reference* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:TSD.GroupDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* group_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class UngroupGroupCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.UngroupGroupCommandArchive) */ {
 public:
  inline UngroupGroupCommandArchive() : UngroupGroupCommandArchive(nullptr) {}
  ~UngroupGroupCommandArchive() override;
  explicit constexpr UngroupGroupCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UngroupGroupCommandArchive(const UngroupGroupCommandArchive& from);
  UngroupGroupCommandArchive(UngroupGroupCommandArchive&& from) noexcept
    : UngroupGroupCommandArchive() {
    *this = ::std::move(from);
  }

  inline UngroupGroupCommandArchive& operator=(const UngroupGroupCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UngroupGroupCommandArchive& operator=(UngroupGroupCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UngroupGroupCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UngroupGroupCommandArchive* internal_default_instance() {
    return reinterpret_cast<const UngroupGroupCommandArchive*>(
               &_UngroupGroupCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UngroupGroupCommandArchive& a, UngroupGroupCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UngroupGroupCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UngroupGroupCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UngroupGroupCommandArchive* New() const final {
    return CreateMaybeMessage<UngroupGroupCommandArchive>(nullptr);
  }

  UngroupGroupCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UngroupGroupCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UngroupGroupCommandArchive& from);
  void MergeFrom(const UngroupGroupCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UngroupGroupCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.UngroupGroupCommandArchive";
  }
  protected:
  explicit UngroupGroupCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kSuperFieldNumber = 1,
    kGroupFieldNumber = 3,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::TSP::Reference& group() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_group();
  ::TSP::Reference* mutable_group();
  void set_allocated_group(::TSP::Reference* group);
  private:
  const ::TSP::Reference& _internal_group() const;
  ::TSP::Reference* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::TSP::Reference* group);
  ::TSP::Reference* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:TSD.UngroupGroupCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* group_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerRemoveChildrenCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerRemoveChildrenCommandArchive) */ {
 public:
  inline ContainerRemoveChildrenCommandArchive() : ContainerRemoveChildrenCommandArchive(nullptr) {}
  ~ContainerRemoveChildrenCommandArchive() override;
  explicit constexpr ContainerRemoveChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerRemoveChildrenCommandArchive(const ContainerRemoveChildrenCommandArchive& from);
  ContainerRemoveChildrenCommandArchive(ContainerRemoveChildrenCommandArchive&& from) noexcept
    : ContainerRemoveChildrenCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerRemoveChildrenCommandArchive& operator=(const ContainerRemoveChildrenCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerRemoveChildrenCommandArchive& operator=(ContainerRemoveChildrenCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerRemoveChildrenCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerRemoveChildrenCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerRemoveChildrenCommandArchive*>(
               &_ContainerRemoveChildrenCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContainerRemoveChildrenCommandArchive& a, ContainerRemoveChildrenCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerRemoveChildrenCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerRemoveChildrenCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerRemoveChildrenCommandArchive* New() const final {
    return CreateMaybeMessage<ContainerRemoveChildrenCommandArchive>(nullptr);
  }

  ContainerRemoveChildrenCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerRemoveChildrenCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerRemoveChildrenCommandArchive& from);
  void MergeFrom(const ContainerRemoveChildrenCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerRemoveChildrenCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerRemoveChildrenCommandArchive";
  }
  protected:
  explicit ContainerRemoveChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 3,
    kChildrenFieldNumber = 4,
    kSuperFieldNumber = 1,
    kContainerIdPathFieldNumber = 2,
  };
  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RemoveIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RemoveIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RemoveIdOperationArgs& args_list(int index) const;
  ::TSK::RemoveIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
      args_list() const;

  // repeated .TSP.Reference children = 4;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath container_id_path = 2;
  bool has_container_id_path() const;
  private:
  bool _internal_has_container_id_path() const;
  public:
  void clear_container_id_path();
  const ::TSP::UUIDPath& container_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_container_id_path();
  ::TSP::UUIDPath* mutable_container_id_path();
  void set_allocated_container_id_path(::TSP::UUIDPath* container_id_path);
  private:
  const ::TSP::UUIDPath& _internal_container_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_container_id_path();
  public:
  void unsafe_arena_set_allocated_container_id_path(
      ::TSP::UUIDPath* container_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_container_id_path();

  // @@protoc_insertion_point(class_scope:TSD.ContainerRemoveChildrenCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* container_id_path_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerRemoveDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerRemoveDrawablesCommandArchive) */ {
 public:
  inline ContainerRemoveDrawablesCommandArchive() : ContainerRemoveDrawablesCommandArchive(nullptr) {}
  ~ContainerRemoveDrawablesCommandArchive() override;
  explicit constexpr ContainerRemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerRemoveDrawablesCommandArchive(const ContainerRemoveDrawablesCommandArchive& from);
  ContainerRemoveDrawablesCommandArchive(ContainerRemoveDrawablesCommandArchive&& from) noexcept
    : ContainerRemoveDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerRemoveDrawablesCommandArchive& operator=(const ContainerRemoveDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerRemoveDrawablesCommandArchive& operator=(ContainerRemoveDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerRemoveDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerRemoveDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerRemoveDrawablesCommandArchive*>(
               &_ContainerRemoveDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContainerRemoveDrawablesCommandArchive& a, ContainerRemoveDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerRemoveDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerRemoveDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerRemoveDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<ContainerRemoveDrawablesCommandArchive>(nullptr);
  }

  ContainerRemoveDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerRemoveDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerRemoveDrawablesCommandArchive& from);
  void MergeFrom(const ContainerRemoveDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerRemoveDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerRemoveDrawablesCommandArchive";
  }
  protected:
  explicit ContainerRemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerRemoveChildrenCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ContainerRemoveChildrenCommandArchive* release_super();
  ::TSD::ContainerRemoveChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerRemoveChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerRemoveChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerRemoveChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerRemoveChildrenCommandArchive* super);
  ::TSD::ContainerRemoveChildrenCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ContainerRemoveDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::ContainerRemoveChildrenCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerInsertChildrenCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerInsertChildrenCommandArchive) */ {
 public:
  inline ContainerInsertChildrenCommandArchive() : ContainerInsertChildrenCommandArchive(nullptr) {}
  ~ContainerInsertChildrenCommandArchive() override;
  explicit constexpr ContainerInsertChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerInsertChildrenCommandArchive(const ContainerInsertChildrenCommandArchive& from);
  ContainerInsertChildrenCommandArchive(ContainerInsertChildrenCommandArchive&& from) noexcept
    : ContainerInsertChildrenCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerInsertChildrenCommandArchive& operator=(const ContainerInsertChildrenCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerInsertChildrenCommandArchive& operator=(ContainerInsertChildrenCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerInsertChildrenCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerInsertChildrenCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerInsertChildrenCommandArchive*>(
               &_ContainerInsertChildrenCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContainerInsertChildrenCommandArchive& a, ContainerInsertChildrenCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerInsertChildrenCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerInsertChildrenCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerInsertChildrenCommandArchive* New() const final {
    return CreateMaybeMessage<ContainerInsertChildrenCommandArchive>(nullptr);
  }

  ContainerInsertChildrenCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerInsertChildrenCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerInsertChildrenCommandArchive& from);
  void MergeFrom(const ContainerInsertChildrenCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerInsertChildrenCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerInsertChildrenCommandArchive";
  }
  protected:
  explicit ContainerInsertChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kArgsListFieldNumber = 4,
    kCustomFormatKeysFieldNumber = 5,
    kSuperFieldNumber = 1,
    kContainerIdPathFieldNumber = 2,
    kUndoObjectFieldNumber = 6,
  };
  // repeated .TSP.Reference children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::AddIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::AddIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::AddIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::AddIdOperationArgs& args_list(int index) const;
  ::TSK::AddIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
      args_list() const;

  // repeated .TSP.UUID custom_format_keys = 5;
  int custom_format_keys_size() const;
  private:
  int _internal_custom_format_keys_size() const;
  public:
  void clear_custom_format_keys();
  ::TSP::UUID* mutable_custom_format_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_custom_format_keys();
  private:
  const ::TSP::UUID& _internal_custom_format_keys(int index) const;
  ::TSP::UUID* _internal_add_custom_format_keys();
  public:
  const ::TSP::UUID& custom_format_keys(int index) const;
  ::TSP::UUID* add_custom_format_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      custom_format_keys() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath container_id_path = 2;
  bool has_container_id_path() const;
  private:
  bool _internal_has_container_id_path() const;
  public:
  void clear_container_id_path();
  const ::TSP::UUIDPath& container_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_container_id_path();
  ::TSP::UUIDPath* mutable_container_id_path();
  void set_allocated_container_id_path(::TSP::UUIDPath* container_id_path);
  private:
  const ::TSP::UUIDPath& _internal_container_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_container_id_path();
  public:
  void unsafe_arena_set_allocated_container_id_path(
      ::TSP::UUIDPath* container_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_container_id_path();

  // optional .TSP.Reference undo_object = 6;
  bool has_undo_object() const;
  private:
  bool _internal_has_undo_object() const;
  public:
  void clear_undo_object();
  const ::TSP::Reference& undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_undo_object();
  ::TSP::Reference* mutable_undo_object();
  void set_allocated_undo_object(::TSP::Reference* undo_object);
  private:
  const ::TSP::Reference& _internal_undo_object() const;
  ::TSP::Reference* _internal_mutable_undo_object();
  public:
  void unsafe_arena_set_allocated_undo_object(
      ::TSP::Reference* undo_object);
  ::TSP::Reference* unsafe_arena_release_undo_object();

  // @@protoc_insertion_point(class_scope:TSD.ContainerInsertChildrenCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs > args_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > custom_format_keys_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* container_id_path_;
  ::TSP::Reference* undo_object_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerInsertDrawablesCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerInsertDrawablesCommandArchive) */ {
 public:
  inline ContainerInsertDrawablesCommandArchive() : ContainerInsertDrawablesCommandArchive(nullptr) {}
  ~ContainerInsertDrawablesCommandArchive() override;
  explicit constexpr ContainerInsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerInsertDrawablesCommandArchive(const ContainerInsertDrawablesCommandArchive& from);
  ContainerInsertDrawablesCommandArchive(ContainerInsertDrawablesCommandArchive&& from) noexcept
    : ContainerInsertDrawablesCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerInsertDrawablesCommandArchive& operator=(const ContainerInsertDrawablesCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerInsertDrawablesCommandArchive& operator=(ContainerInsertDrawablesCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerInsertDrawablesCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerInsertDrawablesCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerInsertDrawablesCommandArchive*>(
               &_ContainerInsertDrawablesCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ContainerInsertDrawablesCommandArchive& a, ContainerInsertDrawablesCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerInsertDrawablesCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerInsertDrawablesCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerInsertDrawablesCommandArchive* New() const final {
    return CreateMaybeMessage<ContainerInsertDrawablesCommandArchive>(nullptr);
  }

  ContainerInsertDrawablesCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerInsertDrawablesCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerInsertDrawablesCommandArchive& from);
  void MergeFrom(const ContainerInsertDrawablesCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerInsertDrawablesCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerInsertDrawablesCommandArchive";
  }
  protected:
  explicit ContainerInsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablesFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference drawables = 2;
  int drawables_size() const;
  private:
  int _internal_drawables_size() const;
  public:
  void clear_drawables();
  ::TSP::Reference* mutable_drawables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawables();
  private:
  const ::TSP::Reference& _internal_drawables(int index) const;
  ::TSP::Reference* _internal_add_drawables();
  public:
  const ::TSP::Reference& drawables(int index) const;
  ::TSP::Reference* add_drawables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawables() const;

  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerInsertChildrenCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ContainerInsertChildrenCommandArchive* release_super();
  ::TSD::ContainerInsertChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerInsertChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerInsertChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerInsertChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerInsertChildrenCommandArchive* super);
  ::TSD::ContainerInsertChildrenCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ContainerInsertDrawablesCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawables_;
  ::TSD::ContainerInsertChildrenCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ContainerReorderChildrenCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ContainerReorderChildrenCommandArchive) */ {
 public:
  inline ContainerReorderChildrenCommandArchive() : ContainerReorderChildrenCommandArchive(nullptr) {}
  ~ContainerReorderChildrenCommandArchive() override;
  explicit constexpr ContainerReorderChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerReorderChildrenCommandArchive(const ContainerReorderChildrenCommandArchive& from);
  ContainerReorderChildrenCommandArchive(ContainerReorderChildrenCommandArchive&& from) noexcept
    : ContainerReorderChildrenCommandArchive() {
    *this = ::std::move(from);
  }

  inline ContainerReorderChildrenCommandArchive& operator=(const ContainerReorderChildrenCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerReorderChildrenCommandArchive& operator=(ContainerReorderChildrenCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerReorderChildrenCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerReorderChildrenCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ContainerReorderChildrenCommandArchive*>(
               &_ContainerReorderChildrenCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContainerReorderChildrenCommandArchive& a, ContainerReorderChildrenCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerReorderChildrenCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerReorderChildrenCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContainerReorderChildrenCommandArchive* New() const final {
    return CreateMaybeMessage<ContainerReorderChildrenCommandArchive>(nullptr);
  }

  ContainerReorderChildrenCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContainerReorderChildrenCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContainerReorderChildrenCommandArchive& from);
  void MergeFrom(const ContainerReorderChildrenCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerReorderChildrenCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ContainerReorderChildrenCommandArchive";
  }
  protected:
  explicit ContainerReorderChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsListFieldNumber = 3,
    kSuperFieldNumber = 1,
    kContainerIdPathFieldNumber = 2,
  };
  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  int args_list_size() const;
  private:
  int _internal_args_list_size() const;
  public:
  void clear_args_list();
  ::TSK::RearrangeIdOperationArgs* mutable_args_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
      mutable_args_list();
  private:
  const ::TSK::RearrangeIdOperationArgs& _internal_args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* _internal_add_args_list();
  public:
  const ::TSK::RearrangeIdOperationArgs& args_list(int index) const;
  ::TSK::RearrangeIdOperationArgs* add_args_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
      args_list() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath container_id_path = 2;
  bool has_container_id_path() const;
  private:
  bool _internal_has_container_id_path() const;
  public:
  void clear_container_id_path();
  const ::TSP::UUIDPath& container_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_container_id_path();
  ::TSP::UUIDPath* mutable_container_id_path();
  void set_allocated_container_id_path(::TSP::UUIDPath* container_id_path);
  private:
  const ::TSP::UUIDPath& _internal_container_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_container_id_path();
  public:
  void unsafe_arena_set_allocated_container_id_path(
      ::TSP::UUIDPath* container_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_container_id_path();

  // @@protoc_insertion_point(class_scope:TSD.ContainerReorderChildrenCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs > args_list_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* container_id_path_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupUngroupInformativeCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.GroupUngroupInformativeCommandArchive) */ {
 public:
  inline GroupUngroupInformativeCommandArchive() : GroupUngroupInformativeCommandArchive(nullptr) {}
  ~GroupUngroupInformativeCommandArchive() override;
  explicit constexpr GroupUngroupInformativeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupUngroupInformativeCommandArchive(const GroupUngroupInformativeCommandArchive& from);
  GroupUngroupInformativeCommandArchive(GroupUngroupInformativeCommandArchive&& from) noexcept
    : GroupUngroupInformativeCommandArchive() {
    *this = ::std::move(from);
  }

  inline GroupUngroupInformativeCommandArchive& operator=(const GroupUngroupInformativeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUngroupInformativeCommandArchive& operator=(GroupUngroupInformativeCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupUngroupInformativeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupUngroupInformativeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GroupUngroupInformativeCommandArchive*>(
               &_GroupUngroupInformativeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupUngroupInformativeCommandArchive& a, GroupUngroupInformativeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUngroupInformativeCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUngroupInformativeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUngroupInformativeCommandArchive* New() const final {
    return CreateMaybeMessage<GroupUngroupInformativeCommandArchive>(nullptr);
  }

  GroupUngroupInformativeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUngroupInformativeCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUngroupInformativeCommandArchive& from);
  void MergeFrom(const GroupUngroupInformativeCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUngroupInformativeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.GroupUngroupInformativeCommandArchive";
  }
  protected:
  explicit GroupUngroupInformativeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupUngroupInformativeCommandArchive_CommandType CommandType;
  static constexpr CommandType Group =
    GroupUngroupInformativeCommandArchive_CommandType_Group;
  static constexpr CommandType Ungroup =
    GroupUngroupInformativeCommandArchive_CommandType_Ungroup;
  static inline bool CommandType_IsValid(int value) {
    return GroupUngroupInformativeCommandArchive_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    GroupUngroupInformativeCommandArchive_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    GroupUngroupInformativeCommandArchive_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    GroupUngroupInformativeCommandArchive_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return GroupUngroupInformativeCommandArchive_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return GroupUngroupInformativeCommandArchive_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return GroupUngroupInformativeCommandArchive_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedInfosFieldNumber = 2,
    kInsertedInfosFieldNumber = 3,
    kSuperFieldNumber = 1,
    kCommandTypeFieldNumber = 4,
  };
  // repeated .TSP.Reference removed_infos = 2;
  int removed_infos_size() const;
  private:
  int _internal_removed_infos_size() const;
  public:
  void clear_removed_infos();
  ::TSP::Reference* mutable_removed_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_removed_infos();
  private:
  const ::TSP::Reference& _internal_removed_infos(int index) const;
  ::TSP::Reference* _internal_add_removed_infos();
  public:
  const ::TSP::Reference& removed_infos(int index) const;
  ::TSP::Reference* add_removed_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      removed_infos() const;

  // repeated .TSP.Reference inserted_infos = 3;
  int inserted_infos_size() const;
  private:
  int _internal_inserted_infos_size() const;
  public:
  void clear_inserted_infos();
  ::TSP::Reference* mutable_inserted_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_inserted_infos();
  private:
  const ::TSP::Reference& _internal_inserted_infos(int index) const;
  ::TSP::Reference* _internal_add_inserted_infos();
  public:
  const ::TSP::Reference& inserted_infos(int index) const;
  ::TSP::Reference* add_inserted_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      inserted_infos() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
  bool has_command_type() const;
  private:
  bool _internal_has_command_type() const;
  public:
  void clear_command_type();
  ::TSD::GroupUngroupInformativeCommandArchive_CommandType command_type() const;
  void set_command_type(::TSD::GroupUngroupInformativeCommandArchive_CommandType value);
  private:
  ::TSD::GroupUngroupInformativeCommandArchive_CommandType _internal_command_type() const;
  void _internal_set_command_type(::TSD::GroupUngroupInformativeCommandArchive_CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.GroupUngroupInformativeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > removed_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > inserted_infos_;
  ::TSK::CommandArchive* super_;
  int command_type_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InfoCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InfoCommandArchive) */ {
 public:
  inline InfoCommandArchive() : InfoCommandArchive(nullptr) {}
  ~InfoCommandArchive() override;
  explicit constexpr InfoCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoCommandArchive(const InfoCommandArchive& from);
  InfoCommandArchive(InfoCommandArchive&& from) noexcept
    : InfoCommandArchive() {
    *this = ::std::move(from);
  }

  inline InfoCommandArchive& operator=(const InfoCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoCommandArchive& operator=(InfoCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InfoCommandArchive*>(
               &_InfoCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InfoCommandArchive& a, InfoCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoCommandArchive* New() const final {
    return CreateMaybeMessage<InfoCommandArchive>(nullptr);
  }

  InfoCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoCommandArchive& from);
  void MergeFrom(const InfoCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InfoCommandArchive";
  }
  protected:
  explicit InfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoIdPathFieldNumber = 2,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath info_id_path = 2;
  bool has_info_id_path() const;
  private:
  bool _internal_has_info_id_path() const;
  public:
  void clear_info_id_path();
  const ::TSP::UUIDPath& info_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_info_id_path();
  ::TSP::UUIDPath* mutable_info_id_path();
  void set_allocated_info_id_path(::TSP::UUIDPath* info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_info_id_path();
  public:
  void unsafe_arena_set_allocated_info_id_path(
      ::TSP::UUIDPath* info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_info_id_path();

  // @@protoc_insertion_point(class_scope:TSD.InfoCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* info_id_path_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ConnectionLineConnectCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ConnectionLineConnectCommandArchive) */ {
 public:
  inline ConnectionLineConnectCommandArchive() : ConnectionLineConnectCommandArchive(nullptr) {}
  ~ConnectionLineConnectCommandArchive() override;
  explicit constexpr ConnectionLineConnectCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionLineConnectCommandArchive(const ConnectionLineConnectCommandArchive& from);
  ConnectionLineConnectCommandArchive(ConnectionLineConnectCommandArchive&& from) noexcept
    : ConnectionLineConnectCommandArchive() {
    *this = ::std::move(from);
  }

  inline ConnectionLineConnectCommandArchive& operator=(const ConnectionLineConnectCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionLineConnectCommandArchive& operator=(ConnectionLineConnectCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionLineConnectCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionLineConnectCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ConnectionLineConnectCommandArchive*>(
               &_ConnectionLineConnectCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConnectionLineConnectCommandArchive& a, ConnectionLineConnectCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionLineConnectCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionLineConnectCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionLineConnectCommandArchive* New() const final {
    return CreateMaybeMessage<ConnectionLineConnectCommandArchive>(nullptr);
  }

  ConnectionLineConnectCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionLineConnectCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionLineConnectCommandArchive& from);
  void MergeFrom(const ConnectionLineConnectCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionLineConnectCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ConnectionLineConnectCommandArchive";
  }
  protected:
  explicit ConnectionLineConnectCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kConnectedFromIdFieldNumber = 4,
    kConnectedToIdFieldNumber = 5,
    kOldConnectedToIdFieldNumber = 6,
    kOldConnectedFromIdFieldNumber = 7,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUID connected_from_id = 4;
  bool has_connected_from_id() const;
  private:
  bool _internal_has_connected_from_id() const;
  public:
  void clear_connected_from_id();
  const ::TSP::UUID& connected_from_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_connected_from_id();
  ::TSP::UUID* mutable_connected_from_id();
  void set_allocated_connected_from_id(::TSP::UUID* connected_from_id);
  private:
  const ::TSP::UUID& _internal_connected_from_id() const;
  ::TSP::UUID* _internal_mutable_connected_from_id();
  public:
  void unsafe_arena_set_allocated_connected_from_id(
      ::TSP::UUID* connected_from_id);
  ::TSP::UUID* unsafe_arena_release_connected_from_id();

  // optional .TSP.UUID connected_to_id = 5;
  bool has_connected_to_id() const;
  private:
  bool _internal_has_connected_to_id() const;
  public:
  void clear_connected_to_id();
  const ::TSP::UUID& connected_to_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_connected_to_id();
  ::TSP::UUID* mutable_connected_to_id();
  void set_allocated_connected_to_id(::TSP::UUID* connected_to_id);
  private:
  const ::TSP::UUID& _internal_connected_to_id() const;
  ::TSP::UUID* _internal_mutable_connected_to_id();
  public:
  void unsafe_arena_set_allocated_connected_to_id(
      ::TSP::UUID* connected_to_id);
  ::TSP::UUID* unsafe_arena_release_connected_to_id();

  // optional .TSP.UUID old_connected_to_id = 6;
  bool has_old_connected_to_id() const;
  private:
  bool _internal_has_old_connected_to_id() const;
  public:
  void clear_old_connected_to_id();
  const ::TSP::UUID& old_connected_to_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_old_connected_to_id();
  ::TSP::UUID* mutable_old_connected_to_id();
  void set_allocated_old_connected_to_id(::TSP::UUID* old_connected_to_id);
  private:
  const ::TSP::UUID& _internal_old_connected_to_id() const;
  ::TSP::UUID* _internal_mutable_old_connected_to_id();
  public:
  void unsafe_arena_set_allocated_old_connected_to_id(
      ::TSP::UUID* old_connected_to_id);
  ::TSP::UUID* unsafe_arena_release_old_connected_to_id();

  // optional .TSP.UUID old_connected_from_id = 7;
  bool has_old_connected_from_id() const;
  private:
  bool _internal_has_old_connected_from_id() const;
  public:
  void clear_old_connected_from_id();
  const ::TSP::UUID& old_connected_from_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_old_connected_from_id();
  ::TSP::UUID* mutable_old_connected_from_id();
  void set_allocated_old_connected_from_id(::TSP::UUID* old_connected_from_id);
  private:
  const ::TSP::UUID& _internal_old_connected_from_id() const;
  ::TSP::UUID* _internal_mutable_old_connected_from_id();
  public:
  void unsafe_arena_set_allocated_old_connected_from_id(
      ::TSP::UUID* old_connected_from_id);
  ::TSP::UUID* unsafe_arena_release_old_connected_from_id();

  // @@protoc_insertion_point(class_scope:TSD.ConnectionLineConnectCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::UUID* connected_from_id_;
  ::TSP::UUID* connected_to_id_;
  ::TSP::UUID* old_connected_to_id_;
  ::TSP::UUID* old_connected_from_id_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InfoGeometryCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InfoGeometryCommandArchive) */ {
 public:
  inline InfoGeometryCommandArchive() : InfoGeometryCommandArchive(nullptr) {}
  ~InfoGeometryCommandArchive() override;
  explicit constexpr InfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoGeometryCommandArchive(const InfoGeometryCommandArchive& from);
  InfoGeometryCommandArchive(InfoGeometryCommandArchive&& from) noexcept
    : InfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline InfoGeometryCommandArchive& operator=(const InfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoGeometryCommandArchive& operator=(InfoGeometryCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InfoGeometryCommandArchive*>(
               &_InfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InfoGeometryCommandArchive& a, InfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoGeometryCommandArchive* New() const final {
    return CreateMaybeMessage<InfoGeometryCommandArchive>(nullptr);
  }

  InfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoGeometryCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoGeometryCommandArchive& from);
  void MergeFrom(const InfoGeometryCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InfoGeometryCommandArchive";
  }
  protected:
  explicit InfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewGeometryFieldNumber = 2,
    kOldGeometryFieldNumber = 3,
    kMatchObjectPlaceholderGeometryFieldNumber = 4,
    kOldMatchObjectPlaceholderGeometryFieldNumber = 5,
    kShouldTriggerRtuAnimationFieldNumber = 6,
    kInitiatedOnWebFieldNumber = 7,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.GeometryArchive newGeometry = 2;
  bool has_newgeometry() const;
  private:
  bool _internal_has_newgeometry() const;
  public:
  void clear_newgeometry();
  const ::TSD::GeometryArchive& newgeometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_newgeometry();
  ::TSD::GeometryArchive* mutable_newgeometry();
  void set_allocated_newgeometry(::TSD::GeometryArchive* newgeometry);
  private:
  const ::TSD::GeometryArchive& _internal_newgeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_newgeometry();
  public:
  void unsafe_arena_set_allocated_newgeometry(
      ::TSD::GeometryArchive* newgeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_newgeometry();

  // optional .TSD.GeometryArchive oldGeometry = 3;
  bool has_oldgeometry() const;
  private:
  bool _internal_has_oldgeometry() const;
  public:
  void clear_oldgeometry();
  const ::TSD::GeometryArchive& oldgeometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_oldgeometry();
  ::TSD::GeometryArchive* mutable_oldgeometry();
  void set_allocated_oldgeometry(::TSD::GeometryArchive* oldgeometry);
  private:
  const ::TSD::GeometryArchive& _internal_oldgeometry() const;
  ::TSD::GeometryArchive* _internal_mutable_oldgeometry();
  public:
  void unsafe_arena_set_allocated_oldgeometry(
      ::TSD::GeometryArchive* oldgeometry);
  ::TSD::GeometryArchive* unsafe_arena_release_oldgeometry();

  // optional bool matchObjectPlaceholderGeometry = 4;
  bool has_matchobjectplaceholdergeometry() const;
  private:
  bool _internal_has_matchobjectplaceholdergeometry() const;
  public:
  void clear_matchobjectplaceholdergeometry();
  bool matchobjectplaceholdergeometry() const;
  void set_matchobjectplaceholdergeometry(bool value);
  private:
  bool _internal_matchobjectplaceholdergeometry() const;
  void _internal_set_matchobjectplaceholdergeometry(bool value);
  public:

  // optional bool oldMatchObjectPlaceholderGeometry = 5;
  bool has_oldmatchobjectplaceholdergeometry() const;
  private:
  bool _internal_has_oldmatchobjectplaceholdergeometry() const;
  public:
  void clear_oldmatchobjectplaceholdergeometry();
  bool oldmatchobjectplaceholdergeometry() const;
  void set_oldmatchobjectplaceholdergeometry(bool value);
  private:
  bool _internal_oldmatchobjectplaceholdergeometry() const;
  void _internal_set_oldmatchobjectplaceholdergeometry(bool value);
  public:

  // optional bool shouldTriggerRtuAnimation = 6;
  bool has_shouldtriggerrtuanimation() const;
  private:
  bool _internal_has_shouldtriggerrtuanimation() const;
  public:
  void clear_shouldtriggerrtuanimation();
  bool shouldtriggerrtuanimation() const;
  void set_shouldtriggerrtuanimation(bool value);
  private:
  bool _internal_shouldtriggerrtuanimation() const;
  void _internal_set_shouldtriggerrtuanimation(bool value);
  public:

  // optional bool initiatedOnWeb = 7;
  bool has_initiatedonweb() const;
  private:
  bool _internal_has_initiatedonweb() const;
  public:
  void clear_initiatedonweb();
  bool initiatedonweb() const;
  void set_initiatedonweb(bool value);
  private:
  bool _internal_initiatedonweb() const;
  void _internal_set_initiatedonweb(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.InfoGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::GeometryArchive* newgeometry_;
  ::TSD::GeometryArchive* oldgeometry_;
  bool matchobjectplaceholdergeometry_;
  bool oldmatchobjectplaceholdergeometry_;
  bool shouldtriggerrtuanimation_;
  bool initiatedonweb_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablePathSourceCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawablePathSourceCommandArchive) */ {
 public:
  inline DrawablePathSourceCommandArchive() : DrawablePathSourceCommandArchive(nullptr) {}
  ~DrawablePathSourceCommandArchive() override;
  explicit constexpr DrawablePathSourceCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablePathSourceCommandArchive(const DrawablePathSourceCommandArchive& from);
  DrawablePathSourceCommandArchive(DrawablePathSourceCommandArchive&& from) noexcept
    : DrawablePathSourceCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawablePathSourceCommandArchive& operator=(const DrawablePathSourceCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablePathSourceCommandArchive& operator=(DrawablePathSourceCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablePathSourceCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablePathSourceCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablePathSourceCommandArchive*>(
               &_DrawablePathSourceCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DrawablePathSourceCommandArchive& a, DrawablePathSourceCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablePathSourceCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablePathSourceCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawablePathSourceCommandArchive* New() const final {
    return CreateMaybeMessage<DrawablePathSourceCommandArchive>(nullptr);
  }

  DrawablePathSourceCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawablePathSourceCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawablePathSourceCommandArchive& from);
  void MergeFrom(const DrawablePathSourceCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablePathSourceCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawablePathSourceCommandArchive";
  }
  protected:
  explicit DrawablePathSourceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldPathSourceFieldNumber = 2,
    kNewPathSourceFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.PathSourceArchive old_path_source = 2;
  bool has_old_path_source() const;
  private:
  bool _internal_has_old_path_source() const;
  public:
  void clear_old_path_source();
  const ::TSD::PathSourceArchive& old_path_source() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::PathSourceArchive* release_old_path_source();
  ::TSD::PathSourceArchive* mutable_old_path_source();
  void set_allocated_old_path_source(::TSD::PathSourceArchive* old_path_source);
  private:
  const ::TSD::PathSourceArchive& _internal_old_path_source() const;
  ::TSD::PathSourceArchive* _internal_mutable_old_path_source();
  public:
  void unsafe_arena_set_allocated_old_path_source(
      ::TSD::PathSourceArchive* old_path_source);
  ::TSD::PathSourceArchive* unsafe_arena_release_old_path_source();

  // optional .TSD.PathSourceArchive new_path_source = 3;
  bool has_new_path_source() const;
  private:
  bool _internal_has_new_path_source() const;
  public:
  void clear_new_path_source();
  const ::TSD::PathSourceArchive& new_path_source() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::PathSourceArchive* release_new_path_source();
  ::TSD::PathSourceArchive* mutable_new_path_source();
  void set_allocated_new_path_source(::TSD::PathSourceArchive* new_path_source);
  private:
  const ::TSD::PathSourceArchive& _internal_new_path_source() const;
  ::TSD::PathSourceArchive* _internal_mutable_new_path_source();
  public:
  void unsafe_arena_set_allocated_new_path_source(
      ::TSD::PathSourceArchive* new_path_source);
  ::TSD::PathSourceArchive* unsafe_arena_release_new_path_source();

  // @@protoc_insertion_point(class_scope:TSD.DrawablePathSourceCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::PathSourceArchive* old_path_source_;
  ::TSD::PathSourceArchive* new_path_source_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InstantAlphaCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InstantAlphaCommandArchive) */ {
 public:
  inline InstantAlphaCommandArchive() : InstantAlphaCommandArchive(nullptr) {}
  ~InstantAlphaCommandArchive() override;
  explicit constexpr InstantAlphaCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstantAlphaCommandArchive(const InstantAlphaCommandArchive& from);
  InstantAlphaCommandArchive(InstantAlphaCommandArchive&& from) noexcept
    : InstantAlphaCommandArchive() {
    *this = ::std::move(from);
  }

  inline InstantAlphaCommandArchive& operator=(const InstantAlphaCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantAlphaCommandArchive& operator=(InstantAlphaCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstantAlphaCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstantAlphaCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InstantAlphaCommandArchive*>(
               &_InstantAlphaCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InstantAlphaCommandArchive& a, InstantAlphaCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InstantAlphaCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstantAlphaCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstantAlphaCommandArchive* New() const final {
    return CreateMaybeMessage<InstantAlphaCommandArchive>(nullptr);
  }

  InstantAlphaCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstantAlphaCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstantAlphaCommandArchive& from);
  void MergeFrom(const InstantAlphaCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantAlphaCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InstantAlphaCommandArchive";
  }
  protected:
  explicit InstantAlphaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldpathFieldNumber = 2,
    kNewpathFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Path oldpath = 2;
  bool has_oldpath() const;
  private:
  bool _internal_has_oldpath() const;
  public:
  void clear_oldpath();
  const ::TSP::Path& oldpath() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Path* release_oldpath();
  ::TSP::Path* mutable_oldpath();
  void set_allocated_oldpath(::TSP::Path* oldpath);
  private:
  const ::TSP::Path& _internal_oldpath() const;
  ::TSP::Path* _internal_mutable_oldpath();
  public:
  void unsafe_arena_set_allocated_oldpath(
      ::TSP::Path* oldpath);
  ::TSP::Path* unsafe_arena_release_oldpath();

  // optional .TSP.Path newpath = 3;
  bool has_newpath() const;
  private:
  bool _internal_has_newpath() const;
  public:
  void clear_newpath();
  const ::TSP::Path& newpath() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Path* release_newpath();
  ::TSP::Path* mutable_newpath();
  void set_allocated_newpath(::TSP::Path* newpath);
  private:
  const ::TSP::Path& _internal_newpath() const;
  ::TSP::Path* _internal_mutable_newpath();
  public:
  void unsafe_arena_set_allocated_newpath(
      ::TSP::Path* newpath);
  ::TSP::Path* unsafe_arena_release_newpath();

  // @@protoc_insertion_point(class_scope:TSD.InstantAlphaCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Path* oldpath_;
  ::TSP::Path* newpath_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableApplyThemeCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableApplyThemeCommandArchive) */ {
 public:
  inline DrawableApplyThemeCommandArchive() : DrawableApplyThemeCommandArchive(nullptr) {}
  ~DrawableApplyThemeCommandArchive() override;
  explicit constexpr DrawableApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableApplyThemeCommandArchive(const DrawableApplyThemeCommandArchive& from);
  DrawableApplyThemeCommandArchive(DrawableApplyThemeCommandArchive&& from) noexcept
    : DrawableApplyThemeCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableApplyThemeCommandArchive& operator=(const DrawableApplyThemeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableApplyThemeCommandArchive& operator=(DrawableApplyThemeCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableApplyThemeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableApplyThemeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableApplyThemeCommandArchive*>(
               &_DrawableApplyThemeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DrawableApplyThemeCommandArchive& a, DrawableApplyThemeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableApplyThemeCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableApplyThemeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableApplyThemeCommandArchive* New() const final {
    return CreateMaybeMessage<DrawableApplyThemeCommandArchive>(nullptr);
  }

  DrawableApplyThemeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableApplyThemeCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableApplyThemeCommandArchive& from);
  void MergeFrom(const DrawableApplyThemeCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableApplyThemeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableApplyThemeCommandArchive";
  }
  protected:
  explicit DrawableApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoFieldNumber = 2,
    kStyleFieldNumber = 3,
  };
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::ApplyThemeChildCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSS::ApplyThemeChildCommandArchive* release_super();
  ::TSS::ApplyThemeChildCommandArchive* mutable_super();
  void set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super);
  private:
  const ::TSS::ApplyThemeChildCommandArchive& _internal_super() const;
  ::TSS::ApplyThemeChildCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::ApplyThemeChildCommandArchive* super);
  ::TSS::ApplyThemeChildCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // optional .TSP.Reference style = 3;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSD.DrawableApplyThemeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSS::ApplyThemeChildCommandArchive* super_;
  ::TSP::Reference* info_;
  ::TSP::Reference* style_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class AbstractStyleCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.AbstractStyleCommandArchive) */ {
 public:
  inline AbstractStyleCommandArchive() : AbstractStyleCommandArchive(nullptr) {}
  ~AbstractStyleCommandArchive() override;
  explicit constexpr AbstractStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbstractStyleCommandArchive(const AbstractStyleCommandArchive& from);
  AbstractStyleCommandArchive(AbstractStyleCommandArchive&& from) noexcept
    : AbstractStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline AbstractStyleCommandArchive& operator=(const AbstractStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbstractStyleCommandArchive& operator=(AbstractStyleCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbstractStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbstractStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AbstractStyleCommandArchive*>(
               &_AbstractStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AbstractStyleCommandArchive& a, AbstractStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AbstractStyleCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbstractStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbstractStyleCommandArchive* New() const final {
    return CreateMaybeMessage<AbstractStyleCommandArchive>(nullptr);
  }

  AbstractStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbstractStyleCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbstractStyleCommandArchive& from);
  void MergeFrom(const AbstractStyleCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbstractStyleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.AbstractStyleCommandArchive";
  }
  protected:
  explicit AbstractStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.AbstractStyleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class StyledInfoSetStyleCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.StyledInfoSetStyleCommandArchive) */ {
 public:
  inline StyledInfoSetStyleCommandArchive() : StyledInfoSetStyleCommandArchive(nullptr) {}
  ~StyledInfoSetStyleCommandArchive() override;
  explicit constexpr StyledInfoSetStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyledInfoSetStyleCommandArchive(const StyledInfoSetStyleCommandArchive& from);
  StyledInfoSetStyleCommandArchive(StyledInfoSetStyleCommandArchive&& from) noexcept
    : StyledInfoSetStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyledInfoSetStyleCommandArchive& operator=(const StyledInfoSetStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyledInfoSetStyleCommandArchive& operator=(StyledInfoSetStyleCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyledInfoSetStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyledInfoSetStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyledInfoSetStyleCommandArchive*>(
               &_StyledInfoSetStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StyledInfoSetStyleCommandArchive& a, StyledInfoSetStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyledInfoSetStyleCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyledInfoSetStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyledInfoSetStyleCommandArchive* New() const final {
    return CreateMaybeMessage<StyledInfoSetStyleCommandArchive>(nullptr);
  }

  StyledInfoSetStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyledInfoSetStyleCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyledInfoSetStyleCommandArchive& from);
  void MergeFrom(const StyledInfoSetStyleCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyledInfoSetStyleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.StyledInfoSetStyleCommandArchive";
  }
  protected:
  explicit StyledInfoSetStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewStyleFieldNumber = 2,
    kRollbackStyleFieldNumber = 4,
  };
  // required .TSD.AbstractStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::AbstractStyleCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::AbstractStyleCommandArchive* release_super();
  ::TSD::AbstractStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::AbstractStyleCommandArchive* super);
  private:
  const ::TSD::AbstractStyleCommandArchive& _internal_super() const;
  ::TSD::AbstractStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::AbstractStyleCommandArchive* super);
  ::TSD::AbstractStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference new_style = 2;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // optional .TSP.Reference rollback_style = 4;
  bool has_rollback_style() const;
  private:
  bool _internal_has_rollback_style() const;
  public:
  void clear_rollback_style();
  const ::TSP::Reference& rollback_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_rollback_style();
  ::TSP::Reference* mutable_rollback_style();
  void set_allocated_rollback_style(::TSP::Reference* rollback_style);
  private:
  const ::TSP::Reference& _internal_rollback_style() const;
  ::TSP::Reference* _internal_mutable_rollback_style();
  public:
  void unsafe_arena_set_allocated_rollback_style(
      ::TSP::Reference* rollback_style);
  ::TSP::Reference* unsafe_arena_release_rollback_style();

  // @@protoc_insertion_point(class_scope:TSD.StyledInfoSetStyleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::AbstractStyleCommandArchive* super_;
  ::TSP::Reference* new_style_;
  ::TSP::Reference* rollback_style_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class BaseApplyPresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.BaseApplyPresetCommandArchive) */ {
 public:
  inline BaseApplyPresetCommandArchive() : BaseApplyPresetCommandArchive(nullptr) {}
  ~BaseApplyPresetCommandArchive() override;
  explicit constexpr BaseApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseApplyPresetCommandArchive(const BaseApplyPresetCommandArchive& from);
  BaseApplyPresetCommandArchive(BaseApplyPresetCommandArchive&& from) noexcept
    : BaseApplyPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline BaseApplyPresetCommandArchive& operator=(const BaseApplyPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseApplyPresetCommandArchive& operator=(BaseApplyPresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseApplyPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseApplyPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const BaseApplyPresetCommandArchive*>(
               &_BaseApplyPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BaseApplyPresetCommandArchive& a, BaseApplyPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseApplyPresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseApplyPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseApplyPresetCommandArchive* New() const final {
    return CreateMaybeMessage<BaseApplyPresetCommandArchive>(nullptr);
  }

  BaseApplyPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseApplyPresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseApplyPresetCommandArchive& from);
  void MergeFrom(const BaseApplyPresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseApplyPresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.BaseApplyPresetCommandArchive";
  }
  protected:
  explicit BaseApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPresetStyleFieldNumber = 2,
    kRollbackStyleFieldNumber = 4,
  };
  // required .TSD.AbstractStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::AbstractStyleCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::AbstractStyleCommandArchive* release_super();
  ::TSD::AbstractStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::AbstractStyleCommandArchive* super);
  private:
  const ::TSD::AbstractStyleCommandArchive& _internal_super() const;
  ::TSD::AbstractStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::AbstractStyleCommandArchive* super);
  ::TSD::AbstractStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference preset_style = 2;
  bool has_preset_style() const;
  private:
  bool _internal_has_preset_style() const;
  public:
  void clear_preset_style();
  const ::TSP::Reference& preset_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_preset_style();
  ::TSP::Reference* mutable_preset_style();
  void set_allocated_preset_style(::TSP::Reference* preset_style);
  private:
  const ::TSP::Reference& _internal_preset_style() const;
  ::TSP::Reference* _internal_mutable_preset_style();
  public:
  void unsafe_arena_set_allocated_preset_style(
      ::TSP::Reference* preset_style);
  ::TSP::Reference* unsafe_arena_release_preset_style();

  // optional .TSP.Reference rollback_style = 4;
  bool has_rollback_style() const;
  private:
  bool _internal_has_rollback_style() const;
  public:
  void clear_rollback_style();
  const ::TSP::Reference& rollback_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_rollback_style();
  ::TSP::Reference* mutable_rollback_style();
  void set_allocated_rollback_style(::TSP::Reference* rollback_style);
  private:
  const ::TSP::Reference& _internal_rollback_style() const;
  ::TSP::Reference* _internal_mutable_rollback_style();
  public:
  void unsafe_arena_set_allocated_rollback_style(
      ::TSP::Reference* rollback_style);
  ::TSP::Reference* unsafe_arena_release_rollback_style();

  // @@protoc_insertion_point(class_scope:TSD.BaseApplyPresetCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::AbstractStyleCommandArchive* super_;
  ::TSP::Reference* preset_style_;
  ::TSP::Reference* rollback_style_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeApplyPresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapeApplyPresetCommandArchive) */ {
 public:
  inline ShapeApplyPresetCommandArchive() : ShapeApplyPresetCommandArchive(nullptr) {}
  ~ShapeApplyPresetCommandArchive() override;
  explicit constexpr ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from);
  ShapeApplyPresetCommandArchive(ShapeApplyPresetCommandArchive&& from) noexcept
    : ShapeApplyPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeApplyPresetCommandArchive& operator=(const ShapeApplyPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeApplyPresetCommandArchive& operator=(ShapeApplyPresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeApplyPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeApplyPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeApplyPresetCommandArchive*>(
               &_ShapeApplyPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ShapeApplyPresetCommandArchive& a, ShapeApplyPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeApplyPresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeApplyPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeApplyPresetCommandArchive* New() const final {
    return CreateMaybeMessage<ShapeApplyPresetCommandArchive>(nullptr);
  }

  ShapeApplyPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeApplyPresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeApplyPresetCommandArchive& from);
  void MergeFrom(const ShapeApplyPresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeApplyPresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapeApplyPresetCommandArchive";
  }
  protected:
  explicit ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::BaseApplyPresetCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::BaseApplyPresetCommandArchive* release_super();
  ::TSD::BaseApplyPresetCommandArchive* mutable_super();
  void set_allocated_super(::TSD::BaseApplyPresetCommandArchive* super);
  private:
  const ::TSD::BaseApplyPresetCommandArchive& _internal_super() const;
  ::TSD::BaseApplyPresetCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::BaseApplyPresetCommandArchive* super);
  ::TSD::BaseApplyPresetCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ShapeApplyPresetCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::BaseApplyPresetCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaApplyPresetCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaApplyPresetCommandArchive) */ {
 public:
  inline MediaApplyPresetCommandArchive() : MediaApplyPresetCommandArchive(nullptr) {}
  ~MediaApplyPresetCommandArchive() override;
  explicit constexpr MediaApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaApplyPresetCommandArchive(const MediaApplyPresetCommandArchive& from);
  MediaApplyPresetCommandArchive(MediaApplyPresetCommandArchive&& from) noexcept
    : MediaApplyPresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaApplyPresetCommandArchive& operator=(const MediaApplyPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaApplyPresetCommandArchive& operator=(MediaApplyPresetCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaApplyPresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaApplyPresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaApplyPresetCommandArchive*>(
               &_MediaApplyPresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MediaApplyPresetCommandArchive& a, MediaApplyPresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaApplyPresetCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaApplyPresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaApplyPresetCommandArchive* New() const final {
    return CreateMaybeMessage<MediaApplyPresetCommandArchive>(nullptr);
  }

  MediaApplyPresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaApplyPresetCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaApplyPresetCommandArchive& from);
  void MergeFrom(const MediaApplyPresetCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaApplyPresetCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaApplyPresetCommandArchive";
  }
  protected:
  explicit MediaApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::BaseApplyPresetCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::BaseApplyPresetCommandArchive* release_super();
  ::TSD::BaseApplyPresetCommandArchive* mutable_super();
  void set_allocated_super(::TSD::BaseApplyPresetCommandArchive* super);
  private:
  const ::TSD::BaseApplyPresetCommandArchive& _internal_super() const;
  ::TSD::BaseApplyPresetCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::BaseApplyPresetCommandArchive* super);
  ::TSD::BaseApplyPresetCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.MediaApplyPresetCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::BaseApplyPresetCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeStyleSetValueCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapeStyleSetValueCommandArchive) */ {
 public:
  inline ShapeStyleSetValueCommandArchive() : ShapeStyleSetValueCommandArchive(nullptr) {}
  ~ShapeStyleSetValueCommandArchive() override;
  explicit constexpr ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from);
  ShapeStyleSetValueCommandArchive(ShapeStyleSetValueCommandArchive&& from) noexcept
    : ShapeStyleSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShapeStyleSetValueCommandArchive& operator=(const ShapeStyleSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeStyleSetValueCommandArchive& operator=(ShapeStyleSetValueCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeStyleSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeStyleSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeStyleSetValueCommandArchive*>(
               &_ShapeStyleSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ShapeStyleSetValueCommandArchive& a, ShapeStyleSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeStyleSetValueCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeStyleSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeStyleSetValueCommandArchive* New() const final {
    return CreateMaybeMessage<ShapeStyleSetValueCommandArchive>(nullptr);
  }

  ShapeStyleSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeStyleSetValueCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeStyleSetValueCommandArchive& from);
  void MergeFrom(const ShapeStyleSetValueCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeStyleSetValueCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapeStyleSetValueCommandArchive";
  }
  protected:
  explicit ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kChangeFieldNumber = 4,
  };
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::BaseStyleSetValueCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::BaseStyleSetValueCommandArchive* release_super();
  ::TSD::BaseStyleSetValueCommandArchive* mutable_super();
  void set_allocated_super(::TSD::BaseStyleSetValueCommandArchive* super);
  private:
  const ::TSD::BaseStyleSetValueCommandArchive& _internal_super() const;
  ::TSD::BaseStyleSetValueCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::BaseStyleSetValueCommandArchive* super);
  ::TSD::BaseStyleSetValueCommandArchive* unsafe_arena_release_super();

  // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive& change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* release_change();
  ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* mutable_change();
  void set_allocated_change(::TSDSOS::BaseShapeStylePropertyChangeSetArchive* change);
  private:
  const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive& _internal_change() const;
  ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* change);
  ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* unsafe_arena_release_change();

  // @@protoc_insertion_point(class_scope:TSD.ShapeStyleSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::BaseStyleSetValueCommandArchive* super_;
  ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* change_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class BaseStyleSetValueCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.BaseStyleSetValueCommandArchive) */ {
 public:
  inline BaseStyleSetValueCommandArchive() : BaseStyleSetValueCommandArchive(nullptr) {}
  ~BaseStyleSetValueCommandArchive() override;
  explicit constexpr BaseStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseStyleSetValueCommandArchive(const BaseStyleSetValueCommandArchive& from);
  BaseStyleSetValueCommandArchive(BaseStyleSetValueCommandArchive&& from) noexcept
    : BaseStyleSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline BaseStyleSetValueCommandArchive& operator=(const BaseStyleSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseStyleSetValueCommandArchive& operator=(BaseStyleSetValueCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseStyleSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseStyleSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const BaseStyleSetValueCommandArchive*>(
               &_BaseStyleSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BaseStyleSetValueCommandArchive& a, BaseStyleSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseStyleSetValueCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseStyleSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseStyleSetValueCommandArchive* New() const final {
    return CreateMaybeMessage<BaseStyleSetValueCommandArchive>(nullptr);
  }

  BaseStyleSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseStyleSetValueCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseStyleSetValueCommandArchive& from);
  void MergeFrom(const BaseStyleSetValueCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseStyleSetValueCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.BaseStyleSetValueCommandArchive";
  }
  protected:
  explicit BaseStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldStyleFieldNumber = 4,
    kIsBorderChangeFieldNumber = 5,
  };
  // required .TSD.AbstractStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::AbstractStyleCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::AbstractStyleCommandArchive* release_super();
  ::TSD::AbstractStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::AbstractStyleCommandArchive* super);
  private:
  const ::TSD::AbstractStyleCommandArchive& _internal_super() const;
  ::TSD::AbstractStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::AbstractStyleCommandArchive* super);
  ::TSD::AbstractStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_style = 4;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSP::Reference& old_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_style();
  ::TSP::Reference* mutable_old_style();
  void set_allocated_old_style(::TSP::Reference* old_style);
  private:
  const ::TSP::Reference& _internal_old_style() const;
  ::TSP::Reference* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSP::Reference* old_style);
  ::TSP::Reference* unsafe_arena_release_old_style();

  // required bool is_border_change = 5;
  bool has_is_border_change() const;
  private:
  bool _internal_has_is_border_change() const;
  public:
  void clear_is_border_change();
  bool is_border_change() const;
  void set_is_border_change(bool value);
  private:
  bool _internal_is_border_change() const;
  void _internal_set_is_border_change(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.BaseStyleSetValueCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::AbstractStyleCommandArchive* super_;
  ::TSP::Reference* old_style_;
  bool is_border_change_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MovieSetValueCommandArchive_PropertyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MovieSetValueCommandArchive.PropertyValue) */ {
 public:
  inline MovieSetValueCommandArchive_PropertyValue() : MovieSetValueCommandArchive_PropertyValue(nullptr) {}
  ~MovieSetValueCommandArchive_PropertyValue() override;
  explicit constexpr MovieSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieSetValueCommandArchive_PropertyValue(const MovieSetValueCommandArchive_PropertyValue& from);
  MovieSetValueCommandArchive_PropertyValue(MovieSetValueCommandArchive_PropertyValue&& from) noexcept
    : MovieSetValueCommandArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline MovieSetValueCommandArchive_PropertyValue& operator=(const MovieSetValueCommandArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieSetValueCommandArchive_PropertyValue& operator=(MovieSetValueCommandArchive_PropertyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieSetValueCommandArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieSetValueCommandArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const MovieSetValueCommandArchive_PropertyValue*>(
               &_MovieSetValueCommandArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MovieSetValueCommandArchive_PropertyValue& a, MovieSetValueCommandArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieSetValueCommandArchive_PropertyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieSetValueCommandArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovieSetValueCommandArchive_PropertyValue* New() const final {
    return CreateMaybeMessage<MovieSetValueCommandArchive_PropertyValue>(nullptr);
  }

  MovieSetValueCommandArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovieSetValueCommandArchive_PropertyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovieSetValueCommandArchive_PropertyValue& from);
  void MergeFrom(const MovieSetValueCommandArchive_PropertyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieSetValueCommandArchive_PropertyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MovieSetValueCommandArchive.PropertyValue";
  }
  protected:
  explicit MovieSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosterimagedataFieldNumber = 4,
    kMediaFieldNumber = 8,
    kStarttimeFieldNumber = 1,
    kEndtimeFieldNumber = 2,
    kPostertimeFieldNumber = 3,
    kLoopOptionFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kAutoplayFieldNumber = 5,
    kPlaysAcrossSlidesFieldNumber = 9,
  };
  // optional .TSP.DataReference posterimagedata = 4;
  bool has_posterimagedata() const;
  private:
  bool _internal_has_posterimagedata() const;
  public:
  void clear_posterimagedata();
  const ::TSP::DataReference& posterimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_posterimagedata();
  ::TSP::DataReference* mutable_posterimagedata();
  void set_allocated_posterimagedata(::TSP::DataReference* posterimagedata);
  private:
  const ::TSP::DataReference& _internal_posterimagedata() const;
  ::TSP::DataReference* _internal_mutable_posterimagedata();
  public:
  void unsafe_arena_set_allocated_posterimagedata(
      ::TSP::DataReference* posterimagedata);
  ::TSP::DataReference* unsafe_arena_release_posterimagedata();

  // optional .TSP.DataReference media = 8;
  bool has_media() const;
  private:
  bool _internal_has_media() const;
  public:
  void clear_media();
  const ::TSP::DataReference& media() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_media();
  ::TSP::DataReference* mutable_media();
  void set_allocated_media(::TSP::DataReference* media);
  private:
  const ::TSP::DataReference& _internal_media() const;
  ::TSP::DataReference* _internal_mutable_media();
  public:
  void unsafe_arena_set_allocated_media(
      ::TSP::DataReference* media);
  ::TSP::DataReference* unsafe_arena_release_media();

  // optional double starttime = 1;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // optional double endtime = 2;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // optional double postertime = 3;
  bool has_postertime() const;
  private:
  bool _internal_has_postertime() const;
  public:
  void clear_postertime();
  double postertime() const;
  void set_postertime(double value);
  private:
  double _internal_postertime() const;
  void _internal_set_postertime(double value);
  public:

  // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
  bool has_loopoption() const;
  private:
  bool _internal_has_loopoption() const;
  public:
  void clear_loopoption();
  ::TSD::MovieSetValueCommandArchive_LoopOption loopoption() const;
  void set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value);
  private:
  ::TSD::MovieSetValueCommandArchive_LoopOption _internal_loopoption() const;
  void _internal_set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value);
  public:

  // optional float volume = 7;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // optional bool autoplay = 5;
  bool has_autoplay() const;
  private:
  bool _internal_has_autoplay() const;
  public:
  void clear_autoplay();
  bool autoplay() const;
  void set_autoplay(bool value);
  private:
  bool _internal_autoplay() const;
  void _internal_set_autoplay(bool value);
  public:

  // optional bool playsAcrossSlides = 9;
  bool has_playsacrossslides() const;
  private:
  bool _internal_has_playsacrossslides() const;
  public:
  void clear_playsacrossslides();
  bool playsacrossslides() const;
  void set_playsacrossslides(bool value);
  private:
  bool _internal_playsacrossslides() const;
  void _internal_set_playsacrossslides(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.MovieSetValueCommandArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::DataReference* posterimagedata_;
  ::TSP::DataReference* media_;
  double starttime_;
  double endtime_;
  double postertime_;
  int loopoption_;
  float volume_;
  bool autoplay_;
  bool playsacrossslides_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MovieSetValueCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MovieSetValueCommandArchive) */ {
 public:
  inline MovieSetValueCommandArchive() : MovieSetValueCommandArchive(nullptr) {}
  ~MovieSetValueCommandArchive() override;
  explicit constexpr MovieSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieSetValueCommandArchive(const MovieSetValueCommandArchive& from);
  MovieSetValueCommandArchive(MovieSetValueCommandArchive&& from) noexcept
    : MovieSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline MovieSetValueCommandArchive& operator=(const MovieSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieSetValueCommandArchive& operator=(MovieSetValueCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MovieSetValueCommandArchive*>(
               &_MovieSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MovieSetValueCommandArchive& a, MovieSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieSetValueCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovieSetValueCommandArchive* New() const final {
    return CreateMaybeMessage<MovieSetValueCommandArchive>(nullptr);
  }

  MovieSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovieSetValueCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovieSetValueCommandArchive& from);
  void MergeFrom(const MovieSetValueCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieSetValueCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MovieSetValueCommandArchive";
  }
  protected:
  explicit MovieSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MovieSetValueCommandArchive_PropertyValue PropertyValue;

  typedef MovieSetValueCommandArchive_LoopOption LoopOption;
  static constexpr LoopOption None =
    MovieSetValueCommandArchive_LoopOption_None;
  static constexpr LoopOption Repeat =
    MovieSetValueCommandArchive_LoopOption_Repeat;
  static constexpr LoopOption BackAndForth =
    MovieSetValueCommandArchive_LoopOption_BackAndForth;
  static inline bool LoopOption_IsValid(int value) {
    return MovieSetValueCommandArchive_LoopOption_IsValid(value);
  }
  static constexpr LoopOption LoopOption_MIN =
    MovieSetValueCommandArchive_LoopOption_LoopOption_MIN;
  static constexpr LoopOption LoopOption_MAX =
    MovieSetValueCommandArchive_LoopOption_LoopOption_MAX;
  static constexpr int LoopOption_ARRAYSIZE =
    MovieSetValueCommandArchive_LoopOption_LoopOption_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoopOption_descriptor() {
    return MovieSetValueCommandArchive_LoopOption_descriptor();
  }
  template<typename T>
  static inline const std::string& LoopOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoopOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoopOption_Name.");
    return MovieSetValueCommandArchive_LoopOption_Name(enum_t_value);
  }
  static inline bool LoopOption_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LoopOption* value) {
    return MovieSetValueCommandArchive_LoopOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kValueFieldNumber = 3,
    kOldValueFieldNumber = 4,
    kImportedauxiliarymediaFieldNumber = 5,
    kOldimportedauxiliarymediaFieldNumber = 6,
    kPropertyFieldNumber = 2,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSD::MovieSetValueCommandArchive_PropertyValue& value() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::MovieSetValueCommandArchive_PropertyValue* release_value();
  ::TSD::MovieSetValueCommandArchive_PropertyValue* mutable_value();
  void set_allocated_value(::TSD::MovieSetValueCommandArchive_PropertyValue* value);
  private:
  const ::TSD::MovieSetValueCommandArchive_PropertyValue& _internal_value() const;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSD::MovieSetValueCommandArchive_PropertyValue* value);
  ::TSD::MovieSetValueCommandArchive_PropertyValue* unsafe_arena_release_value();

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
  bool has_oldvalue() const;
  private:
  bool _internal_has_oldvalue() const;
  public:
  void clear_oldvalue();
  const ::TSD::MovieSetValueCommandArchive_PropertyValue& oldvalue() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::MovieSetValueCommandArchive_PropertyValue* release_oldvalue();
  ::TSD::MovieSetValueCommandArchive_PropertyValue* mutable_oldvalue();
  void set_allocated_oldvalue(::TSD::MovieSetValueCommandArchive_PropertyValue* oldvalue);
  private:
  const ::TSD::MovieSetValueCommandArchive_PropertyValue& _internal_oldvalue() const;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* _internal_mutable_oldvalue();
  public:
  void unsafe_arena_set_allocated_oldvalue(
      ::TSD::MovieSetValueCommandArchive_PropertyValue* oldvalue);
  ::TSD::MovieSetValueCommandArchive_PropertyValue* unsafe_arena_release_oldvalue();

  // optional .TSP.DataReference importedauxiliarymedia = 5;
  bool has_importedauxiliarymedia() const;
  private:
  bool _internal_has_importedauxiliarymedia() const;
  public:
  void clear_importedauxiliarymedia();
  const ::TSP::DataReference& importedauxiliarymedia() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_importedauxiliarymedia();
  ::TSP::DataReference* mutable_importedauxiliarymedia();
  void set_allocated_importedauxiliarymedia(::TSP::DataReference* importedauxiliarymedia);
  private:
  const ::TSP::DataReference& _internal_importedauxiliarymedia() const;
  ::TSP::DataReference* _internal_mutable_importedauxiliarymedia();
  public:
  void unsafe_arena_set_allocated_importedauxiliarymedia(
      ::TSP::DataReference* importedauxiliarymedia);
  ::TSP::DataReference* unsafe_arena_release_importedauxiliarymedia();

  // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
  bool has_oldimportedauxiliarymedia() const;
  private:
  bool _internal_has_oldimportedauxiliarymedia() const;
  public:
  void clear_oldimportedauxiliarymedia();
  const ::TSP::DataReference& oldimportedauxiliarymedia() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldimportedauxiliarymedia();
  ::TSP::DataReference* mutable_oldimportedauxiliarymedia();
  void set_allocated_oldimportedauxiliarymedia(::TSP::DataReference* oldimportedauxiliarymedia);
  private:
  const ::TSP::DataReference& _internal_oldimportedauxiliarymedia() const;
  ::TSP::DataReference* _internal_mutable_oldimportedauxiliarymedia();
  public:
  void unsafe_arena_set_allocated_oldimportedauxiliarymedia(
      ::TSP::DataReference* oldimportedauxiliarymedia);
  ::TSP::DataReference* unsafe_arena_release_oldimportedauxiliarymedia();

  // optional int32 property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  ::PROTOBUF_NAMESPACE_ID::int32 property() const;
  void set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property() const;
  void _internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.MovieSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* value_;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* oldvalue_;
  ::TSP::DataReference* importedauxiliarymedia_;
  ::TSP::DataReference* oldimportedauxiliarymedia_;
  ::PROTOBUF_NAMESPACE_ID::int32 property_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaStyleSetValueCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaStyleSetValueCommandArchive) */ {
 public:
  inline MediaStyleSetValueCommandArchive() : MediaStyleSetValueCommandArchive(nullptr) {}
  ~MediaStyleSetValueCommandArchive() override;
  explicit constexpr MediaStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaStyleSetValueCommandArchive(const MediaStyleSetValueCommandArchive& from);
  MediaStyleSetValueCommandArchive(MediaStyleSetValueCommandArchive&& from) noexcept
    : MediaStyleSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaStyleSetValueCommandArchive& operator=(const MediaStyleSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaStyleSetValueCommandArchive& operator=(MediaStyleSetValueCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaStyleSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaStyleSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaStyleSetValueCommandArchive*>(
               &_MediaStyleSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MediaStyleSetValueCommandArchive& a, MediaStyleSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaStyleSetValueCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaStyleSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaStyleSetValueCommandArchive* New() const final {
    return CreateMaybeMessage<MediaStyleSetValueCommandArchive>(nullptr);
  }

  MediaStyleSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaStyleSetValueCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaStyleSetValueCommandArchive& from);
  void MergeFrom(const MediaStyleSetValueCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaStyleSetValueCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaStyleSetValueCommandArchive";
  }
  protected:
  explicit MediaStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kChangeFieldNumber = 4,
  };
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::BaseStyleSetValueCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::BaseStyleSetValueCommandArchive* release_super();
  ::TSD::BaseStyleSetValueCommandArchive* mutable_super();
  void set_allocated_super(::TSD::BaseStyleSetValueCommandArchive* super);
  private:
  const ::TSD::BaseStyleSetValueCommandArchive& _internal_super() const;
  ::TSD::BaseStyleSetValueCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::BaseStyleSetValueCommandArchive* super);
  ::TSD::BaseStyleSetValueCommandArchive* unsafe_arena_release_super();

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::TSDSOS::MediaStylePropertyChangeSetArchive& change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSDSOS::MediaStylePropertyChangeSetArchive* release_change();
  ::TSDSOS::MediaStylePropertyChangeSetArchive* mutable_change();
  void set_allocated_change(::TSDSOS::MediaStylePropertyChangeSetArchive* change);
  private:
  const ::TSDSOS::MediaStylePropertyChangeSetArchive& _internal_change() const;
  ::TSDSOS::MediaStylePropertyChangeSetArchive* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::TSDSOS::MediaStylePropertyChangeSetArchive* change);
  ::TSDSOS::MediaStylePropertyChangeSetArchive* unsafe_arena_release_change();

  // @@protoc_insertion_point(class_scope:TSD.MediaStyleSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::BaseStyleSetValueCommandArchive* super_;
  ::TSDSOS::MediaStylePropertyChangeSetArchive* change_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageMediaCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageMediaCommandArchive) */ {
 public:
  inline ImageMediaCommandArchive() : ImageMediaCommandArchive(nullptr) {}
  ~ImageMediaCommandArchive() override;
  explicit constexpr ImageMediaCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMediaCommandArchive(const ImageMediaCommandArchive& from);
  ImageMediaCommandArchive(ImageMediaCommandArchive&& from) noexcept
    : ImageMediaCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageMediaCommandArchive& operator=(const ImageMediaCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMediaCommandArchive& operator=(ImageMediaCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMediaCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMediaCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageMediaCommandArchive*>(
               &_ImageMediaCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ImageMediaCommandArchive& a, ImageMediaCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMediaCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMediaCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMediaCommandArchive* New() const final {
    return CreateMaybeMessage<ImageMediaCommandArchive>(nullptr);
  }

  ImageMediaCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMediaCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMediaCommandArchive& from);
  void MergeFrom(const ImageMediaCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMediaCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageMediaCommandArchive";
  }
  protected:
  explicit ImageMediaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDatabaseNewImageDataFieldNumber = 3,
    kDatabaseOldImageDataFieldNumber = 4,
    kDatabaseOldOriginalImageDataFieldNumber = 5,
    kOldNaturalSizeFieldNumber = 6,
    kDatabaseNewOriginalImageDataFieldNumber = 7,
    kNewImageDataFieldNumber = 8,
    kOldImageDataFieldNumber = 9,
    kOldOriginalImageDataFieldNumber = 10,
    kNewOriginalImageDataFieldNumber = 11,
    kOldImageAdjustmentsFieldNumber = 12,
    kOldAdjustedImageDataFieldNumber = 13,
    kOldEnhancedImageDataFieldNumber = 14,
    kImageAdjustmentsFieldNumber = 15,
    kAdjustedImageDataFieldNumber = 16,
    kEnhancedImageDataFieldNumber = 17,
    kNewThumbnailImageDataFieldNumber = 18,
    kOldThumbnailImageDataFieldNumber = 19,
    kThumbnailAdjustedImageDataFieldNumber = 20,
    kOldThumbnailAdjustedImageDataFieldNumber = 21,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference database_newImageData = 3;
  bool has_database_newimagedata() const;
  private:
  bool _internal_has_database_newimagedata() const;
  public:
  void clear_database_newimagedata();
  const ::TSP::Reference& database_newimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_newimagedata();
  ::TSP::Reference* mutable_database_newimagedata();
  void set_allocated_database_newimagedata(::TSP::Reference* database_newimagedata);
  private:
  const ::TSP::Reference& _internal_database_newimagedata() const;
  ::TSP::Reference* _internal_mutable_database_newimagedata();
  public:
  void unsafe_arena_set_allocated_database_newimagedata(
      ::TSP::Reference* database_newimagedata);
  ::TSP::Reference* unsafe_arena_release_database_newimagedata();

  // optional .TSP.Reference database_oldImageData = 4;
  bool has_database_oldimagedata() const;
  private:
  bool _internal_has_database_oldimagedata() const;
  public:
  void clear_database_oldimagedata();
  const ::TSP::Reference& database_oldimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_oldimagedata();
  ::TSP::Reference* mutable_database_oldimagedata();
  void set_allocated_database_oldimagedata(::TSP::Reference* database_oldimagedata);
  private:
  const ::TSP::Reference& _internal_database_oldimagedata() const;
  ::TSP::Reference* _internal_mutable_database_oldimagedata();
  public:
  void unsafe_arena_set_allocated_database_oldimagedata(
      ::TSP::Reference* database_oldimagedata);
  ::TSP::Reference* unsafe_arena_release_database_oldimagedata();

  // optional .TSP.Reference database_oldOriginalImageData = 5;
  bool has_database_oldoriginalimagedata() const;
  private:
  bool _internal_has_database_oldoriginalimagedata() const;
  public:
  void clear_database_oldoriginalimagedata();
  const ::TSP::Reference& database_oldoriginalimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_oldoriginalimagedata();
  ::TSP::Reference* mutable_database_oldoriginalimagedata();
  void set_allocated_database_oldoriginalimagedata(::TSP::Reference* database_oldoriginalimagedata);
  private:
  const ::TSP::Reference& _internal_database_oldoriginalimagedata() const;
  ::TSP::Reference* _internal_mutable_database_oldoriginalimagedata();
  public:
  void unsafe_arena_set_allocated_database_oldoriginalimagedata(
      ::TSP::Reference* database_oldoriginalimagedata);
  ::TSP::Reference* unsafe_arena_release_database_oldoriginalimagedata();

  // optional .TSP.Size oldNaturalSize = 6;
  bool has_oldnaturalsize() const;
  private:
  bool _internal_has_oldnaturalsize() const;
  public:
  void clear_oldnaturalsize();
  const ::TSP::Size& oldnaturalsize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_oldnaturalsize();
  ::TSP::Size* mutable_oldnaturalsize();
  void set_allocated_oldnaturalsize(::TSP::Size* oldnaturalsize);
  private:
  const ::TSP::Size& _internal_oldnaturalsize() const;
  ::TSP::Size* _internal_mutable_oldnaturalsize();
  public:
  void unsafe_arena_set_allocated_oldnaturalsize(
      ::TSP::Size* oldnaturalsize);
  ::TSP::Size* unsafe_arena_release_oldnaturalsize();

  // optional .TSP.Reference database_newOriginalImageData = 7;
  bool has_database_neworiginalimagedata() const;
  private:
  bool _internal_has_database_neworiginalimagedata() const;
  public:
  void clear_database_neworiginalimagedata();
  const ::TSP::Reference& database_neworiginalimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_database_neworiginalimagedata();
  ::TSP::Reference* mutable_database_neworiginalimagedata();
  void set_allocated_database_neworiginalimagedata(::TSP::Reference* database_neworiginalimagedata);
  private:
  const ::TSP::Reference& _internal_database_neworiginalimagedata() const;
  ::TSP::Reference* _internal_mutable_database_neworiginalimagedata();
  public:
  void unsafe_arena_set_allocated_database_neworiginalimagedata(
      ::TSP::Reference* database_neworiginalimagedata);
  ::TSP::Reference* unsafe_arena_release_database_neworiginalimagedata();

  // optional .TSP.DataReference newImageData = 8;
  bool has_newimagedata() const;
  private:
  bool _internal_has_newimagedata() const;
  public:
  void clear_newimagedata();
  const ::TSP::DataReference& newimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_newimagedata();
  ::TSP::DataReference* mutable_newimagedata();
  void set_allocated_newimagedata(::TSP::DataReference* newimagedata);
  private:
  const ::TSP::DataReference& _internal_newimagedata() const;
  ::TSP::DataReference* _internal_mutable_newimagedata();
  public:
  void unsafe_arena_set_allocated_newimagedata(
      ::TSP::DataReference* newimagedata);
  ::TSP::DataReference* unsafe_arena_release_newimagedata();

  // optional .TSP.DataReference oldImageData = 9;
  bool has_oldimagedata() const;
  private:
  bool _internal_has_oldimagedata() const;
  public:
  void clear_oldimagedata();
  const ::TSP::DataReference& oldimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldimagedata();
  ::TSP::DataReference* mutable_oldimagedata();
  void set_allocated_oldimagedata(::TSP::DataReference* oldimagedata);
  private:
  const ::TSP::DataReference& _internal_oldimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldimagedata();
  public:
  void unsafe_arena_set_allocated_oldimagedata(
      ::TSP::DataReference* oldimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldimagedata();

  // optional .TSP.DataReference oldOriginalImageData = 10;
  bool has_oldoriginalimagedata() const;
  private:
  bool _internal_has_oldoriginalimagedata() const;
  public:
  void clear_oldoriginalimagedata();
  const ::TSP::DataReference& oldoriginalimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldoriginalimagedata();
  ::TSP::DataReference* mutable_oldoriginalimagedata();
  void set_allocated_oldoriginalimagedata(::TSP::DataReference* oldoriginalimagedata);
  private:
  const ::TSP::DataReference& _internal_oldoriginalimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldoriginalimagedata();
  public:
  void unsafe_arena_set_allocated_oldoriginalimagedata(
      ::TSP::DataReference* oldoriginalimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldoriginalimagedata();

  // optional .TSP.DataReference newOriginalImageData = 11;
  bool has_neworiginalimagedata() const;
  private:
  bool _internal_has_neworiginalimagedata() const;
  public:
  void clear_neworiginalimagedata();
  const ::TSP::DataReference& neworiginalimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_neworiginalimagedata();
  ::TSP::DataReference* mutable_neworiginalimagedata();
  void set_allocated_neworiginalimagedata(::TSP::DataReference* neworiginalimagedata);
  private:
  const ::TSP::DataReference& _internal_neworiginalimagedata() const;
  ::TSP::DataReference* _internal_mutable_neworiginalimagedata();
  public:
  void unsafe_arena_set_allocated_neworiginalimagedata(
      ::TSP::DataReference* neworiginalimagedata);
  ::TSP::DataReference* unsafe_arena_release_neworiginalimagedata();

  // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
  bool has_oldimageadjustments() const;
  private:
  bool _internal_has_oldimageadjustments() const;
  public:
  void clear_oldimageadjustments();
  const ::TSD::ImageAdjustmentsArchive& oldimageadjustments() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageAdjustmentsArchive* release_oldimageadjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_oldimageadjustments();
  void set_allocated_oldimageadjustments(::TSD::ImageAdjustmentsArchive* oldimageadjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_oldimageadjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_oldimageadjustments();
  public:
  void unsafe_arena_set_allocated_oldimageadjustments(
      ::TSD::ImageAdjustmentsArchive* oldimageadjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_oldimageadjustments();

  // optional .TSP.DataReference oldAdjustedImageData = 13;
  bool has_oldadjustedimagedata() const;
  private:
  bool _internal_has_oldadjustedimagedata() const;
  public:
  void clear_oldadjustedimagedata();
  const ::TSP::DataReference& oldadjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldadjustedimagedata();
  ::TSP::DataReference* mutable_oldadjustedimagedata();
  void set_allocated_oldadjustedimagedata(::TSP::DataReference* oldadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_oldadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_oldadjustedimagedata(
      ::TSP::DataReference* oldadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldadjustedimagedata();

  // optional .TSP.DataReference oldEnhancedImageData = 14;
  bool has_oldenhancedimagedata() const;
  private:
  bool _internal_has_oldenhancedimagedata() const;
  public:
  void clear_oldenhancedimagedata();
  const ::TSP::DataReference& oldenhancedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldenhancedimagedata();
  ::TSP::DataReference* mutable_oldenhancedimagedata();
  void set_allocated_oldenhancedimagedata(::TSP::DataReference* oldenhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_oldenhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldenhancedimagedata();
  public:
  void unsafe_arena_set_allocated_oldenhancedimagedata(
      ::TSP::DataReference* oldenhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldenhancedimagedata();

  // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
  bool has_imageadjustments() const;
  private:
  bool _internal_has_imageadjustments() const;
  public:
  void clear_imageadjustments();
  const ::TSD::ImageAdjustmentsArchive& imageadjustments() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageAdjustmentsArchive* release_imageadjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_imageadjustments();
  void set_allocated_imageadjustments(::TSD::ImageAdjustmentsArchive* imageadjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_imageadjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_imageadjustments();
  public:
  void unsafe_arena_set_allocated_imageadjustments(
      ::TSD::ImageAdjustmentsArchive* imageadjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_imageadjustments();

  // optional .TSP.DataReference adjustedImageData = 16;
  bool has_adjustedimagedata() const;
  private:
  bool _internal_has_adjustedimagedata() const;
  public:
  void clear_adjustedimagedata();
  const ::TSP::DataReference& adjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_adjustedimagedata();
  ::TSP::DataReference* mutable_adjustedimagedata();
  void set_allocated_adjustedimagedata(::TSP::DataReference* adjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_adjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_adjustedimagedata();
  public:
  void unsafe_arena_set_allocated_adjustedimagedata(
      ::TSP::DataReference* adjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_adjustedimagedata();

  // optional .TSP.DataReference enhancedImageData = 17;
  bool has_enhancedimagedata() const;
  private:
  bool _internal_has_enhancedimagedata() const;
  public:
  void clear_enhancedimagedata();
  const ::TSP::DataReference& enhancedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_enhancedimagedata();
  ::TSP::DataReference* mutable_enhancedimagedata();
  void set_allocated_enhancedimagedata(::TSP::DataReference* enhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_enhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_enhancedimagedata();
  public:
  void unsafe_arena_set_allocated_enhancedimagedata(
      ::TSP::DataReference* enhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_enhancedimagedata();

  // optional .TSP.DataReference newThumbnailImageData = 18;
  bool has_newthumbnailimagedata() const;
  private:
  bool _internal_has_newthumbnailimagedata() const;
  public:
  void clear_newthumbnailimagedata();
  const ::TSP::DataReference& newthumbnailimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_newthumbnailimagedata();
  ::TSP::DataReference* mutable_newthumbnailimagedata();
  void set_allocated_newthumbnailimagedata(::TSP::DataReference* newthumbnailimagedata);
  private:
  const ::TSP::DataReference& _internal_newthumbnailimagedata() const;
  ::TSP::DataReference* _internal_mutable_newthumbnailimagedata();
  public:
  void unsafe_arena_set_allocated_newthumbnailimagedata(
      ::TSP::DataReference* newthumbnailimagedata);
  ::TSP::DataReference* unsafe_arena_release_newthumbnailimagedata();

  // optional .TSP.DataReference oldThumbnailImageData = 19;
  bool has_oldthumbnailimagedata() const;
  private:
  bool _internal_has_oldthumbnailimagedata() const;
  public:
  void clear_oldthumbnailimagedata();
  const ::TSP::DataReference& oldthumbnailimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldthumbnailimagedata();
  ::TSP::DataReference* mutable_oldthumbnailimagedata();
  void set_allocated_oldthumbnailimagedata(::TSP::DataReference* oldthumbnailimagedata);
  private:
  const ::TSP::DataReference& _internal_oldthumbnailimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldthumbnailimagedata();
  public:
  void unsafe_arena_set_allocated_oldthumbnailimagedata(
      ::TSP::DataReference* oldthumbnailimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldthumbnailimagedata();

  // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
  bool has_thumbnailadjustedimagedata() const;
  private:
  bool _internal_has_thumbnailadjustedimagedata() const;
  public:
  void clear_thumbnailadjustedimagedata();
  const ::TSP::DataReference& thumbnailadjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_thumbnailadjustedimagedata();
  ::TSP::DataReference* mutable_thumbnailadjustedimagedata();
  void set_allocated_thumbnailadjustedimagedata(::TSP::DataReference* thumbnailadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_thumbnailadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_thumbnailadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_thumbnailadjustedimagedata(
      ::TSP::DataReference* thumbnailadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_thumbnailadjustedimagedata();

  // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
  bool has_oldthumbnailadjustedimagedata() const;
  private:
  bool _internal_has_oldthumbnailadjustedimagedata() const;
  public:
  void clear_oldthumbnailadjustedimagedata();
  const ::TSP::DataReference& oldthumbnailadjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_oldthumbnailadjustedimagedata();
  ::TSP::DataReference* mutable_oldthumbnailadjustedimagedata();
  void set_allocated_oldthumbnailadjustedimagedata(::TSP::DataReference* oldthumbnailadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_oldthumbnailadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_oldthumbnailadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_oldthumbnailadjustedimagedata(
      ::TSP::DataReference* oldthumbnailadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_oldthumbnailadjustedimagedata();

  // @@protoc_insertion_point(class_scope:TSD.ImageMediaCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Reference* database_newimagedata_;
  ::TSP::Reference* database_oldimagedata_;
  ::TSP::Reference* database_oldoriginalimagedata_;
  ::TSP::Size* oldnaturalsize_;
  ::TSP::Reference* database_neworiginalimagedata_;
  ::TSP::DataReference* newimagedata_;
  ::TSP::DataReference* oldimagedata_;
  ::TSP::DataReference* oldoriginalimagedata_;
  ::TSP::DataReference* neworiginalimagedata_;
  ::TSD::ImageAdjustmentsArchive* oldimageadjustments_;
  ::TSP::DataReference* oldadjustedimagedata_;
  ::TSP::DataReference* oldenhancedimagedata_;
  ::TSD::ImageAdjustmentsArchive* imageadjustments_;
  ::TSP::DataReference* adjustedimagedata_;
  ::TSP::DataReference* enhancedimagedata_;
  ::TSP::DataReference* newthumbnailimagedata_;
  ::TSP::DataReference* oldthumbnailimagedata_;
  ::TSP::DataReference* thumbnailadjustedimagedata_;
  ::TSP::DataReference* oldthumbnailadjustedimagedata_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaOriginalSizeCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaOriginalSizeCommandArchive) */ {
 public:
  inline MediaOriginalSizeCommandArchive() : MediaOriginalSizeCommandArchive(nullptr) {}
  ~MediaOriginalSizeCommandArchive() override;
  explicit constexpr MediaOriginalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaOriginalSizeCommandArchive(const MediaOriginalSizeCommandArchive& from);
  MediaOriginalSizeCommandArchive(MediaOriginalSizeCommandArchive&& from) noexcept
    : MediaOriginalSizeCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaOriginalSizeCommandArchive& operator=(const MediaOriginalSizeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaOriginalSizeCommandArchive& operator=(MediaOriginalSizeCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaOriginalSizeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaOriginalSizeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaOriginalSizeCommandArchive*>(
               &_MediaOriginalSizeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MediaOriginalSizeCommandArchive& a, MediaOriginalSizeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaOriginalSizeCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaOriginalSizeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaOriginalSizeCommandArchive* New() const final {
    return CreateMaybeMessage<MediaOriginalSizeCommandArchive>(nullptr);
  }

  MediaOriginalSizeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaOriginalSizeCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaOriginalSizeCommandArchive& from);
  void MergeFrom(const MediaOriginalSizeCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaOriginalSizeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaOriginalSizeCommandArchive";
  }
  protected:
  explicit MediaOriginalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kNewOriginalSizeFieldNumber = 2,
    kOldOriginalSizeFieldNumber = 3,
  };
  // required string propertyName = 4;
  bool has_propertyname() const;
  private:
  bool _internal_has_propertyname() const;
  public:
  void clear_propertyname();
  const std::string& propertyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_propertyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_propertyname();
  std::string* release_propertyname();
  void set_allocated_propertyname(std::string* propertyname);
  private:
  const std::string& _internal_propertyname() const;
  void _internal_set_propertyname(const std::string& value);
  std::string* _internal_mutable_propertyname();
  public:

  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Size newOriginalSize = 2;
  bool has_neworiginalsize() const;
  private:
  bool _internal_has_neworiginalsize() const;
  public:
  void clear_neworiginalsize();
  const ::TSP::Size& neworiginalsize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_neworiginalsize();
  ::TSP::Size* mutable_neworiginalsize();
  void set_allocated_neworiginalsize(::TSP::Size* neworiginalsize);
  private:
  const ::TSP::Size& _internal_neworiginalsize() const;
  ::TSP::Size* _internal_mutable_neworiginalsize();
  public:
  void unsafe_arena_set_allocated_neworiginalsize(
      ::TSP::Size* neworiginalsize);
  ::TSP::Size* unsafe_arena_release_neworiginalsize();

  // optional .TSP.Size oldOriginalSize = 3;
  bool has_oldoriginalsize() const;
  private:
  bool _internal_has_oldoriginalsize() const;
  public:
  void clear_oldoriginalsize();
  const ::TSP::Size& oldoriginalsize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_oldoriginalsize();
  ::TSP::Size* mutable_oldoriginalsize();
  void set_allocated_oldoriginalsize(::TSP::Size* oldoriginalsize);
  private:
  const ::TSP::Size& _internal_oldoriginalsize() const;
  ::TSP::Size* _internal_mutable_oldoriginalsize();
  public:
  void unsafe_arena_set_allocated_oldoriginalsize(
      ::TSP::Size* oldoriginalsize);
  ::TSP::Size* unsafe_arena_release_oldoriginalsize();

  // @@protoc_insertion_point(class_scope:TSD.MediaOriginalSizeCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propertyname_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Size* neworiginalsize_;
  ::TSP::Size* oldoriginalsize_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaInfoGeometryCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaInfoGeometryCommandArchive) */ {
 public:
  inline MediaInfoGeometryCommandArchive() : MediaInfoGeometryCommandArchive(nullptr) {}
  ~MediaInfoGeometryCommandArchive() override;
  explicit constexpr MediaInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaInfoGeometryCommandArchive(const MediaInfoGeometryCommandArchive& from);
  MediaInfoGeometryCommandArchive(MediaInfoGeometryCommandArchive&& from) noexcept
    : MediaInfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaInfoGeometryCommandArchive& operator=(const MediaInfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaInfoGeometryCommandArchive& operator=(MediaInfoGeometryCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaInfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaInfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaInfoGeometryCommandArchive*>(
               &_MediaInfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MediaInfoGeometryCommandArchive& a, MediaInfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaInfoGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaInfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaInfoGeometryCommandArchive* New() const final {
    return CreateMaybeMessage<MediaInfoGeometryCommandArchive>(nullptr);
  }

  MediaInfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaInfoGeometryCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaInfoGeometryCommandArchive& from);
  void MergeFrom(const MediaInfoGeometryCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaInfoGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaInfoGeometryCommandArchive";
  }
  protected:
  explicit MediaInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewOriginalSizeFieldNumber = 2,
    kOldOriginalSizeFieldNumber = 3,
  };
  // required .TSD.InfoGeometryCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoGeometryCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoGeometryCommandArchive* release_super();
  ::TSD::InfoGeometryCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoGeometryCommandArchive* super);
  private:
  const ::TSD::InfoGeometryCommandArchive& _internal_super() const;
  ::TSD::InfoGeometryCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoGeometryCommandArchive* super);
  ::TSD::InfoGeometryCommandArchive* unsafe_arena_release_super();

  // required .TSP.Size newOriginalSize = 2;
  bool has_neworiginalsize() const;
  private:
  bool _internal_has_neworiginalsize() const;
  public:
  void clear_neworiginalsize();
  const ::TSP::Size& neworiginalsize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_neworiginalsize();
  ::TSP::Size* mutable_neworiginalsize();
  void set_allocated_neworiginalsize(::TSP::Size* neworiginalsize);
  private:
  const ::TSP::Size& _internal_neworiginalsize() const;
  ::TSP::Size* _internal_mutable_neworiginalsize();
  public:
  void unsafe_arena_set_allocated_neworiginalsize(
      ::TSP::Size* neworiginalsize);
  ::TSP::Size* unsafe_arena_release_neworiginalsize();

  // required .TSP.Size oldOriginalSize = 3;
  bool has_oldoriginalsize() const;
  private:
  bool _internal_has_oldoriginalsize() const;
  public:
  void clear_oldoriginalsize();
  const ::TSP::Size& oldoriginalsize() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_oldoriginalsize();
  ::TSP::Size* mutable_oldoriginalsize();
  void set_allocated_oldoriginalsize(::TSP::Size* oldoriginalsize);
  private:
  const ::TSP::Size& _internal_oldoriginalsize() const;
  ::TSP::Size* _internal_mutable_oldoriginalsize();
  public:
  void unsafe_arena_set_allocated_oldoriginalsize(
      ::TSP::Size* oldoriginalsize);
  ::TSP::Size* unsafe_arena_release_oldoriginalsize();

  // @@protoc_insertion_point(class_scope:TSD.MediaInfoGeometryCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoGeometryCommandArchive* super_;
  ::TSP::Size* neworiginalsize_;
  ::TSP::Size* oldoriginalsize_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageNaturalSizeCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageNaturalSizeCommandArchive) */ {
 public:
  inline ImageNaturalSizeCommandArchive() : ImageNaturalSizeCommandArchive(nullptr) {}
  ~ImageNaturalSizeCommandArchive() override;
  explicit constexpr ImageNaturalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageNaturalSizeCommandArchive(const ImageNaturalSizeCommandArchive& from);
  ImageNaturalSizeCommandArchive(ImageNaturalSizeCommandArchive&& from) noexcept
    : ImageNaturalSizeCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageNaturalSizeCommandArchive& operator=(const ImageNaturalSizeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageNaturalSizeCommandArchive& operator=(ImageNaturalSizeCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageNaturalSizeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageNaturalSizeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageNaturalSizeCommandArchive*>(
               &_ImageNaturalSizeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ImageNaturalSizeCommandArchive& a, ImageNaturalSizeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageNaturalSizeCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageNaturalSizeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageNaturalSizeCommandArchive* New() const final {
    return CreateMaybeMessage<ImageNaturalSizeCommandArchive>(nullptr);
  }

  ImageNaturalSizeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageNaturalSizeCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageNaturalSizeCommandArchive& from);
  void MergeFrom(const ImageNaturalSizeCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageNaturalSizeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageNaturalSizeCommandArchive";
  }
  protected:
  explicit ImageNaturalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewNaturalSizeFieldNumber = 2,
    kOldNaturalSizeFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Size new_natural_size = 2;
  bool has_new_natural_size() const;
  private:
  bool _internal_has_new_natural_size() const;
  public:
  void clear_new_natural_size();
  const ::TSP::Size& new_natural_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_new_natural_size();
  ::TSP::Size* mutable_new_natural_size();
  void set_allocated_new_natural_size(::TSP::Size* new_natural_size);
  private:
  const ::TSP::Size& _internal_new_natural_size() const;
  ::TSP::Size* _internal_mutable_new_natural_size();
  public:
  void unsafe_arena_set_allocated_new_natural_size(
      ::TSP::Size* new_natural_size);
  ::TSP::Size* unsafe_arena_release_new_natural_size();

  // optional .TSP.Size old_natural_size = 3;
  bool has_old_natural_size() const;
  private:
  bool _internal_has_old_natural_size() const;
  public:
  void clear_old_natural_size();
  const ::TSP::Size& old_natural_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_old_natural_size();
  ::TSP::Size* mutable_old_natural_size();
  void set_allocated_old_natural_size(::TSP::Size* old_natural_size);
  private:
  const ::TSP::Size& _internal_old_natural_size() const;
  ::TSP::Size* _internal_mutable_old_natural_size();
  public:
  void unsafe_arena_set_allocated_old_natural_size(
      ::TSP::Size* old_natural_size);
  ::TSP::Size* unsafe_arena_release_old_natural_size();

  // @@protoc_insertion_point(class_scope:TSD.ImageNaturalSizeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Size* new_natural_size_;
  ::TSP::Size* old_natural_size_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageMaskCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageMaskCommandArchive) */ {
 public:
  inline ImageMaskCommandArchive() : ImageMaskCommandArchive(nullptr) {}
  ~ImageMaskCommandArchive() override;
  explicit constexpr ImageMaskCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMaskCommandArchive(const ImageMaskCommandArchive& from);
  ImageMaskCommandArchive(ImageMaskCommandArchive&& from) noexcept
    : ImageMaskCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageMaskCommandArchive& operator=(const ImageMaskCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMaskCommandArchive& operator=(ImageMaskCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMaskCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMaskCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageMaskCommandArchive*>(
               &_ImageMaskCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ImageMaskCommandArchive& a, ImageMaskCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMaskCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMaskCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMaskCommandArchive* New() const final {
    return CreateMaybeMessage<ImageMaskCommandArchive>(nullptr);
  }

  ImageMaskCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMaskCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMaskCommandArchive& from);
  void MergeFrom(const ImageMaskCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMaskCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageMaskCommandArchive";
  }
  protected:
  explicit ImageMaskCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewMaskInfoFieldNumber = 2,
    kOldMaskInfoFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference newMaskInfo = 2;
  bool has_newmaskinfo() const;
  private:
  bool _internal_has_newmaskinfo() const;
  public:
  void clear_newmaskinfo();
  const ::TSP::Reference& newmaskinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_newmaskinfo();
  ::TSP::Reference* mutable_newmaskinfo();
  void set_allocated_newmaskinfo(::TSP::Reference* newmaskinfo);
  private:
  const ::TSP::Reference& _internal_newmaskinfo() const;
  ::TSP::Reference* _internal_mutable_newmaskinfo();
  public:
  void unsafe_arena_set_allocated_newmaskinfo(
      ::TSP::Reference* newmaskinfo);
  ::TSP::Reference* unsafe_arena_release_newmaskinfo();

  // optional .TSP.Reference oldMaskInfo = 3;
  bool has_oldmaskinfo() const;
  private:
  bool _internal_has_oldmaskinfo() const;
  public:
  void clear_oldmaskinfo();
  const ::TSP::Reference& oldmaskinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_oldmaskinfo();
  ::TSP::Reference* mutable_oldmaskinfo();
  void set_allocated_oldmaskinfo(::TSP::Reference* oldmaskinfo);
  private:
  const ::TSP::Reference& _internal_oldmaskinfo() const;
  ::TSP::Reference* _internal_mutable_oldmaskinfo();
  public:
  void unsafe_arena_set_allocated_oldmaskinfo(
      ::TSP::Reference* oldmaskinfo);
  ::TSP::Reference* unsafe_arena_release_oldmaskinfo();

  // @@protoc_insertion_point(class_scope:TSD.ImageMaskCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Reference* newmaskinfo_;
  ::TSP::Reference* oldmaskinfo_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageAdjustmentsCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageAdjustmentsCommandArchive) */ {
 public:
  inline ImageAdjustmentsCommandArchive() : ImageAdjustmentsCommandArchive(nullptr) {}
  ~ImageAdjustmentsCommandArchive() override;
  explicit constexpr ImageAdjustmentsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageAdjustmentsCommandArchive(const ImageAdjustmentsCommandArchive& from);
  ImageAdjustmentsCommandArchive(ImageAdjustmentsCommandArchive&& from) noexcept
    : ImageAdjustmentsCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageAdjustmentsCommandArchive& operator=(const ImageAdjustmentsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageAdjustmentsCommandArchive& operator=(ImageAdjustmentsCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageAdjustmentsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageAdjustmentsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageAdjustmentsCommandArchive*>(
               &_ImageAdjustmentsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ImageAdjustmentsCommandArchive& a, ImageAdjustmentsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageAdjustmentsCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageAdjustmentsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageAdjustmentsCommandArchive* New() const final {
    return CreateMaybeMessage<ImageAdjustmentsCommandArchive>(nullptr);
  }

  ImageAdjustmentsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageAdjustmentsCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageAdjustmentsCommandArchive& from);
  void MergeFrom(const ImageAdjustmentsCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageAdjustmentsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageAdjustmentsCommandArchive";
  }
  protected:
  explicit ImageAdjustmentsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldImageAdjustmentsFieldNumber = 2,
    kNewImageAdjustmentsFieldNumber = 3,
    kAdjustedImageDataFieldNumber = 4,
    kReplacedAdjustedImageDataFieldNumber = 5,
    kEnhancedImageDataFieldNumber = 6,
    kReplacedEnhancedImageDataFieldNumber = 7,
    kThumbnailAdjustedImageDataFieldNumber = 8,
    kReplacedThumbnailAdjustedImageDataFieldNumber = 9,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
  bool has_old_image_adjustments() const;
  private:
  bool _internal_has_old_image_adjustments() const;
  public:
  void clear_old_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& old_image_adjustments() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageAdjustmentsArchive* release_old_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_old_image_adjustments();
  void set_allocated_old_image_adjustments(::TSD::ImageAdjustmentsArchive* old_image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_old_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_old_image_adjustments();
  public:
  void unsafe_arena_set_allocated_old_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* old_image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_old_image_adjustments();

  // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
  bool has_new_image_adjustments() const;
  private:
  bool _internal_has_new_image_adjustments() const;
  public:
  void clear_new_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& new_image_adjustments() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageAdjustmentsArchive* release_new_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_new_image_adjustments();
  void set_allocated_new_image_adjustments(::TSD::ImageAdjustmentsArchive* new_image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_new_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_new_image_adjustments();
  public:
  void unsafe_arena_set_allocated_new_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* new_image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_new_image_adjustments();

  // optional .TSP.DataReference adjustedImageData = 4;
  bool has_adjustedimagedata() const;
  private:
  bool _internal_has_adjustedimagedata() const;
  public:
  void clear_adjustedimagedata();
  const ::TSP::DataReference& adjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_adjustedimagedata();
  ::TSP::DataReference* mutable_adjustedimagedata();
  void set_allocated_adjustedimagedata(::TSP::DataReference* adjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_adjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_adjustedimagedata();
  public:
  void unsafe_arena_set_allocated_adjustedimagedata(
      ::TSP::DataReference* adjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_adjustedimagedata();

  // optional .TSP.DataReference replacedAdjustedImageData = 5;
  bool has_replacedadjustedimagedata() const;
  private:
  bool _internal_has_replacedadjustedimagedata() const;
  public:
  void clear_replacedadjustedimagedata();
  const ::TSP::DataReference& replacedadjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_replacedadjustedimagedata();
  ::TSP::DataReference* mutable_replacedadjustedimagedata();
  void set_allocated_replacedadjustedimagedata(::TSP::DataReference* replacedadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_replacedadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_replacedadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_replacedadjustedimagedata(
      ::TSP::DataReference* replacedadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_replacedadjustedimagedata();

  // optional .TSP.DataReference enhancedImageData = 6;
  bool has_enhancedimagedata() const;
  private:
  bool _internal_has_enhancedimagedata() const;
  public:
  void clear_enhancedimagedata();
  const ::TSP::DataReference& enhancedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_enhancedimagedata();
  ::TSP::DataReference* mutable_enhancedimagedata();
  void set_allocated_enhancedimagedata(::TSP::DataReference* enhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_enhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_enhancedimagedata();
  public:
  void unsafe_arena_set_allocated_enhancedimagedata(
      ::TSP::DataReference* enhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_enhancedimagedata();

  // optional .TSP.DataReference replacedEnhancedImageData = 7;
  bool has_replacedenhancedimagedata() const;
  private:
  bool _internal_has_replacedenhancedimagedata() const;
  public:
  void clear_replacedenhancedimagedata();
  const ::TSP::DataReference& replacedenhancedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_replacedenhancedimagedata();
  ::TSP::DataReference* mutable_replacedenhancedimagedata();
  void set_allocated_replacedenhancedimagedata(::TSP::DataReference* replacedenhancedimagedata);
  private:
  const ::TSP::DataReference& _internal_replacedenhancedimagedata() const;
  ::TSP::DataReference* _internal_mutable_replacedenhancedimagedata();
  public:
  void unsafe_arena_set_allocated_replacedenhancedimagedata(
      ::TSP::DataReference* replacedenhancedimagedata);
  ::TSP::DataReference* unsafe_arena_release_replacedenhancedimagedata();

  // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
  bool has_thumbnailadjustedimagedata() const;
  private:
  bool _internal_has_thumbnailadjustedimagedata() const;
  public:
  void clear_thumbnailadjustedimagedata();
  const ::TSP::DataReference& thumbnailadjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_thumbnailadjustedimagedata();
  ::TSP::DataReference* mutable_thumbnailadjustedimagedata();
  void set_allocated_thumbnailadjustedimagedata(::TSP::DataReference* thumbnailadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_thumbnailadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_thumbnailadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_thumbnailadjustedimagedata(
      ::TSP::DataReference* thumbnailadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_thumbnailadjustedimagedata();

  // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
  bool has_replacedthumbnailadjustedimagedata() const;
  private:
  bool _internal_has_replacedthumbnailadjustedimagedata() const;
  public:
  void clear_replacedthumbnailadjustedimagedata();
  const ::TSP::DataReference& replacedthumbnailadjustedimagedata() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_replacedthumbnailadjustedimagedata();
  ::TSP::DataReference* mutable_replacedthumbnailadjustedimagedata();
  void set_allocated_replacedthumbnailadjustedimagedata(::TSP::DataReference* replacedthumbnailadjustedimagedata);
  private:
  const ::TSP::DataReference& _internal_replacedthumbnailadjustedimagedata() const;
  ::TSP::DataReference* _internal_mutable_replacedthumbnailadjustedimagedata();
  public:
  void unsafe_arena_set_allocated_replacedthumbnailadjustedimagedata(
      ::TSP::DataReference* replacedthumbnailadjustedimagedata);
  ::TSP::DataReference* unsafe_arena_release_replacedthumbnailadjustedimagedata();

  // @@protoc_insertion_point(class_scope:TSD.ImageAdjustmentsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::ImageAdjustmentsArchive* old_image_adjustments_;
  ::TSD::ImageAdjustmentsArchive* new_image_adjustments_;
  ::TSP::DataReference* adjustedimagedata_;
  ::TSP::DataReference* replacedadjustedimagedata_;
  ::TSP::DataReference* enhancedimagedata_;
  ::TSP::DataReference* replacedenhancedimagedata_;
  ::TSP::DataReference* thumbnailadjustedimagedata_;
  ::TSP::DataReference* replacedthumbnailadjustedimagedata_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class MediaFlagsCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.MediaFlagsCommandArchive) */ {
 public:
  inline MediaFlagsCommandArchive() : MediaFlagsCommandArchive(nullptr) {}
  ~MediaFlagsCommandArchive() override;
  explicit constexpr MediaFlagsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MediaFlagsCommandArchive(const MediaFlagsCommandArchive& from);
  MediaFlagsCommandArchive(MediaFlagsCommandArchive&& from) noexcept
    : MediaFlagsCommandArchive() {
    *this = ::std::move(from);
  }

  inline MediaFlagsCommandArchive& operator=(const MediaFlagsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaFlagsCommandArchive& operator=(MediaFlagsCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaFlagsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaFlagsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const MediaFlagsCommandArchive*>(
               &_MediaFlagsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MediaFlagsCommandArchive& a, MediaFlagsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaFlagsCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaFlagsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaFlagsCommandArchive* New() const final {
    return CreateMaybeMessage<MediaFlagsCommandArchive>(nullptr);
  }

  MediaFlagsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaFlagsCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaFlagsCommandArchive& from);
  void MergeFrom(const MediaFlagsCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaFlagsCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.MediaFlagsCommandArchive";
  }
  protected:
  explicit MediaFlagsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 4,
    kSuperFieldNumber = 1,
    kWasMediaReplacedFieldNumber = 5,
    kIsPlaceholderFieldNumber = 6,
    kOldWasMediaReplacedFieldNumber = 7,
    kOldIsPlaceholderFieldNumber = 8,
  };
  // required string property_name = 4;
  bool has_property_name() const;
  private:
  bool _internal_has_property_name() const;
  public:
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional bool was_media_replaced = 5;
  bool has_was_media_replaced() const;
  private:
  bool _internal_has_was_media_replaced() const;
  public:
  void clear_was_media_replaced();
  bool was_media_replaced() const;
  void set_was_media_replaced(bool value);
  private:
  bool _internal_was_media_replaced() const;
  void _internal_set_was_media_replaced(bool value);
  public:

  // optional bool is_placeholder = 6;
  bool has_is_placeholder() const;
  private:
  bool _internal_has_is_placeholder() const;
  public:
  void clear_is_placeholder();
  bool is_placeholder() const;
  void set_is_placeholder(bool value);
  private:
  bool _internal_is_placeholder() const;
  void _internal_set_is_placeholder(bool value);
  public:

  // optional bool old_was_media_replaced = 7;
  bool has_old_was_media_replaced() const;
  private:
  bool _internal_has_old_was_media_replaced() const;
  public:
  void clear_old_was_media_replaced();
  bool old_was_media_replaced() const;
  void set_old_was_media_replaced(bool value);
  private:
  bool _internal_old_was_media_replaced() const;
  void _internal_set_old_was_media_replaced(bool value);
  public:

  // optional bool old_is_placeholder = 8;
  bool has_old_is_placeholder() const;
  private:
  bool _internal_has_old_is_placeholder() const;
  public:
  void clear_old_is_placeholder();
  bool old_is_placeholder() const;
  void set_old_is_placeholder(bool value);
  private:
  bool _internal_old_is_placeholder() const;
  void _internal_set_old_is_placeholder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.MediaFlagsCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::TSD::InfoCommandArchive* super_;
  bool was_media_replaced_;
  bool is_placeholder_;
  bool old_was_media_replaced_;
  bool old_is_placeholder_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablesCommandGroupArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawablesCommandGroupArchive) */ {
 public:
  inline DrawablesCommandGroupArchive() : DrawablesCommandGroupArchive(nullptr) {}
  ~DrawablesCommandGroupArchive() override;
  explicit constexpr DrawablesCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablesCommandGroupArchive(const DrawablesCommandGroupArchive& from);
  DrawablesCommandGroupArchive(DrawablesCommandGroupArchive&& from) noexcept
    : DrawablesCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline DrawablesCommandGroupArchive& operator=(const DrawablesCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablesCommandGroupArchive& operator=(DrawablesCommandGroupArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablesCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablesCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablesCommandGroupArchive*>(
               &_DrawablesCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DrawablesCommandGroupArchive& a, DrawablesCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablesCommandGroupArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablesCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawablesCommandGroupArchive* New() const final {
    return CreateMaybeMessage<DrawablesCommandGroupArchive>(nullptr);
  }

  DrawablesCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawablesCommandGroupArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawablesCommandGroupArchive& from);
  void MergeFrom(const DrawablesCommandGroupArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablesCommandGroupArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawablesCommandGroupArchive";
  }
  protected:
  explicit DrawablesCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupType;
  static constexpr DrawablesCommandGroupType Constructive =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_Constructive;
  static constexpr DrawablesCommandGroupType Destructive =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_Destructive;
  static constexpr DrawablesCommandGroupType InPlace =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_InPlace;
  static inline bool DrawablesCommandGroupType_IsValid(int value) {
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(value);
  }
  static constexpr DrawablesCommandGroupType DrawablesCommandGroupType_MIN =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MIN;
  static constexpr DrawablesCommandGroupType DrawablesCommandGroupType_MAX =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_MAX;
  static constexpr int DrawablesCommandGroupType_ARRAYSIZE =
    DrawablesCommandGroupArchive_DrawablesCommandGroupType_DrawablesCommandGroupType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrawablesCommandGroupType_descriptor() {
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor();
  }
  template<typename T>
  static inline const std::string& DrawablesCommandGroupType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrawablesCommandGroupType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrawablesCommandGroupType_Name.");
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_Name(enum_t_value);
  }
  static inline bool DrawablesCommandGroupType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrawablesCommandGroupType* value) {
    return DrawablesCommandGroupArchive_DrawablesCommandGroupType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kObsoleteSelectionFieldNumber = 2,
    kModelforselectionFieldNumber = 3,
    kArchivedselectionFieldNumber = 6,
    kForDragFieldNumber = 5,
    kTypeFieldNumber = 4,
  };
  // required .TSK.CommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandGroupArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandGroupArchive* release_super();
  ::TSK::CommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::CommandGroupArchive* super);
  private:
  const ::TSK::CommandGroupArchive& _internal_super() const;
  ::TSK::CommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandGroupArchive* super);
  ::TSK::CommandGroupArchive* unsafe_arena_release_super();

  // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
  bool has_obsolete_selection() const;
  private:
  bool _internal_has_obsolete_selection() const;
  public:
  void clear_obsolete_selection();
  const ::TSD::CanvasSelectionArchive& obsolete_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::CanvasSelectionArchive* release_obsolete_selection();
  ::TSD::CanvasSelectionArchive* mutable_obsolete_selection();
  void set_allocated_obsolete_selection(::TSD::CanvasSelectionArchive* obsolete_selection);
  private:
  const ::TSD::CanvasSelectionArchive& _internal_obsolete_selection() const;
  ::TSD::CanvasSelectionArchive* _internal_mutable_obsolete_selection();
  public:
  void unsafe_arena_set_allocated_obsolete_selection(
      ::TSD::CanvasSelectionArchive* obsolete_selection);
  ::TSD::CanvasSelectionArchive* unsafe_arena_release_obsolete_selection();

  // optional .TSP.Reference modelforselection = 3;
  bool has_modelforselection() const;
  private:
  bool _internal_has_modelforselection() const;
  public:
  void clear_modelforselection();
  const ::TSP::Reference& modelforselection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_modelforselection();
  ::TSP::Reference* mutable_modelforselection();
  void set_allocated_modelforselection(::TSP::Reference* modelforselection);
  private:
  const ::TSP::Reference& _internal_modelforselection() const;
  ::TSP::Reference* _internal_mutable_modelforselection();
  public:
  void unsafe_arena_set_allocated_modelforselection(
      ::TSP::Reference* modelforselection);
  ::TSP::Reference* unsafe_arena_release_modelforselection();

  // optional .TSP.Reference archivedselection = 6;
  bool has_archivedselection() const;
  private:
  bool _internal_has_archivedselection() const;
  public:
  void clear_archivedselection();
  const ::TSP::Reference& archivedselection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_archivedselection();
  ::TSP::Reference* mutable_archivedselection();
  void set_allocated_archivedselection(::TSP::Reference* archivedselection);
  private:
  const ::TSP::Reference& _internal_archivedselection() const;
  ::TSP::Reference* _internal_mutable_archivedselection();
  public:
  void unsafe_arena_set_allocated_archivedselection(
      ::TSP::Reference* archivedselection);
  ::TSP::Reference* unsafe_arena_release_archivedselection();

  // optional bool forDrag = 5;
  bool has_fordrag() const;
  private:
  bool _internal_has_fordrag() const;
  public:
  void clear_fordrag();
  bool fordrag() const;
  void set_fordrag(bool value);
  private:
  bool _internal_fordrag() const;
  void _internal_set_fordrag(bool value);
  public:

  // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType type() const;
  void set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value);
  private:
  ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType _internal_type() const;
  void _internal_set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawablesCommandGroupArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandGroupArchive* super_;
  ::TSD::CanvasSelectionArchive* obsolete_selection_;
  ::TSP::Reference* modelforselection_;
  ::TSP::Reference* archivedselection_;
  bool fordrag_;
  int type_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ExteriorTextWrapCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ExteriorTextWrapCommandArchive) */ {
 public:
  inline ExteriorTextWrapCommandArchive() : ExteriorTextWrapCommandArchive(nullptr) {}
  ~ExteriorTextWrapCommandArchive() override;
  explicit constexpr ExteriorTextWrapCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExteriorTextWrapCommandArchive(const ExteriorTextWrapCommandArchive& from);
  ExteriorTextWrapCommandArchive(ExteriorTextWrapCommandArchive&& from) noexcept
    : ExteriorTextWrapCommandArchive() {
    *this = ::std::move(from);
  }

  inline ExteriorTextWrapCommandArchive& operator=(const ExteriorTextWrapCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExteriorTextWrapCommandArchive& operator=(ExteriorTextWrapCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExteriorTextWrapCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExteriorTextWrapCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ExteriorTextWrapCommandArchive*>(
               &_ExteriorTextWrapCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ExteriorTextWrapCommandArchive& a, ExteriorTextWrapCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExteriorTextWrapCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExteriorTextWrapCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExteriorTextWrapCommandArchive* New() const final {
    return CreateMaybeMessage<ExteriorTextWrapCommandArchive>(nullptr);
  }

  ExteriorTextWrapCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExteriorTextWrapCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExteriorTextWrapCommandArchive& from);
  void MergeFrom(const ExteriorTextWrapCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExteriorTextWrapCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ExteriorTextWrapCommandArchive";
  }
  protected:
  explicit ExteriorTextWrapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldExteriorTextWrapFieldNumber = 3,
    kTypeFieldNumber = 4,
    kDirectionFieldNumber = 5,
    kFitTypeFieldNumber = 6,
    kMarginFieldNumber = 7,
    kAlphaThresholdFieldNumber = 8,
    kIsHtmlWrapFieldNumber = 9,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
  bool has_old_exterior_text_wrap() const;
  private:
  bool _internal_has_old_exterior_text_wrap() const;
  public:
  void clear_old_exterior_text_wrap();
  const ::TSD::ExteriorTextWrapArchive& old_exterior_text_wrap() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ExteriorTextWrapArchive* release_old_exterior_text_wrap();
  ::TSD::ExteriorTextWrapArchive* mutable_old_exterior_text_wrap();
  void set_allocated_old_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* old_exterior_text_wrap);
  private:
  const ::TSD::ExteriorTextWrapArchive& _internal_old_exterior_text_wrap() const;
  ::TSD::ExteriorTextWrapArchive* _internal_mutable_old_exterior_text_wrap();
  public:
  void unsafe_arena_set_allocated_old_exterior_text_wrap(
      ::TSD::ExteriorTextWrapArchive* old_exterior_text_wrap);
  ::TSD::ExteriorTextWrapArchive* unsafe_arena_release_old_exterior_text_wrap();

  // optional uint32 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 direction = 5;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fit_type = 6;
  bool has_fit_type() const;
  private:
  bool _internal_has_fit_type() const;
  public:
  void clear_fit_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 fit_type() const;
  void set_fit_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fit_type() const;
  void _internal_set_fit_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float margin = 7;
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // optional float alpha_threshold = 8;
  bool has_alpha_threshold() const;
  private:
  bool _internal_has_alpha_threshold() const;
  public:
  void clear_alpha_threshold();
  float alpha_threshold() const;
  void set_alpha_threshold(float value);
  private:
  float _internal_alpha_threshold() const;
  void _internal_set_alpha_threshold(float value);
  public:

  // optional bool is_html_wrap = 9;
  bool has_is_html_wrap() const;
  private:
  bool _internal_has_is_html_wrap() const;
  public:
  void clear_is_html_wrap();
  bool is_html_wrap() const;
  void set_is_html_wrap(bool value);
  private:
  bool _internal_is_html_wrap() const;
  void _internal_set_is_html_wrap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.ExteriorTextWrapCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::ExteriorTextWrapArchive* old_exterior_text_wrap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fit_type_;
  float margin_;
  float alpha_threshold_;
  bool is_html_wrap_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableHyperlinkCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableHyperlinkCommandArchive) */ {
 public:
  inline DrawableHyperlinkCommandArchive() : DrawableHyperlinkCommandArchive(nullptr) {}
  ~DrawableHyperlinkCommandArchive() override;
  explicit constexpr DrawableHyperlinkCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableHyperlinkCommandArchive(const DrawableHyperlinkCommandArchive& from);
  DrawableHyperlinkCommandArchive(DrawableHyperlinkCommandArchive&& from) noexcept
    : DrawableHyperlinkCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableHyperlinkCommandArchive& operator=(const DrawableHyperlinkCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableHyperlinkCommandArchive& operator=(DrawableHyperlinkCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableHyperlinkCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableHyperlinkCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableHyperlinkCommandArchive*>(
               &_DrawableHyperlinkCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DrawableHyperlinkCommandArchive& a, DrawableHyperlinkCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableHyperlinkCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableHyperlinkCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableHyperlinkCommandArchive* New() const final {
    return CreateMaybeMessage<DrawableHyperlinkCommandArchive>(nullptr);
  }

  DrawableHyperlinkCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableHyperlinkCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableHyperlinkCommandArchive& from);
  void MergeFrom(const DrawableHyperlinkCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableHyperlinkCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableHyperlinkCommandArchive";
  }
  protected:
  explicit DrawableHyperlinkCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldhyperlinkUrlFieldNumber = 2,
    kNewhyperlinkUrlFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // optional string oldhyperlink_url = 2;
  bool has_oldhyperlink_url() const;
  private:
  bool _internal_has_oldhyperlink_url() const;
  public:
  void clear_oldhyperlink_url();
  const std::string& oldhyperlink_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldhyperlink_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldhyperlink_url();
  std::string* release_oldhyperlink_url();
  void set_allocated_oldhyperlink_url(std::string* oldhyperlink_url);
  private:
  const std::string& _internal_oldhyperlink_url() const;
  void _internal_set_oldhyperlink_url(const std::string& value);
  std::string* _internal_mutable_oldhyperlink_url();
  public:

  // optional string newhyperlink_url = 3;
  bool has_newhyperlink_url() const;
  private:
  bool _internal_has_newhyperlink_url() const;
  public:
  void clear_newhyperlink_url();
  const std::string& newhyperlink_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newhyperlink_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newhyperlink_url();
  std::string* release_newhyperlink_url();
  void set_allocated_newhyperlink_url(std::string* newhyperlink_url);
  private:
  const std::string& _internal_newhyperlink_url() const;
  void _internal_set_newhyperlink_url(const std::string& value);
  std::string* _internal_mutable_newhyperlink_url();
  public:

  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.DrawableHyperlinkCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldhyperlink_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newhyperlink_url_;
  ::TSD::InfoCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CommentInvalidatingCommandSelectionBehaviorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.CommentInvalidatingCommandSelectionBehaviorArchive) */ {
 public:
  inline CommentInvalidatingCommandSelectionBehaviorArchive() : CommentInvalidatingCommandSelectionBehaviorArchive(nullptr) {}
  ~CommentInvalidatingCommandSelectionBehaviorArchive() override;
  explicit constexpr CommentInvalidatingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommentInvalidatingCommandSelectionBehaviorArchive(const CommentInvalidatingCommandSelectionBehaviorArchive& from);
  CommentInvalidatingCommandSelectionBehaviorArchive(CommentInvalidatingCommandSelectionBehaviorArchive&& from) noexcept
    : CommentInvalidatingCommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline CommentInvalidatingCommandSelectionBehaviorArchive& operator=(const CommentInvalidatingCommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentInvalidatingCommandSelectionBehaviorArchive& operator=(CommentInvalidatingCommandSelectionBehaviorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommentInvalidatingCommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommentInvalidatingCommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const CommentInvalidatingCommandSelectionBehaviorArchive*>(
               &_CommentInvalidatingCommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommentInvalidatingCommandSelectionBehaviorArchive& a, CommentInvalidatingCommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentInvalidatingCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentInvalidatingCommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommentInvalidatingCommandSelectionBehaviorArchive* New() const final {
    return CreateMaybeMessage<CommentInvalidatingCommandSelectionBehaviorArchive>(nullptr);
  }

  CommentInvalidatingCommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommentInvalidatingCommandSelectionBehaviorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommentInvalidatingCommandSelectionBehaviorArchive& from);
  void MergeFrom(const CommentInvalidatingCommandSelectionBehaviorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentInvalidatingCommandSelectionBehaviorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.CommentInvalidatingCommandSelectionBehaviorArchive";
  }
  protected:
  explicit CommentInvalidatingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kAnnotationDisplayingCommandFieldNumber = 2,
    kBeginEditingOnUndoFieldNumber = 3,
    kBeginEditingOnRedoFieldNumber = 4,
    kShouldInvalidateOnUndoFieldNumber = 5,
    kShouldInvalidateOnRedoFieldNumber = 6,
  };
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandSelectionBehaviorArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandSelectionBehaviorArchive* release_super();
  ::TSK::CommandSelectionBehaviorArchive* mutable_super();
  void set_allocated_super(::TSK::CommandSelectionBehaviorArchive* super);
  private:
  const ::TSK::CommandSelectionBehaviorArchive& _internal_super() const;
  ::TSK::CommandSelectionBehaviorArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandSelectionBehaviorArchive* super);
  ::TSK::CommandSelectionBehaviorArchive* unsafe_arena_release_super();

  // optional .TSP.Reference annotation_displaying_command = 2;
  bool has_annotation_displaying_command() const;
  private:
  bool _internal_has_annotation_displaying_command() const;
  public:
  void clear_annotation_displaying_command();
  const ::TSP::Reference& annotation_displaying_command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_annotation_displaying_command();
  ::TSP::Reference* mutable_annotation_displaying_command();
  void set_allocated_annotation_displaying_command(::TSP::Reference* annotation_displaying_command);
  private:
  const ::TSP::Reference& _internal_annotation_displaying_command() const;
  ::TSP::Reference* _internal_mutable_annotation_displaying_command();
  public:
  void unsafe_arena_set_allocated_annotation_displaying_command(
      ::TSP::Reference* annotation_displaying_command);
  ::TSP::Reference* unsafe_arena_release_annotation_displaying_command();

  // optional bool begin_editing_on_undo = 3;
  bool has_begin_editing_on_undo() const;
  private:
  bool _internal_has_begin_editing_on_undo() const;
  public:
  void clear_begin_editing_on_undo();
  bool begin_editing_on_undo() const;
  void set_begin_editing_on_undo(bool value);
  private:
  bool _internal_begin_editing_on_undo() const;
  void _internal_set_begin_editing_on_undo(bool value);
  public:

  // optional bool begin_editing_on_redo = 4;
  bool has_begin_editing_on_redo() const;
  private:
  bool _internal_has_begin_editing_on_redo() const;
  public:
  void clear_begin_editing_on_redo();
  bool begin_editing_on_redo() const;
  void set_begin_editing_on_redo(bool value);
  private:
  bool _internal_begin_editing_on_redo() const;
  void _internal_set_begin_editing_on_redo(bool value);
  public:

  // optional bool should_invalidate_on_undo = 5;
  bool has_should_invalidate_on_undo() const;
  private:
  bool _internal_has_should_invalidate_on_undo() const;
  public:
  void clear_should_invalidate_on_undo();
  bool should_invalidate_on_undo() const;
  void set_should_invalidate_on_undo(bool value);
  private:
  bool _internal_should_invalidate_on_undo() const;
  void _internal_set_should_invalidate_on_undo(bool value);
  public:

  // optional bool should_invalidate_on_redo = 6;
  bool has_should_invalidate_on_redo() const;
  private:
  bool _internal_has_should_invalidate_on_redo() const;
  public:
  void clear_should_invalidate_on_redo();
  bool should_invalidate_on_redo() const;
  void set_should_invalidate_on_redo(bool value);
  private:
  bool _internal_should_invalidate_on_redo() const;
  void _internal_set_should_invalidate_on_redo(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandSelectionBehaviorArchive* super_;
  ::TSP::Reference* annotation_displaying_command_;
  bool begin_editing_on_undo_;
  bool begin_editing_on_redo_;
  bool should_invalidate_on_undo_;
  bool should_invalidate_on_redo_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageReplaceCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageReplaceCommandArchive) */ {
 public:
  inline ImageReplaceCommandArchive() : ImageReplaceCommandArchive(nullptr) {}
  ~ImageReplaceCommandArchive() override;
  explicit constexpr ImageReplaceCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageReplaceCommandArchive(const ImageReplaceCommandArchive& from);
  ImageReplaceCommandArchive(ImageReplaceCommandArchive&& from) noexcept
    : ImageReplaceCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageReplaceCommandArchive& operator=(const ImageReplaceCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageReplaceCommandArchive& operator=(ImageReplaceCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageReplaceCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageReplaceCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageReplaceCommandArchive*>(
               &_ImageReplaceCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ImageReplaceCommandArchive& a, ImageReplaceCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageReplaceCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageReplaceCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageReplaceCommandArchive* New() const final {
    return CreateMaybeMessage<ImageReplaceCommandArchive>(nullptr);
  }

  ImageReplaceCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageReplaceCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageReplaceCommandArchive& from);
  void MergeFrom(const ImageReplaceCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageReplaceCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageReplaceCommandArchive";
  }
  protected:
  explicit ImageReplaceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewImageDataFieldNumber = 2,
    kNewOriginalImageDataFieldNumber = 3,
    kOldImageDataFieldNumber = 4,
    kOldOriginalImageDataFieldNumber = 5,
    kInstantAlphaPathFieldNumber = 6,
    kOldInstantAlphaPathFieldNumber = 7,
    kNaturalSizeForIAPathFieldNumber = 8,
    kOldNaturalSizeForIAPathFieldNumber = 9,
    kTargetImageGeometryFieldNumber = 10,
    kOldTargetImageGeometryFieldNumber = 12,
    kTargetMaskGeometryFieldNumber = 13,
    kOldTargetMaskGeometryFieldNumber = 14,
    kImageAdjustmentsFieldNumber = 15,
    kAdjustedImageDataFieldNumber = 16,
    kEnhancedImageDataFieldNumber = 17,
    kOldImageAdjustmentsFieldNumber = 18,
    kOldAdjustedImageDataFieldNumber = 19,
    kOldEnhancedImageDataFieldNumber = 20,
    kThumbnailImageDataFieldNumber = 21,
    kOldThumbnailImageDataFieldNumber = 22,
    kThumbnailAdjustedImageDataFieldNumber = 23,
    kOldThumbnailAdjustedImageDataFieldNumber = 24,
    kNaturalSizeFieldNumber = 25,
    kOldNaturalSizeFieldNumber = 26,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.DataReference new_image_data = 2;
  bool has_new_image_data() const;
  private:
  bool _internal_has_new_image_data() const;
  public:
  void clear_new_image_data();
  const ::TSP::DataReference& new_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_new_image_data();
  ::TSP::DataReference* mutable_new_image_data();
  void set_allocated_new_image_data(::TSP::DataReference* new_image_data);
  private:
  const ::TSP::DataReference& _internal_new_image_data() const;
  ::TSP::DataReference* _internal_mutable_new_image_data();
  public:
  void unsafe_arena_set_allocated_new_image_data(
      ::TSP::DataReference* new_image_data);
  ::TSP::DataReference* unsafe_arena_release_new_image_data();

  // optional .TSP.DataReference new_original_image_data = 3;
  bool has_new_original_image_data() const;
  private:
  bool _internal_has_new_original_image_data() const;
  public:
  void clear_new_original_image_data();
  const ::TSP::DataReference& new_original_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_new_original_image_data();
  ::TSP::DataReference* mutable_new_original_image_data();
  void set_allocated_new_original_image_data(::TSP::DataReference* new_original_image_data);
  private:
  const ::TSP::DataReference& _internal_new_original_image_data() const;
  ::TSP::DataReference* _internal_mutable_new_original_image_data();
  public:
  void unsafe_arena_set_allocated_new_original_image_data(
      ::TSP::DataReference* new_original_image_data);
  ::TSP::DataReference* unsafe_arena_release_new_original_image_data();

  // optional .TSP.DataReference old_image_data = 4;
  bool has_old_image_data() const;
  private:
  bool _internal_has_old_image_data() const;
  public:
  void clear_old_image_data();
  const ::TSP::DataReference& old_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_old_image_data();
  ::TSP::DataReference* mutable_old_image_data();
  void set_allocated_old_image_data(::TSP::DataReference* old_image_data);
  private:
  const ::TSP::DataReference& _internal_old_image_data() const;
  ::TSP::DataReference* _internal_mutable_old_image_data();
  public:
  void unsafe_arena_set_allocated_old_image_data(
      ::TSP::DataReference* old_image_data);
  ::TSP::DataReference* unsafe_arena_release_old_image_data();

  // optional .TSP.DataReference old_original_image_data = 5;
  bool has_old_original_image_data() const;
  private:
  bool _internal_has_old_original_image_data() const;
  public:
  void clear_old_original_image_data();
  const ::TSP::DataReference& old_original_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_old_original_image_data();
  ::TSP::DataReference* mutable_old_original_image_data();
  void set_allocated_old_original_image_data(::TSP::DataReference* old_original_image_data);
  private:
  const ::TSP::DataReference& _internal_old_original_image_data() const;
  ::TSP::DataReference* _internal_mutable_old_original_image_data();
  public:
  void unsafe_arena_set_allocated_old_original_image_data(
      ::TSP::DataReference* old_original_image_data);
  ::TSP::DataReference* unsafe_arena_release_old_original_image_data();

  // optional .TSP.Path instant_alpha_path = 6;
  bool has_instant_alpha_path() const;
  private:
  bool _internal_has_instant_alpha_path() const;
  public:
  void clear_instant_alpha_path();
  const ::TSP::Path& instant_alpha_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Path* release_instant_alpha_path();
  ::TSP::Path* mutable_instant_alpha_path();
  void set_allocated_instant_alpha_path(::TSP::Path* instant_alpha_path);
  private:
  const ::TSP::Path& _internal_instant_alpha_path() const;
  ::TSP::Path* _internal_mutable_instant_alpha_path();
  public:
  void unsafe_arena_set_allocated_instant_alpha_path(
      ::TSP::Path* instant_alpha_path);
  ::TSP::Path* unsafe_arena_release_instant_alpha_path();

  // optional .TSP.Path old_instant_alpha_path = 7;
  bool has_old_instant_alpha_path() const;
  private:
  bool _internal_has_old_instant_alpha_path() const;
  public:
  void clear_old_instant_alpha_path();
  const ::TSP::Path& old_instant_alpha_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Path* release_old_instant_alpha_path();
  ::TSP::Path* mutable_old_instant_alpha_path();
  void set_allocated_old_instant_alpha_path(::TSP::Path* old_instant_alpha_path);
  private:
  const ::TSP::Path& _internal_old_instant_alpha_path() const;
  ::TSP::Path* _internal_mutable_old_instant_alpha_path();
  public:
  void unsafe_arena_set_allocated_old_instant_alpha_path(
      ::TSP::Path* old_instant_alpha_path);
  ::TSP::Path* unsafe_arena_release_old_instant_alpha_path();

  // optional .TSP.Size natural_size_for_IAPath = 8;
  bool has_natural_size_for_iapath() const;
  private:
  bool _internal_has_natural_size_for_iapath() const;
  public:
  void clear_natural_size_for_iapath();
  const ::TSP::Size& natural_size_for_iapath() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_natural_size_for_iapath();
  ::TSP::Size* mutable_natural_size_for_iapath();
  void set_allocated_natural_size_for_iapath(::TSP::Size* natural_size_for_iapath);
  private:
  const ::TSP::Size& _internal_natural_size_for_iapath() const;
  ::TSP::Size* _internal_mutable_natural_size_for_iapath();
  public:
  void unsafe_arena_set_allocated_natural_size_for_iapath(
      ::TSP::Size* natural_size_for_iapath);
  ::TSP::Size* unsafe_arena_release_natural_size_for_iapath();

  // optional .TSP.Size old_natural_size_for_IAPath = 9;
  bool has_old_natural_size_for_iapath() const;
  private:
  bool _internal_has_old_natural_size_for_iapath() const;
  public:
  void clear_old_natural_size_for_iapath();
  const ::TSP::Size& old_natural_size_for_iapath() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_old_natural_size_for_iapath();
  ::TSP::Size* mutable_old_natural_size_for_iapath();
  void set_allocated_old_natural_size_for_iapath(::TSP::Size* old_natural_size_for_iapath);
  private:
  const ::TSP::Size& _internal_old_natural_size_for_iapath() const;
  ::TSP::Size* _internal_mutable_old_natural_size_for_iapath();
  public:
  void unsafe_arena_set_allocated_old_natural_size_for_iapath(
      ::TSP::Size* old_natural_size_for_iapath);
  ::TSP::Size* unsafe_arena_release_old_natural_size_for_iapath();

  // optional .TSD.GeometryArchive target_image_geometry = 10;
  bool has_target_image_geometry() const;
  private:
  bool _internal_has_target_image_geometry() const;
  public:
  void clear_target_image_geometry();
  const ::TSD::GeometryArchive& target_image_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_target_image_geometry();
  ::TSD::GeometryArchive* mutable_target_image_geometry();
  void set_allocated_target_image_geometry(::TSD::GeometryArchive* target_image_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_target_image_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_target_image_geometry();
  public:
  void unsafe_arena_set_allocated_target_image_geometry(
      ::TSD::GeometryArchive* target_image_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_target_image_geometry();

  // optional .TSD.GeometryArchive old_target_image_geometry = 12;
  bool has_old_target_image_geometry() const;
  private:
  bool _internal_has_old_target_image_geometry() const;
  public:
  void clear_old_target_image_geometry();
  const ::TSD::GeometryArchive& old_target_image_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_old_target_image_geometry();
  ::TSD::GeometryArchive* mutable_old_target_image_geometry();
  void set_allocated_old_target_image_geometry(::TSD::GeometryArchive* old_target_image_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_old_target_image_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_old_target_image_geometry();
  public:
  void unsafe_arena_set_allocated_old_target_image_geometry(
      ::TSD::GeometryArchive* old_target_image_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_old_target_image_geometry();

  // optional .TSD.GeometryArchive target_mask_geometry = 13;
  bool has_target_mask_geometry() const;
  private:
  bool _internal_has_target_mask_geometry() const;
  public:
  void clear_target_mask_geometry();
  const ::TSD::GeometryArchive& target_mask_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_target_mask_geometry();
  ::TSD::GeometryArchive* mutable_target_mask_geometry();
  void set_allocated_target_mask_geometry(::TSD::GeometryArchive* target_mask_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_target_mask_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_target_mask_geometry();
  public:
  void unsafe_arena_set_allocated_target_mask_geometry(
      ::TSD::GeometryArchive* target_mask_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_target_mask_geometry();

  // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
  bool has_old_target_mask_geometry() const;
  private:
  bool _internal_has_old_target_mask_geometry() const;
  public:
  void clear_old_target_mask_geometry();
  const ::TSD::GeometryArchive& old_target_mask_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_old_target_mask_geometry();
  ::TSD::GeometryArchive* mutable_old_target_mask_geometry();
  void set_allocated_old_target_mask_geometry(::TSD::GeometryArchive* old_target_mask_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_old_target_mask_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_old_target_mask_geometry();
  public:
  void unsafe_arena_set_allocated_old_target_mask_geometry(
      ::TSD::GeometryArchive* old_target_mask_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_old_target_mask_geometry();

  // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
  bool has_image_adjustments() const;
  private:
  bool _internal_has_image_adjustments() const;
  public:
  void clear_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& image_adjustments() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageAdjustmentsArchive* release_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_image_adjustments();
  void set_allocated_image_adjustments(::TSD::ImageAdjustmentsArchive* image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_image_adjustments();
  public:
  void unsafe_arena_set_allocated_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_image_adjustments();

  // optional .TSP.DataReference adjusted_image_data = 16;
  bool has_adjusted_image_data() const;
  private:
  bool _internal_has_adjusted_image_data() const;
  public:
  void clear_adjusted_image_data();
  const ::TSP::DataReference& adjusted_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_adjusted_image_data();
  ::TSP::DataReference* mutable_adjusted_image_data();
  void set_allocated_adjusted_image_data(::TSP::DataReference* adjusted_image_data);
  private:
  const ::TSP::DataReference& _internal_adjusted_image_data() const;
  ::TSP::DataReference* _internal_mutable_adjusted_image_data();
  public:
  void unsafe_arena_set_allocated_adjusted_image_data(
      ::TSP::DataReference* adjusted_image_data);
  ::TSP::DataReference* unsafe_arena_release_adjusted_image_data();

  // optional .TSP.DataReference enhanced_image_data = 17;
  bool has_enhanced_image_data() const;
  private:
  bool _internal_has_enhanced_image_data() const;
  public:
  void clear_enhanced_image_data();
  const ::TSP::DataReference& enhanced_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_enhanced_image_data();
  ::TSP::DataReference* mutable_enhanced_image_data();
  void set_allocated_enhanced_image_data(::TSP::DataReference* enhanced_image_data);
  private:
  const ::TSP::DataReference& _internal_enhanced_image_data() const;
  ::TSP::DataReference* _internal_mutable_enhanced_image_data();
  public:
  void unsafe_arena_set_allocated_enhanced_image_data(
      ::TSP::DataReference* enhanced_image_data);
  ::TSP::DataReference* unsafe_arena_release_enhanced_image_data();

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
  bool has_old_image_adjustments() const;
  private:
  bool _internal_has_old_image_adjustments() const;
  public:
  void clear_old_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& old_image_adjustments() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageAdjustmentsArchive* release_old_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_old_image_adjustments();
  void set_allocated_old_image_adjustments(::TSD::ImageAdjustmentsArchive* old_image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_old_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_old_image_adjustments();
  public:
  void unsafe_arena_set_allocated_old_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* old_image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_old_image_adjustments();

  // optional .TSP.DataReference old_adjusted_image_data = 19;
  bool has_old_adjusted_image_data() const;
  private:
  bool _internal_has_old_adjusted_image_data() const;
  public:
  void clear_old_adjusted_image_data();
  const ::TSP::DataReference& old_adjusted_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_old_adjusted_image_data();
  ::TSP::DataReference* mutable_old_adjusted_image_data();
  void set_allocated_old_adjusted_image_data(::TSP::DataReference* old_adjusted_image_data);
  private:
  const ::TSP::DataReference& _internal_old_adjusted_image_data() const;
  ::TSP::DataReference* _internal_mutable_old_adjusted_image_data();
  public:
  void unsafe_arena_set_allocated_old_adjusted_image_data(
      ::TSP::DataReference* old_adjusted_image_data);
  ::TSP::DataReference* unsafe_arena_release_old_adjusted_image_data();

  // optional .TSP.DataReference old_enhanced_image_data = 20;
  bool has_old_enhanced_image_data() const;
  private:
  bool _internal_has_old_enhanced_image_data() const;
  public:
  void clear_old_enhanced_image_data();
  const ::TSP::DataReference& old_enhanced_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_old_enhanced_image_data();
  ::TSP::DataReference* mutable_old_enhanced_image_data();
  void set_allocated_old_enhanced_image_data(::TSP::DataReference* old_enhanced_image_data);
  private:
  const ::TSP::DataReference& _internal_old_enhanced_image_data() const;
  ::TSP::DataReference* _internal_mutable_old_enhanced_image_data();
  public:
  void unsafe_arena_set_allocated_old_enhanced_image_data(
      ::TSP::DataReference* old_enhanced_image_data);
  ::TSP::DataReference* unsafe_arena_release_old_enhanced_image_data();

  // optional .TSP.DataReference thumbnail_image_data = 21;
  bool has_thumbnail_image_data() const;
  private:
  bool _internal_has_thumbnail_image_data() const;
  public:
  void clear_thumbnail_image_data();
  const ::TSP::DataReference& thumbnail_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_thumbnail_image_data();
  ::TSP::DataReference* mutable_thumbnail_image_data();
  void set_allocated_thumbnail_image_data(::TSP::DataReference* thumbnail_image_data);
  private:
  const ::TSP::DataReference& _internal_thumbnail_image_data() const;
  ::TSP::DataReference* _internal_mutable_thumbnail_image_data();
  public:
  void unsafe_arena_set_allocated_thumbnail_image_data(
      ::TSP::DataReference* thumbnail_image_data);
  ::TSP::DataReference* unsafe_arena_release_thumbnail_image_data();

  // optional .TSP.DataReference old_thumbnail_image_data = 22;
  bool has_old_thumbnail_image_data() const;
  private:
  bool _internal_has_old_thumbnail_image_data() const;
  public:
  void clear_old_thumbnail_image_data();
  const ::TSP::DataReference& old_thumbnail_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_old_thumbnail_image_data();
  ::TSP::DataReference* mutable_old_thumbnail_image_data();
  void set_allocated_old_thumbnail_image_data(::TSP::DataReference* old_thumbnail_image_data);
  private:
  const ::TSP::DataReference& _internal_old_thumbnail_image_data() const;
  ::TSP::DataReference* _internal_mutable_old_thumbnail_image_data();
  public:
  void unsafe_arena_set_allocated_old_thumbnail_image_data(
      ::TSP::DataReference* old_thumbnail_image_data);
  ::TSP::DataReference* unsafe_arena_release_old_thumbnail_image_data();

  // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
  bool has_thumbnail_adjusted_image_data() const;
  private:
  bool _internal_has_thumbnail_adjusted_image_data() const;
  public:
  void clear_thumbnail_adjusted_image_data();
  const ::TSP::DataReference& thumbnail_adjusted_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_thumbnail_adjusted_image_data();
  ::TSP::DataReference* mutable_thumbnail_adjusted_image_data();
  void set_allocated_thumbnail_adjusted_image_data(::TSP::DataReference* thumbnail_adjusted_image_data);
  private:
  const ::TSP::DataReference& _internal_thumbnail_adjusted_image_data() const;
  ::TSP::DataReference* _internal_mutable_thumbnail_adjusted_image_data();
  public:
  void unsafe_arena_set_allocated_thumbnail_adjusted_image_data(
      ::TSP::DataReference* thumbnail_adjusted_image_data);
  ::TSP::DataReference* unsafe_arena_release_thumbnail_adjusted_image_data();

  // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
  bool has_old_thumbnail_adjusted_image_data() const;
  private:
  bool _internal_has_old_thumbnail_adjusted_image_data() const;
  public:
  void clear_old_thumbnail_adjusted_image_data();
  const ::TSP::DataReference& old_thumbnail_adjusted_image_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_old_thumbnail_adjusted_image_data();
  ::TSP::DataReference* mutable_old_thumbnail_adjusted_image_data();
  void set_allocated_old_thumbnail_adjusted_image_data(::TSP::DataReference* old_thumbnail_adjusted_image_data);
  private:
  const ::TSP::DataReference& _internal_old_thumbnail_adjusted_image_data() const;
  ::TSP::DataReference* _internal_mutable_old_thumbnail_adjusted_image_data();
  public:
  void unsafe_arena_set_allocated_old_thumbnail_adjusted_image_data(
      ::TSP::DataReference* old_thumbnail_adjusted_image_data);
  ::TSP::DataReference* unsafe_arena_release_old_thumbnail_adjusted_image_data();

  // optional .TSP.Size natural_size = 25;
  bool has_natural_size() const;
  private:
  bool _internal_has_natural_size() const;
  public:
  void clear_natural_size();
  const ::TSP::Size& natural_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_natural_size();
  ::TSP::Size* mutable_natural_size();
  void set_allocated_natural_size(::TSP::Size* natural_size);
  private:
  const ::TSP::Size& _internal_natural_size() const;
  ::TSP::Size* _internal_mutable_natural_size();
  public:
  void unsafe_arena_set_allocated_natural_size(
      ::TSP::Size* natural_size);
  ::TSP::Size* unsafe_arena_release_natural_size();

  // optional .TSP.Size old_natural_size = 26;
  bool has_old_natural_size() const;
  private:
  bool _internal_has_old_natural_size() const;
  public:
  void clear_old_natural_size();
  const ::TSP::Size& old_natural_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_old_natural_size();
  ::TSP::Size* mutable_old_natural_size();
  void set_allocated_old_natural_size(::TSP::Size* old_natural_size);
  private:
  const ::TSP::Size& _internal_old_natural_size() const;
  ::TSP::Size* _internal_mutable_old_natural_size();
  public:
  void unsafe_arena_set_allocated_old_natural_size(
      ::TSP::Size* old_natural_size);
  ::TSP::Size* unsafe_arena_release_old_natural_size();

  // @@protoc_insertion_point(class_scope:TSD.ImageReplaceCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::DataReference* new_image_data_;
  ::TSP::DataReference* new_original_image_data_;
  ::TSP::DataReference* old_image_data_;
  ::TSP::DataReference* old_original_image_data_;
  ::TSP::Path* instant_alpha_path_;
  ::TSP::Path* old_instant_alpha_path_;
  ::TSP::Size* natural_size_for_iapath_;
  ::TSP::Size* old_natural_size_for_iapath_;
  ::TSD::GeometryArchive* target_image_geometry_;
  ::TSD::GeometryArchive* old_target_image_geometry_;
  ::TSD::GeometryArchive* target_mask_geometry_;
  ::TSD::GeometryArchive* old_target_mask_geometry_;
  ::TSD::ImageAdjustmentsArchive* image_adjustments_;
  ::TSP::DataReference* adjusted_image_data_;
  ::TSP::DataReference* enhanced_image_data_;
  ::TSD::ImageAdjustmentsArchive* old_image_adjustments_;
  ::TSP::DataReference* old_adjusted_image_data_;
  ::TSP::DataReference* old_enhanced_image_data_;
  ::TSP::DataReference* thumbnail_image_data_;
  ::TSP::DataReference* old_thumbnail_image_data_;
  ::TSP::DataReference* thumbnail_adjusted_image_data_;
  ::TSP::DataReference* old_thumbnail_adjusted_image_data_;
  ::TSP::Size* natural_size_;
  ::TSP::Size* old_natural_size_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableLockCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableLockCommandArchive) */ {
 public:
  inline DrawableLockCommandArchive() : DrawableLockCommandArchive(nullptr) {}
  ~DrawableLockCommandArchive() override;
  explicit constexpr DrawableLockCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableLockCommandArchive(const DrawableLockCommandArchive& from);
  DrawableLockCommandArchive(DrawableLockCommandArchive&& from) noexcept
    : DrawableLockCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableLockCommandArchive& operator=(const DrawableLockCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableLockCommandArchive& operator=(DrawableLockCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableLockCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableLockCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableLockCommandArchive*>(
               &_DrawableLockCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DrawableLockCommandArchive& a, DrawableLockCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableLockCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableLockCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableLockCommandArchive* New() const final {
    return CreateMaybeMessage<DrawableLockCommandArchive>(nullptr);
  }

  DrawableLockCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableLockCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableLockCommandArchive& from);
  void MergeFrom(const DrawableLockCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableLockCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableLockCommandArchive";
  }
  protected:
  explicit DrawableLockCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kLockedFieldNumber = 2,
    kWasLockedFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional bool locked = 2;
  bool has_locked() const;
  private:
  bool _internal_has_locked() const;
  public:
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // optional bool was_locked = 3;
  bool has_was_locked() const;
  private:
  bool _internal_has_was_locked() const;
  public:
  void clear_was_locked();
  bool was_locked() const;
  void set_was_locked(bool value);
  private:
  bool _internal_was_locked() const;
  void _internal_set_was_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawableLockCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  bool locked_;
  bool was_locked_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableInfoCommentCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableInfoCommentCommandArchive) */ {
 public:
  inline DrawableInfoCommentCommandArchive() : DrawableInfoCommentCommandArchive(nullptr) {}
  ~DrawableInfoCommentCommandArchive() override;
  explicit constexpr DrawableInfoCommentCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableInfoCommentCommandArchive(const DrawableInfoCommentCommandArchive& from);
  DrawableInfoCommentCommandArchive(DrawableInfoCommentCommandArchive&& from) noexcept
    : DrawableInfoCommentCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableInfoCommentCommandArchive& operator=(const DrawableInfoCommentCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableInfoCommentCommandArchive& operator=(DrawableInfoCommentCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableInfoCommentCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableInfoCommentCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableInfoCommentCommandArchive*>(
               &_DrawableInfoCommentCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DrawableInfoCommentCommandArchive& a, DrawableInfoCommentCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableInfoCommentCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableInfoCommentCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableInfoCommentCommandArchive* New() const final {
    return CreateMaybeMessage<DrawableInfoCommentCommandArchive>(nullptr);
  }

  DrawableInfoCommentCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableInfoCommentCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableInfoCommentCommandArchive& from);
  void MergeFrom(const DrawableInfoCommentCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableInfoCommentCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableInfoCommentCommandArchive";
  }
  protected:
  explicit DrawableInfoCommentCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOldCommentFieldNumber = 2,
    kNewCommentFieldNumber = 3,
    kForwardVariantFieldNumber = 4,
    kInverseVariantFieldNumber = 5,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_comment = 2;
  bool has_old_comment() const;
  private:
  bool _internal_has_old_comment() const;
  public:
  void clear_old_comment();
  const ::TSP::Reference& old_comment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_old_comment();
  ::TSP::Reference* mutable_old_comment();
  void set_allocated_old_comment(::TSP::Reference* old_comment);
  private:
  const ::TSP::Reference& _internal_old_comment() const;
  ::TSP::Reference* _internal_mutable_old_comment();
  public:
  void unsafe_arena_set_allocated_old_comment(
      ::TSP::Reference* old_comment);
  ::TSP::Reference* unsafe_arena_release_old_comment();

  // optional .TSP.Reference new_comment = 3;
  bool has_new_comment() const;
  private:
  bool _internal_has_new_comment() const;
  public:
  void clear_new_comment();
  const ::TSP::Reference& new_comment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_new_comment();
  ::TSP::Reference* mutable_new_comment();
  void set_allocated_new_comment(::TSP::Reference* new_comment);
  private:
  const ::TSP::Reference& _internal_new_comment() const;
  ::TSP::Reference* _internal_mutable_new_comment();
  public:
  void unsafe_arena_set_allocated_new_comment(
      ::TSP::Reference* new_comment);
  ::TSP::Reference* unsafe_arena_release_new_comment();

  // optional .TSD.CommentCommandVariant forward_variant = 4;
  bool has_forward_variant() const;
  private:
  bool _internal_has_forward_variant() const;
  public:
  void clear_forward_variant();
  ::TSD::CommentCommandVariant forward_variant() const;
  void set_forward_variant(::TSD::CommentCommandVariant value);
  private:
  ::TSD::CommentCommandVariant _internal_forward_variant() const;
  void _internal_set_forward_variant(::TSD::CommentCommandVariant value);
  public:

  // optional .TSD.CommentCommandVariant inverse_variant = 5;
  bool has_inverse_variant() const;
  private:
  bool _internal_has_inverse_variant() const;
  public:
  void clear_inverse_variant();
  ::TSD::CommentCommandVariant inverse_variant() const;
  void set_inverse_variant(::TSD::CommentCommandVariant value);
  private:
  ::TSD::CommentCommandVariant _internal_inverse_variant() const;
  void _internal_set_inverse_variant(::TSD::CommentCommandVariant value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawableInfoCommentCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Reference* old_comment_;
  ::TSP::Reference* new_comment_;
  int forward_variant_;
  int inverse_variant_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawablePencilAnnotationCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawablePencilAnnotationCommandArchive) */ {
 public:
  inline DrawablePencilAnnotationCommandArchive() : DrawablePencilAnnotationCommandArchive(nullptr) {}
  ~DrawablePencilAnnotationCommandArchive() override;
  explicit constexpr DrawablePencilAnnotationCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawablePencilAnnotationCommandArchive(const DrawablePencilAnnotationCommandArchive& from);
  DrawablePencilAnnotationCommandArchive(DrawablePencilAnnotationCommandArchive&& from) noexcept
    : DrawablePencilAnnotationCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawablePencilAnnotationCommandArchive& operator=(const DrawablePencilAnnotationCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablePencilAnnotationCommandArchive& operator=(DrawablePencilAnnotationCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawablePencilAnnotationCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawablePencilAnnotationCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawablePencilAnnotationCommandArchive*>(
               &_DrawablePencilAnnotationCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DrawablePencilAnnotationCommandArchive& a, DrawablePencilAnnotationCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablePencilAnnotationCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablePencilAnnotationCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawablePencilAnnotationCommandArchive* New() const final {
    return CreateMaybeMessage<DrawablePencilAnnotationCommandArchive>(nullptr);
  }

  DrawablePencilAnnotationCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawablePencilAnnotationCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawablePencilAnnotationCommandArchive& from);
  void MergeFrom(const DrawablePencilAnnotationCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablePencilAnnotationCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawablePencilAnnotationCommandArchive";
  }
  protected:
  explicit DrawablePencilAnnotationCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPencilAnnotationToAddFieldNumber = 2,
    kPencilAnnotationToRemoveFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference pencil_annotation_to_add = 2;
  bool has_pencil_annotation_to_add() const;
  private:
  bool _internal_has_pencil_annotation_to_add() const;
  public:
  void clear_pencil_annotation_to_add();
  const ::TSP::Reference& pencil_annotation_to_add() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_pencil_annotation_to_add();
  ::TSP::Reference* mutable_pencil_annotation_to_add();
  void set_allocated_pencil_annotation_to_add(::TSP::Reference* pencil_annotation_to_add);
  private:
  const ::TSP::Reference& _internal_pencil_annotation_to_add() const;
  ::TSP::Reference* _internal_mutable_pencil_annotation_to_add();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_to_add(
      ::TSP::Reference* pencil_annotation_to_add);
  ::TSP::Reference* unsafe_arena_release_pencil_annotation_to_add();

  // optional .TSP.Reference pencil_annotation_to_remove = 3;
  bool has_pencil_annotation_to_remove() const;
  private:
  bool _internal_has_pencil_annotation_to_remove() const;
  public:
  void clear_pencil_annotation_to_remove();
  const ::TSP::Reference& pencil_annotation_to_remove() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_pencil_annotation_to_remove();
  ::TSP::Reference* mutable_pencil_annotation_to_remove();
  void set_allocated_pencil_annotation_to_remove(::TSP::Reference* pencil_annotation_to_remove);
  private:
  const ::TSP::Reference& _internal_pencil_annotation_to_remove() const;
  ::TSP::Reference* _internal_mutable_pencil_annotation_to_remove();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_to_remove(
      ::TSP::Reference* pencil_annotation_to_remove);
  ::TSP::Reference* unsafe_arena_release_pencil_annotation_to_remove();

  // @@protoc_insertion_point(class_scope:TSD.DrawablePencilAnnotationCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSP::Reference* pencil_annotation_to_add_;
  ::TSP::Reference* pencil_annotation_to_remove_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class AbstractGuideCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.AbstractGuideCommandArchive) */ {
 public:
  inline AbstractGuideCommandArchive() : AbstractGuideCommandArchive(nullptr) {}
  ~AbstractGuideCommandArchive() override;
  explicit constexpr AbstractGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AbstractGuideCommandArchive(const AbstractGuideCommandArchive& from);
  AbstractGuideCommandArchive(AbstractGuideCommandArchive&& from) noexcept
    : AbstractGuideCommandArchive() {
    *this = ::std::move(from);
  }

  inline AbstractGuideCommandArchive& operator=(const AbstractGuideCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbstractGuideCommandArchive& operator=(AbstractGuideCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AbstractGuideCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AbstractGuideCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AbstractGuideCommandArchive*>(
               &_AbstractGuideCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AbstractGuideCommandArchive& a, AbstractGuideCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AbstractGuideCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbstractGuideCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbstractGuideCommandArchive* New() const final {
    return CreateMaybeMessage<AbstractGuideCommandArchive>(nullptr);
  }

  AbstractGuideCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbstractGuideCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbstractGuideCommandArchive& from);
  void MergeFrom(const AbstractGuideCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbstractGuideCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.AbstractGuideCommandArchive";
  }
  protected:
  explicit AbstractGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldGuidesFieldNumber = 7,
    kNewGuidesFieldNumber = 8,
    kSuperFieldNumber = 1,
  };
  // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
  int old_guides_size() const;
  private:
  int _internal_old_guides_size() const;
  public:
  void clear_old_guides();
  ::TSD::UserDefinedGuideArchive* mutable_old_guides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >*
      mutable_old_guides();
  private:
  const ::TSD::UserDefinedGuideArchive& _internal_old_guides(int index) const;
  ::TSD::UserDefinedGuideArchive* _internal_add_old_guides();
  public:
  const ::TSD::UserDefinedGuideArchive& old_guides(int index) const;
  ::TSD::UserDefinedGuideArchive* add_old_guides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >&
      old_guides() const;

  // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
  int new_guides_size() const;
  private:
  int _internal_new_guides_size() const;
  public:
  void clear_new_guides();
  ::TSD::UserDefinedGuideArchive* mutable_new_guides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >*
      mutable_new_guides();
  private:
  const ::TSD::UserDefinedGuideArchive& _internal_new_guides(int index) const;
  ::TSD::UserDefinedGuideArchive* _internal_add_new_guides();
  public:
  const ::TSD::UserDefinedGuideArchive& new_guides(int index) const;
  ::TSD::UserDefinedGuideArchive* add_new_guides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >&
      new_guides() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.AbstractGuideCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive > old_guides_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive > new_guides_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class GuideCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.GuideCommandArchive) */ {
 public:
  inline GuideCommandArchive() : GuideCommandArchive(nullptr) {}
  ~GuideCommandArchive() override;
  explicit constexpr GuideCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuideCommandArchive(const GuideCommandArchive& from);
  GuideCommandArchive(GuideCommandArchive&& from) noexcept
    : GuideCommandArchive() {
    *this = ::std::move(from);
  }

  inline GuideCommandArchive& operator=(const GuideCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuideCommandArchive& operator=(GuideCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuideCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuideCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GuideCommandArchive*>(
               &_GuideCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GuideCommandArchive& a, GuideCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GuideCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuideCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuideCommandArchive* New() const final {
    return CreateMaybeMessage<GuideCommandArchive>(nullptr);
  }

  GuideCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuideCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuideCommandArchive& from);
  void MergeFrom(const GuideCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuideCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.GuideCommandArchive";
  }
  protected:
  explicit GuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStorageIdPathFieldNumber = 2,
  };
  // required .TSD.AbstractGuideCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::AbstractGuideCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::AbstractGuideCommandArchive* release_super();
  ::TSD::AbstractGuideCommandArchive* mutable_super();
  void set_allocated_super(::TSD::AbstractGuideCommandArchive* super);
  private:
  const ::TSD::AbstractGuideCommandArchive& _internal_super() const;
  ::TSD::AbstractGuideCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::AbstractGuideCommandArchive* super);
  ::TSD::AbstractGuideCommandArchive* unsafe_arena_release_super();

  // required .TSP.UUIDPath storage_id_path = 2;
  bool has_storage_id_path() const;
  private:
  bool _internal_has_storage_id_path() const;
  public:
  void clear_storage_id_path();
  const ::TSP::UUIDPath& storage_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_storage_id_path();
  ::TSP::UUIDPath* mutable_storage_id_path();
  void set_allocated_storage_id_path(::TSP::UUIDPath* storage_id_path);
  private:
  const ::TSP::UUIDPath& _internal_storage_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_storage_id_path();
  public:
  void unsafe_arena_set_allocated_storage_id_path(
      ::TSP::UUIDPath* storage_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_storage_id_path();

  // @@protoc_insertion_point(class_scope:TSD.GuideCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::AbstractGuideCommandArchive* super_;
  ::TSP::UUIDPath* storage_id_path_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableAspectRatioLockedCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableAspectRatioLockedCommandArchive) */ {
 public:
  inline DrawableAspectRatioLockedCommandArchive() : DrawableAspectRatioLockedCommandArchive(nullptr) {}
  ~DrawableAspectRatioLockedCommandArchive() override;
  explicit constexpr DrawableAspectRatioLockedCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableAspectRatioLockedCommandArchive(const DrawableAspectRatioLockedCommandArchive& from);
  DrawableAspectRatioLockedCommandArchive(DrawableAspectRatioLockedCommandArchive&& from) noexcept
    : DrawableAspectRatioLockedCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableAspectRatioLockedCommandArchive& operator=(const DrawableAspectRatioLockedCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableAspectRatioLockedCommandArchive& operator=(DrawableAspectRatioLockedCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableAspectRatioLockedCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableAspectRatioLockedCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableAspectRatioLockedCommandArchive*>(
               &_DrawableAspectRatioLockedCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DrawableAspectRatioLockedCommandArchive& a, DrawableAspectRatioLockedCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableAspectRatioLockedCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableAspectRatioLockedCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableAspectRatioLockedCommandArchive* New() const final {
    return CreateMaybeMessage<DrawableAspectRatioLockedCommandArchive>(nullptr);
  }

  DrawableAspectRatioLockedCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableAspectRatioLockedCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableAspectRatioLockedCommandArchive& from);
  void MergeFrom(const DrawableAspectRatioLockedCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableAspectRatioLockedCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableAspectRatioLockedCommandArchive";
  }
  protected:
  explicit DrawableAspectRatioLockedCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kAspectRatioLockedFieldNumber = 2,
    kWasAspectRatioLockedFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional bool aspect_ratio_locked = 2;
  bool has_aspect_ratio_locked() const;
  private:
  bool _internal_has_aspect_ratio_locked() const;
  public:
  void clear_aspect_ratio_locked();
  bool aspect_ratio_locked() const;
  void set_aspect_ratio_locked(bool value);
  private:
  bool _internal_aspect_ratio_locked() const;
  void _internal_set_aspect_ratio_locked(bool value);
  public:

  // optional bool was_aspect_ratio_locked = 3;
  bool has_was_aspect_ratio_locked() const;
  private:
  bool _internal_has_was_aspect_ratio_locked() const;
  public:
  void clear_was_aspect_ratio_locked();
  bool was_aspect_ratio_locked() const;
  void set_was_aspect_ratio_locked(bool value);
  private:
  bool _internal_was_aspect_ratio_locked() const;
  void _internal_set_was_aspect_ratio_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.DrawableAspectRatioLockedCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  bool aspect_ratio_locked_;
  bool was_aspect_ratio_locked_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableAccessibilityDescriptionCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableAccessibilityDescriptionCommandArchive) */ {
 public:
  inline DrawableAccessibilityDescriptionCommandArchive() : DrawableAccessibilityDescriptionCommandArchive(nullptr) {}
  ~DrawableAccessibilityDescriptionCommandArchive() override;
  explicit constexpr DrawableAccessibilityDescriptionCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableAccessibilityDescriptionCommandArchive(const DrawableAccessibilityDescriptionCommandArchive& from);
  DrawableAccessibilityDescriptionCommandArchive(DrawableAccessibilityDescriptionCommandArchive&& from) noexcept
    : DrawableAccessibilityDescriptionCommandArchive() {
    *this = ::std::move(from);
  }

  inline DrawableAccessibilityDescriptionCommandArchive& operator=(const DrawableAccessibilityDescriptionCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableAccessibilityDescriptionCommandArchive& operator=(DrawableAccessibilityDescriptionCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableAccessibilityDescriptionCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableAccessibilityDescriptionCommandArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableAccessibilityDescriptionCommandArchive*>(
               &_DrawableAccessibilityDescriptionCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DrawableAccessibilityDescriptionCommandArchive& a, DrawableAccessibilityDescriptionCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableAccessibilityDescriptionCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableAccessibilityDescriptionCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableAccessibilityDescriptionCommandArchive* New() const final {
    return CreateMaybeMessage<DrawableAccessibilityDescriptionCommandArchive>(nullptr);
  }

  DrawableAccessibilityDescriptionCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableAccessibilityDescriptionCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableAccessibilityDescriptionCommandArchive& from);
  void MergeFrom(const DrawableAccessibilityDescriptionCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableAccessibilityDescriptionCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableAccessibilityDescriptionCommandArchive";
  }
  protected:
  explicit DrawableAccessibilityDescriptionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessibilityDescriptionFieldNumber = 2,
    kOldAccessibilityDescriptionFieldNumber = 3,
    kSuperFieldNumber = 1,
  };
  // optional string accessibility_description = 2;
  bool has_accessibility_description() const;
  private:
  bool _internal_has_accessibility_description() const;
  public:
  void clear_accessibility_description();
  const std::string& accessibility_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_description();
  std::string* release_accessibility_description();
  void set_allocated_accessibility_description(std::string* accessibility_description);
  private:
  const std::string& _internal_accessibility_description() const;
  void _internal_set_accessibility_description(const std::string& value);
  std::string* _internal_mutable_accessibility_description();
  public:

  // optional string old_accessibility_description = 3;
  bool has_old_accessibility_description() const;
  private:
  bool _internal_has_old_accessibility_description() const;
  public:
  void clear_old_accessibility_description();
  const std::string& old_accessibility_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_accessibility_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_accessibility_description();
  std::string* release_old_accessibility_description();
  void set_allocated_old_accessibility_description(std::string* old_accessibility_description);
  private:
  const std::string& _internal_old_accessibility_description() const;
  void _internal_set_old_accessibility_description(const std::string& value);
  std::string* _internal_mutable_old_accessibility_description();
  public:

  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.DrawableAccessibilityDescriptionCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_accessibility_description_;
  ::TSD::InfoCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PasteStyleCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.PasteStyleCommandArchive) */ {
 public:
  inline PasteStyleCommandArchive() : PasteStyleCommandArchive(nullptr) {}
  ~PasteStyleCommandArchive() override;
  explicit constexpr PasteStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasteStyleCommandArchive(const PasteStyleCommandArchive& from);
  PasteStyleCommandArchive(PasteStyleCommandArchive&& from) noexcept
    : PasteStyleCommandArchive() {
    *this = ::std::move(from);
  }

  inline PasteStyleCommandArchive& operator=(const PasteStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasteStyleCommandArchive& operator=(PasteStyleCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasteStyleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasteStyleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const PasteStyleCommandArchive*>(
               &_PasteStyleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PasteStyleCommandArchive& a, PasteStyleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PasteStyleCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasteStyleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasteStyleCommandArchive* New() const final {
    return CreateMaybeMessage<PasteStyleCommandArchive>(nullptr);
  }

  PasteStyleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasteStyleCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PasteStyleCommandArchive& from);
  void MergeFrom(const PasteStyleCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasteStyleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.PasteStyleCommandArchive";
  }
  protected:
  explicit PasteStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewStyleFieldNumber = 2,
    kRollbackStyleFieldNumber = 5,
    kTailEndOnLeftFieldNumber = 4,
  };
  // required .TSD.AbstractStyleCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::AbstractStyleCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::AbstractStyleCommandArchive* release_super();
  ::TSD::AbstractStyleCommandArchive* mutable_super();
  void set_allocated_super(::TSD::AbstractStyleCommandArchive* super);
  private:
  const ::TSD::AbstractStyleCommandArchive& _internal_super() const;
  ::TSD::AbstractStyleCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::AbstractStyleCommandArchive* super);
  ::TSD::AbstractStyleCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference new_style = 2;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // optional .TSP.Reference rollback_style = 5;
  bool has_rollback_style() const;
  private:
  bool _internal_has_rollback_style() const;
  public:
  void clear_rollback_style();
  const ::TSP::Reference& rollback_style() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_rollback_style();
  ::TSP::Reference* mutable_rollback_style();
  void set_allocated_rollback_style(::TSP::Reference* rollback_style);
  private:
  const ::TSP::Reference& _internal_rollback_style() const;
  ::TSP::Reference* _internal_mutable_rollback_style();
  public:
  void unsafe_arena_set_allocated_rollback_style(
      ::TSP::Reference* rollback_style);
  ::TSP::Reference* unsafe_arena_release_rollback_style();

  // optional bool tail_end_on_left = 4;
  bool has_tail_end_on_left() const;
  private:
  bool _internal_has_tail_end_on_left() const;
  public:
  void clear_tail_end_on_left();
  bool tail_end_on_left() const;
  void set_tail_end_on_left(bool value);
  private:
  bool _internal_tail_end_on_left() const;
  void _internal_set_tail_end_on_left(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.PasteStyleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::AbstractStyleCommandArchive* super_;
  ::TSP::Reference* new_style_;
  ::TSP::Reference* rollback_style_;
  bool tail_end_on_left_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageInfoAbstractGeometryCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageInfoAbstractGeometryCommandArchive) */ {
 public:
  inline ImageInfoAbstractGeometryCommandArchive() : ImageInfoAbstractGeometryCommandArchive(nullptr) {}
  ~ImageInfoAbstractGeometryCommandArchive() override;
  explicit constexpr ImageInfoAbstractGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoAbstractGeometryCommandArchive(const ImageInfoAbstractGeometryCommandArchive& from);
  ImageInfoAbstractGeometryCommandArchive(ImageInfoAbstractGeometryCommandArchive&& from) noexcept
    : ImageInfoAbstractGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageInfoAbstractGeometryCommandArchive& operator=(const ImageInfoAbstractGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoAbstractGeometryCommandArchive& operator=(ImageInfoAbstractGeometryCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfoAbstractGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoAbstractGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageInfoAbstractGeometryCommandArchive*>(
               &_ImageInfoAbstractGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ImageInfoAbstractGeometryCommandArchive& a, ImageInfoAbstractGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoAbstractGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoAbstractGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfoAbstractGeometryCommandArchive* New() const final {
    return CreateMaybeMessage<ImageInfoAbstractGeometryCommandArchive>(nullptr);
  }

  ImageInfoAbstractGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfoAbstractGeometryCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfoAbstractGeometryCommandArchive& from);
  void MergeFrom(const ImageInfoAbstractGeometryCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoAbstractGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageInfoAbstractGeometryCommandArchive";
  }
  protected:
  explicit ImageInfoAbstractGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewImageGeometryFieldNumber = 2,
    kOldImageGeometryFieldNumber = 3,
    kNewMaskGeometryFieldNumber = 4,
    kOldMaskGeometryFieldNumber = 5,
    kNewMaskPathSourceFieldNumber = 6,
    kOldMaskPathSourceFieldNumber = 7,
    kNewImageOriginalSizeFieldNumber = 8,
    kOldImageOriginalSizeFieldNumber = 9,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.GeometryArchive new_image_geometry = 2;
  bool has_new_image_geometry() const;
  private:
  bool _internal_has_new_image_geometry() const;
  public:
  void clear_new_image_geometry();
  const ::TSD::GeometryArchive& new_image_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_new_image_geometry();
  ::TSD::GeometryArchive* mutable_new_image_geometry();
  void set_allocated_new_image_geometry(::TSD::GeometryArchive* new_image_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_new_image_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_new_image_geometry();
  public:
  void unsafe_arena_set_allocated_new_image_geometry(
      ::TSD::GeometryArchive* new_image_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_new_image_geometry();

  // optional .TSD.GeometryArchive old_image_geometry = 3;
  bool has_old_image_geometry() const;
  private:
  bool _internal_has_old_image_geometry() const;
  public:
  void clear_old_image_geometry();
  const ::TSD::GeometryArchive& old_image_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_old_image_geometry();
  ::TSD::GeometryArchive* mutable_old_image_geometry();
  void set_allocated_old_image_geometry(::TSD::GeometryArchive* old_image_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_old_image_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_old_image_geometry();
  public:
  void unsafe_arena_set_allocated_old_image_geometry(
      ::TSD::GeometryArchive* old_image_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_old_image_geometry();

  // optional .TSD.GeometryArchive new_mask_geometry = 4;
  bool has_new_mask_geometry() const;
  private:
  bool _internal_has_new_mask_geometry() const;
  public:
  void clear_new_mask_geometry();
  const ::TSD::GeometryArchive& new_mask_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_new_mask_geometry();
  ::TSD::GeometryArchive* mutable_new_mask_geometry();
  void set_allocated_new_mask_geometry(::TSD::GeometryArchive* new_mask_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_new_mask_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_new_mask_geometry();
  public:
  void unsafe_arena_set_allocated_new_mask_geometry(
      ::TSD::GeometryArchive* new_mask_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_new_mask_geometry();

  // optional .TSD.GeometryArchive old_mask_geometry = 5;
  bool has_old_mask_geometry() const;
  private:
  bool _internal_has_old_mask_geometry() const;
  public:
  void clear_old_mask_geometry();
  const ::TSD::GeometryArchive& old_mask_geometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::GeometryArchive* release_old_mask_geometry();
  ::TSD::GeometryArchive* mutable_old_mask_geometry();
  void set_allocated_old_mask_geometry(::TSD::GeometryArchive* old_mask_geometry);
  private:
  const ::TSD::GeometryArchive& _internal_old_mask_geometry() const;
  ::TSD::GeometryArchive* _internal_mutable_old_mask_geometry();
  public:
  void unsafe_arena_set_allocated_old_mask_geometry(
      ::TSD::GeometryArchive* old_mask_geometry);
  ::TSD::GeometryArchive* unsafe_arena_release_old_mask_geometry();

  // optional .TSD.PathSourceArchive new_mask_path_source = 6;
  bool has_new_mask_path_source() const;
  private:
  bool _internal_has_new_mask_path_source() const;
  public:
  void clear_new_mask_path_source();
  const ::TSD::PathSourceArchive& new_mask_path_source() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::PathSourceArchive* release_new_mask_path_source();
  ::TSD::PathSourceArchive* mutable_new_mask_path_source();
  void set_allocated_new_mask_path_source(::TSD::PathSourceArchive* new_mask_path_source);
  private:
  const ::TSD::PathSourceArchive& _internal_new_mask_path_source() const;
  ::TSD::PathSourceArchive* _internal_mutable_new_mask_path_source();
  public:
  void unsafe_arena_set_allocated_new_mask_path_source(
      ::TSD::PathSourceArchive* new_mask_path_source);
  ::TSD::PathSourceArchive* unsafe_arena_release_new_mask_path_source();

  // optional .TSD.PathSourceArchive old_mask_path_source = 7;
  bool has_old_mask_path_source() const;
  private:
  bool _internal_has_old_mask_path_source() const;
  public:
  void clear_old_mask_path_source();
  const ::TSD::PathSourceArchive& old_mask_path_source() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::PathSourceArchive* release_old_mask_path_source();
  ::TSD::PathSourceArchive* mutable_old_mask_path_source();
  void set_allocated_old_mask_path_source(::TSD::PathSourceArchive* old_mask_path_source);
  private:
  const ::TSD::PathSourceArchive& _internal_old_mask_path_source() const;
  ::TSD::PathSourceArchive* _internal_mutable_old_mask_path_source();
  public:
  void unsafe_arena_set_allocated_old_mask_path_source(
      ::TSD::PathSourceArchive* old_mask_path_source);
  ::TSD::PathSourceArchive* unsafe_arena_release_old_mask_path_source();

  // optional .TSP.Size new_image_original_size = 8;
  bool has_new_image_original_size() const;
  private:
  bool _internal_has_new_image_original_size() const;
  public:
  void clear_new_image_original_size();
  const ::TSP::Size& new_image_original_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_new_image_original_size();
  ::TSP::Size* mutable_new_image_original_size();
  void set_allocated_new_image_original_size(::TSP::Size* new_image_original_size);
  private:
  const ::TSP::Size& _internal_new_image_original_size() const;
  ::TSP::Size* _internal_mutable_new_image_original_size();
  public:
  void unsafe_arena_set_allocated_new_image_original_size(
      ::TSP::Size* new_image_original_size);
  ::TSP::Size* unsafe_arena_release_new_image_original_size();

  // optional .TSP.Size old_image_original_size = 9;
  bool has_old_image_original_size() const;
  private:
  bool _internal_has_old_image_original_size() const;
  public:
  void clear_old_image_original_size();
  const ::TSP::Size& old_image_original_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Size* release_old_image_original_size();
  ::TSP::Size* mutable_old_image_original_size();
  void set_allocated_old_image_original_size(::TSP::Size* old_image_original_size);
  private:
  const ::TSP::Size& _internal_old_image_original_size() const;
  ::TSP::Size* _internal_mutable_old_image_original_size();
  public:
  void unsafe_arena_set_allocated_old_image_original_size(
      ::TSP::Size* old_image_original_size);
  ::TSP::Size* unsafe_arena_release_old_image_original_size();

  // @@protoc_insertion_point(class_scope:TSD.ImageInfoAbstractGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::GeometryArchive* new_image_geometry_;
  ::TSD::GeometryArchive* old_image_geometry_;
  ::TSD::GeometryArchive* new_mask_geometry_;
  ::TSD::GeometryArchive* old_mask_geometry_;
  ::TSD::PathSourceArchive* new_mask_path_source_;
  ::TSD::PathSourceArchive* old_mask_path_source_;
  ::TSP::Size* new_image_original_size_;
  ::TSP::Size* old_image_original_size_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageInfoGeometryCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageInfoGeometryCommandArchive) */ {
 public:
  inline ImageInfoGeometryCommandArchive() : ImageInfoGeometryCommandArchive(nullptr) {}
  ~ImageInfoGeometryCommandArchive() override;
  explicit constexpr ImageInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoGeometryCommandArchive(const ImageInfoGeometryCommandArchive& from);
  ImageInfoGeometryCommandArchive(ImageInfoGeometryCommandArchive&& from) noexcept
    : ImageInfoGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageInfoGeometryCommandArchive& operator=(const ImageInfoGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoGeometryCommandArchive& operator=(ImageInfoGeometryCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfoGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageInfoGeometryCommandArchive*>(
               &_ImageInfoGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ImageInfoGeometryCommandArchive& a, ImageInfoGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfoGeometryCommandArchive* New() const final {
    return CreateMaybeMessage<ImageInfoGeometryCommandArchive>(nullptr);
  }

  ImageInfoGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfoGeometryCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfoGeometryCommandArchive& from);
  void MergeFrom(const ImageInfoGeometryCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageInfoGeometryCommandArchive";
  }
  protected:
  explicit ImageInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ImageInfoAbstractGeometryCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageInfoAbstractGeometryCommandArchive* release_super();
  ::TSD::ImageInfoAbstractGeometryCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ImageInfoAbstractGeometryCommandArchive* super);
  private:
  const ::TSD::ImageInfoAbstractGeometryCommandArchive& _internal_super() const;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ImageInfoAbstractGeometryCommandArchive* super);
  ::TSD::ImageInfoAbstractGeometryCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ImageInfoGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ImageInfoMaskGeometryCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ImageInfoMaskGeometryCommandArchive) */ {
 public:
  inline ImageInfoMaskGeometryCommandArchive() : ImageInfoMaskGeometryCommandArchive(nullptr) {}
  ~ImageInfoMaskGeometryCommandArchive() override;
  explicit constexpr ImageInfoMaskGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoMaskGeometryCommandArchive(const ImageInfoMaskGeometryCommandArchive& from);
  ImageInfoMaskGeometryCommandArchive(ImageInfoMaskGeometryCommandArchive&& from) noexcept
    : ImageInfoMaskGeometryCommandArchive() {
    *this = ::std::move(from);
  }

  inline ImageInfoMaskGeometryCommandArchive& operator=(const ImageInfoMaskGeometryCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoMaskGeometryCommandArchive& operator=(ImageInfoMaskGeometryCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfoMaskGeometryCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoMaskGeometryCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ImageInfoMaskGeometryCommandArchive*>(
               &_ImageInfoMaskGeometryCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ImageInfoMaskGeometryCommandArchive& a, ImageInfoMaskGeometryCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoMaskGeometryCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoMaskGeometryCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfoMaskGeometryCommandArchive* New() const final {
    return CreateMaybeMessage<ImageInfoMaskGeometryCommandArchive>(nullptr);
  }

  ImageInfoMaskGeometryCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfoMaskGeometryCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfoMaskGeometryCommandArchive& from);
  void MergeFrom(const ImageInfoMaskGeometryCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoMaskGeometryCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ImageInfoMaskGeometryCommandArchive";
  }
  protected:
  explicit ImageInfoMaskGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ImageInfoAbstractGeometryCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::ImageInfoAbstractGeometryCommandArchive* release_super();
  ::TSD::ImageInfoAbstractGeometryCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ImageInfoAbstractGeometryCommandArchive* super);
  private:
  const ::TSD::ImageInfoAbstractGeometryCommandArchive& _internal_super() const;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ImageInfoAbstractGeometryCommandArchive* super);
  ::TSD::ImageInfoAbstractGeometryCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ImageInfoMaskGeometryCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InfoCollectionSelectionTransformerHelperArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InfoCollectionSelectionTransformerHelperArchive) */ {
 public:
  inline InfoCollectionSelectionTransformerHelperArchive() : InfoCollectionSelectionTransformerHelperArchive(nullptr) {}
  ~InfoCollectionSelectionTransformerHelperArchive() override;
  explicit constexpr InfoCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoCollectionSelectionTransformerHelperArchive(const InfoCollectionSelectionTransformerHelperArchive& from);
  InfoCollectionSelectionTransformerHelperArchive(InfoCollectionSelectionTransformerHelperArchive&& from) noexcept
    : InfoCollectionSelectionTransformerHelperArchive() {
    *this = ::std::move(from);
  }

  inline InfoCollectionSelectionTransformerHelperArchive& operator=(const InfoCollectionSelectionTransformerHelperArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoCollectionSelectionTransformerHelperArchive& operator=(InfoCollectionSelectionTransformerHelperArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoCollectionSelectionTransformerHelperArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoCollectionSelectionTransformerHelperArchive* internal_default_instance() {
    return reinterpret_cast<const InfoCollectionSelectionTransformerHelperArchive*>(
               &_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(InfoCollectionSelectionTransformerHelperArchive& a, InfoCollectionSelectionTransformerHelperArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoCollectionSelectionTransformerHelperArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoCollectionSelectionTransformerHelperArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoCollectionSelectionTransformerHelperArchive* New() const final {
    return CreateMaybeMessage<InfoCollectionSelectionTransformerHelperArchive>(nullptr);
  }

  InfoCollectionSelectionTransformerHelperArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoCollectionSelectionTransformerHelperArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoCollectionSelectionTransformerHelperArchive& from);
  void MergeFrom(const InfoCollectionSelectionTransformerHelperArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoCollectionSelectionTransformerHelperArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InfoCollectionSelectionTransformerHelperArchive";
  }
  protected:
  explicit InfoCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoUuidPathListFieldNumber = 1,
  };
  // repeated .TSP.UUIDPath info_uuid_path_list = 1;
  int info_uuid_path_list_size() const;
  private:
  int _internal_info_uuid_path_list_size() const;
  public:
  void clear_info_uuid_path_list();
  ::TSP::UUIDPath* mutable_info_uuid_path_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_info_uuid_path_list();
  private:
  const ::TSP::UUIDPath& _internal_info_uuid_path_list(int index) const;
  ::TSP::UUIDPath* _internal_add_info_uuid_path_list();
  public:
  const ::TSP::UUIDPath& info_uuid_path_list(int index) const;
  ::TSP::UUIDPath* add_info_uuid_path_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      info_uuid_path_list() const;

  // @@protoc_insertion_point(class_scope:TSD.InfoCollectionSelectionTransformerHelperArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > info_uuid_path_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class DrawableSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.DrawableSelectionTransformerArchive) */ {
 public:
  inline DrawableSelectionTransformerArchive() : DrawableSelectionTransformerArchive(nullptr) {}
  ~DrawableSelectionTransformerArchive() override;
  explicit constexpr DrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawableSelectionTransformerArchive(const DrawableSelectionTransformerArchive& from);
  DrawableSelectionTransformerArchive(DrawableSelectionTransformerArchive&& from) noexcept
    : DrawableSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline DrawableSelectionTransformerArchive& operator=(const DrawableSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableSelectionTransformerArchive& operator=(DrawableSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawableSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawableSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const DrawableSelectionTransformerArchive*>(
               &_DrawableSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DrawableSelectionTransformerArchive& a, DrawableSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<DrawableSelectionTransformerArchive>(nullptr);
  }

  DrawableSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableSelectionTransformerArchive& from);
  void MergeFrom(const DrawableSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.DrawableSelectionTransformerArchive";
  }
  protected:
  explicit DrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerHelperFieldNumber = 1,
    kUntransformedDrawableSelectionFieldNumber = 2,
  };
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // required .TSP.Reference untransformed_drawable_selection = 2;
  bool has_untransformed_drawable_selection() const;
  private:
  bool _internal_has_untransformed_drawable_selection() const;
  public:
  void clear_untransformed_drawable_selection();
  const ::TSP::Reference& untransformed_drawable_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_untransformed_drawable_selection();
  ::TSP::Reference* mutable_untransformed_drawable_selection();
  void set_allocated_untransformed_drawable_selection(::TSP::Reference* untransformed_drawable_selection);
  private:
  const ::TSP::Reference& _internal_untransformed_drawable_selection() const;
  ::TSP::Reference* _internal_mutable_untransformed_drawable_selection();
  public:
  void unsafe_arena_set_allocated_untransformed_drawable_selection(
      ::TSP::Reference* untransformed_drawable_selection);
  ::TSP::Reference* unsafe_arena_release_untransformed_drawable_selection();

  // @@protoc_insertion_point(class_scope:TSD.DrawableSelectionTransformerArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper_;
  ::TSP::Reference* untransformed_drawable_selection_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InfoHyperlinkSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InfoHyperlinkSelectionTransformerArchive) */ {
 public:
  inline InfoHyperlinkSelectionTransformerArchive() : InfoHyperlinkSelectionTransformerArchive(nullptr) {}
  ~InfoHyperlinkSelectionTransformerArchive() override;
  explicit constexpr InfoHyperlinkSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoHyperlinkSelectionTransformerArchive(const InfoHyperlinkSelectionTransformerArchive& from);
  InfoHyperlinkSelectionTransformerArchive(InfoHyperlinkSelectionTransformerArchive&& from) noexcept
    : InfoHyperlinkSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline InfoHyperlinkSelectionTransformerArchive& operator=(const InfoHyperlinkSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoHyperlinkSelectionTransformerArchive& operator=(InfoHyperlinkSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoHyperlinkSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoHyperlinkSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const InfoHyperlinkSelectionTransformerArchive*>(
               &_InfoHyperlinkSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(InfoHyperlinkSelectionTransformerArchive& a, InfoHyperlinkSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoHyperlinkSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoHyperlinkSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoHyperlinkSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<InfoHyperlinkSelectionTransformerArchive>(nullptr);
  }

  InfoHyperlinkSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoHyperlinkSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoHyperlinkSelectionTransformerArchive& from);
  void MergeFrom(const InfoHyperlinkSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoHyperlinkSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InfoHyperlinkSelectionTransformerArchive";
  }
  protected:
  explicit InfoHyperlinkSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TSD.InfoHyperlinkSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class CanvasSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.CanvasSelectionTransformerArchive) */ {
 public:
  inline CanvasSelectionTransformerArchive() : CanvasSelectionTransformerArchive(nullptr) {}
  ~CanvasSelectionTransformerArchive() override;
  explicit constexpr CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from);
  CanvasSelectionTransformerArchive(CanvasSelectionTransformerArchive&& from) noexcept
    : CanvasSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline CanvasSelectionTransformerArchive& operator=(const CanvasSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanvasSelectionTransformerArchive& operator=(CanvasSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanvasSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanvasSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const CanvasSelectionTransformerArchive*>(
               &_CanvasSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CanvasSelectionTransformerArchive& a, CanvasSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanvasSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanvasSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(nullptr);
  }

  CanvasSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanvasSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanvasSelectionTransformerArchive& from);
  void MergeFrom(const CanvasSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanvasSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.CanvasSelectionTransformerArchive";
  }
  protected:
  explicit CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerHelperFieldNumber = 1,
  };
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCollectionSelectionTransformerHelperArchive* release_transformer_helper();
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* mutable_transformer_helper();
  void set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  private:
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive& _internal_transformer_helper() const;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper);
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* unsafe_arena_release_transformer_helper();

  // @@protoc_insertion_point(class_scope:TSD.CanvasSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PathSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.PathSelectionTransformerArchive) */ {
 public:
  inline PathSelectionTransformerArchive() : PathSelectionTransformerArchive(nullptr) {}
  ~PathSelectionTransformerArchive() override;
  explicit constexpr PathSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathSelectionTransformerArchive(const PathSelectionTransformerArchive& from);
  PathSelectionTransformerArchive(PathSelectionTransformerArchive&& from) noexcept
    : PathSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline PathSelectionTransformerArchive& operator=(const PathSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathSelectionTransformerArchive& operator=(PathSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const PathSelectionTransformerArchive*>(
               &_PathSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PathSelectionTransformerArchive& a, PathSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PathSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<PathSelectionTransformerArchive>(nullptr);
  }

  PathSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathSelectionTransformerArchive& from);
  void MergeFrom(const PathSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.PathSelectionTransformerArchive";
  }
  protected:
  explicit PathSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TSD.PathSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class ShapeSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.ShapeSelectionTransformerArchive) */ {
 public:
  inline ShapeSelectionTransformerArchive() : ShapeSelectionTransformerArchive(nullptr) {}
  ~ShapeSelectionTransformerArchive() override;
  explicit constexpr ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShapeSelectionTransformerArchive(const ShapeSelectionTransformerArchive& from);
  ShapeSelectionTransformerArchive(ShapeSelectionTransformerArchive&& from) noexcept
    : ShapeSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline ShapeSelectionTransformerArchive& operator=(const ShapeSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShapeSelectionTransformerArchive& operator=(ShapeSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShapeSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShapeSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const ShapeSelectionTransformerArchive*>(
               &_ShapeSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ShapeSelectionTransformerArchive& a, ShapeSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShapeSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShapeSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShapeSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<ShapeSelectionTransformerArchive>(nullptr);
  }

  ShapeSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShapeSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShapeSelectionTransformerArchive& from);
  void MergeFrom(const ShapeSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShapeSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.ShapeSelectionTransformerArchive";
  }
  protected:
  explicit ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableSelectionTransformerArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::DrawableSelectionTransformerArchive* release_super();
  ::TSD::DrawableSelectionTransformerArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super);
  private:
  const ::TSD::DrawableSelectionTransformerArchive& _internal_super() const;
  ::TSD::DrawableSelectionTransformerArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableSelectionTransformerArchive* super);
  ::TSD::DrawableSelectionTransformerArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.ShapeSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::DrawableSelectionTransformerArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.GroupSelectionTransformerArchive) */ {
 public:
  inline GroupSelectionTransformerArchive() : GroupSelectionTransformerArchive(nullptr) {}
  ~GroupSelectionTransformerArchive() override;
  explicit constexpr GroupSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupSelectionTransformerArchive(const GroupSelectionTransformerArchive& from);
  GroupSelectionTransformerArchive(GroupSelectionTransformerArchive&& from) noexcept
    : GroupSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline GroupSelectionTransformerArchive& operator=(const GroupSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSelectionTransformerArchive& operator=(GroupSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const GroupSelectionTransformerArchive*>(
               &_GroupSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GroupSelectionTransformerArchive& a, GroupSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<GroupSelectionTransformerArchive>(nullptr);
  }

  GroupSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupSelectionTransformerArchive& from);
  void MergeFrom(const GroupSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.GroupSelectionTransformerArchive";
  }
  protected:
  explicit GroupSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableSelectionTransformerArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::DrawableSelectionTransformerArchive* release_super();
  ::TSD::DrawableSelectionTransformerArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super);
  private:
  const ::TSD::DrawableSelectionTransformerArchive& _internal_super() const;
  ::TSD::DrawableSelectionTransformerArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableSelectionTransformerArchive* super);
  ::TSD::DrawableSelectionTransformerArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSD.GroupSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::DrawableSelectionTransformerArchive* super_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class PencilAnnotationSelectionTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.PencilAnnotationSelectionTransformerArchive) */ {
 public:
  inline PencilAnnotationSelectionTransformerArchive() : PencilAnnotationSelectionTransformerArchive(nullptr) {}
  ~PencilAnnotationSelectionTransformerArchive() override;
  explicit constexpr PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PencilAnnotationSelectionTransformerArchive(const PencilAnnotationSelectionTransformerArchive& from);
  PencilAnnotationSelectionTransformerArchive(PencilAnnotationSelectionTransformerArchive&& from) noexcept
    : PencilAnnotationSelectionTransformerArchive() {
    *this = ::std::move(from);
  }

  inline PencilAnnotationSelectionTransformerArchive& operator=(const PencilAnnotationSelectionTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PencilAnnotationSelectionTransformerArchive& operator=(PencilAnnotationSelectionTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PencilAnnotationSelectionTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PencilAnnotationSelectionTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const PencilAnnotationSelectionTransformerArchive*>(
               &_PencilAnnotationSelectionTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PencilAnnotationSelectionTransformerArchive& a, PencilAnnotationSelectionTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PencilAnnotationSelectionTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PencilAnnotationSelectionTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PencilAnnotationSelectionTransformerArchive* New() const final {
    return CreateMaybeMessage<PencilAnnotationSelectionTransformerArchive>(nullptr);
  }

  PencilAnnotationSelectionTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PencilAnnotationSelectionTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PencilAnnotationSelectionTransformerArchive& from);
  void MergeFrom(const PencilAnnotationSelectionTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PencilAnnotationSelectionTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.PencilAnnotationSelectionTransformerArchive";
  }
  protected:
  explicit PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPencilAnnotationUuidFieldNumber = 1,
  };
  // required .TSP.UUID pencil_annotation_uuid = 1;
  bool has_pencil_annotation_uuid() const;
  private:
  bool _internal_has_pencil_annotation_uuid() const;
  public:
  void clear_pencil_annotation_uuid();
  const ::TSP::UUID& pencil_annotation_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_pencil_annotation_uuid();
  ::TSP::UUID* mutable_pencil_annotation_uuid();
  void set_allocated_pencil_annotation_uuid(::TSP::UUID* pencil_annotation_uuid);
  private:
  const ::TSP::UUID& _internal_pencil_annotation_uuid() const;
  ::TSP::UUID* _internal_mutable_pencil_annotation_uuid();
  public:
  void unsafe_arena_set_allocated_pencil_annotation_uuid(
      ::TSP::UUID* pencil_annotation_uuid);
  ::TSP::UUID* unsafe_arena_release_pencil_annotation_uuid();

  // @@protoc_insertion_point(class_scope:TSD.PencilAnnotationSelectionTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* pencil_annotation_uuid_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FreehandDrawingOpacityCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.FreehandDrawingOpacityCommandArchive) */ {
 public:
  inline FreehandDrawingOpacityCommandArchive() : FreehandDrawingOpacityCommandArchive(nullptr) {}
  ~FreehandDrawingOpacityCommandArchive() override;
  explicit constexpr FreehandDrawingOpacityCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FreehandDrawingOpacityCommandArchive(const FreehandDrawingOpacityCommandArchive& from);
  FreehandDrawingOpacityCommandArchive(FreehandDrawingOpacityCommandArchive&& from) noexcept
    : FreehandDrawingOpacityCommandArchive() {
    *this = ::std::move(from);
  }

  inline FreehandDrawingOpacityCommandArchive& operator=(const FreehandDrawingOpacityCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreehandDrawingOpacityCommandArchive& operator=(FreehandDrawingOpacityCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FreehandDrawingOpacityCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FreehandDrawingOpacityCommandArchive* internal_default_instance() {
    return reinterpret_cast<const FreehandDrawingOpacityCommandArchive*>(
               &_FreehandDrawingOpacityCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(FreehandDrawingOpacityCommandArchive& a, FreehandDrawingOpacityCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FreehandDrawingOpacityCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreehandDrawingOpacityCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreehandDrawingOpacityCommandArchive* New() const final {
    return CreateMaybeMessage<FreehandDrawingOpacityCommandArchive>(nullptr);
  }

  FreehandDrawingOpacityCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreehandDrawingOpacityCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreehandDrawingOpacityCommandArchive& from);
  void MergeFrom(const FreehandDrawingOpacityCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreehandDrawingOpacityCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.FreehandDrawingOpacityCommandArchive";
  }
  protected:
  explicit FreehandDrawingOpacityCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kOpacityFieldNumber = 2,
    kOldOpacityFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional double opacity = 2;
  bool has_opacity() const;
  private:
  bool _internal_has_opacity() const;
  public:
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // optional double old_opacity = 3;
  bool has_old_opacity() const;
  private:
  bool _internal_has_old_opacity() const;
  public:
  void clear_old_opacity();
  double old_opacity() const;
  void set_old_opacity(double value);
  private:
  double _internal_old_opacity() const;
  void _internal_set_old_opacity(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.FreehandDrawingOpacityCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  double opacity_;
  double old_opacity_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class FreehandDrawingAnimationCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.FreehandDrawingAnimationCommandArchive) */ {
 public:
  inline FreehandDrawingAnimationCommandArchive() : FreehandDrawingAnimationCommandArchive(nullptr) {}
  ~FreehandDrawingAnimationCommandArchive() override;
  explicit constexpr FreehandDrawingAnimationCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FreehandDrawingAnimationCommandArchive(const FreehandDrawingAnimationCommandArchive& from);
  FreehandDrawingAnimationCommandArchive(FreehandDrawingAnimationCommandArchive&& from) noexcept
    : FreehandDrawingAnimationCommandArchive() {
    *this = ::std::move(from);
  }

  inline FreehandDrawingAnimationCommandArchive& operator=(const FreehandDrawingAnimationCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreehandDrawingAnimationCommandArchive& operator=(FreehandDrawingAnimationCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FreehandDrawingAnimationCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FreehandDrawingAnimationCommandArchive* internal_default_instance() {
    return reinterpret_cast<const FreehandDrawingAnimationCommandArchive*>(
               &_FreehandDrawingAnimationCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FreehandDrawingAnimationCommandArchive& a, FreehandDrawingAnimationCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FreehandDrawingAnimationCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreehandDrawingAnimationCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreehandDrawingAnimationCommandArchive* New() const final {
    return CreateMaybeMessage<FreehandDrawingAnimationCommandArchive>(nullptr);
  }

  FreehandDrawingAnimationCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreehandDrawingAnimationCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreehandDrawingAnimationCommandArchive& from);
  void MergeFrom(const FreehandDrawingAnimationCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreehandDrawingAnimationCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.FreehandDrawingAnimationCommandArchive";
  }
  protected:
  explicit FreehandDrawingAnimationCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kAnimationFieldNumber = 2,
    kOldAnimationFieldNumber = 3,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
  bool has_animation() const;
  private:
  bool _internal_has_animation() const;
  public:
  void clear_animation();
  const ::TSD::FreehandDrawingAnimationArchive& animation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FreehandDrawingAnimationArchive* release_animation();
  ::TSD::FreehandDrawingAnimationArchive* mutable_animation();
  void set_allocated_animation(::TSD::FreehandDrawingAnimationArchive* animation);
  private:
  const ::TSD::FreehandDrawingAnimationArchive& _internal_animation() const;
  ::TSD::FreehandDrawingAnimationArchive* _internal_mutable_animation();
  public:
  void unsafe_arena_set_allocated_animation(
      ::TSD::FreehandDrawingAnimationArchive* animation);
  ::TSD::FreehandDrawingAnimationArchive* unsafe_arena_release_animation();

  // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
  bool has_old_animation() const;
  private:
  bool _internal_has_old_animation() const;
  public:
  void clear_old_animation();
  const ::TSD::FreehandDrawingAnimationArchive& old_animation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::FreehandDrawingAnimationArchive* release_old_animation();
  ::TSD::FreehandDrawingAnimationArchive* mutable_old_animation();
  void set_allocated_old_animation(::TSD::FreehandDrawingAnimationArchive* old_animation);
  private:
  const ::TSD::FreehandDrawingAnimationArchive& _internal_old_animation() const;
  ::TSD::FreehandDrawingAnimationArchive* _internal_mutable_old_animation();
  public:
  void unsafe_arena_set_allocated_old_animation(
      ::TSD::FreehandDrawingAnimationArchive* old_animation);
  ::TSD::FreehandDrawingAnimationArchive* unsafe_arena_release_old_animation();

  // @@protoc_insertion_point(class_scope:TSD.FreehandDrawingAnimationCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  ::TSD::FreehandDrawingAnimationArchive* animation_;
  ::TSD::FreehandDrawingAnimationArchive* old_animation_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class InsertCaptionOrTitleCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.InsertCaptionOrTitleCommandArchive) */ {
 public:
  inline InsertCaptionOrTitleCommandArchive() : InsertCaptionOrTitleCommandArchive(nullptr) {}
  ~InsertCaptionOrTitleCommandArchive() override;
  explicit constexpr InsertCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertCaptionOrTitleCommandArchive(const InsertCaptionOrTitleCommandArchive& from);
  InsertCaptionOrTitleCommandArchive(InsertCaptionOrTitleCommandArchive&& from) noexcept
    : InsertCaptionOrTitleCommandArchive() {
    *this = ::std::move(from);
  }

  inline InsertCaptionOrTitleCommandArchive& operator=(const InsertCaptionOrTitleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertCaptionOrTitleCommandArchive& operator=(InsertCaptionOrTitleCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertCaptionOrTitleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertCaptionOrTitleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InsertCaptionOrTitleCommandArchive*>(
               &_InsertCaptionOrTitleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(InsertCaptionOrTitleCommandArchive& a, InsertCaptionOrTitleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertCaptionOrTitleCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertCaptionOrTitleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertCaptionOrTitleCommandArchive* New() const final {
    return CreateMaybeMessage<InsertCaptionOrTitleCommandArchive>(nullptr);
  }

  InsertCaptionOrTitleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertCaptionOrTitleCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertCaptionOrTitleCommandArchive& from);
  void MergeFrom(const InsertCaptionOrTitleCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertCaptionOrTitleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.InsertCaptionOrTitleCommandArchive";
  }
  protected:
  explicit InsertCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDrawableInfoIdPathFieldNumber = 2,
    kCaptionOrTitleInfoFieldNumber = 3,
    kAddedCaptionOrTitleUuidFieldNumber = 4,
    kUndoObjectFieldNumber = 6,
    kCaptionOrTitleKindFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath drawable_info_id_path = 2;
  bool has_drawable_info_id_path() const;
  private:
  bool _internal_has_drawable_info_id_path() const;
  public:
  void clear_drawable_info_id_path();
  const ::TSP::UUIDPath& drawable_info_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_drawable_info_id_path();
  ::TSP::UUIDPath* mutable_drawable_info_id_path();
  void set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_drawable_info_id_path();
  public:
  void unsafe_arena_set_allocated_drawable_info_id_path(
      ::TSP::UUIDPath* drawable_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_drawable_info_id_path();

  // optional .TSP.Reference caption_or_title_info = 3;
  bool has_caption_or_title_info() const;
  private:
  bool _internal_has_caption_or_title_info() const;
  public:
  void clear_caption_or_title_info();
  const ::TSP::Reference& caption_or_title_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_caption_or_title_info();
  ::TSP::Reference* mutable_caption_or_title_info();
  void set_allocated_caption_or_title_info(::TSP::Reference* caption_or_title_info);
  private:
  const ::TSP::Reference& _internal_caption_or_title_info() const;
  ::TSP::Reference* _internal_mutable_caption_or_title_info();
  public:
  void unsafe_arena_set_allocated_caption_or_title_info(
      ::TSP::Reference* caption_or_title_info);
  ::TSP::Reference* unsafe_arena_release_caption_or_title_info();

  // optional .TSP.UUID added_caption_or_title_uuid = 4;
  bool has_added_caption_or_title_uuid() const;
  private:
  bool _internal_has_added_caption_or_title_uuid() const;
  public:
  void clear_added_caption_or_title_uuid();
  const ::TSP::UUID& added_caption_or_title_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_added_caption_or_title_uuid();
  ::TSP::UUID* mutable_added_caption_or_title_uuid();
  void set_allocated_added_caption_or_title_uuid(::TSP::UUID* added_caption_or_title_uuid);
  private:
  const ::TSP::UUID& _internal_added_caption_or_title_uuid() const;
  ::TSP::UUID* _internal_mutable_added_caption_or_title_uuid();
  public:
  void unsafe_arena_set_allocated_added_caption_or_title_uuid(
      ::TSP::UUID* added_caption_or_title_uuid);
  ::TSP::UUID* unsafe_arena_release_added_caption_or_title_uuid();

  // optional .TSP.Reference undo_object = 6;
  bool has_undo_object() const;
  private:
  bool _internal_has_undo_object() const;
  public:
  void clear_undo_object();
  const ::TSP::Reference& undo_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_undo_object();
  ::TSP::Reference* mutable_undo_object();
  void set_allocated_undo_object(::TSP::Reference* undo_object);
  private:
  const ::TSP::Reference& _internal_undo_object() const;
  ::TSP::Reference* _internal_mutable_undo_object();
  public:
  void unsafe_arena_set_allocated_undo_object(
      ::TSP::Reference* undo_object);
  ::TSP::Reference* unsafe_arena_release_undo_object();

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
  bool has_caption_or_title_kind() const;
  private:
  bool _internal_has_caption_or_title_kind() const;
  public:
  void clear_caption_or_title_kind();
  ::TSD::CaptionOrTitleKind caption_or_title_kind() const;
  void set_caption_or_title_kind(::TSD::CaptionOrTitleKind value);
  private:
  ::TSD::CaptionOrTitleKind _internal_caption_or_title_kind() const;
  void _internal_set_caption_or_title_kind(::TSD::CaptionOrTitleKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.InsertCaptionOrTitleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* drawable_info_id_path_;
  ::TSP::Reference* caption_or_title_info_;
  ::TSP::UUID* added_caption_or_title_uuid_;
  ::TSP::Reference* undo_object_;
  int caption_or_title_kind_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveCaptionOrTitleCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.RemoveCaptionOrTitleCommandArchive) */ {
 public:
  inline RemoveCaptionOrTitleCommandArchive() : RemoveCaptionOrTitleCommandArchive(nullptr) {}
  ~RemoveCaptionOrTitleCommandArchive() override;
  explicit constexpr RemoveCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveCaptionOrTitleCommandArchive(const RemoveCaptionOrTitleCommandArchive& from);
  RemoveCaptionOrTitleCommandArchive(RemoveCaptionOrTitleCommandArchive&& from) noexcept
    : RemoveCaptionOrTitleCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoveCaptionOrTitleCommandArchive& operator=(const RemoveCaptionOrTitleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCaptionOrTitleCommandArchive& operator=(RemoveCaptionOrTitleCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveCaptionOrTitleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveCaptionOrTitleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoveCaptionOrTitleCommandArchive*>(
               &_RemoveCaptionOrTitleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RemoveCaptionOrTitleCommandArchive& a, RemoveCaptionOrTitleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCaptionOrTitleCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveCaptionOrTitleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveCaptionOrTitleCommandArchive* New() const final {
    return CreateMaybeMessage<RemoveCaptionOrTitleCommandArchive>(nullptr);
  }

  RemoveCaptionOrTitleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCaptionOrTitleCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveCaptionOrTitleCommandArchive& from);
  void MergeFrom(const RemoveCaptionOrTitleCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCaptionOrTitleCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.RemoveCaptionOrTitleCommandArchive";
  }
  protected:
  explicit RemoveCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kDrawableInfoIdPathFieldNumber = 2,
    kRemovedCaptionOrTitleInfoFieldNumber = 3,
    kRemovedCaptionOrTitleUuidFieldNumber = 4,
    kCaptionOrTitleKindFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath drawable_info_id_path = 2;
  bool has_drawable_info_id_path() const;
  private:
  bool _internal_has_drawable_info_id_path() const;
  public:
  void clear_drawable_info_id_path();
  const ::TSP::UUIDPath& drawable_info_id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_drawable_info_id_path();
  ::TSP::UUIDPath* mutable_drawable_info_id_path();
  void set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_drawable_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_drawable_info_id_path();
  public:
  void unsafe_arena_set_allocated_drawable_info_id_path(
      ::TSP::UUIDPath* drawable_info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_drawable_info_id_path();

  // optional .TSP.Reference removed_caption_or_title_info = 3;
  bool has_removed_caption_or_title_info() const;
  private:
  bool _internal_has_removed_caption_or_title_info() const;
  public:
  void clear_removed_caption_or_title_info();
  const ::TSP::Reference& removed_caption_or_title_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_removed_caption_or_title_info();
  ::TSP::Reference* mutable_removed_caption_or_title_info();
  void set_allocated_removed_caption_or_title_info(::TSP::Reference* removed_caption_or_title_info);
  private:
  const ::TSP::Reference& _internal_removed_caption_or_title_info() const;
  ::TSP::Reference* _internal_mutable_removed_caption_or_title_info();
  public:
  void unsafe_arena_set_allocated_removed_caption_or_title_info(
      ::TSP::Reference* removed_caption_or_title_info);
  ::TSP::Reference* unsafe_arena_release_removed_caption_or_title_info();

  // optional .TSP.UUID removed_caption_or_title_uuid = 4;
  bool has_removed_caption_or_title_uuid() const;
  private:
  bool _internal_has_removed_caption_or_title_uuid() const;
  public:
  void clear_removed_caption_or_title_uuid();
  const ::TSP::UUID& removed_caption_or_title_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_removed_caption_or_title_uuid();
  ::TSP::UUID* mutable_removed_caption_or_title_uuid();
  void set_allocated_removed_caption_or_title_uuid(::TSP::UUID* removed_caption_or_title_uuid);
  private:
  const ::TSP::UUID& _internal_removed_caption_or_title_uuid() const;
  ::TSP::UUID* _internal_mutable_removed_caption_or_title_uuid();
  public:
  void unsafe_arena_set_allocated_removed_caption_or_title_uuid(
      ::TSP::UUID* removed_caption_or_title_uuid);
  ::TSP::UUID* unsafe_arena_release_removed_caption_or_title_uuid();

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
  bool has_caption_or_title_kind() const;
  private:
  bool _internal_has_caption_or_title_kind() const;
  public:
  void clear_caption_or_title_kind();
  ::TSD::CaptionOrTitleKind caption_or_title_kind() const;
  void set_caption_or_title_kind(::TSD::CaptionOrTitleKind value);
  private:
  ::TSD::CaptionOrTitleKind _internal_caption_or_title_kind() const;
  void _internal_set_caption_or_title_kind(::TSD::CaptionOrTitleKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.RemoveCaptionOrTitleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::UUIDPath* drawable_info_id_path_;
  ::TSP::Reference* removed_caption_or_title_info_;
  ::TSP::UUID* removed_caption_or_title_uuid_;
  int caption_or_title_kind_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// -------------------------------------------------------------------

class SetCaptionOrTitleVisibilityCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSD.SetCaptionOrTitleVisibilityCommandArchive) */ {
 public:
  inline SetCaptionOrTitleVisibilityCommandArchive() : SetCaptionOrTitleVisibilityCommandArchive(nullptr) {}
  ~SetCaptionOrTitleVisibilityCommandArchive() override;
  explicit constexpr SetCaptionOrTitleVisibilityCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCaptionOrTitleVisibilityCommandArchive(const SetCaptionOrTitleVisibilityCommandArchive& from);
  SetCaptionOrTitleVisibilityCommandArchive(SetCaptionOrTitleVisibilityCommandArchive&& from) noexcept
    : SetCaptionOrTitleVisibilityCommandArchive() {
    *this = ::std::move(from);
  }

  inline SetCaptionOrTitleVisibilityCommandArchive& operator=(const SetCaptionOrTitleVisibilityCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCaptionOrTitleVisibilityCommandArchive& operator=(SetCaptionOrTitleVisibilityCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCaptionOrTitleVisibilityCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCaptionOrTitleVisibilityCommandArchive* internal_default_instance() {
    return reinterpret_cast<const SetCaptionOrTitleVisibilityCommandArchive*>(
               &_SetCaptionOrTitleVisibilityCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SetCaptionOrTitleVisibilityCommandArchive& a, SetCaptionOrTitleVisibilityCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCaptionOrTitleVisibilityCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCaptionOrTitleVisibilityCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCaptionOrTitleVisibilityCommandArchive* New() const final {
    return CreateMaybeMessage<SetCaptionOrTitleVisibilityCommandArchive>(nullptr);
  }

  SetCaptionOrTitleVisibilityCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCaptionOrTitleVisibilityCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCaptionOrTitleVisibilityCommandArchive& from);
  void MergeFrom(const SetCaptionOrTitleVisibilityCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCaptionOrTitleVisibilityCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSD.SetCaptionOrTitleVisibilityCommandArchive";
  }
  protected:
  explicit SetCaptionOrTitleVisibilityCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kHiddenFieldNumber = 3,
    kWasHiddenFieldNumber = 4,
    kCaptionOrTitleKindFieldNumber = 2,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional bool hidden = 3;
  bool has_hidden() const;
  private:
  bool _internal_has_hidden() const;
  public:
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // optional bool was_hidden = 4;
  bool has_was_hidden() const;
  private:
  bool _internal_has_was_hidden() const;
  public:
  void clear_was_hidden();
  bool was_hidden() const;
  void set_was_hidden(bool value);
  private:
  bool _internal_was_hidden() const;
  void _internal_set_was_hidden(bool value);
  public:

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
  bool has_caption_or_title_kind() const;
  private:
  bool _internal_has_caption_or_title_kind() const;
  public:
  void clear_caption_or_title_kind();
  ::TSD::CaptionOrTitleKind caption_or_title_kind() const;
  void set_caption_or_title_kind(::TSD::CaptionOrTitleKind value);
  private:
  ::TSD::CaptionOrTitleKind _internal_caption_or_title_kind() const;
  void _internal_set_caption_or_title_kind(::TSD::CaptionOrTitleKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSD.SetCaptionOrTitleVisibilityCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::InfoCommandArchive* super_;
  bool hidden_;
  bool was_hidden_;
  int caption_or_title_kind_;
  friend struct ::TableStruct_TSDCommandArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UndoObjectArchive

// optional .TSP.Reference stylesheet = 2;
inline bool UndoObjectArchive::_internal_has_stylesheet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stylesheet_ != nullptr);
  return value;
}
inline bool UndoObjectArchive::has_stylesheet() const {
  return _internal_has_stylesheet();
}
inline const ::TSP::Reference& UndoObjectArchive::_internal_stylesheet() const {
  const ::TSP::Reference* p = stylesheet_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UndoObjectArchive::stylesheet() const {
  // @@protoc_insertion_point(field_get:TSD.UndoObjectArchive.stylesheet)
  return _internal_stylesheet();
}
inline void UndoObjectArchive::unsafe_arena_set_allocated_stylesheet(
    ::TSP::Reference* stylesheet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  stylesheet_ = stylesheet;
  if (stylesheet) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.UndoObjectArchive.stylesheet)
}
inline ::TSP::Reference* UndoObjectArchive::release_stylesheet() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UndoObjectArchive::unsafe_arena_release_stylesheet() {
  // @@protoc_insertion_point(field_release:TSD.UndoObjectArchive.stylesheet)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UndoObjectArchive::_internal_mutable_stylesheet() {
  _has_bits_[0] |= 0x00000001u;
  if (stylesheet_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    stylesheet_ = p;
  }
  return stylesheet_;
}
inline ::TSP::Reference* UndoObjectArchive::mutable_stylesheet() {
  // @@protoc_insertion_point(field_mutable:TSD.UndoObjectArchive.stylesheet)
  return _internal_mutable_stylesheet();
}
inline void UndoObjectArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet_);
  }
  if (stylesheet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stylesheet)->GetArena();
    if (message_arena != submessage_arena) {
      stylesheet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stylesheet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stylesheet_ = stylesheet;
  // @@protoc_insertion_point(field_set_allocated:TSD.UndoObjectArchive.stylesheet)
}

// repeated .TSP.Reference objects = 1;
inline int UndoObjectArchive::_internal_objects_size() const {
  return objects_.size();
}
inline int UndoObjectArchive::objects_size() const {
  return _internal_objects_size();
}
inline ::TSP::Reference* UndoObjectArchive::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.UndoObjectArchive.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UndoObjectArchive::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:TSD.UndoObjectArchive.objects)
  return &objects_;
}
inline const ::TSP::Reference& UndoObjectArchive::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::TSP::Reference& UndoObjectArchive::objects(int index) const {
  // @@protoc_insertion_point(field_get:TSD.UndoObjectArchive.objects)
  return _internal_objects(index);
}
inline ::TSP::Reference* UndoObjectArchive::_internal_add_objects() {
  return objects_.Add();
}
inline ::TSP::Reference* UndoObjectArchive::add_objects() {
  // @@protoc_insertion_point(field_add:TSD.UndoObjectArchive.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UndoObjectArchive::objects() const {
  // @@protoc_insertion_point(field_list:TSD.UndoObjectArchive.objects)
  return objects_;
}

// repeated string keys = 3;
inline int UndoObjectArchive::_internal_keys_size() const {
  return keys_.size();
}
inline int UndoObjectArchive::keys_size() const {
  return _internal_keys_size();
}
inline void UndoObjectArchive::clear_keys() {
  keys_.Clear();
}
inline std::string* UndoObjectArchive::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:TSD.UndoObjectArchive.keys)
  return _internal_add_keys();
}
inline const std::string& UndoObjectArchive::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& UndoObjectArchive::keys(int index) const {
  // @@protoc_insertion_point(field_get:TSD.UndoObjectArchive.keys)
  return _internal_keys(index);
}
inline std::string* UndoObjectArchive::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.UndoObjectArchive.keys)
  return keys_.Mutable(index);
}
inline void UndoObjectArchive::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSD.UndoObjectArchive.keys)
  keys_.Mutable(index)->assign(value);
}
inline void UndoObjectArchive::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSD.UndoObjectArchive.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void UndoObjectArchive::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSD.UndoObjectArchive.keys)
}
inline void UndoObjectArchive::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSD.UndoObjectArchive.keys)
}
inline std::string* UndoObjectArchive::_internal_add_keys() {
  return keys_.Add();
}
inline void UndoObjectArchive::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSD.UndoObjectArchive.keys)
}
inline void UndoObjectArchive::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSD.UndoObjectArchive.keys)
}
inline void UndoObjectArchive::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSD.UndoObjectArchive.keys)
}
inline void UndoObjectArchive::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSD.UndoObjectArchive.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UndoObjectArchive::keys() const {
  // @@protoc_insertion_point(field_list:TSD.UndoObjectArchive.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UndoObjectArchive::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:TSD.UndoObjectArchive.keys)
  return &keys_;
}

// repeated uint32 counts = 4;
inline int UndoObjectArchive::_internal_counts_size() const {
  return counts_.size();
}
inline int UndoObjectArchive::counts_size() const {
  return _internal_counts_size();
}
inline void UndoObjectArchive::clear_counts() {
  counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoObjectArchive::_internal_counts(int index) const {
  return counts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UndoObjectArchive::counts(int index) const {
  // @@protoc_insertion_point(field_get:TSD.UndoObjectArchive.counts)
  return _internal_counts(index);
}
inline void UndoObjectArchive::set_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSD.UndoObjectArchive.counts)
}
inline void UndoObjectArchive::_internal_add_counts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  counts_.Add(value);
}
inline void UndoObjectArchive::add_counts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_counts(value);
  // @@protoc_insertion_point(field_add:TSD.UndoObjectArchive.counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UndoObjectArchive::_internal_counts() const {
  return counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UndoObjectArchive::counts() const {
  // @@protoc_insertion_point(field_list:TSD.UndoObjectArchive.counts)
  return _internal_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UndoObjectArchive::_internal_mutable_counts() {
  return &counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UndoObjectArchive::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:TSD.UndoObjectArchive.counts)
  return _internal_mutable_counts();
}

// -------------------------------------------------------------------

// GroupDrawablesCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool GroupDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool GroupDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GroupDrawablesCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GroupDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.GroupDrawablesCommandArchive.super)
  return _internal_super();
}
inline void GroupDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GroupDrawablesCommandArchive.super)
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.GroupDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* GroupDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.GroupDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void GroupDrawablesCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.GroupDrawablesCommandArchive.super)
}

// repeated .TSP.Reference drawables = 2;
inline int GroupDrawablesCommandArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int GroupDrawablesCommandArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.GroupDrawablesCommandArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GroupDrawablesCommandArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TSD.GroupDrawablesCommandArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TSD.GroupDrawablesCommandArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TSD.GroupDrawablesCommandArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GroupDrawablesCommandArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TSD.GroupDrawablesCommandArchive.drawables)
  return drawables_;
}

// optional .TSP.Reference group = 3;
inline bool GroupDrawablesCommandArchive::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || group_ != nullptr);
  return value;
}
inline bool GroupDrawablesCommandArchive::has_group() const {
  return _internal_has_group();
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::_internal_group() const {
  const ::TSP::Reference* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& GroupDrawablesCommandArchive::group() const {
  // @@protoc_insertion_point(field_get:TSD.GroupDrawablesCommandArchive.group)
  return _internal_group();
}
inline void GroupDrawablesCommandArchive::unsafe_arena_set_allocated_group(
    ::TSP::Reference* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GroupDrawablesCommandArchive.group)
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::release_group() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = group_;
  group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:TSD.GroupDrawablesCommandArchive.group)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::_internal_mutable_group() {
  _has_bits_[0] |= 0x00000002u;
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::TSP::Reference* GroupDrawablesCommandArchive::mutable_group() {
  // @@protoc_insertion_point(field_mutable:TSD.GroupDrawablesCommandArchive.group)
  return _internal_mutable_group();
}
inline void GroupDrawablesCommandArchive::set_allocated_group(::TSP::Reference* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group)->GetArena();
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:TSD.GroupDrawablesCommandArchive.group)
}

// -------------------------------------------------------------------

// UngroupGroupCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool UngroupGroupCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UngroupGroupCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& UngroupGroupCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& UngroupGroupCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.UngroupGroupCommandArchive.super)
  return _internal_super();
}
inline void UngroupGroupCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.UngroupGroupCommandArchive.super)
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.UngroupGroupCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* UngroupGroupCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.UngroupGroupCommandArchive.super)
  return _internal_mutable_super();
}
inline void UngroupGroupCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.UngroupGroupCommandArchive.super)
}

// repeated .TSP.Reference drawables = 2;
inline int UngroupGroupCommandArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int UngroupGroupCommandArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* UngroupGroupCommandArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.UngroupGroupCommandArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
UngroupGroupCommandArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TSD.UngroupGroupCommandArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TSD.UngroupGroupCommandArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* UngroupGroupCommandArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* UngroupGroupCommandArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TSD.UngroupGroupCommandArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
UngroupGroupCommandArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TSD.UngroupGroupCommandArchive.drawables)
  return drawables_;
}

// optional .TSP.Reference group = 3;
inline bool UngroupGroupCommandArchive::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || group_ != nullptr);
  return value;
}
inline bool UngroupGroupCommandArchive::has_group() const {
  return _internal_has_group();
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::_internal_group() const {
  const ::TSP::Reference* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& UngroupGroupCommandArchive::group() const {
  // @@protoc_insertion_point(field_get:TSD.UngroupGroupCommandArchive.group)
  return _internal_group();
}
inline void UngroupGroupCommandArchive::unsafe_arena_set_allocated_group(
    ::TSP::Reference* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.UngroupGroupCommandArchive.group)
}
inline ::TSP::Reference* UngroupGroupCommandArchive::release_group() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = group_;
  group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* UngroupGroupCommandArchive::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:TSD.UngroupGroupCommandArchive.group)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::TSP::Reference* UngroupGroupCommandArchive::_internal_mutable_group() {
  _has_bits_[0] |= 0x00000002u;
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::TSP::Reference* UngroupGroupCommandArchive::mutable_group() {
  // @@protoc_insertion_point(field_mutable:TSD.UngroupGroupCommandArchive.group)
  return _internal_mutable_group();
}
inline void UngroupGroupCommandArchive::set_allocated_group(::TSP::Reference* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group)->GetArena();
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:TSD.UngroupGroupCommandArchive.group)
}

// -------------------------------------------------------------------

// ContainerRemoveChildrenCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainerRemoveChildrenCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ContainerRemoveChildrenCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainerRemoveChildrenCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainerRemoveChildrenCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.super)
  return _internal_super();
}
inline void ContainerRemoveChildrenCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerRemoveChildrenCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ContainerRemoveChildrenCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.super)
  return _internal_mutable_super();
}
inline void ContainerRemoveChildrenCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.super)
}

// optional .TSP.UUIDPath container_id_path = 2;
inline bool ContainerRemoveChildrenCommandArchive::_internal_has_container_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || container_id_path_ != nullptr);
  return value;
}
inline bool ContainerRemoveChildrenCommandArchive::has_container_id_path() const {
  return _internal_has_container_id_path();
}
inline const ::TSP::UUIDPath& ContainerRemoveChildrenCommandArchive::_internal_container_id_path() const {
  const ::TSP::UUIDPath* p = container_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ContainerRemoveChildrenCommandArchive::container_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.container_id_path)
  return _internal_container_id_path();
}
inline void ContainerRemoveChildrenCommandArchive::unsafe_arena_set_allocated_container_id_path(
    ::TSP::UUIDPath* container_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path_);
  }
  container_id_path_ = container_id_path;
  if (container_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.container_id_path)
}
inline ::TSP::UUIDPath* ContainerRemoveChildrenCommandArchive::release_container_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = container_id_path_;
  container_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* ContainerRemoveChildrenCommandArchive::unsafe_arena_release_container_id_path() {
  // @@protoc_insertion_point(field_release:TSD.ContainerRemoveChildrenCommandArchive.container_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = container_id_path_;
  container_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ContainerRemoveChildrenCommandArchive::_internal_mutable_container_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (container_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    container_id_path_ = p;
  }
  return container_id_path_;
}
inline ::TSP::UUIDPath* ContainerRemoveChildrenCommandArchive::mutable_container_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.container_id_path)
  return _internal_mutable_container_id_path();
}
inline void ContainerRemoveChildrenCommandArchive::set_allocated_container_id_path(::TSP::UUIDPath* container_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path_);
  }
  if (container_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      container_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  container_id_path_ = container_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerRemoveChildrenCommandArchive.container_id_path)
}

// repeated .TSK.RemoveIdOperationArgs args_list = 3;
inline int ContainerRemoveChildrenCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int ContainerRemoveChildrenCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RemoveIdOperationArgs* ContainerRemoveChildrenCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >*
ContainerRemoveChildrenCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerRemoveChildrenCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RemoveIdOperationArgs& ContainerRemoveChildrenCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RemoveIdOperationArgs& ContainerRemoveChildrenCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RemoveIdOperationArgs* ContainerRemoveChildrenCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RemoveIdOperationArgs* ContainerRemoveChildrenCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TSD.ContainerRemoveChildrenCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RemoveIdOperationArgs >&
ContainerRemoveChildrenCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerRemoveChildrenCommandArchive.args_list)
  return args_list_;
}

// repeated .TSP.Reference children = 4;
inline int ContainerRemoveChildrenCommandArchive::_internal_children_size() const {
  return children_.size();
}
inline int ContainerRemoveChildrenCommandArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveChildrenCommandArchive.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainerRemoveChildrenCommandArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerRemoveChildrenCommandArchive.children)
  return &children_;
}
inline const ::TSP::Reference& ContainerRemoveChildrenCommandArchive::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::TSP::Reference& ContainerRemoveChildrenCommandArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveChildrenCommandArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::_internal_add_children() {
  return children_.Add();
}
inline ::TSP::Reference* ContainerRemoveChildrenCommandArchive::add_children() {
  // @@protoc_insertion_point(field_add:TSD.ContainerRemoveChildrenCommandArchive.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainerRemoveChildrenCommandArchive::children() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerRemoveChildrenCommandArchive.children)
  return children_;
}

// -------------------------------------------------------------------

// ContainerRemoveDrawablesCommandArchive

// required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
inline bool ContainerRemoveDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ContainerRemoveDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ContainerRemoveDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::ContainerRemoveChildrenCommandArchive& ContainerRemoveDrawablesCommandArchive::_internal_super() const {
  const ::TSD::ContainerRemoveChildrenCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerRemoveChildrenCommandArchive&>(
      ::TSD::_ContainerRemoveChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerRemoveChildrenCommandArchive& ContainerRemoveDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerRemoveDrawablesCommandArchive.super)
  return _internal_super();
}
inline void ContainerRemoveDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerRemoveChildrenCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerRemoveDrawablesCommandArchive.super)
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* ContainerRemoveDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerRemoveChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* ContainerRemoveDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerRemoveDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerRemoveChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* ContainerRemoveDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerRemoveChildrenCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* ContainerRemoveDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerRemoveDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void ContainerRemoveDrawablesCommandArchive::set_allocated_super(::TSD::ContainerRemoveChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerRemoveDrawablesCommandArchive.super)
}

// -------------------------------------------------------------------

// ContainerInsertChildrenCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainerInsertChildrenCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ContainerInsertChildrenCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainerInsertChildrenCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainerInsertChildrenCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.super)
  return _internal_super();
}
inline void ContainerInsertChildrenCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerInsertChildrenCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerInsertChildrenCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ContainerInsertChildrenCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.super)
  return _internal_mutable_super();
}
inline void ContainerInsertChildrenCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerInsertChildrenCommandArchive.super)
}

// optional .TSP.UUIDPath container_id_path = 2;
inline bool ContainerInsertChildrenCommandArchive::_internal_has_container_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || container_id_path_ != nullptr);
  return value;
}
inline bool ContainerInsertChildrenCommandArchive::has_container_id_path() const {
  return _internal_has_container_id_path();
}
inline const ::TSP::UUIDPath& ContainerInsertChildrenCommandArchive::_internal_container_id_path() const {
  const ::TSP::UUIDPath* p = container_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ContainerInsertChildrenCommandArchive::container_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.container_id_path)
  return _internal_container_id_path();
}
inline void ContainerInsertChildrenCommandArchive::unsafe_arena_set_allocated_container_id_path(
    ::TSP::UUIDPath* container_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path_);
  }
  container_id_path_ = container_id_path;
  if (container_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerInsertChildrenCommandArchive.container_id_path)
}
inline ::TSP::UUIDPath* ContainerInsertChildrenCommandArchive::release_container_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = container_id_path_;
  container_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* ContainerInsertChildrenCommandArchive::unsafe_arena_release_container_id_path() {
  // @@protoc_insertion_point(field_release:TSD.ContainerInsertChildrenCommandArchive.container_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = container_id_path_;
  container_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ContainerInsertChildrenCommandArchive::_internal_mutable_container_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (container_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    container_id_path_ = p;
  }
  return container_id_path_;
}
inline ::TSP::UUIDPath* ContainerInsertChildrenCommandArchive::mutable_container_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.container_id_path)
  return _internal_mutable_container_id_path();
}
inline void ContainerInsertChildrenCommandArchive::set_allocated_container_id_path(::TSP::UUIDPath* container_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path_);
  }
  if (container_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      container_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  container_id_path_ = container_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerInsertChildrenCommandArchive.container_id_path)
}

// repeated .TSP.Reference children = 3;
inline int ContainerInsertChildrenCommandArchive::_internal_children_size() const {
  return children_.size();
}
inline int ContainerInsertChildrenCommandArchive::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainerInsertChildrenCommandArchive::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerInsertChildrenCommandArchive.children)
  return &children_;
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::children(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.children)
  return _internal_children(index);
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::_internal_add_children() {
  return children_.Add();
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::add_children() {
  // @@protoc_insertion_point(field_add:TSD.ContainerInsertChildrenCommandArchive.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainerInsertChildrenCommandArchive::children() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerInsertChildrenCommandArchive.children)
  return children_;
}

// repeated .TSK.AddIdOperationArgs args_list = 4;
inline int ContainerInsertChildrenCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int ContainerInsertChildrenCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::AddIdOperationArgs* ContainerInsertChildrenCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >*
ContainerInsertChildrenCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerInsertChildrenCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::AddIdOperationArgs& ContainerInsertChildrenCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::AddIdOperationArgs& ContainerInsertChildrenCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::AddIdOperationArgs* ContainerInsertChildrenCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::AddIdOperationArgs* ContainerInsertChildrenCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TSD.ContainerInsertChildrenCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AddIdOperationArgs >&
ContainerInsertChildrenCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerInsertChildrenCommandArchive.args_list)
  return args_list_;
}

// repeated .TSP.UUID custom_format_keys = 5;
inline int ContainerInsertChildrenCommandArchive::_internal_custom_format_keys_size() const {
  return custom_format_keys_.size();
}
inline int ContainerInsertChildrenCommandArchive::custom_format_keys_size() const {
  return _internal_custom_format_keys_size();
}
inline ::TSP::UUID* ContainerInsertChildrenCommandArchive::mutable_custom_format_keys(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.custom_format_keys)
  return custom_format_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
ContainerInsertChildrenCommandArchive::mutable_custom_format_keys() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerInsertChildrenCommandArchive.custom_format_keys)
  return &custom_format_keys_;
}
inline const ::TSP::UUID& ContainerInsertChildrenCommandArchive::_internal_custom_format_keys(int index) const {
  return custom_format_keys_.Get(index);
}
inline const ::TSP::UUID& ContainerInsertChildrenCommandArchive::custom_format_keys(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.custom_format_keys)
  return _internal_custom_format_keys(index);
}
inline ::TSP::UUID* ContainerInsertChildrenCommandArchive::_internal_add_custom_format_keys() {
  return custom_format_keys_.Add();
}
inline ::TSP::UUID* ContainerInsertChildrenCommandArchive::add_custom_format_keys() {
  // @@protoc_insertion_point(field_add:TSD.ContainerInsertChildrenCommandArchive.custom_format_keys)
  return _internal_add_custom_format_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
ContainerInsertChildrenCommandArchive::custom_format_keys() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerInsertChildrenCommandArchive.custom_format_keys)
  return custom_format_keys_;
}

// optional .TSP.Reference undo_object = 6;
inline bool ContainerInsertChildrenCommandArchive::_internal_has_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || undo_object_ != nullptr);
  return value;
}
inline bool ContainerInsertChildrenCommandArchive::has_undo_object() const {
  return _internal_has_undo_object();
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::_internal_undo_object() const {
  const ::TSP::Reference* p = undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ContainerInsertChildrenCommandArchive::undo_object() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertChildrenCommandArchive.undo_object)
  return _internal_undo_object();
}
inline void ContainerInsertChildrenCommandArchive::unsafe_arena_set_allocated_undo_object(
    ::TSP::Reference* undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  undo_object_ = undo_object;
  if (undo_object) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerInsertChildrenCommandArchive.undo_object)
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::release_undo_object() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::unsafe_arena_release_undo_object() {
  // @@protoc_insertion_point(field_release:TSD.ContainerInsertChildrenCommandArchive.undo_object)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::_internal_mutable_undo_object() {
  _has_bits_[0] |= 0x00000004u;
  if (undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    undo_object_ = p;
  }
  return undo_object_;
}
inline ::TSP::Reference* ContainerInsertChildrenCommandArchive::mutable_undo_object() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertChildrenCommandArchive.undo_object)
  return _internal_mutable_undo_object();
}
inline void ContainerInsertChildrenCommandArchive::set_allocated_undo_object(::TSP::Reference* undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  if (undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  undo_object_ = undo_object;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerInsertChildrenCommandArchive.undo_object)
}

// -------------------------------------------------------------------

// ContainerInsertDrawablesCommandArchive

// required .TSD.ContainerInsertChildrenCommandArchive super = 1;
inline bool ContainerInsertDrawablesCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ContainerInsertDrawablesCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ContainerInsertDrawablesCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::ContainerInsertChildrenCommandArchive& ContainerInsertDrawablesCommandArchive::_internal_super() const {
  const ::TSD::ContainerInsertChildrenCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerInsertChildrenCommandArchive&>(
      ::TSD::_ContainerInsertChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerInsertChildrenCommandArchive& ContainerInsertDrawablesCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertDrawablesCommandArchive.super)
  return _internal_super();
}
inline void ContainerInsertDrawablesCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerInsertChildrenCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerInsertDrawablesCommandArchive.super)
}
inline ::TSD::ContainerInsertChildrenCommandArchive* ContainerInsertDrawablesCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerInsertChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* ContainerInsertDrawablesCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerInsertDrawablesCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerInsertChildrenCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* ContainerInsertDrawablesCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerInsertChildrenCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* ContainerInsertDrawablesCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertDrawablesCommandArchive.super)
  return _internal_mutable_super();
}
inline void ContainerInsertDrawablesCommandArchive::set_allocated_super(::TSD::ContainerInsertChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerInsertDrawablesCommandArchive.super)
}

// repeated .TSP.Reference drawables = 2;
inline int ContainerInsertDrawablesCommandArchive::_internal_drawables_size() const {
  return drawables_.size();
}
inline int ContainerInsertDrawablesCommandArchive::drawables_size() const {
  return _internal_drawables_size();
}
inline ::TSP::Reference* ContainerInsertDrawablesCommandArchive::mutable_drawables(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerInsertDrawablesCommandArchive.drawables)
  return drawables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ContainerInsertDrawablesCommandArchive::mutable_drawables() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerInsertDrawablesCommandArchive.drawables)
  return &drawables_;
}
inline const ::TSP::Reference& ContainerInsertDrawablesCommandArchive::_internal_drawables(int index) const {
  return drawables_.Get(index);
}
inline const ::TSP::Reference& ContainerInsertDrawablesCommandArchive::drawables(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerInsertDrawablesCommandArchive.drawables)
  return _internal_drawables(index);
}
inline ::TSP::Reference* ContainerInsertDrawablesCommandArchive::_internal_add_drawables() {
  return drawables_.Add();
}
inline ::TSP::Reference* ContainerInsertDrawablesCommandArchive::add_drawables() {
  // @@protoc_insertion_point(field_add:TSD.ContainerInsertDrawablesCommandArchive.drawables)
  return _internal_add_drawables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ContainerInsertDrawablesCommandArchive::drawables() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerInsertDrawablesCommandArchive.drawables)
  return drawables_;
}

// -------------------------------------------------------------------

// ContainerReorderChildrenCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ContainerReorderChildrenCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ContainerReorderChildrenCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ContainerReorderChildrenCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ContainerReorderChildrenCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.super)
  return _internal_super();
}
inline void ContainerReorderChildrenCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerReorderChildrenCommandArchive.super)
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ContainerReorderChildrenCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ContainerReorderChildrenCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.super)
  return _internal_mutable_super();
}
inline void ContainerReorderChildrenCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerReorderChildrenCommandArchive.super)
}

// optional .TSP.UUIDPath container_id_path = 2;
inline bool ContainerReorderChildrenCommandArchive::_internal_has_container_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || container_id_path_ != nullptr);
  return value;
}
inline bool ContainerReorderChildrenCommandArchive::has_container_id_path() const {
  return _internal_has_container_id_path();
}
inline const ::TSP::UUIDPath& ContainerReorderChildrenCommandArchive::_internal_container_id_path() const {
  const ::TSP::UUIDPath* p = container_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& ContainerReorderChildrenCommandArchive::container_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.container_id_path)
  return _internal_container_id_path();
}
inline void ContainerReorderChildrenCommandArchive::unsafe_arena_set_allocated_container_id_path(
    ::TSP::UUIDPath* container_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path_);
  }
  container_id_path_ = container_id_path;
  if (container_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ContainerReorderChildrenCommandArchive.container_id_path)
}
inline ::TSP::UUIDPath* ContainerReorderChildrenCommandArchive::release_container_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = container_id_path_;
  container_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* ContainerReorderChildrenCommandArchive::unsafe_arena_release_container_id_path() {
  // @@protoc_insertion_point(field_release:TSD.ContainerReorderChildrenCommandArchive.container_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = container_id_path_;
  container_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* ContainerReorderChildrenCommandArchive::_internal_mutable_container_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (container_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    container_id_path_ = p;
  }
  return container_id_path_;
}
inline ::TSP::UUIDPath* ContainerReorderChildrenCommandArchive::mutable_container_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.container_id_path)
  return _internal_mutable_container_id_path();
}
inline void ContainerReorderChildrenCommandArchive::set_allocated_container_id_path(::TSP::UUIDPath* container_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path_);
  }
  if (container_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      container_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  container_id_path_ = container_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.ContainerReorderChildrenCommandArchive.container_id_path)
}

// repeated .TSK.RearrangeIdOperationArgs args_list = 3;
inline int ContainerReorderChildrenCommandArchive::_internal_args_list_size() const {
  return args_list_.size();
}
inline int ContainerReorderChildrenCommandArchive::args_list_size() const {
  return _internal_args_list_size();
}
inline ::TSK::RearrangeIdOperationArgs* ContainerReorderChildrenCommandArchive::mutable_args_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.ContainerReorderChildrenCommandArchive.args_list)
  return args_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >*
ContainerReorderChildrenCommandArchive::mutable_args_list() {
  // @@protoc_insertion_point(field_mutable_list:TSD.ContainerReorderChildrenCommandArchive.args_list)
  return &args_list_;
}
inline const ::TSK::RearrangeIdOperationArgs& ContainerReorderChildrenCommandArchive::_internal_args_list(int index) const {
  return args_list_.Get(index);
}
inline const ::TSK::RearrangeIdOperationArgs& ContainerReorderChildrenCommandArchive::args_list(int index) const {
  // @@protoc_insertion_point(field_get:TSD.ContainerReorderChildrenCommandArchive.args_list)
  return _internal_args_list(index);
}
inline ::TSK::RearrangeIdOperationArgs* ContainerReorderChildrenCommandArchive::_internal_add_args_list() {
  return args_list_.Add();
}
inline ::TSK::RearrangeIdOperationArgs* ContainerReorderChildrenCommandArchive::add_args_list() {
  // @@protoc_insertion_point(field_add:TSD.ContainerReorderChildrenCommandArchive.args_list)
  return _internal_add_args_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::RearrangeIdOperationArgs >&
ContainerReorderChildrenCommandArchive::args_list() const {
  // @@protoc_insertion_point(field_list:TSD.ContainerReorderChildrenCommandArchive.args_list)
  return args_list_;
}

// -------------------------------------------------------------------

// GroupUngroupInformativeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool GroupUngroupInformativeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool GroupUngroupInformativeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GroupUngroupInformativeCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GroupUngroupInformativeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.GroupUngroupInformativeCommandArchive.super)
  return _internal_super();
}
inline void GroupUngroupInformativeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GroupUngroupInformativeCommandArchive.super)
}
inline ::TSK::CommandArchive* GroupUngroupInformativeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* GroupUngroupInformativeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.GroupUngroupInformativeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GroupUngroupInformativeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* GroupUngroupInformativeCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.GroupUngroupInformativeCommandArchive.super)
  return _internal_mutable_super();
}
inline void GroupUngroupInformativeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.GroupUngroupInformativeCommandArchive.super)
}

// repeated .TSP.Reference removed_infos = 2;
inline int GroupUngroupInformativeCommandArchive::_internal_removed_infos_size() const {
  return removed_infos_.size();
}
inline int GroupUngroupInformativeCommandArchive::removed_infos_size() const {
  return _internal_removed_infos_size();
}
inline ::TSP::Reference* GroupUngroupInformativeCommandArchive::mutable_removed_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.GroupUngroupInformativeCommandArchive.removed_infos)
  return removed_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GroupUngroupInformativeCommandArchive::mutable_removed_infos() {
  // @@protoc_insertion_point(field_mutable_list:TSD.GroupUngroupInformativeCommandArchive.removed_infos)
  return &removed_infos_;
}
inline const ::TSP::Reference& GroupUngroupInformativeCommandArchive::_internal_removed_infos(int index) const {
  return removed_infos_.Get(index);
}
inline const ::TSP::Reference& GroupUngroupInformativeCommandArchive::removed_infos(int index) const {
  // @@protoc_insertion_point(field_get:TSD.GroupUngroupInformativeCommandArchive.removed_infos)
  return _internal_removed_infos(index);
}
inline ::TSP::Reference* GroupUngroupInformativeCommandArchive::_internal_add_removed_infos() {
  return removed_infos_.Add();
}
inline ::TSP::Reference* GroupUngroupInformativeCommandArchive::add_removed_infos() {
  // @@protoc_insertion_point(field_add:TSD.GroupUngroupInformativeCommandArchive.removed_infos)
  return _internal_add_removed_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GroupUngroupInformativeCommandArchive::removed_infos() const {
  // @@protoc_insertion_point(field_list:TSD.GroupUngroupInformativeCommandArchive.removed_infos)
  return removed_infos_;
}

// repeated .TSP.Reference inserted_infos = 3;
inline int GroupUngroupInformativeCommandArchive::_internal_inserted_infos_size() const {
  return inserted_infos_.size();
}
inline int GroupUngroupInformativeCommandArchive::inserted_infos_size() const {
  return _internal_inserted_infos_size();
}
inline ::TSP::Reference* GroupUngroupInformativeCommandArchive::mutable_inserted_infos(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.GroupUngroupInformativeCommandArchive.inserted_infos)
  return inserted_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GroupUngroupInformativeCommandArchive::mutable_inserted_infos() {
  // @@protoc_insertion_point(field_mutable_list:TSD.GroupUngroupInformativeCommandArchive.inserted_infos)
  return &inserted_infos_;
}
inline const ::TSP::Reference& GroupUngroupInformativeCommandArchive::_internal_inserted_infos(int index) const {
  return inserted_infos_.Get(index);
}
inline const ::TSP::Reference& GroupUngroupInformativeCommandArchive::inserted_infos(int index) const {
  // @@protoc_insertion_point(field_get:TSD.GroupUngroupInformativeCommandArchive.inserted_infos)
  return _internal_inserted_infos(index);
}
inline ::TSP::Reference* GroupUngroupInformativeCommandArchive::_internal_add_inserted_infos() {
  return inserted_infos_.Add();
}
inline ::TSP::Reference* GroupUngroupInformativeCommandArchive::add_inserted_infos() {
  // @@protoc_insertion_point(field_add:TSD.GroupUngroupInformativeCommandArchive.inserted_infos)
  return _internal_add_inserted_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GroupUngroupInformativeCommandArchive::inserted_infos() const {
  // @@protoc_insertion_point(field_list:TSD.GroupUngroupInformativeCommandArchive.inserted_infos)
  return inserted_infos_;
}

// optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
inline bool GroupUngroupInformativeCommandArchive::_internal_has_command_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GroupUngroupInformativeCommandArchive::has_command_type() const {
  return _internal_has_command_type();
}
inline void GroupUngroupInformativeCommandArchive::clear_command_type() {
  command_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSD::GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::_internal_command_type() const {
  return static_cast< ::TSD::GroupUngroupInformativeCommandArchive_CommandType >(command_type_);
}
inline ::TSD::GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::command_type() const {
  // @@protoc_insertion_point(field_get:TSD.GroupUngroupInformativeCommandArchive.command_type)
  return _internal_command_type();
}
inline void GroupUngroupInformativeCommandArchive::_internal_set_command_type(::TSD::GroupUngroupInformativeCommandArchive_CommandType value) {
  assert(::TSD::GroupUngroupInformativeCommandArchive_CommandType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  command_type_ = value;
}
inline void GroupUngroupInformativeCommandArchive::set_command_type(::TSD::GroupUngroupInformativeCommandArchive_CommandType value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:TSD.GroupUngroupInformativeCommandArchive.command_type)
}

// -------------------------------------------------------------------

// InfoCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InfoCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InfoCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InfoCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InfoCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.InfoCommandArchive.super)
  return _internal_super();
}
inline void InfoCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoCommandArchive.super)
}
inline ::TSK::CommandArchive* InfoCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* InfoCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.InfoCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InfoCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InfoCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.InfoCommandArchive.super)
  return _internal_mutable_super();
}
inline void InfoCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoCommandArchive.super)
}

// optional .TSP.UUIDPath info_id_path = 2;
inline bool InfoCommandArchive::_internal_has_info_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_id_path_ != nullptr);
  return value;
}
inline bool InfoCommandArchive::has_info_id_path() const {
  return _internal_has_info_id_path();
}
inline const ::TSP::UUIDPath& InfoCommandArchive::_internal_info_id_path() const {
  const ::TSP::UUIDPath* p = info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& InfoCommandArchive::info_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.InfoCommandArchive.info_id_path)
  return _internal_info_id_path();
}
inline void InfoCommandArchive::unsafe_arena_set_allocated_info_id_path(
    ::TSP::UUIDPath* info_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_id_path_);
  }
  info_id_path_ = info_id_path;
  if (info_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoCommandArchive.info_id_path)
}
inline ::TSP::UUIDPath* InfoCommandArchive::release_info_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = info_id_path_;
  info_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* InfoCommandArchive::unsafe_arena_release_info_id_path() {
  // @@protoc_insertion_point(field_release:TSD.InfoCommandArchive.info_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = info_id_path_;
  info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* InfoCommandArchive::_internal_mutable_info_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    info_id_path_ = p;
  }
  return info_id_path_;
}
inline ::TSP::UUIDPath* InfoCommandArchive::mutable_info_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.InfoCommandArchive.info_id_path)
  return _internal_mutable_info_id_path();
}
inline void InfoCommandArchive::set_allocated_info_id_path(::TSP::UUIDPath* info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_id_path_);
  }
  if (info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_id_path_ = info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoCommandArchive.info_id_path)
}

// -------------------------------------------------------------------

// ConnectionLineConnectCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ConnectionLineConnectCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ConnectionLineConnectCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ConnectionLineConnectCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ConnectionLineConnectCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.super)
  return _internal_super();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ConnectionLineConnectCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ConnectionLineConnectCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ConnectionLineConnectCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ConnectionLineConnectCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.super)
  return _internal_mutable_super();
}
inline void ConnectionLineConnectCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.super)
}

// optional .TSP.UUID connected_from_id = 4;
inline bool ConnectionLineConnectCommandArchive::_internal_has_connected_from_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || connected_from_id_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_connected_from_id() const {
  return _internal_has_connected_from_id();
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::_internal_connected_from_id() const {
  const ::TSP::UUID* p = connected_from_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::connected_from_id() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.connected_from_id)
  return _internal_connected_from_id();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_connected_from_id(
    ::TSP::UUID* connected_from_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_from_id_);
  }
  connected_from_id_ = connected_from_id;
  if (connected_from_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.connected_from_id)
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::release_connected_from_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = connected_from_id_;
  connected_from_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::unsafe_arena_release_connected_from_id() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.connected_from_id)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = connected_from_id_;
  connected_from_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::_internal_mutable_connected_from_id() {
  _has_bits_[0] |= 0x00000002u;
  if (connected_from_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    connected_from_id_ = p;
  }
  return connected_from_id_;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::mutable_connected_from_id() {
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.connected_from_id)
  return _internal_mutable_connected_from_id();
}
inline void ConnectionLineConnectCommandArchive::set_allocated_connected_from_id(::TSP::UUID* connected_from_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_from_id_);
  }
  if (connected_from_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_from_id)->GetArena();
    if (message_arena != submessage_arena) {
      connected_from_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connected_from_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  connected_from_id_ = connected_from_id;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.connected_from_id)
}

// optional .TSP.UUID connected_to_id = 5;
inline bool ConnectionLineConnectCommandArchive::_internal_has_connected_to_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || connected_to_id_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_connected_to_id() const {
  return _internal_has_connected_to_id();
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::_internal_connected_to_id() const {
  const ::TSP::UUID* p = connected_to_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::connected_to_id() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.connected_to_id)
  return _internal_connected_to_id();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_connected_to_id(
    ::TSP::UUID* connected_to_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_to_id_);
  }
  connected_to_id_ = connected_to_id;
  if (connected_to_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.connected_to_id)
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::release_connected_to_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = connected_to_id_;
  connected_to_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::unsafe_arena_release_connected_to_id() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.connected_to_id)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = connected_to_id_;
  connected_to_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::_internal_mutable_connected_to_id() {
  _has_bits_[0] |= 0x00000004u;
  if (connected_to_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    connected_to_id_ = p;
  }
  return connected_to_id_;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::mutable_connected_to_id() {
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.connected_to_id)
  return _internal_mutable_connected_to_id();
}
inline void ConnectionLineConnectCommandArchive::set_allocated_connected_to_id(::TSP::UUID* connected_to_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_to_id_);
  }
  if (connected_to_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connected_to_id)->GetArena();
    if (message_arena != submessage_arena) {
      connected_to_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connected_to_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  connected_to_id_ = connected_to_id;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.connected_to_id)
}

// optional .TSP.UUID old_connected_to_id = 6;
inline bool ConnectionLineConnectCommandArchive::_internal_has_old_connected_to_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_connected_to_id_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_old_connected_to_id() const {
  return _internal_has_old_connected_to_id();
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::_internal_old_connected_to_id() const {
  const ::TSP::UUID* p = old_connected_to_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::old_connected_to_id() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.old_connected_to_id)
  return _internal_old_connected_to_id();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_old_connected_to_id(
    ::TSP::UUID* old_connected_to_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connected_to_id_);
  }
  old_connected_to_id_ = old_connected_to_id;
  if (old_connected_to_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connected_to_id)
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::release_old_connected_to_id() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = old_connected_to_id_;
  old_connected_to_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::unsafe_arena_release_old_connected_to_id() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.old_connected_to_id)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = old_connected_to_id_;
  old_connected_to_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::_internal_mutable_old_connected_to_id() {
  _has_bits_[0] |= 0x00000008u;
  if (old_connected_to_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    old_connected_to_id_ = p;
  }
  return old_connected_to_id_;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::mutable_old_connected_to_id() {
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.old_connected_to_id)
  return _internal_mutable_old_connected_to_id();
}
inline void ConnectionLineConnectCommandArchive::set_allocated_old_connected_to_id(::TSP::UUID* old_connected_to_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connected_to_id_);
  }
  if (old_connected_to_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connected_to_id)->GetArena();
    if (message_arena != submessage_arena) {
      old_connected_to_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_connected_to_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_connected_to_id_ = old_connected_to_id;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connected_to_id)
}

// optional .TSP.UUID old_connected_from_id = 7;
inline bool ConnectionLineConnectCommandArchive::_internal_has_old_connected_from_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || old_connected_from_id_ != nullptr);
  return value;
}
inline bool ConnectionLineConnectCommandArchive::has_old_connected_from_id() const {
  return _internal_has_old_connected_from_id();
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::_internal_old_connected_from_id() const {
  const ::TSP::UUID* p = old_connected_from_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ConnectionLineConnectCommandArchive::old_connected_from_id() const {
  // @@protoc_insertion_point(field_get:TSD.ConnectionLineConnectCommandArchive.old_connected_from_id)
  return _internal_old_connected_from_id();
}
inline void ConnectionLineConnectCommandArchive::unsafe_arena_set_allocated_old_connected_from_id(
    ::TSP::UUID* old_connected_from_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connected_from_id_);
  }
  old_connected_from_id_ = old_connected_from_id;
  if (old_connected_from_id) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connected_from_id)
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::release_old_connected_from_id() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = old_connected_from_id_;
  old_connected_from_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::unsafe_arena_release_old_connected_from_id() {
  // @@protoc_insertion_point(field_release:TSD.ConnectionLineConnectCommandArchive.old_connected_from_id)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::UUID* temp = old_connected_from_id_;
  old_connected_from_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::_internal_mutable_old_connected_from_id() {
  _has_bits_[0] |= 0x00000010u;
  if (old_connected_from_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    old_connected_from_id_ = p;
  }
  return old_connected_from_id_;
}
inline ::TSP::UUID* ConnectionLineConnectCommandArchive::mutable_old_connected_from_id() {
  // @@protoc_insertion_point(field_mutable:TSD.ConnectionLineConnectCommandArchive.old_connected_from_id)
  return _internal_mutable_old_connected_from_id();
}
inline void ConnectionLineConnectCommandArchive::set_allocated_old_connected_from_id(::TSP::UUID* old_connected_from_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connected_from_id_);
  }
  if (old_connected_from_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_connected_from_id)->GetArena();
    if (message_arena != submessage_arena) {
      old_connected_from_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_connected_from_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  old_connected_from_id_ = old_connected_from_id;
  // @@protoc_insertion_point(field_set_allocated:TSD.ConnectionLineConnectCommandArchive.old_connected_from_id)
}

// -------------------------------------------------------------------

// InfoGeometryCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool InfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void InfoGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& InfoGeometryCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& InfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* InfoGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* InfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* InfoGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* InfoGeometryCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.super)
  return _internal_mutable_super();
}
inline void InfoGeometryCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.super)
}

// optional .TSD.GeometryArchive newGeometry = 2;
inline bool InfoGeometryCommandArchive::_internal_has_newgeometry() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || newgeometry_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_newgeometry() const {
  return _internal_has_newgeometry();
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::_internal_newgeometry() const {
  const ::TSD::GeometryArchive* p = newgeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::newgeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.newGeometry)
  return _internal_newgeometry();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_newgeometry(
    ::TSD::GeometryArchive* newgeometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newgeometry_);
  }
  newgeometry_ = newgeometry;
  if (newgeometry) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.newGeometry)
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::release_newgeometry() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::GeometryArchive* temp = newgeometry_;
  newgeometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::unsafe_arena_release_newgeometry() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.newGeometry)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::GeometryArchive* temp = newgeometry_;
  newgeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::_internal_mutable_newgeometry() {
  _has_bits_[0] |= 0x00000002u;
  if (newgeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    newgeometry_ = p;
  }
  return newgeometry_;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::mutable_newgeometry() {
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.newGeometry)
  return _internal_mutable_newgeometry();
}
inline void InfoGeometryCommandArchive::set_allocated_newgeometry(::TSD::GeometryArchive* newgeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newgeometry_);
  }
  if (newgeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newgeometry)->GetArena();
    if (message_arena != submessage_arena) {
      newgeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newgeometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newgeometry_ = newgeometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.newGeometry)
}

// optional .TSD.GeometryArchive oldGeometry = 3;
inline bool InfoGeometryCommandArchive::_internal_has_oldgeometry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || oldgeometry_ != nullptr);
  return value;
}
inline bool InfoGeometryCommandArchive::has_oldgeometry() const {
  return _internal_has_oldgeometry();
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::_internal_oldgeometry() const {
  const ::TSD::GeometryArchive* p = oldgeometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& InfoGeometryCommandArchive::oldgeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.oldGeometry)
  return _internal_oldgeometry();
}
inline void InfoGeometryCommandArchive::unsafe_arena_set_allocated_oldgeometry(
    ::TSD::GeometryArchive* oldgeometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldgeometry_);
  }
  oldgeometry_ = oldgeometry;
  if (oldgeometry) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InfoGeometryCommandArchive.oldGeometry)
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::release_oldgeometry() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::GeometryArchive* temp = oldgeometry_;
  oldgeometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::unsafe_arena_release_oldgeometry() {
  // @@protoc_insertion_point(field_release:TSD.InfoGeometryCommandArchive.oldGeometry)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::GeometryArchive* temp = oldgeometry_;
  oldgeometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::_internal_mutable_oldgeometry() {
  _has_bits_[0] |= 0x00000004u;
  if (oldgeometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    oldgeometry_ = p;
  }
  return oldgeometry_;
}
inline ::TSD::GeometryArchive* InfoGeometryCommandArchive::mutable_oldgeometry() {
  // @@protoc_insertion_point(field_mutable:TSD.InfoGeometryCommandArchive.oldGeometry)
  return _internal_mutable_oldgeometry();
}
inline void InfoGeometryCommandArchive::set_allocated_oldgeometry(::TSD::GeometryArchive* oldgeometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldgeometry_);
  }
  if (oldgeometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldgeometry)->GetArena();
    if (message_arena != submessage_arena) {
      oldgeometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldgeometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oldgeometry_ = oldgeometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.InfoGeometryCommandArchive.oldGeometry)
}

// optional bool matchObjectPlaceholderGeometry = 4;
inline bool InfoGeometryCommandArchive::_internal_has_matchobjectplaceholdergeometry() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InfoGeometryCommandArchive::has_matchobjectplaceholdergeometry() const {
  return _internal_has_matchobjectplaceholdergeometry();
}
inline void InfoGeometryCommandArchive::clear_matchobjectplaceholdergeometry() {
  matchobjectplaceholdergeometry_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool InfoGeometryCommandArchive::_internal_matchobjectplaceholdergeometry() const {
  return matchobjectplaceholdergeometry_;
}
inline bool InfoGeometryCommandArchive::matchobjectplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.matchObjectPlaceholderGeometry)
  return _internal_matchobjectplaceholdergeometry();
}
inline void InfoGeometryCommandArchive::_internal_set_matchobjectplaceholdergeometry(bool value) {
  _has_bits_[0] |= 0x00000008u;
  matchobjectplaceholdergeometry_ = value;
}
inline void InfoGeometryCommandArchive::set_matchobjectplaceholdergeometry(bool value) {
  _internal_set_matchobjectplaceholdergeometry(value);
  // @@protoc_insertion_point(field_set:TSD.InfoGeometryCommandArchive.matchObjectPlaceholderGeometry)
}

// optional bool oldMatchObjectPlaceholderGeometry = 5;
inline bool InfoGeometryCommandArchive::_internal_has_oldmatchobjectplaceholdergeometry() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InfoGeometryCommandArchive::has_oldmatchobjectplaceholdergeometry() const {
  return _internal_has_oldmatchobjectplaceholdergeometry();
}
inline void InfoGeometryCommandArchive::clear_oldmatchobjectplaceholdergeometry() {
  oldmatchobjectplaceholdergeometry_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool InfoGeometryCommandArchive::_internal_oldmatchobjectplaceholdergeometry() const {
  return oldmatchobjectplaceholdergeometry_;
}
inline bool InfoGeometryCommandArchive::oldmatchobjectplaceholdergeometry() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.oldMatchObjectPlaceholderGeometry)
  return _internal_oldmatchobjectplaceholdergeometry();
}
inline void InfoGeometryCommandArchive::_internal_set_oldmatchobjectplaceholdergeometry(bool value) {
  _has_bits_[0] |= 0x00000010u;
  oldmatchobjectplaceholdergeometry_ = value;
}
inline void InfoGeometryCommandArchive::set_oldmatchobjectplaceholdergeometry(bool value) {
  _internal_set_oldmatchobjectplaceholdergeometry(value);
  // @@protoc_insertion_point(field_set:TSD.InfoGeometryCommandArchive.oldMatchObjectPlaceholderGeometry)
}

// optional bool shouldTriggerRtuAnimation = 6;
inline bool InfoGeometryCommandArchive::_internal_has_shouldtriggerrtuanimation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InfoGeometryCommandArchive::has_shouldtriggerrtuanimation() const {
  return _internal_has_shouldtriggerrtuanimation();
}
inline void InfoGeometryCommandArchive::clear_shouldtriggerrtuanimation() {
  shouldtriggerrtuanimation_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool InfoGeometryCommandArchive::_internal_shouldtriggerrtuanimation() const {
  return shouldtriggerrtuanimation_;
}
inline bool InfoGeometryCommandArchive::shouldtriggerrtuanimation() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.shouldTriggerRtuAnimation)
  return _internal_shouldtriggerrtuanimation();
}
inline void InfoGeometryCommandArchive::_internal_set_shouldtriggerrtuanimation(bool value) {
  _has_bits_[0] |= 0x00000020u;
  shouldtriggerrtuanimation_ = value;
}
inline void InfoGeometryCommandArchive::set_shouldtriggerrtuanimation(bool value) {
  _internal_set_shouldtriggerrtuanimation(value);
  // @@protoc_insertion_point(field_set:TSD.InfoGeometryCommandArchive.shouldTriggerRtuAnimation)
}

// optional bool initiatedOnWeb = 7;
inline bool InfoGeometryCommandArchive::_internal_has_initiatedonweb() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool InfoGeometryCommandArchive::has_initiatedonweb() const {
  return _internal_has_initiatedonweb();
}
inline void InfoGeometryCommandArchive::clear_initiatedonweb() {
  initiatedonweb_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool InfoGeometryCommandArchive::_internal_initiatedonweb() const {
  return initiatedonweb_;
}
inline bool InfoGeometryCommandArchive::initiatedonweb() const {
  // @@protoc_insertion_point(field_get:TSD.InfoGeometryCommandArchive.initiatedOnWeb)
  return _internal_initiatedonweb();
}
inline void InfoGeometryCommandArchive::_internal_set_initiatedonweb(bool value) {
  _has_bits_[0] |= 0x00000040u;
  initiatedonweb_ = value;
}
inline void InfoGeometryCommandArchive::set_initiatedonweb(bool value) {
  _internal_set_initiatedonweb(value);
  // @@protoc_insertion_point(field_set:TSD.InfoGeometryCommandArchive.initiatedOnWeb)
}

// -------------------------------------------------------------------

// DrawablePathSourceCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawablePathSourceCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawablePathSourceCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& DrawablePathSourceCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawablePathSourceCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.super)
  return _internal_super();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawablePathSourceCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawablePathSourceCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawablePathSourceCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawablePathSourceCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawablePathSourceCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.super)
}

// optional .TSD.PathSourceArchive old_path_source = 2;
inline bool DrawablePathSourceCommandArchive::_internal_has_old_path_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_path_source_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_old_path_source() const {
  return _internal_has_old_path_source();
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::_internal_old_path_source() const {
  const ::TSD::PathSourceArchive* p = old_path_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::old_path_source() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.old_path_source)
  return _internal_old_path_source();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_old_path_source(
    ::TSD::PathSourceArchive* old_path_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_path_source_);
  }
  old_path_source_ = old_path_source;
  if (old_path_source) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.old_path_source)
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::release_old_path_source() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::PathSourceArchive* temp = old_path_source_;
  old_path_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::unsafe_arena_release_old_path_source() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.old_path_source)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::PathSourceArchive* temp = old_path_source_;
  old_path_source_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::_internal_mutable_old_path_source() {
  _has_bits_[0] |= 0x00000002u;
  if (old_path_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArena());
    old_path_source_ = p;
  }
  return old_path_source_;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::mutable_old_path_source() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.old_path_source)
  return _internal_mutable_old_path_source();
}
inline void DrawablePathSourceCommandArchive::set_allocated_old_path_source(::TSD::PathSourceArchive* old_path_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_path_source_);
  }
  if (old_path_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_path_source)->GetArena();
    if (message_arena != submessage_arena) {
      old_path_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_path_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_path_source_ = old_path_source;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.old_path_source)
}

// optional .TSD.PathSourceArchive new_path_source = 3;
inline bool DrawablePathSourceCommandArchive::_internal_has_new_path_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_path_source_ != nullptr);
  return value;
}
inline bool DrawablePathSourceCommandArchive::has_new_path_source() const {
  return _internal_has_new_path_source();
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::_internal_new_path_source() const {
  const ::TSD::PathSourceArchive* p = new_path_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& DrawablePathSourceCommandArchive::new_path_source() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePathSourceCommandArchive.new_path_source)
  return _internal_new_path_source();
}
inline void DrawablePathSourceCommandArchive::unsafe_arena_set_allocated_new_path_source(
    ::TSD::PathSourceArchive* new_path_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_path_source_);
  }
  new_path_source_ = new_path_source;
  if (new_path_source) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePathSourceCommandArchive.new_path_source)
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::release_new_path_source() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::PathSourceArchive* temp = new_path_source_;
  new_path_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::unsafe_arena_release_new_path_source() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePathSourceCommandArchive.new_path_source)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::PathSourceArchive* temp = new_path_source_;
  new_path_source_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::_internal_mutable_new_path_source() {
  _has_bits_[0] |= 0x00000004u;
  if (new_path_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArena());
    new_path_source_ = p;
  }
  return new_path_source_;
}
inline ::TSD::PathSourceArchive* DrawablePathSourceCommandArchive::mutable_new_path_source() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePathSourceCommandArchive.new_path_source)
  return _internal_mutable_new_path_source();
}
inline void DrawablePathSourceCommandArchive::set_allocated_new_path_source(::TSD::PathSourceArchive* new_path_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_path_source_);
  }
  if (new_path_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_path_source)->GetArena();
    if (message_arena != submessage_arena) {
      new_path_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_path_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_path_source_ = new_path_source;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePathSourceCommandArchive.new_path_source)
}

// -------------------------------------------------------------------

// InstantAlphaCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool InstantAlphaCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void InstantAlphaCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& InstantAlphaCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& InstantAlphaCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.super)
  return _internal_super();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* InstantAlphaCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* InstantAlphaCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* InstantAlphaCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* InstantAlphaCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.super)
  return _internal_mutable_super();
}
inline void InstantAlphaCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.super)
}

// optional .TSP.Path oldpath = 2;
inline bool InstantAlphaCommandArchive::_internal_has_oldpath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || oldpath_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_oldpath() const {
  return _internal_has_oldpath();
}
inline const ::TSP::Path& InstantAlphaCommandArchive::_internal_oldpath() const {
  const ::TSP::Path* p = oldpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Path&>(
      ::TSP::_Path_default_instance_);
}
inline const ::TSP::Path& InstantAlphaCommandArchive::oldpath() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.oldpath)
  return _internal_oldpath();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_oldpath(
    ::TSP::Path* oldpath) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpath_);
  }
  oldpath_ = oldpath;
  if (oldpath) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.oldpath)
}
inline ::TSP::Path* InstantAlphaCommandArchive::release_oldpath() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Path* temp = oldpath_;
  oldpath_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::unsafe_arena_release_oldpath() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.oldpath)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Path* temp = oldpath_;
  oldpath_ = nullptr;
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::_internal_mutable_oldpath() {
  _has_bits_[0] |= 0x00000002u;
  if (oldpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Path>(GetArena());
    oldpath_ = p;
  }
  return oldpath_;
}
inline ::TSP::Path* InstantAlphaCommandArchive::mutable_oldpath() {
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.oldpath)
  return _internal_mutable_oldpath();
}
inline void InstantAlphaCommandArchive::set_allocated_oldpath(::TSP::Path* oldpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpath_);
  }
  if (oldpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldpath)->GetArena();
    if (message_arena != submessage_arena) {
      oldpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldpath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  oldpath_ = oldpath;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.oldpath)
}

// optional .TSP.Path newpath = 3;
inline bool InstantAlphaCommandArchive::_internal_has_newpath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || newpath_ != nullptr);
  return value;
}
inline bool InstantAlphaCommandArchive::has_newpath() const {
  return _internal_has_newpath();
}
inline const ::TSP::Path& InstantAlphaCommandArchive::_internal_newpath() const {
  const ::TSP::Path* p = newpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Path&>(
      ::TSP::_Path_default_instance_);
}
inline const ::TSP::Path& InstantAlphaCommandArchive::newpath() const {
  // @@protoc_insertion_point(field_get:TSD.InstantAlphaCommandArchive.newpath)
  return _internal_newpath();
}
inline void InstantAlphaCommandArchive::unsafe_arena_set_allocated_newpath(
    ::TSP::Path* newpath) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newpath_);
  }
  newpath_ = newpath;
  if (newpath) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InstantAlphaCommandArchive.newpath)
}
inline ::TSP::Path* InstantAlphaCommandArchive::release_newpath() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Path* temp = newpath_;
  newpath_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::unsafe_arena_release_newpath() {
  // @@protoc_insertion_point(field_release:TSD.InstantAlphaCommandArchive.newpath)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Path* temp = newpath_;
  newpath_ = nullptr;
  return temp;
}
inline ::TSP::Path* InstantAlphaCommandArchive::_internal_mutable_newpath() {
  _has_bits_[0] |= 0x00000004u;
  if (newpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Path>(GetArena());
    newpath_ = p;
  }
  return newpath_;
}
inline ::TSP::Path* InstantAlphaCommandArchive::mutable_newpath() {
  // @@protoc_insertion_point(field_mutable:TSD.InstantAlphaCommandArchive.newpath)
  return _internal_mutable_newpath();
}
inline void InstantAlphaCommandArchive::set_allocated_newpath(::TSP::Path* newpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newpath_);
  }
  if (newpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newpath)->GetArena();
    if (message_arena != submessage_arena) {
      newpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newpath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  newpath_ = newpath;
  // @@protoc_insertion_point(field_set_allocated:TSD.InstantAlphaCommandArchive.newpath)
}

// -------------------------------------------------------------------

// DrawableApplyThemeCommandArchive

// required .TSS.ApplyThemeChildCommandArchive super = 1;
inline bool DrawableApplyThemeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawableApplyThemeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::ApplyThemeChildCommandArchive& DrawableApplyThemeCommandArchive::_internal_super() const {
  const ::TSS::ApplyThemeChildCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::ApplyThemeChildCommandArchive&>(
      ::TSS::_ApplyThemeChildCommandArchive_default_instance_);
}
inline const ::TSS::ApplyThemeChildCommandArchive& DrawableApplyThemeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableApplyThemeCommandArchive.super)
  return _internal_super();
}
inline void DrawableApplyThemeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSS::ApplyThemeChildCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableApplyThemeCommandArchive.super)
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableApplyThemeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSS::ApplyThemeChildCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::ApplyThemeChildCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSS::ApplyThemeChildCommandArchive* DrawableApplyThemeCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableApplyThemeCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawableApplyThemeCommandArchive::set_allocated_super(::TSS::ApplyThemeChildCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableApplyThemeCommandArchive.super)
}

// optional .TSP.Reference info = 2;
inline bool DrawableApplyThemeCommandArchive::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool DrawableApplyThemeCommandArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::_internal_info() const {
  const ::TSP::Reference* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::info() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableApplyThemeCommandArchive.info)
  return _internal_info();
}
inline void DrawableApplyThemeCommandArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableApplyThemeCommandArchive.info)
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::release_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSD.DrawableApplyThemeCommandArchive.info)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::mutable_info() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableApplyThemeCommandArchive.info)
  return _internal_mutable_info();
}
inline void DrawableApplyThemeCommandArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableApplyThemeCommandArchive.info)
}

// optional .TSP.Reference style = 3;
inline bool DrawableApplyThemeCommandArchive::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || style_ != nullptr);
  return value;
}
inline bool DrawableApplyThemeCommandArchive::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::_internal_style() const {
  const ::TSP::Reference* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableApplyThemeCommandArchive::style() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableApplyThemeCommandArchive.style)
  return _internal_style();
}
inline void DrawableApplyThemeCommandArchive::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableApplyThemeCommandArchive.style)
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::release_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSD.DrawableApplyThemeCommandArchive.style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000004u;
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    style_ = p;
  }
  return style_;
}
inline ::TSP::Reference* DrawableApplyThemeCommandArchive::mutable_style() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableApplyThemeCommandArchive.style)
  return _internal_mutable_style();
}
inline void DrawableApplyThemeCommandArchive::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style)->GetArena();
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableApplyThemeCommandArchive.style)
}

// -------------------------------------------------------------------

// AbstractStyleCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool AbstractStyleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AbstractStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void AbstractStyleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& AbstractStyleCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& AbstractStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.AbstractStyleCommandArchive.super)
  return _internal_super();
}
inline void AbstractStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.AbstractStyleCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* AbstractStyleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* AbstractStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.AbstractStyleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* AbstractStyleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* AbstractStyleCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.AbstractStyleCommandArchive.super)
  return _internal_mutable_super();
}
inline void AbstractStyleCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.AbstractStyleCommandArchive.super)
}

// -------------------------------------------------------------------

// StyledInfoSetStyleCommandArchive

// required .TSD.AbstractStyleCommandArchive super = 1;
inline bool StyledInfoSetStyleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool StyledInfoSetStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void StyledInfoSetStyleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::AbstractStyleCommandArchive& StyledInfoSetStyleCommandArchive::_internal_super() const {
  const ::TSD::AbstractStyleCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::AbstractStyleCommandArchive&>(
      ::TSD::_AbstractStyleCommandArchive_default_instance_);
}
inline const ::TSD::AbstractStyleCommandArchive& StyledInfoSetStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.StyledInfoSetStyleCommandArchive.super)
  return _internal_super();
}
inline void StyledInfoSetStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::AbstractStyleCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.StyledInfoSetStyleCommandArchive.super)
}
inline ::TSD::AbstractStyleCommandArchive* StyledInfoSetStyleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* StyledInfoSetStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.StyledInfoSetStyleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* StyledInfoSetStyleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::AbstractStyleCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::AbstractStyleCommandArchive* StyledInfoSetStyleCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.StyledInfoSetStyleCommandArchive.super)
  return _internal_mutable_super();
}
inline void StyledInfoSetStyleCommandArchive::set_allocated_super(::TSD::AbstractStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.StyledInfoSetStyleCommandArchive.super)
}

// optional .TSP.Reference new_style = 2;
inline bool StyledInfoSetStyleCommandArchive::_internal_has_new_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_style_ != nullptr);
  return value;
}
inline bool StyledInfoSetStyleCommandArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::_internal_new_style() const {
  const ::TSP::Reference* p = new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TSD.StyledInfoSetStyleCommandArchive.new_style)
  return _internal_new_style();
}
inline void StyledInfoSetStyleCommandArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  new_style_ = new_style;
  if (new_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.StyledInfoSetStyleCommandArchive.new_style)
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::release_new_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TSD.StyledInfoSetStyleCommandArchive.new_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::_internal_mutable_new_style() {
  _has_bits_[0] |= 0x00000002u;
  if (new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    new_style_ = p;
  }
  return new_style_;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::mutable_new_style() {
  // @@protoc_insertion_point(field_mutable:TSD.StyledInfoSetStyleCommandArchive.new_style)
  return _internal_mutable_new_style();
}
inline void StyledInfoSetStyleCommandArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style)->GetArena();
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.StyledInfoSetStyleCommandArchive.new_style)
}

// optional .TSP.Reference rollback_style = 4;
inline bool StyledInfoSetStyleCommandArchive::_internal_has_rollback_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rollback_style_ != nullptr);
  return value;
}
inline bool StyledInfoSetStyleCommandArchive::has_rollback_style() const {
  return _internal_has_rollback_style();
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::_internal_rollback_style() const {
  const ::TSP::Reference* p = rollback_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& StyledInfoSetStyleCommandArchive::rollback_style() const {
  // @@protoc_insertion_point(field_get:TSD.StyledInfoSetStyleCommandArchive.rollback_style)
  return _internal_rollback_style();
}
inline void StyledInfoSetStyleCommandArchive::unsafe_arena_set_allocated_rollback_style(
    ::TSP::Reference* rollback_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style_);
  }
  rollback_style_ = rollback_style;
  if (rollback_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.StyledInfoSetStyleCommandArchive.rollback_style)
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::release_rollback_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = rollback_style_;
  rollback_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::unsafe_arena_release_rollback_style() {
  // @@protoc_insertion_point(field_release:TSD.StyledInfoSetStyleCommandArchive.rollback_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = rollback_style_;
  rollback_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::_internal_mutable_rollback_style() {
  _has_bits_[0] |= 0x00000004u;
  if (rollback_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    rollback_style_ = p;
  }
  return rollback_style_;
}
inline ::TSP::Reference* StyledInfoSetStyleCommandArchive::mutable_rollback_style() {
  // @@protoc_insertion_point(field_mutable:TSD.StyledInfoSetStyleCommandArchive.rollback_style)
  return _internal_mutable_rollback_style();
}
inline void StyledInfoSetStyleCommandArchive::set_allocated_rollback_style(::TSP::Reference* rollback_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style_);
  }
  if (rollback_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style)->GetArena();
    if (message_arena != submessage_arena) {
      rollback_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rollback_style_ = rollback_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.StyledInfoSetStyleCommandArchive.rollback_style)
}

// -------------------------------------------------------------------

// BaseApplyPresetCommandArchive

// required .TSD.AbstractStyleCommandArchive super = 1;
inline bool BaseApplyPresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool BaseApplyPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void BaseApplyPresetCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::AbstractStyleCommandArchive& BaseApplyPresetCommandArchive::_internal_super() const {
  const ::TSD::AbstractStyleCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::AbstractStyleCommandArchive&>(
      ::TSD::_AbstractStyleCommandArchive_default_instance_);
}
inline const ::TSD::AbstractStyleCommandArchive& BaseApplyPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.BaseApplyPresetCommandArchive.super)
  return _internal_super();
}
inline void BaseApplyPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::AbstractStyleCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.BaseApplyPresetCommandArchive.super)
}
inline ::TSD::AbstractStyleCommandArchive* BaseApplyPresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* BaseApplyPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.BaseApplyPresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* BaseApplyPresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::AbstractStyleCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::AbstractStyleCommandArchive* BaseApplyPresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.BaseApplyPresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void BaseApplyPresetCommandArchive::set_allocated_super(::TSD::AbstractStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.BaseApplyPresetCommandArchive.super)
}

// optional .TSP.Reference preset_style = 2;
inline bool BaseApplyPresetCommandArchive::_internal_has_preset_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || preset_style_ != nullptr);
  return value;
}
inline bool BaseApplyPresetCommandArchive::has_preset_style() const {
  return _internal_has_preset_style();
}
inline const ::TSP::Reference& BaseApplyPresetCommandArchive::_internal_preset_style() const {
  const ::TSP::Reference* p = preset_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BaseApplyPresetCommandArchive::preset_style() const {
  // @@protoc_insertion_point(field_get:TSD.BaseApplyPresetCommandArchive.preset_style)
  return _internal_preset_style();
}
inline void BaseApplyPresetCommandArchive::unsafe_arena_set_allocated_preset_style(
    ::TSP::Reference* preset_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_style_);
  }
  preset_style_ = preset_style;
  if (preset_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.BaseApplyPresetCommandArchive.preset_style)
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::release_preset_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_style_;
  preset_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::unsafe_arena_release_preset_style() {
  // @@protoc_insertion_point(field_release:TSD.BaseApplyPresetCommandArchive.preset_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = preset_style_;
  preset_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::_internal_mutable_preset_style() {
  _has_bits_[0] |= 0x00000002u;
  if (preset_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    preset_style_ = p;
  }
  return preset_style_;
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::mutable_preset_style() {
  // @@protoc_insertion_point(field_mutable:TSD.BaseApplyPresetCommandArchive.preset_style)
  return _internal_mutable_preset_style();
}
inline void BaseApplyPresetCommandArchive::set_allocated_preset_style(::TSP::Reference* preset_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_style_);
  }
  if (preset_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_style)->GetArena();
    if (message_arena != submessage_arena) {
      preset_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preset_style_ = preset_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.BaseApplyPresetCommandArchive.preset_style)
}

// optional .TSP.Reference rollback_style = 4;
inline bool BaseApplyPresetCommandArchive::_internal_has_rollback_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rollback_style_ != nullptr);
  return value;
}
inline bool BaseApplyPresetCommandArchive::has_rollback_style() const {
  return _internal_has_rollback_style();
}
inline const ::TSP::Reference& BaseApplyPresetCommandArchive::_internal_rollback_style() const {
  const ::TSP::Reference* p = rollback_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BaseApplyPresetCommandArchive::rollback_style() const {
  // @@protoc_insertion_point(field_get:TSD.BaseApplyPresetCommandArchive.rollback_style)
  return _internal_rollback_style();
}
inline void BaseApplyPresetCommandArchive::unsafe_arena_set_allocated_rollback_style(
    ::TSP::Reference* rollback_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style_);
  }
  rollback_style_ = rollback_style;
  if (rollback_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.BaseApplyPresetCommandArchive.rollback_style)
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::release_rollback_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = rollback_style_;
  rollback_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::unsafe_arena_release_rollback_style() {
  // @@protoc_insertion_point(field_release:TSD.BaseApplyPresetCommandArchive.rollback_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = rollback_style_;
  rollback_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::_internal_mutable_rollback_style() {
  _has_bits_[0] |= 0x00000004u;
  if (rollback_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    rollback_style_ = p;
  }
  return rollback_style_;
}
inline ::TSP::Reference* BaseApplyPresetCommandArchive::mutable_rollback_style() {
  // @@protoc_insertion_point(field_mutable:TSD.BaseApplyPresetCommandArchive.rollback_style)
  return _internal_mutable_rollback_style();
}
inline void BaseApplyPresetCommandArchive::set_allocated_rollback_style(::TSP::Reference* rollback_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style_);
  }
  if (rollback_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style)->GetArena();
    if (message_arena != submessage_arena) {
      rollback_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rollback_style_ = rollback_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.BaseApplyPresetCommandArchive.rollback_style)
}

// -------------------------------------------------------------------

// ShapeApplyPresetCommandArchive

// required .TSD.BaseApplyPresetCommandArchive super = 1;
inline bool ShapeApplyPresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeApplyPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ShapeApplyPresetCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::BaseApplyPresetCommandArchive& ShapeApplyPresetCommandArchive::_internal_super() const {
  const ::TSD::BaseApplyPresetCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::BaseApplyPresetCommandArchive&>(
      ::TSD::_BaseApplyPresetCommandArchive_default_instance_);
}
inline const ::TSD::BaseApplyPresetCommandArchive& ShapeApplyPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeApplyPresetCommandArchive.super)
  return _internal_super();
}
inline void ShapeApplyPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::BaseApplyPresetCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeApplyPresetCommandArchive.super)
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseApplyPresetCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapeApplyPresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseApplyPresetCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::BaseApplyPresetCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::BaseApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ShapeApplyPresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void ShapeApplyPresetCommandArchive::set_allocated_super(::TSD::BaseApplyPresetCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeApplyPresetCommandArchive.super)
}

// -------------------------------------------------------------------

// MediaApplyPresetCommandArchive

// required .TSD.BaseApplyPresetCommandArchive super = 1;
inline bool MediaApplyPresetCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MediaApplyPresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaApplyPresetCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::BaseApplyPresetCommandArchive& MediaApplyPresetCommandArchive::_internal_super() const {
  const ::TSD::BaseApplyPresetCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::BaseApplyPresetCommandArchive&>(
      ::TSD::_BaseApplyPresetCommandArchive_default_instance_);
}
inline const ::TSD::BaseApplyPresetCommandArchive& MediaApplyPresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaApplyPresetCommandArchive.super)
  return _internal_super();
}
inline void MediaApplyPresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::BaseApplyPresetCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaApplyPresetCommandArchive.super)
}
inline ::TSD::BaseApplyPresetCommandArchive* MediaApplyPresetCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseApplyPresetCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::BaseApplyPresetCommandArchive* MediaApplyPresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaApplyPresetCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseApplyPresetCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::BaseApplyPresetCommandArchive* MediaApplyPresetCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::BaseApplyPresetCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::BaseApplyPresetCommandArchive* MediaApplyPresetCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaApplyPresetCommandArchive.super)
  return _internal_mutable_super();
}
inline void MediaApplyPresetCommandArchive::set_allocated_super(::TSD::BaseApplyPresetCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaApplyPresetCommandArchive.super)
}

// -------------------------------------------------------------------

// ShapeStyleSetValueCommandArchive

// required .TSD.BaseStyleSetValueCommandArchive super = 1;
inline bool ShapeStyleSetValueCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeStyleSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ShapeStyleSetValueCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::BaseStyleSetValueCommandArchive& ShapeStyleSetValueCommandArchive::_internal_super() const {
  const ::TSD::BaseStyleSetValueCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::BaseStyleSetValueCommandArchive&>(
      ::TSD::_BaseStyleSetValueCommandArchive_default_instance_);
}
inline const ::TSD::BaseStyleSetValueCommandArchive& ShapeStyleSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeStyleSetValueCommandArchive.super)
  return _internal_super();
}
inline void ShapeStyleSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::BaseStyleSetValueCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeStyleSetValueCommandArchive.super)
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseStyleSetValueCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapeStyleSetValueCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseStyleSetValueCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::BaseStyleSetValueCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::BaseStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ShapeStyleSetValueCommandArchive.super)
  return _internal_mutable_super();
}
inline void ShapeStyleSetValueCommandArchive::set_allocated_super(::TSD::BaseStyleSetValueCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeStyleSetValueCommandArchive.super)
}

// optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
inline bool ShapeStyleSetValueCommandArchive::_internal_has_change() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || change_ != nullptr);
  return value;
}
inline bool ShapeStyleSetValueCommandArchive::has_change() const {
  return _internal_has_change();
}
inline const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive& ShapeStyleSetValueCommandArchive::_internal_change() const {
  const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* p = change_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive&>(
      ::TSDSOS::_BaseShapeStylePropertyChangeSetArchive_default_instance_);
}
inline const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive& ShapeStyleSetValueCommandArchive::change() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeStyleSetValueCommandArchive.change)
  return _internal_change();
}
inline void ShapeStyleSetValueCommandArchive::unsafe_arena_set_allocated_change(
    ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  change_ = change;
  if (change) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeStyleSetValueCommandArchive.change)
}
inline ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::release_change() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* temp = change_;
  change_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:TSD.ShapeStyleSetValueCommandArchive.change)
  _has_bits_[0] &= ~0x00000002u;
  ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* temp = change_;
  change_ = nullptr;
  return temp;
}
inline ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::_internal_mutable_change() {
  _has_bits_[0] |= 0x00000002u;
  if (change_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSDSOS::BaseShapeStylePropertyChangeSetArchive>(GetArena());
    change_ = p;
  }
  return change_;
}
inline ::TSDSOS::BaseShapeStylePropertyChangeSetArchive* ShapeStyleSetValueCommandArchive::mutable_change() {
  // @@protoc_insertion_point(field_mutable:TSD.ShapeStyleSetValueCommandArchive.change)
  return _internal_mutable_change();
}
inline void ShapeStyleSetValueCommandArchive::set_allocated_change(::TSDSOS::BaseShapeStylePropertyChangeSetArchive* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change)->GetArena();
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  change_ = change;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeStyleSetValueCommandArchive.change)
}

// -------------------------------------------------------------------

// BaseStyleSetValueCommandArchive

// required .TSD.AbstractStyleCommandArchive super = 1;
inline bool BaseStyleSetValueCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool BaseStyleSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void BaseStyleSetValueCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::AbstractStyleCommandArchive& BaseStyleSetValueCommandArchive::_internal_super() const {
  const ::TSD::AbstractStyleCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::AbstractStyleCommandArchive&>(
      ::TSD::_AbstractStyleCommandArchive_default_instance_);
}
inline const ::TSD::AbstractStyleCommandArchive& BaseStyleSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.BaseStyleSetValueCommandArchive.super)
  return _internal_super();
}
inline void BaseStyleSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::AbstractStyleCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.BaseStyleSetValueCommandArchive.super)
}
inline ::TSD::AbstractStyleCommandArchive* BaseStyleSetValueCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* BaseStyleSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.BaseStyleSetValueCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* BaseStyleSetValueCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::AbstractStyleCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::AbstractStyleCommandArchive* BaseStyleSetValueCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.BaseStyleSetValueCommandArchive.super)
  return _internal_mutable_super();
}
inline void BaseStyleSetValueCommandArchive::set_allocated_super(::TSD::AbstractStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.BaseStyleSetValueCommandArchive.super)
}

// optional .TSP.Reference old_style = 4;
inline bool BaseStyleSetValueCommandArchive::_internal_has_old_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_style_ != nullptr);
  return value;
}
inline bool BaseStyleSetValueCommandArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSP::Reference& BaseStyleSetValueCommandArchive::_internal_old_style() const {
  const ::TSP::Reference* p = old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& BaseStyleSetValueCommandArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TSD.BaseStyleSetValueCommandArchive.old_style)
  return _internal_old_style();
}
inline void BaseStyleSetValueCommandArchive::unsafe_arena_set_allocated_old_style(
    ::TSP::Reference* old_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_);
  }
  old_style_ = old_style;
  if (old_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.BaseStyleSetValueCommandArchive.old_style)
}
inline ::TSP::Reference* BaseStyleSetValueCommandArchive::release_old_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_style_;
  old_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* BaseStyleSetValueCommandArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TSD.BaseStyleSetValueCommandArchive.old_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_style_;
  old_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* BaseStyleSetValueCommandArchive::_internal_mutable_old_style() {
  _has_bits_[0] |= 0x00000002u;
  if (old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_style_ = p;
  }
  return old_style_;
}
inline ::TSP::Reference* BaseStyleSetValueCommandArchive::mutable_old_style() {
  // @@protoc_insertion_point(field_mutable:TSD.BaseStyleSetValueCommandArchive.old_style)
  return _internal_mutable_old_style();
}
inline void BaseStyleSetValueCommandArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style)->GetArena();
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.BaseStyleSetValueCommandArchive.old_style)
}

// required bool is_border_change = 5;
inline bool BaseStyleSetValueCommandArchive::_internal_has_is_border_change() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BaseStyleSetValueCommandArchive::has_is_border_change() const {
  return _internal_has_is_border_change();
}
inline void BaseStyleSetValueCommandArchive::clear_is_border_change() {
  is_border_change_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BaseStyleSetValueCommandArchive::_internal_is_border_change() const {
  return is_border_change_;
}
inline bool BaseStyleSetValueCommandArchive::is_border_change() const {
  // @@protoc_insertion_point(field_get:TSD.BaseStyleSetValueCommandArchive.is_border_change)
  return _internal_is_border_change();
}
inline void BaseStyleSetValueCommandArchive::_internal_set_is_border_change(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_border_change_ = value;
}
inline void BaseStyleSetValueCommandArchive::set_is_border_change(bool value) {
  _internal_set_is_border_change(value);
  // @@protoc_insertion_point(field_set:TSD.BaseStyleSetValueCommandArchive.is_border_change)
}

// -------------------------------------------------------------------

// MovieSetValueCommandArchive_PropertyValue

// optional double starttime = 1;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_starttime() const {
  return _internal_has_starttime();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double MovieSetValueCommandArchive_PropertyValue::_internal_starttime() const {
  return starttime_;
}
inline double MovieSetValueCommandArchive_PropertyValue::starttime() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.starttime)
  return _internal_starttime();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000004u;
  starttime_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.starttime)
}

// optional double endtime = 2;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_endtime() const {
  return _internal_has_endtime();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double MovieSetValueCommandArchive_PropertyValue::_internal_endtime() const {
  return endtime_;
}
inline double MovieSetValueCommandArchive_PropertyValue::endtime() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.endtime)
  return _internal_endtime();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000008u;
  endtime_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.endtime)
}

// optional double postertime = 3;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_postertime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_postertime() const {
  return _internal_has_postertime();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_postertime() {
  postertime_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double MovieSetValueCommandArchive_PropertyValue::_internal_postertime() const {
  return postertime_;
}
inline double MovieSetValueCommandArchive_PropertyValue::postertime() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.postertime)
  return _internal_postertime();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_postertime(double value) {
  _has_bits_[0] |= 0x00000010u;
  postertime_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_postertime(double value) {
  _internal_set_postertime(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.postertime)
}

// optional .TSP.DataReference posterimagedata = 4;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_posterimagedata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || posterimagedata_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_posterimagedata() const {
  return _internal_has_posterimagedata();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::_internal_posterimagedata() const {
  const ::TSP::DataReference* p = posterimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::posterimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
  return _internal_posterimagedata();
}
inline void MovieSetValueCommandArchive_PropertyValue::unsafe_arena_set_allocated_posterimagedata(
    ::TSP::DataReference* posterimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posterimagedata_);
  }
  posterimagedata_ = posterimagedata;
  if (posterimagedata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::release_posterimagedata() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::DataReference* temp = posterimagedata_;
  posterimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::unsafe_arena_release_posterimagedata() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::DataReference* temp = posterimagedata_;
  posterimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::_internal_mutable_posterimagedata() {
  _has_bits_[0] |= 0x00000001u;
  if (posterimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    posterimagedata_ = p;
  }
  return posterimagedata_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::mutable_posterimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
  return _internal_mutable_posterimagedata();
}
inline void MovieSetValueCommandArchive_PropertyValue::set_allocated_posterimagedata(::TSP::DataReference* posterimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posterimagedata_);
  }
  if (posterimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posterimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      posterimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posterimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  posterimagedata_ = posterimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata)
}

// optional bool autoplay = 5;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_autoplay() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_autoplay() const {
  return _internal_has_autoplay();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_autoplay() {
  autoplay_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_autoplay() const {
  return autoplay_;
}
inline bool MovieSetValueCommandArchive_PropertyValue::autoplay() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.autoplay)
  return _internal_autoplay();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_autoplay(bool value) {
  _has_bits_[0] |= 0x00000080u;
  autoplay_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_autoplay(bool value) {
  _internal_set_autoplay(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.autoplay)
}

// optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_loopoption() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_loopoption() const {
  return _internal_has_loopoption();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_loopoption() {
  loopoption_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSD::MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_PropertyValue::_internal_loopoption() const {
  return static_cast< ::TSD::MovieSetValueCommandArchive_LoopOption >(loopoption_);
}
inline ::TSD::MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive_PropertyValue::loopoption() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.loopOption)
  return _internal_loopoption();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value) {
  assert(::TSD::MovieSetValueCommandArchive_LoopOption_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  loopoption_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_loopoption(::TSD::MovieSetValueCommandArchive_LoopOption value) {
  _internal_set_loopoption(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.loopOption)
}

// optional float volume = 7;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_volume() const {
  return _internal_has_volume();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_volume() {
  volume_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MovieSetValueCommandArchive_PropertyValue::_internal_volume() const {
  return volume_;
}
inline float MovieSetValueCommandArchive_PropertyValue::volume() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.volume)
  return _internal_volume();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_volume(float value) {
  _has_bits_[0] |= 0x00000040u;
  volume_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.volume)
}

// optional .TSP.DataReference media = 8;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_media() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || media_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_media() const {
  return _internal_has_media();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::_internal_media() const {
  const ::TSP::DataReference* p = media_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive_PropertyValue::media() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.media)
  return _internal_media();
}
inline void MovieSetValueCommandArchive_PropertyValue::unsafe_arena_set_allocated_media(
    ::TSP::DataReference* media) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  media_ = media;
  if (media) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.media)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::release_media() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = media_;
  media_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::unsafe_arena_release_media() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.PropertyValue.media)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = media_;
  media_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::_internal_mutable_media() {
  _has_bits_[0] |= 0x00000002u;
  if (media_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    media_ = p;
  }
  return media_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive_PropertyValue::mutable_media() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.PropertyValue.media)
  return _internal_mutable_media();
}
inline void MovieSetValueCommandArchive_PropertyValue::set_allocated_media(::TSP::DataReference* media) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_);
  }
  if (media) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(media)->GetArena();
    if (message_arena != submessage_arena) {
      media = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  media_ = media;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.PropertyValue.media)
}

// optional bool playsAcrossSlides = 9;
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_has_playsacrossslides() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive_PropertyValue::has_playsacrossslides() const {
  return _internal_has_playsacrossslides();
}
inline void MovieSetValueCommandArchive_PropertyValue::clear_playsacrossslides() {
  playsacrossslides_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool MovieSetValueCommandArchive_PropertyValue::_internal_playsacrossslides() const {
  return playsacrossslides_;
}
inline bool MovieSetValueCommandArchive_PropertyValue::playsacrossslides() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.PropertyValue.playsAcrossSlides)
  return _internal_playsacrossslides();
}
inline void MovieSetValueCommandArchive_PropertyValue::_internal_set_playsacrossslides(bool value) {
  _has_bits_[0] |= 0x00000100u;
  playsacrossslides_ = value;
}
inline void MovieSetValueCommandArchive_PropertyValue::set_playsacrossslides(bool value) {
  _internal_set_playsacrossslides(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.PropertyValue.playsAcrossSlides)
}

// -------------------------------------------------------------------

// MovieSetValueCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool MovieSetValueCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MovieSetValueCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& MovieSetValueCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& MovieSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.super)
  return _internal_super();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* MovieSetValueCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* MovieSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* MovieSetValueCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* MovieSetValueCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.super)
  return _internal_mutable_super();
}
inline void MovieSetValueCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.super)
}

// optional int32 property = 2;
inline bool MovieSetValueCommandArchive::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MovieSetValueCommandArchive::has_property() const {
  return _internal_has_property();
}
inline void MovieSetValueCommandArchive::clear_property() {
  property_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovieSetValueCommandArchive::_internal_property() const {
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovieSetValueCommandArchive::property() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.property)
  return _internal_property();
}
inline void MovieSetValueCommandArchive::_internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  property_ = value;
}
inline void MovieSetValueCommandArchive::set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:TSD.MovieSetValueCommandArchive.property)
}

// optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
inline bool MovieSetValueCommandArchive::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_value() const {
  return _internal_has_value();
}
inline void MovieSetValueCommandArchive::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSD::MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive::_internal_value() const {
  const ::TSD::MovieSetValueCommandArchive_PropertyValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::MovieSetValueCommandArchive_PropertyValue&>(
      ::TSD::_MovieSetValueCommandArchive_PropertyValue_default_instance_);
}
inline const ::TSD::MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive::value() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.value)
  return _internal_value();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_value(
    ::TSD::MovieSetValueCommandArchive_PropertyValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.value)
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.value)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::MovieSetValueCommandArchive_PropertyValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::mutable_value() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.value)
  return _internal_mutable_value();
}
inline void MovieSetValueCommandArchive::set_allocated_value(::TSD::MovieSetValueCommandArchive_PropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.value)
}

// optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
inline bool MovieSetValueCommandArchive::_internal_has_oldvalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || oldvalue_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_oldvalue() const {
  return _internal_has_oldvalue();
}
inline void MovieSetValueCommandArchive::clear_oldvalue() {
  if (oldvalue_ != nullptr) oldvalue_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSD::MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive::_internal_oldvalue() const {
  const ::TSD::MovieSetValueCommandArchive_PropertyValue* p = oldvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::MovieSetValueCommandArchive_PropertyValue&>(
      ::TSD::_MovieSetValueCommandArchive_PropertyValue_default_instance_);
}
inline const ::TSD::MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive::oldvalue() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.oldValue)
  return _internal_oldvalue();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_oldvalue(
    ::TSD::MovieSetValueCommandArchive_PropertyValue* oldvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldvalue_);
  }
  oldvalue_ = oldvalue;
  if (oldvalue) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.oldValue)
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::release_oldvalue() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* temp = oldvalue_;
  oldvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::unsafe_arena_release_oldvalue() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.oldValue)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::MovieSetValueCommandArchive_PropertyValue* temp = oldvalue_;
  oldvalue_ = nullptr;
  return temp;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::_internal_mutable_oldvalue() {
  _has_bits_[0] |= 0x00000004u;
  if (oldvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::MovieSetValueCommandArchive_PropertyValue>(GetArena());
    oldvalue_ = p;
  }
  return oldvalue_;
}
inline ::TSD::MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive::mutable_oldvalue() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.oldValue)
  return _internal_mutable_oldvalue();
}
inline void MovieSetValueCommandArchive::set_allocated_oldvalue(::TSD::MovieSetValueCommandArchive_PropertyValue* oldvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oldvalue_;
  }
  if (oldvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oldvalue);
    if (message_arena != submessage_arena) {
      oldvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oldvalue_ = oldvalue;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.oldValue)
}

// optional .TSP.DataReference importedauxiliarymedia = 5;
inline bool MovieSetValueCommandArchive::_internal_has_importedauxiliarymedia() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || importedauxiliarymedia_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_importedauxiliarymedia() const {
  return _internal_has_importedauxiliarymedia();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive::_internal_importedauxiliarymedia() const {
  const ::TSP::DataReference* p = importedauxiliarymedia_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive::importedauxiliarymedia() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.importedauxiliarymedia)
  return _internal_importedauxiliarymedia();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_importedauxiliarymedia(
    ::TSP::DataReference* importedauxiliarymedia) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(importedauxiliarymedia_);
  }
  importedauxiliarymedia_ = importedauxiliarymedia;
  if (importedauxiliarymedia) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.importedauxiliarymedia)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::release_importedauxiliarymedia() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = importedauxiliarymedia_;
  importedauxiliarymedia_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::unsafe_arena_release_importedauxiliarymedia() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.importedauxiliarymedia)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = importedauxiliarymedia_;
  importedauxiliarymedia_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::_internal_mutable_importedauxiliarymedia() {
  _has_bits_[0] |= 0x00000008u;
  if (importedauxiliarymedia_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    importedauxiliarymedia_ = p;
  }
  return importedauxiliarymedia_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::mutable_importedauxiliarymedia() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.importedauxiliarymedia)
  return _internal_mutable_importedauxiliarymedia();
}
inline void MovieSetValueCommandArchive::set_allocated_importedauxiliarymedia(::TSP::DataReference* importedauxiliarymedia) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(importedauxiliarymedia_);
  }
  if (importedauxiliarymedia) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(importedauxiliarymedia)->GetArena();
    if (message_arena != submessage_arena) {
      importedauxiliarymedia = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, importedauxiliarymedia, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  importedauxiliarymedia_ = importedauxiliarymedia;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.importedauxiliarymedia)
}

// optional .TSP.DataReference oldimportedauxiliarymedia = 6;
inline bool MovieSetValueCommandArchive::_internal_has_oldimportedauxiliarymedia() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || oldimportedauxiliarymedia_ != nullptr);
  return value;
}
inline bool MovieSetValueCommandArchive::has_oldimportedauxiliarymedia() const {
  return _internal_has_oldimportedauxiliarymedia();
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive::_internal_oldimportedauxiliarymedia() const {
  const ::TSP::DataReference* p = oldimportedauxiliarymedia_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& MovieSetValueCommandArchive::oldimportedauxiliarymedia() const {
  // @@protoc_insertion_point(field_get:TSD.MovieSetValueCommandArchive.oldimportedauxiliarymedia)
  return _internal_oldimportedauxiliarymedia();
}
inline void MovieSetValueCommandArchive::unsafe_arena_set_allocated_oldimportedauxiliarymedia(
    ::TSP::DataReference* oldimportedauxiliarymedia) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimportedauxiliarymedia_);
  }
  oldimportedauxiliarymedia_ = oldimportedauxiliarymedia;
  if (oldimportedauxiliarymedia) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MovieSetValueCommandArchive.oldimportedauxiliarymedia)
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::release_oldimportedauxiliarymedia() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = oldimportedauxiliarymedia_;
  oldimportedauxiliarymedia_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::unsafe_arena_release_oldimportedauxiliarymedia() {
  // @@protoc_insertion_point(field_release:TSD.MovieSetValueCommandArchive.oldimportedauxiliarymedia)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = oldimportedauxiliarymedia_;
  oldimportedauxiliarymedia_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::_internal_mutable_oldimportedauxiliarymedia() {
  _has_bits_[0] |= 0x00000010u;
  if (oldimportedauxiliarymedia_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldimportedauxiliarymedia_ = p;
  }
  return oldimportedauxiliarymedia_;
}
inline ::TSP::DataReference* MovieSetValueCommandArchive::mutable_oldimportedauxiliarymedia() {
  // @@protoc_insertion_point(field_mutable:TSD.MovieSetValueCommandArchive.oldimportedauxiliarymedia)
  return _internal_mutable_oldimportedauxiliarymedia();
}
inline void MovieSetValueCommandArchive::set_allocated_oldimportedauxiliarymedia(::TSP::DataReference* oldimportedauxiliarymedia) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimportedauxiliarymedia_);
  }
  if (oldimportedauxiliarymedia) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimportedauxiliarymedia)->GetArena();
    if (message_arena != submessage_arena) {
      oldimportedauxiliarymedia = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldimportedauxiliarymedia, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  oldimportedauxiliarymedia_ = oldimportedauxiliarymedia;
  // @@protoc_insertion_point(field_set_allocated:TSD.MovieSetValueCommandArchive.oldimportedauxiliarymedia)
}

// -------------------------------------------------------------------

// MediaStyleSetValueCommandArchive

// required .TSD.BaseStyleSetValueCommandArchive super = 1;
inline bool MediaStyleSetValueCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MediaStyleSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaStyleSetValueCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::BaseStyleSetValueCommandArchive& MediaStyleSetValueCommandArchive::_internal_super() const {
  const ::TSD::BaseStyleSetValueCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::BaseStyleSetValueCommandArchive&>(
      ::TSD::_BaseStyleSetValueCommandArchive_default_instance_);
}
inline const ::TSD::BaseStyleSetValueCommandArchive& MediaStyleSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaStyleSetValueCommandArchive.super)
  return _internal_super();
}
inline void MediaStyleSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::BaseStyleSetValueCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaStyleSetValueCommandArchive.super)
}
inline ::TSD::BaseStyleSetValueCommandArchive* MediaStyleSetValueCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseStyleSetValueCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::BaseStyleSetValueCommandArchive* MediaStyleSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaStyleSetValueCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::BaseStyleSetValueCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::BaseStyleSetValueCommandArchive* MediaStyleSetValueCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::BaseStyleSetValueCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::BaseStyleSetValueCommandArchive* MediaStyleSetValueCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaStyleSetValueCommandArchive.super)
  return _internal_mutable_super();
}
inline void MediaStyleSetValueCommandArchive::set_allocated_super(::TSD::BaseStyleSetValueCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaStyleSetValueCommandArchive.super)
}

// optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
inline bool MediaStyleSetValueCommandArchive::_internal_has_change() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || change_ != nullptr);
  return value;
}
inline bool MediaStyleSetValueCommandArchive::has_change() const {
  return _internal_has_change();
}
inline const ::TSDSOS::MediaStylePropertyChangeSetArchive& MediaStyleSetValueCommandArchive::_internal_change() const {
  const ::TSDSOS::MediaStylePropertyChangeSetArchive* p = change_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSDSOS::MediaStylePropertyChangeSetArchive&>(
      ::TSDSOS::_MediaStylePropertyChangeSetArchive_default_instance_);
}
inline const ::TSDSOS::MediaStylePropertyChangeSetArchive& MediaStyleSetValueCommandArchive::change() const {
  // @@protoc_insertion_point(field_get:TSD.MediaStyleSetValueCommandArchive.change)
  return _internal_change();
}
inline void MediaStyleSetValueCommandArchive::unsafe_arena_set_allocated_change(
    ::TSDSOS::MediaStylePropertyChangeSetArchive* change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  change_ = change;
  if (change) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaStyleSetValueCommandArchive.change)
}
inline ::TSDSOS::MediaStylePropertyChangeSetArchive* MediaStyleSetValueCommandArchive::release_change() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSDSOS::MediaStylePropertyChangeSetArchive* temp = change_;
  change_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSDSOS::MediaStylePropertyChangeSetArchive* MediaStyleSetValueCommandArchive::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:TSD.MediaStyleSetValueCommandArchive.change)
  _has_bits_[0] &= ~0x00000002u;
  ::TSDSOS::MediaStylePropertyChangeSetArchive* temp = change_;
  change_ = nullptr;
  return temp;
}
inline ::TSDSOS::MediaStylePropertyChangeSetArchive* MediaStyleSetValueCommandArchive::_internal_mutable_change() {
  _has_bits_[0] |= 0x00000002u;
  if (change_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSDSOS::MediaStylePropertyChangeSetArchive>(GetArena());
    change_ = p;
  }
  return change_;
}
inline ::TSDSOS::MediaStylePropertyChangeSetArchive* MediaStyleSetValueCommandArchive::mutable_change() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaStyleSetValueCommandArchive.change)
  return _internal_mutable_change();
}
inline void MediaStyleSetValueCommandArchive::set_allocated_change(::TSDSOS::MediaStylePropertyChangeSetArchive* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change)->GetArena();
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  change_ = change;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaStyleSetValueCommandArchive.change)
}

// -------------------------------------------------------------------

// ImageMediaCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ImageMediaCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageMediaCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ImageMediaCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ImageMediaCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.super)
  return _internal_super();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ImageMediaCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageMediaCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageMediaCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ImageMediaCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageMediaCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.super)
}

// optional .TSP.DataReference newImageData = 8;
inline bool ImageMediaCommandArchive::_internal_has_newimagedata() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || newimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_newimagedata() const {
  return _internal_has_newimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_newimagedata() const {
  const ::TSP::DataReference* p = newimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::newimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.newImageData)
  return _internal_newimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_newimagedata(
    ::TSP::DataReference* newimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newimagedata_);
  }
  newimagedata_ = newimagedata;
  if (newimagedata) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.newImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_newimagedata() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = newimagedata_;
  newimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_newimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.newImageData)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = newimagedata_;
  newimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_newimagedata() {
  _has_bits_[0] |= 0x00000040u;
  if (newimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    newimagedata_ = p;
  }
  return newimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_newimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.newImageData)
  return _internal_mutable_newimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_newimagedata(::TSP::DataReference* newimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newimagedata_);
  }
  if (newimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      newimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  newimagedata_ = newimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.newImageData)
}

// optional .TSP.DataReference oldImageData = 9;
inline bool ImageMediaCommandArchive::_internal_has_oldimagedata() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || oldimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldimagedata() const {
  return _internal_has_oldimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldimagedata() const {
  const ::TSP::DataReference* p = oldimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldImageData)
  return _internal_oldimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldimagedata(
    ::TSP::DataReference* oldimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimagedata_);
  }
  oldimagedata_ = oldimagedata;
  if (oldimagedata) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldimagedata() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::DataReference* temp = oldimagedata_;
  oldimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldImageData)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::DataReference* temp = oldimagedata_;
  oldimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldimagedata() {
  _has_bits_[0] |= 0x00000080u;
  if (oldimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldimagedata_ = p;
  }
  return oldimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldImageData)
  return _internal_mutable_oldimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_oldimagedata(::TSP::DataReference* oldimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimagedata_);
  }
  if (oldimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      oldimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  oldimagedata_ = oldimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldImageData)
}

// optional .TSP.DataReference oldOriginalImageData = 10;
inline bool ImageMediaCommandArchive::_internal_has_oldoriginalimagedata() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || oldoriginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldoriginalimagedata() const {
  return _internal_has_oldoriginalimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldoriginalimagedata() const {
  const ::TSP::DataReference* p = oldoriginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldoriginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldOriginalImageData)
  return _internal_oldoriginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldoriginalimagedata(
    ::TSP::DataReference* oldoriginalimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalimagedata_);
  }
  oldoriginalimagedata_ = oldoriginalimagedata;
  if (oldoriginalimagedata) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldOriginalImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldoriginalimagedata() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::DataReference* temp = oldoriginalimagedata_;
  oldoriginalimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldoriginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldOriginalImageData)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::DataReference* temp = oldoriginalimagedata_;
  oldoriginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldoriginalimagedata() {
  _has_bits_[0] |= 0x00000100u;
  if (oldoriginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldoriginalimagedata_ = p;
  }
  return oldoriginalimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldoriginalimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldOriginalImageData)
  return _internal_mutable_oldoriginalimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_oldoriginalimagedata(::TSP::DataReference* oldoriginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalimagedata_);
  }
  if (oldoriginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      oldoriginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldoriginalimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  oldoriginalimagedata_ = oldoriginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldOriginalImageData)
}

// optional .TSP.Size oldNaturalSize = 6;
inline bool ImageMediaCommandArchive::_internal_has_oldnaturalsize() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || oldnaturalsize_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldnaturalsize() const {
  return _internal_has_oldnaturalsize();
}
inline const ::TSP::Size& ImageMediaCommandArchive::_internal_oldnaturalsize() const {
  const ::TSP::Size* p = oldnaturalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageMediaCommandArchive::oldnaturalsize() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldNaturalSize)
  return _internal_oldnaturalsize();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldnaturalsize(
    ::TSP::Size* oldnaturalsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldnaturalsize_);
  }
  oldnaturalsize_ = oldnaturalsize;
  if (oldnaturalsize) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldNaturalSize)
}
inline ::TSP::Size* ImageMediaCommandArchive::release_oldnaturalsize() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = oldnaturalsize_;
  oldnaturalsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageMediaCommandArchive::unsafe_arena_release_oldnaturalsize() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldNaturalSize)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Size* temp = oldnaturalsize_;
  oldnaturalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageMediaCommandArchive::_internal_mutable_oldnaturalsize() {
  _has_bits_[0] |= 0x00000010u;
  if (oldnaturalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    oldnaturalsize_ = p;
  }
  return oldnaturalsize_;
}
inline ::TSP::Size* ImageMediaCommandArchive::mutable_oldnaturalsize() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldNaturalSize)
  return _internal_mutable_oldnaturalsize();
}
inline void ImageMediaCommandArchive::set_allocated_oldnaturalsize(::TSP::Size* oldnaturalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldnaturalsize_);
  }
  if (oldnaturalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldnaturalsize)->GetArena();
    if (message_arena != submessage_arena) {
      oldnaturalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldnaturalsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  oldnaturalsize_ = oldnaturalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldNaturalSize)
}

// optional .TSP.DataReference newOriginalImageData = 11;
inline bool ImageMediaCommandArchive::_internal_has_neworiginalimagedata() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || neworiginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_neworiginalimagedata() const {
  return _internal_has_neworiginalimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_neworiginalimagedata() const {
  const ::TSP::DataReference* p = neworiginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::neworiginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.newOriginalImageData)
  return _internal_neworiginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_neworiginalimagedata(
    ::TSP::DataReference* neworiginalimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalimagedata_);
  }
  neworiginalimagedata_ = neworiginalimagedata;
  if (neworiginalimagedata) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.newOriginalImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_neworiginalimagedata() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::DataReference* temp = neworiginalimagedata_;
  neworiginalimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_neworiginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.newOriginalImageData)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::DataReference* temp = neworiginalimagedata_;
  neworiginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_neworiginalimagedata() {
  _has_bits_[0] |= 0x00000200u;
  if (neworiginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    neworiginalimagedata_ = p;
  }
  return neworiginalimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_neworiginalimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.newOriginalImageData)
  return _internal_mutable_neworiginalimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_neworiginalimagedata(::TSP::DataReference* neworiginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalimagedata_);
  }
  if (neworiginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      neworiginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neworiginalimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  neworiginalimagedata_ = neworiginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.newOriginalImageData)
}

// optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
inline bool ImageMediaCommandArchive::_internal_has_oldimageadjustments() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || oldimageadjustments_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldimageadjustments() const {
  return _internal_has_oldimageadjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageMediaCommandArchive::_internal_oldimageadjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = oldimageadjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageMediaCommandArchive::oldimageadjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldImageAdjustments)
  return _internal_oldimageadjustments();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldimageadjustments(
    ::TSD::ImageAdjustmentsArchive* oldimageadjustments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimageadjustments_);
  }
  oldimageadjustments_ = oldimageadjustments;
  if (oldimageadjustments) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldImageAdjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::release_oldimageadjustments() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::ImageAdjustmentsArchive* temp = oldimageadjustments_;
  oldimageadjustments_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::unsafe_arena_release_oldimageadjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldImageAdjustments)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::ImageAdjustmentsArchive* temp = oldimageadjustments_;
  oldimageadjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::_internal_mutable_oldimageadjustments() {
  _has_bits_[0] |= 0x00000400u;
  if (oldimageadjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArena());
    oldimageadjustments_ = p;
  }
  return oldimageadjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::mutable_oldimageadjustments() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldImageAdjustments)
  return _internal_mutable_oldimageadjustments();
}
inline void ImageMediaCommandArchive::set_allocated_oldimageadjustments(::TSD::ImageAdjustmentsArchive* oldimageadjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimageadjustments_);
  }
  if (oldimageadjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldimageadjustments)->GetArena();
    if (message_arena != submessage_arena) {
      oldimageadjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldimageadjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  oldimageadjustments_ = oldimageadjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldImageAdjustments)
}

// optional .TSP.DataReference oldAdjustedImageData = 13;
inline bool ImageMediaCommandArchive::_internal_has_oldadjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || oldadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldadjustedimagedata() const {
  return _internal_has_oldadjustedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldadjustedimagedata() const {
  const ::TSP::DataReference* p = oldadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
  return _internal_oldadjustedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldadjustedimagedata(
    ::TSP::DataReference* oldadjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldadjustedimagedata_);
  }
  oldadjustedimagedata_ = oldadjustedimagedata;
  if (oldadjustedimagedata) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldadjustedimagedata() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::DataReference* temp = oldadjustedimagedata_;
  oldadjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::DataReference* temp = oldadjustedimagedata_;
  oldadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldadjustedimagedata() {
  _has_bits_[0] |= 0x00000800u;
  if (oldadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldadjustedimagedata_ = p;
  }
  return oldadjustedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldadjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
  return _internal_mutable_oldadjustedimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_oldadjustedimagedata(::TSP::DataReference* oldadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldadjustedimagedata_);
  }
  if (oldadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldadjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      oldadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldadjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  oldadjustedimagedata_ = oldadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldAdjustedImageData)
}

// optional .TSP.DataReference oldEnhancedImageData = 14;
inline bool ImageMediaCommandArchive::_internal_has_oldenhancedimagedata() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || oldenhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldenhancedimagedata() const {
  return _internal_has_oldenhancedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldenhancedimagedata() const {
  const ::TSP::DataReference* p = oldenhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldenhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
  return _internal_oldenhancedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldenhancedimagedata(
    ::TSP::DataReference* oldenhancedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldenhancedimagedata_);
  }
  oldenhancedimagedata_ = oldenhancedimagedata;
  if (oldenhancedimagedata) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldenhancedimagedata() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::DataReference* temp = oldenhancedimagedata_;
  oldenhancedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldenhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
  _has_bits_[0] &= ~0x00001000u;
  ::TSP::DataReference* temp = oldenhancedimagedata_;
  oldenhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldenhancedimagedata() {
  _has_bits_[0] |= 0x00001000u;
  if (oldenhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldenhancedimagedata_ = p;
  }
  return oldenhancedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldenhancedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
  return _internal_mutable_oldenhancedimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_oldenhancedimagedata(::TSP::DataReference* oldenhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldenhancedimagedata_);
  }
  if (oldenhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldenhancedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      oldenhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldenhancedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  oldenhancedimagedata_ = oldenhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldEnhancedImageData)
}

// optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
inline bool ImageMediaCommandArchive::_internal_has_imageadjustments() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || imageadjustments_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_imageadjustments() const {
  return _internal_has_imageadjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageMediaCommandArchive::_internal_imageadjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = imageadjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageMediaCommandArchive::imageadjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.imageAdjustments)
  return _internal_imageadjustments();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_imageadjustments(
    ::TSD::ImageAdjustmentsArchive* imageadjustments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageadjustments_);
  }
  imageadjustments_ = imageadjustments;
  if (imageadjustments) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.imageAdjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::release_imageadjustments() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::ImageAdjustmentsArchive* temp = imageadjustments_;
  imageadjustments_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::unsafe_arena_release_imageadjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.imageAdjustments)
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::ImageAdjustmentsArchive* temp = imageadjustments_;
  imageadjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::_internal_mutable_imageadjustments() {
  _has_bits_[0] |= 0x00002000u;
  if (imageadjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArena());
    imageadjustments_ = p;
  }
  return imageadjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageMediaCommandArchive::mutable_imageadjustments() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.imageAdjustments)
  return _internal_mutable_imageadjustments();
}
inline void ImageMediaCommandArchive::set_allocated_imageadjustments(::TSD::ImageAdjustmentsArchive* imageadjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageadjustments_);
  }
  if (imageadjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageadjustments)->GetArena();
    if (message_arena != submessage_arena) {
      imageadjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageadjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  imageadjustments_ = imageadjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.imageAdjustments)
}

// optional .TSP.DataReference adjustedImageData = 16;
inline bool ImageMediaCommandArchive::_internal_has_adjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || adjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_adjustedimagedata() const {
  return _internal_has_adjustedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_adjustedimagedata() const {
  const ::TSP::DataReference* p = adjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::adjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.adjustedImageData)
  return _internal_adjustedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_adjustedimagedata(
    ::TSP::DataReference* adjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata_);
  }
  adjustedimagedata_ = adjustedimagedata;
  if (adjustedimagedata) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.adjustedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_adjustedimagedata() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::DataReference* temp = adjustedimagedata_;
  adjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_adjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.adjustedImageData)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::DataReference* temp = adjustedimagedata_;
  adjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_adjustedimagedata() {
  _has_bits_[0] |= 0x00004000u;
  if (adjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    adjustedimagedata_ = p;
  }
  return adjustedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_adjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.adjustedImageData)
  return _internal_mutable_adjustedimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_adjustedimagedata(::TSP::DataReference* adjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata_);
  }
  if (adjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      adjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  adjustedimagedata_ = adjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.adjustedImageData)
}

// optional .TSP.DataReference enhancedImageData = 17;
inline bool ImageMediaCommandArchive::_internal_has_enhancedimagedata() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || enhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_enhancedimagedata() const {
  return _internal_has_enhancedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_enhancedimagedata() const {
  const ::TSP::DataReference* p = enhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::enhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.enhancedImageData)
  return _internal_enhancedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_enhancedimagedata(
    ::TSP::DataReference* enhancedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata_);
  }
  enhancedimagedata_ = enhancedimagedata;
  if (enhancedimagedata) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.enhancedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_enhancedimagedata() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::DataReference* temp = enhancedimagedata_;
  enhancedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_enhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.enhancedImageData)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::DataReference* temp = enhancedimagedata_;
  enhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_enhancedimagedata() {
  _has_bits_[0] |= 0x00008000u;
  if (enhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    enhancedimagedata_ = p;
  }
  return enhancedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_enhancedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.enhancedImageData)
  return _internal_mutable_enhancedimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_enhancedimagedata(::TSP::DataReference* enhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata_);
  }
  if (enhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      enhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhancedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  enhancedimagedata_ = enhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.enhancedImageData)
}

// optional .TSP.DataReference newThumbnailImageData = 18;
inline bool ImageMediaCommandArchive::_internal_has_newthumbnailimagedata() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || newthumbnailimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_newthumbnailimagedata() const {
  return _internal_has_newthumbnailimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_newthumbnailimagedata() const {
  const ::TSP::DataReference* p = newthumbnailimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::newthumbnailimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.newThumbnailImageData)
  return _internal_newthumbnailimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_newthumbnailimagedata(
    ::TSP::DataReference* newthumbnailimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newthumbnailimagedata_);
  }
  newthumbnailimagedata_ = newthumbnailimagedata;
  if (newthumbnailimagedata) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.newThumbnailImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_newthumbnailimagedata() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::DataReference* temp = newthumbnailimagedata_;
  newthumbnailimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_newthumbnailimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.newThumbnailImageData)
  _has_bits_[0] &= ~0x00010000u;
  ::TSP::DataReference* temp = newthumbnailimagedata_;
  newthumbnailimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_newthumbnailimagedata() {
  _has_bits_[0] |= 0x00010000u;
  if (newthumbnailimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    newthumbnailimagedata_ = p;
  }
  return newthumbnailimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_newthumbnailimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.newThumbnailImageData)
  return _internal_mutable_newthumbnailimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_newthumbnailimagedata(::TSP::DataReference* newthumbnailimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newthumbnailimagedata_);
  }
  if (newthumbnailimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newthumbnailimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      newthumbnailimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newthumbnailimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  newthumbnailimagedata_ = newthumbnailimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.newThumbnailImageData)
}

// optional .TSP.DataReference oldThumbnailImageData = 19;
inline bool ImageMediaCommandArchive::_internal_has_oldthumbnailimagedata() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || oldthumbnailimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldthumbnailimagedata() const {
  return _internal_has_oldthumbnailimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldthumbnailimagedata() const {
  const ::TSP::DataReference* p = oldthumbnailimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldthumbnailimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldThumbnailImageData)
  return _internal_oldthumbnailimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldthumbnailimagedata(
    ::TSP::DataReference* oldthumbnailimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldthumbnailimagedata_);
  }
  oldthumbnailimagedata_ = oldthumbnailimagedata;
  if (oldthumbnailimagedata) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldThumbnailImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldthumbnailimagedata() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::DataReference* temp = oldthumbnailimagedata_;
  oldthumbnailimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldthumbnailimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldThumbnailImageData)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::DataReference* temp = oldthumbnailimagedata_;
  oldthumbnailimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldthumbnailimagedata() {
  _has_bits_[0] |= 0x00020000u;
  if (oldthumbnailimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldthumbnailimagedata_ = p;
  }
  return oldthumbnailimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldthumbnailimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldThumbnailImageData)
  return _internal_mutable_oldthumbnailimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_oldthumbnailimagedata(::TSP::DataReference* oldthumbnailimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldthumbnailimagedata_);
  }
  if (oldthumbnailimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldthumbnailimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      oldthumbnailimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldthumbnailimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  oldthumbnailimagedata_ = oldthumbnailimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldThumbnailImageData)
}

// optional .TSP.DataReference thumbnailAdjustedImageData = 20;
inline bool ImageMediaCommandArchive::_internal_has_thumbnailadjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || thumbnailadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_thumbnailadjustedimagedata() const {
  return _internal_has_thumbnailadjustedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_thumbnailadjustedimagedata() const {
  const ::TSP::DataReference* p = thumbnailadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::thumbnailadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.thumbnailAdjustedImageData)
  return _internal_thumbnailadjustedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_thumbnailadjustedimagedata(
    ::TSP::DataReference* thumbnailadjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnailadjustedimagedata_);
  }
  thumbnailadjustedimagedata_ = thumbnailadjustedimagedata;
  if (thumbnailadjustedimagedata) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.thumbnailAdjustedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_thumbnailadjustedimagedata() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::DataReference* temp = thumbnailadjustedimagedata_;
  thumbnailadjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_thumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.thumbnailAdjustedImageData)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::DataReference* temp = thumbnailadjustedimagedata_;
  thumbnailadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_thumbnailadjustedimagedata() {
  _has_bits_[0] |= 0x00040000u;
  if (thumbnailadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    thumbnailadjustedimagedata_ = p;
  }
  return thumbnailadjustedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_thumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.thumbnailAdjustedImageData)
  return _internal_mutable_thumbnailadjustedimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_thumbnailadjustedimagedata(::TSP::DataReference* thumbnailadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnailadjustedimagedata_);
  }
  if (thumbnailadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnailadjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      thumbnailadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnailadjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  thumbnailadjustedimagedata_ = thumbnailadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.thumbnailAdjustedImageData)
}

// optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
inline bool ImageMediaCommandArchive::_internal_has_oldthumbnailadjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || oldthumbnailadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_oldthumbnailadjustedimagedata() const {
  return _internal_has_oldthumbnailadjustedimagedata();
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::_internal_oldthumbnailadjustedimagedata() const {
  const ::TSP::DataReference* p = oldthumbnailadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageMediaCommandArchive::oldthumbnailadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.oldThumbnailAdjustedImageData)
  return _internal_oldthumbnailadjustedimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_oldthumbnailadjustedimagedata(
    ::TSP::DataReference* oldthumbnailadjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldthumbnailadjustedimagedata_);
  }
  oldthumbnailadjustedimagedata_ = oldthumbnailadjustedimagedata;
  if (oldthumbnailadjustedimagedata) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.oldThumbnailAdjustedImageData)
}
inline ::TSP::DataReference* ImageMediaCommandArchive::release_oldthumbnailadjustedimagedata() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::DataReference* temp = oldthumbnailadjustedimagedata_;
  oldthumbnailadjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::unsafe_arena_release_oldthumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.oldThumbnailAdjustedImageData)
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::DataReference* temp = oldthumbnailadjustedimagedata_;
  oldthumbnailadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::_internal_mutable_oldthumbnailadjustedimagedata() {
  _has_bits_[0] |= 0x00080000u;
  if (oldthumbnailadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    oldthumbnailadjustedimagedata_ = p;
  }
  return oldthumbnailadjustedimagedata_;
}
inline ::TSP::DataReference* ImageMediaCommandArchive::mutable_oldthumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.oldThumbnailAdjustedImageData)
  return _internal_mutable_oldthumbnailadjustedimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_oldthumbnailadjustedimagedata(::TSP::DataReference* oldthumbnailadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldthumbnailadjustedimagedata_);
  }
  if (oldthumbnailadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldthumbnailadjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      oldthumbnailadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldthumbnailadjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  oldthumbnailadjustedimagedata_ = oldthumbnailadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.oldThumbnailAdjustedImageData)
}

// optional .TSP.Reference database_newImageData = 3;
inline bool ImageMediaCommandArchive::_internal_has_database_newimagedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || database_newimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_newimagedata() const {
  return _internal_has_database_newimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_newimagedata() const {
  const ::TSP::Reference* p = database_newimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_newimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_newImageData)
  return _internal_database_newimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_newimagedata(
    ::TSP::Reference* database_newimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_newimagedata_);
  }
  database_newimagedata_ = database_newimagedata;
  if (database_newimagedata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_newImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_newimagedata() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = database_newimagedata_;
  database_newimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_newimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_newImageData)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = database_newimagedata_;
  database_newimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_newimagedata() {
  _has_bits_[0] |= 0x00000002u;
  if (database_newimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_newimagedata_ = p;
  }
  return database_newimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_newimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_newImageData)
  return _internal_mutable_database_newimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_database_newimagedata(::TSP::Reference* database_newimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_newimagedata_);
  }
  if (database_newimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_newimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      database_newimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_newimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  database_newimagedata_ = database_newimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_newImageData)
}

// optional .TSP.Reference database_oldImageData = 4;
inline bool ImageMediaCommandArchive::_internal_has_database_oldimagedata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || database_oldimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_oldimagedata() const {
  return _internal_has_database_oldimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_oldimagedata() const {
  const ::TSP::Reference* p = database_oldimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_oldimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_oldImageData)
  return _internal_database_oldimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_oldimagedata(
    ::TSP::Reference* database_oldimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldimagedata_);
  }
  database_oldimagedata_ = database_oldimagedata;
  if (database_oldimagedata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_oldImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_oldimagedata() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = database_oldimagedata_;
  database_oldimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_oldimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_oldImageData)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = database_oldimagedata_;
  database_oldimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_oldimagedata() {
  _has_bits_[0] |= 0x00000004u;
  if (database_oldimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_oldimagedata_ = p;
  }
  return database_oldimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_oldimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_oldImageData)
  return _internal_mutable_database_oldimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_database_oldimagedata(::TSP::Reference* database_oldimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldimagedata_);
  }
  if (database_oldimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      database_oldimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_oldimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  database_oldimagedata_ = database_oldimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_oldImageData)
}

// optional .TSP.Reference database_oldOriginalImageData = 5;
inline bool ImageMediaCommandArchive::_internal_has_database_oldoriginalimagedata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || database_oldoriginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_oldoriginalimagedata() const {
  return _internal_has_database_oldoriginalimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_oldoriginalimagedata() const {
  const ::TSP::Reference* p = database_oldoriginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_oldoriginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
  return _internal_database_oldoriginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_oldoriginalimagedata(
    ::TSP::Reference* database_oldoriginalimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldoriginalimagedata_);
  }
  database_oldoriginalimagedata_ = database_oldoriginalimagedata;
  if (database_oldoriginalimagedata) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_oldoriginalimagedata() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = database_oldoriginalimagedata_;
  database_oldoriginalimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_oldoriginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = database_oldoriginalimagedata_;
  database_oldoriginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_oldoriginalimagedata() {
  _has_bits_[0] |= 0x00000008u;
  if (database_oldoriginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_oldoriginalimagedata_ = p;
  }
  return database_oldoriginalimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_oldoriginalimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
  return _internal_mutable_database_oldoriginalimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_database_oldoriginalimagedata(::TSP::Reference* database_oldoriginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldoriginalimagedata_);
  }
  if (database_oldoriginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_oldoriginalimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      database_oldoriginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_oldoriginalimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  database_oldoriginalimagedata_ = database_oldoriginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_oldOriginalImageData)
}

// optional .TSP.Reference database_newOriginalImageData = 7;
inline bool ImageMediaCommandArchive::_internal_has_database_neworiginalimagedata() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || database_neworiginalimagedata_ != nullptr);
  return value;
}
inline bool ImageMediaCommandArchive::has_database_neworiginalimagedata() const {
  return _internal_has_database_neworiginalimagedata();
}
inline const ::TSP::Reference& ImageMediaCommandArchive::_internal_database_neworiginalimagedata() const {
  const ::TSP::Reference* p = database_neworiginalimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMediaCommandArchive::database_neworiginalimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
  return _internal_database_neworiginalimagedata();
}
inline void ImageMediaCommandArchive::unsafe_arena_set_allocated_database_neworiginalimagedata(
    ::TSP::Reference* database_neworiginalimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_neworiginalimagedata_);
  }
  database_neworiginalimagedata_ = database_neworiginalimagedata;
  if (database_neworiginalimagedata) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
}
inline ::TSP::Reference* ImageMediaCommandArchive::release_database_neworiginalimagedata() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = database_neworiginalimagedata_;
  database_neworiginalimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::unsafe_arena_release_database_neworiginalimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = database_neworiginalimagedata_;
  database_neworiginalimagedata_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMediaCommandArchive::_internal_mutable_database_neworiginalimagedata() {
  _has_bits_[0] |= 0x00000020u;
  if (database_neworiginalimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    database_neworiginalimagedata_ = p;
  }
  return database_neworiginalimagedata_;
}
inline ::TSP::Reference* ImageMediaCommandArchive::mutable_database_neworiginalimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
  return _internal_mutable_database_neworiginalimagedata();
}
inline void ImageMediaCommandArchive::set_allocated_database_neworiginalimagedata(::TSP::Reference* database_neworiginalimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_neworiginalimagedata_);
  }
  if (database_neworiginalimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_neworiginalimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      database_neworiginalimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_neworiginalimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  database_neworiginalimagedata_ = database_neworiginalimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMediaCommandArchive.database_newOriginalImageData)
}

// -------------------------------------------------------------------

// MediaOriginalSizeCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool MediaOriginalSizeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaOriginalSizeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSD::InfoCommandArchive& MediaOriginalSizeCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& MediaOriginalSizeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.super)
  return _internal_super();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* MediaOriginalSizeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* MediaOriginalSizeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* MediaOriginalSizeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* MediaOriginalSizeCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.super)
  return _internal_mutable_super();
}
inline void MediaOriginalSizeCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.super)
}

// optional .TSP.Size newOriginalSize = 2;
inline bool MediaOriginalSizeCommandArchive::_internal_has_neworiginalsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || neworiginalsize_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_neworiginalsize() const {
  return _internal_has_neworiginalsize();
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::_internal_neworiginalsize() const {
  const ::TSP::Size* p = neworiginalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::neworiginalsize() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
  return _internal_neworiginalsize();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_neworiginalsize(
    ::TSP::Size* neworiginalsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize_);
  }
  neworiginalsize_ = neworiginalsize;
  if (neworiginalsize) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::release_neworiginalsize() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = neworiginalsize_;
  neworiginalsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::unsafe_arena_release_neworiginalsize() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = neworiginalsize_;
  neworiginalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::_internal_mutable_neworiginalsize() {
  _has_bits_[0] |= 0x00000004u;
  if (neworiginalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    neworiginalsize_ = p;
  }
  return neworiginalsize_;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::mutable_neworiginalsize() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
  return _internal_mutable_neworiginalsize();
}
inline void MediaOriginalSizeCommandArchive::set_allocated_neworiginalsize(::TSP::Size* neworiginalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize_);
  }
  if (neworiginalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize)->GetArena();
    if (message_arena != submessage_arena) {
      neworiginalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neworiginalsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  neworiginalsize_ = neworiginalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.newOriginalSize)
}

// optional .TSP.Size oldOriginalSize = 3;
inline bool MediaOriginalSizeCommandArchive::_internal_has_oldoriginalsize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || oldoriginalsize_ != nullptr);
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_oldoriginalsize() const {
  return _internal_has_oldoriginalsize();
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::_internal_oldoriginalsize() const {
  const ::TSP::Size* p = oldoriginalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& MediaOriginalSizeCommandArchive::oldoriginalsize() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
  return _internal_oldoriginalsize();
}
inline void MediaOriginalSizeCommandArchive::unsafe_arena_set_allocated_oldoriginalsize(
    ::TSP::Size* oldoriginalsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize_);
  }
  oldoriginalsize_ = oldoriginalsize;
  if (oldoriginalsize) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::release_oldoriginalsize() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = oldoriginalsize_;
  oldoriginalsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::unsafe_arena_release_oldoriginalsize() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Size* temp = oldoriginalsize_;
  oldoriginalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::_internal_mutable_oldoriginalsize() {
  _has_bits_[0] |= 0x00000008u;
  if (oldoriginalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    oldoriginalsize_ = p;
  }
  return oldoriginalsize_;
}
inline ::TSP::Size* MediaOriginalSizeCommandArchive::mutable_oldoriginalsize() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
  return _internal_mutable_oldoriginalsize();
}
inline void MediaOriginalSizeCommandArchive::set_allocated_oldoriginalsize(::TSP::Size* oldoriginalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize_);
  }
  if (oldoriginalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize)->GetArena();
    if (message_arena != submessage_arena) {
      oldoriginalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldoriginalsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  oldoriginalsize_ = oldoriginalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.oldOriginalSize)
}

// required string propertyName = 4;
inline bool MediaOriginalSizeCommandArchive::_internal_has_propertyname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaOriginalSizeCommandArchive::has_propertyname() const {
  return _internal_has_propertyname();
}
inline void MediaOriginalSizeCommandArchive::clear_propertyname() {
  propertyname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaOriginalSizeCommandArchive::propertyname() const {
  // @@protoc_insertion_point(field_get:TSD.MediaOriginalSizeCommandArchive.propertyName)
  return _internal_propertyname();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MediaOriginalSizeCommandArchive::set_propertyname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSD.MediaOriginalSizeCommandArchive.propertyName)
}
inline std::string* MediaOriginalSizeCommandArchive::mutable_propertyname() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaOriginalSizeCommandArchive.propertyName)
  return _internal_mutable_propertyname();
}
inline const std::string& MediaOriginalSizeCommandArchive::_internal_propertyname() const {
  return propertyname_.Get();
}
inline void MediaOriginalSizeCommandArchive::_internal_set_propertyname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MediaOriginalSizeCommandArchive::_internal_mutable_propertyname() {
  _has_bits_[0] |= 0x00000001u;
  return propertyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MediaOriginalSizeCommandArchive::release_propertyname() {
  // @@protoc_insertion_point(field_release:TSD.MediaOriginalSizeCommandArchive.propertyName)
  if (!_internal_has_propertyname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return propertyname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MediaOriginalSizeCommandArchive::set_allocated_propertyname(std::string* propertyname) {
  if (propertyname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  propertyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propertyname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaOriginalSizeCommandArchive.propertyName)
}

// -------------------------------------------------------------------

// MediaInfoGeometryCommandArchive

// required .TSD.InfoGeometryCommandArchive super = 1;
inline bool MediaInfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MediaInfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaInfoGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoGeometryCommandArchive& MediaInfoGeometryCommandArchive::_internal_super() const {
  const ::TSD::InfoGeometryCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoGeometryCommandArchive&>(
      ::TSD::_InfoGeometryCommandArchive_default_instance_);
}
inline const ::TSD::InfoGeometryCommandArchive& MediaInfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaInfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void MediaInfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoGeometryCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaInfoGeometryCommandArchive.super)
}
inline ::TSD::InfoGeometryCommandArchive* MediaInfoGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoGeometryCommandArchive* MediaInfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaInfoGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoGeometryCommandArchive* MediaInfoGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoGeometryCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoGeometryCommandArchive* MediaInfoGeometryCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaInfoGeometryCommandArchive.super)
  return _internal_mutable_super();
}
inline void MediaInfoGeometryCommandArchive::set_allocated_super(::TSD::InfoGeometryCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaInfoGeometryCommandArchive.super)
}

// required .TSP.Size newOriginalSize = 2;
inline bool MediaInfoGeometryCommandArchive::_internal_has_neworiginalsize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || neworiginalsize_ != nullptr);
  return value;
}
inline bool MediaInfoGeometryCommandArchive::has_neworiginalsize() const {
  return _internal_has_neworiginalsize();
}
inline const ::TSP::Size& MediaInfoGeometryCommandArchive::_internal_neworiginalsize() const {
  const ::TSP::Size* p = neworiginalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& MediaInfoGeometryCommandArchive::neworiginalsize() const {
  // @@protoc_insertion_point(field_get:TSD.MediaInfoGeometryCommandArchive.newOriginalSize)
  return _internal_neworiginalsize();
}
inline void MediaInfoGeometryCommandArchive::unsafe_arena_set_allocated_neworiginalsize(
    ::TSP::Size* neworiginalsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize_);
  }
  neworiginalsize_ = neworiginalsize;
  if (neworiginalsize) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaInfoGeometryCommandArchive.newOriginalSize)
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::release_neworiginalsize() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = neworiginalsize_;
  neworiginalsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::unsafe_arena_release_neworiginalsize() {
  // @@protoc_insertion_point(field_release:TSD.MediaInfoGeometryCommandArchive.newOriginalSize)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = neworiginalsize_;
  neworiginalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::_internal_mutable_neworiginalsize() {
  _has_bits_[0] |= 0x00000002u;
  if (neworiginalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    neworiginalsize_ = p;
  }
  return neworiginalsize_;
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::mutable_neworiginalsize() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaInfoGeometryCommandArchive.newOriginalSize)
  return _internal_mutable_neworiginalsize();
}
inline void MediaInfoGeometryCommandArchive::set_allocated_neworiginalsize(::TSP::Size* neworiginalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize_);
  }
  if (neworiginalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neworiginalsize)->GetArena();
    if (message_arena != submessage_arena) {
      neworiginalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neworiginalsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  neworiginalsize_ = neworiginalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaInfoGeometryCommandArchive.newOriginalSize)
}

// required .TSP.Size oldOriginalSize = 3;
inline bool MediaInfoGeometryCommandArchive::_internal_has_oldoriginalsize() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || oldoriginalsize_ != nullptr);
  return value;
}
inline bool MediaInfoGeometryCommandArchive::has_oldoriginalsize() const {
  return _internal_has_oldoriginalsize();
}
inline const ::TSP::Size& MediaInfoGeometryCommandArchive::_internal_oldoriginalsize() const {
  const ::TSP::Size* p = oldoriginalsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& MediaInfoGeometryCommandArchive::oldoriginalsize() const {
  // @@protoc_insertion_point(field_get:TSD.MediaInfoGeometryCommandArchive.oldOriginalSize)
  return _internal_oldoriginalsize();
}
inline void MediaInfoGeometryCommandArchive::unsafe_arena_set_allocated_oldoriginalsize(
    ::TSP::Size* oldoriginalsize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize_);
  }
  oldoriginalsize_ = oldoriginalsize;
  if (oldoriginalsize) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaInfoGeometryCommandArchive.oldOriginalSize)
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::release_oldoriginalsize() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = oldoriginalsize_;
  oldoriginalsize_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::unsafe_arena_release_oldoriginalsize() {
  // @@protoc_insertion_point(field_release:TSD.MediaInfoGeometryCommandArchive.oldOriginalSize)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = oldoriginalsize_;
  oldoriginalsize_ = nullptr;
  return temp;
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::_internal_mutable_oldoriginalsize() {
  _has_bits_[0] |= 0x00000004u;
  if (oldoriginalsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    oldoriginalsize_ = p;
  }
  return oldoriginalsize_;
}
inline ::TSP::Size* MediaInfoGeometryCommandArchive::mutable_oldoriginalsize() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaInfoGeometryCommandArchive.oldOriginalSize)
  return _internal_mutable_oldoriginalsize();
}
inline void MediaInfoGeometryCommandArchive::set_allocated_oldoriginalsize(::TSP::Size* oldoriginalsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize_);
  }
  if (oldoriginalsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldoriginalsize)->GetArena();
    if (message_arena != submessage_arena) {
      oldoriginalsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldoriginalsize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oldoriginalsize_ = oldoriginalsize;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaInfoGeometryCommandArchive.oldOriginalSize)
}

// -------------------------------------------------------------------

// ImageNaturalSizeCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ImageNaturalSizeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageNaturalSizeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageNaturalSizeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ImageNaturalSizeCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ImageNaturalSizeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageNaturalSizeCommandArchive.super)
  return _internal_super();
}
inline void ImageNaturalSizeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageNaturalSizeCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ImageNaturalSizeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageNaturalSizeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageNaturalSizeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageNaturalSizeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ImageNaturalSizeCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageNaturalSizeCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageNaturalSizeCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageNaturalSizeCommandArchive.super)
}

// optional .TSP.Size new_natural_size = 2;
inline bool ImageNaturalSizeCommandArchive::_internal_has_new_natural_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_natural_size_ != nullptr);
  return value;
}
inline bool ImageNaturalSizeCommandArchive::has_new_natural_size() const {
  return _internal_has_new_natural_size();
}
inline const ::TSP::Size& ImageNaturalSizeCommandArchive::_internal_new_natural_size() const {
  const ::TSP::Size* p = new_natural_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageNaturalSizeCommandArchive::new_natural_size() const {
  // @@protoc_insertion_point(field_get:TSD.ImageNaturalSizeCommandArchive.new_natural_size)
  return _internal_new_natural_size();
}
inline void ImageNaturalSizeCommandArchive::unsafe_arena_set_allocated_new_natural_size(
    ::TSP::Size* new_natural_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_natural_size_);
  }
  new_natural_size_ = new_natural_size;
  if (new_natural_size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageNaturalSizeCommandArchive.new_natural_size)
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::release_new_natural_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = new_natural_size_;
  new_natural_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::unsafe_arena_release_new_natural_size() {
  // @@protoc_insertion_point(field_release:TSD.ImageNaturalSizeCommandArchive.new_natural_size)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Size* temp = new_natural_size_;
  new_natural_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::_internal_mutable_new_natural_size() {
  _has_bits_[0] |= 0x00000002u;
  if (new_natural_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    new_natural_size_ = p;
  }
  return new_natural_size_;
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::mutable_new_natural_size() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageNaturalSizeCommandArchive.new_natural_size)
  return _internal_mutable_new_natural_size();
}
inline void ImageNaturalSizeCommandArchive::set_allocated_new_natural_size(::TSP::Size* new_natural_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_natural_size_);
  }
  if (new_natural_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_natural_size)->GetArena();
    if (message_arena != submessage_arena) {
      new_natural_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_natural_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_natural_size_ = new_natural_size;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageNaturalSizeCommandArchive.new_natural_size)
}

// optional .TSP.Size old_natural_size = 3;
inline bool ImageNaturalSizeCommandArchive::_internal_has_old_natural_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_natural_size_ != nullptr);
  return value;
}
inline bool ImageNaturalSizeCommandArchive::has_old_natural_size() const {
  return _internal_has_old_natural_size();
}
inline const ::TSP::Size& ImageNaturalSizeCommandArchive::_internal_old_natural_size() const {
  const ::TSP::Size* p = old_natural_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageNaturalSizeCommandArchive::old_natural_size() const {
  // @@protoc_insertion_point(field_get:TSD.ImageNaturalSizeCommandArchive.old_natural_size)
  return _internal_old_natural_size();
}
inline void ImageNaturalSizeCommandArchive::unsafe_arena_set_allocated_old_natural_size(
    ::TSP::Size* old_natural_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_);
  }
  old_natural_size_ = old_natural_size;
  if (old_natural_size) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageNaturalSizeCommandArchive.old_natural_size)
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::release_old_natural_size() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = old_natural_size_;
  old_natural_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::unsafe_arena_release_old_natural_size() {
  // @@protoc_insertion_point(field_release:TSD.ImageNaturalSizeCommandArchive.old_natural_size)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Size* temp = old_natural_size_;
  old_natural_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::_internal_mutable_old_natural_size() {
  _has_bits_[0] |= 0x00000004u;
  if (old_natural_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    old_natural_size_ = p;
  }
  return old_natural_size_;
}
inline ::TSP::Size* ImageNaturalSizeCommandArchive::mutable_old_natural_size() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageNaturalSizeCommandArchive.old_natural_size)
  return _internal_mutable_old_natural_size();
}
inline void ImageNaturalSizeCommandArchive::set_allocated_old_natural_size(::TSP::Size* old_natural_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_);
  }
  if (old_natural_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size)->GetArena();
    if (message_arena != submessage_arena) {
      old_natural_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_natural_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_natural_size_ = old_natural_size;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageNaturalSizeCommandArchive.old_natural_size)
}

// -------------------------------------------------------------------

// ImageMaskCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ImageMaskCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageMaskCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ImageMaskCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ImageMaskCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.super)
  return _internal_super();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ImageMaskCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageMaskCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageMaskCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ImageMaskCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageMaskCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.super)
}

// optional .TSP.Reference newMaskInfo = 2;
inline bool ImageMaskCommandArchive::_internal_has_newmaskinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || newmaskinfo_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_newmaskinfo() const {
  return _internal_has_newmaskinfo();
}
inline const ::TSP::Reference& ImageMaskCommandArchive::_internal_newmaskinfo() const {
  const ::TSP::Reference* p = newmaskinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMaskCommandArchive::newmaskinfo() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.newMaskInfo)
  return _internal_newmaskinfo();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_newmaskinfo(
    ::TSP::Reference* newmaskinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newmaskinfo_);
  }
  newmaskinfo_ = newmaskinfo;
  if (newmaskinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.newMaskInfo)
}
inline ::TSP::Reference* ImageMaskCommandArchive::release_newmaskinfo() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = newmaskinfo_;
  newmaskinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::unsafe_arena_release_newmaskinfo() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.newMaskInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = newmaskinfo_;
  newmaskinfo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::_internal_mutable_newmaskinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (newmaskinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    newmaskinfo_ = p;
  }
  return newmaskinfo_;
}
inline ::TSP::Reference* ImageMaskCommandArchive::mutable_newmaskinfo() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.newMaskInfo)
  return _internal_mutable_newmaskinfo();
}
inline void ImageMaskCommandArchive::set_allocated_newmaskinfo(::TSP::Reference* newmaskinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(newmaskinfo_);
  }
  if (newmaskinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newmaskinfo)->GetArena();
    if (message_arena != submessage_arena) {
      newmaskinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newmaskinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newmaskinfo_ = newmaskinfo;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.newMaskInfo)
}

// optional .TSP.Reference oldMaskInfo = 3;
inline bool ImageMaskCommandArchive::_internal_has_oldmaskinfo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || oldmaskinfo_ != nullptr);
  return value;
}
inline bool ImageMaskCommandArchive::has_oldmaskinfo() const {
  return _internal_has_oldmaskinfo();
}
inline const ::TSP::Reference& ImageMaskCommandArchive::_internal_oldmaskinfo() const {
  const ::TSP::Reference* p = oldmaskinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ImageMaskCommandArchive::oldmaskinfo() const {
  // @@protoc_insertion_point(field_get:TSD.ImageMaskCommandArchive.oldMaskInfo)
  return _internal_oldmaskinfo();
}
inline void ImageMaskCommandArchive::unsafe_arena_set_allocated_oldmaskinfo(
    ::TSP::Reference* oldmaskinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldmaskinfo_);
  }
  oldmaskinfo_ = oldmaskinfo;
  if (oldmaskinfo) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageMaskCommandArchive.oldMaskInfo)
}
inline ::TSP::Reference* ImageMaskCommandArchive::release_oldmaskinfo() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = oldmaskinfo_;
  oldmaskinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::unsafe_arena_release_oldmaskinfo() {
  // @@protoc_insertion_point(field_release:TSD.ImageMaskCommandArchive.oldMaskInfo)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = oldmaskinfo_;
  oldmaskinfo_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ImageMaskCommandArchive::_internal_mutable_oldmaskinfo() {
  _has_bits_[0] |= 0x00000004u;
  if (oldmaskinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    oldmaskinfo_ = p;
  }
  return oldmaskinfo_;
}
inline ::TSP::Reference* ImageMaskCommandArchive::mutable_oldmaskinfo() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageMaskCommandArchive.oldMaskInfo)
  return _internal_mutable_oldmaskinfo();
}
inline void ImageMaskCommandArchive::set_allocated_oldmaskinfo(::TSP::Reference* oldmaskinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldmaskinfo_);
  }
  if (oldmaskinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldmaskinfo)->GetArena();
    if (message_arena != submessage_arena) {
      oldmaskinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldmaskinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oldmaskinfo_ = oldmaskinfo;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageMaskCommandArchive.oldMaskInfo)
}

// -------------------------------------------------------------------

// ImageAdjustmentsCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ImageAdjustmentsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageAdjustmentsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ImageAdjustmentsCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ImageAdjustmentsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.super)
  return _internal_super();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ImageAdjustmentsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageAdjustmentsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageAdjustmentsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ImageAdjustmentsCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.super)
}

// optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
inline bool ImageAdjustmentsCommandArchive::_internal_has_old_image_adjustments() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_image_adjustments_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_old_image_adjustments() const {
  return _internal_has_old_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::_internal_old_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = old_image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::old_image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
  return _internal_old_image_adjustments();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_old_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* old_image_adjustments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments_);
  }
  old_image_adjustments_ = old_image_adjustments;
  if (old_image_adjustments) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::release_old_image_adjustments() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ImageAdjustmentsArchive* temp = old_image_adjustments_;
  old_image_adjustments_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::unsafe_arena_release_old_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ImageAdjustmentsArchive* temp = old_image_adjustments_;
  old_image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::_internal_mutable_old_image_adjustments() {
  _has_bits_[0] |= 0x00000002u;
  if (old_image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArena());
    old_image_adjustments_ = p;
  }
  return old_image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::mutable_old_image_adjustments() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
  return _internal_mutable_old_image_adjustments();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_old_image_adjustments(::TSD::ImageAdjustmentsArchive* old_image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments_);
  }
  if (old_image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments)->GetArena();
    if (message_arena != submessage_arena) {
      old_image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_image_adjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_image_adjustments_ = old_image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.old_image_adjustments)
}

// optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
inline bool ImageAdjustmentsCommandArchive::_internal_has_new_image_adjustments() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_image_adjustments_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_new_image_adjustments() const {
  return _internal_has_new_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::_internal_new_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = new_image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageAdjustmentsCommandArchive::new_image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
  return _internal_new_image_adjustments();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_new_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* new_image_adjustments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_adjustments_);
  }
  new_image_adjustments_ = new_image_adjustments;
  if (new_image_adjustments) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::release_new_image_adjustments() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ImageAdjustmentsArchive* temp = new_image_adjustments_;
  new_image_adjustments_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::unsafe_arena_release_new_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ImageAdjustmentsArchive* temp = new_image_adjustments_;
  new_image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::_internal_mutable_new_image_adjustments() {
  _has_bits_[0] |= 0x00000004u;
  if (new_image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArena());
    new_image_adjustments_ = p;
  }
  return new_image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageAdjustmentsCommandArchive::mutable_new_image_adjustments() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
  return _internal_mutable_new_image_adjustments();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_new_image_adjustments(::TSD::ImageAdjustmentsArchive* new_image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_adjustments_);
  }
  if (new_image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_adjustments)->GetArena();
    if (message_arena != submessage_arena) {
      new_image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_image_adjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_image_adjustments_ = new_image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.new_image_adjustments)
}

// optional .TSP.DataReference adjustedImageData = 4;
inline bool ImageAdjustmentsCommandArchive::_internal_has_adjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || adjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_adjustedimagedata() const {
  return _internal_has_adjustedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_adjustedimagedata() const {
  const ::TSP::DataReference* p = adjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::adjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
  return _internal_adjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_adjustedimagedata(
    ::TSP::DataReference* adjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata_);
  }
  adjustedimagedata_ = adjustedimagedata;
  if (adjustedimagedata) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_adjustedimagedata() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = adjustedimagedata_;
  adjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_adjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = adjustedimagedata_;
  adjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_adjustedimagedata() {
  _has_bits_[0] |= 0x00000008u;
  if (adjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    adjustedimagedata_ = p;
  }
  return adjustedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_adjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
  return _internal_mutable_adjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_adjustedimagedata(::TSP::DataReference* adjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata_);
  }
  if (adjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      adjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  adjustedimagedata_ = adjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.adjustedImageData)
}

// optional .TSP.DataReference replacedAdjustedImageData = 5;
inline bool ImageAdjustmentsCommandArchive::_internal_has_replacedadjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || replacedadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_replacedadjustedimagedata() const {
  return _internal_has_replacedadjustedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_replacedadjustedimagedata() const {
  const ::TSP::DataReference* p = replacedadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::replacedadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
  return _internal_replacedadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_replacedadjustedimagedata(
    ::TSP::DataReference* replacedadjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedadjustedimagedata_);
  }
  replacedadjustedimagedata_ = replacedadjustedimagedata;
  if (replacedadjustedimagedata) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_replacedadjustedimagedata() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = replacedadjustedimagedata_;
  replacedadjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_replacedadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = replacedadjustedimagedata_;
  replacedadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_replacedadjustedimagedata() {
  _has_bits_[0] |= 0x00000010u;
  if (replacedadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    replacedadjustedimagedata_ = p;
  }
  return replacedadjustedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_replacedadjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
  return _internal_mutable_replacedadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_replacedadjustedimagedata(::TSP::DataReference* replacedadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedadjustedimagedata_);
  }
  if (replacedadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedadjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      replacedadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacedadjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  replacedadjustedimagedata_ = replacedadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData)
}

// optional .TSP.DataReference enhancedImageData = 6;
inline bool ImageAdjustmentsCommandArchive::_internal_has_enhancedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || enhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_enhancedimagedata() const {
  return _internal_has_enhancedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_enhancedimagedata() const {
  const ::TSP::DataReference* p = enhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::enhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
  return _internal_enhancedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_enhancedimagedata(
    ::TSP::DataReference* enhancedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata_);
  }
  enhancedimagedata_ = enhancedimagedata;
  if (enhancedimagedata) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_enhancedimagedata() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::DataReference* temp = enhancedimagedata_;
  enhancedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_enhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::DataReference* temp = enhancedimagedata_;
  enhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_enhancedimagedata() {
  _has_bits_[0] |= 0x00000020u;
  if (enhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    enhancedimagedata_ = p;
  }
  return enhancedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_enhancedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
  return _internal_mutable_enhancedimagedata();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_enhancedimagedata(::TSP::DataReference* enhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata_);
  }
  if (enhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhancedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      enhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhancedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  enhancedimagedata_ = enhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.enhancedImageData)
}

// optional .TSP.DataReference replacedEnhancedImageData = 7;
inline bool ImageAdjustmentsCommandArchive::_internal_has_replacedenhancedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || replacedenhancedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_replacedenhancedimagedata() const {
  return _internal_has_replacedenhancedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_replacedenhancedimagedata() const {
  const ::TSP::DataReference* p = replacedenhancedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::replacedenhancedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
  return _internal_replacedenhancedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_replacedenhancedimagedata(
    ::TSP::DataReference* replacedenhancedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedenhancedimagedata_);
  }
  replacedenhancedimagedata_ = replacedenhancedimagedata;
  if (replacedenhancedimagedata) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_replacedenhancedimagedata() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = replacedenhancedimagedata_;
  replacedenhancedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_replacedenhancedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = replacedenhancedimagedata_;
  replacedenhancedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_replacedenhancedimagedata() {
  _has_bits_[0] |= 0x00000040u;
  if (replacedenhancedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    replacedenhancedimagedata_ = p;
  }
  return replacedenhancedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_replacedenhancedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
  return _internal_mutable_replacedenhancedimagedata();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_replacedenhancedimagedata(::TSP::DataReference* replacedenhancedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedenhancedimagedata_);
  }
  if (replacedenhancedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedenhancedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      replacedenhancedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacedenhancedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  replacedenhancedimagedata_ = replacedenhancedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData)
}

// optional .TSP.DataReference thumbnailAdjustedImageData = 8;
inline bool ImageAdjustmentsCommandArchive::_internal_has_thumbnailadjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || thumbnailadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_thumbnailadjustedimagedata() const {
  return _internal_has_thumbnailadjustedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_thumbnailadjustedimagedata() const {
  const ::TSP::DataReference* p = thumbnailadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::thumbnailadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.thumbnailAdjustedImageData)
  return _internal_thumbnailadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_thumbnailadjustedimagedata(
    ::TSP::DataReference* thumbnailadjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnailadjustedimagedata_);
  }
  thumbnailadjustedimagedata_ = thumbnailadjustedimagedata;
  if (thumbnailadjustedimagedata) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.thumbnailAdjustedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_thumbnailadjustedimagedata() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::DataReference* temp = thumbnailadjustedimagedata_;
  thumbnailadjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_thumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.thumbnailAdjustedImageData)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::DataReference* temp = thumbnailadjustedimagedata_;
  thumbnailadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_thumbnailadjustedimagedata() {
  _has_bits_[0] |= 0x00000080u;
  if (thumbnailadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    thumbnailadjustedimagedata_ = p;
  }
  return thumbnailadjustedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_thumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.thumbnailAdjustedImageData)
  return _internal_mutable_thumbnailadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_thumbnailadjustedimagedata(::TSP::DataReference* thumbnailadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnailadjustedimagedata_);
  }
  if (thumbnailadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnailadjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      thumbnailadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnailadjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  thumbnailadjustedimagedata_ = thumbnailadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.thumbnailAdjustedImageData)
}

// optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
inline bool ImageAdjustmentsCommandArchive::_internal_has_replacedthumbnailadjustedimagedata() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || replacedthumbnailadjustedimagedata_ != nullptr);
  return value;
}
inline bool ImageAdjustmentsCommandArchive::has_replacedthumbnailadjustedimagedata() const {
  return _internal_has_replacedthumbnailadjustedimagedata();
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::_internal_replacedthumbnailadjustedimagedata() const {
  const ::TSP::DataReference* p = replacedthumbnailadjustedimagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageAdjustmentsCommandArchive::replacedthumbnailadjustedimagedata() const {
  // @@protoc_insertion_point(field_get:TSD.ImageAdjustmentsCommandArchive.replacedThumbnailAdjustedImageData)
  return _internal_replacedthumbnailadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::unsafe_arena_set_allocated_replacedthumbnailadjustedimagedata(
    ::TSP::DataReference* replacedthumbnailadjustedimagedata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedthumbnailadjustedimagedata_);
  }
  replacedthumbnailadjustedimagedata_ = replacedthumbnailadjustedimagedata;
  if (replacedthumbnailadjustedimagedata) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedThumbnailAdjustedImageData)
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::release_replacedthumbnailadjustedimagedata() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::DataReference* temp = replacedthumbnailadjustedimagedata_;
  replacedthumbnailadjustedimagedata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::unsafe_arena_release_replacedthumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_release:TSD.ImageAdjustmentsCommandArchive.replacedThumbnailAdjustedImageData)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::DataReference* temp = replacedthumbnailadjustedimagedata_;
  replacedthumbnailadjustedimagedata_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::_internal_mutable_replacedthumbnailadjustedimagedata() {
  _has_bits_[0] |= 0x00000100u;
  if (replacedthumbnailadjustedimagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    replacedthumbnailadjustedimagedata_ = p;
  }
  return replacedthumbnailadjustedimagedata_;
}
inline ::TSP::DataReference* ImageAdjustmentsCommandArchive::mutable_replacedthumbnailadjustedimagedata() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageAdjustmentsCommandArchive.replacedThumbnailAdjustedImageData)
  return _internal_mutable_replacedthumbnailadjustedimagedata();
}
inline void ImageAdjustmentsCommandArchive::set_allocated_replacedthumbnailadjustedimagedata(::TSP::DataReference* replacedthumbnailadjustedimagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedthumbnailadjustedimagedata_);
  }
  if (replacedthumbnailadjustedimagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacedthumbnailadjustedimagedata)->GetArena();
    if (message_arena != submessage_arena) {
      replacedthumbnailadjustedimagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacedthumbnailadjustedimagedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  replacedthumbnailadjustedimagedata_ = replacedthumbnailadjustedimagedata;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageAdjustmentsCommandArchive.replacedThumbnailAdjustedImageData)
}

// -------------------------------------------------------------------

// MediaFlagsCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool MediaFlagsCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool MediaFlagsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void MediaFlagsCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSD::InfoCommandArchive& MediaFlagsCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& MediaFlagsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.super)
  return _internal_super();
}
inline void MediaFlagsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.MediaFlagsCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* MediaFlagsCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* MediaFlagsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.MediaFlagsCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* MediaFlagsCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* MediaFlagsCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaFlagsCommandArchive.super)
  return _internal_mutable_super();
}
inline void MediaFlagsCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaFlagsCommandArchive.super)
}

// optional bool was_media_replaced = 5;
inline bool MediaFlagsCommandArchive::_internal_has_was_media_replaced() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MediaFlagsCommandArchive::has_was_media_replaced() const {
  return _internal_has_was_media_replaced();
}
inline void MediaFlagsCommandArchive::clear_was_media_replaced() {
  was_media_replaced_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MediaFlagsCommandArchive::_internal_was_media_replaced() const {
  return was_media_replaced_;
}
inline bool MediaFlagsCommandArchive::was_media_replaced() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.was_media_replaced)
  return _internal_was_media_replaced();
}
inline void MediaFlagsCommandArchive::_internal_set_was_media_replaced(bool value) {
  _has_bits_[0] |= 0x00000004u;
  was_media_replaced_ = value;
}
inline void MediaFlagsCommandArchive::set_was_media_replaced(bool value) {
  _internal_set_was_media_replaced(value);
  // @@protoc_insertion_point(field_set:TSD.MediaFlagsCommandArchive.was_media_replaced)
}

// optional bool is_placeholder = 6;
inline bool MediaFlagsCommandArchive::_internal_has_is_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MediaFlagsCommandArchive::has_is_placeholder() const {
  return _internal_has_is_placeholder();
}
inline void MediaFlagsCommandArchive::clear_is_placeholder() {
  is_placeholder_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MediaFlagsCommandArchive::_internal_is_placeholder() const {
  return is_placeholder_;
}
inline bool MediaFlagsCommandArchive::is_placeholder() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.is_placeholder)
  return _internal_is_placeholder();
}
inline void MediaFlagsCommandArchive::_internal_set_is_placeholder(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_placeholder_ = value;
}
inline void MediaFlagsCommandArchive::set_is_placeholder(bool value) {
  _internal_set_is_placeholder(value);
  // @@protoc_insertion_point(field_set:TSD.MediaFlagsCommandArchive.is_placeholder)
}

// optional bool old_was_media_replaced = 7;
inline bool MediaFlagsCommandArchive::_internal_has_old_was_media_replaced() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MediaFlagsCommandArchive::has_old_was_media_replaced() const {
  return _internal_has_old_was_media_replaced();
}
inline void MediaFlagsCommandArchive::clear_old_was_media_replaced() {
  old_was_media_replaced_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MediaFlagsCommandArchive::_internal_old_was_media_replaced() const {
  return old_was_media_replaced_;
}
inline bool MediaFlagsCommandArchive::old_was_media_replaced() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.old_was_media_replaced)
  return _internal_old_was_media_replaced();
}
inline void MediaFlagsCommandArchive::_internal_set_old_was_media_replaced(bool value) {
  _has_bits_[0] |= 0x00000010u;
  old_was_media_replaced_ = value;
}
inline void MediaFlagsCommandArchive::set_old_was_media_replaced(bool value) {
  _internal_set_old_was_media_replaced(value);
  // @@protoc_insertion_point(field_set:TSD.MediaFlagsCommandArchive.old_was_media_replaced)
}

// optional bool old_is_placeholder = 8;
inline bool MediaFlagsCommandArchive::_internal_has_old_is_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MediaFlagsCommandArchive::has_old_is_placeholder() const {
  return _internal_has_old_is_placeholder();
}
inline void MediaFlagsCommandArchive::clear_old_is_placeholder() {
  old_is_placeholder_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MediaFlagsCommandArchive::_internal_old_is_placeholder() const {
  return old_is_placeholder_;
}
inline bool MediaFlagsCommandArchive::old_is_placeholder() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.old_is_placeholder)
  return _internal_old_is_placeholder();
}
inline void MediaFlagsCommandArchive::_internal_set_old_is_placeholder(bool value) {
  _has_bits_[0] |= 0x00000020u;
  old_is_placeholder_ = value;
}
inline void MediaFlagsCommandArchive::set_old_is_placeholder(bool value) {
  _internal_set_old_is_placeholder(value);
  // @@protoc_insertion_point(field_set:TSD.MediaFlagsCommandArchive.old_is_placeholder)
}

// required string property_name = 4;
inline bool MediaFlagsCommandArchive::_internal_has_property_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaFlagsCommandArchive::has_property_name() const {
  return _internal_has_property_name();
}
inline void MediaFlagsCommandArchive::clear_property_name() {
  property_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaFlagsCommandArchive::property_name() const {
  // @@protoc_insertion_point(field_get:TSD.MediaFlagsCommandArchive.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void MediaFlagsCommandArchive::set_property_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSD.MediaFlagsCommandArchive.property_name)
}
inline std::string* MediaFlagsCommandArchive::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:TSD.MediaFlagsCommandArchive.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& MediaFlagsCommandArchive::_internal_property_name() const {
  return property_name_.Get();
}
inline void MediaFlagsCommandArchive::_internal_set_property_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* MediaFlagsCommandArchive::_internal_mutable_property_name() {
  _has_bits_[0] |= 0x00000001u;
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MediaFlagsCommandArchive::release_property_name() {
  // @@protoc_insertion_point(field_release:TSD.MediaFlagsCommandArchive.property_name)
  if (!_internal_has_property_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MediaFlagsCommandArchive::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSD.MediaFlagsCommandArchive.property_name)
}

// -------------------------------------------------------------------

// DrawablesCommandGroupArchive

// required .TSK.CommandGroupArchive super = 1;
inline bool DrawablesCommandGroupArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandGroupArchive& DrawablesCommandGroupArchive::_internal_super() const {
  const ::TSK::CommandGroupArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandGroupArchive&>(
      ::TSK::_CommandGroupArchive_default_instance_);
}
inline const ::TSK::CommandGroupArchive& DrawablesCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.super)
  return _internal_super();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandGroupArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.super)
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandGroupArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandGroupArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandGroupArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandGroupArchive* DrawablesCommandGroupArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.super)
  return _internal_mutable_super();
}
inline void DrawablesCommandGroupArchive::set_allocated_super(::TSK::CommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.super)
}

// optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
inline bool DrawablesCommandGroupArchive::_internal_has_obsolete_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || obsolete_selection_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_obsolete_selection() const {
  return _internal_has_obsolete_selection();
}
inline const ::TSD::CanvasSelectionArchive& DrawablesCommandGroupArchive::_internal_obsolete_selection() const {
  const ::TSD::CanvasSelectionArchive* p = obsolete_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::CanvasSelectionArchive&>(
      ::TSD::_CanvasSelectionArchive_default_instance_);
}
inline const ::TSD::CanvasSelectionArchive& DrawablesCommandGroupArchive::obsolete_selection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.obsolete_selection)
  return _internal_obsolete_selection();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_obsolete_selection(
    ::TSD::CanvasSelectionArchive* obsolete_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_selection_);
  }
  obsolete_selection_ = obsolete_selection;
  if (obsolete_selection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.obsolete_selection)
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::release_obsolete_selection() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::CanvasSelectionArchive* temp = obsolete_selection_;
  obsolete_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::unsafe_arena_release_obsolete_selection() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.obsolete_selection)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::CanvasSelectionArchive* temp = obsolete_selection_;
  obsolete_selection_ = nullptr;
  return temp;
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::_internal_mutable_obsolete_selection() {
  _has_bits_[0] |= 0x00000002u;
  if (obsolete_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::CanvasSelectionArchive>(GetArena());
    obsolete_selection_ = p;
  }
  return obsolete_selection_;
}
inline ::TSD::CanvasSelectionArchive* DrawablesCommandGroupArchive::mutable_obsolete_selection() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.obsolete_selection)
  return _internal_mutable_obsolete_selection();
}
inline void DrawablesCommandGroupArchive::set_allocated_obsolete_selection(::TSD::CanvasSelectionArchive* obsolete_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_selection_);
  }
  if (obsolete_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obsolete_selection)->GetArena();
    if (message_arena != submessage_arena) {
      obsolete_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obsolete_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obsolete_selection_ = obsolete_selection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.obsolete_selection)
}

// optional .TSP.Reference modelforselection = 3;
inline bool DrawablesCommandGroupArchive::_internal_has_modelforselection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || modelforselection_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_modelforselection() const {
  return _internal_has_modelforselection();
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::_internal_modelforselection() const {
  const ::TSP::Reference* p = modelforselection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::modelforselection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.modelforselection)
  return _internal_modelforselection();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_modelforselection(
    ::TSP::Reference* modelforselection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modelforselection_);
  }
  modelforselection_ = modelforselection;
  if (modelforselection) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.modelforselection)
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::release_modelforselection() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = modelforselection_;
  modelforselection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::unsafe_arena_release_modelforselection() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.modelforselection)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = modelforselection_;
  modelforselection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::_internal_mutable_modelforselection() {
  _has_bits_[0] |= 0x00000004u;
  if (modelforselection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    modelforselection_ = p;
  }
  return modelforselection_;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::mutable_modelforselection() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.modelforselection)
  return _internal_mutable_modelforselection();
}
inline void DrawablesCommandGroupArchive::set_allocated_modelforselection(::TSP::Reference* modelforselection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modelforselection_);
  }
  if (modelforselection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modelforselection)->GetArena();
    if (message_arena != submessage_arena) {
      modelforselection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modelforselection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  modelforselection_ = modelforselection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.modelforselection)
}

// optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
inline bool DrawablesCommandGroupArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DrawablesCommandGroupArchive::has_type() const {
  return _internal_has_type();
}
inline void DrawablesCommandGroupArchive::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::_internal_type() const {
  return static_cast< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType >(type_);
}
inline ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::type() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.type)
  return _internal_type();
}
inline void DrawablesCommandGroupArchive::_internal_set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value) {
  assert(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void DrawablesCommandGroupArchive::set_type(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSD.DrawablesCommandGroupArchive.type)
}

// optional bool forDrag = 5;
inline bool DrawablesCommandGroupArchive::_internal_has_fordrag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrawablesCommandGroupArchive::has_fordrag() const {
  return _internal_has_fordrag();
}
inline void DrawablesCommandGroupArchive::clear_fordrag() {
  fordrag_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DrawablesCommandGroupArchive::_internal_fordrag() const {
  return fordrag_;
}
inline bool DrawablesCommandGroupArchive::fordrag() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.forDrag)
  return _internal_fordrag();
}
inline void DrawablesCommandGroupArchive::_internal_set_fordrag(bool value) {
  _has_bits_[0] |= 0x00000010u;
  fordrag_ = value;
}
inline void DrawablesCommandGroupArchive::set_fordrag(bool value) {
  _internal_set_fordrag(value);
  // @@protoc_insertion_point(field_set:TSD.DrawablesCommandGroupArchive.forDrag)
}

// optional .TSP.Reference archivedselection = 6;
inline bool DrawablesCommandGroupArchive::_internal_has_archivedselection() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || archivedselection_ != nullptr);
  return value;
}
inline bool DrawablesCommandGroupArchive::has_archivedselection() const {
  return _internal_has_archivedselection();
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::_internal_archivedselection() const {
  const ::TSP::Reference* p = archivedselection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablesCommandGroupArchive::archivedselection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablesCommandGroupArchive.archivedselection)
  return _internal_archivedselection();
}
inline void DrawablesCommandGroupArchive::unsafe_arena_set_allocated_archivedselection(
    ::TSP::Reference* archivedselection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archivedselection_);
  }
  archivedselection_ = archivedselection;
  if (archivedselection) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablesCommandGroupArchive.archivedselection)
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::release_archivedselection() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = archivedselection_;
  archivedselection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::unsafe_arena_release_archivedselection() {
  // @@protoc_insertion_point(field_release:TSD.DrawablesCommandGroupArchive.archivedselection)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = archivedselection_;
  archivedselection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::_internal_mutable_archivedselection() {
  _has_bits_[0] |= 0x00000008u;
  if (archivedselection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    archivedselection_ = p;
  }
  return archivedselection_;
}
inline ::TSP::Reference* DrawablesCommandGroupArchive::mutable_archivedselection() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablesCommandGroupArchive.archivedselection)
  return _internal_mutable_archivedselection();
}
inline void DrawablesCommandGroupArchive::set_allocated_archivedselection(::TSP::Reference* archivedselection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(archivedselection_);
  }
  if (archivedselection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archivedselection)->GetArena();
    if (message_arena != submessage_arena) {
      archivedselection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archivedselection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  archivedselection_ = archivedselection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablesCommandGroupArchive.archivedselection)
}

// -------------------------------------------------------------------

// ExteriorTextWrapCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ExteriorTextWrapCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ExteriorTextWrapCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ExteriorTextWrapCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ExteriorTextWrapCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.super)
  return _internal_super();
}
inline void ExteriorTextWrapCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ExteriorTextWrapCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ExteriorTextWrapCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ExteriorTextWrapCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ExteriorTextWrapCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ExteriorTextWrapCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ExteriorTextWrapCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ExteriorTextWrapCommandArchive.super)
  return _internal_mutable_super();
}
inline void ExteriorTextWrapCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ExteriorTextWrapCommandArchive.super)
}

// optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
inline bool ExteriorTextWrapCommandArchive::_internal_has_old_exterior_text_wrap() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_exterior_text_wrap_ != nullptr);
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_old_exterior_text_wrap() const {
  return _internal_has_old_exterior_text_wrap();
}
inline const ::TSD::ExteriorTextWrapArchive& ExteriorTextWrapCommandArchive::_internal_old_exterior_text_wrap() const {
  const ::TSD::ExteriorTextWrapArchive* p = old_exterior_text_wrap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ExteriorTextWrapArchive&>(
      ::TSD::_ExteriorTextWrapArchive_default_instance_);
}
inline const ::TSD::ExteriorTextWrapArchive& ExteriorTextWrapCommandArchive::old_exterior_text_wrap() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.old_exterior_text_wrap)
  return _internal_old_exterior_text_wrap();
}
inline void ExteriorTextWrapCommandArchive::unsafe_arena_set_allocated_old_exterior_text_wrap(
    ::TSD::ExteriorTextWrapArchive* old_exterior_text_wrap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_exterior_text_wrap_);
  }
  old_exterior_text_wrap_ = old_exterior_text_wrap;
  if (old_exterior_text_wrap) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ExteriorTextWrapCommandArchive.old_exterior_text_wrap)
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive::release_old_exterior_text_wrap() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ExteriorTextWrapArchive* temp = old_exterior_text_wrap_;
  old_exterior_text_wrap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive::unsafe_arena_release_old_exterior_text_wrap() {
  // @@protoc_insertion_point(field_release:TSD.ExteriorTextWrapCommandArchive.old_exterior_text_wrap)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ExteriorTextWrapArchive* temp = old_exterior_text_wrap_;
  old_exterior_text_wrap_ = nullptr;
  return temp;
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive::_internal_mutable_old_exterior_text_wrap() {
  _has_bits_[0] |= 0x00000002u;
  if (old_exterior_text_wrap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ExteriorTextWrapArchive>(GetArena());
    old_exterior_text_wrap_ = p;
  }
  return old_exterior_text_wrap_;
}
inline ::TSD::ExteriorTextWrapArchive* ExteriorTextWrapCommandArchive::mutable_old_exterior_text_wrap() {
  // @@protoc_insertion_point(field_mutable:TSD.ExteriorTextWrapCommandArchive.old_exterior_text_wrap)
  return _internal_mutable_old_exterior_text_wrap();
}
inline void ExteriorTextWrapCommandArchive::set_allocated_old_exterior_text_wrap(::TSD::ExteriorTextWrapArchive* old_exterior_text_wrap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_exterior_text_wrap_);
  }
  if (old_exterior_text_wrap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_exterior_text_wrap)->GetArena();
    if (message_arena != submessage_arena) {
      old_exterior_text_wrap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_exterior_text_wrap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_exterior_text_wrap_ = old_exterior_text_wrap;
  // @@protoc_insertion_point(field_set_allocated:TSD.ExteriorTextWrapCommandArchive.old_exterior_text_wrap)
}

// optional uint32 type = 4;
inline bool ExteriorTextWrapCommandArchive::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_type() const {
  return _internal_has_type();
}
inline void ExteriorTextWrapCommandArchive::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExteriorTextWrapCommandArchive::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExteriorTextWrapCommandArchive::type() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.type)
  return _internal_type();
}
inline void ExteriorTextWrapCommandArchive::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ExteriorTextWrapCommandArchive::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSD.ExteriorTextWrapCommandArchive.type)
}

// optional uint32 direction = 5;
inline bool ExteriorTextWrapCommandArchive::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_direction() const {
  return _internal_has_direction();
}
inline void ExteriorTextWrapCommandArchive::clear_direction() {
  direction_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExteriorTextWrapCommandArchive::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExteriorTextWrapCommandArchive::direction() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.direction)
  return _internal_direction();
}
inline void ExteriorTextWrapCommandArchive::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  direction_ = value;
}
inline void ExteriorTextWrapCommandArchive::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:TSD.ExteriorTextWrapCommandArchive.direction)
}

// optional uint32 fit_type = 6;
inline bool ExteriorTextWrapCommandArchive::_internal_has_fit_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_fit_type() const {
  return _internal_has_fit_type();
}
inline void ExteriorTextWrapCommandArchive::clear_fit_type() {
  fit_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExteriorTextWrapCommandArchive::_internal_fit_type() const {
  return fit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExteriorTextWrapCommandArchive::fit_type() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.fit_type)
  return _internal_fit_type();
}
inline void ExteriorTextWrapCommandArchive::_internal_set_fit_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fit_type_ = value;
}
inline void ExteriorTextWrapCommandArchive::set_fit_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fit_type(value);
  // @@protoc_insertion_point(field_set:TSD.ExteriorTextWrapCommandArchive.fit_type)
}

// optional float margin = 7;
inline bool ExteriorTextWrapCommandArchive::_internal_has_margin() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_margin() const {
  return _internal_has_margin();
}
inline void ExteriorTextWrapCommandArchive::clear_margin() {
  margin_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ExteriorTextWrapCommandArchive::_internal_margin() const {
  return margin_;
}
inline float ExteriorTextWrapCommandArchive::margin() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.margin)
  return _internal_margin();
}
inline void ExteriorTextWrapCommandArchive::_internal_set_margin(float value) {
  _has_bits_[0] |= 0x00000020u;
  margin_ = value;
}
inline void ExteriorTextWrapCommandArchive::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:TSD.ExteriorTextWrapCommandArchive.margin)
}

// optional float alpha_threshold = 8;
inline bool ExteriorTextWrapCommandArchive::_internal_has_alpha_threshold() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_alpha_threshold() const {
  return _internal_has_alpha_threshold();
}
inline void ExteriorTextWrapCommandArchive::clear_alpha_threshold() {
  alpha_threshold_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ExteriorTextWrapCommandArchive::_internal_alpha_threshold() const {
  return alpha_threshold_;
}
inline float ExteriorTextWrapCommandArchive::alpha_threshold() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.alpha_threshold)
  return _internal_alpha_threshold();
}
inline void ExteriorTextWrapCommandArchive::_internal_set_alpha_threshold(float value) {
  _has_bits_[0] |= 0x00000040u;
  alpha_threshold_ = value;
}
inline void ExteriorTextWrapCommandArchive::set_alpha_threshold(float value) {
  _internal_set_alpha_threshold(value);
  // @@protoc_insertion_point(field_set:TSD.ExteriorTextWrapCommandArchive.alpha_threshold)
}

// optional bool is_html_wrap = 9;
inline bool ExteriorTextWrapCommandArchive::_internal_has_is_html_wrap() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExteriorTextWrapCommandArchive::has_is_html_wrap() const {
  return _internal_has_is_html_wrap();
}
inline void ExteriorTextWrapCommandArchive::clear_is_html_wrap() {
  is_html_wrap_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ExteriorTextWrapCommandArchive::_internal_is_html_wrap() const {
  return is_html_wrap_;
}
inline bool ExteriorTextWrapCommandArchive::is_html_wrap() const {
  // @@protoc_insertion_point(field_get:TSD.ExteriorTextWrapCommandArchive.is_html_wrap)
  return _internal_is_html_wrap();
}
inline void ExteriorTextWrapCommandArchive::_internal_set_is_html_wrap(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_html_wrap_ = value;
}
inline void ExteriorTextWrapCommandArchive::set_is_html_wrap(bool value) {
  _internal_set_is_html_wrap(value);
  // @@protoc_insertion_point(field_set:TSD.ExteriorTextWrapCommandArchive.is_html_wrap)
}

// -------------------------------------------------------------------

// DrawableHyperlinkCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawableHyperlinkCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawableHyperlinkCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSD::InfoCommandArchive& DrawableHyperlinkCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawableHyperlinkCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.super)
  return _internal_super();
}
inline void DrawableHyperlinkCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableHyperlinkCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawableHyperlinkCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableHyperlinkCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableHyperlinkCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawableHyperlinkCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawableHyperlinkCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.super)
}

// optional string oldhyperlink_url = 2;
inline bool DrawableHyperlinkCommandArchive::_internal_has_oldhyperlink_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_oldhyperlink_url() const {
  return _internal_has_oldhyperlink_url();
}
inline void DrawableHyperlinkCommandArchive::clear_oldhyperlink_url() {
  oldhyperlink_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawableHyperlinkCommandArchive::oldhyperlink_url() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
  return _internal_oldhyperlink_url();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DrawableHyperlinkCommandArchive::set_oldhyperlink_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 oldhyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
}
inline std::string* DrawableHyperlinkCommandArchive::mutable_oldhyperlink_url() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
  return _internal_mutable_oldhyperlink_url();
}
inline const std::string& DrawableHyperlinkCommandArchive::_internal_oldhyperlink_url() const {
  return oldhyperlink_url_.Get();
}
inline void DrawableHyperlinkCommandArchive::_internal_set_oldhyperlink_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oldhyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DrawableHyperlinkCommandArchive::_internal_mutable_oldhyperlink_url() {
  _has_bits_[0] |= 0x00000001u;
  return oldhyperlink_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrawableHyperlinkCommandArchive::release_oldhyperlink_url() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
  if (!_internal_has_oldhyperlink_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oldhyperlink_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableHyperlinkCommandArchive::set_allocated_oldhyperlink_url(std::string* oldhyperlink_url) {
  if (oldhyperlink_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oldhyperlink_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldhyperlink_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url)
}

// optional string newhyperlink_url = 3;
inline bool DrawableHyperlinkCommandArchive::_internal_has_newhyperlink_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawableHyperlinkCommandArchive::has_newhyperlink_url() const {
  return _internal_has_newhyperlink_url();
}
inline void DrawableHyperlinkCommandArchive::clear_newhyperlink_url() {
  newhyperlink_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DrawableHyperlinkCommandArchive::newhyperlink_url() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
  return _internal_newhyperlink_url();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DrawableHyperlinkCommandArchive::set_newhyperlink_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 newhyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
}
inline std::string* DrawableHyperlinkCommandArchive::mutable_newhyperlink_url() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
  return _internal_mutable_newhyperlink_url();
}
inline const std::string& DrawableHyperlinkCommandArchive::_internal_newhyperlink_url() const {
  return newhyperlink_url_.Get();
}
inline void DrawableHyperlinkCommandArchive::_internal_set_newhyperlink_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  newhyperlink_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DrawableHyperlinkCommandArchive::_internal_mutable_newhyperlink_url() {
  _has_bits_[0] |= 0x00000002u;
  return newhyperlink_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrawableHyperlinkCommandArchive::release_newhyperlink_url() {
  // @@protoc_insertion_point(field_release:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
  if (!_internal_has_newhyperlink_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return newhyperlink_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableHyperlinkCommandArchive::set_allocated_newhyperlink_url(std::string* newhyperlink_url) {
  if (newhyperlink_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newhyperlink_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newhyperlink_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableHyperlinkCommandArchive.newhyperlink_url)
}

// -------------------------------------------------------------------

// CommentInvalidatingCommandSelectionBehaviorArchive

// required .TSK.CommandSelectionBehaviorArchive super = 1;
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandSelectionBehaviorArchive& CommentInvalidatingCommandSelectionBehaviorArchive::_internal_super() const {
  const ::TSK::CommandSelectionBehaviorArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandSelectionBehaviorArchive&>(
      ::TSK::_CommandSelectionBehaviorArchive_default_instance_);
}
inline const ::TSK::CommandSelectionBehaviorArchive& CommentInvalidatingCommandSelectionBehaviorArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.super)
  return _internal_super();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandSelectionBehaviorArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.super)
}
inline ::TSK::CommandSelectionBehaviorArchive* CommentInvalidatingCommandSelectionBehaviorArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandSelectionBehaviorArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandSelectionBehaviorArchive* CommentInvalidatingCommandSelectionBehaviorArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandSelectionBehaviorArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandSelectionBehaviorArchive* CommentInvalidatingCommandSelectionBehaviorArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandSelectionBehaviorArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandSelectionBehaviorArchive* CommentInvalidatingCommandSelectionBehaviorArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.super)
  return _internal_mutable_super();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::set_allocated_super(::TSK::CommandSelectionBehaviorArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.super)
}

// optional .TSP.Reference annotation_displaying_command = 2;
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_has_annotation_displaying_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || annotation_displaying_command_ != nullptr);
  return value;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::has_annotation_displaying_command() const {
  return _internal_has_annotation_displaying_command();
}
inline const ::TSP::Reference& CommentInvalidatingCommandSelectionBehaviorArchive::_internal_annotation_displaying_command() const {
  const ::TSP::Reference* p = annotation_displaying_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommentInvalidatingCommandSelectionBehaviorArchive::annotation_displaying_command() const {
  // @@protoc_insertion_point(field_get:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.annotation_displaying_command)
  return _internal_annotation_displaying_command();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::unsafe_arena_set_allocated_annotation_displaying_command(
    ::TSP::Reference* annotation_displaying_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_displaying_command_);
  }
  annotation_displaying_command_ = annotation_displaying_command;
  if (annotation_displaying_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.annotation_displaying_command)
}
inline ::TSP::Reference* CommentInvalidatingCommandSelectionBehaviorArchive::release_annotation_displaying_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = annotation_displaying_command_;
  annotation_displaying_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommentInvalidatingCommandSelectionBehaviorArchive::unsafe_arena_release_annotation_displaying_command() {
  // @@protoc_insertion_point(field_release:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.annotation_displaying_command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = annotation_displaying_command_;
  annotation_displaying_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommentInvalidatingCommandSelectionBehaviorArchive::_internal_mutable_annotation_displaying_command() {
  _has_bits_[0] |= 0x00000002u;
  if (annotation_displaying_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    annotation_displaying_command_ = p;
  }
  return annotation_displaying_command_;
}
inline ::TSP::Reference* CommentInvalidatingCommandSelectionBehaviorArchive::mutable_annotation_displaying_command() {
  // @@protoc_insertion_point(field_mutable:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.annotation_displaying_command)
  return _internal_mutable_annotation_displaying_command();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::set_allocated_annotation_displaying_command(::TSP::Reference* annotation_displaying_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_displaying_command_);
  }
  if (annotation_displaying_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_displaying_command)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_displaying_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_displaying_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  annotation_displaying_command_ = annotation_displaying_command;
  // @@protoc_insertion_point(field_set_allocated:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.annotation_displaying_command)
}

// optional bool begin_editing_on_undo = 3;
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_has_begin_editing_on_undo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::has_begin_editing_on_undo() const {
  return _internal_has_begin_editing_on_undo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::clear_begin_editing_on_undo() {
  begin_editing_on_undo_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_begin_editing_on_undo() const {
  return begin_editing_on_undo_;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::begin_editing_on_undo() const {
  // @@protoc_insertion_point(field_get:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.begin_editing_on_undo)
  return _internal_begin_editing_on_undo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::_internal_set_begin_editing_on_undo(bool value) {
  _has_bits_[0] |= 0x00000004u;
  begin_editing_on_undo_ = value;
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::set_begin_editing_on_undo(bool value) {
  _internal_set_begin_editing_on_undo(value);
  // @@protoc_insertion_point(field_set:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.begin_editing_on_undo)
}

// optional bool begin_editing_on_redo = 4;
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_has_begin_editing_on_redo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::has_begin_editing_on_redo() const {
  return _internal_has_begin_editing_on_redo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::clear_begin_editing_on_redo() {
  begin_editing_on_redo_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_begin_editing_on_redo() const {
  return begin_editing_on_redo_;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::begin_editing_on_redo() const {
  // @@protoc_insertion_point(field_get:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.begin_editing_on_redo)
  return _internal_begin_editing_on_redo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::_internal_set_begin_editing_on_redo(bool value) {
  _has_bits_[0] |= 0x00000008u;
  begin_editing_on_redo_ = value;
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::set_begin_editing_on_redo(bool value) {
  _internal_set_begin_editing_on_redo(value);
  // @@protoc_insertion_point(field_set:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.begin_editing_on_redo)
}

// optional bool should_invalidate_on_undo = 5;
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_has_should_invalidate_on_undo() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::has_should_invalidate_on_undo() const {
  return _internal_has_should_invalidate_on_undo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::clear_should_invalidate_on_undo() {
  should_invalidate_on_undo_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_should_invalidate_on_undo() const {
  return should_invalidate_on_undo_;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::should_invalidate_on_undo() const {
  // @@protoc_insertion_point(field_get:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.should_invalidate_on_undo)
  return _internal_should_invalidate_on_undo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::_internal_set_should_invalidate_on_undo(bool value) {
  _has_bits_[0] |= 0x00000010u;
  should_invalidate_on_undo_ = value;
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::set_should_invalidate_on_undo(bool value) {
  _internal_set_should_invalidate_on_undo(value);
  // @@protoc_insertion_point(field_set:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.should_invalidate_on_undo)
}

// optional bool should_invalidate_on_redo = 6;
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_has_should_invalidate_on_redo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::has_should_invalidate_on_redo() const {
  return _internal_has_should_invalidate_on_redo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::clear_should_invalidate_on_redo() {
  should_invalidate_on_redo_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::_internal_should_invalidate_on_redo() const {
  return should_invalidate_on_redo_;
}
inline bool CommentInvalidatingCommandSelectionBehaviorArchive::should_invalidate_on_redo() const {
  // @@protoc_insertion_point(field_get:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.should_invalidate_on_redo)
  return _internal_should_invalidate_on_redo();
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::_internal_set_should_invalidate_on_redo(bool value) {
  _has_bits_[0] |= 0x00000020u;
  should_invalidate_on_redo_ = value;
}
inline void CommentInvalidatingCommandSelectionBehaviorArchive::set_should_invalidate_on_redo(bool value) {
  _internal_set_should_invalidate_on_redo(value);
  // @@protoc_insertion_point(field_set:TSD.CommentInvalidatingCommandSelectionBehaviorArchive.should_invalidate_on_redo)
}

// -------------------------------------------------------------------

// ImageReplaceCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ImageReplaceCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageReplaceCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ImageReplaceCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ImageReplaceCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.super)
  return _internal_super();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ImageReplaceCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageReplaceCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageReplaceCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ImageReplaceCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageReplaceCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.super)
}

// optional .TSP.DataReference new_image_data = 2;
inline bool ImageReplaceCommandArchive::_internal_has_new_image_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_new_image_data() const {
  return _internal_has_new_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_new_image_data() const {
  const ::TSP::DataReference* p = new_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::new_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.new_image_data)
  return _internal_new_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_new_image_data(
    ::TSP::DataReference* new_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_data_);
  }
  new_image_data_ = new_image_data;
  if (new_image_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.new_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_new_image_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = new_image_data_;
  new_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_new_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.new_image_data)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = new_image_data_;
  new_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_new_image_data() {
  _has_bits_[0] |= 0x00000002u;
  if (new_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    new_image_data_ = p;
  }
  return new_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_new_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.new_image_data)
  return _internal_mutable_new_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_new_image_data(::TSP::DataReference* new_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_data_);
  }
  if (new_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      new_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_image_data_ = new_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.new_image_data)
}

// optional .TSP.DataReference new_original_image_data = 3;
inline bool ImageReplaceCommandArchive::_internal_has_new_original_image_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_original_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_new_original_image_data() const {
  return _internal_has_new_original_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_new_original_image_data() const {
  const ::TSP::DataReference* p = new_original_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::new_original_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.new_original_image_data)
  return _internal_new_original_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_new_original_image_data(
    ::TSP::DataReference* new_original_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_original_image_data_);
  }
  new_original_image_data_ = new_original_image_data;
  if (new_original_image_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.new_original_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_new_original_image_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = new_original_image_data_;
  new_original_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_new_original_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.new_original_image_data)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = new_original_image_data_;
  new_original_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_new_original_image_data() {
  _has_bits_[0] |= 0x00000004u;
  if (new_original_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    new_original_image_data_ = p;
  }
  return new_original_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_new_original_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.new_original_image_data)
  return _internal_mutable_new_original_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_new_original_image_data(::TSP::DataReference* new_original_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_original_image_data_);
  }
  if (new_original_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_original_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      new_original_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_original_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_original_image_data_ = new_original_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.new_original_image_data)
}

// optional .TSP.DataReference old_image_data = 4;
inline bool ImageReplaceCommandArchive::_internal_has_old_image_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_image_data() const {
  return _internal_has_old_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_old_image_data() const {
  const ::TSP::DataReference* p = old_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::old_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_image_data)
  return _internal_old_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_image_data(
    ::TSP::DataReference* old_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_data_);
  }
  old_image_data_ = old_image_data;
  if (old_image_data) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_old_image_data() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = old_image_data_;
  old_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_old_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_image_data)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = old_image_data_;
  old_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_old_image_data() {
  _has_bits_[0] |= 0x00000008u;
  if (old_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    old_image_data_ = p;
  }
  return old_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_old_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_image_data)
  return _internal_mutable_old_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_old_image_data(::TSP::DataReference* old_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_data_);
  }
  if (old_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      old_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_image_data_ = old_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_image_data)
}

// optional .TSP.DataReference old_original_image_data = 5;
inline bool ImageReplaceCommandArchive::_internal_has_old_original_image_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || old_original_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_original_image_data() const {
  return _internal_has_old_original_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_old_original_image_data() const {
  const ::TSP::DataReference* p = old_original_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::old_original_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_original_image_data)
  return _internal_old_original_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_original_image_data(
    ::TSP::DataReference* old_original_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_original_image_data_);
  }
  old_original_image_data_ = old_original_image_data;
  if (old_original_image_data) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_original_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_old_original_image_data() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = old_original_image_data_;
  old_original_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_old_original_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_original_image_data)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::DataReference* temp = old_original_image_data_;
  old_original_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_old_original_image_data() {
  _has_bits_[0] |= 0x00000010u;
  if (old_original_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    old_original_image_data_ = p;
  }
  return old_original_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_old_original_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_original_image_data)
  return _internal_mutable_old_original_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_old_original_image_data(::TSP::DataReference* old_original_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_original_image_data_);
  }
  if (old_original_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_original_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      old_original_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_original_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  old_original_image_data_ = old_original_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_original_image_data)
}

// optional .TSP.Path instant_alpha_path = 6;
inline bool ImageReplaceCommandArchive::_internal_has_instant_alpha_path() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || instant_alpha_path_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_instant_alpha_path() const {
  return _internal_has_instant_alpha_path();
}
inline const ::TSP::Path& ImageReplaceCommandArchive::_internal_instant_alpha_path() const {
  const ::TSP::Path* p = instant_alpha_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Path&>(
      ::TSP::_Path_default_instance_);
}
inline const ::TSP::Path& ImageReplaceCommandArchive::instant_alpha_path() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.instant_alpha_path)
  return _internal_instant_alpha_path();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_instant_alpha_path(
    ::TSP::Path* instant_alpha_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instant_alpha_path_);
  }
  instant_alpha_path_ = instant_alpha_path;
  if (instant_alpha_path) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.instant_alpha_path)
}
inline ::TSP::Path* ImageReplaceCommandArchive::release_instant_alpha_path() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Path* temp = instant_alpha_path_;
  instant_alpha_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Path* ImageReplaceCommandArchive::unsafe_arena_release_instant_alpha_path() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.instant_alpha_path)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Path* temp = instant_alpha_path_;
  instant_alpha_path_ = nullptr;
  return temp;
}
inline ::TSP::Path* ImageReplaceCommandArchive::_internal_mutable_instant_alpha_path() {
  _has_bits_[0] |= 0x00000020u;
  if (instant_alpha_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Path>(GetArena());
    instant_alpha_path_ = p;
  }
  return instant_alpha_path_;
}
inline ::TSP::Path* ImageReplaceCommandArchive::mutable_instant_alpha_path() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.instant_alpha_path)
  return _internal_mutable_instant_alpha_path();
}
inline void ImageReplaceCommandArchive::set_allocated_instant_alpha_path(::TSP::Path* instant_alpha_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instant_alpha_path_);
  }
  if (instant_alpha_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instant_alpha_path)->GetArena();
    if (message_arena != submessage_arena) {
      instant_alpha_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instant_alpha_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  instant_alpha_path_ = instant_alpha_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.instant_alpha_path)
}

// optional .TSP.Path old_instant_alpha_path = 7;
inline bool ImageReplaceCommandArchive::_internal_has_old_instant_alpha_path() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || old_instant_alpha_path_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_instant_alpha_path() const {
  return _internal_has_old_instant_alpha_path();
}
inline const ::TSP::Path& ImageReplaceCommandArchive::_internal_old_instant_alpha_path() const {
  const ::TSP::Path* p = old_instant_alpha_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Path&>(
      ::TSP::_Path_default_instance_);
}
inline const ::TSP::Path& ImageReplaceCommandArchive::old_instant_alpha_path() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_instant_alpha_path)
  return _internal_old_instant_alpha_path();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_instant_alpha_path(
    ::TSP::Path* old_instant_alpha_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_instant_alpha_path_);
  }
  old_instant_alpha_path_ = old_instant_alpha_path;
  if (old_instant_alpha_path) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_instant_alpha_path)
}
inline ::TSP::Path* ImageReplaceCommandArchive::release_old_instant_alpha_path() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Path* temp = old_instant_alpha_path_;
  old_instant_alpha_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Path* ImageReplaceCommandArchive::unsafe_arena_release_old_instant_alpha_path() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_instant_alpha_path)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Path* temp = old_instant_alpha_path_;
  old_instant_alpha_path_ = nullptr;
  return temp;
}
inline ::TSP::Path* ImageReplaceCommandArchive::_internal_mutable_old_instant_alpha_path() {
  _has_bits_[0] |= 0x00000040u;
  if (old_instant_alpha_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Path>(GetArena());
    old_instant_alpha_path_ = p;
  }
  return old_instant_alpha_path_;
}
inline ::TSP::Path* ImageReplaceCommandArchive::mutable_old_instant_alpha_path() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_instant_alpha_path)
  return _internal_mutable_old_instant_alpha_path();
}
inline void ImageReplaceCommandArchive::set_allocated_old_instant_alpha_path(::TSP::Path* old_instant_alpha_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_instant_alpha_path_);
  }
  if (old_instant_alpha_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_instant_alpha_path)->GetArena();
    if (message_arena != submessage_arena) {
      old_instant_alpha_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_instant_alpha_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  old_instant_alpha_path_ = old_instant_alpha_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_instant_alpha_path)
}

// optional .TSP.Size natural_size_for_IAPath = 8;
inline bool ImageReplaceCommandArchive::_internal_has_natural_size_for_iapath() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || natural_size_for_iapath_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_natural_size_for_iapath() const {
  return _internal_has_natural_size_for_iapath();
}
inline const ::TSP::Size& ImageReplaceCommandArchive::_internal_natural_size_for_iapath() const {
  const ::TSP::Size* p = natural_size_for_iapath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageReplaceCommandArchive::natural_size_for_iapath() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.natural_size_for_IAPath)
  return _internal_natural_size_for_iapath();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_natural_size_for_iapath(
    ::TSP::Size* natural_size_for_iapath) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(natural_size_for_iapath_);
  }
  natural_size_for_iapath_ = natural_size_for_iapath;
  if (natural_size_for_iapath) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.natural_size_for_IAPath)
}
inline ::TSP::Size* ImageReplaceCommandArchive::release_natural_size_for_iapath() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Size* temp = natural_size_for_iapath_;
  natural_size_for_iapath_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::unsafe_arena_release_natural_size_for_iapath() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.natural_size_for_IAPath)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Size* temp = natural_size_for_iapath_;
  natural_size_for_iapath_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::_internal_mutable_natural_size_for_iapath() {
  _has_bits_[0] |= 0x00000080u;
  if (natural_size_for_iapath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    natural_size_for_iapath_ = p;
  }
  return natural_size_for_iapath_;
}
inline ::TSP::Size* ImageReplaceCommandArchive::mutable_natural_size_for_iapath() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.natural_size_for_IAPath)
  return _internal_mutable_natural_size_for_iapath();
}
inline void ImageReplaceCommandArchive::set_allocated_natural_size_for_iapath(::TSP::Size* natural_size_for_iapath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(natural_size_for_iapath_);
  }
  if (natural_size_for_iapath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(natural_size_for_iapath)->GetArena();
    if (message_arena != submessage_arena) {
      natural_size_for_iapath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, natural_size_for_iapath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  natural_size_for_iapath_ = natural_size_for_iapath;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.natural_size_for_IAPath)
}

// optional .TSP.Size old_natural_size_for_IAPath = 9;
inline bool ImageReplaceCommandArchive::_internal_has_old_natural_size_for_iapath() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || old_natural_size_for_iapath_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_natural_size_for_iapath() const {
  return _internal_has_old_natural_size_for_iapath();
}
inline const ::TSP::Size& ImageReplaceCommandArchive::_internal_old_natural_size_for_iapath() const {
  const ::TSP::Size* p = old_natural_size_for_iapath_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageReplaceCommandArchive::old_natural_size_for_iapath() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_natural_size_for_IAPath)
  return _internal_old_natural_size_for_iapath();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_natural_size_for_iapath(
    ::TSP::Size* old_natural_size_for_iapath) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_for_iapath_);
  }
  old_natural_size_for_iapath_ = old_natural_size_for_iapath;
  if (old_natural_size_for_iapath) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_natural_size_for_IAPath)
}
inline ::TSP::Size* ImageReplaceCommandArchive::release_old_natural_size_for_iapath() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = old_natural_size_for_iapath_;
  old_natural_size_for_iapath_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::unsafe_arena_release_old_natural_size_for_iapath() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_natural_size_for_IAPath)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = old_natural_size_for_iapath_;
  old_natural_size_for_iapath_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::_internal_mutable_old_natural_size_for_iapath() {
  _has_bits_[0] |= 0x00000100u;
  if (old_natural_size_for_iapath_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    old_natural_size_for_iapath_ = p;
  }
  return old_natural_size_for_iapath_;
}
inline ::TSP::Size* ImageReplaceCommandArchive::mutable_old_natural_size_for_iapath() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_natural_size_for_IAPath)
  return _internal_mutable_old_natural_size_for_iapath();
}
inline void ImageReplaceCommandArchive::set_allocated_old_natural_size_for_iapath(::TSP::Size* old_natural_size_for_iapath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_for_iapath_);
  }
  if (old_natural_size_for_iapath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_for_iapath)->GetArena();
    if (message_arena != submessage_arena) {
      old_natural_size_for_iapath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_natural_size_for_iapath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  old_natural_size_for_iapath_ = old_natural_size_for_iapath;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_natural_size_for_IAPath)
}

// optional .TSD.GeometryArchive target_image_geometry = 10;
inline bool ImageReplaceCommandArchive::_internal_has_target_image_geometry() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || target_image_geometry_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_target_image_geometry() const {
  return _internal_has_target_image_geometry();
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::_internal_target_image_geometry() const {
  const ::TSD::GeometryArchive* p = target_image_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::target_image_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.target_image_geometry)
  return _internal_target_image_geometry();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_target_image_geometry(
    ::TSD::GeometryArchive* target_image_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_image_geometry_);
  }
  target_image_geometry_ = target_image_geometry;
  if (target_image_geometry) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.target_image_geometry)
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::release_target_image_geometry() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::GeometryArchive* temp = target_image_geometry_;
  target_image_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::unsafe_arena_release_target_image_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.target_image_geometry)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::GeometryArchive* temp = target_image_geometry_;
  target_image_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::_internal_mutable_target_image_geometry() {
  _has_bits_[0] |= 0x00000200u;
  if (target_image_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    target_image_geometry_ = p;
  }
  return target_image_geometry_;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::mutable_target_image_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.target_image_geometry)
  return _internal_mutable_target_image_geometry();
}
inline void ImageReplaceCommandArchive::set_allocated_target_image_geometry(::TSD::GeometryArchive* target_image_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_image_geometry_);
  }
  if (target_image_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_image_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      target_image_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_image_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  target_image_geometry_ = target_image_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.target_image_geometry)
}

// optional .TSD.GeometryArchive old_target_image_geometry = 12;
inline bool ImageReplaceCommandArchive::_internal_has_old_target_image_geometry() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || old_target_image_geometry_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_target_image_geometry() const {
  return _internal_has_old_target_image_geometry();
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::_internal_old_target_image_geometry() const {
  const ::TSD::GeometryArchive* p = old_target_image_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::old_target_image_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_target_image_geometry)
  return _internal_old_target_image_geometry();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_target_image_geometry(
    ::TSD::GeometryArchive* old_target_image_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_image_geometry_);
  }
  old_target_image_geometry_ = old_target_image_geometry;
  if (old_target_image_geometry) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_target_image_geometry)
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::release_old_target_image_geometry() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::GeometryArchive* temp = old_target_image_geometry_;
  old_target_image_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::unsafe_arena_release_old_target_image_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_target_image_geometry)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::GeometryArchive* temp = old_target_image_geometry_;
  old_target_image_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::_internal_mutable_old_target_image_geometry() {
  _has_bits_[0] |= 0x00000400u;
  if (old_target_image_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    old_target_image_geometry_ = p;
  }
  return old_target_image_geometry_;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::mutable_old_target_image_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_target_image_geometry)
  return _internal_mutable_old_target_image_geometry();
}
inline void ImageReplaceCommandArchive::set_allocated_old_target_image_geometry(::TSD::GeometryArchive* old_target_image_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_image_geometry_);
  }
  if (old_target_image_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_image_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      old_target_image_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_target_image_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  old_target_image_geometry_ = old_target_image_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_target_image_geometry)
}

// optional .TSD.GeometryArchive target_mask_geometry = 13;
inline bool ImageReplaceCommandArchive::_internal_has_target_mask_geometry() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || target_mask_geometry_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_target_mask_geometry() const {
  return _internal_has_target_mask_geometry();
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::_internal_target_mask_geometry() const {
  const ::TSD::GeometryArchive* p = target_mask_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::target_mask_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.target_mask_geometry)
  return _internal_target_mask_geometry();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_target_mask_geometry(
    ::TSD::GeometryArchive* target_mask_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_mask_geometry_);
  }
  target_mask_geometry_ = target_mask_geometry;
  if (target_mask_geometry) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.target_mask_geometry)
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::release_target_mask_geometry() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::GeometryArchive* temp = target_mask_geometry_;
  target_mask_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::unsafe_arena_release_target_mask_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.target_mask_geometry)
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::GeometryArchive* temp = target_mask_geometry_;
  target_mask_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::_internal_mutable_target_mask_geometry() {
  _has_bits_[0] |= 0x00000800u;
  if (target_mask_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    target_mask_geometry_ = p;
  }
  return target_mask_geometry_;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::mutable_target_mask_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.target_mask_geometry)
  return _internal_mutable_target_mask_geometry();
}
inline void ImageReplaceCommandArchive::set_allocated_target_mask_geometry(::TSD::GeometryArchive* target_mask_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_mask_geometry_);
  }
  if (target_mask_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_mask_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      target_mask_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_mask_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  target_mask_geometry_ = target_mask_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.target_mask_geometry)
}

// optional .TSD.GeometryArchive old_target_mask_geometry = 14;
inline bool ImageReplaceCommandArchive::_internal_has_old_target_mask_geometry() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || old_target_mask_geometry_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_target_mask_geometry() const {
  return _internal_has_old_target_mask_geometry();
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::_internal_old_target_mask_geometry() const {
  const ::TSD::GeometryArchive* p = old_target_mask_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageReplaceCommandArchive::old_target_mask_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_target_mask_geometry)
  return _internal_old_target_mask_geometry();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_target_mask_geometry(
    ::TSD::GeometryArchive* old_target_mask_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_mask_geometry_);
  }
  old_target_mask_geometry_ = old_target_mask_geometry;
  if (old_target_mask_geometry) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_target_mask_geometry)
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::release_old_target_mask_geometry() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::GeometryArchive* temp = old_target_mask_geometry_;
  old_target_mask_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::unsafe_arena_release_old_target_mask_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_target_mask_geometry)
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::GeometryArchive* temp = old_target_mask_geometry_;
  old_target_mask_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::_internal_mutable_old_target_mask_geometry() {
  _has_bits_[0] |= 0x00001000u;
  if (old_target_mask_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    old_target_mask_geometry_ = p;
  }
  return old_target_mask_geometry_;
}
inline ::TSD::GeometryArchive* ImageReplaceCommandArchive::mutable_old_target_mask_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_target_mask_geometry)
  return _internal_mutable_old_target_mask_geometry();
}
inline void ImageReplaceCommandArchive::set_allocated_old_target_mask_geometry(::TSD::GeometryArchive* old_target_mask_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_mask_geometry_);
  }
  if (old_target_mask_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_target_mask_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      old_target_mask_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_target_mask_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  old_target_mask_geometry_ = old_target_mask_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_target_mask_geometry)
}

// optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
inline bool ImageReplaceCommandArchive::_internal_has_image_adjustments() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || image_adjustments_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_image_adjustments() const {
  return _internal_has_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageReplaceCommandArchive::_internal_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageReplaceCommandArchive::image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.image_adjustments)
  return _internal_image_adjustments();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* image_adjustments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_adjustments_);
  }
  image_adjustments_ = image_adjustments;
  if (image_adjustments) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::release_image_adjustments() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::ImageAdjustmentsArchive* temp = image_adjustments_;
  image_adjustments_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::unsafe_arena_release_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.image_adjustments)
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::ImageAdjustmentsArchive* temp = image_adjustments_;
  image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::_internal_mutable_image_adjustments() {
  _has_bits_[0] |= 0x00002000u;
  if (image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArena());
    image_adjustments_ = p;
  }
  return image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::mutable_image_adjustments() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.image_adjustments)
  return _internal_mutable_image_adjustments();
}
inline void ImageReplaceCommandArchive::set_allocated_image_adjustments(::TSD::ImageAdjustmentsArchive* image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_adjustments_);
  }
  if (image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_adjustments)->GetArena();
    if (message_arena != submessage_arena) {
      image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_adjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  image_adjustments_ = image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.image_adjustments)
}

// optional .TSP.DataReference adjusted_image_data = 16;
inline bool ImageReplaceCommandArchive::_internal_has_adjusted_image_data() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || adjusted_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_adjusted_image_data() const {
  return _internal_has_adjusted_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_adjusted_image_data() const {
  const ::TSP::DataReference* p = adjusted_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::adjusted_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.adjusted_image_data)
  return _internal_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_adjusted_image_data(
    ::TSP::DataReference* adjusted_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_image_data_);
  }
  adjusted_image_data_ = adjusted_image_data;
  if (adjusted_image_data) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.adjusted_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_adjusted_image_data() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::DataReference* temp = adjusted_image_data_;
  adjusted_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_adjusted_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.adjusted_image_data)
  _has_bits_[0] &= ~0x00004000u;
  ::TSP::DataReference* temp = adjusted_image_data_;
  adjusted_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_adjusted_image_data() {
  _has_bits_[0] |= 0x00004000u;
  if (adjusted_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    adjusted_image_data_ = p;
  }
  return adjusted_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_adjusted_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.adjusted_image_data)
  return _internal_mutable_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_adjusted_image_data(::TSP::DataReference* adjusted_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_image_data_);
  }
  if (adjusted_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      adjusted_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjusted_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  adjusted_image_data_ = adjusted_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.adjusted_image_data)
}

// optional .TSP.DataReference enhanced_image_data = 17;
inline bool ImageReplaceCommandArchive::_internal_has_enhanced_image_data() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || enhanced_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_enhanced_image_data() const {
  return _internal_has_enhanced_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_enhanced_image_data() const {
  const ::TSP::DataReference* p = enhanced_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::enhanced_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.enhanced_image_data)
  return _internal_enhanced_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_enhanced_image_data(
    ::TSP::DataReference* enhanced_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhanced_image_data_);
  }
  enhanced_image_data_ = enhanced_image_data;
  if (enhanced_image_data) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.enhanced_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_enhanced_image_data() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::DataReference* temp = enhanced_image_data_;
  enhanced_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_enhanced_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.enhanced_image_data)
  _has_bits_[0] &= ~0x00008000u;
  ::TSP::DataReference* temp = enhanced_image_data_;
  enhanced_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_enhanced_image_data() {
  _has_bits_[0] |= 0x00008000u;
  if (enhanced_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    enhanced_image_data_ = p;
  }
  return enhanced_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_enhanced_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.enhanced_image_data)
  return _internal_mutable_enhanced_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_enhanced_image_data(::TSP::DataReference* enhanced_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhanced_image_data_);
  }
  if (enhanced_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhanced_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      enhanced_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhanced_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  enhanced_image_data_ = enhanced_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.enhanced_image_data)
}

// optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
inline bool ImageReplaceCommandArchive::_internal_has_old_image_adjustments() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || old_image_adjustments_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_image_adjustments() const {
  return _internal_has_old_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& ImageReplaceCommandArchive::_internal_old_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = old_image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& ImageReplaceCommandArchive::old_image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_image_adjustments)
  return _internal_old_image_adjustments();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* old_image_adjustments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments_);
  }
  old_image_adjustments_ = old_image_adjustments;
  if (old_image_adjustments) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::release_old_image_adjustments() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::ImageAdjustmentsArchive* temp = old_image_adjustments_;
  old_image_adjustments_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::unsafe_arena_release_old_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_image_adjustments)
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::ImageAdjustmentsArchive* temp = old_image_adjustments_;
  old_image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::_internal_mutable_old_image_adjustments() {
  _has_bits_[0] |= 0x00010000u;
  if (old_image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArena());
    old_image_adjustments_ = p;
  }
  return old_image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* ImageReplaceCommandArchive::mutable_old_image_adjustments() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_image_adjustments)
  return _internal_mutable_old_image_adjustments();
}
inline void ImageReplaceCommandArchive::set_allocated_old_image_adjustments(::TSD::ImageAdjustmentsArchive* old_image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments_);
  }
  if (old_image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_adjustments)->GetArena();
    if (message_arena != submessage_arena) {
      old_image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_image_adjustments, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  old_image_adjustments_ = old_image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_image_adjustments)
}

// optional .TSP.DataReference old_adjusted_image_data = 19;
inline bool ImageReplaceCommandArchive::_internal_has_old_adjusted_image_data() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || old_adjusted_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_adjusted_image_data() const {
  return _internal_has_old_adjusted_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_old_adjusted_image_data() const {
  const ::TSP::DataReference* p = old_adjusted_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::old_adjusted_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_adjusted_image_data)
  return _internal_old_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_adjusted_image_data(
    ::TSP::DataReference* old_adjusted_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_adjusted_image_data_);
  }
  old_adjusted_image_data_ = old_adjusted_image_data;
  if (old_adjusted_image_data) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_adjusted_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_old_adjusted_image_data() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::DataReference* temp = old_adjusted_image_data_;
  old_adjusted_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_old_adjusted_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_adjusted_image_data)
  _has_bits_[0] &= ~0x00020000u;
  ::TSP::DataReference* temp = old_adjusted_image_data_;
  old_adjusted_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_old_adjusted_image_data() {
  _has_bits_[0] |= 0x00020000u;
  if (old_adjusted_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    old_adjusted_image_data_ = p;
  }
  return old_adjusted_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_old_adjusted_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_adjusted_image_data)
  return _internal_mutable_old_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_old_adjusted_image_data(::TSP::DataReference* old_adjusted_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_adjusted_image_data_);
  }
  if (old_adjusted_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_adjusted_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      old_adjusted_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_adjusted_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  old_adjusted_image_data_ = old_adjusted_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_adjusted_image_data)
}

// optional .TSP.DataReference old_enhanced_image_data = 20;
inline bool ImageReplaceCommandArchive::_internal_has_old_enhanced_image_data() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || old_enhanced_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_enhanced_image_data() const {
  return _internal_has_old_enhanced_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_old_enhanced_image_data() const {
  const ::TSP::DataReference* p = old_enhanced_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::old_enhanced_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_enhanced_image_data)
  return _internal_old_enhanced_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_enhanced_image_data(
    ::TSP::DataReference* old_enhanced_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_enhanced_image_data_);
  }
  old_enhanced_image_data_ = old_enhanced_image_data;
  if (old_enhanced_image_data) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_enhanced_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_old_enhanced_image_data() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::DataReference* temp = old_enhanced_image_data_;
  old_enhanced_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_old_enhanced_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_enhanced_image_data)
  _has_bits_[0] &= ~0x00040000u;
  ::TSP::DataReference* temp = old_enhanced_image_data_;
  old_enhanced_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_old_enhanced_image_data() {
  _has_bits_[0] |= 0x00040000u;
  if (old_enhanced_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    old_enhanced_image_data_ = p;
  }
  return old_enhanced_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_old_enhanced_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_enhanced_image_data)
  return _internal_mutable_old_enhanced_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_old_enhanced_image_data(::TSP::DataReference* old_enhanced_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_enhanced_image_data_);
  }
  if (old_enhanced_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_enhanced_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      old_enhanced_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_enhanced_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  old_enhanced_image_data_ = old_enhanced_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_enhanced_image_data)
}

// optional .TSP.DataReference thumbnail_image_data = 21;
inline bool ImageReplaceCommandArchive::_internal_has_thumbnail_image_data() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || thumbnail_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_thumbnail_image_data() const {
  return _internal_has_thumbnail_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_thumbnail_image_data() const {
  const ::TSP::DataReference* p = thumbnail_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::thumbnail_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.thumbnail_image_data)
  return _internal_thumbnail_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_thumbnail_image_data(
    ::TSP::DataReference* thumbnail_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_image_data_);
  }
  thumbnail_image_data_ = thumbnail_image_data;
  if (thumbnail_image_data) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.thumbnail_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_thumbnail_image_data() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::DataReference* temp = thumbnail_image_data_;
  thumbnail_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_thumbnail_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.thumbnail_image_data)
  _has_bits_[0] &= ~0x00080000u;
  ::TSP::DataReference* temp = thumbnail_image_data_;
  thumbnail_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_thumbnail_image_data() {
  _has_bits_[0] |= 0x00080000u;
  if (thumbnail_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    thumbnail_image_data_ = p;
  }
  return thumbnail_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_thumbnail_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.thumbnail_image_data)
  return _internal_mutable_thumbnail_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_thumbnail_image_data(::TSP::DataReference* thumbnail_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_image_data_);
  }
  if (thumbnail_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      thumbnail_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  thumbnail_image_data_ = thumbnail_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.thumbnail_image_data)
}

// optional .TSP.DataReference old_thumbnail_image_data = 22;
inline bool ImageReplaceCommandArchive::_internal_has_old_thumbnail_image_data() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || old_thumbnail_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_thumbnail_image_data() const {
  return _internal_has_old_thumbnail_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_old_thumbnail_image_data() const {
  const ::TSP::DataReference* p = old_thumbnail_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::old_thumbnail_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_thumbnail_image_data)
  return _internal_old_thumbnail_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_thumbnail_image_data(
    ::TSP::DataReference* old_thumbnail_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_thumbnail_image_data_);
  }
  old_thumbnail_image_data_ = old_thumbnail_image_data;
  if (old_thumbnail_image_data) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_thumbnail_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_old_thumbnail_image_data() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSP::DataReference* temp = old_thumbnail_image_data_;
  old_thumbnail_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_old_thumbnail_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_thumbnail_image_data)
  _has_bits_[0] &= ~0x00100000u;
  ::TSP::DataReference* temp = old_thumbnail_image_data_;
  old_thumbnail_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_old_thumbnail_image_data() {
  _has_bits_[0] |= 0x00100000u;
  if (old_thumbnail_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    old_thumbnail_image_data_ = p;
  }
  return old_thumbnail_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_old_thumbnail_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_thumbnail_image_data)
  return _internal_mutable_old_thumbnail_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_old_thumbnail_image_data(::TSP::DataReference* old_thumbnail_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_thumbnail_image_data_);
  }
  if (old_thumbnail_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_thumbnail_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      old_thumbnail_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_thumbnail_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  old_thumbnail_image_data_ = old_thumbnail_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_thumbnail_image_data)
}

// optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
inline bool ImageReplaceCommandArchive::_internal_has_thumbnail_adjusted_image_data() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || thumbnail_adjusted_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_thumbnail_adjusted_image_data() const {
  return _internal_has_thumbnail_adjusted_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_thumbnail_adjusted_image_data() const {
  const ::TSP::DataReference* p = thumbnail_adjusted_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::thumbnail_adjusted_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.thumbnail_adjusted_image_data)
  return _internal_thumbnail_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_thumbnail_adjusted_image_data(
    ::TSP::DataReference* thumbnail_adjusted_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_adjusted_image_data_);
  }
  thumbnail_adjusted_image_data_ = thumbnail_adjusted_image_data;
  if (thumbnail_adjusted_image_data) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.thumbnail_adjusted_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_thumbnail_adjusted_image_data() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSP::DataReference* temp = thumbnail_adjusted_image_data_;
  thumbnail_adjusted_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_thumbnail_adjusted_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.thumbnail_adjusted_image_data)
  _has_bits_[0] &= ~0x00200000u;
  ::TSP::DataReference* temp = thumbnail_adjusted_image_data_;
  thumbnail_adjusted_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_thumbnail_adjusted_image_data() {
  _has_bits_[0] |= 0x00200000u;
  if (thumbnail_adjusted_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    thumbnail_adjusted_image_data_ = p;
  }
  return thumbnail_adjusted_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_thumbnail_adjusted_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.thumbnail_adjusted_image_data)
  return _internal_mutable_thumbnail_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_thumbnail_adjusted_image_data(::TSP::DataReference* thumbnail_adjusted_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_adjusted_image_data_);
  }
  if (thumbnail_adjusted_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_adjusted_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      thumbnail_adjusted_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail_adjusted_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  thumbnail_adjusted_image_data_ = thumbnail_adjusted_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.thumbnail_adjusted_image_data)
}

// optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
inline bool ImageReplaceCommandArchive::_internal_has_old_thumbnail_adjusted_image_data() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || old_thumbnail_adjusted_image_data_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_thumbnail_adjusted_image_data() const {
  return _internal_has_old_thumbnail_adjusted_image_data();
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::_internal_old_thumbnail_adjusted_image_data() const {
  const ::TSP::DataReference* p = old_thumbnail_adjusted_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& ImageReplaceCommandArchive::old_thumbnail_adjusted_image_data() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_thumbnail_adjusted_image_data)
  return _internal_old_thumbnail_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_thumbnail_adjusted_image_data(
    ::TSP::DataReference* old_thumbnail_adjusted_image_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_thumbnail_adjusted_image_data_);
  }
  old_thumbnail_adjusted_image_data_ = old_thumbnail_adjusted_image_data;
  if (old_thumbnail_adjusted_image_data) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_thumbnail_adjusted_image_data)
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::release_old_thumbnail_adjusted_image_data() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSP::DataReference* temp = old_thumbnail_adjusted_image_data_;
  old_thumbnail_adjusted_image_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::unsafe_arena_release_old_thumbnail_adjusted_image_data() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_thumbnail_adjusted_image_data)
  _has_bits_[0] &= ~0x00400000u;
  ::TSP::DataReference* temp = old_thumbnail_adjusted_image_data_;
  old_thumbnail_adjusted_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::_internal_mutable_old_thumbnail_adjusted_image_data() {
  _has_bits_[0] |= 0x00400000u;
  if (old_thumbnail_adjusted_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    old_thumbnail_adjusted_image_data_ = p;
  }
  return old_thumbnail_adjusted_image_data_;
}
inline ::TSP::DataReference* ImageReplaceCommandArchive::mutable_old_thumbnail_adjusted_image_data() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_thumbnail_adjusted_image_data)
  return _internal_mutable_old_thumbnail_adjusted_image_data();
}
inline void ImageReplaceCommandArchive::set_allocated_old_thumbnail_adjusted_image_data(::TSP::DataReference* old_thumbnail_adjusted_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_thumbnail_adjusted_image_data_);
  }
  if (old_thumbnail_adjusted_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_thumbnail_adjusted_image_data)->GetArena();
    if (message_arena != submessage_arena) {
      old_thumbnail_adjusted_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_thumbnail_adjusted_image_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  old_thumbnail_adjusted_image_data_ = old_thumbnail_adjusted_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_thumbnail_adjusted_image_data)
}

// optional .TSP.Size natural_size = 25;
inline bool ImageReplaceCommandArchive::_internal_has_natural_size() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || natural_size_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_natural_size() const {
  return _internal_has_natural_size();
}
inline const ::TSP::Size& ImageReplaceCommandArchive::_internal_natural_size() const {
  const ::TSP::Size* p = natural_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageReplaceCommandArchive::natural_size() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.natural_size)
  return _internal_natural_size();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_natural_size(
    ::TSP::Size* natural_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(natural_size_);
  }
  natural_size_ = natural_size;
  if (natural_size) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.natural_size)
}
inline ::TSP::Size* ImageReplaceCommandArchive::release_natural_size() {
  _has_bits_[0] &= ~0x00800000u;
  ::TSP::Size* temp = natural_size_;
  natural_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::unsafe_arena_release_natural_size() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.natural_size)
  _has_bits_[0] &= ~0x00800000u;
  ::TSP::Size* temp = natural_size_;
  natural_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::_internal_mutable_natural_size() {
  _has_bits_[0] |= 0x00800000u;
  if (natural_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    natural_size_ = p;
  }
  return natural_size_;
}
inline ::TSP::Size* ImageReplaceCommandArchive::mutable_natural_size() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.natural_size)
  return _internal_mutable_natural_size();
}
inline void ImageReplaceCommandArchive::set_allocated_natural_size(::TSP::Size* natural_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(natural_size_);
  }
  if (natural_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(natural_size)->GetArena();
    if (message_arena != submessage_arena) {
      natural_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, natural_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  natural_size_ = natural_size;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.natural_size)
}

// optional .TSP.Size old_natural_size = 26;
inline bool ImageReplaceCommandArchive::_internal_has_old_natural_size() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || old_natural_size_ != nullptr);
  return value;
}
inline bool ImageReplaceCommandArchive::has_old_natural_size() const {
  return _internal_has_old_natural_size();
}
inline const ::TSP::Size& ImageReplaceCommandArchive::_internal_old_natural_size() const {
  const ::TSP::Size* p = old_natural_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageReplaceCommandArchive::old_natural_size() const {
  // @@protoc_insertion_point(field_get:TSD.ImageReplaceCommandArchive.old_natural_size)
  return _internal_old_natural_size();
}
inline void ImageReplaceCommandArchive::unsafe_arena_set_allocated_old_natural_size(
    ::TSP::Size* old_natural_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_);
  }
  old_natural_size_ = old_natural_size;
  if (old_natural_size) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageReplaceCommandArchive.old_natural_size)
}
inline ::TSP::Size* ImageReplaceCommandArchive::release_old_natural_size() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSP::Size* temp = old_natural_size_;
  old_natural_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::unsafe_arena_release_old_natural_size() {
  // @@protoc_insertion_point(field_release:TSD.ImageReplaceCommandArchive.old_natural_size)
  _has_bits_[0] &= ~0x01000000u;
  ::TSP::Size* temp = old_natural_size_;
  old_natural_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageReplaceCommandArchive::_internal_mutable_old_natural_size() {
  _has_bits_[0] |= 0x01000000u;
  if (old_natural_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    old_natural_size_ = p;
  }
  return old_natural_size_;
}
inline ::TSP::Size* ImageReplaceCommandArchive::mutable_old_natural_size() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageReplaceCommandArchive.old_natural_size)
  return _internal_mutable_old_natural_size();
}
inline void ImageReplaceCommandArchive::set_allocated_old_natural_size(::TSP::Size* old_natural_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size_);
  }
  if (old_natural_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_natural_size)->GetArena();
    if (message_arena != submessage_arena) {
      old_natural_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_natural_size, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  old_natural_size_ = old_natural_size;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageReplaceCommandArchive.old_natural_size)
}

// -------------------------------------------------------------------

// DrawableLockCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawableLockCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawableLockCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawableLockCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& DrawableLockCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawableLockCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableLockCommandArchive.super)
  return _internal_super();
}
inline void DrawableLockCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableLockCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawableLockCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableLockCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableLockCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableLockCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawableLockCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableLockCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawableLockCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableLockCommandArchive.super)
}

// optional bool locked = 2;
inline bool DrawableLockCommandArchive::_internal_has_locked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawableLockCommandArchive::has_locked() const {
  return _internal_has_locked();
}
inline void DrawableLockCommandArchive::clear_locked() {
  locked_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DrawableLockCommandArchive::_internal_locked() const {
  return locked_;
}
inline bool DrawableLockCommandArchive::locked() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableLockCommandArchive.locked)
  return _internal_locked();
}
inline void DrawableLockCommandArchive::_internal_set_locked(bool value) {
  _has_bits_[0] |= 0x00000002u;
  locked_ = value;
}
inline void DrawableLockCommandArchive::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableLockCommandArchive.locked)
}

// optional bool was_locked = 3;
inline bool DrawableLockCommandArchive::_internal_has_was_locked() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawableLockCommandArchive::has_was_locked() const {
  return _internal_has_was_locked();
}
inline void DrawableLockCommandArchive::clear_was_locked() {
  was_locked_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DrawableLockCommandArchive::_internal_was_locked() const {
  return was_locked_;
}
inline bool DrawableLockCommandArchive::was_locked() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableLockCommandArchive.was_locked)
  return _internal_was_locked();
}
inline void DrawableLockCommandArchive::_internal_set_was_locked(bool value) {
  _has_bits_[0] |= 0x00000004u;
  was_locked_ = value;
}
inline void DrawableLockCommandArchive::set_was_locked(bool value) {
  _internal_set_was_locked(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableLockCommandArchive.was_locked)
}

// -------------------------------------------------------------------

// DrawableInfoCommentCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawableInfoCommentCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawableInfoCommentCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& DrawableInfoCommentCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawableInfoCommentCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.super)
  return _internal_super();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawableInfoCommentCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableInfoCommentCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableInfoCommentCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawableInfoCommentCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawableInfoCommentCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.super)
}

// optional .TSP.Reference old_comment = 2;
inline bool DrawableInfoCommentCommandArchive::_internal_has_old_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || old_comment_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_old_comment() const {
  return _internal_has_old_comment();
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::_internal_old_comment() const {
  const ::TSP::Reference* p = old_comment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::old_comment() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.old_comment)
  return _internal_old_comment();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_old_comment(
    ::TSP::Reference* old_comment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_comment_);
  }
  old_comment_ = old_comment;
  if (old_comment) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.old_comment)
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::release_old_comment() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_comment_;
  old_comment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::unsafe_arena_release_old_comment() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.old_comment)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = old_comment_;
  old_comment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::_internal_mutable_old_comment() {
  _has_bits_[0] |= 0x00000002u;
  if (old_comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    old_comment_ = p;
  }
  return old_comment_;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::mutable_old_comment() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.old_comment)
  return _internal_mutable_old_comment();
}
inline void DrawableInfoCommentCommandArchive::set_allocated_old_comment(::TSP::Reference* old_comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_comment_);
  }
  if (old_comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_comment)->GetArena();
    if (message_arena != submessage_arena) {
      old_comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_comment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_comment_ = old_comment;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.old_comment)
}

// optional .TSP.Reference new_comment = 3;
inline bool DrawableInfoCommentCommandArchive::_internal_has_new_comment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || new_comment_ != nullptr);
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_new_comment() const {
  return _internal_has_new_comment();
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::_internal_new_comment() const {
  const ::TSP::Reference* p = new_comment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableInfoCommentCommandArchive::new_comment() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.new_comment)
  return _internal_new_comment();
}
inline void DrawableInfoCommentCommandArchive::unsafe_arena_set_allocated_new_comment(
    ::TSP::Reference* new_comment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_comment_);
  }
  new_comment_ = new_comment;
  if (new_comment) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableInfoCommentCommandArchive.new_comment)
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::release_new_comment() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_comment_;
  new_comment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::unsafe_arena_release_new_comment() {
  // @@protoc_insertion_point(field_release:TSD.DrawableInfoCommentCommandArchive.new_comment)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = new_comment_;
  new_comment_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::_internal_mutable_new_comment() {
  _has_bits_[0] |= 0x00000004u;
  if (new_comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    new_comment_ = p;
  }
  return new_comment_;
}
inline ::TSP::Reference* DrawableInfoCommentCommandArchive::mutable_new_comment() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableInfoCommentCommandArchive.new_comment)
  return _internal_mutable_new_comment();
}
inline void DrawableInfoCommentCommandArchive::set_allocated_new_comment(::TSP::Reference* new_comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_comment_);
  }
  if (new_comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_comment)->GetArena();
    if (message_arena != submessage_arena) {
      new_comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_comment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  new_comment_ = new_comment;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableInfoCommentCommandArchive.new_comment)
}

// optional .TSD.CommentCommandVariant forward_variant = 4;
inline bool DrawableInfoCommentCommandArchive::_internal_has_forward_variant() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_forward_variant() const {
  return _internal_has_forward_variant();
}
inline void DrawableInfoCommentCommandArchive::clear_forward_variant() {
  forward_variant_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSD::CommentCommandVariant DrawableInfoCommentCommandArchive::_internal_forward_variant() const {
  return static_cast< ::TSD::CommentCommandVariant >(forward_variant_);
}
inline ::TSD::CommentCommandVariant DrawableInfoCommentCommandArchive::forward_variant() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.forward_variant)
  return _internal_forward_variant();
}
inline void DrawableInfoCommentCommandArchive::_internal_set_forward_variant(::TSD::CommentCommandVariant value) {
  assert(::TSD::CommentCommandVariant_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  forward_variant_ = value;
}
inline void DrawableInfoCommentCommandArchive::set_forward_variant(::TSD::CommentCommandVariant value) {
  _internal_set_forward_variant(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableInfoCommentCommandArchive.forward_variant)
}

// optional .TSD.CommentCommandVariant inverse_variant = 5;
inline bool DrawableInfoCommentCommandArchive::_internal_has_inverse_variant() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DrawableInfoCommentCommandArchive::has_inverse_variant() const {
  return _internal_has_inverse_variant();
}
inline void DrawableInfoCommentCommandArchive::clear_inverse_variant() {
  inverse_variant_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSD::CommentCommandVariant DrawableInfoCommentCommandArchive::_internal_inverse_variant() const {
  return static_cast< ::TSD::CommentCommandVariant >(inverse_variant_);
}
inline ::TSD::CommentCommandVariant DrawableInfoCommentCommandArchive::inverse_variant() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableInfoCommentCommandArchive.inverse_variant)
  return _internal_inverse_variant();
}
inline void DrawableInfoCommentCommandArchive::_internal_set_inverse_variant(::TSD::CommentCommandVariant value) {
  assert(::TSD::CommentCommandVariant_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  inverse_variant_ = value;
}
inline void DrawableInfoCommentCommandArchive::set_inverse_variant(::TSD::CommentCommandVariant value) {
  _internal_set_inverse_variant(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableInfoCommentCommandArchive.inverse_variant)
}

// -------------------------------------------------------------------

// DrawablePencilAnnotationCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawablePencilAnnotationCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawablePencilAnnotationCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawablePencilAnnotationCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& DrawablePencilAnnotationCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawablePencilAnnotationCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePencilAnnotationCommandArchive.super)
  return _internal_super();
}
inline void DrawablePencilAnnotationCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePencilAnnotationCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawablePencilAnnotationCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawablePencilAnnotationCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePencilAnnotationCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawablePencilAnnotationCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawablePencilAnnotationCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePencilAnnotationCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawablePencilAnnotationCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePencilAnnotationCommandArchive.super)
}

// optional .TSP.Reference pencil_annotation_to_add = 2;
inline bool DrawablePencilAnnotationCommandArchive::_internal_has_pencil_annotation_to_add() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_to_add_ != nullptr);
  return value;
}
inline bool DrawablePencilAnnotationCommandArchive::has_pencil_annotation_to_add() const {
  return _internal_has_pencil_annotation_to_add();
}
inline const ::TSP::Reference& DrawablePencilAnnotationCommandArchive::_internal_pencil_annotation_to_add() const {
  const ::TSP::Reference* p = pencil_annotation_to_add_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablePencilAnnotationCommandArchive::pencil_annotation_to_add() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_add)
  return _internal_pencil_annotation_to_add();
}
inline void DrawablePencilAnnotationCommandArchive::unsafe_arena_set_allocated_pencil_annotation_to_add(
    ::TSP::Reference* pencil_annotation_to_add) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_to_add_);
  }
  pencil_annotation_to_add_ = pencil_annotation_to_add;
  if (pencil_annotation_to_add) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_add)
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::release_pencil_annotation_to_add() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = pencil_annotation_to_add_;
  pencil_annotation_to_add_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::unsafe_arena_release_pencil_annotation_to_add() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_add)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = pencil_annotation_to_add_;
  pencil_annotation_to_add_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::_internal_mutable_pencil_annotation_to_add() {
  _has_bits_[0] |= 0x00000002u;
  if (pencil_annotation_to_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    pencil_annotation_to_add_ = p;
  }
  return pencil_annotation_to_add_;
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::mutable_pencil_annotation_to_add() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_add)
  return _internal_mutable_pencil_annotation_to_add();
}
inline void DrawablePencilAnnotationCommandArchive::set_allocated_pencil_annotation_to_add(::TSP::Reference* pencil_annotation_to_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_to_add_);
  }
  if (pencil_annotation_to_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_to_add)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_to_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_to_add, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pencil_annotation_to_add_ = pencil_annotation_to_add;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_add)
}

// optional .TSP.Reference pencil_annotation_to_remove = 3;
inline bool DrawablePencilAnnotationCommandArchive::_internal_has_pencil_annotation_to_remove() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_to_remove_ != nullptr);
  return value;
}
inline bool DrawablePencilAnnotationCommandArchive::has_pencil_annotation_to_remove() const {
  return _internal_has_pencil_annotation_to_remove();
}
inline const ::TSP::Reference& DrawablePencilAnnotationCommandArchive::_internal_pencil_annotation_to_remove() const {
  const ::TSP::Reference* p = pencil_annotation_to_remove_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawablePencilAnnotationCommandArchive::pencil_annotation_to_remove() const {
  // @@protoc_insertion_point(field_get:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_remove)
  return _internal_pencil_annotation_to_remove();
}
inline void DrawablePencilAnnotationCommandArchive::unsafe_arena_set_allocated_pencil_annotation_to_remove(
    ::TSP::Reference* pencil_annotation_to_remove) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_to_remove_);
  }
  pencil_annotation_to_remove_ = pencil_annotation_to_remove;
  if (pencil_annotation_to_remove) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_remove)
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::release_pencil_annotation_to_remove() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = pencil_annotation_to_remove_;
  pencil_annotation_to_remove_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::unsafe_arena_release_pencil_annotation_to_remove() {
  // @@protoc_insertion_point(field_release:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_remove)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = pencil_annotation_to_remove_;
  pencil_annotation_to_remove_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::_internal_mutable_pencil_annotation_to_remove() {
  _has_bits_[0] |= 0x00000004u;
  if (pencil_annotation_to_remove_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    pencil_annotation_to_remove_ = p;
  }
  return pencil_annotation_to_remove_;
}
inline ::TSP::Reference* DrawablePencilAnnotationCommandArchive::mutable_pencil_annotation_to_remove() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_remove)
  return _internal_mutable_pencil_annotation_to_remove();
}
inline void DrawablePencilAnnotationCommandArchive::set_allocated_pencil_annotation_to_remove(::TSP::Reference* pencil_annotation_to_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_to_remove_);
  }
  if (pencil_annotation_to_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_to_remove)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_to_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_to_remove, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pencil_annotation_to_remove_ = pencil_annotation_to_remove;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_remove)
}

// -------------------------------------------------------------------

// AbstractGuideCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool AbstractGuideCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AbstractGuideCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& AbstractGuideCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& AbstractGuideCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.AbstractGuideCommandArchive.super)
  return _internal_super();
}
inline void AbstractGuideCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.AbstractGuideCommandArchive.super)
}
inline ::TSK::CommandArchive* AbstractGuideCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* AbstractGuideCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.AbstractGuideCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* AbstractGuideCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* AbstractGuideCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.AbstractGuideCommandArchive.super)
  return _internal_mutable_super();
}
inline void AbstractGuideCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.AbstractGuideCommandArchive.super)
}

// repeated .TSD.UserDefinedGuideArchive old_guides = 7;
inline int AbstractGuideCommandArchive::_internal_old_guides_size() const {
  return old_guides_.size();
}
inline int AbstractGuideCommandArchive::old_guides_size() const {
  return _internal_old_guides_size();
}
inline ::TSD::UserDefinedGuideArchive* AbstractGuideCommandArchive::mutable_old_guides(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.AbstractGuideCommandArchive.old_guides)
  return old_guides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >*
AbstractGuideCommandArchive::mutable_old_guides() {
  // @@protoc_insertion_point(field_mutable_list:TSD.AbstractGuideCommandArchive.old_guides)
  return &old_guides_;
}
inline const ::TSD::UserDefinedGuideArchive& AbstractGuideCommandArchive::_internal_old_guides(int index) const {
  return old_guides_.Get(index);
}
inline const ::TSD::UserDefinedGuideArchive& AbstractGuideCommandArchive::old_guides(int index) const {
  // @@protoc_insertion_point(field_get:TSD.AbstractGuideCommandArchive.old_guides)
  return _internal_old_guides(index);
}
inline ::TSD::UserDefinedGuideArchive* AbstractGuideCommandArchive::_internal_add_old_guides() {
  return old_guides_.Add();
}
inline ::TSD::UserDefinedGuideArchive* AbstractGuideCommandArchive::add_old_guides() {
  // @@protoc_insertion_point(field_add:TSD.AbstractGuideCommandArchive.old_guides)
  return _internal_add_old_guides();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >&
AbstractGuideCommandArchive::old_guides() const {
  // @@protoc_insertion_point(field_list:TSD.AbstractGuideCommandArchive.old_guides)
  return old_guides_;
}

// repeated .TSD.UserDefinedGuideArchive new_guides = 8;
inline int AbstractGuideCommandArchive::_internal_new_guides_size() const {
  return new_guides_.size();
}
inline int AbstractGuideCommandArchive::new_guides_size() const {
  return _internal_new_guides_size();
}
inline ::TSD::UserDefinedGuideArchive* AbstractGuideCommandArchive::mutable_new_guides(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.AbstractGuideCommandArchive.new_guides)
  return new_guides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >*
AbstractGuideCommandArchive::mutable_new_guides() {
  // @@protoc_insertion_point(field_mutable_list:TSD.AbstractGuideCommandArchive.new_guides)
  return &new_guides_;
}
inline const ::TSD::UserDefinedGuideArchive& AbstractGuideCommandArchive::_internal_new_guides(int index) const {
  return new_guides_.Get(index);
}
inline const ::TSD::UserDefinedGuideArchive& AbstractGuideCommandArchive::new_guides(int index) const {
  // @@protoc_insertion_point(field_get:TSD.AbstractGuideCommandArchive.new_guides)
  return _internal_new_guides(index);
}
inline ::TSD::UserDefinedGuideArchive* AbstractGuideCommandArchive::_internal_add_new_guides() {
  return new_guides_.Add();
}
inline ::TSD::UserDefinedGuideArchive* AbstractGuideCommandArchive::add_new_guides() {
  // @@protoc_insertion_point(field_add:TSD.AbstractGuideCommandArchive.new_guides)
  return _internal_add_new_guides();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSD::UserDefinedGuideArchive >&
AbstractGuideCommandArchive::new_guides() const {
  // @@protoc_insertion_point(field_list:TSD.AbstractGuideCommandArchive.new_guides)
  return new_guides_;
}

// -------------------------------------------------------------------

// GuideCommandArchive

// required .TSD.AbstractGuideCommandArchive super = 1;
inline bool GuideCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool GuideCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void GuideCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::AbstractGuideCommandArchive& GuideCommandArchive::_internal_super() const {
  const ::TSD::AbstractGuideCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::AbstractGuideCommandArchive&>(
      ::TSD::_AbstractGuideCommandArchive_default_instance_);
}
inline const ::TSD::AbstractGuideCommandArchive& GuideCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.super)
  return _internal_super();
}
inline void GuideCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::AbstractGuideCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GuideCommandArchive.super)
}
inline ::TSD::AbstractGuideCommandArchive* GuideCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractGuideCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::AbstractGuideCommandArchive* GuideCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.GuideCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractGuideCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::AbstractGuideCommandArchive* GuideCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::AbstractGuideCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::AbstractGuideCommandArchive* GuideCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.GuideCommandArchive.super)
  return _internal_mutable_super();
}
inline void GuideCommandArchive::set_allocated_super(::TSD::AbstractGuideCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.GuideCommandArchive.super)
}

// required .TSP.UUIDPath storage_id_path = 2;
inline bool GuideCommandArchive::_internal_has_storage_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || storage_id_path_ != nullptr);
  return value;
}
inline bool GuideCommandArchive::has_storage_id_path() const {
  return _internal_has_storage_id_path();
}
inline const ::TSP::UUIDPath& GuideCommandArchive::_internal_storage_id_path() const {
  const ::TSP::UUIDPath* p = storage_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GuideCommandArchive::storage_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.GuideCommandArchive.storage_id_path)
  return _internal_storage_id_path();
}
inline void GuideCommandArchive::unsafe_arena_set_allocated_storage_id_path(
    ::TSP::UUIDPath* storage_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_id_path_);
  }
  storage_id_path_ = storage_id_path;
  if (storage_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GuideCommandArchive.storage_id_path)
}
inline ::TSP::UUIDPath* GuideCommandArchive::release_storage_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_id_path_;
  storage_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* GuideCommandArchive::unsafe_arena_release_storage_id_path() {
  // @@protoc_insertion_point(field_release:TSD.GuideCommandArchive.storage_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = storage_id_path_;
  storage_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GuideCommandArchive::_internal_mutable_storage_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    storage_id_path_ = p;
  }
  return storage_id_path_;
}
inline ::TSP::UUIDPath* GuideCommandArchive::mutable_storage_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.GuideCommandArchive.storage_id_path)
  return _internal_mutable_storage_id_path();
}
inline void GuideCommandArchive::set_allocated_storage_id_path(::TSP::UUIDPath* storage_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_id_path_);
  }
  if (storage_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      storage_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_id_path_ = storage_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.GuideCommandArchive.storage_id_path)
}

// -------------------------------------------------------------------

// DrawableAspectRatioLockedCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawableAspectRatioLockedCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawableAspectRatioLockedCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawableAspectRatioLockedCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& DrawableAspectRatioLockedCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawableAspectRatioLockedCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAspectRatioLockedCommandArchive.super)
  return _internal_super();
}
inline void DrawableAspectRatioLockedCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableAspectRatioLockedCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawableAspectRatioLockedCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableAspectRatioLockedCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAspectRatioLockedCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableAspectRatioLockedCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawableAspectRatioLockedCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAspectRatioLockedCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawableAspectRatioLockedCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAspectRatioLockedCommandArchive.super)
}

// optional bool aspect_ratio_locked = 2;
inline bool DrawableAspectRatioLockedCommandArchive::_internal_has_aspect_ratio_locked() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawableAspectRatioLockedCommandArchive::has_aspect_ratio_locked() const {
  return _internal_has_aspect_ratio_locked();
}
inline void DrawableAspectRatioLockedCommandArchive::clear_aspect_ratio_locked() {
  aspect_ratio_locked_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DrawableAspectRatioLockedCommandArchive::_internal_aspect_ratio_locked() const {
  return aspect_ratio_locked_;
}
inline bool DrawableAspectRatioLockedCommandArchive::aspect_ratio_locked() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAspectRatioLockedCommandArchive.aspect_ratio_locked)
  return _internal_aspect_ratio_locked();
}
inline void DrawableAspectRatioLockedCommandArchive::_internal_set_aspect_ratio_locked(bool value) {
  _has_bits_[0] |= 0x00000002u;
  aspect_ratio_locked_ = value;
}
inline void DrawableAspectRatioLockedCommandArchive::set_aspect_ratio_locked(bool value) {
  _internal_set_aspect_ratio_locked(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableAspectRatioLockedCommandArchive.aspect_ratio_locked)
}

// optional bool was_aspect_ratio_locked = 3;
inline bool DrawableAspectRatioLockedCommandArchive::_internal_has_was_aspect_ratio_locked() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawableAspectRatioLockedCommandArchive::has_was_aspect_ratio_locked() const {
  return _internal_has_was_aspect_ratio_locked();
}
inline void DrawableAspectRatioLockedCommandArchive::clear_was_aspect_ratio_locked() {
  was_aspect_ratio_locked_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DrawableAspectRatioLockedCommandArchive::_internal_was_aspect_ratio_locked() const {
  return was_aspect_ratio_locked_;
}
inline bool DrawableAspectRatioLockedCommandArchive::was_aspect_ratio_locked() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAspectRatioLockedCommandArchive.was_aspect_ratio_locked)
  return _internal_was_aspect_ratio_locked();
}
inline void DrawableAspectRatioLockedCommandArchive::_internal_set_was_aspect_ratio_locked(bool value) {
  _has_bits_[0] |= 0x00000004u;
  was_aspect_ratio_locked_ = value;
}
inline void DrawableAspectRatioLockedCommandArchive::set_was_aspect_ratio_locked(bool value) {
  _internal_set_was_aspect_ratio_locked(value);
  // @@protoc_insertion_point(field_set:TSD.DrawableAspectRatioLockedCommandArchive.was_aspect_ratio_locked)
}

// -------------------------------------------------------------------

// DrawableAccessibilityDescriptionCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool DrawableAccessibilityDescriptionCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool DrawableAccessibilityDescriptionCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void DrawableAccessibilityDescriptionCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSD::InfoCommandArchive& DrawableAccessibilityDescriptionCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& DrawableAccessibilityDescriptionCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
  return _internal_super();
}
inline void DrawableAccessibilityDescriptionCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* DrawableAccessibilityDescriptionCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableAccessibilityDescriptionCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* DrawableAccessibilityDescriptionCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* DrawableAccessibilityDescriptionCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
  return _internal_mutable_super();
}
inline void DrawableAccessibilityDescriptionCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.super)
}

// optional string accessibility_description = 2;
inline bool DrawableAccessibilityDescriptionCommandArchive::_internal_has_accessibility_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawableAccessibilityDescriptionCommandArchive::has_accessibility_description() const {
  return _internal_has_accessibility_description();
}
inline void DrawableAccessibilityDescriptionCommandArchive::clear_accessibility_description() {
  accessibility_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawableAccessibilityDescriptionCommandArchive::accessibility_description() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
  return _internal_accessibility_description();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DrawableAccessibilityDescriptionCommandArchive::set_accessibility_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::mutable_accessibility_description() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
  return _internal_mutable_accessibility_description();
}
inline const std::string& DrawableAccessibilityDescriptionCommandArchive::_internal_accessibility_description() const {
  return accessibility_description_.Get();
}
inline void DrawableAccessibilityDescriptionCommandArchive::_internal_set_accessibility_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::_internal_mutable_accessibility_description() {
  _has_bits_[0] |= 0x00000001u;
  return accessibility_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::release_accessibility_description() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
  if (!_internal_has_accessibility_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return accessibility_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableAccessibilityDescriptionCommandArchive::set_allocated_accessibility_description(std::string* accessibility_description) {
  if (accessibility_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accessibility_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accessibility_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description)
}

// optional string old_accessibility_description = 3;
inline bool DrawableAccessibilityDescriptionCommandArchive::_internal_has_old_accessibility_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawableAccessibilityDescriptionCommandArchive::has_old_accessibility_description() const {
  return _internal_has_old_accessibility_description();
}
inline void DrawableAccessibilityDescriptionCommandArchive::clear_old_accessibility_description() {
  old_accessibility_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DrawableAccessibilityDescriptionCommandArchive::old_accessibility_description() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description)
  return _internal_old_accessibility_description();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DrawableAccessibilityDescriptionCommandArchive::set_old_accessibility_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 old_accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description)
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::mutable_old_accessibility_description() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description)
  return _internal_mutable_old_accessibility_description();
}
inline const std::string& DrawableAccessibilityDescriptionCommandArchive::_internal_old_accessibility_description() const {
  return old_accessibility_description_.Get();
}
inline void DrawableAccessibilityDescriptionCommandArchive::_internal_set_old_accessibility_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  old_accessibility_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::_internal_mutable_old_accessibility_description() {
  _has_bits_[0] |= 0x00000002u;
  return old_accessibility_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrawableAccessibilityDescriptionCommandArchive::release_old_accessibility_description() {
  // @@protoc_insertion_point(field_release:TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description)
  if (!_internal_has_old_accessibility_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return old_accessibility_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableAccessibilityDescriptionCommandArchive::set_allocated_old_accessibility_description(std::string* old_accessibility_description) {
  if (old_accessibility_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  old_accessibility_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_accessibility_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description)
}

// -------------------------------------------------------------------

// PasteStyleCommandArchive

// required .TSD.AbstractStyleCommandArchive super = 1;
inline bool PasteStyleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PasteStyleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void PasteStyleCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::AbstractStyleCommandArchive& PasteStyleCommandArchive::_internal_super() const {
  const ::TSD::AbstractStyleCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::AbstractStyleCommandArchive&>(
      ::TSD::_AbstractStyleCommandArchive_default_instance_);
}
inline const ::TSD::AbstractStyleCommandArchive& PasteStyleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.super)
  return _internal_super();
}
inline void PasteStyleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::AbstractStyleCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PasteStyleCommandArchive.super)
}
inline ::TSD::AbstractStyleCommandArchive* PasteStyleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* PasteStyleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.PasteStyleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::AbstractStyleCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::AbstractStyleCommandArchive* PasteStyleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::AbstractStyleCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::AbstractStyleCommandArchive* PasteStyleCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.PasteStyleCommandArchive.super)
  return _internal_mutable_super();
}
inline void PasteStyleCommandArchive::set_allocated_super(::TSD::AbstractStyleCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.PasteStyleCommandArchive.super)
}

// optional .TSP.Reference new_style = 2;
inline bool PasteStyleCommandArchive::_internal_has_new_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_style_ != nullptr);
  return value;
}
inline bool PasteStyleCommandArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& PasteStyleCommandArchive::_internal_new_style() const {
  const ::TSP::Reference* p = new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteStyleCommandArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.new_style)
  return _internal_new_style();
}
inline void PasteStyleCommandArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  new_style_ = new_style;
  if (new_style) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PasteStyleCommandArchive.new_style)
}
inline ::TSP::Reference* PasteStyleCommandArchive::release_new_style() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TSD.PasteStyleCommandArchive.new_style)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = new_style_;
  new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::_internal_mutable_new_style() {
  _has_bits_[0] |= 0x00000002u;
  if (new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    new_style_ = p;
  }
  return new_style_;
}
inline ::TSP::Reference* PasteStyleCommandArchive::mutable_new_style() {
  // @@protoc_insertion_point(field_mutable:TSD.PasteStyleCommandArchive.new_style)
  return _internal_mutable_new_style();
}
inline void PasteStyleCommandArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style)->GetArena();
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.PasteStyleCommandArchive.new_style)
}

// optional .TSP.Reference rollback_style = 5;
inline bool PasteStyleCommandArchive::_internal_has_rollback_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rollback_style_ != nullptr);
  return value;
}
inline bool PasteStyleCommandArchive::has_rollback_style() const {
  return _internal_has_rollback_style();
}
inline const ::TSP::Reference& PasteStyleCommandArchive::_internal_rollback_style() const {
  const ::TSP::Reference* p = rollback_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PasteStyleCommandArchive::rollback_style() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.rollback_style)
  return _internal_rollback_style();
}
inline void PasteStyleCommandArchive::unsafe_arena_set_allocated_rollback_style(
    ::TSP::Reference* rollback_style) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style_);
  }
  rollback_style_ = rollback_style;
  if (rollback_style) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PasteStyleCommandArchive.rollback_style)
}
inline ::TSP::Reference* PasteStyleCommandArchive::release_rollback_style() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = rollback_style_;
  rollback_style_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::unsafe_arena_release_rollback_style() {
  // @@protoc_insertion_point(field_release:TSD.PasteStyleCommandArchive.rollback_style)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = rollback_style_;
  rollback_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PasteStyleCommandArchive::_internal_mutable_rollback_style() {
  _has_bits_[0] |= 0x00000004u;
  if (rollback_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    rollback_style_ = p;
  }
  return rollback_style_;
}
inline ::TSP::Reference* PasteStyleCommandArchive::mutable_rollback_style() {
  // @@protoc_insertion_point(field_mutable:TSD.PasteStyleCommandArchive.rollback_style)
  return _internal_mutable_rollback_style();
}
inline void PasteStyleCommandArchive::set_allocated_rollback_style(::TSP::Reference* rollback_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style_);
  }
  if (rollback_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_style)->GetArena();
    if (message_arena != submessage_arena) {
      rollback_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_style, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rollback_style_ = rollback_style;
  // @@protoc_insertion_point(field_set_allocated:TSD.PasteStyleCommandArchive.rollback_style)
}

// optional bool tail_end_on_left = 4;
inline bool PasteStyleCommandArchive::_internal_has_tail_end_on_left() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PasteStyleCommandArchive::has_tail_end_on_left() const {
  return _internal_has_tail_end_on_left();
}
inline void PasteStyleCommandArchive::clear_tail_end_on_left() {
  tail_end_on_left_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PasteStyleCommandArchive::_internal_tail_end_on_left() const {
  return tail_end_on_left_;
}
inline bool PasteStyleCommandArchive::tail_end_on_left() const {
  // @@protoc_insertion_point(field_get:TSD.PasteStyleCommandArchive.tail_end_on_left)
  return _internal_tail_end_on_left();
}
inline void PasteStyleCommandArchive::_internal_set_tail_end_on_left(bool value) {
  _has_bits_[0] |= 0x00000008u;
  tail_end_on_left_ = value;
}
inline void PasteStyleCommandArchive::set_tail_end_on_left(bool value) {
  _internal_set_tail_end_on_left(value);
  // @@protoc_insertion_point(field_set:TSD.PasteStyleCommandArchive.tail_end_on_left)
}

// -------------------------------------------------------------------

// ImageInfoAbstractGeometryCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageInfoAbstractGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& ImageInfoAbstractGeometryCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& ImageInfoAbstractGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.super)
  return _internal_super();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* ImageInfoAbstractGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* ImageInfoAbstractGeometryCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.super)
}

// optional .TSD.GeometryArchive new_image_geometry = 2;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_new_image_geometry() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || new_image_geometry_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_new_image_geometry() const {
  return _internal_has_new_image_geometry();
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::_internal_new_image_geometry() const {
  const ::TSD::GeometryArchive* p = new_image_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::new_image_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_geometry)
  return _internal_new_image_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_new_image_geometry(
    ::TSD::GeometryArchive* new_image_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_geometry_);
  }
  new_image_geometry_ = new_image_geometry;
  if (new_image_geometry) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_geometry)
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::release_new_image_geometry() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::GeometryArchive* temp = new_image_geometry_;
  new_image_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_new_image_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_geometry)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::GeometryArchive* temp = new_image_geometry_;
  new_image_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_new_image_geometry() {
  _has_bits_[0] |= 0x00000002u;
  if (new_image_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    new_image_geometry_ = p;
  }
  return new_image_geometry_;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::mutable_new_image_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_geometry)
  return _internal_mutable_new_image_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_new_image_geometry(::TSD::GeometryArchive* new_image_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_geometry_);
  }
  if (new_image_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      new_image_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_image_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  new_image_geometry_ = new_image_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_geometry)
}

// optional .TSD.GeometryArchive old_image_geometry = 3;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_old_image_geometry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_image_geometry_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_old_image_geometry() const {
  return _internal_has_old_image_geometry();
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::_internal_old_image_geometry() const {
  const ::TSD::GeometryArchive* p = old_image_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::old_image_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_geometry)
  return _internal_old_image_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_old_image_geometry(
    ::TSD::GeometryArchive* old_image_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_geometry_);
  }
  old_image_geometry_ = old_image_geometry;
  if (old_image_geometry) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_geometry)
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::release_old_image_geometry() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::GeometryArchive* temp = old_image_geometry_;
  old_image_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_old_image_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_geometry)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::GeometryArchive* temp = old_image_geometry_;
  old_image_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_old_image_geometry() {
  _has_bits_[0] |= 0x00000004u;
  if (old_image_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    old_image_geometry_ = p;
  }
  return old_image_geometry_;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::mutable_old_image_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_geometry)
  return _internal_mutable_old_image_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_old_image_geometry(::TSD::GeometryArchive* old_image_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_geometry_);
  }
  if (old_image_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      old_image_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_image_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_image_geometry_ = old_image_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_geometry)
}

// optional .TSD.GeometryArchive new_mask_geometry = 4;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_new_mask_geometry() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || new_mask_geometry_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_new_mask_geometry() const {
  return _internal_has_new_mask_geometry();
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::_internal_new_mask_geometry() const {
  const ::TSD::GeometryArchive* p = new_mask_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::new_mask_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_geometry)
  return _internal_new_mask_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_new_mask_geometry(
    ::TSD::GeometryArchive* new_mask_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_mask_geometry_);
  }
  new_mask_geometry_ = new_mask_geometry;
  if (new_mask_geometry) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_geometry)
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::release_new_mask_geometry() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = new_mask_geometry_;
  new_mask_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_new_mask_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_geometry)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::GeometryArchive* temp = new_mask_geometry_;
  new_mask_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_new_mask_geometry() {
  _has_bits_[0] |= 0x00000008u;
  if (new_mask_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    new_mask_geometry_ = p;
  }
  return new_mask_geometry_;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::mutable_new_mask_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_geometry)
  return _internal_mutable_new_mask_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_new_mask_geometry(::TSD::GeometryArchive* new_mask_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_mask_geometry_);
  }
  if (new_mask_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_mask_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      new_mask_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_mask_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  new_mask_geometry_ = new_mask_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_geometry)
}

// optional .TSD.GeometryArchive old_mask_geometry = 5;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_old_mask_geometry() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || old_mask_geometry_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_old_mask_geometry() const {
  return _internal_has_old_mask_geometry();
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::_internal_old_mask_geometry() const {
  const ::TSD::GeometryArchive* p = old_mask_geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::GeometryArchive&>(
      ::TSD::_GeometryArchive_default_instance_);
}
inline const ::TSD::GeometryArchive& ImageInfoAbstractGeometryCommandArchive::old_mask_geometry() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_geometry)
  return _internal_old_mask_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_old_mask_geometry(
    ::TSD::GeometryArchive* old_mask_geometry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_mask_geometry_);
  }
  old_mask_geometry_ = old_mask_geometry;
  if (old_mask_geometry) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_geometry)
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::release_old_mask_geometry() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = old_mask_geometry_;
  old_mask_geometry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_old_mask_geometry() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_geometry)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::GeometryArchive* temp = old_mask_geometry_;
  old_mask_geometry_ = nullptr;
  return temp;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_old_mask_geometry() {
  _has_bits_[0] |= 0x00000010u;
  if (old_mask_geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::GeometryArchive>(GetArena());
    old_mask_geometry_ = p;
  }
  return old_mask_geometry_;
}
inline ::TSD::GeometryArchive* ImageInfoAbstractGeometryCommandArchive::mutable_old_mask_geometry() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_geometry)
  return _internal_mutable_old_mask_geometry();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_old_mask_geometry(::TSD::GeometryArchive* old_mask_geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_mask_geometry_);
  }
  if (old_mask_geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_mask_geometry)->GetArena();
    if (message_arena != submessage_arena) {
      old_mask_geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_mask_geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  old_mask_geometry_ = old_mask_geometry;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_geometry)
}

// optional .TSD.PathSourceArchive new_mask_path_source = 6;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_new_mask_path_source() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || new_mask_path_source_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_new_mask_path_source() const {
  return _internal_has_new_mask_path_source();
}
inline const ::TSD::PathSourceArchive& ImageInfoAbstractGeometryCommandArchive::_internal_new_mask_path_source() const {
  const ::TSD::PathSourceArchive* p = new_mask_path_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& ImageInfoAbstractGeometryCommandArchive::new_mask_path_source() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_path_source)
  return _internal_new_mask_path_source();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_new_mask_path_source(
    ::TSD::PathSourceArchive* new_mask_path_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_mask_path_source_);
  }
  new_mask_path_source_ = new_mask_path_source;
  if (new_mask_path_source) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_path_source)
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::release_new_mask_path_source() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::PathSourceArchive* temp = new_mask_path_source_;
  new_mask_path_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_new_mask_path_source() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_path_source)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::PathSourceArchive* temp = new_mask_path_source_;
  new_mask_path_source_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_new_mask_path_source() {
  _has_bits_[0] |= 0x00000020u;
  if (new_mask_path_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArena());
    new_mask_path_source_ = p;
  }
  return new_mask_path_source_;
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::mutable_new_mask_path_source() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_path_source)
  return _internal_mutable_new_mask_path_source();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_new_mask_path_source(::TSD::PathSourceArchive* new_mask_path_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_mask_path_source_);
  }
  if (new_mask_path_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_mask_path_source)->GetArena();
    if (message_arena != submessage_arena) {
      new_mask_path_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_mask_path_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  new_mask_path_source_ = new_mask_path_source;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_path_source)
}

// optional .TSD.PathSourceArchive old_mask_path_source = 7;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_old_mask_path_source() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || old_mask_path_source_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_old_mask_path_source() const {
  return _internal_has_old_mask_path_source();
}
inline const ::TSD::PathSourceArchive& ImageInfoAbstractGeometryCommandArchive::_internal_old_mask_path_source() const {
  const ::TSD::PathSourceArchive* p = old_mask_path_source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::PathSourceArchive&>(
      ::TSD::_PathSourceArchive_default_instance_);
}
inline const ::TSD::PathSourceArchive& ImageInfoAbstractGeometryCommandArchive::old_mask_path_source() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_path_source)
  return _internal_old_mask_path_source();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_old_mask_path_source(
    ::TSD::PathSourceArchive* old_mask_path_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_mask_path_source_);
  }
  old_mask_path_source_ = old_mask_path_source;
  if (old_mask_path_source) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_path_source)
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::release_old_mask_path_source() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::PathSourceArchive* temp = old_mask_path_source_;
  old_mask_path_source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_old_mask_path_source() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_path_source)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::PathSourceArchive* temp = old_mask_path_source_;
  old_mask_path_source_ = nullptr;
  return temp;
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_old_mask_path_source() {
  _has_bits_[0] |= 0x00000040u;
  if (old_mask_path_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::PathSourceArchive>(GetArena());
    old_mask_path_source_ = p;
  }
  return old_mask_path_source_;
}
inline ::TSD::PathSourceArchive* ImageInfoAbstractGeometryCommandArchive::mutable_old_mask_path_source() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_path_source)
  return _internal_mutable_old_mask_path_source();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_old_mask_path_source(::TSD::PathSourceArchive* old_mask_path_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_mask_path_source_);
  }
  if (old_mask_path_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_mask_path_source)->GetArena();
    if (message_arena != submessage_arena) {
      old_mask_path_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_mask_path_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  old_mask_path_source_ = old_mask_path_source;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_path_source)
}

// optional .TSP.Size new_image_original_size = 8;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_new_image_original_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || new_image_original_size_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_new_image_original_size() const {
  return _internal_has_new_image_original_size();
}
inline const ::TSP::Size& ImageInfoAbstractGeometryCommandArchive::_internal_new_image_original_size() const {
  const ::TSP::Size* p = new_image_original_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageInfoAbstractGeometryCommandArchive::new_image_original_size() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_original_size)
  return _internal_new_image_original_size();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_new_image_original_size(
    ::TSP::Size* new_image_original_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_original_size_);
  }
  new_image_original_size_ = new_image_original_size;
  if (new_image_original_size) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_original_size)
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::release_new_image_original_size() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Size* temp = new_image_original_size_;
  new_image_original_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_new_image_original_size() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_original_size)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Size* temp = new_image_original_size_;
  new_image_original_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_new_image_original_size() {
  _has_bits_[0] |= 0x00000080u;
  if (new_image_original_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    new_image_original_size_ = p;
  }
  return new_image_original_size_;
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::mutable_new_image_original_size() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_original_size)
  return _internal_mutable_new_image_original_size();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_new_image_original_size(::TSP::Size* new_image_original_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_original_size_);
  }
  if (new_image_original_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_image_original_size)->GetArena();
    if (message_arena != submessage_arena) {
      new_image_original_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_image_original_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  new_image_original_size_ = new_image_original_size;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.new_image_original_size)
}

// optional .TSP.Size old_image_original_size = 9;
inline bool ImageInfoAbstractGeometryCommandArchive::_internal_has_old_image_original_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || old_image_original_size_ != nullptr);
  return value;
}
inline bool ImageInfoAbstractGeometryCommandArchive::has_old_image_original_size() const {
  return _internal_has_old_image_original_size();
}
inline const ::TSP::Size& ImageInfoAbstractGeometryCommandArchive::_internal_old_image_original_size() const {
  const ::TSP::Size* p = old_image_original_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Size&>(
      ::TSP::_Size_default_instance_);
}
inline const ::TSP::Size& ImageInfoAbstractGeometryCommandArchive::old_image_original_size() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_original_size)
  return _internal_old_image_original_size();
}
inline void ImageInfoAbstractGeometryCommandArchive::unsafe_arena_set_allocated_old_image_original_size(
    ::TSP::Size* old_image_original_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_original_size_);
  }
  old_image_original_size_ = old_image_original_size;
  if (old_image_original_size) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_original_size)
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::release_old_image_original_size() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = old_image_original_size_;
  old_image_original_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::unsafe_arena_release_old_image_original_size() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_original_size)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Size* temp = old_image_original_size_;
  old_image_original_size_ = nullptr;
  return temp;
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::_internal_mutable_old_image_original_size() {
  _has_bits_[0] |= 0x00000100u;
  if (old_image_original_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Size>(GetArena());
    old_image_original_size_ = p;
  }
  return old_image_original_size_;
}
inline ::TSP::Size* ImageInfoAbstractGeometryCommandArchive::mutable_old_image_original_size() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_original_size)
  return _internal_mutable_old_image_original_size();
}
inline void ImageInfoAbstractGeometryCommandArchive::set_allocated_old_image_original_size(::TSP::Size* old_image_original_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_original_size_);
  }
  if (old_image_original_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_image_original_size)->GetArena();
    if (message_arena != submessage_arena) {
      old_image_original_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_image_original_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  old_image_original_size_ = old_image_original_size;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoAbstractGeometryCommandArchive.old_image_original_size)
}

// -------------------------------------------------------------------

// ImageInfoGeometryCommandArchive

// required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
inline bool ImageInfoGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageInfoGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageInfoGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::ImageInfoAbstractGeometryCommandArchive& ImageInfoGeometryCommandArchive::_internal_super() const {
  const ::TSD::ImageInfoAbstractGeometryCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageInfoAbstractGeometryCommandArchive&>(
      ::TSD::_ImageInfoAbstractGeometryCommandArchive_default_instance_);
}
inline const ::TSD::ImageInfoAbstractGeometryCommandArchive& ImageInfoGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoGeometryCommandArchive.super)
  return _internal_super();
}
inline void ImageInfoGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::ImageInfoAbstractGeometryCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoGeometryCommandArchive.super)
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageInfoAbstractGeometryCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoGeometryCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoGeometryCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageInfoGeometryCommandArchive::set_allocated_super(::TSD::ImageInfoAbstractGeometryCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoGeometryCommandArchive.super)
}

// -------------------------------------------------------------------

// ImageInfoMaskGeometryCommandArchive

// required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
inline bool ImageInfoMaskGeometryCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ImageInfoMaskGeometryCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ImageInfoMaskGeometryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::ImageInfoAbstractGeometryCommandArchive& ImageInfoMaskGeometryCommandArchive::_internal_super() const {
  const ::TSD::ImageInfoAbstractGeometryCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageInfoAbstractGeometryCommandArchive&>(
      ::TSD::_ImageInfoAbstractGeometryCommandArchive_default_instance_);
}
inline const ::TSD::ImageInfoAbstractGeometryCommandArchive& ImageInfoMaskGeometryCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ImageInfoMaskGeometryCommandArchive.super)
  return _internal_super();
}
inline void ImageInfoMaskGeometryCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::ImageInfoAbstractGeometryCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ImageInfoMaskGeometryCommandArchive.super)
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoMaskGeometryCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoMaskGeometryCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ImageInfoMaskGeometryCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::ImageInfoAbstractGeometryCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoMaskGeometryCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageInfoAbstractGeometryCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::ImageInfoAbstractGeometryCommandArchive* ImageInfoMaskGeometryCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ImageInfoMaskGeometryCommandArchive.super)
  return _internal_mutable_super();
}
inline void ImageInfoMaskGeometryCommandArchive::set_allocated_super(::TSD::ImageInfoAbstractGeometryCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ImageInfoMaskGeometryCommandArchive.super)
}

// -------------------------------------------------------------------

// InfoCollectionSelectionTransformerHelperArchive

// repeated .TSP.UUIDPath info_uuid_path_list = 1;
inline int InfoCollectionSelectionTransformerHelperArchive::_internal_info_uuid_path_list_size() const {
  return info_uuid_path_list_.size();
}
inline int InfoCollectionSelectionTransformerHelperArchive::info_uuid_path_list_size() const {
  return _internal_info_uuid_path_list_size();
}
inline ::TSP::UUIDPath* InfoCollectionSelectionTransformerHelperArchive::mutable_info_uuid_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSD.InfoCollectionSelectionTransformerHelperArchive.info_uuid_path_list)
  return info_uuid_path_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
InfoCollectionSelectionTransformerHelperArchive::mutable_info_uuid_path_list() {
  // @@protoc_insertion_point(field_mutable_list:TSD.InfoCollectionSelectionTransformerHelperArchive.info_uuid_path_list)
  return &info_uuid_path_list_;
}
inline const ::TSP::UUIDPath& InfoCollectionSelectionTransformerHelperArchive::_internal_info_uuid_path_list(int index) const {
  return info_uuid_path_list_.Get(index);
}
inline const ::TSP::UUIDPath& InfoCollectionSelectionTransformerHelperArchive::info_uuid_path_list(int index) const {
  // @@protoc_insertion_point(field_get:TSD.InfoCollectionSelectionTransformerHelperArchive.info_uuid_path_list)
  return _internal_info_uuid_path_list(index);
}
inline ::TSP::UUIDPath* InfoCollectionSelectionTransformerHelperArchive::_internal_add_info_uuid_path_list() {
  return info_uuid_path_list_.Add();
}
inline ::TSP::UUIDPath* InfoCollectionSelectionTransformerHelperArchive::add_info_uuid_path_list() {
  // @@protoc_insertion_point(field_add:TSD.InfoCollectionSelectionTransformerHelperArchive.info_uuid_path_list)
  return _internal_add_info_uuid_path_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
InfoCollectionSelectionTransformerHelperArchive::info_uuid_path_list() const {
  // @@protoc_insertion_point(field_list:TSD.InfoCollectionSelectionTransformerHelperArchive.info_uuid_path_list)
  return info_uuid_path_list_;
}

// -------------------------------------------------------------------

// DrawableSelectionTransformerArchive

// required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool DrawableSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool DrawableSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline void DrawableSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& DrawableSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& DrawableSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void DrawableSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableSelectionTransformerArchive.transformer_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* DrawableSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* DrawableSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:TSD.DrawableSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* DrawableSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArena());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* DrawableSelectionTransformerArchive::mutable_transformer_helper() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableSelectionTransformerArchive.transformer_helper)
  return _internal_mutable_transformer_helper();
}
inline void DrawableSelectionTransformerArchive::set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transformer_helper_;
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transformer_helper);
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableSelectionTransformerArchive.transformer_helper)
}

// required .TSP.Reference untransformed_drawable_selection = 2;
inline bool DrawableSelectionTransformerArchive::_internal_has_untransformed_drawable_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || untransformed_drawable_selection_ != nullptr);
  return value;
}
inline bool DrawableSelectionTransformerArchive::has_untransformed_drawable_selection() const {
  return _internal_has_untransformed_drawable_selection();
}
inline const ::TSP::Reference& DrawableSelectionTransformerArchive::_internal_untransformed_drawable_selection() const {
  const ::TSP::Reference* p = untransformed_drawable_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DrawableSelectionTransformerArchive::untransformed_drawable_selection() const {
  // @@protoc_insertion_point(field_get:TSD.DrawableSelectionTransformerArchive.untransformed_drawable_selection)
  return _internal_untransformed_drawable_selection();
}
inline void DrawableSelectionTransformerArchive::unsafe_arena_set_allocated_untransformed_drawable_selection(
    ::TSP::Reference* untransformed_drawable_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(untransformed_drawable_selection_);
  }
  untransformed_drawable_selection_ = untransformed_drawable_selection;
  if (untransformed_drawable_selection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.DrawableSelectionTransformerArchive.untransformed_drawable_selection)
}
inline ::TSP::Reference* DrawableSelectionTransformerArchive::release_untransformed_drawable_selection() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = untransformed_drawable_selection_;
  untransformed_drawable_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DrawableSelectionTransformerArchive::unsafe_arena_release_untransformed_drawable_selection() {
  // @@protoc_insertion_point(field_release:TSD.DrawableSelectionTransformerArchive.untransformed_drawable_selection)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = untransformed_drawable_selection_;
  untransformed_drawable_selection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DrawableSelectionTransformerArchive::_internal_mutable_untransformed_drawable_selection() {
  _has_bits_[0] |= 0x00000002u;
  if (untransformed_drawable_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    untransformed_drawable_selection_ = p;
  }
  return untransformed_drawable_selection_;
}
inline ::TSP::Reference* DrawableSelectionTransformerArchive::mutable_untransformed_drawable_selection() {
  // @@protoc_insertion_point(field_mutable:TSD.DrawableSelectionTransformerArchive.untransformed_drawable_selection)
  return _internal_mutable_untransformed_drawable_selection();
}
inline void DrawableSelectionTransformerArchive::set_allocated_untransformed_drawable_selection(::TSP::Reference* untransformed_drawable_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(untransformed_drawable_selection_);
  }
  if (untransformed_drawable_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(untransformed_drawable_selection)->GetArena();
    if (message_arena != submessage_arena) {
      untransformed_drawable_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, untransformed_drawable_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  untransformed_drawable_selection_ = untransformed_drawable_selection;
  // @@protoc_insertion_point(field_set_allocated:TSD.DrawableSelectionTransformerArchive.untransformed_drawable_selection)
}

// -------------------------------------------------------------------

// InfoHyperlinkSelectionTransformerArchive

// -------------------------------------------------------------------

// CanvasSelectionTransformerArchive

// required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
inline bool CanvasSelectionTransformerArchive::_internal_has_transformer_helper() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_helper_ != nullptr);
  return value;
}
inline bool CanvasSelectionTransformerArchive::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline void CanvasSelectionTransformerArchive::clear_transformer_helper() {
  if (transformer_helper_ != nullptr) transformer_helper_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::_internal_transformer_helper() const {
  const ::TSD::InfoCollectionSelectionTransformerHelperArchive* p = transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCollectionSelectionTransformerHelperArchive&>(
      ::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_);
}
inline const ::TSD::InfoCollectionSelectionTransformerHelperArchive& CanvasSelectionTransformerArchive::transformer_helper() const {
  // @@protoc_insertion_point(field_get:TSD.CanvasSelectionTransformerArchive.transformer_helper)
  return _internal_transformer_helper();
}
inline void CanvasSelectionTransformerArchive::unsafe_arena_set_allocated_transformer_helper(
    ::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_helper_);
  }
  transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.CanvasSelectionTransformerArchive.transformer_helper)
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::release_transformer_helper() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:TSD.CanvasSelectionTransformerArchive.transformer_helper)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCollectionSelectionTransformerHelperArchive* temp = transformer_helper_;
  transformer_helper_ = nullptr;
  return temp;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::_internal_mutable_transformer_helper() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCollectionSelectionTransformerHelperArchive>(GetArena());
    transformer_helper_ = p;
  }
  return transformer_helper_;
}
inline ::TSD::InfoCollectionSelectionTransformerHelperArchive* CanvasSelectionTransformerArchive::mutable_transformer_helper() {
  // @@protoc_insertion_point(field_mutable:TSD.CanvasSelectionTransformerArchive.transformer_helper)
  return _internal_mutable_transformer_helper();
}
inline void CanvasSelectionTransformerArchive::set_allocated_transformer_helper(::TSD::InfoCollectionSelectionTransformerHelperArchive* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transformer_helper_;
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transformer_helper);
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:TSD.CanvasSelectionTransformerArchive.transformer_helper)
}

// -------------------------------------------------------------------

// PathSelectionTransformerArchive

// -------------------------------------------------------------------

// ShapeSelectionTransformerArchive

// required .TSD.DrawableSelectionTransformerArchive super = 1;
inline bool ShapeSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ShapeSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void ShapeSelectionTransformerArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::DrawableSelectionTransformerArchive& ShapeSelectionTransformerArchive::_internal_super() const {
  const ::TSD::DrawableSelectionTransformerArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableSelectionTransformerArchive&>(
      ::TSD::_DrawableSelectionTransformerArchive_default_instance_);
}
inline const ::TSD::DrawableSelectionTransformerArchive& ShapeSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.ShapeSelectionTransformerArchive.super)
  return _internal_super();
}
inline void ShapeSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableSelectionTransformerArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.ShapeSelectionTransformerArchive.super)
}
inline ::TSD::DrawableSelectionTransformerArchive* ShapeSelectionTransformerArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* ShapeSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.ShapeSelectionTransformerArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* ShapeSelectionTransformerArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableSelectionTransformerArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableSelectionTransformerArchive* ShapeSelectionTransformerArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.ShapeSelectionTransformerArchive.super)
  return _internal_mutable_super();
}
inline void ShapeSelectionTransformerArchive::set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.ShapeSelectionTransformerArchive.super)
}

// -------------------------------------------------------------------

// GroupSelectionTransformerArchive

// required .TSD.DrawableSelectionTransformerArchive super = 1;
inline bool GroupSelectionTransformerArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool GroupSelectionTransformerArchive::has_super() const {
  return _internal_has_super();
}
inline void GroupSelectionTransformerArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::DrawableSelectionTransformerArchive& GroupSelectionTransformerArchive::_internal_super() const {
  const ::TSD::DrawableSelectionTransformerArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableSelectionTransformerArchive&>(
      ::TSD::_DrawableSelectionTransformerArchive_default_instance_);
}
inline const ::TSD::DrawableSelectionTransformerArchive& GroupSelectionTransformerArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.GroupSelectionTransformerArchive.super)
  return _internal_super();
}
inline void GroupSelectionTransformerArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableSelectionTransformerArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.GroupSelectionTransformerArchive.super)
}
inline ::TSD::DrawableSelectionTransformerArchive* GroupSelectionTransformerArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* GroupSelectionTransformerArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.GroupSelectionTransformerArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* GroupSelectionTransformerArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableSelectionTransformerArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::DrawableSelectionTransformerArchive* GroupSelectionTransformerArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.GroupSelectionTransformerArchive.super)
  return _internal_mutable_super();
}
inline void GroupSelectionTransformerArchive::set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.GroupSelectionTransformerArchive.super)
}

// -------------------------------------------------------------------

// PencilAnnotationSelectionTransformerArchive

// required .TSP.UUID pencil_annotation_uuid = 1;
inline bool PencilAnnotationSelectionTransformerArchive::_internal_has_pencil_annotation_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pencil_annotation_uuid_ != nullptr);
  return value;
}
inline bool PencilAnnotationSelectionTransformerArchive::has_pencil_annotation_uuid() const {
  return _internal_has_pencil_annotation_uuid();
}
inline const ::TSP::UUID& PencilAnnotationSelectionTransformerArchive::_internal_pencil_annotation_uuid() const {
  const ::TSP::UUID* p = pencil_annotation_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& PencilAnnotationSelectionTransformerArchive::pencil_annotation_uuid() const {
  // @@protoc_insertion_point(field_get:TSD.PencilAnnotationSelectionTransformerArchive.pencil_annotation_uuid)
  return _internal_pencil_annotation_uuid();
}
inline void PencilAnnotationSelectionTransformerArchive::unsafe_arena_set_allocated_pencil_annotation_uuid(
    ::TSP::UUID* pencil_annotation_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_uuid_);
  }
  pencil_annotation_uuid_ = pencil_annotation_uuid;
  if (pencil_annotation_uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.PencilAnnotationSelectionTransformerArchive.pencil_annotation_uuid)
}
inline ::TSP::UUID* PencilAnnotationSelectionTransformerArchive::release_pencil_annotation_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = pencil_annotation_uuid_;
  pencil_annotation_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* PencilAnnotationSelectionTransformerArchive::unsafe_arena_release_pencil_annotation_uuid() {
  // @@protoc_insertion_point(field_release:TSD.PencilAnnotationSelectionTransformerArchive.pencil_annotation_uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = pencil_annotation_uuid_;
  pencil_annotation_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* PencilAnnotationSelectionTransformerArchive::_internal_mutable_pencil_annotation_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (pencil_annotation_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    pencil_annotation_uuid_ = p;
  }
  return pencil_annotation_uuid_;
}
inline ::TSP::UUID* PencilAnnotationSelectionTransformerArchive::mutable_pencil_annotation_uuid() {
  // @@protoc_insertion_point(field_mutable:TSD.PencilAnnotationSelectionTransformerArchive.pencil_annotation_uuid)
  return _internal_mutable_pencil_annotation_uuid();
}
inline void PencilAnnotationSelectionTransformerArchive::set_allocated_pencil_annotation_uuid(::TSP::UUID* pencil_annotation_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_uuid_);
  }
  if (pencil_annotation_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pencil_annotation_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      pencil_annotation_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pencil_annotation_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pencil_annotation_uuid_ = pencil_annotation_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSD.PencilAnnotationSelectionTransformerArchive.pencil_annotation_uuid)
}

// -------------------------------------------------------------------

// FreehandDrawingOpacityCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool FreehandDrawingOpacityCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FreehandDrawingOpacityCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void FreehandDrawingOpacityCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& FreehandDrawingOpacityCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& FreehandDrawingOpacityCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.FreehandDrawingOpacityCommandArchive.super)
  return _internal_super();
}
inline void FreehandDrawingOpacityCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.FreehandDrawingOpacityCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* FreehandDrawingOpacityCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* FreehandDrawingOpacityCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.FreehandDrawingOpacityCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* FreehandDrawingOpacityCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* FreehandDrawingOpacityCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.FreehandDrawingOpacityCommandArchive.super)
  return _internal_mutable_super();
}
inline void FreehandDrawingOpacityCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.FreehandDrawingOpacityCommandArchive.super)
}

// optional double opacity = 2;
inline bool FreehandDrawingOpacityCommandArchive::_internal_has_opacity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FreehandDrawingOpacityCommandArchive::has_opacity() const {
  return _internal_has_opacity();
}
inline void FreehandDrawingOpacityCommandArchive::clear_opacity() {
  opacity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FreehandDrawingOpacityCommandArchive::_internal_opacity() const {
  return opacity_;
}
inline double FreehandDrawingOpacityCommandArchive::opacity() const {
  // @@protoc_insertion_point(field_get:TSD.FreehandDrawingOpacityCommandArchive.opacity)
  return _internal_opacity();
}
inline void FreehandDrawingOpacityCommandArchive::_internal_set_opacity(double value) {
  _has_bits_[0] |= 0x00000002u;
  opacity_ = value;
}
inline void FreehandDrawingOpacityCommandArchive::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:TSD.FreehandDrawingOpacityCommandArchive.opacity)
}

// optional double old_opacity = 3;
inline bool FreehandDrawingOpacityCommandArchive::_internal_has_old_opacity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FreehandDrawingOpacityCommandArchive::has_old_opacity() const {
  return _internal_has_old_opacity();
}
inline void FreehandDrawingOpacityCommandArchive::clear_old_opacity() {
  old_opacity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FreehandDrawingOpacityCommandArchive::_internal_old_opacity() const {
  return old_opacity_;
}
inline double FreehandDrawingOpacityCommandArchive::old_opacity() const {
  // @@protoc_insertion_point(field_get:TSD.FreehandDrawingOpacityCommandArchive.old_opacity)
  return _internal_old_opacity();
}
inline void FreehandDrawingOpacityCommandArchive::_internal_set_old_opacity(double value) {
  _has_bits_[0] |= 0x00000004u;
  old_opacity_ = value;
}
inline void FreehandDrawingOpacityCommandArchive::set_old_opacity(double value) {
  _internal_set_old_opacity(value);
  // @@protoc_insertion_point(field_set:TSD.FreehandDrawingOpacityCommandArchive.old_opacity)
}

// -------------------------------------------------------------------

// FreehandDrawingAnimationCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool FreehandDrawingAnimationCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FreehandDrawingAnimationCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void FreehandDrawingAnimationCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& FreehandDrawingAnimationCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& FreehandDrawingAnimationCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.FreehandDrawingAnimationCommandArchive.super)
  return _internal_super();
}
inline void FreehandDrawingAnimationCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.FreehandDrawingAnimationCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* FreehandDrawingAnimationCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* FreehandDrawingAnimationCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.FreehandDrawingAnimationCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* FreehandDrawingAnimationCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* FreehandDrawingAnimationCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.FreehandDrawingAnimationCommandArchive.super)
  return _internal_mutable_super();
}
inline void FreehandDrawingAnimationCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.FreehandDrawingAnimationCommandArchive.super)
}

// optional .TSD.FreehandDrawingAnimationArchive animation = 2;
inline bool FreehandDrawingAnimationCommandArchive::_internal_has_animation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || animation_ != nullptr);
  return value;
}
inline bool FreehandDrawingAnimationCommandArchive::has_animation() const {
  return _internal_has_animation();
}
inline const ::TSD::FreehandDrawingAnimationArchive& FreehandDrawingAnimationCommandArchive::_internal_animation() const {
  const ::TSD::FreehandDrawingAnimationArchive* p = animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FreehandDrawingAnimationArchive&>(
      ::TSD::_FreehandDrawingAnimationArchive_default_instance_);
}
inline const ::TSD::FreehandDrawingAnimationArchive& FreehandDrawingAnimationCommandArchive::animation() const {
  // @@protoc_insertion_point(field_get:TSD.FreehandDrawingAnimationCommandArchive.animation)
  return _internal_animation();
}
inline void FreehandDrawingAnimationCommandArchive::unsafe_arena_set_allocated_animation(
    ::TSD::FreehandDrawingAnimationArchive* animation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  animation_ = animation;
  if (animation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.FreehandDrawingAnimationCommandArchive.animation)
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::release_animation() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FreehandDrawingAnimationArchive* temp = animation_;
  animation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::unsafe_arena_release_animation() {
  // @@protoc_insertion_point(field_release:TSD.FreehandDrawingAnimationCommandArchive.animation)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::FreehandDrawingAnimationArchive* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::_internal_mutable_animation() {
  _has_bits_[0] |= 0x00000002u;
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FreehandDrawingAnimationArchive>(GetArena());
    animation_ = p;
  }
  return animation_;
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::mutable_animation() {
  // @@protoc_insertion_point(field_mutable:TSD.FreehandDrawingAnimationCommandArchive.animation)
  return _internal_mutable_animation();
}
inline void FreehandDrawingAnimationCommandArchive::set_allocated_animation(::TSD::FreehandDrawingAnimationArchive* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation)->GetArena();
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:TSD.FreehandDrawingAnimationCommandArchive.animation)
}

// optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
inline bool FreehandDrawingAnimationCommandArchive::_internal_has_old_animation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || old_animation_ != nullptr);
  return value;
}
inline bool FreehandDrawingAnimationCommandArchive::has_old_animation() const {
  return _internal_has_old_animation();
}
inline const ::TSD::FreehandDrawingAnimationArchive& FreehandDrawingAnimationCommandArchive::_internal_old_animation() const {
  const ::TSD::FreehandDrawingAnimationArchive* p = old_animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FreehandDrawingAnimationArchive&>(
      ::TSD::_FreehandDrawingAnimationArchive_default_instance_);
}
inline const ::TSD::FreehandDrawingAnimationArchive& FreehandDrawingAnimationCommandArchive::old_animation() const {
  // @@protoc_insertion_point(field_get:TSD.FreehandDrawingAnimationCommandArchive.old_animation)
  return _internal_old_animation();
}
inline void FreehandDrawingAnimationCommandArchive::unsafe_arena_set_allocated_old_animation(
    ::TSD::FreehandDrawingAnimationArchive* old_animation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_animation_);
  }
  old_animation_ = old_animation;
  if (old_animation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.FreehandDrawingAnimationCommandArchive.old_animation)
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::release_old_animation() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FreehandDrawingAnimationArchive* temp = old_animation_;
  old_animation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::unsafe_arena_release_old_animation() {
  // @@protoc_insertion_point(field_release:TSD.FreehandDrawingAnimationCommandArchive.old_animation)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::FreehandDrawingAnimationArchive* temp = old_animation_;
  old_animation_ = nullptr;
  return temp;
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::_internal_mutable_old_animation() {
  _has_bits_[0] |= 0x00000004u;
  if (old_animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FreehandDrawingAnimationArchive>(GetArena());
    old_animation_ = p;
  }
  return old_animation_;
}
inline ::TSD::FreehandDrawingAnimationArchive* FreehandDrawingAnimationCommandArchive::mutable_old_animation() {
  // @@protoc_insertion_point(field_mutable:TSD.FreehandDrawingAnimationCommandArchive.old_animation)
  return _internal_mutable_old_animation();
}
inline void FreehandDrawingAnimationCommandArchive::set_allocated_old_animation(::TSD::FreehandDrawingAnimationArchive* old_animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_animation_);
  }
  if (old_animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_animation)->GetArena();
    if (message_arena != submessage_arena) {
      old_animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_animation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  old_animation_ = old_animation;
  // @@protoc_insertion_point(field_set_allocated:TSD.FreehandDrawingAnimationCommandArchive.old_animation)
}

// -------------------------------------------------------------------

// InsertCaptionOrTitleCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InsertCaptionOrTitleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InsertCaptionOrTitleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InsertCaptionOrTitleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InsertCaptionOrTitleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.InsertCaptionOrTitleCommandArchive.super)
  return _internal_super();
}
inline void InsertCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.super)
}
inline ::TSK::CommandArchive* InsertCaptionOrTitleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* InsertCaptionOrTitleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.InsertCaptionOrTitleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InsertCaptionOrTitleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InsertCaptionOrTitleCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.InsertCaptionOrTitleCommandArchive.super)
  return _internal_mutable_super();
}
inline void InsertCaptionOrTitleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.super)
}

// optional .TSP.UUIDPath drawable_info_id_path = 2;
inline bool InsertCaptionOrTitleCommandArchive::_internal_has_drawable_info_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_info_id_path_ != nullptr);
  return value;
}
inline bool InsertCaptionOrTitleCommandArchive::has_drawable_info_id_path() const {
  return _internal_has_drawable_info_id_path();
}
inline const ::TSP::UUIDPath& InsertCaptionOrTitleCommandArchive::_internal_drawable_info_id_path() const {
  const ::TSP::UUIDPath* p = drawable_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& InsertCaptionOrTitleCommandArchive::drawable_info_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.InsertCaptionOrTitleCommandArchive.drawable_info_id_path)
  return _internal_drawable_info_id_path();
}
inline void InsertCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_drawable_info_id_path(
    ::TSP::UUIDPath* drawable_info_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  drawable_info_id_path_ = drawable_info_id_path;
  if (drawable_info_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.drawable_info_id_path)
}
inline ::TSP::UUIDPath* InsertCaptionOrTitleCommandArchive::release_drawable_info_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* InsertCaptionOrTitleCommandArchive::unsafe_arena_release_drawable_info_id_path() {
  // @@protoc_insertion_point(field_release:TSD.InsertCaptionOrTitleCommandArchive.drawable_info_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* InsertCaptionOrTitleCommandArchive::_internal_mutable_drawable_info_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    drawable_info_id_path_ = p;
  }
  return drawable_info_id_path_;
}
inline ::TSP::UUIDPath* InsertCaptionOrTitleCommandArchive::mutable_drawable_info_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.InsertCaptionOrTitleCommandArchive.drawable_info_id_path)
  return _internal_mutable_drawable_info_id_path();
}
inline void InsertCaptionOrTitleCommandArchive::set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  if (drawable_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_info_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_info_id_path_ = drawable_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.drawable_info_id_path)
}

// optional .TSP.Reference caption_or_title_info = 3;
inline bool InsertCaptionOrTitleCommandArchive::_internal_has_caption_or_title_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || caption_or_title_info_ != nullptr);
  return value;
}
inline bool InsertCaptionOrTitleCommandArchive::has_caption_or_title_info() const {
  return _internal_has_caption_or_title_info();
}
inline const ::TSP::Reference& InsertCaptionOrTitleCommandArchive::_internal_caption_or_title_info() const {
  const ::TSP::Reference* p = caption_or_title_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertCaptionOrTitleCommandArchive::caption_or_title_info() const {
  // @@protoc_insertion_point(field_get:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_info)
  return _internal_caption_or_title_info();
}
inline void InsertCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_caption_or_title_info(
    ::TSP::Reference* caption_or_title_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_or_title_info_);
  }
  caption_or_title_info_ = caption_or_title_info;
  if (caption_or_title_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_info)
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::release_caption_or_title_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = caption_or_title_info_;
  caption_or_title_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::unsafe_arena_release_caption_or_title_info() {
  // @@protoc_insertion_point(field_release:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_info)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = caption_or_title_info_;
  caption_or_title_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::_internal_mutable_caption_or_title_info() {
  _has_bits_[0] |= 0x00000004u;
  if (caption_or_title_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    caption_or_title_info_ = p;
  }
  return caption_or_title_info_;
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::mutable_caption_or_title_info() {
  // @@protoc_insertion_point(field_mutable:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_info)
  return _internal_mutable_caption_or_title_info();
}
inline void InsertCaptionOrTitleCommandArchive::set_allocated_caption_or_title_info(::TSP::Reference* caption_or_title_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_or_title_info_);
  }
  if (caption_or_title_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_or_title_info)->GetArena();
    if (message_arena != submessage_arena) {
      caption_or_title_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption_or_title_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  caption_or_title_info_ = caption_or_title_info;
  // @@protoc_insertion_point(field_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_info)
}

// optional .TSP.UUID added_caption_or_title_uuid = 4;
inline bool InsertCaptionOrTitleCommandArchive::_internal_has_added_caption_or_title_uuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || added_caption_or_title_uuid_ != nullptr);
  return value;
}
inline bool InsertCaptionOrTitleCommandArchive::has_added_caption_or_title_uuid() const {
  return _internal_has_added_caption_or_title_uuid();
}
inline const ::TSP::UUID& InsertCaptionOrTitleCommandArchive::_internal_added_caption_or_title_uuid() const {
  const ::TSP::UUID* p = added_caption_or_title_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& InsertCaptionOrTitleCommandArchive::added_caption_or_title_uuid() const {
  // @@protoc_insertion_point(field_get:TSD.InsertCaptionOrTitleCommandArchive.added_caption_or_title_uuid)
  return _internal_added_caption_or_title_uuid();
}
inline void InsertCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_added_caption_or_title_uuid(
    ::TSP::UUID* added_caption_or_title_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(added_caption_or_title_uuid_);
  }
  added_caption_or_title_uuid_ = added_caption_or_title_uuid;
  if (added_caption_or_title_uuid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.added_caption_or_title_uuid)
}
inline ::TSP::UUID* InsertCaptionOrTitleCommandArchive::release_added_caption_or_title_uuid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = added_caption_or_title_uuid_;
  added_caption_or_title_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* InsertCaptionOrTitleCommandArchive::unsafe_arena_release_added_caption_or_title_uuid() {
  // @@protoc_insertion_point(field_release:TSD.InsertCaptionOrTitleCommandArchive.added_caption_or_title_uuid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = added_caption_or_title_uuid_;
  added_caption_or_title_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* InsertCaptionOrTitleCommandArchive::_internal_mutable_added_caption_or_title_uuid() {
  _has_bits_[0] |= 0x00000008u;
  if (added_caption_or_title_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    added_caption_or_title_uuid_ = p;
  }
  return added_caption_or_title_uuid_;
}
inline ::TSP::UUID* InsertCaptionOrTitleCommandArchive::mutable_added_caption_or_title_uuid() {
  // @@protoc_insertion_point(field_mutable:TSD.InsertCaptionOrTitleCommandArchive.added_caption_or_title_uuid)
  return _internal_mutable_added_caption_or_title_uuid();
}
inline void InsertCaptionOrTitleCommandArchive::set_allocated_added_caption_or_title_uuid(::TSP::UUID* added_caption_or_title_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(added_caption_or_title_uuid_);
  }
  if (added_caption_or_title_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(added_caption_or_title_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      added_caption_or_title_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, added_caption_or_title_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  added_caption_or_title_uuid_ = added_caption_or_title_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.added_caption_or_title_uuid)
}

// optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
inline bool InsertCaptionOrTitleCommandArchive::_internal_has_caption_or_title_kind() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InsertCaptionOrTitleCommandArchive::has_caption_or_title_kind() const {
  return _internal_has_caption_or_title_kind();
}
inline void InsertCaptionOrTitleCommandArchive::clear_caption_or_title_kind() {
  caption_or_title_kind_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::TSD::CaptionOrTitleKind InsertCaptionOrTitleCommandArchive::_internal_caption_or_title_kind() const {
  return static_cast< ::TSD::CaptionOrTitleKind >(caption_or_title_kind_);
}
inline ::TSD::CaptionOrTitleKind InsertCaptionOrTitleCommandArchive::caption_or_title_kind() const {
  // @@protoc_insertion_point(field_get:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_kind)
  return _internal_caption_or_title_kind();
}
inline void InsertCaptionOrTitleCommandArchive::_internal_set_caption_or_title_kind(::TSD::CaptionOrTitleKind value) {
  assert(::TSD::CaptionOrTitleKind_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  caption_or_title_kind_ = value;
}
inline void InsertCaptionOrTitleCommandArchive::set_caption_or_title_kind(::TSD::CaptionOrTitleKind value) {
  _internal_set_caption_or_title_kind(value);
  // @@protoc_insertion_point(field_set:TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_kind)
}

// optional .TSP.Reference undo_object = 6;
inline bool InsertCaptionOrTitleCommandArchive::_internal_has_undo_object() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || undo_object_ != nullptr);
  return value;
}
inline bool InsertCaptionOrTitleCommandArchive::has_undo_object() const {
  return _internal_has_undo_object();
}
inline const ::TSP::Reference& InsertCaptionOrTitleCommandArchive::_internal_undo_object() const {
  const ::TSP::Reference* p = undo_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InsertCaptionOrTitleCommandArchive::undo_object() const {
  // @@protoc_insertion_point(field_get:TSD.InsertCaptionOrTitleCommandArchive.undo_object)
  return _internal_undo_object();
}
inline void InsertCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_undo_object(
    ::TSP::Reference* undo_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  undo_object_ = undo_object;
  if (undo_object) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.undo_object)
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::release_undo_object() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::unsafe_arena_release_undo_object() {
  // @@protoc_insertion_point(field_release:TSD.InsertCaptionOrTitleCommandArchive.undo_object)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = undo_object_;
  undo_object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::_internal_mutable_undo_object() {
  _has_bits_[0] |= 0x00000010u;
  if (undo_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    undo_object_ = p;
  }
  return undo_object_;
}
inline ::TSP::Reference* InsertCaptionOrTitleCommandArchive::mutable_undo_object() {
  // @@protoc_insertion_point(field_mutable:TSD.InsertCaptionOrTitleCommandArchive.undo_object)
  return _internal_mutable_undo_object();
}
inline void InsertCaptionOrTitleCommandArchive::set_allocated_undo_object(::TSP::Reference* undo_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object_);
  }
  if (undo_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_object)->GetArena();
    if (message_arena != submessage_arena) {
      undo_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  undo_object_ = undo_object;
  // @@protoc_insertion_point(field_set_allocated:TSD.InsertCaptionOrTitleCommandArchive.undo_object)
}

// -------------------------------------------------------------------

// RemoveCaptionOrTitleCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool RemoveCaptionOrTitleCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveCaptionOrTitleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoveCaptionOrTitleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoveCaptionOrTitleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.RemoveCaptionOrTitleCommandArchive.super)
  return _internal_super();
}
inline void RemoveCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoveCaptionOrTitleCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* RemoveCaptionOrTitleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.RemoveCaptionOrTitleCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoveCaptionOrTitleCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* RemoveCaptionOrTitleCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.RemoveCaptionOrTitleCommandArchive.super)
  return _internal_mutable_super();
}
inline void RemoveCaptionOrTitleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super)->GetArena();
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.super)
}

// optional .TSP.UUIDPath drawable_info_id_path = 2;
inline bool RemoveCaptionOrTitleCommandArchive::_internal_has_drawable_info_id_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || drawable_info_id_path_ != nullptr);
  return value;
}
inline bool RemoveCaptionOrTitleCommandArchive::has_drawable_info_id_path() const {
  return _internal_has_drawable_info_id_path();
}
inline const ::TSP::UUIDPath& RemoveCaptionOrTitleCommandArchive::_internal_drawable_info_id_path() const {
  const ::TSP::UUIDPath* p = drawable_info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& RemoveCaptionOrTitleCommandArchive::drawable_info_id_path() const {
  // @@protoc_insertion_point(field_get:TSD.RemoveCaptionOrTitleCommandArchive.drawable_info_id_path)
  return _internal_drawable_info_id_path();
}
inline void RemoveCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_drawable_info_id_path(
    ::TSP::UUIDPath* drawable_info_id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  drawable_info_id_path_ = drawable_info_id_path;
  if (drawable_info_id_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.drawable_info_id_path)
}
inline ::TSP::UUIDPath* RemoveCaptionOrTitleCommandArchive::release_drawable_info_id_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* RemoveCaptionOrTitleCommandArchive::unsafe_arena_release_drawable_info_id_path() {
  // @@protoc_insertion_point(field_release:TSD.RemoveCaptionOrTitleCommandArchive.drawable_info_id_path)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = drawable_info_id_path_;
  drawable_info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* RemoveCaptionOrTitleCommandArchive::_internal_mutable_drawable_info_id_path() {
  _has_bits_[0] |= 0x00000002u;
  if (drawable_info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    drawable_info_id_path_ = p;
  }
  return drawable_info_id_path_;
}
inline ::TSP::UUIDPath* RemoveCaptionOrTitleCommandArchive::mutable_drawable_info_id_path() {
  // @@protoc_insertion_point(field_mutable:TSD.RemoveCaptionOrTitleCommandArchive.drawable_info_id_path)
  return _internal_mutable_drawable_info_id_path();
}
inline void RemoveCaptionOrTitleCommandArchive::set_allocated_drawable_info_id_path(::TSP::UUIDPath* drawable_info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path_);
  }
  if (drawable_info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drawable_info_id_path)->GetArena();
    if (message_arena != submessage_arena) {
      drawable_info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drawable_info_id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  drawable_info_id_path_ = drawable_info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.drawable_info_id_path)
}

// optional .TSP.Reference removed_caption_or_title_info = 3;
inline bool RemoveCaptionOrTitleCommandArchive::_internal_has_removed_caption_or_title_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || removed_caption_or_title_info_ != nullptr);
  return value;
}
inline bool RemoveCaptionOrTitleCommandArchive::has_removed_caption_or_title_info() const {
  return _internal_has_removed_caption_or_title_info();
}
inline const ::TSP::Reference& RemoveCaptionOrTitleCommandArchive::_internal_removed_caption_or_title_info() const {
  const ::TSP::Reference* p = removed_caption_or_title_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& RemoveCaptionOrTitleCommandArchive::removed_caption_or_title_info() const {
  // @@protoc_insertion_point(field_get:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_info)
  return _internal_removed_caption_or_title_info();
}
inline void RemoveCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_removed_caption_or_title_info(
    ::TSP::Reference* removed_caption_or_title_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_caption_or_title_info_);
  }
  removed_caption_or_title_info_ = removed_caption_or_title_info;
  if (removed_caption_or_title_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_info)
}
inline ::TSP::Reference* RemoveCaptionOrTitleCommandArchive::release_removed_caption_or_title_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = removed_caption_or_title_info_;
  removed_caption_or_title_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* RemoveCaptionOrTitleCommandArchive::unsafe_arena_release_removed_caption_or_title_info() {
  // @@protoc_insertion_point(field_release:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_info)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = removed_caption_or_title_info_;
  removed_caption_or_title_info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* RemoveCaptionOrTitleCommandArchive::_internal_mutable_removed_caption_or_title_info() {
  _has_bits_[0] |= 0x00000004u;
  if (removed_caption_or_title_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    removed_caption_or_title_info_ = p;
  }
  return removed_caption_or_title_info_;
}
inline ::TSP::Reference* RemoveCaptionOrTitleCommandArchive::mutable_removed_caption_or_title_info() {
  // @@protoc_insertion_point(field_mutable:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_info)
  return _internal_mutable_removed_caption_or_title_info();
}
inline void RemoveCaptionOrTitleCommandArchive::set_allocated_removed_caption_or_title_info(::TSP::Reference* removed_caption_or_title_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_caption_or_title_info_);
  }
  if (removed_caption_or_title_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_caption_or_title_info)->GetArena();
    if (message_arena != submessage_arena) {
      removed_caption_or_title_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed_caption_or_title_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  removed_caption_or_title_info_ = removed_caption_or_title_info;
  // @@protoc_insertion_point(field_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_info)
}

// optional .TSP.UUID removed_caption_or_title_uuid = 4;
inline bool RemoveCaptionOrTitleCommandArchive::_internal_has_removed_caption_or_title_uuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || removed_caption_or_title_uuid_ != nullptr);
  return value;
}
inline bool RemoveCaptionOrTitleCommandArchive::has_removed_caption_or_title_uuid() const {
  return _internal_has_removed_caption_or_title_uuid();
}
inline const ::TSP::UUID& RemoveCaptionOrTitleCommandArchive::_internal_removed_caption_or_title_uuid() const {
  const ::TSP::UUID* p = removed_caption_or_title_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& RemoveCaptionOrTitleCommandArchive::removed_caption_or_title_uuid() const {
  // @@protoc_insertion_point(field_get:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_uuid)
  return _internal_removed_caption_or_title_uuid();
}
inline void RemoveCaptionOrTitleCommandArchive::unsafe_arena_set_allocated_removed_caption_or_title_uuid(
    ::TSP::UUID* removed_caption_or_title_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_caption_or_title_uuid_);
  }
  removed_caption_or_title_uuid_ = removed_caption_or_title_uuid;
  if (removed_caption_or_title_uuid) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_uuid)
}
inline ::TSP::UUID* RemoveCaptionOrTitleCommandArchive::release_removed_caption_or_title_uuid() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = removed_caption_or_title_uuid_;
  removed_caption_or_title_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* RemoveCaptionOrTitleCommandArchive::unsafe_arena_release_removed_caption_or_title_uuid() {
  // @@protoc_insertion_point(field_release:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_uuid)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = removed_caption_or_title_uuid_;
  removed_caption_or_title_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* RemoveCaptionOrTitleCommandArchive::_internal_mutable_removed_caption_or_title_uuid() {
  _has_bits_[0] |= 0x00000008u;
  if (removed_caption_or_title_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    removed_caption_or_title_uuid_ = p;
  }
  return removed_caption_or_title_uuid_;
}
inline ::TSP::UUID* RemoveCaptionOrTitleCommandArchive::mutable_removed_caption_or_title_uuid() {
  // @@protoc_insertion_point(field_mutable:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_uuid)
  return _internal_mutable_removed_caption_or_title_uuid();
}
inline void RemoveCaptionOrTitleCommandArchive::set_allocated_removed_caption_or_title_uuid(::TSP::UUID* removed_caption_or_title_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_caption_or_title_uuid_);
  }
  if (removed_caption_or_title_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_caption_or_title_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      removed_caption_or_title_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed_caption_or_title_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  removed_caption_or_title_uuid_ = removed_caption_or_title_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_uuid)
}

// optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
inline bool RemoveCaptionOrTitleCommandArchive::_internal_has_caption_or_title_kind() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RemoveCaptionOrTitleCommandArchive::has_caption_or_title_kind() const {
  return _internal_has_caption_or_title_kind();
}
inline void RemoveCaptionOrTitleCommandArchive::clear_caption_or_title_kind() {
  caption_or_title_kind_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::TSD::CaptionOrTitleKind RemoveCaptionOrTitleCommandArchive::_internal_caption_or_title_kind() const {
  return static_cast< ::TSD::CaptionOrTitleKind >(caption_or_title_kind_);
}
inline ::TSD::CaptionOrTitleKind RemoveCaptionOrTitleCommandArchive::caption_or_title_kind() const {
  // @@protoc_insertion_point(field_get:TSD.RemoveCaptionOrTitleCommandArchive.caption_or_title_kind)
  return _internal_caption_or_title_kind();
}
inline void RemoveCaptionOrTitleCommandArchive::_internal_set_caption_or_title_kind(::TSD::CaptionOrTitleKind value) {
  assert(::TSD::CaptionOrTitleKind_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  caption_or_title_kind_ = value;
}
inline void RemoveCaptionOrTitleCommandArchive::set_caption_or_title_kind(::TSD::CaptionOrTitleKind value) {
  _internal_set_caption_or_title_kind(value);
  // @@protoc_insertion_point(field_set:TSD.RemoveCaptionOrTitleCommandArchive.caption_or_title_kind)
}

// -------------------------------------------------------------------

// SetCaptionOrTitleVisibilityCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool SetCaptionOrTitleVisibilityCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSD::InfoCommandArchive& SetCaptionOrTitleVisibilityCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& SetCaptionOrTitleVisibilityCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSD.SetCaptionOrTitleVisibilityCommandArchive.super)
  return _internal_super();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSD.SetCaptionOrTitleVisibilityCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* SetCaptionOrTitleVisibilityCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSD::InfoCommandArchive* SetCaptionOrTitleVisibilityCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSD.SetCaptionOrTitleVisibilityCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* SetCaptionOrTitleVisibilityCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSD::InfoCommandArchive* SetCaptionOrTitleVisibilityCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSD.SetCaptionOrTitleVisibilityCommandArchive.super)
  return _internal_mutable_super();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSD.SetCaptionOrTitleVisibilityCommandArchive.super)
}

// optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
inline bool SetCaptionOrTitleVisibilityCommandArchive::_internal_has_caption_or_title_kind() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::has_caption_or_title_kind() const {
  return _internal_has_caption_or_title_kind();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::clear_caption_or_title_kind() {
  caption_or_title_kind_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::TSD::CaptionOrTitleKind SetCaptionOrTitleVisibilityCommandArchive::_internal_caption_or_title_kind() const {
  return static_cast< ::TSD::CaptionOrTitleKind >(caption_or_title_kind_);
}
inline ::TSD::CaptionOrTitleKind SetCaptionOrTitleVisibilityCommandArchive::caption_or_title_kind() const {
  // @@protoc_insertion_point(field_get:TSD.SetCaptionOrTitleVisibilityCommandArchive.caption_or_title_kind)
  return _internal_caption_or_title_kind();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::_internal_set_caption_or_title_kind(::TSD::CaptionOrTitleKind value) {
  assert(::TSD::CaptionOrTitleKind_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  caption_or_title_kind_ = value;
}
inline void SetCaptionOrTitleVisibilityCommandArchive::set_caption_or_title_kind(::TSD::CaptionOrTitleKind value) {
  _internal_set_caption_or_title_kind(value);
  // @@protoc_insertion_point(field_set:TSD.SetCaptionOrTitleVisibilityCommandArchive.caption_or_title_kind)
}

// optional bool hidden = 3;
inline bool SetCaptionOrTitleVisibilityCommandArchive::_internal_has_hidden() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::has_hidden() const {
  return _internal_has_hidden();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::_internal_hidden() const {
  return hidden_;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::hidden() const {
  // @@protoc_insertion_point(field_get:TSD.SetCaptionOrTitleVisibilityCommandArchive.hidden)
  return _internal_hidden();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::_internal_set_hidden(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hidden_ = value;
}
inline void SetCaptionOrTitleVisibilityCommandArchive::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:TSD.SetCaptionOrTitleVisibilityCommandArchive.hidden)
}

// optional bool was_hidden = 4;
inline bool SetCaptionOrTitleVisibilityCommandArchive::_internal_has_was_hidden() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::has_was_hidden() const {
  return _internal_has_was_hidden();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::clear_was_hidden() {
  was_hidden_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::_internal_was_hidden() const {
  return was_hidden_;
}
inline bool SetCaptionOrTitleVisibilityCommandArchive::was_hidden() const {
  // @@protoc_insertion_point(field_get:TSD.SetCaptionOrTitleVisibilityCommandArchive.was_hidden)
  return _internal_was_hidden();
}
inline void SetCaptionOrTitleVisibilityCommandArchive::_internal_set_was_hidden(bool value) {
  _has_bits_[0] |= 0x00000004u;
  was_hidden_ = value;
}
inline void SetCaptionOrTitleVisibilityCommandArchive::set_was_hidden(bool value) {
  _internal_set_was_hidden(value);
  // @@protoc_insertion_point(field_set:TSD.SetCaptionOrTitleVisibilityCommandArchive.was_hidden)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSD::GroupUngroupInformativeCommandArchive_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::GroupUngroupInformativeCommandArchive_CommandType>() {
  return ::TSD::GroupUngroupInformativeCommandArchive_CommandType_descriptor();
}
template <> struct is_proto_enum< ::TSD::MovieSetValueCommandArchive_LoopOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::MovieSetValueCommandArchive_LoopOption>() {
  return ::TSD::MovieSetValueCommandArchive_LoopOption_descriptor();
}
template <> struct is_proto_enum< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType>() {
  return ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor();
}
template <> struct is_proto_enum< ::TSD::CommentCommandVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::CommentCommandVariant>() {
  return ::TSD::CommentCommandVariant_descriptor();
}
template <> struct is_proto_enum< ::TSD::CaptionOrTitleKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSD::CaptionOrTitleKind>() {
  return ::TSD::CaptionOrTitleKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSDCommandArchives_2eproto
