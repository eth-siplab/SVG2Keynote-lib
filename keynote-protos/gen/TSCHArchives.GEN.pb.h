// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eGEN_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eGEN_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCH3DArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHArchives_2eGEN_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHArchives_2eGEN_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHArchives_2eGEN_2eproto;
namespace TSCH {
namespace Generated {
class ChartAxisGenericPropertyMapArchive;
struct ChartAxisGenericPropertyMapArchiveDefaultTypeInternal;
extern ChartAxisGenericPropertyMapArchiveDefaultTypeInternal _ChartAxisGenericPropertyMapArchive_default_instance_;
class ChartAxisNonStyleArchive;
struct ChartAxisNonStyleArchiveDefaultTypeInternal;
extern ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
class ChartAxisStyleArchive;
struct ChartAxisStyleArchiveDefaultTypeInternal;
extern ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
class ChartGenericPropertyMapArchive;
struct ChartGenericPropertyMapArchiveDefaultTypeInternal;
extern ChartGenericPropertyMapArchiveDefaultTypeInternal _ChartGenericPropertyMapArchive_default_instance_;
class ChartNonStyleArchive;
struct ChartNonStyleArchiveDefaultTypeInternal;
extern ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
class ChartSeriesGenericPropertyMapArchive;
struct ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal;
extern ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal _ChartSeriesGenericPropertyMapArchive_default_instance_;
class ChartSeriesNonStyleArchive;
struct ChartSeriesNonStyleArchiveDefaultTypeInternal;
extern ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
class ChartSeriesStyleArchive;
struct ChartSeriesStyleArchiveDefaultTypeInternal;
extern ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
class ChartStyleArchive;
struct ChartStyleArchiveDefaultTypeInternal;
extern ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
class LegendGenericPropertyMapArchive;
struct LegendGenericPropertyMapArchiveDefaultTypeInternal;
extern LegendGenericPropertyMapArchiveDefaultTypeInternal _LegendGenericPropertyMapArchive_default_instance_;
class LegendNonStyleArchive;
struct LegendNonStyleArchiveDefaultTypeInternal;
extern LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
class LegendStyleArchive;
struct LegendStyleArchiveDefaultTypeInternal;
extern LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
class ReferenceLineGenericPropertyMapArchive;
struct ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal;
extern ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal _ReferenceLineGenericPropertyMapArchive_default_instance_;
class ReferenceLineNonStyleArchive;
struct ReferenceLineNonStyleArchiveDefaultTypeInternal;
extern ReferenceLineNonStyleArchiveDefaultTypeInternal _ReferenceLineNonStyleArchive_default_instance_;
class ReferenceLineStyleArchive;
struct ReferenceLineStyleArchiveDefaultTypeInternal;
extern ReferenceLineStyleArchiveDefaultTypeInternal _ReferenceLineStyleArchive_default_instance_;
}  // namespace Generated
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::Generated::ChartAxisGenericPropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartAxisGenericPropertyMapArchive>(Arena*);
template<> ::TSCH::Generated::ChartAxisNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartAxisNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartAxisStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartAxisStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartGenericPropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartGenericPropertyMapArchive>(Arena*);
template<> ::TSCH::Generated::ChartNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartSeriesGenericPropertyMapArchive>(Arena*);
template<> ::TSCH::Generated::ChartSeriesNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartSeriesNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartSeriesStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartSeriesStyleArchive>(Arena*);
template<> ::TSCH::Generated::ChartStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ChartStyleArchive>(Arena*);
template<> ::TSCH::Generated::LegendGenericPropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::Generated::LegendGenericPropertyMapArchive>(Arena*);
template<> ::TSCH::Generated::LegendNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::LegendNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::LegendStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::LegendStyleArchive>(Arena*);
template<> ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ReferenceLineGenericPropertyMapArchive>(Arena*);
template<> ::TSCH::Generated::ReferenceLineNonStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ReferenceLineNonStyleArchive>(Arena*);
template<> ::TSCH::Generated::ReferenceLineStyleArchive* Arena::CreateMaybeMessage<::TSCH::Generated::ReferenceLineStyleArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {
namespace Generated {

// ===================================================================

class ChartStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartStyleArchive) */ {
 public:
  inline ChartStyleArchive() : ChartStyleArchive(nullptr) {}
  ~ChartStyleArchive() override;
  explicit constexpr ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartStyleArchive(const ChartStyleArchive& from);
  ChartStyleArchive(ChartStyleArchive&& from) noexcept
    : ChartStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartStyleArchive& operator=(const ChartStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStyleArchive& operator=(ChartStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartStyleArchive*>(
               &_ChartStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChartStyleArchive& a, ChartStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartStyleArchive* New() const final {
    return new ChartStyleArchive();
  }

  ChartStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartStyleArchive";
  }
  protected:
  explicit ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfoarea3DlightingpackageFieldNumber = 2,
    kTschchartinfobar3DlightingpackageFieldNumber = 3,
    kTschchartinfocolumn3DlightingpackageFieldNumber = 4,
    kTschchartinfodefault3DlightingpackageFieldNumber = 5,
    kTschchartinfoline3DlightingpackageFieldNumber = 6,
    kTschchartinfopie3DlightingpackageFieldNumber = 7,
    kTschchartinfodefaultbackgroundfillFieldNumber = 8,
    kTschchartinfodefaultbackgroundstrokeFieldNumber = 9,
    kTschchartinfodefaultbordershadowFieldNumber = 11,
    kTschchartinfodefaultborderstrokeFieldNumber = 12,
    kTschchartinfodefaultgridbackgroundfillFieldNumber = 14,
    kTschchartinfodefaulttitlecolorFieldNumber = 19,
    kTschchartinfodefault3DchartopacityFieldNumber = 1,
    kTschchartinfodefaultborderopacityFieldNumber = 10,
    kTschchartinfodefaultgridbackgroundopacityFieldNumber = 15,
    kTschchartinfodefaultinterbargapFieldNumber = 16,
    kTschchartinfodefaultintersetgapFieldNumber = 17,
    kTschchartinfodefaulttitleparagraphstyleindexFieldNumber = 20,
    kTschchartinfodefaultroundedcornerradiusFieldNumber = 122,
    kTschchartinfodefaultdatasetnameparagraphstyleindexFieldNumber = 21,
    kTschchartinfodefaultcombinelayersFieldNumber = 13,
    kTschchartinfodefaultroundedcornerouterendonlyFieldNumber = 123,
    kTschchartinfodefaultshowborderFieldNumber = 18,
  };
  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  bool has_tschchartinfoarea3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoarea3dlightingpackage() const;
  public:
  void clear_tschchartinfoarea3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoarea3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoarea3dlightingpackage();
  void set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoarea3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoarea3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoarea3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoarea3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  bool has_tschchartinfobar3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfobar3dlightingpackage() const;
  public:
  void clear_tschchartinfobar3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfobar3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfobar3dlightingpackage();
  void set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfobar3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfobar3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfobar3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfobar3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  bool has_tschchartinfocolumn3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfocolumn3dlightingpackage() const;
  public:
  void clear_tschchartinfocolumn3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfocolumn3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfocolumn3dlightingpackage();
  void set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfocolumn3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfocolumn3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumn3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfocolumn3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  bool has_tschchartinfodefault3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfodefault3dlightingpackage() const;
  public:
  void clear_tschchartinfodefault3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfodefault3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfodefault3dlightingpackage();
  void set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfodefault3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfodefault3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfodefault3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  bool has_tschchartinfoline3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfoline3dlightingpackage() const;
  public:
  void clear_tschchartinfoline3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoline3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoline3dlightingpackage();
  void set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfoline3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfoline3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfoline3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfoline3dlightingpackage();

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  bool has_tschchartinfopie3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfopie3dlightingpackage() const;
  public:
  void clear_tschchartinfopie3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfopie3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfopie3dlightingpackage();
  void set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfopie3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfopie3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfopie3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfopie3dlightingpackage();

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  bool has_tschchartinfodefaultbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfodefaultbackgroundfill() const;
  public:
  void clear_tschchartinfodefaultbackgroundfill();
  const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartinfodefaultbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfodefaultbackgroundfill();
  void set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfodefaultbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfodefaultbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbackgroundfill(
      ::TSD::FillArchive* tschchartinfodefaultbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfodefaultbackgroundfill();

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  bool has_tschchartinfodefaultbackgroundstroke() const;
  private:
  bool _internal_has_tschchartinfodefaultbackgroundstroke() const;
  public:
  void clear_tschchartinfodefaultbackgroundstroke();
  const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartinfodefaultbackgroundstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfodefaultbackgroundstroke();
  void set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfodefaultbackgroundstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfodefaultbackgroundstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbackgroundstroke(
      ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfodefaultbackgroundstroke();

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  bool has_tschchartinfodefaultbordershadow() const;
  private:
  bool _internal_has_tschchartinfodefaultbordershadow() const;
  public:
  void clear_tschchartinfodefaultbordershadow();
  const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfodefaultbordershadow();
  ::TSD::ShadowArchive* mutable_tschchartinfodefaultbordershadow();
  void set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfodefaultbordershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfodefaultbordershadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultbordershadow(
      ::TSD::ShadowArchive* tschchartinfodefaultbordershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfodefaultbordershadow();

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  bool has_tschchartinfodefaultborderstroke() const;
  private:
  bool _internal_has_tschchartinfodefaultborderstroke() const;
  public:
  void clear_tschchartinfodefaultborderstroke();
  const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartinfodefaultborderstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfodefaultborderstroke();
  void set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfodefaultborderstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfodefaultborderstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultborderstroke(
      ::TSD::StrokeArchive* tschchartinfodefaultborderstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfodefaultborderstroke();

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  bool has_tschchartinfodefaultgridbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfodefaultgridbackgroundfill() const;
  public:
  void clear_tschchartinfodefaultgridbackgroundfill();
  const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartinfodefaultgridbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfodefaultgridbackgroundfill();
  void set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfodefaultgridbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfodefaultgridbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaultgridbackgroundfill(
      ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfodefaultgridbackgroundfill();

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  bool has_tschchartinfodefaulttitlecolor() const;
  private:
  bool _internal_has_tschchartinfodefaulttitlecolor() const;
  public:
  void clear_tschchartinfodefaulttitlecolor();
  const ::TSP::Color& tschchartinfodefaulttitlecolor() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Color* release_tschchartinfodefaulttitlecolor();
  ::TSP::Color* mutable_tschchartinfodefaulttitlecolor();
  void set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor);
  private:
  const ::TSP::Color& _internal_tschchartinfodefaulttitlecolor() const;
  ::TSP::Color* _internal_mutable_tschchartinfodefaulttitlecolor();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefaulttitlecolor(
      ::TSP::Color* tschchartinfodefaulttitlecolor);
  ::TSP::Color* unsafe_arena_release_tschchartinfodefaulttitlecolor();

  // optional float tschchartinfodefault3dchartopacity = 1;
  bool has_tschchartinfodefault3dchartopacity() const;
  private:
  bool _internal_has_tschchartinfodefault3dchartopacity() const;
  public:
  void clear_tschchartinfodefault3dchartopacity();
  float tschchartinfodefault3dchartopacity() const;
  void set_tschchartinfodefault3dchartopacity(float value);
  private:
  float _internal_tschchartinfodefault3dchartopacity() const;
  void _internal_set_tschchartinfodefault3dchartopacity(float value);
  public:

  // optional float tschchartinfodefaultborderopacity = 10;
  bool has_tschchartinfodefaultborderopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultborderopacity() const;
  public:
  void clear_tschchartinfodefaultborderopacity();
  float tschchartinfodefaultborderopacity() const;
  void set_tschchartinfodefaultborderopacity(float value);
  private:
  float _internal_tschchartinfodefaultborderopacity() const;
  void _internal_set_tschchartinfodefaultborderopacity(float value);
  public:

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  bool has_tschchartinfodefaultgridbackgroundopacity() const;
  private:
  bool _internal_has_tschchartinfodefaultgridbackgroundopacity() const;
  public:
  void clear_tschchartinfodefaultgridbackgroundopacity();
  float tschchartinfodefaultgridbackgroundopacity() const;
  void set_tschchartinfodefaultgridbackgroundopacity(float value);
  private:
  float _internal_tschchartinfodefaultgridbackgroundopacity() const;
  void _internal_set_tschchartinfodefaultgridbackgroundopacity(float value);
  public:

  // optional float tschchartinfodefaultinterbargap = 16;
  bool has_tschchartinfodefaultinterbargap() const;
  private:
  bool _internal_has_tschchartinfodefaultinterbargap() const;
  public:
  void clear_tschchartinfodefaultinterbargap();
  float tschchartinfodefaultinterbargap() const;
  void set_tschchartinfodefaultinterbargap(float value);
  private:
  float _internal_tschchartinfodefaultinterbargap() const;
  void _internal_set_tschchartinfodefaultinterbargap(float value);
  public:

  // optional float tschchartinfodefaultintersetgap = 17;
  bool has_tschchartinfodefaultintersetgap() const;
  private:
  bool _internal_has_tschchartinfodefaultintersetgap() const;
  public:
  void clear_tschchartinfodefaultintersetgap();
  float tschchartinfodefaultintersetgap() const;
  void set_tschchartinfodefaultintersetgap(float value);
  private:
  float _internal_tschchartinfodefaultintersetgap() const;
  void _internal_set_tschchartinfodefaultintersetgap(float value);
  public:

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  bool has_tschchartinfodefaulttitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaulttitleparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaulttitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaulttitleparagraphstyleindex() const;
  void set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaulttitleparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodefaultroundedcornerradius = 122;
  bool has_tschchartinfodefaultroundedcornerradius() const;
  private:
  bool _internal_has_tschchartinfodefaultroundedcornerradius() const;
  public:
  void clear_tschchartinfodefaultroundedcornerradius();
  float tschchartinfodefaultroundedcornerradius() const;
  void set_tschchartinfodefaultroundedcornerradius(float value);
  private:
  float _internal_tschchartinfodefaultroundedcornerradius() const;
  void _internal_set_tschchartinfodefaultroundedcornerradius(float value);
  public:

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  bool has_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  public:
  void clear_tschchartinfodefaultdatasetnameparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  void set_tschchartinfodefaultdatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  void _internal_set_tschchartinfodefaultdatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartinfodefaultcombinelayers = 13;
  bool has_tschchartinfodefaultcombinelayers() const;
  private:
  bool _internal_has_tschchartinfodefaultcombinelayers() const;
  public:
  void clear_tschchartinfodefaultcombinelayers();
  bool tschchartinfodefaultcombinelayers() const;
  void set_tschchartinfodefaultcombinelayers(bool value);
  private:
  bool _internal_tschchartinfodefaultcombinelayers() const;
  void _internal_set_tschchartinfodefaultcombinelayers(bool value);
  public:

  // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
  bool has_tschchartinfodefaultroundedcornerouterendonly() const;
  private:
  bool _internal_has_tschchartinfodefaultroundedcornerouterendonly() const;
  public:
  void clear_tschchartinfodefaultroundedcornerouterendonly();
  bool tschchartinfodefaultroundedcornerouterendonly() const;
  void set_tschchartinfodefaultroundedcornerouterendonly(bool value);
  private:
  bool _internal_tschchartinfodefaultroundedcornerouterendonly() const;
  void _internal_set_tschchartinfodefaultroundedcornerouterendonly(bool value);
  public:

  // optional bool tschchartinfodefaultshowborder = 18;
  bool has_tschchartinfodefaultshowborder() const;
  private:
  bool _internal_has_tschchartinfodefaultshowborder() const;
  public:
  void clear_tschchartinfodefaultshowborder();
  bool tschchartinfodefaultshowborder() const;
  void set_tschchartinfodefaultshowborder(bool value);
  private:
  bool _internal_tschchartinfodefaultshowborder() const;
  void _internal_set_tschchartinfodefaultshowborder(bool value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage_;
  ::TSD::FillArchive* tschchartinfodefaultbackgroundfill_;
  ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke_;
  ::TSD::ShadowArchive* tschchartinfodefaultbordershadow_;
  ::TSD::StrokeArchive* tschchartinfodefaultborderstroke_;
  ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill_;
  ::TSP::Color* tschchartinfodefaulttitlecolor_;
  float tschchartinfodefault3dchartopacity_;
  float tschchartinfodefaultborderopacity_;
  float tschchartinfodefaultgridbackgroundopacity_;
  float tschchartinfodefaultinterbargap_;
  float tschchartinfodefaultintersetgap_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaulttitleparagraphstyleindex_;
  float tschchartinfodefaultroundedcornerradius_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdatasetnameparagraphstyleindex_;
  bool tschchartinfodefaultcombinelayers_;
  bool tschchartinfodefaultroundedcornerouterendonly_;
  bool tschchartinfodefaultshowborder_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartNonStyleArchive) */ {
 public:
  inline ChartNonStyleArchive() : ChartNonStyleArchive(nullptr) {}
  ~ChartNonStyleArchive() override;
  explicit constexpr ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartNonStyleArchive(const ChartNonStyleArchive& from);
  ChartNonStyleArchive(ChartNonStyleArchive&& from) noexcept
    : ChartNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartNonStyleArchive& operator=(const ChartNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartNonStyleArchive& operator=(ChartNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartNonStyleArchive*>(
               &_ChartNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChartNonStyleArchive& a, ChartNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartNonStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartNonStyleArchive* New() const final {
    return new ChartNonStyleArchive();
  }

  ChartNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartNonStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartNonStyleArchive";
  }
  protected:
  explicit ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfodefaulttitleFieldNumber = 23,
    kTschchartinfodefault3DrotationFieldNumber = 4,
    kTschchartinfoarea3DscaleFieldNumber = 5,
    kTschchartinfobar3DscaleFieldNumber = 6,
    kTschchartinfocolumn3DscaleFieldNumber = 7,
    kTschchartinfodefault3DscaleFieldNumber = 8,
    kTschchartinfoline3DscaleFieldNumber = 9,
    kTschchartinfopie3DscaleFieldNumber = 10,
    kTschchartinfodefault3DviewportFieldNumber = 11,
    kTschchartinfodefault3DbarshapeFieldNumber = 1,
    kTschchartinfodefault3DintersetdepthgapFieldNumber = 3,
    kTschchartinfodefaultpiestartangleFieldNumber = 19,
    kTschchartinfodefaultshowtitleFieldNumber = 21,
    kTschchartinfodefaultskiphiddendataFieldNumber = 22,
    kTschchartinfodefaultdatasetnamelocationFieldNumber = 24,
    kTschchartinfodefaultmultidatacontroltypeFieldNumber = 25,
    kTschchartinfodefaultinnerradiusFieldNumber = 27,
    kTschchartinfodefault3DbeveledgesFieldNumber = 2,
    kTschchartinfodefaultdeprecatedroundedcornerouterendonlyFieldNumber = 121,
    kTschchartinfodefaultdonutplacetitleatcenterFieldNumber = 28,
    kTschchartinfodefaultshowlegendFieldNumber = 20,
    kTschchartinfopiecalloutlinetypeFieldNumber = 111,
    kTschchartinfoareacalloutlinetypeFieldNumber = 112,
    kTschchartinfobarcalloutlinetypeFieldNumber = 113,
    kTschchartinfobubblecalloutlinetypeFieldNumber = 114,
    kTschchartinfolinecalloutlinetypeFieldNumber = 115,
    kTschchartinfoscattercalloutlinetypeFieldNumber = 116,
    kTschchartinfostackedareacalloutlinetypeFieldNumber = 117,
    kTschchartinfostackedbarcalloutlinetypeFieldNumber = 118,
    kTschchartinfodefaultcalloutlinetypeFieldNumber = 119,
    kTschchartinfodefaultdeprecatedroundedcornerradiusFieldNumber = 120,
  };
  // optional string tschchartinfodefaulttitle = 23;
  bool has_tschchartinfodefaulttitle() const;
  private:
  bool _internal_has_tschchartinfodefaulttitle() const;
  public:
  void clear_tschchartinfodefaulttitle();
  const std::string& tschchartinfodefaulttitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartinfodefaulttitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartinfodefaulttitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartinfodefaulttitle();
  void set_allocated_tschchartinfodefaulttitle(std::string* tschchartinfodefaulttitle);
  private:
  const std::string& _internal_tschchartinfodefaulttitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartinfodefaulttitle(const std::string& value);
  std::string* _internal_mutable_tschchartinfodefaulttitle();
  public:

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  bool has_tschchartinfodefault3drotation() const;
  private:
  bool _internal_has_tschchartinfodefault3drotation() const;
  public:
  void clear_tschchartinfodefault3drotation();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3drotation();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3drotation();
  void set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3drotation() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3drotation();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3drotation(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3drotation();

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  bool has_tschchartinfoarea3dscale() const;
  private:
  bool _internal_has_tschchartinfoarea3dscale() const;
  public:
  void clear_tschchartinfoarea3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfoarea3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoarea3dscale();
  void set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfoarea3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfoarea3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfoarea3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfoarea3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  bool has_tschchartinfobar3dscale() const;
  private:
  bool _internal_has_tschchartinfobar3dscale() const;
  public:
  void clear_tschchartinfobar3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfobar3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfobar3dscale();
  void set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfobar3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfobar3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfobar3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfobar3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  bool has_tschchartinfocolumn3dscale() const;
  private:
  bool _internal_has_tschchartinfocolumn3dscale() const;
  public:
  void clear_tschchartinfocolumn3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfocolumn3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfocolumn3dscale();
  void set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfocolumn3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfocolumn3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfocolumn3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfocolumn3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  bool has_tschchartinfodefault3dscale() const;
  private:
  bool _internal_has_tschchartinfodefault3dscale() const;
  public:
  void clear_tschchartinfodefault3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dscale();
  void set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  bool has_tschchartinfoline3dscale() const;
  private:
  bool _internal_has_tschchartinfoline3dscale() const;
  public:
  void clear_tschchartinfoline3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfoline3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoline3dscale();
  void set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfoline3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfoline3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfoline3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfoline3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  bool has_tschchartinfopie3dscale() const;
  private:
  bool _internal_has_tschchartinfopie3dscale() const;
  public:
  void clear_tschchartinfopie3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfopie3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfopie3dscale();
  void set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfopie3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfopie3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfopie3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfopie3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  bool has_tschchartinfodefault3dviewport() const;
  private:
  bool _internal_has_tschchartinfodefault3dviewport() const;
  public:
  void clear_tschchartinfodefault3dviewport();
  const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dviewport();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dviewport();
  void set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfodefault3dviewport() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfodefault3dviewport();
  public:
  void unsafe_arena_set_allocated_tschchartinfodefault3dviewport(
      ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfodefault3dviewport();

  // optional int32 tschchartinfodefault3dbarshape = 1;
  bool has_tschchartinfodefault3dbarshape() const;
  private:
  bool _internal_has_tschchartinfodefault3dbarshape() const;
  public:
  void clear_tschchartinfodefault3dbarshape();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefault3dbarshape() const;
  void set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefault3dbarshape() const;
  void _internal_set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  bool has_tschchartinfodefault3dintersetdepthgap() const;
  private:
  bool _internal_has_tschchartinfodefault3dintersetdepthgap() const;
  public:
  void clear_tschchartinfodefault3dintersetdepthgap();
  float tschchartinfodefault3dintersetdepthgap() const;
  void set_tschchartinfodefault3dintersetdepthgap(float value);
  private:
  float _internal_tschchartinfodefault3dintersetdepthgap() const;
  void _internal_set_tschchartinfodefault3dintersetdepthgap(float value);
  public:

  // optional float tschchartinfodefaultpiestartangle = 19;
  bool has_tschchartinfodefaultpiestartangle() const;
  private:
  bool _internal_has_tschchartinfodefaultpiestartangle() const;
  public:
  void clear_tschchartinfodefaultpiestartangle();
  float tschchartinfodefaultpiestartangle() const;
  void set_tschchartinfodefaultpiestartangle(float value);
  private:
  float _internal_tschchartinfodefaultpiestartangle() const;
  void _internal_set_tschchartinfodefaultpiestartangle(float value);
  public:

  // optional bool tschchartinfodefaultshowtitle = 21;
  bool has_tschchartinfodefaultshowtitle() const;
  private:
  bool _internal_has_tschchartinfodefaultshowtitle() const;
  public:
  void clear_tschchartinfodefaultshowtitle();
  bool tschchartinfodefaultshowtitle() const;
  void set_tschchartinfodefaultshowtitle(bool value);
  private:
  bool _internal_tschchartinfodefaultshowtitle() const;
  void _internal_set_tschchartinfodefaultshowtitle(bool value);
  public:

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  bool has_tschchartinfodefaultskiphiddendata() const;
  private:
  bool _internal_has_tschchartinfodefaultskiphiddendata() const;
  public:
  void clear_tschchartinfodefaultskiphiddendata();
  bool tschchartinfodefaultskiphiddendata() const;
  void set_tschchartinfodefaultskiphiddendata(bool value);
  private:
  bool _internal_tschchartinfodefaultskiphiddendata() const;
  void _internal_set_tschchartinfodefaultskiphiddendata(bool value);
  public:

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  bool has_tschchartinfodefaultdatasetnamelocation() const;
  private:
  bool _internal_has_tschchartinfodefaultdatasetnamelocation() const;
  public:
  void clear_tschchartinfodefaultdatasetnamelocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdatasetnamelocation() const;
  void set_tschchartinfodefaultdatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultdatasetnamelocation() const;
  void _internal_set_tschchartinfodefaultdatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  bool has_tschchartinfodefaultmultidatacontroltype() const;
  private:
  bool _internal_has_tschchartinfodefaultmultidatacontroltype() const;
  public:
  void clear_tschchartinfodefaultmultidatacontroltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultmultidatacontroltype() const;
  void set_tschchartinfodefaultmultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultmultidatacontroltype() const;
  void _internal_set_tschchartinfodefaultmultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodefaultinnerradius = 27;
  bool has_tschchartinfodefaultinnerradius() const;
  private:
  bool _internal_has_tschchartinfodefaultinnerradius() const;
  public:
  void clear_tschchartinfodefaultinnerradius();
  float tschchartinfodefaultinnerradius() const;
  void set_tschchartinfodefaultinnerradius(float value);
  private:
  float _internal_tschchartinfodefaultinnerradius() const;
  void _internal_set_tschchartinfodefaultinnerradius(float value);
  public:

  // optional bool tschchartinfodefault3dbeveledges = 2;
  bool has_tschchartinfodefault3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfodefault3dbeveledges() const;
  public:
  void clear_tschchartinfodefault3dbeveledges();
  bool tschchartinfodefault3dbeveledges() const;
  void set_tschchartinfodefault3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfodefault3dbeveledges() const;
  void _internal_set_tschchartinfodefault3dbeveledges(bool value);
  public:

  // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
  bool has_tschchartinfodefaultdeprecatedroundedcornerouterendonly() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly() const;
  public:
  void clear_tschchartinfodefaultdeprecatedroundedcornerouterendonly();
  bool tschchartinfodefaultdeprecatedroundedcornerouterendonly() const;
  void set_tschchartinfodefaultdeprecatedroundedcornerouterendonly(bool value);
  private:
  bool _internal_tschchartinfodefaultdeprecatedroundedcornerouterendonly() const;
  void _internal_set_tschchartinfodefaultdeprecatedroundedcornerouterendonly(bool value);
  public:

  // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
  bool has_tschchartinfodefaultdonutplacetitleatcenter() const;
  private:
  bool _internal_has_tschchartinfodefaultdonutplacetitleatcenter() const;
  public:
  void clear_tschchartinfodefaultdonutplacetitleatcenter();
  bool tschchartinfodefaultdonutplacetitleatcenter() const;
  void set_tschchartinfodefaultdonutplacetitleatcenter(bool value);
  private:
  bool _internal_tschchartinfodefaultdonutplacetitleatcenter() const;
  void _internal_set_tschchartinfodefaultdonutplacetitleatcenter(bool value);
  public:

  // optional bool tschchartinfodefaultshowlegend = 20;
  bool has_tschchartinfodefaultshowlegend() const;
  private:
  bool _internal_has_tschchartinfodefaultshowlegend() const;
  public:
  void clear_tschchartinfodefaultshowlegend();
  bool tschchartinfodefaultshowlegend() const;
  void set_tschchartinfodefaultshowlegend(bool value);
  private:
  bool _internal_tschchartinfodefaultshowlegend() const;
  void _internal_set_tschchartinfodefaultshowlegend(bool value);
  public:

  // optional int32 tschchartinfopiecalloutlinetype = 111;
  bool has_tschchartinfopiecalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfopiecalloutlinetype() const;
  public:
  void clear_tschchartinfopiecalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfopiecalloutlinetype() const;
  void set_tschchartinfopiecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfopiecalloutlinetype() const;
  void _internal_set_tschchartinfopiecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfoareacalloutlinetype = 112;
  bool has_tschchartinfoareacalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfoareacalloutlinetype() const;
  public:
  void clear_tschchartinfoareacalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfoareacalloutlinetype() const;
  void set_tschchartinfoareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfoareacalloutlinetype() const;
  void _internal_set_tschchartinfoareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfobarcalloutlinetype = 113;
  bool has_tschchartinfobarcalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfobarcalloutlinetype() const;
  public:
  void clear_tschchartinfobarcalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfobarcalloutlinetype() const;
  void set_tschchartinfobarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfobarcalloutlinetype() const;
  void _internal_set_tschchartinfobarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfobubblecalloutlinetype = 114;
  bool has_tschchartinfobubblecalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfobubblecalloutlinetype() const;
  public:
  void clear_tschchartinfobubblecalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfobubblecalloutlinetype() const;
  void set_tschchartinfobubblecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfobubblecalloutlinetype() const;
  void _internal_set_tschchartinfobubblecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfolinecalloutlinetype = 115;
  bool has_tschchartinfolinecalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfolinecalloutlinetype() const;
  public:
  void clear_tschchartinfolinecalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfolinecalloutlinetype() const;
  void set_tschchartinfolinecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfolinecalloutlinetype() const;
  void _internal_set_tschchartinfolinecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfoscattercalloutlinetype = 116;
  bool has_tschchartinfoscattercalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfoscattercalloutlinetype() const;
  public:
  void clear_tschchartinfoscattercalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfoscattercalloutlinetype() const;
  void set_tschchartinfoscattercalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfoscattercalloutlinetype() const;
  void _internal_set_tschchartinfoscattercalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfostackedareacalloutlinetype = 117;
  bool has_tschchartinfostackedareacalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfostackedareacalloutlinetype() const;
  public:
  void clear_tschchartinfostackedareacalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfostackedareacalloutlinetype() const;
  void set_tschchartinfostackedareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfostackedareacalloutlinetype() const;
  void _internal_set_tschchartinfostackedareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
  bool has_tschchartinfostackedbarcalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfostackedbarcalloutlinetype() const;
  public:
  void clear_tschchartinfostackedbarcalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfostackedbarcalloutlinetype() const;
  void set_tschchartinfostackedbarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfostackedbarcalloutlinetype() const;
  void _internal_set_tschchartinfostackedbarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodefaultcalloutlinetype = 119;
  bool has_tschchartinfodefaultcalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfodefaultcalloutlinetype() const;
  public:
  void clear_tschchartinfodefaultcalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultcalloutlinetype() const;
  void set_tschchartinfodefaultcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodefaultcalloutlinetype() const;
  void _internal_set_tschchartinfodefaultcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
  bool has_tschchartinfodefaultdeprecatedroundedcornerradius() const;
  private:
  bool _internal_has_tschchartinfodefaultdeprecatedroundedcornerradius() const;
  public:
  void clear_tschchartinfodefaultdeprecatedroundedcornerradius();
  float tschchartinfodefaultdeprecatedroundedcornerradius() const;
  void set_tschchartinfodefaultdeprecatedroundedcornerradius(float value);
  private:
  float _internal_tschchartinfodefaultdeprecatedroundedcornerradius() const;
  void _internal_set_tschchartinfodefaultdeprecatedroundedcornerradius(float value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartinfodefaulttitle_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation_;
  ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefault3dbarshape_;
  float tschchartinfodefault3dintersetdepthgap_;
  float tschchartinfodefaultpiestartangle_;
  bool tschchartinfodefaultshowtitle_;
  bool tschchartinfodefaultskiphiddendata_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultdatasetnamelocation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultmultidatacontroltype_;
  float tschchartinfodefaultinnerradius_;
  bool tschchartinfodefault3dbeveledges_;
  bool tschchartinfodefaultdeprecatedroundedcornerouterendonly_;
  bool tschchartinfodefaultdonutplacetitleatcenter_;
  bool tschchartinfodefaultshowlegend_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfopiecalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfoareacalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfobarcalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfobubblecalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfolinecalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfoscattercalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfostackedareacalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfostackedbarcalloutlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodefaultcalloutlinetype_;
  float tschchartinfodefaultdeprecatedroundedcornerradius_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class LegendStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.LegendStyleArchive) */ {
 public:
  inline LegendStyleArchive() : LegendStyleArchive(nullptr) {}
  ~LegendStyleArchive() override;
  explicit constexpr LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendStyleArchive(const LegendStyleArchive& from);
  LegendStyleArchive(LegendStyleArchive&& from) noexcept
    : LegendStyleArchive() {
    *this = ::std::move(from);
  }

  inline LegendStyleArchive& operator=(const LegendStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendStyleArchive& operator=(LegendStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendStyleArchive* internal_default_instance() {
    return reinterpret_cast<const LegendStyleArchive*>(
               &_LegendStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LegendStyleArchive& a, LegendStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegendStyleArchive* New() const final {
    return new LegendStyleArchive();
  }

  LegendStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegendStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LegendStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LegendStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.LegendStyleArchive";
  }
  protected:
  explicit LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschlegendmodeldefaultfillFieldNumber = 1,
    kTschlegendmodeldefaultshadowFieldNumber = 4,
    kTschlegendmodeldefaultstrokeFieldNumber = 5,
    kTschlegendmodeldefaultlabelparagraphstyleindexFieldNumber = 2,
    kTschlegendmodeldefaultopacityFieldNumber = 3,
  };
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  bool has_tschlegendmodeldefaultfill() const;
  private:
  bool _internal_has_tschlegendmodeldefaultfill() const;
  public:
  void clear_tschlegendmodeldefaultfill();
  const ::TSD::FillArchive& tschlegendmodeldefaultfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschlegendmodeldefaultfill();
  ::TSD::FillArchive* mutable_tschlegendmodeldefaultfill();
  void set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill);
  private:
  const ::TSD::FillArchive& _internal_tschlegendmodeldefaultfill() const;
  ::TSD::FillArchive* _internal_mutable_tschlegendmodeldefaultfill();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultfill(
      ::TSD::FillArchive* tschlegendmodeldefaultfill);
  ::TSD::FillArchive* unsafe_arena_release_tschlegendmodeldefaultfill();

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  bool has_tschlegendmodeldefaultshadow() const;
  private:
  bool _internal_has_tschlegendmodeldefaultshadow() const;
  public:
  void clear_tschlegendmodeldefaultshadow();
  const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschlegendmodeldefaultshadow();
  ::TSD::ShadowArchive* mutable_tschlegendmodeldefaultshadow();
  void set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschlegendmodeldefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschlegendmodeldefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultshadow(
      ::TSD::ShadowArchive* tschlegendmodeldefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschlegendmodeldefaultshadow();

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  bool has_tschlegendmodeldefaultstroke() const;
  private:
  bool _internal_has_tschlegendmodeldefaultstroke() const;
  public:
  void clear_tschlegendmodeldefaultstroke();
  const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschlegendmodeldefaultstroke();
  ::TSD::StrokeArchive* mutable_tschlegendmodeldefaultstroke();
  void set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschlegendmodeldefaultstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschlegendmodeldefaultstroke();
  public:
  void unsafe_arena_set_allocated_tschlegendmodeldefaultstroke(
      ::TSD::StrokeArchive* tschlegendmodeldefaultstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschlegendmodeldefaultstroke();

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  bool has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschlegendmodeldefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschlegendmodeldefaultlabelparagraphstyleindex() const;
  void set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  void _internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschlegendmodeldefaultopacity = 3;
  bool has_tschlegendmodeldefaultopacity() const;
  private:
  bool _internal_has_tschlegendmodeldefaultopacity() const;
  public:
  void clear_tschlegendmodeldefaultopacity();
  float tschlegendmodeldefaultopacity() const;
  void set_tschlegendmodeldefaultopacity(float value);
  private:
  float _internal_tschlegendmodeldefaultopacity() const;
  void _internal_set_tschlegendmodeldefaultopacity(float value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::FillArchive* tschlegendmodeldefaultfill_;
  ::TSD::ShadowArchive* tschlegendmodeldefaultshadow_;
  ::TSD::StrokeArchive* tschlegendmodeldefaultstroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschlegendmodeldefaultlabelparagraphstyleindex_;
  float tschlegendmodeldefaultopacity_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class LegendNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.LegendNonStyleArchive) */ {
 public:
  inline LegendNonStyleArchive() : LegendNonStyleArchive(nullptr) {}
  ~LegendNonStyleArchive() override;
  explicit constexpr LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendNonStyleArchive(const LegendNonStyleArchive& from);
  LegendNonStyleArchive(LegendNonStyleArchive&& from) noexcept
    : LegendNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline LegendNonStyleArchive& operator=(const LegendNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendNonStyleArchive& operator=(LegendNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const LegendNonStyleArchive*>(
               &_LegendNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LegendNonStyleArchive& a, LegendNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendNonStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegendNonStyleArchive* New() const final {
    return new LegendNonStyleArchive();
  }

  LegendNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegendNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LegendNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LegendNonStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.LegendNonStyleArchive";
  }
  protected:
  explicit LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartAxisStyleArchive) */ {
 public:
  inline ChartAxisStyleArchive() : ChartAxisStyleArchive(nullptr) {}
  ~ChartAxisStyleArchive() override;
  explicit constexpr ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisStyleArchive(const ChartAxisStyleArchive& from);
  ChartAxisStyleArchive(ChartAxisStyleArchive&& from) noexcept
    : ChartAxisStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisStyleArchive& operator=(const ChartAxisStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisStyleArchive& operator=(ChartAxisStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisStyleArchive*>(
               &_ChartAxisStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChartAxisStyleArchive& a, ChartAxisStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartAxisStyleArchive* New() const final {
    return new ChartAxisStyleArchive();
  }

  ChartAxisStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartAxisStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartAxisStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartAxisStyleArchive";
  }
  protected:
  explicit ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartaxiscategory3DgridlinestrokeFieldNumber = 3,
    kTschchartaxisvalue3DgridlinestrokeFieldNumber = 4,
    kTschchartaxiscategorymajorgridlineshadowFieldNumber = 14,
    kTschchartaxisvaluemajorgridlineshadowFieldNumber = 15,
    kTschchartaxiscategorymajorgridlinestrokeFieldNumber = 16,
    kTschchartaxisvaluemajorgridlinestrokeFieldNumber = 17,
    kTschchartaxiscategoryminorgridlineshadowFieldNumber = 20,
    kTschchartaxisvalueminorgridlineshadowFieldNumber = 21,
    kTschchartaxiscategoryminorgridlinestrokeFieldNumber = 22,
    kTschchartaxisvalueminorgridlinestrokeFieldNumber = 23,
    kTschchartaxiscategory3DgridlineopacityFieldNumber = 1,
    kTschchartaxisvalue3DgridlineopacityFieldNumber = 2,
    kTschchartaxiscategoryhorizontalspacingFieldNumber = 5,
    kTschchartaxiscategorylabelparagraphstyleindexFieldNumber = 6,
    kTschchartaxisdefaultlabelparagraphstyleindexFieldNumber = 7,
    kTschchartaxisvaluelabelparagraphstyleindexFieldNumber = 8,
    kTschchartaxiscategorylabelsorientationFieldNumber = 9,
    kTschchartaxisdefaultlabelsorientationFieldNumber = 10,
    kTschchartaxisvaluelabelsorientationFieldNumber = 11,
    kTschchartaxiscategorymajorgridlineopacityFieldNumber = 12,
    kTschchartaxisvaluemajorgridlineopacityFieldNumber = 13,
    kTschchartaxiscategoryminorgridlineopacityFieldNumber = 18,
    kTschchartaxisvalueminorgridlineopacityFieldNumber = 19,
    kTschchartaxiscategoryshowaxisFieldNumber = 24,
    kTschchartaxisvalueshowaxisFieldNumber = 25,
    kTschchartaxiscategoryshowlastlabelFieldNumber = 26,
    kTschchartaxiscategoryshowmajorgridlinesFieldNumber = 27,
    kTschchartaxisvalueshowmajorgridlinesFieldNumber = 28,
    kTschchartaxiscategoryshowmajortickmarksFieldNumber = 29,
    kTschchartaxisvalueshowmajortickmarksFieldNumber = 30,
    kTschchartaxisvalueshowminimumlabelFieldNumber = 31,
    kTschchartaxiscategoryshowminorgridlinesFieldNumber = 32,
    kTschchartaxisvalueshowminorgridlinesFieldNumber = 33,
    kTschchartaxiscategoryshowminortickmarksFieldNumber = 34,
    kTschchartaxisvalueshowminortickmarksFieldNumber = 35,
    kTschchartaxiscategorytickmarklocationFieldNumber = 36,
    kTschchartaxisvaluetickmarklocationFieldNumber = 37,
    kTschchartaxiscategorytitleparagraphstyleindexFieldNumber = 38,
    kTschchartaxisdefaulttitleparagraphstyleindexFieldNumber = 39,
    kTschchartaxisvaluetitleparagraphstyleindexFieldNumber = 40,
    kTschchartaxiscategoryverticalspacingFieldNumber = 41,
  };
  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  bool has_tschchartaxiscategory3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategory3dgridlinestroke() const;
  public:
  void clear_tschchartaxiscategory3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxiscategory3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategory3dgridlinestroke();
  void set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategory3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategory3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategory3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategory3dgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  bool has_tschchartaxisvalue3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvalue3dgridlinestroke() const;
  public:
  void clear_tschchartaxisvalue3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisvalue3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvalue3dgridlinestroke();
  void set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvalue3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvalue3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalue3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvalue3dgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  bool has_tschchartaxiscategorymajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlineshadow() const;
  public:
  void clear_tschchartaxiscategorymajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxiscategorymajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxiscategorymajorgridlineshadow();
  void set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxiscategorymajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxiscategorymajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxiscategorymajorgridlineshadow();

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  bool has_tschchartaxisvaluemajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlineshadow() const;
  public:
  void clear_tschchartaxisvaluemajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxisvaluemajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisvaluemajorgridlineshadow();
  void set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisvaluemajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisvaluemajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisvaluemajorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  bool has_tschchartaxiscategorymajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlinestroke() const;
  public:
  void clear_tschchartaxiscategorymajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxiscategorymajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategorymajorgridlinestroke();
  void set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategorymajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategorymajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategorymajorgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  bool has_tschchartaxisvaluemajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlinestroke() const;
  public:
  void clear_tschchartaxisvaluemajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisvaluemajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvaluemajorgridlinestroke();
  void set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvaluemajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvaluemajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvaluemajorgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  bool has_tschchartaxiscategoryminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlineshadow() const;
  public:
  void clear_tschchartaxiscategoryminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxiscategoryminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxiscategoryminorgridlineshadow();
  void set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxiscategoryminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxiscategoryminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxiscategoryminorgridlineshadow();

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  bool has_tschchartaxisvalueminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlineshadow() const;
  public:
  void clear_tschchartaxisvalueminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxisvalueminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisvalueminorgridlineshadow();
  void set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisvalueminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisvalueminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalueminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisvalueminorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  bool has_tschchartaxiscategoryminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlinestroke() const;
  public:
  void clear_tschchartaxiscategoryminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxiscategoryminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxiscategoryminorgridlinestroke();
  void set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxiscategoryminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxiscategoryminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxiscategoryminorgridlinestroke();

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  bool has_tschchartaxisvalueminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlinestroke() const;
  public:
  void clear_tschchartaxisvalueminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisvalueminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisvalueminorgridlinestroke();
  void set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisvalueminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisvalueminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisvalueminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisvalueminorgridlinestroke();

  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  bool has_tschchartaxiscategory3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategory3dgridlineopacity() const;
  public:
  void clear_tschchartaxiscategory3dgridlineopacity();
  float tschchartaxiscategory3dgridlineopacity() const;
  void set_tschchartaxiscategory3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategory3dgridlineopacity() const;
  void _internal_set_tschchartaxiscategory3dgridlineopacity(float value);
  public:

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  bool has_tschchartaxisvalue3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvalue3dgridlineopacity() const;
  public:
  void clear_tschchartaxisvalue3dgridlineopacity();
  float tschchartaxisvalue3dgridlineopacity() const;
  void set_tschchartaxisvalue3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvalue3dgridlineopacity() const;
  void _internal_set_tschchartaxisvalue3dgridlineopacity(float value);
  public:

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  bool has_tschchartaxiscategoryhorizontalspacing() const;
  private:
  bool _internal_has_tschchartaxiscategoryhorizontalspacing() const;
  public:
  void clear_tschchartaxiscategoryhorizontalspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryhorizontalspacing() const;
  void set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategoryhorizontalspacing() const;
  void _internal_set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  bool has_tschchartaxiscategorylabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxiscategorylabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxiscategorylabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorylabelparagraphstyleindex() const;
  void set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategorylabelparagraphstyleindex() const;
  void _internal_set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  bool has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxisdefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultlabelparagraphstyleindex() const;
  void set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefaultlabelparagraphstyleindex() const;
  void _internal_set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  bool has_tschchartaxisvaluelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisvaluelabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxisvaluelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluelabelparagraphstyleindex() const;
  void set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluelabelparagraphstyleindex() const;
  void _internal_set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartaxiscategorylabelsorientation = 9;
  bool has_tschchartaxiscategorylabelsorientation() const;
  private:
  bool _internal_has_tschchartaxiscategorylabelsorientation() const;
  public:
  void clear_tschchartaxiscategorylabelsorientation();
  float tschchartaxiscategorylabelsorientation() const;
  void set_tschchartaxiscategorylabelsorientation(float value);
  private:
  float _internal_tschchartaxiscategorylabelsorientation() const;
  void _internal_set_tschchartaxiscategorylabelsorientation(float value);
  public:

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  bool has_tschchartaxisdefaultlabelsorientation() const;
  private:
  bool _internal_has_tschchartaxisdefaultlabelsorientation() const;
  public:
  void clear_tschchartaxisdefaultlabelsorientation();
  float tschchartaxisdefaultlabelsorientation() const;
  void set_tschchartaxisdefaultlabelsorientation(float value);
  private:
  float _internal_tschchartaxisdefaultlabelsorientation() const;
  void _internal_set_tschchartaxisdefaultlabelsorientation(float value);
  public:

  // optional float tschchartaxisvaluelabelsorientation = 11;
  bool has_tschchartaxisvaluelabelsorientation() const;
  private:
  bool _internal_has_tschchartaxisvaluelabelsorientation() const;
  public:
  void clear_tschchartaxisvaluelabelsorientation();
  float tschchartaxisvaluelabelsorientation() const;
  void set_tschchartaxisvaluelabelsorientation(float value);
  private:
  float _internal_tschchartaxisvaluelabelsorientation() const;
  void _internal_set_tschchartaxisvaluelabelsorientation(float value);
  public:

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  bool has_tschchartaxiscategorymajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategorymajorgridlineopacity() const;
  public:
  void clear_tschchartaxiscategorymajorgridlineopacity();
  float tschchartaxiscategorymajorgridlineopacity() const;
  void set_tschchartaxiscategorymajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategorymajorgridlineopacity() const;
  void _internal_set_tschchartaxiscategorymajorgridlineopacity(float value);
  public:

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  bool has_tschchartaxisvaluemajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvaluemajorgridlineopacity() const;
  public:
  void clear_tschchartaxisvaluemajorgridlineopacity();
  float tschchartaxisvaluemajorgridlineopacity() const;
  void set_tschchartaxisvaluemajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvaluemajorgridlineopacity() const;
  void _internal_set_tschchartaxisvaluemajorgridlineopacity(float value);
  public:

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  bool has_tschchartaxiscategoryminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxiscategoryminorgridlineopacity() const;
  public:
  void clear_tschchartaxiscategoryminorgridlineopacity();
  float tschchartaxiscategoryminorgridlineopacity() const;
  void set_tschchartaxiscategoryminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxiscategoryminorgridlineopacity() const;
  void _internal_set_tschchartaxiscategoryminorgridlineopacity(float value);
  public:

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  bool has_tschchartaxisvalueminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisvalueminorgridlineopacity() const;
  public:
  void clear_tschchartaxisvalueminorgridlineopacity();
  float tschchartaxisvalueminorgridlineopacity() const;
  void set_tschchartaxisvalueminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisvalueminorgridlineopacity() const;
  void _internal_set_tschchartaxisvalueminorgridlineopacity(float value);
  public:

  // optional bool tschchartaxiscategoryshowaxis = 24;
  bool has_tschchartaxiscategoryshowaxis() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowaxis() const;
  public:
  void clear_tschchartaxiscategoryshowaxis();
  bool tschchartaxiscategoryshowaxis() const;
  void set_tschchartaxiscategoryshowaxis(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowaxis() const;
  void _internal_set_tschchartaxiscategoryshowaxis(bool value);
  public:

  // optional bool tschchartaxisvalueshowaxis = 25;
  bool has_tschchartaxisvalueshowaxis() const;
  private:
  bool _internal_has_tschchartaxisvalueshowaxis() const;
  public:
  void clear_tschchartaxisvalueshowaxis();
  bool tschchartaxisvalueshowaxis() const;
  void set_tschchartaxisvalueshowaxis(bool value);
  private:
  bool _internal_tschchartaxisvalueshowaxis() const;
  void _internal_set_tschchartaxisvalueshowaxis(bool value);
  public:

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  bool has_tschchartaxiscategoryshowlastlabel() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowlastlabel() const;
  public:
  void clear_tschchartaxiscategoryshowlastlabel();
  bool tschchartaxiscategoryshowlastlabel() const;
  void set_tschchartaxiscategoryshowlastlabel(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowlastlabel() const;
  void _internal_set_tschchartaxiscategoryshowlastlabel(bool value);
  public:

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  bool has_tschchartaxiscategoryshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowmajorgridlines() const;
  public:
  void clear_tschchartaxiscategoryshowmajorgridlines();
  bool tschchartaxiscategoryshowmajorgridlines() const;
  void set_tschchartaxiscategoryshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowmajorgridlines() const;
  void _internal_set_tschchartaxiscategoryshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  bool has_tschchartaxisvalueshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvalueshowmajorgridlines() const;
  public:
  void clear_tschchartaxisvalueshowmajorgridlines();
  bool tschchartaxisvalueshowmajorgridlines() const;
  void set_tschchartaxisvalueshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxisvalueshowmajorgridlines() const;
  void _internal_set_tschchartaxisvalueshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  bool has_tschchartaxiscategoryshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowmajortickmarks() const;
  public:
  void clear_tschchartaxiscategoryshowmajortickmarks();
  bool tschchartaxiscategoryshowmajortickmarks() const;
  void set_tschchartaxiscategoryshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowmajortickmarks() const;
  void _internal_set_tschchartaxiscategoryshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  bool has_tschchartaxisvalueshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxisvalueshowmajortickmarks() const;
  public:
  void clear_tschchartaxisvalueshowmajortickmarks();
  bool tschchartaxisvalueshowmajortickmarks() const;
  void set_tschchartaxisvalueshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxisvalueshowmajortickmarks() const;
  void _internal_set_tschchartaxisvalueshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  bool has_tschchartaxisvalueshowminimumlabel() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminimumlabel() const;
  public:
  void clear_tschchartaxisvalueshowminimumlabel();
  bool tschchartaxisvalueshowminimumlabel() const;
  void set_tschchartaxisvalueshowminimumlabel(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminimumlabel() const;
  void _internal_set_tschchartaxisvalueshowminimumlabel(bool value);
  public:

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  bool has_tschchartaxiscategoryshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowminorgridlines() const;
  public:
  void clear_tschchartaxiscategoryshowminorgridlines();
  bool tschchartaxiscategoryshowminorgridlines() const;
  void set_tschchartaxiscategoryshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowminorgridlines() const;
  void _internal_set_tschchartaxiscategoryshowminorgridlines(bool value);
  public:

  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  bool has_tschchartaxisvalueshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminorgridlines() const;
  public:
  void clear_tschchartaxisvalueshowminorgridlines();
  bool tschchartaxisvalueshowminorgridlines() const;
  void set_tschchartaxisvalueshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminorgridlines() const;
  void _internal_set_tschchartaxisvalueshowminorgridlines(bool value);
  public:

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  bool has_tschchartaxiscategoryshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowminortickmarks() const;
  public:
  void clear_tschchartaxiscategoryshowminortickmarks();
  bool tschchartaxiscategoryshowminortickmarks() const;
  void set_tschchartaxiscategoryshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowminortickmarks() const;
  void _internal_set_tschchartaxiscategoryshowminortickmarks(bool value);
  public:

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  bool has_tschchartaxisvalueshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxisvalueshowminortickmarks() const;
  public:
  void clear_tschchartaxisvalueshowminortickmarks();
  bool tschchartaxisvalueshowminortickmarks() const;
  void set_tschchartaxisvalueshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxisvalueshowminortickmarks() const;
  void _internal_set_tschchartaxisvalueshowminortickmarks(bool value);
  public:

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  bool has_tschchartaxiscategorytickmarklocation() const;
  private:
  bool _internal_has_tschchartaxiscategorytickmarklocation() const;
  public:
  void clear_tschchartaxiscategorytickmarklocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytickmarklocation() const;
  void set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategorytickmarklocation() const;
  void _internal_set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  bool has_tschchartaxisvaluetickmarklocation() const;
  private:
  bool _internal_has_tschchartaxisvaluetickmarklocation() const;
  public:
  void clear_tschchartaxisvaluetickmarklocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetickmarklocation() const;
  void set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluetickmarklocation() const;
  void _internal_set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  bool has_tschchartaxiscategorytitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxiscategorytitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxiscategorytitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytitleparagraphstyleindex() const;
  void set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategorytitleparagraphstyleindex() const;
  void _internal_set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  bool has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxisdefaulttitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaulttitleparagraphstyleindex() const;
  void set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefaulttitleparagraphstyleindex() const;
  void _internal_set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  bool has_tschchartaxisvaluetitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxisvaluetitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxisvaluetitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetitleparagraphstyleindex() const;
  void set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluetitleparagraphstyleindex() const;
  void _internal_set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  bool has_tschchartaxiscategoryverticalspacing() const;
  private:
  bool _internal_has_tschchartaxiscategoryverticalspacing() const;
  public:
  void clear_tschchartaxiscategoryverticalspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryverticalspacing() const;
  void set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxiscategoryverticalspacing() const;
  void _internal_set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow_;
  ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow_;
  ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke_;
  float tschchartaxiscategory3dgridlineopacity_;
  float tschchartaxisvalue3dgridlineopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryhorizontalspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorylabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluelabelparagraphstyleindex_;
  float tschchartaxiscategorylabelsorientation_;
  float tschchartaxisdefaultlabelsorientation_;
  float tschchartaxisvaluelabelsorientation_;
  float tschchartaxiscategorymajorgridlineopacity_;
  float tschchartaxisvaluemajorgridlineopacity_;
  float tschchartaxiscategoryminorgridlineopacity_;
  float tschchartaxisvalueminorgridlineopacity_;
  bool tschchartaxiscategoryshowaxis_;
  bool tschchartaxisvalueshowaxis_;
  bool tschchartaxiscategoryshowlastlabel_;
  bool tschchartaxiscategoryshowmajorgridlines_;
  bool tschchartaxisvalueshowmajorgridlines_;
  bool tschchartaxiscategoryshowmajortickmarks_;
  bool tschchartaxisvalueshowmajortickmarks_;
  bool tschchartaxisvalueshowminimumlabel_;
  bool tschchartaxiscategoryshowminorgridlines_;
  bool tschchartaxisvalueshowminorgridlines_;
  bool tschchartaxiscategoryshowminortickmarks_;
  bool tschchartaxisvalueshowminortickmarks_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytickmarklocation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetickmarklocation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategorytitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaulttitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluetitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxiscategoryverticalspacing_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartAxisNonStyleArchive) */ {
 public:
  inline ChartAxisNonStyleArchive() : ChartAxisNonStyleArchive(nullptr) {}
  ~ChartAxisNonStyleArchive() override;
  explicit constexpr ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from);
  ChartAxisNonStyleArchive(ChartAxisNonStyleArchive&& from) noexcept
    : ChartAxisNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisNonStyleArchive& operator=(const ChartAxisNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisNonStyleArchive& operator=(ChartAxisNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisNonStyleArchive*>(
               &_ChartAxisNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChartAxisNonStyleArchive& a, ChartAxisNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisNonStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartAxisNonStyleArchive* New() const final {
    return new ChartAxisNonStyleArchive();
  }

  ChartAxisNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartAxisNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartAxisNonStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartAxisNonStyleArchive";
  }
  protected:
  explicit ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartaxiscategorytitleFieldNumber = 15,
    kTschchartaxisvaluetitleFieldNumber = 16,
    kTschchartaxisdefault10NumberformatFieldNumber = 2,
    kTschchartaxisdefaultusermaxFieldNumber = 17,
    kTschchartaxisdefaultuserminFieldNumber = 18,
    kTschchartaxisdefault10DateformatFieldNumber = 20,
    kTschchartaxisdefaultdurationformatFieldNumber = 21,
    kTschchartaxisdefaultdateformatFieldNumber = 22,
    kTschchartaxisdefaultnumberformatFieldNumber = 42,
    kTschchartaxisdefault3DlabelpositionFieldNumber = 1,
    kTschchartaxisdefaultnumberformattypeFieldNumber = 3,
    kTschchartaxisvaluenumberofdecadesFieldNumber = 4,
    kTschchartaxisvaluenumberofmajorgridlinesFieldNumber = 5,
    kTschchartaxisvaluenumberofminorgridlinesFieldNumber = 6,
    kTschchartaxisvaluescaleFieldNumber = 8,
    kTschchartaxiscategoryplottoedgesFieldNumber = 7,
    kTschchartaxiscategoryshowlabelsFieldNumber = 9,
    kTschchartaxisdefaultshowlabelsFieldNumber = 10,
    kTschchartaxisvalueshowlabelsFieldNumber = 11,
    kTschchartaxiscategoryshowserieslabelsFieldNumber = 12,
    kTschchartaxismultidatashowserieslabelsFieldNumber = 19,
    kTschchartaxiscategoryshowtitleFieldNumber = 13,
    kTschchartaxisvalueshowtitleFieldNumber = 14,
  };
  // optional string tschchartaxiscategorytitle = 15;
  bool has_tschchartaxiscategorytitle() const;
  private:
  bool _internal_has_tschchartaxiscategorytitle() const;
  public:
  void clear_tschchartaxiscategorytitle();
  const std::string& tschchartaxiscategorytitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxiscategorytitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxiscategorytitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartaxiscategorytitle();
  void set_allocated_tschchartaxiscategorytitle(std::string* tschchartaxiscategorytitle);
  private:
  const std::string& _internal_tschchartaxiscategorytitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartaxiscategorytitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxiscategorytitle();
  public:

  // optional string tschchartaxisvaluetitle = 16;
  bool has_tschchartaxisvaluetitle() const;
  private:
  bool _internal_has_tschchartaxisvaluetitle() const;
  public:
  void clear_tschchartaxisvaluetitle();
  const std::string& tschchartaxisvaluetitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxisvaluetitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxisvaluetitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartaxisvaluetitle();
  void set_allocated_tschchartaxisvaluetitle(std::string* tschchartaxisvaluetitle);
  private:
  const std::string& _internal_tschchartaxisvaluetitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartaxisvaluetitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxisvaluetitle();
  public:

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
  bool has_tschchartaxisdefault1_0numberformat() const;
  private:
  bool _internal_has_tschchartaxisdefault1_0numberformat() const;
  public:
  void clear_tschchartaxisdefault1_0numberformat();
  const ::TSK::FormatStructArchive& tschchartaxisdefault1_0numberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdefault1_0numberformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdefault1_0numberformat();
  void set_allocated_tschchartaxisdefault1_0numberformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdefault1_0numberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdefault1_0numberformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefault1_0numberformat(
      ::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdefault1_0numberformat();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  bool has_tschchartaxisdefaultusermax() const;
  private:
  bool _internal_has_tschchartaxisdefaultusermax() const;
  public:
  void clear_tschchartaxisdefaultusermax();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermax();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermax();
  void set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisdefaultusermax() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisdefaultusermax();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultusermax(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisdefaultusermax();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  bool has_tschchartaxisdefaultusermin() const;
  private:
  bool _internal_has_tschchartaxisdefaultusermin() const;
  public:
  void clear_tschchartaxisdefaultusermin();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermin();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermin();
  void set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisdefaultusermin() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisdefaultusermin();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultusermin(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisdefaultusermin();

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
  bool has_tschchartaxisdefault1_0dateformat() const;
  private:
  bool _internal_has_tschchartaxisdefault1_0dateformat() const;
  public:
  void clear_tschchartaxisdefault1_0dateformat();
  const ::TSK::FormatStructArchive& tschchartaxisdefault1_0dateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdefault1_0dateformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdefault1_0dateformat();
  void set_allocated_tschchartaxisdefault1_0dateformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdefault1_0dateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdefault1_0dateformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefault1_0dateformat(
      ::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdefault1_0dateformat();

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
  bool has_tschchartaxisdefaultdurationformat() const;
  private:
  bool _internal_has_tschchartaxisdefaultdurationformat() const;
  public:
  void clear_tschchartaxisdefaultdurationformat();
  const ::TSK::FormatStructArchive& tschchartaxisdefaultdurationformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdefaultdurationformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultdurationformat();
  void set_allocated_tschchartaxisdefaultdurationformat(::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdefaultdurationformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdefaultdurationformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultdurationformat(
      ::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdefaultdurationformat();

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
  bool has_tschchartaxisdefaultdateformat() const;
  private:
  bool _internal_has_tschchartaxisdefaultdateformat() const;
  public:
  void clear_tschchartaxisdefaultdateformat();
  const ::TSK::FormatStructArchive& tschchartaxisdefaultdateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdefaultdateformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultdateformat();
  void set_allocated_tschchartaxisdefaultdateformat(::TSK::FormatStructArchive* tschchartaxisdefaultdateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdefaultdateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdefaultdateformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultdateformat(
      ::TSK::FormatStructArchive* tschchartaxisdefaultdateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdefaultdateformat();

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
  bool has_tschchartaxisdefaultnumberformat() const;
  private:
  bool _internal_has_tschchartaxisdefaultnumberformat() const;
  public:
  void clear_tschchartaxisdefaultnumberformat();
  const ::TSK::FormatStructArchive& tschchartaxisdefaultnumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdefaultnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultnumberformat();
  void set_allocated_tschchartaxisdefaultnumberformat(::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdefaultnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdefaultnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdefaultnumberformat(
      ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdefaultnumberformat();

  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  bool has_tschchartaxisdefault3dlabelposition() const;
  private:
  bool _internal_has_tschchartaxisdefault3dlabelposition() const;
  public:
  void clear_tschchartaxisdefault3dlabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefault3dlabelposition() const;
  void set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefault3dlabelposition() const;
  void _internal_set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  bool has_tschchartaxisdefaultnumberformattype() const;
  private:
  bool _internal_has_tschchartaxisdefaultnumberformattype() const;
  public:
  void clear_tschchartaxisdefaultnumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultnumberformattype() const;
  void set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisdefaultnumberformattype() const;
  void _internal_set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  bool has_tschchartaxisvaluenumberofdecades() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofdecades() const;
  public:
  void clear_tschchartaxisvaluenumberofdecades();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofdecades() const;
  void set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluenumberofdecades() const;
  void _internal_set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  bool has_tschchartaxisvaluenumberofmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofmajorgridlines() const;
  public:
  void clear_tschchartaxisvaluenumberofmajorgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofmajorgridlines() const;
  void set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluenumberofmajorgridlines() const;
  void _internal_set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  bool has_tschchartaxisvaluenumberofminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisvaluenumberofminorgridlines() const;
  public:
  void clear_tschchartaxisvaluenumberofminorgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofminorgridlines() const;
  void set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluenumberofminorgridlines() const;
  void _internal_set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisvaluescale = 8;
  bool has_tschchartaxisvaluescale() const;
  private:
  bool _internal_has_tschchartaxisvaluescale() const;
  public:
  void clear_tschchartaxisvaluescale();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluescale() const;
  void set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisvaluescale() const;
  void _internal_set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartaxiscategoryplottoedges = 7;
  bool has_tschchartaxiscategoryplottoedges() const;
  private:
  bool _internal_has_tschchartaxiscategoryplottoedges() const;
  public:
  void clear_tschchartaxiscategoryplottoedges();
  bool tschchartaxiscategoryplottoedges() const;
  void set_tschchartaxiscategoryplottoedges(bool value);
  private:
  bool _internal_tschchartaxiscategoryplottoedges() const;
  void _internal_set_tschchartaxiscategoryplottoedges(bool value);
  public:

  // optional bool tschchartaxiscategoryshowlabels = 9;
  bool has_tschchartaxiscategoryshowlabels() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowlabels() const;
  public:
  void clear_tschchartaxiscategoryshowlabels();
  bool tschchartaxiscategoryshowlabels() const;
  void set_tschchartaxiscategoryshowlabels(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowlabels() const;
  void _internal_set_tschchartaxiscategoryshowlabels(bool value);
  public:

  // optional bool tschchartaxisdefaultshowlabels = 10;
  bool has_tschchartaxisdefaultshowlabels() const;
  private:
  bool _internal_has_tschchartaxisdefaultshowlabels() const;
  public:
  void clear_tschchartaxisdefaultshowlabels();
  bool tschchartaxisdefaultshowlabels() const;
  void set_tschchartaxisdefaultshowlabels(bool value);
  private:
  bool _internal_tschchartaxisdefaultshowlabels() const;
  void _internal_set_tschchartaxisdefaultshowlabels(bool value);
  public:

  // optional bool tschchartaxisvalueshowlabels = 11;
  bool has_tschchartaxisvalueshowlabels() const;
  private:
  bool _internal_has_tschchartaxisvalueshowlabels() const;
  public:
  void clear_tschchartaxisvalueshowlabels();
  bool tschchartaxisvalueshowlabels() const;
  void set_tschchartaxisvalueshowlabels(bool value);
  private:
  bool _internal_tschchartaxisvalueshowlabels() const;
  void _internal_set_tschchartaxisvalueshowlabels(bool value);
  public:

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  bool has_tschchartaxiscategoryshowserieslabels() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowserieslabels() const;
  public:
  void clear_tschchartaxiscategoryshowserieslabels();
  bool tschchartaxiscategoryshowserieslabels() const;
  void set_tschchartaxiscategoryshowserieslabels(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowserieslabels() const;
  void _internal_set_tschchartaxiscategoryshowserieslabels(bool value);
  public:

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  bool has_tschchartaxismultidatashowserieslabels() const;
  private:
  bool _internal_has_tschchartaxismultidatashowserieslabels() const;
  public:
  void clear_tschchartaxismultidatashowserieslabels();
  bool tschchartaxismultidatashowserieslabels() const;
  void set_tschchartaxismultidatashowserieslabels(bool value);
  private:
  bool _internal_tschchartaxismultidatashowserieslabels() const;
  void _internal_set_tschchartaxismultidatashowserieslabels(bool value);
  public:

  // optional bool tschchartaxiscategoryshowtitle = 13;
  bool has_tschchartaxiscategoryshowtitle() const;
  private:
  bool _internal_has_tschchartaxiscategoryshowtitle() const;
  public:
  void clear_tschchartaxiscategoryshowtitle();
  bool tschchartaxiscategoryshowtitle() const;
  void set_tschchartaxiscategoryshowtitle(bool value);
  private:
  bool _internal_tschchartaxiscategoryshowtitle() const;
  void _internal_set_tschchartaxiscategoryshowtitle(bool value);
  public:

  // optional bool tschchartaxisvalueshowtitle = 14;
  bool has_tschchartaxisvalueshowtitle() const;
  private:
  bool _internal_has_tschchartaxisvalueshowtitle() const;
  public:
  void clear_tschchartaxisvalueshowtitle();
  bool tschchartaxisvalueshowtitle() const;
  void set_tschchartaxisvalueshowtitle(bool value);
  private:
  bool _internal_tschchartaxisvalueshowtitle() const;
  void _internal_set_tschchartaxisvalueshowtitle(bool value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxiscategorytitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxisvaluetitle_;
  ::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin_;
  ::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat_;
  ::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat_;
  ::TSK::FormatStructArchive* tschchartaxisdefaultdateformat_;
  ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefault3dlabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisdefaultnumberformattype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofdecades_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofmajorgridlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluenumberofminorgridlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisvaluescale_;
  bool tschchartaxiscategoryplottoedges_;
  bool tschchartaxiscategoryshowlabels_;
  bool tschchartaxisdefaultshowlabels_;
  bool tschchartaxisvalueshowlabels_;
  bool tschchartaxiscategoryshowserieslabels_;
  bool tschchartaxismultidatashowserieslabels_;
  bool tschchartaxiscategoryshowtitle_;
  bool tschchartaxisvalueshowtitle_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartSeriesStyleArchive) */ {
 public:
  inline ChartSeriesStyleArchive() : ChartSeriesStyleArchive(nullptr) {}
  ~ChartSeriesStyleArchive() override;
  explicit constexpr ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from);
  ChartSeriesStyleArchive(ChartSeriesStyleArchive&& from) noexcept
    : ChartSeriesStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesStyleArchive& operator=(const ChartSeriesStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesStyleArchive& operator=(ChartSeriesStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesStyleArchive*>(
               &_ChartSeriesStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChartSeriesStyleArchive& a, ChartSeriesStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSeriesStyleArchive* New() const final {
    return new ChartSeriesStyleArchive();
  }

  ChartSeriesStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSeriesStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSeriesStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartSeriesStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartSeriesStyleArchive";
  }
  protected:
  explicit ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartseriesdefaulterrorbarlineendFieldNumber = 1,
    kTschchartseriesdefaulterrorbarlineendscatterxFieldNumber = 2,
    kTschchartseriesdefaulterrorbarshadowFieldNumber = 3,
    kTschchartseriesdefaulterrorbarstrokeFieldNumber = 4,
    kTschchartseriesdefaulterrorbarstrokescatterxFieldNumber = 5,
    kTschchartseries3DareafillFieldNumber = 6,
    kTschchartseries3DbarfillFieldNumber = 7,
    kTschchartseries3DcolumnfillFieldNumber = 8,
    kTschchartseries3DlinefillFieldNumber = 9,
    kTschchartseries3DpiefillFieldNumber = 10,
    kTschchartseriesareafillFieldNumber = 11,
    kTschchartseriesbarfillFieldNumber = 12,
    kTschchartseriescolumnfillFieldNumber = 13,
    kTschchartseriesdefaultfillFieldNumber = 14,
    kTschchartseriesmixedareafillFieldNumber = 15,
    kTschchartseriesmixedcolumnfillFieldNumber = 16,
    kTschchartseriespiefillFieldNumber = 17,
    kTschchartseries3DareashadowFieldNumber = 30,
    kTschchartseries3DbarshadowFieldNumber = 31,
    kTschchartseries3DcolumnshadowFieldNumber = 32,
    kTschchartseries3DlineshadowFieldNumber = 33,
    kTschchartseries3DpieshadowFieldNumber = 34,
    kTschchartseriesareashadowFieldNumber = 35,
    kTschchartseriesbarshadowFieldNumber = 36,
    kTschchartseriesbubbleshadowFieldNumber = 37,
    kTschchartseriesdefaultshadowFieldNumber = 38,
    kTschchartserieslineshadowFieldNumber = 39,
    kTschchartseriesmixedareashadowFieldNumber = 40,
    kTschchartseriesmixedcolumnshadowFieldNumber = 41,
    kTschchartseriesmixedlineshadowFieldNumber = 42,
    kTschchartseriespieshadowFieldNumber = 43,
    kTschchartseriesscattershadowFieldNumber = 44,
    kTschchartseriesareastrokeFieldNumber = 45,
    kTschchartseriesbarstrokeFieldNumber = 46,
    kTschchartseriesbubblestrokeFieldNumber = 47,
    kTschchartserieslinestrokeFieldNumber = 48,
    kTschchartseriesmixedareastrokeFieldNumber = 49,
    kTschchartseriesmixedcolumnstrokeFieldNumber = 50,
    kTschchartseriesmixedlinestrokeFieldNumber = 51,
    kTschchartseriespiestrokeFieldNumber = 52,
    kTschchartseriesscatterstrokeFieldNumber = 53,
    kTschchartseriesareasymbolfillFieldNumber = 54,
    kTschchartseriesbubblesymbolfillFieldNumber = 55,
    kTschchartserieslinesymbolfillFieldNumber = 56,
    kTschchartseriesmixedareasymbolfillFieldNumber = 57,
    kTschchartseriesmixedlinesymbolfillFieldNumber = 58,
    kTschchartseriesscattersymbolfillFieldNumber = 59,
    kTschchartseriesareasymbolstrokeFieldNumber = 75,
    kTschchartseriesbubblesymbolstrokeFieldNumber = 76,
    kTschchartserieslinesymbolstrokeFieldNumber = 77,
    kTschchartseriesmixedareasymbolstrokeFieldNumber = 78,
    kTschchartseriesmixedlinesymbolstrokeFieldNumber = 79,
    kTschchartseriesscattersymbolstrokeFieldNumber = 80,
    kTschchartseriesdefaulttrendlineshadowFieldNumber = 85,
    kTschchartseriesdefaulttrendlinestrokeFieldNumber = 86,
    kTschchartseriesdefaultcalloutlinestrokestyleFieldNumber = 128,
    kTschchartseriesdefaultcalloutlinestartlineendFieldNumber = 129,
    kTschchartseriesdefaultcalloutlineendlineendFieldNumber = 130,
    kTschchartseriesarealabelparagraphstyleindexFieldNumber = 18,
    kTschchartseriesbarlabelparagraphstyleindexFieldNumber = 19,
    kTschchartseriesdefaultlabelparagraphstyleindexFieldNumber = 20,
    kTschchartserieslinelabelparagraphstyleindexFieldNumber = 21,
    kTschchartseriesmixedlabelparagraphstyleindexFieldNumber = 22,
    kTschchartseriespielabelparagraphstyleindexFieldNumber = 23,
    kTschchartseriesdefaultopacityFieldNumber = 24,
    kTschchartseriesareaoutsidelabelparagraphstyleindexFieldNumber = 25,
    kTschchartseriesbaroutsidelabelparagraphstyleindexFieldNumber = 26,
    kTschchartseriesdefaultoutsidelabelparagraphstyleindexFieldNumber = 27,
    kTschchartseriesmixedoutsidelabelparagraphstyleindexFieldNumber = 28,
    kTschchartseriespieoutsidelabelparagraphstyleindexFieldNumber = 29,
    kTschchartseriesareasymbolfilluseseriesfillFieldNumber = 60,
    kTschchartserieslinesymbolfilluseseriesfillFieldNumber = 61,
    kTschchartseriesmixedareasymbolfilluseseriesfillFieldNumber = 62,
    kTschchartseriesmixedlinesymbolfilluseseriesfillFieldNumber = 63,
    kTschchartseriesareasymbolfilluseseriesstrokeFieldNumber = 64,
    kTschchartseriesbubblesymbolfilluseseriesstrokeFieldNumber = 65,
    kTschchartserieslinesymbolfilluseseriesstrokeFieldNumber = 66,
    kTschchartseriesmixedareasymbolfilluseseriesstrokeFieldNumber = 67,
    kTschchartseriesmixedlinesymbolfilluseseriesstrokeFieldNumber = 68,
    kTschchartseriesscattersymbolfilluseseriesstrokeFieldNumber = 69,
    kTschchartseriesareasymbolsizeFieldNumber = 70,
    kTschchartserieslinesymbolsizeFieldNumber = 71,
    kTschchartseriesmixedareasymbolsizeFieldNumber = 72,
    kTschchartseriesmixedlinesymbolsizeFieldNumber = 73,
    kTschchartseriesscattersymbolsizeFieldNumber = 74,
    kTschchartseriesdefaulttrendlineequationopacityFieldNumber = 81,
    kTschchartseriesdefaulttrendlineequationparagraphstyleindexFieldNumber = 82,
    kTschchartseriesdefaulttrendlinersquaredopacityFieldNumber = 83,
    kTschchartseriesdefaulttrendlinersquaredparagraphstyleindexFieldNumber = 84,
    kTschchartseriesareavaluelabelpositionFieldNumber = 87,
    kTschchartseriesbarvaluelabelpositionFieldNumber = 88,
    kTschchartseriesbubblevaluelabelpositionFieldNumber = 89,
    kTschchartseriesdefaultvaluelabelpositionFieldNumber = 90,
    kTschchartserieslinevaluelabelpositionFieldNumber = 91,
    kTschchartseriesmixedareavaluelabelpositionFieldNumber = 92,
    kTschchartseriesmixedcolumnvaluelabelpositionFieldNumber = 93,
    kTschchartseriesmixedlinevaluelabelpositionFieldNumber = 94,
    kTschchartseriesscattervaluelabelpositionFieldNumber = 95,
    kTschchartseriesstackedareavaluelabelpositionFieldNumber = 96,
    kTschchartseriesstackedbarvaluelabelpositionFieldNumber = 97,
    kTschchartseriesdefaulterrorbarspacingFieldNumber = 98,
    kTschchartseriesdefaulterrorbarspacingscatterxFieldNumber = 99,
    kTschchartseriesdefaultvaluelabelspacingFieldNumber = 100,
    kTschchartseriesdonutlabelparagraphstyleindexFieldNumber = 152,
    kTschchartseriesdonutoutsidelabelparagraphstyleindexFieldNumber = 153,
  };
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  bool has_tschchartseriesdefaulterrorbarlineend() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarlineend() const;
  public:
  void clear_tschchartseriesdefaulterrorbarlineend();
  const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineend();
  void set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaulterrorbarlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaulterrorbarlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineend(
      ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarlineend();

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  bool has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarlineendscatterx();
  const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineendscatterx();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  void set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaulterrorbarlineendscatterx() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(
      ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarlineendscatterx();

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  bool has_tschchartseriesdefaulterrorbarshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarshadow() const;
  public:
  void clear_tschchartseriesdefaulterrorbarshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesdefaulterrorbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaulterrorbarshadow();
  void set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaulterrorbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaulterrorbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarshadow();

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  bool has_tschchartseriesdefaulterrorbarstroke() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstroke() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstroke();
  const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstroke();
  void set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulterrorbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulterrorbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstroke(
      ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarstroke();

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  bool has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstrokescatterx();
  const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstrokescatterx();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  void set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulterrorbarstrokescatterx() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(
      ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarstrokescatterx();

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  bool has_tschchartseries3dareafill() const;
  private:
  bool _internal_has_tschchartseries3dareafill() const;
  public:
  void clear_tschchartseries3dareafill();
  const ::TSD::FillArchive& tschchartseries3dareafill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dareafill();
  ::TSD::FillArchive* mutable_tschchartseries3dareafill();
  void set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dareafill(
      ::TSD::FillArchive* tschchartseries3dareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dareafill();

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  bool has_tschchartseries3dbarfill() const;
  private:
  bool _internal_has_tschchartseries3dbarfill() const;
  public:
  void clear_tschchartseries3dbarfill();
  const ::TSD::FillArchive& tschchartseries3dbarfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dbarfill();
  ::TSD::FillArchive* mutable_tschchartseries3dbarfill();
  void set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dbarfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dbarfill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dbarfill(
      ::TSD::FillArchive* tschchartseries3dbarfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dbarfill();

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  bool has_tschchartseries3dcolumnfill() const;
  private:
  bool _internal_has_tschchartseries3dcolumnfill() const;
  public:
  void clear_tschchartseries3dcolumnfill();
  const ::TSD::FillArchive& tschchartseries3dcolumnfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dcolumnfill();
  ::TSD::FillArchive* mutable_tschchartseries3dcolumnfill();
  void set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dcolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dcolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dcolumnfill(
      ::TSD::FillArchive* tschchartseries3dcolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dcolumnfill();

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  bool has_tschchartseries3dlinefill() const;
  private:
  bool _internal_has_tschchartseries3dlinefill() const;
  public:
  void clear_tschchartseries3dlinefill();
  const ::TSD::FillArchive& tschchartseries3dlinefill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dlinefill();
  ::TSD::FillArchive* mutable_tschchartseries3dlinefill();
  void set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dlinefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dlinefill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dlinefill(
      ::TSD::FillArchive* tschchartseries3dlinefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dlinefill();

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  bool has_tschchartseries3dpiefill() const;
  private:
  bool _internal_has_tschchartseries3dpiefill() const;
  public:
  void clear_tschchartseries3dpiefill();
  const ::TSD::FillArchive& tschchartseries3dpiefill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseries3dpiefill();
  ::TSD::FillArchive* mutable_tschchartseries3dpiefill();
  void set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseries3dpiefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseries3dpiefill();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dpiefill(
      ::TSD::FillArchive* tschchartseries3dpiefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseries3dpiefill();

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  bool has_tschchartseriesareafill() const;
  private:
  bool _internal_has_tschchartseriesareafill() const;
  public:
  void clear_tschchartseriesareafill();
  const ::TSD::FillArchive& tschchartseriesareafill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesareafill();
  ::TSD::FillArchive* mutable_tschchartseriesareafill();
  void set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareafill(
      ::TSD::FillArchive* tschchartseriesareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesareafill();

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  bool has_tschchartseriesbarfill() const;
  private:
  bool _internal_has_tschchartseriesbarfill() const;
  public:
  void clear_tschchartseriesbarfill();
  const ::TSD::FillArchive& tschchartseriesbarfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesbarfill();
  ::TSD::FillArchive* mutable_tschchartseriesbarfill();
  void set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesbarfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesbarfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarfill(
      ::TSD::FillArchive* tschchartseriesbarfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesbarfill();

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  bool has_tschchartseriescolumnfill() const;
  private:
  bool _internal_has_tschchartseriescolumnfill() const;
  public:
  void clear_tschchartseriescolumnfill();
  const ::TSD::FillArchive& tschchartseriescolumnfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriescolumnfill();
  ::TSD::FillArchive* mutable_tschchartseriescolumnfill();
  void set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriescolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriescolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriescolumnfill(
      ::TSD::FillArchive* tschchartseriescolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriescolumnfill();

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  bool has_tschchartseriesdefaultfill() const;
  private:
  bool _internal_has_tschchartseriesdefaultfill() const;
  public:
  void clear_tschchartseriesdefaultfill();
  const ::TSD::FillArchive& tschchartseriesdefaultfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesdefaultfill();
  ::TSD::FillArchive* mutable_tschchartseriesdefaultfill();
  void set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesdefaultfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesdefaultfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultfill(
      ::TSD::FillArchive* tschchartseriesdefaultfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesdefaultfill();

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  bool has_tschchartseriesmixedareafill() const;
  private:
  bool _internal_has_tschchartseriesmixedareafill() const;
  public:
  void clear_tschchartseriesmixedareafill();
  const ::TSD::FillArchive& tschchartseriesmixedareafill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedareafill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedareafill();
  void set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedareafill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedareafill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareafill(
      ::TSD::FillArchive* tschchartseriesmixedareafill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedareafill();

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  bool has_tschchartseriesmixedcolumnfill() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnfill() const;
  public:
  void clear_tschchartseriesmixedcolumnfill();
  const ::TSD::FillArchive& tschchartseriesmixedcolumnfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedcolumnfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedcolumnfill();
  void set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedcolumnfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedcolumnfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnfill(
      ::TSD::FillArchive* tschchartseriesmixedcolumnfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedcolumnfill();

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  bool has_tschchartseriespiefill() const;
  private:
  bool _internal_has_tschchartseriespiefill() const;
  public:
  void clear_tschchartseriespiefill();
  const ::TSD::FillArchive& tschchartseriespiefill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriespiefill();
  ::TSD::FillArchive* mutable_tschchartseriespiefill();
  void set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriespiefill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriespiefill();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiefill(
      ::TSD::FillArchive* tschchartseriespiefill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriespiefill();

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  bool has_tschchartseries3dareashadow() const;
  private:
  bool _internal_has_tschchartseries3dareashadow() const;
  public:
  void clear_tschchartseries3dareashadow();
  const ::TSD::ShadowArchive& tschchartseries3dareashadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dareashadow();
  void set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dareashadow(
      ::TSD::ShadowArchive* tschchartseries3dareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dareashadow();

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  bool has_tschchartseries3dbarshadow() const;
  private:
  bool _internal_has_tschchartseries3dbarshadow() const;
  public:
  void clear_tschchartseries3dbarshadow();
  const ::TSD::ShadowArchive& tschchartseries3dbarshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dbarshadow();
  void set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dbarshadow(
      ::TSD::ShadowArchive* tschchartseries3dbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dbarshadow();

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  bool has_tschchartseries3dcolumnshadow() const;
  private:
  bool _internal_has_tschchartseries3dcolumnshadow() const;
  public:
  void clear_tschchartseries3dcolumnshadow();
  const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dcolumnshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dcolumnshadow();
  void set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dcolumnshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dcolumnshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dcolumnshadow(
      ::TSD::ShadowArchive* tschchartseries3dcolumnshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dcolumnshadow();

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  bool has_tschchartseries3dlineshadow() const;
  private:
  bool _internal_has_tschchartseries3dlineshadow() const;
  public:
  void clear_tschchartseries3dlineshadow();
  const ::TSD::ShadowArchive& tschchartseries3dlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dlineshadow();
  void set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dlineshadow(
      ::TSD::ShadowArchive* tschchartseries3dlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dlineshadow();

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  bool has_tschchartseries3dpieshadow() const;
  private:
  bool _internal_has_tschchartseries3dpieshadow() const;
  public:
  void clear_tschchartseries3dpieshadow();
  const ::TSD::ShadowArchive& tschchartseries3dpieshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseries3dpieshadow();
  ::TSD::ShadowArchive* mutable_tschchartseries3dpieshadow();
  void set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseries3dpieshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseries3dpieshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseries3dpieshadow(
      ::TSD::ShadowArchive* tschchartseries3dpieshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseries3dpieshadow();

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  bool has_tschchartseriesareashadow() const;
  private:
  bool _internal_has_tschchartseriesareashadow() const;
  public:
  void clear_tschchartseriesareashadow();
  const ::TSD::ShadowArchive& tschchartseriesareashadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesareashadow();
  void set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareashadow(
      ::TSD::ShadowArchive* tschchartseriesareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesareashadow();

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  bool has_tschchartseriesbarshadow() const;
  private:
  bool _internal_has_tschchartseriesbarshadow() const;
  public:
  void clear_tschchartseriesbarshadow();
  const ::TSD::ShadowArchive& tschchartseriesbarshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesbarshadow();
  void set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarshadow(
      ::TSD::ShadowArchive* tschchartseriesbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesbarshadow();

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  bool has_tschchartseriesbubbleshadow() const;
  private:
  bool _internal_has_tschchartseriesbubbleshadow() const;
  public:
  void clear_tschchartseriesbubbleshadow();
  const ::TSD::ShadowArchive& tschchartseriesbubbleshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesbubbleshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesbubbleshadow();
  void set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesbubbleshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesbubbleshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubbleshadow(
      ::TSD::ShadowArchive* tschchartseriesbubbleshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesbubbleshadow();

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  bool has_tschchartseriesdefaultshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaultshadow() const;
  public:
  void clear_tschchartseriesdefaultshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaultshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesdefaultshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaultshadow();
  void set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaultshadow();

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  bool has_tschchartserieslineshadow() const;
  private:
  bool _internal_has_tschchartserieslineshadow() const;
  public:
  void clear_tschchartserieslineshadow();
  const ::TSD::ShadowArchive& tschchartserieslineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartserieslineshadow();
  ::TSD::ShadowArchive* mutable_tschchartserieslineshadow();
  void set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartserieslineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartserieslineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartserieslineshadow(
      ::TSD::ShadowArchive* tschchartserieslineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartserieslineshadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  bool has_tschchartseriesmixedareashadow() const;
  private:
  bool _internal_has_tschchartseriesmixedareashadow() const;
  public:
  void clear_tschchartseriesmixedareashadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedareashadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesmixedareashadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedareashadow();
  void set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedareashadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedareashadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareashadow(
      ::TSD::ShadowArchive* tschchartseriesmixedareashadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedareashadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  bool has_tschchartseriesmixedcolumnshadow() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnshadow() const;
  public:
  void clear_tschchartseriesmixedcolumnshadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesmixedcolumnshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedcolumnshadow();
  void set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedcolumnshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedcolumnshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnshadow(
      ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedcolumnshadow();

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  bool has_tschchartseriesmixedlineshadow() const;
  private:
  bool _internal_has_tschchartseriesmixedlineshadow() const;
  public:
  void clear_tschchartseriesmixedlineshadow();
  const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesmixedlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesmixedlineshadow();
  void set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesmixedlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesmixedlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlineshadow(
      ::TSD::ShadowArchive* tschchartseriesmixedlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesmixedlineshadow();

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  bool has_tschchartseriespieshadow() const;
  private:
  bool _internal_has_tschchartseriespieshadow() const;
  public:
  void clear_tschchartseriespieshadow();
  const ::TSD::ShadowArchive& tschchartseriespieshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriespieshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriespieshadow();
  void set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriespieshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriespieshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriespieshadow(
      ::TSD::ShadowArchive* tschchartseriespieshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriespieshadow();

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  bool has_tschchartseriesscattershadow() const;
  private:
  bool _internal_has_tschchartseriesscattershadow() const;
  public:
  void clear_tschchartseriesscattershadow();
  const ::TSD::ShadowArchive& tschchartseriesscattershadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesscattershadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesscattershadow();
  void set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesscattershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesscattershadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattershadow(
      ::TSD::ShadowArchive* tschchartseriesscattershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesscattershadow();

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  bool has_tschchartseriesareastroke() const;
  private:
  bool _internal_has_tschchartseriesareastroke() const;
  public:
  void clear_tschchartseriesareastroke();
  const ::TSD::StrokeArchive& tschchartseriesareastroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesareastroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesareastroke();
  void set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesareastroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesareastroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareastroke(
      ::TSD::StrokeArchive* tschchartseriesareastroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesareastroke();

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  bool has_tschchartseriesbarstroke() const;
  private:
  bool _internal_has_tschchartseriesbarstroke() const;
  public:
  void clear_tschchartseriesbarstroke();
  const ::TSD::StrokeArchive& tschchartseriesbarstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbarstroke();
  void set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbarstroke(
      ::TSD::StrokeArchive* tschchartseriesbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbarstroke();

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  bool has_tschchartseriesbubblestroke() const;
  private:
  bool _internal_has_tschchartseriesbubblestroke() const;
  public:
  void clear_tschchartseriesbubblestroke();
  const ::TSD::StrokeArchive& tschchartseriesbubblestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesbubblestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbubblestroke();
  void set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbubblestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbubblestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblestroke(
      ::TSD::StrokeArchive* tschchartseriesbubblestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbubblestroke();

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  bool has_tschchartserieslinestroke() const;
  private:
  bool _internal_has_tschchartserieslinestroke() const;
  public:
  void clear_tschchartserieslinestroke();
  const ::TSD::StrokeArchive& tschchartserieslinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartserieslinestroke();
  ::TSD::StrokeArchive* mutable_tschchartserieslinestroke();
  void set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieslinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieslinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinestroke(
      ::TSD::StrokeArchive* tschchartserieslinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieslinestroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  bool has_tschchartseriesmixedareastroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareastroke() const;
  public:
  void clear_tschchartseriesmixedareastroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedareastroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedareastroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedareastroke();
  void set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedareastroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedareastroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareastroke(
      ::TSD::StrokeArchive* tschchartseriesmixedareastroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedareastroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  bool has_tschchartseriesmixedcolumnstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnstroke() const;
  public:
  void clear_tschchartseriesmixedcolumnstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedcolumnstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedcolumnstroke();
  void set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedcolumnstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedcolumnstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedcolumnstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedcolumnstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  bool has_tschchartseriesmixedlinestroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinestroke() const;
  public:
  void clear_tschchartseriesmixedlinestroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinestroke();
  void set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinestroke(
      ::TSD::StrokeArchive* tschchartseriesmixedlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedlinestroke();

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  bool has_tschchartseriespiestroke() const;
  private:
  bool _internal_has_tschchartseriespiestroke() const;
  public:
  void clear_tschchartseriespiestroke();
  const ::TSD::StrokeArchive& tschchartseriespiestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriespiestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriespiestroke();
  void set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriespiestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriespiestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriespiestroke(
      ::TSD::StrokeArchive* tschchartseriespiestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriespiestroke();

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  bool has_tschchartseriesscatterstroke() const;
  private:
  bool _internal_has_tschchartseriesscatterstroke() const;
  public:
  void clear_tschchartseriesscatterstroke();
  const ::TSD::StrokeArchive& tschchartseriesscatterstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesscatterstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesscatterstroke();
  void set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesscatterstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesscatterstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscatterstroke(
      ::TSD::StrokeArchive* tschchartseriesscatterstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesscatterstroke();

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  bool has_tschchartseriesareasymbolfill() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfill() const;
  public:
  void clear_tschchartseriesareasymbolfill();
  const ::TSD::FillArchive& tschchartseriesareasymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesareasymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesareasymbolfill();
  void set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesareasymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesareasymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareasymbolfill(
      ::TSD::FillArchive* tschchartseriesareasymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesareasymbolfill();

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  bool has_tschchartseriesbubblesymbolfill() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolfill() const;
  public:
  void clear_tschchartseriesbubblesymbolfill();
  const ::TSD::FillArchive& tschchartseriesbubblesymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesbubblesymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesbubblesymbolfill();
  void set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesbubblesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesbubblesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblesymbolfill(
      ::TSD::FillArchive* tschchartseriesbubblesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesbubblesymbolfill();

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  bool has_tschchartserieslinesymbolfill() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfill() const;
  public:
  void clear_tschchartserieslinesymbolfill();
  const ::TSD::FillArchive& tschchartserieslinesymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartserieslinesymbolfill();
  ::TSD::FillArchive* mutable_tschchartserieslinesymbolfill();
  void set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartserieslinesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartserieslinesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinesymbolfill(
      ::TSD::FillArchive* tschchartserieslinesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartserieslinesymbolfill();

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  bool has_tschchartseriesmixedareasymbolfill() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfill() const;
  public:
  void clear_tschchartseriesmixedareasymbolfill();
  const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedareasymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedareasymbolfill();
  void set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedareasymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedareasymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareasymbolfill(
      ::TSD::FillArchive* tschchartseriesmixedareasymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedareasymbolfill();

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  bool has_tschchartseriesmixedlinesymbolfill() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfill() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfill();
  const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesmixedlinesymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesmixedlinesymbolfill();
  void set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesmixedlinesymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesmixedlinesymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolfill(
      ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesmixedlinesymbolfill();

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  bool has_tschchartseriesscattersymbolfill() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolfill() const;
  public:
  void clear_tschchartseriesscattersymbolfill();
  const ::TSD::FillArchive& tschchartseriesscattersymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesscattersymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriesscattersymbolfill();
  void set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesscattersymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesscattersymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattersymbolfill(
      ::TSD::FillArchive* tschchartseriesscattersymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesscattersymbolfill();

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  bool has_tschchartseriesareasymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesareasymbolstroke() const;
  public:
  void clear_tschchartseriesareasymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesareasymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesareasymbolstroke();
  void set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesareasymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesareasymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesareasymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesareasymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesareasymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  bool has_tschchartseriesbubblesymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolstroke() const;
  public:
  void clear_tschchartseriesbubblesymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesbubblesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesbubblesymbolstroke();
  void set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesbubblesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesbubblesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesbubblesymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesbubblesymbolstroke();

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  bool has_tschchartserieslinesymbolstroke() const;
  private:
  bool _internal_has_tschchartserieslinesymbolstroke() const;
  public:
  void clear_tschchartserieslinesymbolstroke();
  const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartserieslinesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartserieslinesymbolstroke();
  void set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieslinesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieslinesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieslinesymbolstroke(
      ::TSD::StrokeArchive* tschchartserieslinesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieslinesymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  bool has_tschchartseriesmixedareasymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolstroke() const;
  public:
  void clear_tschchartseriesmixedareasymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedareasymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedareasymbolstroke();
  void set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedareasymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedareasymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedareasymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedareasymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  bool has_tschchartseriesmixedlinesymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolstroke() const;
  public:
  void clear_tschchartseriesmixedlinesymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesmixedlinesymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinesymbolstroke();
  void set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesmixedlinesymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesmixedlinesymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesmixedlinesymbolstroke();

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  bool has_tschchartseriesscattersymbolstroke() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolstroke() const;
  public:
  void clear_tschchartseriesscattersymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesscattersymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesscattersymbolstroke();
  void set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesscattersymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesscattersymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesscattersymbolstroke(
      ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesscattersymbolstroke();

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  bool has_tschchartseriesdefaulttrendlineshadow() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshadow() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshadow();
  const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesdefaulttrendlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesdefaulttrendlineshadow();
  void set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesdefaulttrendlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesdefaulttrendlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulttrendlineshadow(
      ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesdefaulttrendlineshadow();

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  bool has_tschchartseriesdefaulttrendlinestroke() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinestroke() const;
  public:
  void clear_tschchartseriesdefaulttrendlinestroke();
  const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaulttrendlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaulttrendlinestroke();
  void set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaulttrendlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaulttrendlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulttrendlinestroke(
      ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaulttrendlinestroke();

  // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
  bool has_tschchartseriesdefaultcalloutlinestrokestyle() const;
  private:
  bool _internal_has_tschchartseriesdefaultcalloutlinestrokestyle() const;
  public:
  void clear_tschchartseriesdefaultcalloutlinestrokestyle();
  const ::TSD::StrokeArchive& tschchartseriesdefaultcalloutlinestrokestyle() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesdefaultcalloutlinestrokestyle();
  ::TSD::StrokeArchive* mutable_tschchartseriesdefaultcalloutlinestrokestyle();
  void set_allocated_tschchartseriesdefaultcalloutlinestrokestyle(::TSD::StrokeArchive* tschchartseriesdefaultcalloutlinestrokestyle);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesdefaultcalloutlinestrokestyle() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultcalloutlinestrokestyle(
      ::TSD::StrokeArchive* tschchartseriesdefaultcalloutlinestrokestyle);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesdefaultcalloutlinestrokestyle();

  // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
  bool has_tschchartseriesdefaultcalloutlinestartlineend() const;
  private:
  bool _internal_has_tschchartseriesdefaultcalloutlinestartlineend() const;
  public:
  void clear_tschchartseriesdefaultcalloutlinestartlineend();
  const ::TSD::LineEndArchive& tschchartseriesdefaultcalloutlinestartlineend() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriesdefaultcalloutlinestartlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaultcalloutlinestartlineend();
  void set_allocated_tschchartseriesdefaultcalloutlinestartlineend(::TSD::LineEndArchive* tschchartseriesdefaultcalloutlinestartlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaultcalloutlinestartlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaultcalloutlinestartlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultcalloutlinestartlineend(
      ::TSD::LineEndArchive* tschchartseriesdefaultcalloutlinestartlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaultcalloutlinestartlineend();

  // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
  bool has_tschchartseriesdefaultcalloutlineendlineend() const;
  private:
  bool _internal_has_tschchartseriesdefaultcalloutlineendlineend() const;
  public:
  void clear_tschchartseriesdefaultcalloutlineendlineend();
  const ::TSD::LineEndArchive& tschchartseriesdefaultcalloutlineendlineend() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriesdefaultcalloutlineendlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriesdefaultcalloutlineendlineend();
  void set_allocated_tschchartseriesdefaultcalloutlineendlineend(::TSD::LineEndArchive* tschchartseriesdefaultcalloutlineendlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriesdefaultcalloutlineendlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriesdefaultcalloutlineendlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultcalloutlineendlineend(
      ::TSD::LineEndArchive* tschchartseriesdefaultcalloutlineendlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriesdefaultcalloutlineendlineend();

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  bool has_tschchartseriesarealabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesarealabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesarealabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesarealabelparagraphstyleindex() const;
  void set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesarealabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  bool has_tschchartseriesbarlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesbarlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesbarlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarlabelparagraphstyleindex() const;
  void set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbarlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  bool has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultlabelparagraphstyleindex() const;
  void set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  bool has_tschchartserieslinelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartserieslinelabelparagraphstyleindex() const;
  public:
  void clear_tschchartserieslinelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelabelparagraphstyleindex() const;
  void set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinelabelparagraphstyleindex() const;
  void _internal_set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  bool has_tschchartseriesmixedlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesmixedlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesmixedlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlabelparagraphstyleindex() const;
  void set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  bool has_tschchartseriespielabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriespielabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriespielabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespielabelparagraphstyleindex() const;
  void set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespielabelparagraphstyleindex() const;
  void _internal_set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaultopacity = 24;
  bool has_tschchartseriesdefaultopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaultopacity() const;
  public:
  void clear_tschchartseriesdefaultopacity();
  float tschchartseriesdefaultopacity() const;
  void set_tschchartseriesdefaultopacity(float value);
  private:
  float _internal_tschchartseriesdefaultopacity() const;
  void _internal_set_tschchartseriesdefaultopacity(float value);
  public:

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  bool has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesareaoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  bool has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesbaroutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  bool has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  bool has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  bool has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriespieoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespieoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  bool has_tschchartseriesareasymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesareasymbolfilluseseriesfill();
  bool tschchartseriesareasymbolfilluseseriesfill() const;
  void set_tschchartseriesareasymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesareasymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesareasymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  bool has_tschchartserieslinesymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfilluseseriesfill() const;
  public:
  void clear_tschchartserieslinesymbolfilluseseriesfill();
  bool tschchartserieslinesymbolfilluseseriesfill() const;
  void set_tschchartserieslinesymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartserieslinesymbolfilluseseriesfill() const;
  void _internal_set_tschchartserieslinesymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  bool has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesmixedareasymbolfilluseseriesfill();
  bool tschchartseriesmixedareasymbolfilluseseriesfill() const;
  void set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  bool has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfilluseseriesfill();
  bool tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  void set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  bool has_tschchartseriesareasymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesareasymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesareasymbolfilluseseriesstroke();
  bool tschchartseriesareasymbolfilluseseriesstroke() const;
  void set_tschchartseriesareasymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesareasymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesareasymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  bool has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesbubblesymbolfilluseseriesstroke();
  bool tschchartseriesbubblesymbolfilluseseriesstroke() const;
  void set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  bool has_tschchartserieslinesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartserieslinesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartserieslinesymbolfilluseseriesstroke();
  bool tschchartserieslinesymbolfilluseseriesstroke() const;
  void set_tschchartserieslinesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartserieslinesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartserieslinesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  bool has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesmixedareasymbolfilluseseriesstroke();
  bool tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  void set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  bool has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  bool tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  void set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);
  public:

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  bool has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriesscattersymbolfilluseseriesstroke();
  bool tschchartseriesscattersymbolfilluseseriesstroke() const;
  void set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriesscattersymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);
  public:

  // optional float tschchartseriesareasymbolsize = 70;
  bool has_tschchartseriesareasymbolsize() const;
  private:
  bool _internal_has_tschchartseriesareasymbolsize() const;
  public:
  void clear_tschchartseriesareasymbolsize();
  float tschchartseriesareasymbolsize() const;
  void set_tschchartseriesareasymbolsize(float value);
  private:
  float _internal_tschchartseriesareasymbolsize() const;
  void _internal_set_tschchartseriesareasymbolsize(float value);
  public:

  // optional float tschchartserieslinesymbolsize = 71;
  bool has_tschchartserieslinesymbolsize() const;
  private:
  bool _internal_has_tschchartserieslinesymbolsize() const;
  public:
  void clear_tschchartserieslinesymbolsize();
  float tschchartserieslinesymbolsize() const;
  void set_tschchartserieslinesymbolsize(float value);
  private:
  float _internal_tschchartserieslinesymbolsize() const;
  void _internal_set_tschchartserieslinesymbolsize(float value);
  public:

  // optional float tschchartseriesmixedareasymbolsize = 72;
  bool has_tschchartseriesmixedareasymbolsize() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymbolsize() const;
  public:
  void clear_tschchartseriesmixedareasymbolsize();
  float tschchartseriesmixedareasymbolsize() const;
  void set_tschchartseriesmixedareasymbolsize(float value);
  private:
  float _internal_tschchartseriesmixedareasymbolsize() const;
  void _internal_set_tschchartseriesmixedareasymbolsize(float value);
  public:

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  bool has_tschchartseriesmixedlinesymbolsize() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymbolsize() const;
  public:
  void clear_tschchartseriesmixedlinesymbolsize();
  float tschchartseriesmixedlinesymbolsize() const;
  void set_tschchartseriesmixedlinesymbolsize(float value);
  private:
  float _internal_tschchartseriesmixedlinesymbolsize() const;
  void _internal_set_tschchartseriesmixedlinesymbolsize(float value);
  public:

  // optional float tschchartseriesscattersymbolsize = 74;
  bool has_tschchartseriesscattersymbolsize() const;
  private:
  bool _internal_has_tschchartseriesscattersymbolsize() const;
  public:
  void clear_tschchartseriesscattersymbolsize();
  float tschchartseriesscattersymbolsize() const;
  void set_tschchartseriesscattersymbolsize(float value);
  private:
  float _internal_tschchartseriesscattersymbolsize() const;
  void _internal_set_tschchartseriesscattersymbolsize(float value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  bool has_tschchartseriesdefaulttrendlineequationopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationopacity() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationopacity();
  float tschchartseriesdefaulttrendlineequationopacity() const;
  void set_tschchartseriesdefaulttrendlineequationopacity(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationopacity() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationopacity(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  bool has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  void set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  bool has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredopacity();
  float tschchartseriesdefaulttrendlinersquaredopacity() const;
  void set_tschchartseriesdefaulttrendlinersquaredopacity(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredopacity() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  bool has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  void set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesareavaluelabelposition = 87;
  bool has_tschchartseriesareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesareavaluelabelposition() const;
  public:
  void clear_tschchartseriesareavaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareavaluelabelposition() const;
  void set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareavaluelabelposition() const;
  void _internal_set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  bool has_tschchartseriesbarvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesbarvaluelabelposition() const;
  public:
  void clear_tschchartseriesbarvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarvaluelabelposition() const;
  void set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbarvaluelabelposition() const;
  void _internal_set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  bool has_tschchartseriesbubblevaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesbubblevaluelabelposition() const;
  public:
  void clear_tschchartseriesbubblevaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblevaluelabelposition() const;
  void set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblevaluelabelposition() const;
  void _internal_set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  bool has_tschchartseriesdefaultvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesdefaultvaluelabelposition() const;
  public:
  void clear_tschchartseriesdefaultvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultvaluelabelposition() const;
  void set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultvaluelabelposition() const;
  void _internal_set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  bool has_tschchartserieslinevaluelabelposition() const;
  private:
  bool _internal_has_tschchartserieslinevaluelabelposition() const;
  public:
  void clear_tschchartserieslinevaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinevaluelabelposition() const;
  void set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinevaluelabelposition() const;
  void _internal_set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  bool has_tschchartseriesmixedareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedareavaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedareavaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareavaluelabelposition() const;
  void set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedareavaluelabelposition() const;
  void _internal_set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  bool has_tschchartseriesmixedcolumnvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedcolumnvaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedcolumnvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedcolumnvaluelabelposition() const;
  void set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedcolumnvaluelabelposition() const;
  void _internal_set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  bool has_tschchartseriesmixedlinevaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesmixedlinevaluelabelposition() const;
  public:
  void clear_tschchartseriesmixedlinevaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinevaluelabelposition() const;
  void set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlinevaluelabelposition() const;
  void _internal_set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  bool has_tschchartseriesscattervaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesscattervaluelabelposition() const;
  public:
  void clear_tschchartseriesscattervaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattervaluelabelposition() const;
  void set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscattervaluelabelposition() const;
  void _internal_set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  bool has_tschchartseriesstackedareavaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesstackedareavaluelabelposition() const;
  public:
  void clear_tschchartseriesstackedareavaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedareavaluelabelposition() const;
  void set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesstackedareavaluelabelposition() const;
  void _internal_set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  bool has_tschchartseriesstackedbarvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesstackedbarvaluelabelposition() const;
  public:
  void clear_tschchartseriesstackedbarvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedbarvaluelabelposition() const;
  void set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesstackedbarvaluelabelposition() const;
  void _internal_set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
  bool has_tschchartseriesdefaulterrorbarspacing() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarspacing() const;
  public:
  void clear_tschchartseriesdefaulterrorbarspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarspacing() const;
  void set_tschchartseriesdefaulterrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbarspacing() const;
  void _internal_set_tschchartseriesdefaulterrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
  bool has_tschchartseriesdefaulterrorbarspacingscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarspacingscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarspacingscatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarspacingscatterx() const;
  void set_tschchartseriesdefaulterrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbarspacingscatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
  bool has_tschchartseriesdefaultvaluelabelspacing() const;
  private:
  bool _internal_has_tschchartseriesdefaultvaluelabelspacing() const;
  public:
  void clear_tschchartseriesdefaultvaluelabelspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultvaluelabelspacing() const;
  void set_tschchartseriesdefaultvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultvaluelabelspacing() const;
  void _internal_set_tschchartseriesdefaultvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
  bool has_tschchartseriesdonutlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdonutlabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdonutlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdonutlabelparagraphstyleindex() const;
  void set_tschchartseriesdonutlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdonutlabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdonutlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
  bool has_tschchartseriesdonutoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesdonutoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesdonutoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdonutoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesdonutoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdonutoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesdonutoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<4> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend_;
  ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx_;
  ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow_;
  ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke_;
  ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx_;
  ::TSD::FillArchive* tschchartseries3dareafill_;
  ::TSD::FillArchive* tschchartseries3dbarfill_;
  ::TSD::FillArchive* tschchartseries3dcolumnfill_;
  ::TSD::FillArchive* tschchartseries3dlinefill_;
  ::TSD::FillArchive* tschchartseries3dpiefill_;
  ::TSD::FillArchive* tschchartseriesareafill_;
  ::TSD::FillArchive* tschchartseriesbarfill_;
  ::TSD::FillArchive* tschchartseriescolumnfill_;
  ::TSD::FillArchive* tschchartseriesdefaultfill_;
  ::TSD::FillArchive* tschchartseriesmixedareafill_;
  ::TSD::FillArchive* tschchartseriesmixedcolumnfill_;
  ::TSD::FillArchive* tschchartseriespiefill_;
  ::TSD::ShadowArchive* tschchartseries3dareashadow_;
  ::TSD::ShadowArchive* tschchartseries3dbarshadow_;
  ::TSD::ShadowArchive* tschchartseries3dcolumnshadow_;
  ::TSD::ShadowArchive* tschchartseries3dlineshadow_;
  ::TSD::ShadowArchive* tschchartseries3dpieshadow_;
  ::TSD::ShadowArchive* tschchartseriesareashadow_;
  ::TSD::ShadowArchive* tschchartseriesbarshadow_;
  ::TSD::ShadowArchive* tschchartseriesbubbleshadow_;
  ::TSD::ShadowArchive* tschchartseriesdefaultshadow_;
  ::TSD::ShadowArchive* tschchartserieslineshadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedareashadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedlineshadow_;
  ::TSD::ShadowArchive* tschchartseriespieshadow_;
  ::TSD::ShadowArchive* tschchartseriesscattershadow_;
  ::TSD::StrokeArchive* tschchartseriesareastroke_;
  ::TSD::StrokeArchive* tschchartseriesbarstroke_;
  ::TSD::StrokeArchive* tschchartseriesbubblestroke_;
  ::TSD::StrokeArchive* tschchartserieslinestroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedareastroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedlinestroke_;
  ::TSD::StrokeArchive* tschchartseriespiestroke_;
  ::TSD::StrokeArchive* tschchartseriesscatterstroke_;
  ::TSD::FillArchive* tschchartseriesareasymbolfill_;
  ::TSD::FillArchive* tschchartseriesbubblesymbolfill_;
  ::TSD::FillArchive* tschchartserieslinesymbolfill_;
  ::TSD::FillArchive* tschchartseriesmixedareasymbolfill_;
  ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill_;
  ::TSD::FillArchive* tschchartseriesscattersymbolfill_;
  ::TSD::StrokeArchive* tschchartseriesareasymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke_;
  ::TSD::StrokeArchive* tschchartserieslinesymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke_;
  ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow_;
  ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke_;
  ::TSD::StrokeArchive* tschchartseriesdefaultcalloutlinestrokestyle_;
  ::TSD::LineEndArchive* tschchartseriesdefaultcalloutlinestartlineend_;
  ::TSD::LineEndArchive* tschchartseriesdefaultcalloutlineendlineend_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesarealabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespielabelparagraphstyleindex_;
  float tschchartseriesdefaultopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareaoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbaroutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespieoutsidelabelparagraphstyleindex_;
  bool tschchartseriesareasymbolfilluseseriesfill_;
  bool tschchartserieslinesymbolfilluseseriesfill_;
  bool tschchartseriesmixedareasymbolfilluseseriesfill_;
  bool tschchartseriesmixedlinesymbolfilluseseriesfill_;
  bool tschchartseriesareasymbolfilluseseriesstroke_;
  bool tschchartseriesbubblesymbolfilluseseriesstroke_;
  bool tschchartserieslinesymbolfilluseseriesstroke_;
  bool tschchartseriesmixedareasymbolfilluseseriesstroke_;
  bool tschchartseriesmixedlinesymbolfilluseseriesstroke_;
  bool tschchartseriesscattersymbolfilluseseriesstroke_;
  float tschchartseriesareasymbolsize_;
  float tschchartserieslinesymbolsize_;
  float tschchartseriesmixedareasymbolsize_;
  float tschchartseriesmixedlinesymbolsize_;
  float tschchartseriesscattersymbolsize_;
  float tschchartseriesdefaulttrendlineequationopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
  float tschchartseriesdefaulttrendlinersquaredopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareavaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblevaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinevaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareavaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedcolumnvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinevaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattervaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedareavaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedbarvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarspacingscatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultvaluelabelspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdonutlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdonutoutsidelabelparagraphstyleindex_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartSeriesNonStyleArchive) */ {
 public:
  inline ChartSeriesNonStyleArchive() : ChartSeriesNonStyleArchive(nullptr) {}
  ~ChartSeriesNonStyleArchive() override;
  explicit constexpr ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from);
  ChartSeriesNonStyleArchive(ChartSeriesNonStyleArchive&& from) noexcept
    : ChartSeriesNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesNonStyleArchive& operator=(const ChartSeriesNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesNonStyleArchive& operator=(ChartSeriesNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesNonStyleArchive*>(
               &_ChartSeriesNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChartSeriesNonStyleArchive& a, ChartSeriesNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesNonStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSeriesNonStyleArchive* New() const final {
    return new ChartSeriesNonStyleArchive();
  }

  ChartSeriesNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSeriesNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSeriesNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartSeriesNonStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartSeriesNonStyleArchive";
  }
  protected:
  explicit ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartseriesdefaulttrendlinelabelstringFieldNumber = 54,
    kTschchartseriesdefaulterrorbarcustomnegativedataFieldNumber = 2,
    kTschchartseriesdefaulterrorbarcustomnegativedatascatterxFieldNumber = 3,
    kTschchartseriesdefaulterrorbarcustompositivedataFieldNumber = 4,
    kTschchartseriesdefaulterrorbarcustompositivedatascatterxFieldNumber = 5,
    kTschchartseriesdefault10NumberformatFieldNumber = 21,
    kTschchartseriespie10NumberformatFieldNumber = 22,
    kTschchartseriesstackedpercentnumberformatFieldNumber = 25,
    kTschchartseriesdefault10DateformatFieldNumber = 69,
    kTschchartseriesdefaultdurationformatFieldNumber = 70,
    kTschchartseriesdefaultdateformatFieldNumber = 71,
    kTschchartseriesdefaultnumberformatFieldNumber = 98,
    kTschchartseriespienumberformatFieldNumber = 99,
    kTschchartseriesbubbleadjustmentscaleFieldNumber = 1,
    kTschchartseriesdefaulterrorbarfixedvalueFieldNumber = 6,
    kTschchartseriesdefaulterrorbarfixedvaluescatterxFieldNumber = 7,
    kTschchartseriesdefaulterrorbarpercentvalueFieldNumber = 8,
    kTschchartseriesdefaulterrorbarpercentvaluescatterxFieldNumber = 9,
    kTschchartseriesdefaulterrorbarsettingFieldNumber = 10,
    kTschchartseriesdefaulterrorbarsettingscatterxFieldNumber = 11,
    kTschchartseriesdefaulterrorbarstddevvalueFieldNumber = 12,
    kTschchartseriesdefaulterrorbarstddevvaluescatterxFieldNumber = 13,
    kTschchartseriesdefaulterrorbartypeFieldNumber = 14,
    kTschchartseriesdefaulterrorbartypescatterxFieldNumber = 15,
    kTschchartseriespie23LabelexplosionFieldNumber = 16,
    kTschchartseriesbubblelinetypeFieldNumber = 17,
    kTschchartserieslinelinetypeFieldNumber = 18,
    kTschchartseriesmixedlinelinetypeFieldNumber = 19,
    kTschchartseriesscatterlinetypeFieldNumber = 20,
    kTschchartseriesdefaultnumberformattypeFieldNumber = 23,
    kTschchartseriespienumberformattypeFieldNumber = 24,
    kTschchartseriesdefaultseriestypeFieldNumber = 26,
    kTschchartseriesmixedlineshowsymbolFieldNumber = 35,
    kTschchartseriesscattershowsymbolFieldNumber = 36,
    kTschchartseriesdefaultshowtrendlineFieldNumber = 37,
    kTschchartseriesareashowvaluelabelsFieldNumber = 38,
    kTschchartseriesscattershowlineFieldNumber = 29,
    kTschchartseriesbubbleshownegativedataFieldNumber = 30,
    kTschchartseriesbubbleshowserieslabelsFieldNumber = 65,
    kTschchartseriespieshowserieslabelsFieldNumber = 31,
    kTschchartseriesbarshowvaluelabelsFieldNumber = 39,
    kTschchartseriesbubbleshowvaluelabelsFieldNumber = 40,
    kTschchartseriesdefaultshowvaluelabelsFieldNumber = 41,
    kTschchartserieslineshowvaluelabelsFieldNumber = 42,
    kTschchartseriesscattershowserieslabelsFieldNumber = 67,
    kTschchartseriesareashowsymbolFieldNumber = 32,
    kTschchartserieslineshowsymbolFieldNumber = 33,
    kTschchartseriesmixedareashowsymbolFieldNumber = 34,
    kTschchartseriesbubblesizedimensionFieldNumber = 46,
    kTschchartseriesareasymboltypeFieldNumber = 47,
    kTschchartserieslinesymboltypeFieldNumber = 48,
    kTschchartseriesmixedareasymboltypeFieldNumber = 49,
    kTschchartseriesmixedlinesymboltypeFieldNumber = 50,
    kTschchartseriesscattersymboltypeFieldNumber = 51,
    kTschchartseriesdefaulttrendlineequationoffsetxFieldNumber = 52,
    kTschchartseriesdefaulttrendlineequationoffsetyFieldNumber = 53,
    kTschchartseriesdefaulttrendlineorderFieldNumber = 55,
    kTschchartseriesdefaulttrendlineperiodFieldNumber = 56,
    kTschchartseriesdefaulttrendlinersquaredoffsetxFieldNumber = 57,
    kTschchartseriesdefaulttrendlinersquaredoffsetyFieldNumber = 58,
    kTschchartseriesdefaulttrendlineshowequationFieldNumber = 59,
    kTschchartseriesdefaulttrendlineshowlabelFieldNumber = 60,
    kTschchartseriesdefaulttrendlineshowr2ValueFieldNumber = 61,
    kTschchartseriesdefaulttrendlinetypeFieldNumber = 62,
    kTschchartseriespiewedgeexplosionFieldNumber = 63,
    kTschchartseriesdefaultyaxisordinalFieldNumber = 64,
    kTschchartseriesdefaultshowerrorbarFieldNumber = 27,
    kTschchartseriesdefaultshowerrorbarscatterxFieldNumber = 28,
    kTschchartseriesbubbleshowlabelsinfrontFieldNumber = 101,
    kTschchartseriesdefaultshowlabelsinfrontFieldNumber = 100,
    kTschchartseriesbubblevaluelabelsaxisFieldNumber = 66,
    kTschchartseriesmixedshowvaluelabelsFieldNumber = 43,
    kTschchartseriespieshowvaluelabelsFieldNumber = 44,
    kTschchartseriesscattershowvaluelabelsFieldNumber = 45,
    kTschchartseriesareastacklabelsFieldNumber = 139,
    kTschchartseriesscattervaluelabelsaxisFieldNumber = 68,
    kTschchartseriespieenablecalloutlineFieldNumber = 102,
    kTschchartseriespielabelexplosionFieldNumber = 147,
    kTschchartseriesareaenablecalloutlineFieldNumber = 103,
    kTschchartseriesbarenablecalloutlineFieldNumber = 104,
    kTschchartseriesbubbleenablecalloutlineFieldNumber = 105,
    kTschchartserieslineenablecalloutlineFieldNumber = 106,
    kTschchartseriesscatterenablecalloutlineFieldNumber = 107,
    kTschchartseriesstackedareaenablecalloutlineFieldNumber = 108,
    kTschchartseriesstackedbarenablecalloutlineFieldNumber = 109,
    kTschchartseriesdefaultenablecalloutlineFieldNumber = 110,
    kTschchartseriesbarstacklabelsFieldNumber = 140,
    kTschchartseriesbubblestacklabelsFieldNumber = 141,
    kTschchartseriesdefaultstacklabelsFieldNumber = 146,
    kTschchartserieslinestacklabelsFieldNumber = 142,
    kTschchartseriespiestacklabelsFieldNumber = 138,
    kTschchartseriesscatterstacklabelsFieldNumber = 143,
    kTschchartseriesstackedareastacklabelsFieldNumber = 144,
    kTschchartseriesstackedbarstacklabelsFieldNumber = 145,
  };
  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  bool has_tschchartseriesdefaulttrendlinelabelstring() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinelabelstring() const;
  public:
  void clear_tschchartseriesdefaulttrendlinelabelstring();
  const std::string& tschchartseriesdefaulttrendlinelabelstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartseriesdefaulttrendlinelabelstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartseriesdefaulttrendlinelabelstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartseriesdefaulttrendlinelabelstring();
  void set_allocated_tschchartseriesdefaulttrendlinelabelstring(std::string* tschchartseriesdefaulttrendlinelabelstring);
  private:
  const std::string& _internal_tschchartseriesdefaulttrendlinelabelstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartseriesdefaulttrendlinelabelstring(const std::string& value);
  std::string* _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
  public:

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  bool has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustomnegativedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  bool has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  bool has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustompositivedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  void set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustompositivedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  bool has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  void set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
  bool has_tschchartseriesdefault1_0numberformat() const;
  private:
  bool _internal_has_tschchartseriesdefault1_0numberformat() const;
  public:
  void clear_tschchartseriesdefault1_0numberformat();
  const ::TSK::FormatStructArchive& tschchartseriesdefault1_0numberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdefault1_0numberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdefault1_0numberformat();
  void set_allocated_tschchartseriesdefault1_0numberformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdefault1_0numberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdefault1_0numberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefault1_0numberformat(
      ::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdefault1_0numberformat();

  // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
  bool has_tschchartseriespie1_0numberformat() const;
  private:
  bool _internal_has_tschchartseriespie1_0numberformat() const;
  public:
  void clear_tschchartseriespie1_0numberformat();
  const ::TSK::FormatStructArchive& tschchartseriespie1_0numberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriespie1_0numberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriespie1_0numberformat();
  void set_allocated_tschchartseriespie1_0numberformat(::TSK::FormatStructArchive* tschchartseriespie1_0numberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriespie1_0numberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriespie1_0numberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriespie1_0numberformat(
      ::TSK::FormatStructArchive* tschchartseriespie1_0numberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriespie1_0numberformat();

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  bool has_tschchartseriesstackedpercentnumberformat() const;
  private:
  bool _internal_has_tschchartseriesstackedpercentnumberformat() const;
  public:
  void clear_tschchartseriesstackedpercentnumberformat();
  const ::TSK::FormatStructArchive& tschchartseriesstackedpercentnumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesstackedpercentnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesstackedpercentnumberformat();
  void set_allocated_tschchartseriesstackedpercentnumberformat(::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesstackedpercentnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesstackedpercentnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesstackedpercentnumberformat(
      ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesstackedpercentnumberformat();

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
  bool has_tschchartseriesdefault1_0dateformat() const;
  private:
  bool _internal_has_tschchartseriesdefault1_0dateformat() const;
  public:
  void clear_tschchartseriesdefault1_0dateformat();
  const ::TSK::FormatStructArchive& tschchartseriesdefault1_0dateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdefault1_0dateformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdefault1_0dateformat();
  void set_allocated_tschchartseriesdefault1_0dateformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdefault1_0dateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdefault1_0dateformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefault1_0dateformat(
      ::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdefault1_0dateformat();

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
  bool has_tschchartseriesdefaultdurationformat() const;
  private:
  bool _internal_has_tschchartseriesdefaultdurationformat() const;
  public:
  void clear_tschchartseriesdefaultdurationformat();
  const ::TSK::FormatStructArchive& tschchartseriesdefaultdurationformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdefaultdurationformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultdurationformat();
  void set_allocated_tschchartseriesdefaultdurationformat(::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdefaultdurationformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdefaultdurationformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultdurationformat(
      ::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdefaultdurationformat();

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
  bool has_tschchartseriesdefaultdateformat() const;
  private:
  bool _internal_has_tschchartseriesdefaultdateformat() const;
  public:
  void clear_tschchartseriesdefaultdateformat();
  const ::TSK::FormatStructArchive& tschchartseriesdefaultdateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdefaultdateformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultdateformat();
  void set_allocated_tschchartseriesdefaultdateformat(::TSK::FormatStructArchive* tschchartseriesdefaultdateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdefaultdateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdefaultdateformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultdateformat(
      ::TSK::FormatStructArchive* tschchartseriesdefaultdateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdefaultdateformat();

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
  bool has_tschchartseriesdefaultnumberformat() const;
  private:
  bool _internal_has_tschchartseriesdefaultnumberformat() const;
  public:
  void clear_tschchartseriesdefaultnumberformat();
  const ::TSK::FormatStructArchive& tschchartseriesdefaultnumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdefaultnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultnumberformat();
  void set_allocated_tschchartseriesdefaultnumberformat(::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdefaultnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdefaultnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdefaultnumberformat(
      ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdefaultnumberformat();

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
  bool has_tschchartseriespienumberformat() const;
  private:
  bool _internal_has_tschchartseriespienumberformat() const;
  public:
  void clear_tschchartseriespienumberformat();
  const ::TSK::FormatStructArchive& tschchartseriespienumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriespienumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriespienumberformat();
  void set_allocated_tschchartseriespienumberformat(::TSK::FormatStructArchive* tschchartseriespienumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriespienumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriespienumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriespienumberformat(
      ::TSK::FormatStructArchive* tschchartseriespienumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriespienumberformat();

  // optional float tschchartseriesbubbleadjustmentscale = 1;
  bool has_tschchartseriesbubbleadjustmentscale() const;
  private:
  bool _internal_has_tschchartseriesbubbleadjustmentscale() const;
  public:
  void clear_tschchartseriesbubbleadjustmentscale();
  float tschchartseriesbubbleadjustmentscale() const;
  void set_tschchartseriesbubbleadjustmentscale(float value);
  private:
  float _internal_tschchartseriesbubbleadjustmentscale() const;
  void _internal_set_tschchartseriesbubbleadjustmentscale(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  bool has_tschchartseriesdefaulterrorbarfixedvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarfixedvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarfixedvalue();
  float tschchartseriesdefaulterrorbarfixedvalue() const;
  void set_tschchartseriesdefaulterrorbarfixedvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarfixedvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarfixedvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  bool has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  float tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  bool has_tschchartseriesdefaulterrorbarpercentvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarpercentvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarpercentvalue();
  float tschchartseriesdefaulterrorbarpercentvalue() const;
  void set_tschchartseriesdefaulterrorbarpercentvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarpercentvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarpercentvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  bool has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  float tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  bool has_tschchartseriesdefaulterrorbarsetting() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarsetting() const;
  public:
  void clear_tschchartseriesdefaulterrorbarsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsetting() const;
  void set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbarsetting() const;
  void _internal_set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  bool has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarsettingscatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsettingscatterx() const;
  void set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbarsettingscatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  bool has_tschchartseriesdefaulterrorbarstddevvalue() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstddevvalue() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstddevvalue();
  float tschchartseriesdefaulterrorbarstddevvalue() const;
  void set_tschchartseriesdefaulterrorbarstddevvalue(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarstddevvalue() const;
  void _internal_set_tschchartseriesdefaulterrorbarstddevvalue(float value);
  public:

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  bool has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  float tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  void set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);
  private:
  float _internal_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);
  public:

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  bool has_tschchartseriesdefaulterrorbartype() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbartype() const;
  public:
  void clear_tschchartseriesdefaulterrorbartype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartype() const;
  void set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbartype() const;
  void _internal_set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  bool has_tschchartseriesdefaulterrorbartypescatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaulterrorbartypescatterx() const;
  public:
  void clear_tschchartseriesdefaulterrorbartypescatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartypescatterx() const;
  void set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulterrorbartypescatterx() const;
  void _internal_set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriespie2_3labelexplosion = 16;
  bool has_tschchartseriespie2_3labelexplosion() const;
  private:
  bool _internal_has_tschchartseriespie2_3labelexplosion() const;
  public:
  void clear_tschchartseriespie2_3labelexplosion();
  float tschchartseriespie2_3labelexplosion() const;
  void set_tschchartseriespie2_3labelexplosion(float value);
  private:
  float _internal_tschchartseriespie2_3labelexplosion() const;
  void _internal_set_tschchartseriespie2_3labelexplosion(float value);
  public:

  // optional int32 tschchartseriesbubblelinetype = 17;
  bool has_tschchartseriesbubblelinetype() const;
  private:
  bool _internal_has_tschchartseriesbubblelinetype() const;
  public:
  void clear_tschchartseriesbubblelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblelinetype() const;
  void set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblelinetype() const;
  void _internal_set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinelinetype = 18;
  bool has_tschchartserieslinelinetype() const;
  private:
  bool _internal_has_tschchartserieslinelinetype() const;
  public:
  void clear_tschchartserieslinelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelinetype() const;
  void set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinelinetype() const;
  void _internal_set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  bool has_tschchartseriesmixedlinelinetype() const;
  private:
  bool _internal_has_tschchartseriesmixedlinelinetype() const;
  public:
  void clear_tschchartseriesmixedlinelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinelinetype() const;
  void set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlinelinetype() const;
  void _internal_set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesscatterlinetype = 20;
  bool has_tschchartseriesscatterlinetype() const;
  private:
  bool _internal_has_tschchartseriesscatterlinetype() const;
  public:
  void clear_tschchartseriesscatterlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscatterlinetype() const;
  void set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscatterlinetype() const;
  void _internal_set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  bool has_tschchartseriesdefaultnumberformattype() const;
  private:
  bool _internal_has_tschchartseriesdefaultnumberformattype() const;
  public:
  void clear_tschchartseriesdefaultnumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultnumberformattype() const;
  void set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultnumberformattype() const;
  void _internal_set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriespienumberformattype = 24;
  bool has_tschchartseriespienumberformattype() const;
  private:
  bool _internal_has_tschchartseriespienumberformattype() const;
  public:
  void clear_tschchartseriespienumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespienumberformattype() const;
  void set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespienumberformattype() const;
  void _internal_set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultseriestype = 26;
  bool has_tschchartseriesdefaultseriestype() const;
  private:
  bool _internal_has_tschchartseriesdefaultseriestype() const;
  public:
  void clear_tschchartseriesdefaultseriestype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultseriestype() const;
  void set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultseriestype() const;
  void _internal_set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  bool has_tschchartseriesmixedlineshowsymbol() const;
  private:
  bool _internal_has_tschchartseriesmixedlineshowsymbol() const;
  public:
  void clear_tschchartseriesmixedlineshowsymbol();
  bool tschchartseriesmixedlineshowsymbol() const;
  void set_tschchartseriesmixedlineshowsymbol(bool value);
  private:
  bool _internal_tschchartseriesmixedlineshowsymbol() const;
  void _internal_set_tschchartseriesmixedlineshowsymbol(bool value);
  public:

  // optional bool tschchartseriesscattershowsymbol = 36;
  bool has_tschchartseriesscattershowsymbol() const;
  private:
  bool _internal_has_tschchartseriesscattershowsymbol() const;
  public:
  void clear_tschchartseriesscattershowsymbol();
  bool tschchartseriesscattershowsymbol() const;
  void set_tschchartseriesscattershowsymbol(bool value);
  private:
  bool _internal_tschchartseriesscattershowsymbol() const;
  void _internal_set_tschchartseriesscattershowsymbol(bool value);
  public:

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  bool has_tschchartseriesdefaultshowtrendline() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowtrendline() const;
  public:
  void clear_tschchartseriesdefaultshowtrendline();
  bool tschchartseriesdefaultshowtrendline() const;
  void set_tschchartseriesdefaultshowtrendline(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowtrendline() const;
  void _internal_set_tschchartseriesdefaultshowtrendline(bool value);
  public:

  // optional bool tschchartseriesareashowvaluelabels = 38;
  bool has_tschchartseriesareashowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesareashowvaluelabels() const;
  public:
  void clear_tschchartseriesareashowvaluelabels();
  bool tschchartseriesareashowvaluelabels() const;
  void set_tschchartseriesareashowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesareashowvaluelabels() const;
  void _internal_set_tschchartseriesareashowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesscattershowline = 29;
  bool has_tschchartseriesscattershowline() const;
  private:
  bool _internal_has_tschchartseriesscattershowline() const;
  public:
  void clear_tschchartseriesscattershowline();
  bool tschchartseriesscattershowline() const;
  void set_tschchartseriesscattershowline(bool value);
  private:
  bool _internal_tschchartseriesscattershowline() const;
  void _internal_set_tschchartseriesscattershowline(bool value);
  public:

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  bool has_tschchartseriesbubbleshownegativedata() const;
  private:
  bool _internal_has_tschchartseriesbubbleshownegativedata() const;
  public:
  void clear_tschchartseriesbubbleshownegativedata();
  bool tschchartseriesbubbleshownegativedata() const;
  void set_tschchartseriesbubbleshownegativedata(bool value);
  private:
  bool _internal_tschchartseriesbubbleshownegativedata() const;
  void _internal_set_tschchartseriesbubbleshownegativedata(bool value);
  public:

  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  bool has_tschchartseriesbubbleshowserieslabels() const;
  private:
  bool _internal_has_tschchartseriesbubbleshowserieslabels() const;
  public:
  void clear_tschchartseriesbubbleshowserieslabels();
  bool tschchartseriesbubbleshowserieslabels() const;
  void set_tschchartseriesbubbleshowserieslabels(bool value);
  private:
  bool _internal_tschchartseriesbubbleshowserieslabels() const;
  void _internal_set_tschchartseriesbubbleshowserieslabels(bool value);
  public:

  // optional bool tschchartseriespieshowserieslabels = 31;
  bool has_tschchartseriespieshowserieslabels() const;
  private:
  bool _internal_has_tschchartseriespieshowserieslabels() const;
  public:
  void clear_tschchartseriespieshowserieslabels();
  bool tschchartseriespieshowserieslabels() const;
  void set_tschchartseriespieshowserieslabels(bool value);
  private:
  bool _internal_tschchartseriespieshowserieslabels() const;
  void _internal_set_tschchartseriespieshowserieslabels(bool value);
  public:

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  bool has_tschchartseriesbarshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesbarshowvaluelabels() const;
  public:
  void clear_tschchartseriesbarshowvaluelabels();
  bool tschchartseriesbarshowvaluelabels() const;
  void set_tschchartseriesbarshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesbarshowvaluelabels() const;
  void _internal_set_tschchartseriesbarshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  bool has_tschchartseriesbubbleshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesbubbleshowvaluelabels() const;
  public:
  void clear_tschchartseriesbubbleshowvaluelabels();
  bool tschchartseriesbubbleshowvaluelabels() const;
  void set_tschchartseriesbubbleshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesbubbleshowvaluelabels() const;
  void _internal_set_tschchartseriesbubbleshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  bool has_tschchartseriesdefaultshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowvaluelabels() const;
  public:
  void clear_tschchartseriesdefaultshowvaluelabels();
  bool tschchartseriesdefaultshowvaluelabels() const;
  void set_tschchartseriesdefaultshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowvaluelabels() const;
  void _internal_set_tschchartseriesdefaultshowvaluelabels(bool value);
  public:

  // optional bool tschchartserieslineshowvaluelabels = 42;
  bool has_tschchartserieslineshowvaluelabels() const;
  private:
  bool _internal_has_tschchartserieslineshowvaluelabels() const;
  public:
  void clear_tschchartserieslineshowvaluelabels();
  bool tschchartserieslineshowvaluelabels() const;
  void set_tschchartserieslineshowvaluelabels(bool value);
  private:
  bool _internal_tschchartserieslineshowvaluelabels() const;
  void _internal_set_tschchartserieslineshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesscattershowserieslabels = 67;
  bool has_tschchartseriesscattershowserieslabels() const;
  private:
  bool _internal_has_tschchartseriesscattershowserieslabels() const;
  public:
  void clear_tschchartseriesscattershowserieslabels();
  bool tschchartseriesscattershowserieslabels() const;
  void set_tschchartseriesscattershowserieslabels(bool value);
  private:
  bool _internal_tschchartseriesscattershowserieslabels() const;
  void _internal_set_tschchartseriesscattershowserieslabels(bool value);
  public:

  // optional bool tschchartseriesareashowsymbol = 32;
  bool has_tschchartseriesareashowsymbol() const;
  private:
  bool _internal_has_tschchartseriesareashowsymbol() const;
  public:
  void clear_tschchartseriesareashowsymbol();
  bool tschchartseriesareashowsymbol() const;
  void set_tschchartseriesareashowsymbol(bool value);
  private:
  bool _internal_tschchartseriesareashowsymbol() const;
  void _internal_set_tschchartseriesareashowsymbol(bool value);
  public:

  // optional bool tschchartserieslineshowsymbol = 33;
  bool has_tschchartserieslineshowsymbol() const;
  private:
  bool _internal_has_tschchartserieslineshowsymbol() const;
  public:
  void clear_tschchartserieslineshowsymbol();
  bool tschchartserieslineshowsymbol() const;
  void set_tschchartserieslineshowsymbol(bool value);
  private:
  bool _internal_tschchartserieslineshowsymbol() const;
  void _internal_set_tschchartserieslineshowsymbol(bool value);
  public:

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  bool has_tschchartseriesmixedareashowsymbol() const;
  private:
  bool _internal_has_tschchartseriesmixedareashowsymbol() const;
  public:
  void clear_tschchartseriesmixedareashowsymbol();
  bool tschchartseriesmixedareashowsymbol() const;
  void set_tschchartseriesmixedareashowsymbol(bool value);
  private:
  bool _internal_tschchartseriesmixedareashowsymbol() const;
  void _internal_set_tschchartseriesmixedareashowsymbol(bool value);
  public:

  // optional int32 tschchartseriesbubblesizedimension = 46;
  bool has_tschchartseriesbubblesizedimension() const;
  private:
  bool _internal_has_tschchartseriesbubblesizedimension() const;
  public:
  void clear_tschchartseriesbubblesizedimension();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblesizedimension() const;
  void set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblesizedimension() const;
  void _internal_set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesareasymboltype = 47;
  bool has_tschchartseriesareasymboltype() const;
  private:
  bool _internal_has_tschchartseriesareasymboltype() const;
  public:
  void clear_tschchartseriesareasymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareasymboltype() const;
  void set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareasymboltype() const;
  void _internal_set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinesymboltype = 48;
  bool has_tschchartserieslinesymboltype() const;
  private:
  bool _internal_has_tschchartserieslinesymboltype() const;
  public:
  void clear_tschchartserieslinesymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinesymboltype() const;
  void set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinesymboltype() const;
  void _internal_set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  bool has_tschchartseriesmixedareasymboltype() const;
  private:
  bool _internal_has_tschchartseriesmixedareasymboltype() const;
  public:
  void clear_tschchartseriesmixedareasymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareasymboltype() const;
  void set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedareasymboltype() const;
  void _internal_set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  bool has_tschchartseriesmixedlinesymboltype() const;
  private:
  bool _internal_has_tschchartseriesmixedlinesymboltype() const;
  public:
  void clear_tschchartseriesmixedlinesymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinesymboltype() const;
  void set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesmixedlinesymboltype() const;
  void _internal_set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesscattersymboltype = 51;
  bool has_tschchartseriesscattersymboltype() const;
  private:
  bool _internal_has_tschchartseriesscattersymboltype() const;
  public:
  void clear_tschchartseriesscattersymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattersymboltype() const;
  void set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscattersymboltype() const;
  void _internal_set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  bool has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationoffsetx();
  float tschchartseriesdefaulttrendlineequationoffsetx() const;
  void set_tschchartseriesdefaulttrendlineequationoffsetx(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationoffsetx() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationoffsetx(float value);
  public:

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  bool has_tschchartseriesdefaulttrendlineequationoffsety() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineequationoffsety() const;
  public:
  void clear_tschchartseriesdefaulttrendlineequationoffsety();
  float tschchartseriesdefaulttrendlineequationoffsety() const;
  void set_tschchartseriesdefaulttrendlineequationoffsety(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlineequationoffsety() const;
  void _internal_set_tschchartseriesdefaulttrendlineequationoffsety(float value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  bool has_tschchartseriesdefaulttrendlineorder() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineorder() const;
  public:
  void clear_tschchartseriesdefaulttrendlineorder();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineorder() const;
  void set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlineorder() const;
  void _internal_set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  bool has_tschchartseriesdefaulttrendlineperiod() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineperiod() const;
  public:
  void clear_tschchartseriesdefaulttrendlineperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineperiod() const;
  void set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlineperiod() const;
  void _internal_set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  bool has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredoffsetx();
  float tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  void set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);
  public:

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  bool has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  public:
  void clear_tschchartseriesdefaulttrendlinersquaredoffsety();
  float tschchartseriesdefaulttrendlinersquaredoffsety() const;
  void set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);
  private:
  float _internal_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  void _internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  bool has_tschchartseriesdefaulttrendlineshowequation() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowequation() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowequation();
  bool tschchartseriesdefaulttrendlineshowequation() const;
  void set_tschchartseriesdefaulttrendlineshowequation(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowequation() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowequation(bool value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  bool has_tschchartseriesdefaulttrendlineshowlabel() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowlabel() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowlabel();
  bool tschchartseriesdefaulttrendlineshowlabel() const;
  void set_tschchartseriesdefaulttrendlineshowlabel(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowlabel() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowlabel(bool value);
  public:

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  bool has_tschchartseriesdefaulttrendlineshowr2value() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlineshowr2value() const;
  public:
  void clear_tschchartseriesdefaulttrendlineshowr2value();
  bool tschchartseriesdefaulttrendlineshowr2value() const;
  void set_tschchartseriesdefaulttrendlineshowr2value(bool value);
  private:
  bool _internal_tschchartseriesdefaulttrendlineshowr2value() const;
  void _internal_set_tschchartseriesdefaulttrendlineshowr2value(bool value);
  public:

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  bool has_tschchartseriesdefaulttrendlinetype() const;
  private:
  bool _internal_has_tschchartseriesdefaulttrendlinetype() const;
  public:
  void clear_tschchartseriesdefaulttrendlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinetype() const;
  void set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaulttrendlinetype() const;
  void _internal_set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriespiewedgeexplosion = 63;
  bool has_tschchartseriespiewedgeexplosion() const;
  private:
  bool _internal_has_tschchartseriespiewedgeexplosion() const;
  public:
  void clear_tschchartseriespiewedgeexplosion();
  float tschchartseriespiewedgeexplosion() const;
  void set_tschchartseriespiewedgeexplosion(float value);
  private:
  float _internal_tschchartseriespiewedgeexplosion() const;
  void _internal_set_tschchartseriespiewedgeexplosion(float value);
  public:

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  bool has_tschchartseriesdefaultyaxisordinal() const;
  private:
  bool _internal_has_tschchartseriesdefaultyaxisordinal() const;
  public:
  void clear_tschchartseriesdefaultyaxisordinal();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultyaxisordinal() const;
  void set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultyaxisordinal() const;
  void _internal_set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  bool has_tschchartseriesdefaultshowerrorbar() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowerrorbar() const;
  public:
  void clear_tschchartseriesdefaultshowerrorbar();
  bool tschchartseriesdefaultshowerrorbar() const;
  void set_tschchartseriesdefaultshowerrorbar(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowerrorbar() const;
  void _internal_set_tschchartseriesdefaultshowerrorbar(bool value);
  public:

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  bool has_tschchartseriesdefaultshowerrorbarscatterx() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowerrorbarscatterx() const;
  public:
  void clear_tschchartseriesdefaultshowerrorbarscatterx();
  bool tschchartseriesdefaultshowerrorbarscatterx() const;
  void set_tschchartseriesdefaultshowerrorbarscatterx(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowerrorbarscatterx() const;
  void _internal_set_tschchartseriesdefaultshowerrorbarscatterx(bool value);
  public:

  // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
  bool has_tschchartseriesbubbleshowlabelsinfront() const;
  private:
  bool _internal_has_tschchartseriesbubbleshowlabelsinfront() const;
  public:
  void clear_tschchartseriesbubbleshowlabelsinfront();
  bool tschchartseriesbubbleshowlabelsinfront() const;
  void set_tschchartseriesbubbleshowlabelsinfront(bool value);
  private:
  bool _internal_tschchartseriesbubbleshowlabelsinfront() const;
  void _internal_set_tschchartseriesbubbleshowlabelsinfront(bool value);
  public:

  // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
  bool has_tschchartseriesdefaultshowlabelsinfront() const;
  private:
  bool _internal_has_tschchartseriesdefaultshowlabelsinfront() const;
  public:
  void clear_tschchartseriesdefaultshowlabelsinfront();
  bool tschchartseriesdefaultshowlabelsinfront() const;
  void set_tschchartseriesdefaultshowlabelsinfront(bool value);
  private:
  bool _internal_tschchartseriesdefaultshowlabelsinfront() const;
  void _internal_set_tschchartseriesdefaultshowlabelsinfront(bool value);
  public:

  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  bool has_tschchartseriesbubblevaluelabelsaxis() const;
  private:
  bool _internal_has_tschchartseriesbubblevaluelabelsaxis() const;
  public:
  void clear_tschchartseriesbubblevaluelabelsaxis();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblevaluelabelsaxis() const;
  void set_tschchartseriesbubblevaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubblevaluelabelsaxis() const;
  void _internal_set_tschchartseriesbubblevaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  bool has_tschchartseriesmixedshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesmixedshowvaluelabels() const;
  public:
  void clear_tschchartseriesmixedshowvaluelabels();
  bool tschchartseriesmixedshowvaluelabels() const;
  void set_tschchartseriesmixedshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesmixedshowvaluelabels() const;
  void _internal_set_tschchartseriesmixedshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriespieshowvaluelabels = 44;
  bool has_tschchartseriespieshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriespieshowvaluelabels() const;
  public:
  void clear_tschchartseriespieshowvaluelabels();
  bool tschchartseriespieshowvaluelabels() const;
  void set_tschchartseriespieshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriespieshowvaluelabels() const;
  void _internal_set_tschchartseriespieshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  bool has_tschchartseriesscattershowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesscattershowvaluelabels() const;
  public:
  void clear_tschchartseriesscattershowvaluelabels();
  bool tschchartseriesscattershowvaluelabels() const;
  void set_tschchartseriesscattershowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesscattershowvaluelabels() const;
  void _internal_set_tschchartseriesscattershowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesareastacklabels = 139;
  bool has_tschchartseriesareastacklabels() const;
  private:
  bool _internal_has_tschchartseriesareastacklabels() const;
  public:
  void clear_tschchartseriesareastacklabels();
  bool tschchartseriesareastacklabels() const;
  void set_tschchartseriesareastacklabels(bool value);
  private:
  bool _internal_tschchartseriesareastacklabels() const;
  void _internal_set_tschchartseriesareastacklabels(bool value);
  public:

  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  bool has_tschchartseriesscattervaluelabelsaxis() const;
  private:
  bool _internal_has_tschchartseriesscattervaluelabelsaxis() const;
  public:
  void clear_tschchartseriesscattervaluelabelsaxis();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattervaluelabelsaxis() const;
  void set_tschchartseriesscattervaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscattervaluelabelsaxis() const;
  void _internal_set_tschchartseriesscattervaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriespieenablecalloutline = 102;
  bool has_tschchartseriespieenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriespieenablecalloutline() const;
  public:
  void clear_tschchartseriespieenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespieenablecalloutline() const;
  void set_tschchartseriespieenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriespieenablecalloutline() const;
  void _internal_set_tschchartseriespieenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriespielabelexplosion = 147;
  bool has_tschchartseriespielabelexplosion() const;
  private:
  bool _internal_has_tschchartseriespielabelexplosion() const;
  public:
  void clear_tschchartseriespielabelexplosion();
  float tschchartseriespielabelexplosion() const;
  void set_tschchartseriespielabelexplosion(float value);
  private:
  float _internal_tschchartseriespielabelexplosion() const;
  void _internal_set_tschchartseriespielabelexplosion(float value);
  public:

  // optional int32 tschchartseriesareaenablecalloutline = 103;
  bool has_tschchartseriesareaenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesareaenablecalloutline() const;
  public:
  void clear_tschchartseriesareaenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareaenablecalloutline() const;
  void set_tschchartseriesareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesareaenablecalloutline() const;
  void _internal_set_tschchartseriesareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbarenablecalloutline = 104;
  bool has_tschchartseriesbarenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesbarenablecalloutline() const;
  public:
  void clear_tschchartseriesbarenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarenablecalloutline() const;
  void set_tschchartseriesbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbarenablecalloutline() const;
  void _internal_set_tschchartseriesbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesbubbleenablecalloutline = 105;
  bool has_tschchartseriesbubbleenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesbubbleenablecalloutline() const;
  public:
  void clear_tschchartseriesbubbleenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubbleenablecalloutline() const;
  void set_tschchartseriesbubbleenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesbubbleenablecalloutline() const;
  void _internal_set_tschchartseriesbubbleenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslineenablecalloutline = 106;
  bool has_tschchartserieslineenablecalloutline() const;
  private:
  bool _internal_has_tschchartserieslineenablecalloutline() const;
  public:
  void clear_tschchartserieslineenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslineenablecalloutline() const;
  void set_tschchartserieslineenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslineenablecalloutline() const;
  void _internal_set_tschchartserieslineenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesscatterenablecalloutline = 107;
  bool has_tschchartseriesscatterenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesscatterenablecalloutline() const;
  public:
  void clear_tschchartseriesscatterenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscatterenablecalloutline() const;
  void set_tschchartseriesscatterenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesscatterenablecalloutline() const;
  void _internal_set_tschchartseriesscatterenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
  bool has_tschchartseriesstackedareaenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesstackedareaenablecalloutline() const;
  public:
  void clear_tschchartseriesstackedareaenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedareaenablecalloutline() const;
  void set_tschchartseriesstackedareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesstackedareaenablecalloutline() const;
  void _internal_set_tschchartseriesstackedareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
  bool has_tschchartseriesstackedbarenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesstackedbarenablecalloutline() const;
  public:
  void clear_tschchartseriesstackedbarenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedbarenablecalloutline() const;
  void set_tschchartseriesstackedbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesstackedbarenablecalloutline() const;
  void _internal_set_tschchartseriesstackedbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesdefaultenablecalloutline = 110;
  bool has_tschchartseriesdefaultenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesdefaultenablecalloutline() const;
  public:
  void clear_tschchartseriesdefaultenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultenablecalloutline() const;
  void set_tschchartseriesdefaultenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesdefaultenablecalloutline() const;
  void _internal_set_tschchartseriesdefaultenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesbarstacklabels = 140;
  bool has_tschchartseriesbarstacklabels() const;
  private:
  bool _internal_has_tschchartseriesbarstacklabels() const;
  public:
  void clear_tschchartseriesbarstacklabels();
  bool tschchartseriesbarstacklabels() const;
  void set_tschchartseriesbarstacklabels(bool value);
  private:
  bool _internal_tschchartseriesbarstacklabels() const;
  void _internal_set_tschchartseriesbarstacklabels(bool value);
  public:

  // optional bool tschchartseriesbubblestacklabels = 141;
  bool has_tschchartseriesbubblestacklabels() const;
  private:
  bool _internal_has_tschchartseriesbubblestacklabels() const;
  public:
  void clear_tschchartseriesbubblestacklabels();
  bool tschchartseriesbubblestacklabels() const;
  void set_tschchartseriesbubblestacklabels(bool value);
  private:
  bool _internal_tschchartseriesbubblestacklabels() const;
  void _internal_set_tschchartseriesbubblestacklabels(bool value);
  public:

  // optional bool tschchartseriesdefaultstacklabels = 146;
  bool has_tschchartseriesdefaultstacklabels() const;
  private:
  bool _internal_has_tschchartseriesdefaultstacklabels() const;
  public:
  void clear_tschchartseriesdefaultstacklabels();
  bool tschchartseriesdefaultstacklabels() const;
  void set_tschchartseriesdefaultstacklabels(bool value);
  private:
  bool _internal_tschchartseriesdefaultstacklabels() const;
  void _internal_set_tschchartseriesdefaultstacklabels(bool value);
  public:

  // optional bool tschchartserieslinestacklabels = 142;
  bool has_tschchartserieslinestacklabels() const;
  private:
  bool _internal_has_tschchartserieslinestacklabels() const;
  public:
  void clear_tschchartserieslinestacklabels();
  bool tschchartserieslinestacklabels() const;
  void set_tschchartserieslinestacklabels(bool value);
  private:
  bool _internal_tschchartserieslinestacklabels() const;
  void _internal_set_tschchartserieslinestacklabels(bool value);
  public:

  // optional bool tschchartseriespiestacklabels = 138;
  bool has_tschchartseriespiestacklabels() const;
  private:
  bool _internal_has_tschchartseriespiestacklabels() const;
  public:
  void clear_tschchartseriespiestacklabels();
  bool tschchartseriespiestacklabels() const;
  void set_tschchartseriespiestacklabels(bool value);
  private:
  bool _internal_tschchartseriespiestacklabels() const;
  void _internal_set_tschchartseriespiestacklabels(bool value);
  public:

  // optional bool tschchartseriesscatterstacklabels = 143;
  bool has_tschchartseriesscatterstacklabels() const;
  private:
  bool _internal_has_tschchartseriesscatterstacklabels() const;
  public:
  void clear_tschchartseriesscatterstacklabels();
  bool tschchartseriesscatterstacklabels() const;
  void set_tschchartseriesscatterstacklabels(bool value);
  private:
  bool _internal_tschchartseriesscatterstacklabels() const;
  void _internal_set_tschchartseriesscatterstacklabels(bool value);
  public:

  // optional bool tschchartseriesstackedareastacklabels = 144;
  bool has_tschchartseriesstackedareastacklabels() const;
  private:
  bool _internal_has_tschchartseriesstackedareastacklabels() const;
  public:
  void clear_tschchartseriesstackedareastacklabels();
  bool tschchartseriesstackedareastacklabels() const;
  void set_tschchartseriesstackedareastacklabels(bool value);
  private:
  bool _internal_tschchartseriesstackedareastacklabels() const;
  void _internal_set_tschchartseriesstackedareastacklabels(bool value);
  public:

  // optional bool tschchartseriesstackedbarstacklabels = 145;
  bool has_tschchartseriesstackedbarstacklabels() const;
  private:
  bool _internal_has_tschchartseriesstackedbarstacklabels() const;
  public:
  void clear_tschchartseriesstackedbarstacklabels();
  bool tschchartseriesstackedbarstacklabels() const;
  void set_tschchartseriesstackedbarstacklabels(bool value);
  private:
  bool _internal_tschchartseriesstackedbarstacklabels() const;
  void _internal_set_tschchartseriesstackedbarstacklabels(bool value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartseriesdefaulttrendlinelabelstring_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  ::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartseriespie1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefaultdateformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat_;
  ::TSK::FormatStructArchive* tschchartseriespienumberformat_;
  float tschchartseriesbubbleadjustmentscale_;
  float tschchartseriesdefaulterrorbarfixedvalue_;
  float tschchartseriesdefaulterrorbarfixedvaluescatterx_;
  float tschchartseriesdefaulterrorbarpercentvalue_;
  float tschchartseriesdefaulterrorbarpercentvaluescatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsetting_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbarsettingscatterx_;
  float tschchartseriesdefaulterrorbarstddevvalue_;
  float tschchartseriesdefaulterrorbarstddevvaluescatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulterrorbartypescatterx_;
  float tschchartseriespie2_3labelexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblelinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinelinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinelinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscatterlinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultnumberformattype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespienumberformattype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultseriestype_;
  bool tschchartseriesmixedlineshowsymbol_;
  bool tschchartseriesscattershowsymbol_;
  bool tschchartseriesdefaultshowtrendline_;
  bool tschchartseriesareashowvaluelabels_;
  bool tschchartseriesscattershowline_;
  bool tschchartseriesbubbleshownegativedata_;
  bool tschchartseriesbubbleshowserieslabels_;
  bool tschchartseriespieshowserieslabels_;
  bool tschchartseriesbarshowvaluelabels_;
  bool tschchartseriesbubbleshowvaluelabels_;
  bool tschchartseriesdefaultshowvaluelabels_;
  bool tschchartserieslineshowvaluelabels_;
  bool tschchartseriesscattershowserieslabels_;
  bool tschchartseriesareashowsymbol_;
  bool tschchartserieslineshowsymbol_;
  bool tschchartseriesmixedareashowsymbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblesizedimension_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareasymboltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinesymboltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedareasymboltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesmixedlinesymboltype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattersymboltype_;
  float tschchartseriesdefaulttrendlineequationoffsetx_;
  float tschchartseriesdefaulttrendlineequationoffsety_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlineperiod_;
  float tschchartseriesdefaulttrendlinersquaredoffsetx_;
  float tschchartseriesdefaulttrendlinersquaredoffsety_;
  bool tschchartseriesdefaulttrendlineshowequation_;
  bool tschchartseriesdefaulttrendlineshowlabel_;
  bool tschchartseriesdefaulttrendlineshowr2value_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaulttrendlinetype_;
  float tschchartseriespiewedgeexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultyaxisordinal_;
  bool tschchartseriesdefaultshowerrorbar_;
  bool tschchartseriesdefaultshowerrorbarscatterx_;
  bool tschchartseriesbubbleshowlabelsinfront_;
  bool tschchartseriesdefaultshowlabelsinfront_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubblevaluelabelsaxis_;
  bool tschchartseriesmixedshowvaluelabels_;
  bool tschchartseriespieshowvaluelabels_;
  bool tschchartseriesscattershowvaluelabels_;
  bool tschchartseriesareastacklabels_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscattervaluelabelsaxis_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriespieenablecalloutline_;
  float tschchartseriespielabelexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesareaenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbarenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesbubbleenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslineenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesscatterenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedareaenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesstackedbarenablecalloutline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesdefaultenablecalloutline_;
  bool tschchartseriesbarstacklabels_;
  bool tschchartseriesbubblestacklabels_;
  bool tschchartseriesdefaultstacklabels_;
  bool tschchartserieslinestacklabels_;
  bool tschchartseriespiestacklabels_;
  bool tschchartseriesscatterstacklabels_;
  bool tschchartseriesstackedareastacklabels_;
  bool tschchartseriesstackedbarstacklabels_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLineStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ReferenceLineStyleArchive) */ {
 public:
  inline ReferenceLineStyleArchive() : ReferenceLineStyleArchive(nullptr) {}
  ~ReferenceLineStyleArchive() override;
  explicit constexpr ReferenceLineStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLineStyleArchive(const ReferenceLineStyleArchive& from);
  ReferenceLineStyleArchive(ReferenceLineStyleArchive&& from) noexcept
    : ReferenceLineStyleArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceLineStyleArchive& operator=(const ReferenceLineStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLineStyleArchive& operator=(ReferenceLineStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLineStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceLineStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineStyleArchive*>(
               &_ReferenceLineStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReferenceLineStyleArchive& a, ReferenceLineStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLineStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLineStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceLineStyleArchive* New() const final {
    return new ReferenceLineStyleArchive();
  }

  ReferenceLineStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceLineStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLineStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReferenceLineStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ReferenceLineStyleArchive";
  }
  protected:
  explicit ReferenceLineStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschreferencelinedefaultstrokeFieldNumber = 1,
    kTschreferencelinedefaultshadowFieldNumber = 2,
    kTschreferencelinedefaultlabelparagraphstyleindexFieldNumber = 3,
    kTschreferencelinedefaultvaluelabelparagraphstyleindexFieldNumber = 4,
  };
  // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
  bool has_tschreferencelinedefaultstroke() const;
  private:
  bool _internal_has_tschreferencelinedefaultstroke() const;
  public:
  void clear_tschreferencelinedefaultstroke();
  const ::TSD::StrokeArchive& tschreferencelinedefaultstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschreferencelinedefaultstroke();
  ::TSD::StrokeArchive* mutable_tschreferencelinedefaultstroke();
  void set_allocated_tschreferencelinedefaultstroke(::TSD::StrokeArchive* tschreferencelinedefaultstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschreferencelinedefaultstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschreferencelinedefaultstroke();
  public:
  void unsafe_arena_set_allocated_tschreferencelinedefaultstroke(
      ::TSD::StrokeArchive* tschreferencelinedefaultstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschreferencelinedefaultstroke();

  // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
  bool has_tschreferencelinedefaultshadow() const;
  private:
  bool _internal_has_tschreferencelinedefaultshadow() const;
  public:
  void clear_tschreferencelinedefaultshadow();
  const ::TSD::ShadowArchive& tschreferencelinedefaultshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschreferencelinedefaultshadow();
  ::TSD::ShadowArchive* mutable_tschreferencelinedefaultshadow();
  void set_allocated_tschreferencelinedefaultshadow(::TSD::ShadowArchive* tschreferencelinedefaultshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschreferencelinedefaultshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschreferencelinedefaultshadow();
  public:
  void unsafe_arena_set_allocated_tschreferencelinedefaultshadow(
      ::TSD::ShadowArchive* tschreferencelinedefaultshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschreferencelinedefaultshadow();

  // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
  bool has_tschreferencelinedefaultlabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschreferencelinedefaultlabelparagraphstyleindex() const;
  public:
  void clear_tschreferencelinedefaultlabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinedefaultlabelparagraphstyleindex() const;
  void set_tschreferencelinedefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschreferencelinedefaultlabelparagraphstyleindex() const;
  void _internal_set_tschreferencelinedefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
  bool has_tschreferencelinedefaultvaluelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschreferencelinedefaultvaluelabelparagraphstyleindex() const;
  public:
  void clear_tschreferencelinedefaultvaluelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinedefaultvaluelabelparagraphstyleindex() const;
  void set_tschreferencelinedefaultvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschreferencelinedefaultvaluelabelparagraphstyleindex() const;
  void _internal_set_tschreferencelinedefaultvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ReferenceLineStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ReferenceLineStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ReferenceLineStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::StrokeArchive* tschreferencelinedefaultstroke_;
  ::TSD::ShadowArchive* tschreferencelinedefaultshadow_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinedefaultlabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinedefaultvaluelabelparagraphstyleindex_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLineNonStyleArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ReferenceLineNonStyleArchive) */ {
 public:
  inline ReferenceLineNonStyleArchive() : ReferenceLineNonStyleArchive(nullptr) {}
  ~ReferenceLineNonStyleArchive() override;
  explicit constexpr ReferenceLineNonStyleArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLineNonStyleArchive(const ReferenceLineNonStyleArchive& from);
  ReferenceLineNonStyleArchive(ReferenceLineNonStyleArchive&& from) noexcept
    : ReferenceLineNonStyleArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceLineNonStyleArchive& operator=(const ReferenceLineNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLineNonStyleArchive& operator=(ReferenceLineNonStyleArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLineNonStyleArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceLineNonStyleArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineNonStyleArchive*>(
               &_ReferenceLineNonStyleArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReferenceLineNonStyleArchive& a, ReferenceLineNonStyleArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLineNonStyleArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLineNonStyleArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceLineNonStyleArchive* New() const final {
    return new ReferenceLineNonStyleArchive();
  }

  ReferenceLineNonStyleArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceLineNonStyleArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLineNonStyleArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReferenceLineNonStyleArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineNonStyleArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ReferenceLineNonStyleArchive";
  }
  protected:
  explicit ReferenceLineNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschreferencelinedefaultlabelFieldNumber = 5,
    kTschreferencelinedefaultcustomvalueFieldNumber = 6,
    kTschreferencelinedefaulttypeFieldNumber = 1,
    kTschreferencelinedefaultshowlabelFieldNumber = 3,
    kTschreferencelinedefaultshowlineFieldNumber = 2,
    kTschreferencelinedefaultshowvaluelabelFieldNumber = 4,
  };
  // optional string tschreferencelinedefaultlabel = 5;
  bool has_tschreferencelinedefaultlabel() const;
  private:
  bool _internal_has_tschreferencelinedefaultlabel() const;
  public:
  void clear_tschreferencelinedefaultlabel();
  const std::string& tschreferencelinedefaultlabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschreferencelinedefaultlabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschreferencelinedefaultlabel();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschreferencelinedefaultlabel();
  void set_allocated_tschreferencelinedefaultlabel(std::string* tschreferencelinedefaultlabel);
  private:
  const std::string& _internal_tschreferencelinedefaultlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschreferencelinedefaultlabel(const std::string& value);
  std::string* _internal_mutable_tschreferencelinedefaultlabel();
  public:

  // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
  bool has_tschreferencelinedefaultcustomvalue() const;
  private:
  bool _internal_has_tschreferencelinedefaultcustomvalue() const;
  public:
  void clear_tschreferencelinedefaultcustomvalue();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschreferencelinedefaultcustomvalue() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschreferencelinedefaultcustomvalue();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschreferencelinedefaultcustomvalue();
  void set_allocated_tschreferencelinedefaultcustomvalue(::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinedefaultcustomvalue);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschreferencelinedefaultcustomvalue() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschreferencelinedefaultcustomvalue();
  public:
  void unsafe_arena_set_allocated_tschreferencelinedefaultcustomvalue(
      ::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinedefaultcustomvalue);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschreferencelinedefaultcustomvalue();

  // optional int32 tschreferencelinedefaulttype = 1;
  bool has_tschreferencelinedefaulttype() const;
  private:
  bool _internal_has_tschreferencelinedefaulttype() const;
  public:
  void clear_tschreferencelinedefaulttype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinedefaulttype() const;
  void set_tschreferencelinedefaulttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschreferencelinedefaulttype() const;
  void _internal_set_tschreferencelinedefaulttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschreferencelinedefaultshowlabel = 3;
  bool has_tschreferencelinedefaultshowlabel() const;
  private:
  bool _internal_has_tschreferencelinedefaultshowlabel() const;
  public:
  void clear_tschreferencelinedefaultshowlabel();
  bool tschreferencelinedefaultshowlabel() const;
  void set_tschreferencelinedefaultshowlabel(bool value);
  private:
  bool _internal_tschreferencelinedefaultshowlabel() const;
  void _internal_set_tschreferencelinedefaultshowlabel(bool value);
  public:

  // optional bool tschreferencelinedefaultshowline = 2;
  bool has_tschreferencelinedefaultshowline() const;
  private:
  bool _internal_has_tschreferencelinedefaultshowline() const;
  public:
  void clear_tschreferencelinedefaultshowline();
  bool tschreferencelinedefaultshowline() const;
  void set_tschreferencelinedefaultshowline(bool value);
  private:
  bool _internal_tschreferencelinedefaultshowline() const;
  void _internal_set_tschreferencelinedefaultshowline(bool value);
  public:

  // optional bool tschreferencelinedefaultshowvaluelabel = 4;
  bool has_tschreferencelinedefaultshowvaluelabel() const;
  private:
  bool _internal_has_tschreferencelinedefaultshowvaluelabel() const;
  public:
  void clear_tschreferencelinedefaultshowvaluelabel();
  bool tschreferencelinedefaultshowvaluelabel() const;
  void set_tschreferencelinedefaultshowvaluelabel(bool value);
  private:
  bool _internal_tschreferencelinedefaultshowvaluelabel() const;
  void _internal_set_tschreferencelinedefaultshowvaluelabel(bool value);
  public:

  static const int kCurrentFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ReferenceLineNonStyleArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ReferenceLineNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ReferenceLineNonStyleArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschreferencelinedefaultlabel_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinedefaultcustomvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinedefaulttype_;
  bool tschreferencelinedefaultshowlabel_;
  bool tschreferencelinedefaultshowline_;
  bool tschreferencelinedefaultshowvaluelabel_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartGenericPropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartGenericPropertyMapArchive) */ {
 public:
  inline ChartGenericPropertyMapArchive() : ChartGenericPropertyMapArchive(nullptr) {}
  ~ChartGenericPropertyMapArchive() override;
  explicit constexpr ChartGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGenericPropertyMapArchive(const ChartGenericPropertyMapArchive& from);
  ChartGenericPropertyMapArchive(ChartGenericPropertyMapArchive&& from) noexcept
    : ChartGenericPropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline ChartGenericPropertyMapArchive& operator=(const ChartGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGenericPropertyMapArchive& operator=(ChartGenericPropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGenericPropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGenericPropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const ChartGenericPropertyMapArchive*>(
               &_ChartGenericPropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChartGenericPropertyMapArchive& a, ChartGenericPropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGenericPropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGenericPropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartGenericPropertyMapArchive* New() const final {
    return new ChartGenericPropertyMapArchive();
  }

  ChartGenericPropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartGenericPropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGenericPropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartGenericPropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGenericPropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartGenericPropertyMapArchive";
  }
  protected:
  explicit ChartGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartinfotitleFieldNumber = 35,
    kTschchartinfo3DlightingpackageFieldNumber = 5,
    kTschchartinfo3DrotationFieldNumber = 6,
    kTschchartinfo3DscaleFieldNumber = 7,
    kTschchartinfo3DviewportFieldNumber = 8,
    kTschchartinfobackgroundfillFieldNumber = 9,
    kTschchartinfobackgroundstrokeFieldNumber = 10,
    kTschchartinfobordershadowFieldNumber = 12,
    kTschchartinfoborderstrokeFieldNumber = 13,
    kTschchartinfogridbackgroundfillFieldNumber = 21,
    kTschchartinfotitlecolorFieldNumber = 34,
    kTschchartinfo3DbarshapeFieldNumber = 1,
    kTschchartinfo3DchartopacityFieldNumber = 3,
    kTschchartinfo3DintersetdepthgapFieldNumber = 4,
    kTschchartinfoborderopacityFieldNumber = 11,
    kTschchartinfo3DbeveledgesFieldNumber = 2,
    kTschchartinfocombinelayersFieldNumber = 15,
    kTschchartinfodeprecatedroundedcornerouterendonlyFieldNumber = 16,
    kTschchartinfodonutplacetitleatcenterFieldNumber = 20,
    kTschchartinfocalloutlinetypeFieldNumber = 14,
    kTschchartinfodeprecatedroundedcornerradiusFieldNumber = 17,
    kTschchartinfodatasetnamelocationFieldNumber = 18,
    kTschchartinfodatasetnameparagraphstyleindexFieldNumber = 19,
    kTschchartinfogridbackgroundopacityFieldNumber = 22,
    kTschchartinfoinnerradiusFieldNumber = 23,
    kTschchartinfointerbargapFieldNumber = 24,
    kTschchartinfointersetgapFieldNumber = 25,
    kTschchartinfomultidatacontroltypeFieldNumber = 26,
    kTschchartinfopiestartangleFieldNumber = 27,
    kTschchartinforoundedcornerradiusFieldNumber = 29,
    kTschchartinforoundedcornerouterendonlyFieldNumber = 28,
    kTschchartinfoshowborderFieldNumber = 30,
    kTschchartinfoshowlegendFieldNumber = 31,
    kTschchartinfoshowtitleFieldNumber = 32,
    kTschchartinfoskiphiddendataFieldNumber = 33,
    kTschchartinfotitleparagraphstyleindexFieldNumber = 36,
  };
  // optional string tschchartinfotitle = 35;
  bool has_tschchartinfotitle() const;
  private:
  bool _internal_has_tschchartinfotitle() const;
  public:
  void clear_tschchartinfotitle();
  const std::string& tschchartinfotitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartinfotitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartinfotitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartinfotitle();
  void set_allocated_tschchartinfotitle(std::string* tschchartinfotitle);
  private:
  const std::string& _internal_tschchartinfotitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartinfotitle(const std::string& value);
  std::string* _internal_mutable_tschchartinfotitle();
  public:

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
  bool has_tschchartinfo3dlightingpackage() const;
  private:
  bool _internal_has_tschchartinfo3dlightingpackage() const;
  public:
  void clear_tschchartinfo3dlightingpackage();
  const ::TSCH::Chart3DLightingPackageArchive& tschchartinfo3dlightingpackage() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfo3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfo3dlightingpackage();
  void set_allocated_tschchartinfo3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage);
  private:
  const ::TSCH::Chart3DLightingPackageArchive& _internal_tschchartinfo3dlightingpackage() const;
  ::TSCH::Chart3DLightingPackageArchive* _internal_mutable_tschchartinfo3dlightingpackage();
  public:
  void unsafe_arena_set_allocated_tschchartinfo3dlightingpackage(
      ::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage);
  ::TSCH::Chart3DLightingPackageArchive* unsafe_arena_release_tschchartinfo3dlightingpackage();

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
  bool has_tschchartinfo3drotation() const;
  private:
  bool _internal_has_tschchartinfo3drotation() const;
  public:
  void clear_tschchartinfo3drotation();
  const ::TSCH::Chart3DVectorArchive& tschchartinfo3drotation() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfo3drotation();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfo3drotation();
  void set_allocated_tschchartinfo3drotation(::TSCH::Chart3DVectorArchive* tschchartinfo3drotation);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfo3drotation() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfo3drotation();
  public:
  void unsafe_arena_set_allocated_tschchartinfo3drotation(
      ::TSCH::Chart3DVectorArchive* tschchartinfo3drotation);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfo3drotation();

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
  bool has_tschchartinfo3dscale() const;
  private:
  bool _internal_has_tschchartinfo3dscale() const;
  public:
  void clear_tschchartinfo3dscale();
  const ::TSCH::Chart3DVectorArchive& tschchartinfo3dscale() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfo3dscale();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfo3dscale();
  void set_allocated_tschchartinfo3dscale(::TSCH::Chart3DVectorArchive* tschchartinfo3dscale);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfo3dscale() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfo3dscale();
  public:
  void unsafe_arena_set_allocated_tschchartinfo3dscale(
      ::TSCH::Chart3DVectorArchive* tschchartinfo3dscale);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfo3dscale();

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
  bool has_tschchartinfo3dviewport() const;
  private:
  bool _internal_has_tschchartinfo3dviewport() const;
  public:
  void clear_tschchartinfo3dviewport();
  const ::TSCH::Chart3DVectorArchive& tschchartinfo3dviewport() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::Chart3DVectorArchive* release_tschchartinfo3dviewport();
  ::TSCH::Chart3DVectorArchive* mutable_tschchartinfo3dviewport();
  void set_allocated_tschchartinfo3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport);
  private:
  const ::TSCH::Chart3DVectorArchive& _internal_tschchartinfo3dviewport() const;
  ::TSCH::Chart3DVectorArchive* _internal_mutable_tschchartinfo3dviewport();
  public:
  void unsafe_arena_set_allocated_tschchartinfo3dviewport(
      ::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport);
  ::TSCH::Chart3DVectorArchive* unsafe_arena_release_tschchartinfo3dviewport();

  // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
  bool has_tschchartinfobackgroundfill() const;
  private:
  bool _internal_has_tschchartinfobackgroundfill() const;
  public:
  void clear_tschchartinfobackgroundfill();
  const ::TSD::FillArchive& tschchartinfobackgroundfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartinfobackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfobackgroundfill();
  void set_allocated_tschchartinfobackgroundfill(::TSD::FillArchive* tschchartinfobackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfobackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfobackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfobackgroundfill(
      ::TSD::FillArchive* tschchartinfobackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfobackgroundfill();

  // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
  bool has_tschchartinfobackgroundstroke() const;
  private:
  bool _internal_has_tschchartinfobackgroundstroke() const;
  public:
  void clear_tschchartinfobackgroundstroke();
  const ::TSD::StrokeArchive& tschchartinfobackgroundstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartinfobackgroundstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfobackgroundstroke();
  void set_allocated_tschchartinfobackgroundstroke(::TSD::StrokeArchive* tschchartinfobackgroundstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfobackgroundstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfobackgroundstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfobackgroundstroke(
      ::TSD::StrokeArchive* tschchartinfobackgroundstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfobackgroundstroke();

  // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
  bool has_tschchartinfobordershadow() const;
  private:
  bool _internal_has_tschchartinfobordershadow() const;
  public:
  void clear_tschchartinfobordershadow();
  const ::TSD::ShadowArchive& tschchartinfobordershadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartinfobordershadow();
  ::TSD::ShadowArchive* mutable_tschchartinfobordershadow();
  void set_allocated_tschchartinfobordershadow(::TSD::ShadowArchive* tschchartinfobordershadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartinfobordershadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartinfobordershadow();
  public:
  void unsafe_arena_set_allocated_tschchartinfobordershadow(
      ::TSD::ShadowArchive* tschchartinfobordershadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartinfobordershadow();

  // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
  bool has_tschchartinfoborderstroke() const;
  private:
  bool _internal_has_tschchartinfoborderstroke() const;
  public:
  void clear_tschchartinfoborderstroke();
  const ::TSD::StrokeArchive& tschchartinfoborderstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartinfoborderstroke();
  ::TSD::StrokeArchive* mutable_tschchartinfoborderstroke();
  void set_allocated_tschchartinfoborderstroke(::TSD::StrokeArchive* tschchartinfoborderstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartinfoborderstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartinfoborderstroke();
  public:
  void unsafe_arena_set_allocated_tschchartinfoborderstroke(
      ::TSD::StrokeArchive* tschchartinfoborderstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartinfoborderstroke();

  // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
  bool has_tschchartinfogridbackgroundfill() const;
  private:
  bool _internal_has_tschchartinfogridbackgroundfill() const;
  public:
  void clear_tschchartinfogridbackgroundfill();
  const ::TSD::FillArchive& tschchartinfogridbackgroundfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartinfogridbackgroundfill();
  ::TSD::FillArchive* mutable_tschchartinfogridbackgroundfill();
  void set_allocated_tschchartinfogridbackgroundfill(::TSD::FillArchive* tschchartinfogridbackgroundfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartinfogridbackgroundfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartinfogridbackgroundfill();
  public:
  void unsafe_arena_set_allocated_tschchartinfogridbackgroundfill(
      ::TSD::FillArchive* tschchartinfogridbackgroundfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartinfogridbackgroundfill();

  // optional .TSP.Color tschchartinfotitlecolor = 34;
  bool has_tschchartinfotitlecolor() const;
  private:
  bool _internal_has_tschchartinfotitlecolor() const;
  public:
  void clear_tschchartinfotitlecolor();
  const ::TSP::Color& tschchartinfotitlecolor() const;
  PROTOBUF_MUST_USE_RESULT ::TSP::Color* release_tschchartinfotitlecolor();
  ::TSP::Color* mutable_tschchartinfotitlecolor();
  void set_allocated_tschchartinfotitlecolor(::TSP::Color* tschchartinfotitlecolor);
  private:
  const ::TSP::Color& _internal_tschchartinfotitlecolor() const;
  ::TSP::Color* _internal_mutable_tschchartinfotitlecolor();
  public:
  void unsafe_arena_set_allocated_tschchartinfotitlecolor(
      ::TSP::Color* tschchartinfotitlecolor);
  ::TSP::Color* unsafe_arena_release_tschchartinfotitlecolor();

  // optional int32 tschchartinfo3dbarshape = 1;
  bool has_tschchartinfo3dbarshape() const;
  private:
  bool _internal_has_tschchartinfo3dbarshape() const;
  public:
  void clear_tschchartinfo3dbarshape();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfo3dbarshape() const;
  void set_tschchartinfo3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfo3dbarshape() const;
  void _internal_set_tschchartinfo3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfo3dchartopacity = 3;
  bool has_tschchartinfo3dchartopacity() const;
  private:
  bool _internal_has_tschchartinfo3dchartopacity() const;
  public:
  void clear_tschchartinfo3dchartopacity();
  float tschchartinfo3dchartopacity() const;
  void set_tschchartinfo3dchartopacity(float value);
  private:
  float _internal_tschchartinfo3dchartopacity() const;
  void _internal_set_tschchartinfo3dchartopacity(float value);
  public:

  // optional float tschchartinfo3dintersetdepthgap = 4;
  bool has_tschchartinfo3dintersetdepthgap() const;
  private:
  bool _internal_has_tschchartinfo3dintersetdepthgap() const;
  public:
  void clear_tschchartinfo3dintersetdepthgap();
  float tschchartinfo3dintersetdepthgap() const;
  void set_tschchartinfo3dintersetdepthgap(float value);
  private:
  float _internal_tschchartinfo3dintersetdepthgap() const;
  void _internal_set_tschchartinfo3dintersetdepthgap(float value);
  public:

  // optional float tschchartinfoborderopacity = 11;
  bool has_tschchartinfoborderopacity() const;
  private:
  bool _internal_has_tschchartinfoborderopacity() const;
  public:
  void clear_tschchartinfoborderopacity();
  float tschchartinfoborderopacity() const;
  void set_tschchartinfoborderopacity(float value);
  private:
  float _internal_tschchartinfoborderopacity() const;
  void _internal_set_tschchartinfoborderopacity(float value);
  public:

  // optional bool tschchartinfo3dbeveledges = 2;
  bool has_tschchartinfo3dbeveledges() const;
  private:
  bool _internal_has_tschchartinfo3dbeveledges() const;
  public:
  void clear_tschchartinfo3dbeveledges();
  bool tschchartinfo3dbeveledges() const;
  void set_tschchartinfo3dbeveledges(bool value);
  private:
  bool _internal_tschchartinfo3dbeveledges() const;
  void _internal_set_tschchartinfo3dbeveledges(bool value);
  public:

  // optional bool tschchartinfocombinelayers = 15;
  bool has_tschchartinfocombinelayers() const;
  private:
  bool _internal_has_tschchartinfocombinelayers() const;
  public:
  void clear_tschchartinfocombinelayers();
  bool tschchartinfocombinelayers() const;
  void set_tschchartinfocombinelayers(bool value);
  private:
  bool _internal_tschchartinfocombinelayers() const;
  void _internal_set_tschchartinfocombinelayers(bool value);
  public:

  // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
  bool has_tschchartinfodeprecatedroundedcornerouterendonly() const;
  private:
  bool _internal_has_tschchartinfodeprecatedroundedcornerouterendonly() const;
  public:
  void clear_tschchartinfodeprecatedroundedcornerouterendonly();
  bool tschchartinfodeprecatedroundedcornerouterendonly() const;
  void set_tschchartinfodeprecatedroundedcornerouterendonly(bool value);
  private:
  bool _internal_tschchartinfodeprecatedroundedcornerouterendonly() const;
  void _internal_set_tschchartinfodeprecatedroundedcornerouterendonly(bool value);
  public:

  // optional bool tschchartinfodonutplacetitleatcenter = 20;
  bool has_tschchartinfodonutplacetitleatcenter() const;
  private:
  bool _internal_has_tschchartinfodonutplacetitleatcenter() const;
  public:
  void clear_tschchartinfodonutplacetitleatcenter();
  bool tschchartinfodonutplacetitleatcenter() const;
  void set_tschchartinfodonutplacetitleatcenter(bool value);
  private:
  bool _internal_tschchartinfodonutplacetitleatcenter() const;
  void _internal_set_tschchartinfodonutplacetitleatcenter(bool value);
  public:

  // optional int32 tschchartinfocalloutlinetype = 14;
  bool has_tschchartinfocalloutlinetype() const;
  private:
  bool _internal_has_tschchartinfocalloutlinetype() const;
  public:
  void clear_tschchartinfocalloutlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfocalloutlinetype() const;
  void set_tschchartinfocalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfocalloutlinetype() const;
  void _internal_set_tschchartinfocalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfodeprecatedroundedcornerradius = 17;
  bool has_tschchartinfodeprecatedroundedcornerradius() const;
  private:
  bool _internal_has_tschchartinfodeprecatedroundedcornerradius() const;
  public:
  void clear_tschchartinfodeprecatedroundedcornerradius();
  float tschchartinfodeprecatedroundedcornerradius() const;
  void set_tschchartinfodeprecatedroundedcornerradius(float value);
  private:
  float _internal_tschchartinfodeprecatedroundedcornerradius() const;
  void _internal_set_tschchartinfodeprecatedroundedcornerradius(float value);
  public:

  // optional int32 tschchartinfodatasetnamelocation = 18;
  bool has_tschchartinfodatasetnamelocation() const;
  private:
  bool _internal_has_tschchartinfodatasetnamelocation() const;
  public:
  void clear_tschchartinfodatasetnamelocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodatasetnamelocation() const;
  void set_tschchartinfodatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodatasetnamelocation() const;
  void _internal_set_tschchartinfodatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
  bool has_tschchartinfodatasetnameparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfodatasetnameparagraphstyleindex() const;
  public:
  void clear_tschchartinfodatasetnameparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodatasetnameparagraphstyleindex() const;
  void set_tschchartinfodatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfodatasetnameparagraphstyleindex() const;
  void _internal_set_tschchartinfodatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfogridbackgroundopacity = 22;
  bool has_tschchartinfogridbackgroundopacity() const;
  private:
  bool _internal_has_tschchartinfogridbackgroundopacity() const;
  public:
  void clear_tschchartinfogridbackgroundopacity();
  float tschchartinfogridbackgroundopacity() const;
  void set_tschchartinfogridbackgroundopacity(float value);
  private:
  float _internal_tschchartinfogridbackgroundopacity() const;
  void _internal_set_tschchartinfogridbackgroundopacity(float value);
  public:

  // optional float tschchartinfoinnerradius = 23;
  bool has_tschchartinfoinnerradius() const;
  private:
  bool _internal_has_tschchartinfoinnerradius() const;
  public:
  void clear_tschchartinfoinnerradius();
  float tschchartinfoinnerradius() const;
  void set_tschchartinfoinnerradius(float value);
  private:
  float _internal_tschchartinfoinnerradius() const;
  void _internal_set_tschchartinfoinnerradius(float value);
  public:

  // optional float tschchartinfointerbargap = 24;
  bool has_tschchartinfointerbargap() const;
  private:
  bool _internal_has_tschchartinfointerbargap() const;
  public:
  void clear_tschchartinfointerbargap();
  float tschchartinfointerbargap() const;
  void set_tschchartinfointerbargap(float value);
  private:
  float _internal_tschchartinfointerbargap() const;
  void _internal_set_tschchartinfointerbargap(float value);
  public:

  // optional float tschchartinfointersetgap = 25;
  bool has_tschchartinfointersetgap() const;
  private:
  bool _internal_has_tschchartinfointersetgap() const;
  public:
  void clear_tschchartinfointersetgap();
  float tschchartinfointersetgap() const;
  void set_tschchartinfointersetgap(float value);
  private:
  float _internal_tschchartinfointersetgap() const;
  void _internal_set_tschchartinfointersetgap(float value);
  public:

  // optional int32 tschchartinfomultidatacontroltype = 26;
  bool has_tschchartinfomultidatacontroltype() const;
  private:
  bool _internal_has_tschchartinfomultidatacontroltype() const;
  public:
  void clear_tschchartinfomultidatacontroltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfomultidatacontroltype() const;
  void set_tschchartinfomultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfomultidatacontroltype() const;
  void _internal_set_tschchartinfomultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartinfopiestartangle = 27;
  bool has_tschchartinfopiestartangle() const;
  private:
  bool _internal_has_tschchartinfopiestartangle() const;
  public:
  void clear_tschchartinfopiestartangle();
  float tschchartinfopiestartangle() const;
  void set_tschchartinfopiestartangle(float value);
  private:
  float _internal_tschchartinfopiestartangle() const;
  void _internal_set_tschchartinfopiestartangle(float value);
  public:

  // optional float tschchartinforoundedcornerradius = 29;
  bool has_tschchartinforoundedcornerradius() const;
  private:
  bool _internal_has_tschchartinforoundedcornerradius() const;
  public:
  void clear_tschchartinforoundedcornerradius();
  float tschchartinforoundedcornerradius() const;
  void set_tschchartinforoundedcornerradius(float value);
  private:
  float _internal_tschchartinforoundedcornerradius() const;
  void _internal_set_tschchartinforoundedcornerradius(float value);
  public:

  // optional bool tschchartinforoundedcornerouterendonly = 28;
  bool has_tschchartinforoundedcornerouterendonly() const;
  private:
  bool _internal_has_tschchartinforoundedcornerouterendonly() const;
  public:
  void clear_tschchartinforoundedcornerouterendonly();
  bool tschchartinforoundedcornerouterendonly() const;
  void set_tschchartinforoundedcornerouterendonly(bool value);
  private:
  bool _internal_tschchartinforoundedcornerouterendonly() const;
  void _internal_set_tschchartinforoundedcornerouterendonly(bool value);
  public:

  // optional bool tschchartinfoshowborder = 30;
  bool has_tschchartinfoshowborder() const;
  private:
  bool _internal_has_tschchartinfoshowborder() const;
  public:
  void clear_tschchartinfoshowborder();
  bool tschchartinfoshowborder() const;
  void set_tschchartinfoshowborder(bool value);
  private:
  bool _internal_tschchartinfoshowborder() const;
  void _internal_set_tschchartinfoshowborder(bool value);
  public:

  // optional bool tschchartinfoshowlegend = 31;
  bool has_tschchartinfoshowlegend() const;
  private:
  bool _internal_has_tschchartinfoshowlegend() const;
  public:
  void clear_tschchartinfoshowlegend();
  bool tschchartinfoshowlegend() const;
  void set_tschchartinfoshowlegend(bool value);
  private:
  bool _internal_tschchartinfoshowlegend() const;
  void _internal_set_tschchartinfoshowlegend(bool value);
  public:

  // optional bool tschchartinfoshowtitle = 32;
  bool has_tschchartinfoshowtitle() const;
  private:
  bool _internal_has_tschchartinfoshowtitle() const;
  public:
  void clear_tschchartinfoshowtitle();
  bool tschchartinfoshowtitle() const;
  void set_tschchartinfoshowtitle(bool value);
  private:
  bool _internal_tschchartinfoshowtitle() const;
  void _internal_set_tschchartinfoshowtitle(bool value);
  public:

  // optional bool tschchartinfoskiphiddendata = 33;
  bool has_tschchartinfoskiphiddendata() const;
  private:
  bool _internal_has_tschchartinfoskiphiddendata() const;
  public:
  void clear_tschchartinfoskiphiddendata();
  bool tschchartinfoskiphiddendata() const;
  void set_tschchartinfoskiphiddendata(bool value);
  private:
  bool _internal_tschchartinfoskiphiddendata() const;
  void _internal_set_tschchartinfoskiphiddendata(bool value);
  public:

  // optional int32 tschchartinfotitleparagraphstyleindex = 36;
  bool has_tschchartinfotitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartinfotitleparagraphstyleindex() const;
  public:
  void clear_tschchartinfotitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfotitleparagraphstyleindex() const;
  void set_tschchartinfotitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartinfotitleparagraphstyleindex() const;
  void _internal_set_tschchartinfotitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartGenericPropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartinfotitle_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage_;
  ::TSCH::Chart3DVectorArchive* tschchartinfo3drotation_;
  ::TSCH::Chart3DVectorArchive* tschchartinfo3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport_;
  ::TSD::FillArchive* tschchartinfobackgroundfill_;
  ::TSD::StrokeArchive* tschchartinfobackgroundstroke_;
  ::TSD::ShadowArchive* tschchartinfobordershadow_;
  ::TSD::StrokeArchive* tschchartinfoborderstroke_;
  ::TSD::FillArchive* tschchartinfogridbackgroundfill_;
  ::TSP::Color* tschchartinfotitlecolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfo3dbarshape_;
  float tschchartinfo3dchartopacity_;
  float tschchartinfo3dintersetdepthgap_;
  float tschchartinfoborderopacity_;
  bool tschchartinfo3dbeveledges_;
  bool tschchartinfocombinelayers_;
  bool tschchartinfodeprecatedroundedcornerouterendonly_;
  bool tschchartinfodonutplacetitleatcenter_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfocalloutlinetype_;
  float tschchartinfodeprecatedroundedcornerradius_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodatasetnamelocation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfodatasetnameparagraphstyleindex_;
  float tschchartinfogridbackgroundopacity_;
  float tschchartinfoinnerradius_;
  float tschchartinfointerbargap_;
  float tschchartinfointersetgap_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfomultidatacontroltype_;
  float tschchartinfopiestartangle_;
  float tschchartinforoundedcornerradius_;
  bool tschchartinforoundedcornerouterendonly_;
  bool tschchartinfoshowborder_;
  bool tschchartinfoshowlegend_;
  bool tschchartinfoshowtitle_;
  bool tschchartinfoskiphiddendata_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartinfotitleparagraphstyleindex_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class LegendGenericPropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.LegendGenericPropertyMapArchive) */ {
 public:
  inline LegendGenericPropertyMapArchive() : LegendGenericPropertyMapArchive(nullptr) {}
  ~LegendGenericPropertyMapArchive() override;
  explicit constexpr LegendGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegendGenericPropertyMapArchive(const LegendGenericPropertyMapArchive& from);
  LegendGenericPropertyMapArchive(LegendGenericPropertyMapArchive&& from) noexcept
    : LegendGenericPropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline LegendGenericPropertyMapArchive& operator=(const LegendGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegendGenericPropertyMapArchive& operator=(LegendGenericPropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegendGenericPropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegendGenericPropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const LegendGenericPropertyMapArchive*>(
               &_LegendGenericPropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LegendGenericPropertyMapArchive& a, LegendGenericPropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(LegendGenericPropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegendGenericPropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LegendGenericPropertyMapArchive* New() const final {
    return new LegendGenericPropertyMapArchive();
  }

  LegendGenericPropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LegendGenericPropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LegendGenericPropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LegendGenericPropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegendGenericPropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.LegendGenericPropertyMapArchive";
  }
  protected:
  explicit LegendGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschlegendmodelfillFieldNumber = 1,
    kTschlegendmodelshadowFieldNumber = 4,
    kTschlegendmodelstrokeFieldNumber = 5,
    kTschlegendmodellabelparagraphstyleindexFieldNumber = 2,
    kTschlegendmodelopacityFieldNumber = 3,
  };
  // optional .TSD.FillArchive tschlegendmodelfill = 1;
  bool has_tschlegendmodelfill() const;
  private:
  bool _internal_has_tschlegendmodelfill() const;
  public:
  void clear_tschlegendmodelfill();
  const ::TSD::FillArchive& tschlegendmodelfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschlegendmodelfill();
  ::TSD::FillArchive* mutable_tschlegendmodelfill();
  void set_allocated_tschlegendmodelfill(::TSD::FillArchive* tschlegendmodelfill);
  private:
  const ::TSD::FillArchive& _internal_tschlegendmodelfill() const;
  ::TSD::FillArchive* _internal_mutable_tschlegendmodelfill();
  public:
  void unsafe_arena_set_allocated_tschlegendmodelfill(
      ::TSD::FillArchive* tschlegendmodelfill);
  ::TSD::FillArchive* unsafe_arena_release_tschlegendmodelfill();

  // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
  bool has_tschlegendmodelshadow() const;
  private:
  bool _internal_has_tschlegendmodelshadow() const;
  public:
  void clear_tschlegendmodelshadow();
  const ::TSD::ShadowArchive& tschlegendmodelshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschlegendmodelshadow();
  ::TSD::ShadowArchive* mutable_tschlegendmodelshadow();
  void set_allocated_tschlegendmodelshadow(::TSD::ShadowArchive* tschlegendmodelshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschlegendmodelshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschlegendmodelshadow();
  public:
  void unsafe_arena_set_allocated_tschlegendmodelshadow(
      ::TSD::ShadowArchive* tschlegendmodelshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschlegendmodelshadow();

  // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
  bool has_tschlegendmodelstroke() const;
  private:
  bool _internal_has_tschlegendmodelstroke() const;
  public:
  void clear_tschlegendmodelstroke();
  const ::TSD::StrokeArchive& tschlegendmodelstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschlegendmodelstroke();
  ::TSD::StrokeArchive* mutable_tschlegendmodelstroke();
  void set_allocated_tschlegendmodelstroke(::TSD::StrokeArchive* tschlegendmodelstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschlegendmodelstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschlegendmodelstroke();
  public:
  void unsafe_arena_set_allocated_tschlegendmodelstroke(
      ::TSD::StrokeArchive* tschlegendmodelstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschlegendmodelstroke();

  // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
  bool has_tschlegendmodellabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschlegendmodellabelparagraphstyleindex() const;
  public:
  void clear_tschlegendmodellabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschlegendmodellabelparagraphstyleindex() const;
  void set_tschlegendmodellabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschlegendmodellabelparagraphstyleindex() const;
  void _internal_set_tschlegendmodellabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschlegendmodelopacity = 3;
  bool has_tschlegendmodelopacity() const;
  private:
  bool _internal_has_tschlegendmodelopacity() const;
  public:
  void clear_tschlegendmodelopacity();
  float tschlegendmodelopacity() const;
  void set_tschlegendmodelopacity(float value);
  private:
  float _internal_tschlegendmodelopacity() const;
  void _internal_set_tschlegendmodelopacity(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendGenericPropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSD::FillArchive* tschlegendmodelfill_;
  ::TSD::ShadowArchive* tschlegendmodelshadow_;
  ::TSD::StrokeArchive* tschlegendmodelstroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschlegendmodellabelparagraphstyleindex_;
  float tschlegendmodelopacity_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisGenericPropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartAxisGenericPropertyMapArchive) */ {
 public:
  inline ChartAxisGenericPropertyMapArchive() : ChartAxisGenericPropertyMapArchive(nullptr) {}
  ~ChartAxisGenericPropertyMapArchive() override;
  explicit constexpr ChartAxisGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisGenericPropertyMapArchive(const ChartAxisGenericPropertyMapArchive& from);
  ChartAxisGenericPropertyMapArchive(ChartAxisGenericPropertyMapArchive&& from) noexcept
    : ChartAxisGenericPropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisGenericPropertyMapArchive& operator=(const ChartAxisGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisGenericPropertyMapArchive& operator=(ChartAxisGenericPropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisGenericPropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisGenericPropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisGenericPropertyMapArchive*>(
               &_ChartAxisGenericPropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChartAxisGenericPropertyMapArchive& a, ChartAxisGenericPropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisGenericPropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisGenericPropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartAxisGenericPropertyMapArchive* New() const final {
    return new ChartAxisGenericPropertyMapArchive();
  }

  ChartAxisGenericPropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartAxisGenericPropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisGenericPropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartAxisGenericPropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisGenericPropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartAxisGenericPropertyMapArchive";
  }
  protected:
  explicit ChartAxisGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartaxistitleFieldNumber = 35,
    kTschchartaxis10DateformatFieldNumber = 1,
    kTschchartaxis10NumberformatFieldNumber = 2,
    kTschchartaxis3DgridlinestrokeFieldNumber = 4,
    kTschchartaxisdateformatFieldNumber = 6,
    kTschchartaxisdurationformatFieldNumber = 7,
    kTschchartaxismajorgridlineshadowFieldNumber = 12,
    kTschchartaxismajorgridlinestrokeFieldNumber = 13,
    kTschchartaxisminorgridlineshadowFieldNumber = 15,
    kTschchartaxisminorgridlinestrokeFieldNumber = 16,
    kTschchartaxisnumberformatFieldNumber = 17,
    kTschchartaxisusermaxFieldNumber = 37,
    kTschchartaxisuserminFieldNumber = 38,
    kTschchartaxis3DgridlineopacityFieldNumber = 3,
    kTschchartaxis3DlabelpositionFieldNumber = 5,
    kTschchartaxishorizontalspacingFieldNumber = 8,
    kTschchartaxislabelparagraphstyleindexFieldNumber = 9,
    kTschchartaxislabelsorientationFieldNumber = 10,
    kTschchartaxismajorgridlineopacityFieldNumber = 11,
    kTschchartaxisminorgridlineopacityFieldNumber = 14,
    kTschchartaxisnumberformattypeFieldNumber = 18,
    kTschchartaxisnumberofdecadesFieldNumber = 19,
    kTschchartaxisnumberofmajorgridlinesFieldNumber = 20,
    kTschchartaxisnumberofminorgridlinesFieldNumber = 21,
    kTschchartaxisscaleFieldNumber = 23,
    kTschchartaxisplottoedgesFieldNumber = 22,
    kTschchartaxisshowaxisFieldNumber = 24,
    kTschchartaxisshowlabelsFieldNumber = 25,
    kTschchartaxisshowlastlabelFieldNumber = 26,
    kTschchartaxisshowmajorgridlinesFieldNumber = 27,
    kTschchartaxisshowmajortickmarksFieldNumber = 28,
    kTschchartaxisshowminimumlabelFieldNumber = 29,
    kTschchartaxisshowminorgridlinesFieldNumber = 30,
    kTschchartaxisshowminortickmarksFieldNumber = 31,
    kTschchartaxisshowserieslabelsFieldNumber = 32,
    kTschchartaxisshowtitleFieldNumber = 33,
    kTschchartaxistickmarklocationFieldNumber = 34,
    kTschchartaxistitleparagraphstyleindexFieldNumber = 36,
    kTschchartaxisverticalspacingFieldNumber = 39,
  };
  // optional string tschchartaxistitle = 35;
  bool has_tschchartaxistitle() const;
  private:
  bool _internal_has_tschchartaxistitle() const;
  public:
  void clear_tschchartaxistitle();
  const std::string& tschchartaxistitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartaxistitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartaxistitle();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartaxistitle();
  void set_allocated_tschchartaxistitle(std::string* tschchartaxistitle);
  private:
  const std::string& _internal_tschchartaxistitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartaxistitle(const std::string& value);
  std::string* _internal_mutable_tschchartaxistitle();
  public:

  // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
  bool has_tschchartaxis1_0dateformat() const;
  private:
  bool _internal_has_tschchartaxis1_0dateformat() const;
  public:
  void clear_tschchartaxis1_0dateformat();
  const ::TSK::FormatStructArchive& tschchartaxis1_0dateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxis1_0dateformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxis1_0dateformat();
  void set_allocated_tschchartaxis1_0dateformat(::TSK::FormatStructArchive* tschchartaxis1_0dateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxis1_0dateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxis1_0dateformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxis1_0dateformat(
      ::TSK::FormatStructArchive* tschchartaxis1_0dateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxis1_0dateformat();

  // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
  bool has_tschchartaxis1_0numberformat() const;
  private:
  bool _internal_has_tschchartaxis1_0numberformat() const;
  public:
  void clear_tschchartaxis1_0numberformat();
  const ::TSK::FormatStructArchive& tschchartaxis1_0numberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxis1_0numberformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxis1_0numberformat();
  void set_allocated_tschchartaxis1_0numberformat(::TSK::FormatStructArchive* tschchartaxis1_0numberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxis1_0numberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxis1_0numberformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxis1_0numberformat(
      ::TSK::FormatStructArchive* tschchartaxis1_0numberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxis1_0numberformat();

  // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
  bool has_tschchartaxis3dgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxis3dgridlinestroke() const;
  public:
  void clear_tschchartaxis3dgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxis3dgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxis3dgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxis3dgridlinestroke();
  void set_allocated_tschchartaxis3dgridlinestroke(::TSD::StrokeArchive* tschchartaxis3dgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxis3dgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxis3dgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxis3dgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxis3dgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxis3dgridlinestroke();

  // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
  bool has_tschchartaxisdateformat() const;
  private:
  bool _internal_has_tschchartaxisdateformat() const;
  public:
  void clear_tschchartaxisdateformat();
  const ::TSK::FormatStructArchive& tschchartaxisdateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdateformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdateformat();
  void set_allocated_tschchartaxisdateformat(::TSK::FormatStructArchive* tschchartaxisdateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdateformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdateformat(
      ::TSK::FormatStructArchive* tschchartaxisdateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdateformat();

  // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
  bool has_tschchartaxisdurationformat() const;
  private:
  bool _internal_has_tschchartaxisdurationformat() const;
  public:
  void clear_tschchartaxisdurationformat();
  const ::TSK::FormatStructArchive& tschchartaxisdurationformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisdurationformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisdurationformat();
  void set_allocated_tschchartaxisdurationformat(::TSK::FormatStructArchive* tschchartaxisdurationformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisdurationformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisdurationformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisdurationformat(
      ::TSK::FormatStructArchive* tschchartaxisdurationformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisdurationformat();

  // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 12;
  bool has_tschchartaxismajorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxismajorgridlineshadow() const;
  public:
  void clear_tschchartaxismajorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxismajorgridlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxismajorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxismajorgridlineshadow();
  void set_allocated_tschchartaxismajorgridlineshadow(::TSD::ShadowArchive* tschchartaxismajorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxismajorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxismajorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxismajorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxismajorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxismajorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 13;
  bool has_tschchartaxismajorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxismajorgridlinestroke() const;
  public:
  void clear_tschchartaxismajorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxismajorgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxismajorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxismajorgridlinestroke();
  void set_allocated_tschchartaxismajorgridlinestroke(::TSD::StrokeArchive* tschchartaxismajorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxismajorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxismajorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxismajorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxismajorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxismajorgridlinestroke();

  // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 15;
  bool has_tschchartaxisminorgridlineshadow() const;
  private:
  bool _internal_has_tschchartaxisminorgridlineshadow() const;
  public:
  void clear_tschchartaxisminorgridlineshadow();
  const ::TSD::ShadowArchive& tschchartaxisminorgridlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartaxisminorgridlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartaxisminorgridlineshadow();
  void set_allocated_tschchartaxisminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisminorgridlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartaxisminorgridlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartaxisminorgridlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartaxisminorgridlineshadow(
      ::TSD::ShadowArchive* tschchartaxisminorgridlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartaxisminorgridlineshadow();

  // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 16;
  bool has_tschchartaxisminorgridlinestroke() const;
  private:
  bool _internal_has_tschchartaxisminorgridlinestroke() const;
  public:
  void clear_tschchartaxisminorgridlinestroke();
  const ::TSD::StrokeArchive& tschchartaxisminorgridlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartaxisminorgridlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartaxisminorgridlinestroke();
  void set_allocated_tschchartaxisminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisminorgridlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartaxisminorgridlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartaxisminorgridlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartaxisminorgridlinestroke(
      ::TSD::StrokeArchive* tschchartaxisminorgridlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartaxisminorgridlinestroke();

  // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 17;
  bool has_tschchartaxisnumberformat() const;
  private:
  bool _internal_has_tschchartaxisnumberformat() const;
  public:
  void clear_tschchartaxisnumberformat();
  const ::TSK::FormatStructArchive& tschchartaxisnumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartaxisnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartaxisnumberformat();
  void set_allocated_tschchartaxisnumberformat(::TSK::FormatStructArchive* tschchartaxisnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartaxisnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartaxisnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartaxisnumberformat(
      ::TSK::FormatStructArchive* tschchartaxisnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartaxisnumberformat();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 37;
  bool has_tschchartaxisusermax() const;
  private:
  bool _internal_has_tschchartaxisusermax() const;
  public:
  void clear_tschchartaxisusermax();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermax() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisusermax();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisusermax();
  void set_allocated_tschchartaxisusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisusermax() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisusermax();
  public:
  void unsafe_arena_set_allocated_tschchartaxisusermax(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisusermax();

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 38;
  bool has_tschchartaxisusermin() const;
  private:
  bool _internal_has_tschchartaxisusermin() const;
  public:
  void clear_tschchartaxisusermin();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermin() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisusermin();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisusermin();
  void set_allocated_tschchartaxisusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschchartaxisusermin() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschchartaxisusermin();
  public:
  void unsafe_arena_set_allocated_tschchartaxisusermin(
      ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschchartaxisusermin();

  // optional float tschchartaxis3dgridlineopacity = 3;
  bool has_tschchartaxis3dgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxis3dgridlineopacity() const;
  public:
  void clear_tschchartaxis3dgridlineopacity();
  float tschchartaxis3dgridlineopacity() const;
  void set_tschchartaxis3dgridlineopacity(float value);
  private:
  float _internal_tschchartaxis3dgridlineopacity() const;
  void _internal_set_tschchartaxis3dgridlineopacity(float value);
  public:

  // optional int32 tschchartaxis3dlabelposition = 5;
  bool has_tschchartaxis3dlabelposition() const;
  private:
  bool _internal_has_tschchartaxis3dlabelposition() const;
  public:
  void clear_tschchartaxis3dlabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxis3dlabelposition() const;
  void set_tschchartaxis3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxis3dlabelposition() const;
  void _internal_set_tschchartaxis3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxishorizontalspacing = 8;
  bool has_tschchartaxishorizontalspacing() const;
  private:
  bool _internal_has_tschchartaxishorizontalspacing() const;
  public:
  void clear_tschchartaxishorizontalspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxishorizontalspacing() const;
  void set_tschchartaxishorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxishorizontalspacing() const;
  void _internal_set_tschchartaxishorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxislabelparagraphstyleindex = 9;
  bool has_tschchartaxislabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxislabelparagraphstyleindex() const;
  public:
  void clear_tschchartaxislabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxislabelparagraphstyleindex() const;
  void set_tschchartaxislabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxislabelparagraphstyleindex() const;
  void _internal_set_tschchartaxislabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartaxislabelsorientation = 10;
  bool has_tschchartaxislabelsorientation() const;
  private:
  bool _internal_has_tschchartaxislabelsorientation() const;
  public:
  void clear_tschchartaxislabelsorientation();
  float tschchartaxislabelsorientation() const;
  void set_tschchartaxislabelsorientation(float value);
  private:
  float _internal_tschchartaxislabelsorientation() const;
  void _internal_set_tschchartaxislabelsorientation(float value);
  public:

  // optional float tschchartaxismajorgridlineopacity = 11;
  bool has_tschchartaxismajorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxismajorgridlineopacity() const;
  public:
  void clear_tschchartaxismajorgridlineopacity();
  float tschchartaxismajorgridlineopacity() const;
  void set_tschchartaxismajorgridlineopacity(float value);
  private:
  float _internal_tschchartaxismajorgridlineopacity() const;
  void _internal_set_tschchartaxismajorgridlineopacity(float value);
  public:

  // optional float tschchartaxisminorgridlineopacity = 14;
  bool has_tschchartaxisminorgridlineopacity() const;
  private:
  bool _internal_has_tschchartaxisminorgridlineopacity() const;
  public:
  void clear_tschchartaxisminorgridlineopacity();
  float tschchartaxisminorgridlineopacity() const;
  void set_tschchartaxisminorgridlineopacity(float value);
  private:
  float _internal_tschchartaxisminorgridlineopacity() const;
  void _internal_set_tschchartaxisminorgridlineopacity(float value);
  public:

  // optional int32 tschchartaxisnumberformattype = 18;
  bool has_tschchartaxisnumberformattype() const;
  private:
  bool _internal_has_tschchartaxisnumberformattype() const;
  public:
  void clear_tschchartaxisnumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberformattype() const;
  void set_tschchartaxisnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisnumberformattype() const;
  void _internal_set_tschchartaxisnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisnumberofdecades = 19;
  bool has_tschchartaxisnumberofdecades() const;
  private:
  bool _internal_has_tschchartaxisnumberofdecades() const;
  public:
  void clear_tschchartaxisnumberofdecades();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberofdecades() const;
  void set_tschchartaxisnumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisnumberofdecades() const;
  void _internal_set_tschchartaxisnumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisnumberofmajorgridlines = 20;
  bool has_tschchartaxisnumberofmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisnumberofmajorgridlines() const;
  public:
  void clear_tschchartaxisnumberofmajorgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberofmajorgridlines() const;
  void set_tschchartaxisnumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisnumberofmajorgridlines() const;
  void _internal_set_tschchartaxisnumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisnumberofminorgridlines = 21;
  bool has_tschchartaxisnumberofminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisnumberofminorgridlines() const;
  public:
  void clear_tschchartaxisnumberofminorgridlines();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberofminorgridlines() const;
  void set_tschchartaxisnumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisnumberofminorgridlines() const;
  void _internal_set_tschchartaxisnumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisscale = 23;
  bool has_tschchartaxisscale() const;
  private:
  bool _internal_has_tschchartaxisscale() const;
  public:
  void clear_tschchartaxisscale();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisscale() const;
  void set_tschchartaxisscale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisscale() const;
  void _internal_set_tschchartaxisscale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartaxisplottoedges = 22;
  bool has_tschchartaxisplottoedges() const;
  private:
  bool _internal_has_tschchartaxisplottoedges() const;
  public:
  void clear_tschchartaxisplottoedges();
  bool tschchartaxisplottoedges() const;
  void set_tschchartaxisplottoedges(bool value);
  private:
  bool _internal_tschchartaxisplottoedges() const;
  void _internal_set_tschchartaxisplottoedges(bool value);
  public:

  // optional bool tschchartaxisshowaxis = 24;
  bool has_tschchartaxisshowaxis() const;
  private:
  bool _internal_has_tschchartaxisshowaxis() const;
  public:
  void clear_tschchartaxisshowaxis();
  bool tschchartaxisshowaxis() const;
  void set_tschchartaxisshowaxis(bool value);
  private:
  bool _internal_tschchartaxisshowaxis() const;
  void _internal_set_tschchartaxisshowaxis(bool value);
  public:

  // optional bool tschchartaxisshowlabels = 25;
  bool has_tschchartaxisshowlabels() const;
  private:
  bool _internal_has_tschchartaxisshowlabels() const;
  public:
  void clear_tschchartaxisshowlabels();
  bool tschchartaxisshowlabels() const;
  void set_tschchartaxisshowlabels(bool value);
  private:
  bool _internal_tschchartaxisshowlabels() const;
  void _internal_set_tschchartaxisshowlabels(bool value);
  public:

  // optional bool tschchartaxisshowlastlabel = 26;
  bool has_tschchartaxisshowlastlabel() const;
  private:
  bool _internal_has_tschchartaxisshowlastlabel() const;
  public:
  void clear_tschchartaxisshowlastlabel();
  bool tschchartaxisshowlastlabel() const;
  void set_tschchartaxisshowlastlabel(bool value);
  private:
  bool _internal_tschchartaxisshowlastlabel() const;
  void _internal_set_tschchartaxisshowlastlabel(bool value);
  public:

  // optional bool tschchartaxisshowmajorgridlines = 27;
  bool has_tschchartaxisshowmajorgridlines() const;
  private:
  bool _internal_has_tschchartaxisshowmajorgridlines() const;
  public:
  void clear_tschchartaxisshowmajorgridlines();
  bool tschchartaxisshowmajorgridlines() const;
  void set_tschchartaxisshowmajorgridlines(bool value);
  private:
  bool _internal_tschchartaxisshowmajorgridlines() const;
  void _internal_set_tschchartaxisshowmajorgridlines(bool value);
  public:

  // optional bool tschchartaxisshowmajortickmarks = 28;
  bool has_tschchartaxisshowmajortickmarks() const;
  private:
  bool _internal_has_tschchartaxisshowmajortickmarks() const;
  public:
  void clear_tschchartaxisshowmajortickmarks();
  bool tschchartaxisshowmajortickmarks() const;
  void set_tschchartaxisshowmajortickmarks(bool value);
  private:
  bool _internal_tschchartaxisshowmajortickmarks() const;
  void _internal_set_tschchartaxisshowmajortickmarks(bool value);
  public:

  // optional bool tschchartaxisshowminimumlabel = 29;
  bool has_tschchartaxisshowminimumlabel() const;
  private:
  bool _internal_has_tschchartaxisshowminimumlabel() const;
  public:
  void clear_tschchartaxisshowminimumlabel();
  bool tschchartaxisshowminimumlabel() const;
  void set_tschchartaxisshowminimumlabel(bool value);
  private:
  bool _internal_tschchartaxisshowminimumlabel() const;
  void _internal_set_tschchartaxisshowminimumlabel(bool value);
  public:

  // optional bool tschchartaxisshowminorgridlines = 30;
  bool has_tschchartaxisshowminorgridlines() const;
  private:
  bool _internal_has_tschchartaxisshowminorgridlines() const;
  public:
  void clear_tschchartaxisshowminorgridlines();
  bool tschchartaxisshowminorgridlines() const;
  void set_tschchartaxisshowminorgridlines(bool value);
  private:
  bool _internal_tschchartaxisshowminorgridlines() const;
  void _internal_set_tschchartaxisshowminorgridlines(bool value);
  public:

  // optional bool tschchartaxisshowminortickmarks = 31;
  bool has_tschchartaxisshowminortickmarks() const;
  private:
  bool _internal_has_tschchartaxisshowminortickmarks() const;
  public:
  void clear_tschchartaxisshowminortickmarks();
  bool tschchartaxisshowminortickmarks() const;
  void set_tschchartaxisshowminortickmarks(bool value);
  private:
  bool _internal_tschchartaxisshowminortickmarks() const;
  void _internal_set_tschchartaxisshowminortickmarks(bool value);
  public:

  // optional bool tschchartaxisshowserieslabels = 32;
  bool has_tschchartaxisshowserieslabels() const;
  private:
  bool _internal_has_tschchartaxisshowserieslabels() const;
  public:
  void clear_tschchartaxisshowserieslabels();
  bool tschchartaxisshowserieslabels() const;
  void set_tschchartaxisshowserieslabels(bool value);
  private:
  bool _internal_tschchartaxisshowserieslabels() const;
  void _internal_set_tschchartaxisshowserieslabels(bool value);
  public:

  // optional bool tschchartaxisshowtitle = 33;
  bool has_tschchartaxisshowtitle() const;
  private:
  bool _internal_has_tschchartaxisshowtitle() const;
  public:
  void clear_tschchartaxisshowtitle();
  bool tschchartaxisshowtitle() const;
  void set_tschchartaxisshowtitle(bool value);
  private:
  bool _internal_tschchartaxisshowtitle() const;
  void _internal_set_tschchartaxisshowtitle(bool value);
  public:

  // optional int32 tschchartaxistickmarklocation = 34;
  bool has_tschchartaxistickmarklocation() const;
  private:
  bool _internal_has_tschchartaxistickmarklocation() const;
  public:
  void clear_tschchartaxistickmarklocation();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxistickmarklocation() const;
  void set_tschchartaxistickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxistickmarklocation() const;
  void _internal_set_tschchartaxistickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxistitleparagraphstyleindex = 36;
  bool has_tschchartaxistitleparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartaxistitleparagraphstyleindex() const;
  public:
  void clear_tschchartaxistitleparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxistitleparagraphstyleindex() const;
  void set_tschchartaxistitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxistitleparagraphstyleindex() const;
  void _internal_set_tschchartaxistitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartaxisverticalspacing = 39;
  bool has_tschchartaxisverticalspacing() const;
  private:
  bool _internal_has_tschchartaxisverticalspacing() const;
  public:
  void clear_tschchartaxisverticalspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisverticalspacing() const;
  void set_tschchartaxisverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartaxisverticalspacing() const;
  void _internal_set_tschchartaxisverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartaxistitle_;
  ::TSK::FormatStructArchive* tschchartaxis1_0dateformat_;
  ::TSK::FormatStructArchive* tschchartaxis1_0numberformat_;
  ::TSD::StrokeArchive* tschchartaxis3dgridlinestroke_;
  ::TSK::FormatStructArchive* tschchartaxisdateformat_;
  ::TSK::FormatStructArchive* tschchartaxisdurationformat_;
  ::TSD::ShadowArchive* tschchartaxismajorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxismajorgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxisminorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxisminorgridlinestroke_;
  ::TSK::FormatStructArchive* tschchartaxisnumberformat_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin_;
  float tschchartaxis3dgridlineopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxis3dlabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxishorizontalspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxislabelparagraphstyleindex_;
  float tschchartaxislabelsorientation_;
  float tschchartaxismajorgridlineopacity_;
  float tschchartaxisminorgridlineopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberformattype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberofdecades_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberofmajorgridlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisnumberofminorgridlines_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisscale_;
  bool tschchartaxisplottoedges_;
  bool tschchartaxisshowaxis_;
  bool tschchartaxisshowlabels_;
  bool tschchartaxisshowlastlabel_;
  bool tschchartaxisshowmajorgridlines_;
  bool tschchartaxisshowmajortickmarks_;
  bool tschchartaxisshowminimumlabel_;
  bool tschchartaxisshowminorgridlines_;
  bool tschchartaxisshowminortickmarks_;
  bool tschchartaxisshowserieslabels_;
  bool tschchartaxisshowtitle_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxistickmarklocation_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxistitleparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartaxisverticalspacing_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ChartSeriesGenericPropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ChartSeriesGenericPropertyMapArchive) */ {
 public:
  inline ChartSeriesGenericPropertyMapArchive() : ChartSeriesGenericPropertyMapArchive(nullptr) {}
  ~ChartSeriesGenericPropertyMapArchive() override;
  explicit constexpr ChartSeriesGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSeriesGenericPropertyMapArchive(const ChartSeriesGenericPropertyMapArchive& from);
  ChartSeriesGenericPropertyMapArchive(ChartSeriesGenericPropertyMapArchive&& from) noexcept
    : ChartSeriesGenericPropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline ChartSeriesGenericPropertyMapArchive& operator=(const ChartSeriesGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSeriesGenericPropertyMapArchive& operator=(ChartSeriesGenericPropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSeriesGenericPropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSeriesGenericPropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSeriesGenericPropertyMapArchive*>(
               &_ChartSeriesGenericPropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChartSeriesGenericPropertyMapArchive& a, ChartSeriesGenericPropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSeriesGenericPropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSeriesGenericPropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartSeriesGenericPropertyMapArchive* New() const final {
    return new ChartSeriesGenericPropertyMapArchive();
  }

  ChartSeriesGenericPropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartSeriesGenericPropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSeriesGenericPropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChartSeriesGenericPropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSeriesGenericPropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ChartSeriesGenericPropertyMapArchive";
  }
  protected:
  explicit ChartSeriesGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschchartseriestrendlinelabelstringFieldNumber = 63,
    kTschchartseries10DateformatFieldNumber = 1,
    kTschchartseries10NumberformatFieldNumber = 2,
    kTschchartseriescalloutlineendlineendFieldNumber = 5,
    kTschchartseriescalloutlinestartlineendFieldNumber = 6,
    kTschchartseriescalloutlinestrokestyleFieldNumber = 7,
    kTschchartseriesdateformatFieldNumber = 8,
    kTschchartseriesdurationformatFieldNumber = 9,
    kTschchartserieserrorbarcustomnegativedataFieldNumber = 11,
    kTschchartserieserrorbarcustomnegativedatascatterxFieldNumber = 12,
    kTschchartserieserrorbarcustompositivedataFieldNumber = 13,
    kTschchartserieserrorbarcustompositivedatascatterxFieldNumber = 14,
    kTschchartserieserrorbarlineendFieldNumber = 17,
    kTschchartserieserrorbarlineendscatterxFieldNumber = 18,
    kTschchartserieserrorbarshadowFieldNumber = 23,
    kTschchartserieserrorbarstrokeFieldNumber = 28,
    kTschchartserieserrorbarstrokescatterxFieldNumber = 29,
    kTschchartseriesfillFieldNumber = 32,
    kTschchartseriesnumberformatFieldNumber = 36,
    kTschchartseriespercentnumberformatFieldNumber = 40,
    kTschchartseriesshadowFieldNumber = 42,
    kTschchartseriesstrokeFieldNumber = 54,
    kTschchartseriessymbolfillFieldNumber = 55,
    kTschchartseriessymbolstrokeFieldNumber = 59,
    kTschchartseriestrendlineshadowFieldNumber = 68,
    kTschchartseriestrendlinestrokeFieldNumber = 72,
    kTschchartseries23LabelexplosionFieldNumber = 3,
    kTschchartseriesadjustmentscaleFieldNumber = 4,
    kTschchartseriesenablecalloutlineFieldNumber = 10,
    kTschchartserieserrorbarfixedvalueFieldNumber = 15,
    kTschchartserieserrorbarfixedvaluescatterxFieldNumber = 16,
    kTschchartserieserrorbarpercentvalueFieldNumber = 19,
    kTschchartserieserrorbarpercentvaluescatterxFieldNumber = 20,
    kTschchartserieserrorbarsettingFieldNumber = 21,
    kTschchartserieserrorbarsettingscatterxFieldNumber = 22,
    kTschchartserieserrorbarspacingFieldNumber = 24,
    kTschchartserieserrorbarspacingscatterxFieldNumber = 25,
    kTschchartserieserrorbarstddevvalueFieldNumber = 26,
    kTschchartserieserrorbarstddevvaluescatterxFieldNumber = 27,
    kTschchartserieserrorbartypeFieldNumber = 30,
    kTschchartserieserrorbartypescatterxFieldNumber = 31,
    kTschchartserieslabelexplosionFieldNumber = 33,
    kTschchartserieslabelparagraphstyleindexFieldNumber = 34,
    kTschchartserieslinetypeFieldNumber = 35,
    kTschchartseriesnumberformattypeFieldNumber = 37,
    kTschchartseriesopacityFieldNumber = 38,
    kTschchartseriesoutsidelabelparagraphstyleindexFieldNumber = 39,
    kTschchartseriesseriestypeFieldNumber = 41,
    kTschchartseriesshowerrorbarFieldNumber = 43,
    kTschchartseriesshowerrorbarscatterxFieldNumber = 44,
    kTschchartseriesshowlabelsinfrontFieldNumber = 45,
    kTschchartseriesshowlineFieldNumber = 46,
    kTschchartseriesshownegativedataFieldNumber = 47,
    kTschchartseriesshowserieslabelsFieldNumber = 48,
    kTschchartseriesshowsymbolFieldNumber = 49,
    kTschchartseriesshowtrendlineFieldNumber = 50,
    kTschchartseriessizedimensionFieldNumber = 52,
    kTschchartseriesshowvaluelabelsFieldNumber = 51,
    kTschchartseriesstacklabelsFieldNumber = 53,
    kTschchartseriessymbolfilluseseriesfillFieldNumber = 56,
    kTschchartseriessymbolfilluseseriesstrokeFieldNumber = 57,
    kTschchartseriessymbolsizeFieldNumber = 58,
    kTschchartseriessymboltypeFieldNumber = 60,
    kTschchartseriestrendlineequationoffsetxFieldNumber = 61,
    kTschchartseriestrendlineequationoffsetyFieldNumber = 62,
    kTschchartseriestrendlineorderFieldNumber = 64,
    kTschchartseriestrendlineperiodFieldNumber = 65,
    kTschchartseriestrendlinersquaredoffsetxFieldNumber = 66,
    kTschchartseriestrendlinersquaredoffsetyFieldNumber = 67,
    kTschchartseriestrendlineshowequationFieldNumber = 69,
    kTschchartseriestrendlineshowlabelFieldNumber = 70,
    kTschchartseriestrendlineshowr2ValueFieldNumber = 71,
    kTschchartseriestrendlinetypeFieldNumber = 73,
    kTschchartseriestrendlineequationopacityFieldNumber = 74,
    kTschchartseriestrendlineequationparagraphstyleindexFieldNumber = 75,
    kTschchartseriestrendlinersquaredopacityFieldNumber = 76,
    kTschchartseriestrendlinersquaredparagraphstyleindexFieldNumber = 77,
    kTschchartseriesvaluelabelpositionFieldNumber = 78,
    kTschchartseriesvaluelabelspacingFieldNumber = 79,
    kTschchartseriesvaluelabelsaxisFieldNumber = 80,
    kTschchartserieswedgeexplosionFieldNumber = 81,
    kTschchartseriesyaxisordinalFieldNumber = 82,
  };
  // optional string tschchartseriestrendlinelabelstring = 63;
  bool has_tschchartseriestrendlinelabelstring() const;
  private:
  bool _internal_has_tschchartseriestrendlinelabelstring() const;
  public:
  void clear_tschchartseriestrendlinelabelstring();
  const std::string& tschchartseriestrendlinelabelstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschchartseriestrendlinelabelstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschchartseriestrendlinelabelstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschchartseriestrendlinelabelstring();
  void set_allocated_tschchartseriestrendlinelabelstring(std::string* tschchartseriestrendlinelabelstring);
  private:
  const std::string& _internal_tschchartseriestrendlinelabelstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschchartseriestrendlinelabelstring(const std::string& value);
  std::string* _internal_mutable_tschchartseriestrendlinelabelstring();
  public:

  // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
  bool has_tschchartseries1_0dateformat() const;
  private:
  bool _internal_has_tschchartseries1_0dateformat() const;
  public:
  void clear_tschchartseries1_0dateformat();
  const ::TSK::FormatStructArchive& tschchartseries1_0dateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseries1_0dateformat();
  ::TSK::FormatStructArchive* mutable_tschchartseries1_0dateformat();
  void set_allocated_tschchartseries1_0dateformat(::TSK::FormatStructArchive* tschchartseries1_0dateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseries1_0dateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseries1_0dateformat();
  public:
  void unsafe_arena_set_allocated_tschchartseries1_0dateformat(
      ::TSK::FormatStructArchive* tschchartseries1_0dateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseries1_0dateformat();

  // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
  bool has_tschchartseries1_0numberformat() const;
  private:
  bool _internal_has_tschchartseries1_0numberformat() const;
  public:
  void clear_tschchartseries1_0numberformat();
  const ::TSK::FormatStructArchive& tschchartseries1_0numberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseries1_0numberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseries1_0numberformat();
  void set_allocated_tschchartseries1_0numberformat(::TSK::FormatStructArchive* tschchartseries1_0numberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseries1_0numberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseries1_0numberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseries1_0numberformat(
      ::TSK::FormatStructArchive* tschchartseries1_0numberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseries1_0numberformat();

  // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
  bool has_tschchartseriescalloutlineendlineend() const;
  private:
  bool _internal_has_tschchartseriescalloutlineendlineend() const;
  public:
  void clear_tschchartseriescalloutlineendlineend();
  const ::TSD::LineEndArchive& tschchartseriescalloutlineendlineend() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriescalloutlineendlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriescalloutlineendlineend();
  void set_allocated_tschchartseriescalloutlineendlineend(::TSD::LineEndArchive* tschchartseriescalloutlineendlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriescalloutlineendlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriescalloutlineendlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriescalloutlineendlineend(
      ::TSD::LineEndArchive* tschchartseriescalloutlineendlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriescalloutlineendlineend();

  // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
  bool has_tschchartseriescalloutlinestartlineend() const;
  private:
  bool _internal_has_tschchartseriescalloutlinestartlineend() const;
  public:
  void clear_tschchartseriescalloutlinestartlineend();
  const ::TSD::LineEndArchive& tschchartseriescalloutlinestartlineend() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartseriescalloutlinestartlineend();
  ::TSD::LineEndArchive* mutable_tschchartseriescalloutlinestartlineend();
  void set_allocated_tschchartseriescalloutlinestartlineend(::TSD::LineEndArchive* tschchartseriescalloutlinestartlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartseriescalloutlinestartlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartseriescalloutlinestartlineend();
  public:
  void unsafe_arena_set_allocated_tschchartseriescalloutlinestartlineend(
      ::TSD::LineEndArchive* tschchartseriescalloutlinestartlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartseriescalloutlinestartlineend();

  // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
  bool has_tschchartseriescalloutlinestrokestyle() const;
  private:
  bool _internal_has_tschchartseriescalloutlinestrokestyle() const;
  public:
  void clear_tschchartseriescalloutlinestrokestyle();
  const ::TSD::StrokeArchive& tschchartseriescalloutlinestrokestyle() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriescalloutlinestrokestyle();
  ::TSD::StrokeArchive* mutable_tschchartseriescalloutlinestrokestyle();
  void set_allocated_tschchartseriescalloutlinestrokestyle(::TSD::StrokeArchive* tschchartseriescalloutlinestrokestyle);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriescalloutlinestrokestyle() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriescalloutlinestrokestyle();
  public:
  void unsafe_arena_set_allocated_tschchartseriescalloutlinestrokestyle(
      ::TSD::StrokeArchive* tschchartseriescalloutlinestrokestyle);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriescalloutlinestrokestyle();

  // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
  bool has_tschchartseriesdateformat() const;
  private:
  bool _internal_has_tschchartseriesdateformat() const;
  public:
  void clear_tschchartseriesdateformat();
  const ::TSK::FormatStructArchive& tschchartseriesdateformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdateformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdateformat();
  void set_allocated_tschchartseriesdateformat(::TSK::FormatStructArchive* tschchartseriesdateformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdateformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdateformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdateformat(
      ::TSK::FormatStructArchive* tschchartseriesdateformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdateformat();

  // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
  bool has_tschchartseriesdurationformat() const;
  private:
  bool _internal_has_tschchartseriesdurationformat() const;
  public:
  void clear_tschchartseriesdurationformat();
  const ::TSK::FormatStructArchive& tschchartseriesdurationformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesdurationformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesdurationformat();
  void set_allocated_tschchartseriesdurationformat(::TSK::FormatStructArchive* tschchartseriesdurationformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesdurationformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesdurationformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesdurationformat(
      ::TSK::FormatStructArchive* tschchartseriesdurationformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesdurationformat();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
  bool has_tschchartserieserrorbarcustomnegativedata() const;
  private:
  bool _internal_has_tschchartserieserrorbarcustomnegativedata() const;
  public:
  void clear_tschchartserieserrorbarcustomnegativedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedata() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustomnegativedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustomnegativedata();
  void set_allocated_tschchartserieserrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartserieserrorbarcustomnegativedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartserieserrorbarcustomnegativedata();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarcustomnegativedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartserieserrorbarcustomnegativedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
  bool has_tschchartserieserrorbarcustomnegativedatascatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarcustomnegativedatascatterx() const;
  public:
  void clear_tschchartserieserrorbarcustomnegativedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedatascatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustomnegativedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustomnegativedatascatterx();
  void set_allocated_tschchartserieserrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartserieserrorbarcustomnegativedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarcustomnegativedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartserieserrorbarcustomnegativedatascatterx();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
  bool has_tschchartserieserrorbarcustompositivedata() const;
  private:
  bool _internal_has_tschchartserieserrorbarcustompositivedata() const;
  public:
  void clear_tschchartserieserrorbarcustompositivedata();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedata() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustompositivedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustompositivedata();
  void set_allocated_tschchartserieserrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartserieserrorbarcustompositivedata() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartserieserrorbarcustompositivedata();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarcustompositivedata(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartserieserrorbarcustompositivedata();

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
  bool has_tschchartserieserrorbarcustompositivedatascatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarcustompositivedatascatterx() const;
  public:
  void clear_tschchartserieserrorbarcustompositivedatascatterx();
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedatascatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustompositivedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustompositivedatascatterx();
  void set_allocated_tschchartserieserrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx);
  private:
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& _internal_tschchartserieserrorbarcustompositivedatascatterx() const;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _internal_mutable_tschchartserieserrorbarcustompositivedatascatterx();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarcustompositivedatascatterx(
      ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx);
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* unsafe_arena_release_tschchartserieserrorbarcustompositivedatascatterx();

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
  bool has_tschchartserieserrorbarlineend() const;
  private:
  bool _internal_has_tschchartserieserrorbarlineend() const;
  public:
  void clear_tschchartserieserrorbarlineend();
  const ::TSD::LineEndArchive& tschchartserieserrorbarlineend() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartserieserrorbarlineend();
  ::TSD::LineEndArchive* mutable_tschchartserieserrorbarlineend();
  void set_allocated_tschchartserieserrorbarlineend(::TSD::LineEndArchive* tschchartserieserrorbarlineend);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartserieserrorbarlineend() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartserieserrorbarlineend();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarlineend(
      ::TSD::LineEndArchive* tschchartserieserrorbarlineend);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartserieserrorbarlineend();

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
  bool has_tschchartserieserrorbarlineendscatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarlineendscatterx() const;
  public:
  void clear_tschchartserieserrorbarlineendscatterx();
  const ::TSD::LineEndArchive& tschchartserieserrorbarlineendscatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::LineEndArchive* release_tschchartserieserrorbarlineendscatterx();
  ::TSD::LineEndArchive* mutable_tschchartserieserrorbarlineendscatterx();
  void set_allocated_tschchartserieserrorbarlineendscatterx(::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx);
  private:
  const ::TSD::LineEndArchive& _internal_tschchartserieserrorbarlineendscatterx() const;
  ::TSD::LineEndArchive* _internal_mutable_tschchartserieserrorbarlineendscatterx();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarlineendscatterx(
      ::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx);
  ::TSD::LineEndArchive* unsafe_arena_release_tschchartserieserrorbarlineendscatterx();

  // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
  bool has_tschchartserieserrorbarshadow() const;
  private:
  bool _internal_has_tschchartserieserrorbarshadow() const;
  public:
  void clear_tschchartserieserrorbarshadow();
  const ::TSD::ShadowArchive& tschchartserieserrorbarshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartserieserrorbarshadow();
  ::TSD::ShadowArchive* mutable_tschchartserieserrorbarshadow();
  void set_allocated_tschchartserieserrorbarshadow(::TSD::ShadowArchive* tschchartserieserrorbarshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartserieserrorbarshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartserieserrorbarshadow();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarshadow(
      ::TSD::ShadowArchive* tschchartserieserrorbarshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartserieserrorbarshadow();

  // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
  bool has_tschchartserieserrorbarstroke() const;
  private:
  bool _internal_has_tschchartserieserrorbarstroke() const;
  public:
  void clear_tschchartserieserrorbarstroke();
  const ::TSD::StrokeArchive& tschchartserieserrorbarstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartserieserrorbarstroke();
  ::TSD::StrokeArchive* mutable_tschchartserieserrorbarstroke();
  void set_allocated_tschchartserieserrorbarstroke(::TSD::StrokeArchive* tschchartserieserrorbarstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieserrorbarstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieserrorbarstroke();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarstroke(
      ::TSD::StrokeArchive* tschchartserieserrorbarstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieserrorbarstroke();

  // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
  bool has_tschchartserieserrorbarstrokescatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarstrokescatterx() const;
  public:
  void clear_tschchartserieserrorbarstrokescatterx();
  const ::TSD::StrokeArchive& tschchartserieserrorbarstrokescatterx() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartserieserrorbarstrokescatterx();
  ::TSD::StrokeArchive* mutable_tschchartserieserrorbarstrokescatterx();
  void set_allocated_tschchartserieserrorbarstrokescatterx(::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartserieserrorbarstrokescatterx() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartserieserrorbarstrokescatterx();
  public:
  void unsafe_arena_set_allocated_tschchartserieserrorbarstrokescatterx(
      ::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartserieserrorbarstrokescatterx();

  // optional .TSD.FillArchive tschchartseriesfill = 32;
  bool has_tschchartseriesfill() const;
  private:
  bool _internal_has_tschchartseriesfill() const;
  public:
  void clear_tschchartseriesfill();
  const ::TSD::FillArchive& tschchartseriesfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriesfill();
  ::TSD::FillArchive* mutable_tschchartseriesfill();
  void set_allocated_tschchartseriesfill(::TSD::FillArchive* tschchartseriesfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriesfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriesfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriesfill(
      ::TSD::FillArchive* tschchartseriesfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriesfill();

  // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 36;
  bool has_tschchartseriesnumberformat() const;
  private:
  bool _internal_has_tschchartseriesnumberformat() const;
  public:
  void clear_tschchartseriesnumberformat();
  const ::TSK::FormatStructArchive& tschchartseriesnumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriesnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriesnumberformat();
  void set_allocated_tschchartseriesnumberformat(::TSK::FormatStructArchive* tschchartseriesnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriesnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriesnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriesnumberformat(
      ::TSK::FormatStructArchive* tschchartseriesnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriesnumberformat();

  // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 40;
  bool has_tschchartseriespercentnumberformat() const;
  private:
  bool _internal_has_tschchartseriespercentnumberformat() const;
  public:
  void clear_tschchartseriespercentnumberformat();
  const ::TSK::FormatStructArchive& tschchartseriespercentnumberformat() const;
  PROTOBUF_MUST_USE_RESULT ::TSK::FormatStructArchive* release_tschchartseriespercentnumberformat();
  ::TSK::FormatStructArchive* mutable_tschchartseriespercentnumberformat();
  void set_allocated_tschchartseriespercentnumberformat(::TSK::FormatStructArchive* tschchartseriespercentnumberformat);
  private:
  const ::TSK::FormatStructArchive& _internal_tschchartseriespercentnumberformat() const;
  ::TSK::FormatStructArchive* _internal_mutable_tschchartseriespercentnumberformat();
  public:
  void unsafe_arena_set_allocated_tschchartseriespercentnumberformat(
      ::TSK::FormatStructArchive* tschchartseriespercentnumberformat);
  ::TSK::FormatStructArchive* unsafe_arena_release_tschchartseriespercentnumberformat();

  // optional .TSD.ShadowArchive tschchartseriesshadow = 42;
  bool has_tschchartseriesshadow() const;
  private:
  bool _internal_has_tschchartseriesshadow() const;
  public:
  void clear_tschchartseriesshadow();
  const ::TSD::ShadowArchive& tschchartseriesshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriesshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriesshadow();
  void set_allocated_tschchartseriesshadow(::TSD::ShadowArchive* tschchartseriesshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriesshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriesshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriesshadow(
      ::TSD::ShadowArchive* tschchartseriesshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriesshadow();

  // optional .TSD.StrokeArchive tschchartseriesstroke = 54;
  bool has_tschchartseriesstroke() const;
  private:
  bool _internal_has_tschchartseriesstroke() const;
  public:
  void clear_tschchartseriesstroke();
  const ::TSD::StrokeArchive& tschchartseriesstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriesstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriesstroke();
  void set_allocated_tschchartseriesstroke(::TSD::StrokeArchive* tschchartseriesstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriesstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriesstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriesstroke(
      ::TSD::StrokeArchive* tschchartseriesstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriesstroke();

  // optional .TSD.FillArchive tschchartseriessymbolfill = 55;
  bool has_tschchartseriessymbolfill() const;
  private:
  bool _internal_has_tschchartseriessymbolfill() const;
  public:
  void clear_tschchartseriessymbolfill();
  const ::TSD::FillArchive& tschchartseriessymbolfill() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::FillArchive* release_tschchartseriessymbolfill();
  ::TSD::FillArchive* mutable_tschchartseriessymbolfill();
  void set_allocated_tschchartseriessymbolfill(::TSD::FillArchive* tschchartseriessymbolfill);
  private:
  const ::TSD::FillArchive& _internal_tschchartseriessymbolfill() const;
  ::TSD::FillArchive* _internal_mutable_tschchartseriessymbolfill();
  public:
  void unsafe_arena_set_allocated_tschchartseriessymbolfill(
      ::TSD::FillArchive* tschchartseriessymbolfill);
  ::TSD::FillArchive* unsafe_arena_release_tschchartseriessymbolfill();

  // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 59;
  bool has_tschchartseriessymbolstroke() const;
  private:
  bool _internal_has_tschchartseriessymbolstroke() const;
  public:
  void clear_tschchartseriessymbolstroke();
  const ::TSD::StrokeArchive& tschchartseriessymbolstroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriessymbolstroke();
  ::TSD::StrokeArchive* mutable_tschchartseriessymbolstroke();
  void set_allocated_tschchartseriessymbolstroke(::TSD::StrokeArchive* tschchartseriessymbolstroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriessymbolstroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriessymbolstroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriessymbolstroke(
      ::TSD::StrokeArchive* tschchartseriessymbolstroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriessymbolstroke();

  // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 68;
  bool has_tschchartseriestrendlineshadow() const;
  private:
  bool _internal_has_tschchartseriestrendlineshadow() const;
  public:
  void clear_tschchartseriestrendlineshadow();
  const ::TSD::ShadowArchive& tschchartseriestrendlineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschchartseriestrendlineshadow();
  ::TSD::ShadowArchive* mutable_tschchartseriestrendlineshadow();
  void set_allocated_tschchartseriestrendlineshadow(::TSD::ShadowArchive* tschchartseriestrendlineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschchartseriestrendlineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschchartseriestrendlineshadow();
  public:
  void unsafe_arena_set_allocated_tschchartseriestrendlineshadow(
      ::TSD::ShadowArchive* tschchartseriestrendlineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschchartseriestrendlineshadow();

  // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 72;
  bool has_tschchartseriestrendlinestroke() const;
  private:
  bool _internal_has_tschchartseriestrendlinestroke() const;
  public:
  void clear_tschchartseriestrendlinestroke();
  const ::TSD::StrokeArchive& tschchartseriestrendlinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschchartseriestrendlinestroke();
  ::TSD::StrokeArchive* mutable_tschchartseriestrendlinestroke();
  void set_allocated_tschchartseriestrendlinestroke(::TSD::StrokeArchive* tschchartseriestrendlinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschchartseriestrendlinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschchartseriestrendlinestroke();
  public:
  void unsafe_arena_set_allocated_tschchartseriestrendlinestroke(
      ::TSD::StrokeArchive* tschchartseriestrendlinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschchartseriestrendlinestroke();

  // optional float tschchartseries2_3labelexplosion = 3;
  bool has_tschchartseries2_3labelexplosion() const;
  private:
  bool _internal_has_tschchartseries2_3labelexplosion() const;
  public:
  void clear_tschchartseries2_3labelexplosion();
  float tschchartseries2_3labelexplosion() const;
  void set_tschchartseries2_3labelexplosion(float value);
  private:
  float _internal_tschchartseries2_3labelexplosion() const;
  void _internal_set_tschchartseries2_3labelexplosion(float value);
  public:

  // optional float tschchartseriesadjustmentscale = 4;
  bool has_tschchartseriesadjustmentscale() const;
  private:
  bool _internal_has_tschchartseriesadjustmentscale() const;
  public:
  void clear_tschchartseriesadjustmentscale();
  float tschchartseriesadjustmentscale() const;
  void set_tschchartseriesadjustmentscale(float value);
  private:
  float _internal_tschchartseriesadjustmentscale() const;
  void _internal_set_tschchartseriesadjustmentscale(float value);
  public:

  // optional int32 tschchartseriesenablecalloutline = 10;
  bool has_tschchartseriesenablecalloutline() const;
  private:
  bool _internal_has_tschchartseriesenablecalloutline() const;
  public:
  void clear_tschchartseriesenablecalloutline();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesenablecalloutline() const;
  void set_tschchartseriesenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesenablecalloutline() const;
  void _internal_set_tschchartseriesenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartserieserrorbarfixedvalue = 15;
  bool has_tschchartserieserrorbarfixedvalue() const;
  private:
  bool _internal_has_tschchartserieserrorbarfixedvalue() const;
  public:
  void clear_tschchartserieserrorbarfixedvalue();
  float tschchartserieserrorbarfixedvalue() const;
  void set_tschchartserieserrorbarfixedvalue(float value);
  private:
  float _internal_tschchartserieserrorbarfixedvalue() const;
  void _internal_set_tschchartserieserrorbarfixedvalue(float value);
  public:

  // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
  bool has_tschchartserieserrorbarfixedvaluescatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarfixedvaluescatterx() const;
  public:
  void clear_tschchartserieserrorbarfixedvaluescatterx();
  float tschchartserieserrorbarfixedvaluescatterx() const;
  void set_tschchartserieserrorbarfixedvaluescatterx(float value);
  private:
  float _internal_tschchartserieserrorbarfixedvaluescatterx() const;
  void _internal_set_tschchartserieserrorbarfixedvaluescatterx(float value);
  public:

  // optional float tschchartserieserrorbarpercentvalue = 19;
  bool has_tschchartserieserrorbarpercentvalue() const;
  private:
  bool _internal_has_tschchartserieserrorbarpercentvalue() const;
  public:
  void clear_tschchartserieserrorbarpercentvalue();
  float tschchartserieserrorbarpercentvalue() const;
  void set_tschchartserieserrorbarpercentvalue(float value);
  private:
  float _internal_tschchartserieserrorbarpercentvalue() const;
  void _internal_set_tschchartserieserrorbarpercentvalue(float value);
  public:

  // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
  bool has_tschchartserieserrorbarpercentvaluescatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarpercentvaluescatterx() const;
  public:
  void clear_tschchartserieserrorbarpercentvaluescatterx();
  float tschchartserieserrorbarpercentvaluescatterx() const;
  void set_tschchartserieserrorbarpercentvaluescatterx(float value);
  private:
  float _internal_tschchartserieserrorbarpercentvaluescatterx() const;
  void _internal_set_tschchartserieserrorbarpercentvaluescatterx(float value);
  public:

  // optional int32 tschchartserieserrorbarsetting = 21;
  bool has_tschchartserieserrorbarsetting() const;
  private:
  bool _internal_has_tschchartserieserrorbarsetting() const;
  public:
  void clear_tschchartserieserrorbarsetting();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarsetting() const;
  void set_tschchartserieserrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieserrorbarsetting() const;
  void _internal_set_tschchartserieserrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieserrorbarsettingscatterx = 22;
  bool has_tschchartserieserrorbarsettingscatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarsettingscatterx() const;
  public:
  void clear_tschchartserieserrorbarsettingscatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarsettingscatterx() const;
  void set_tschchartserieserrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieserrorbarsettingscatterx() const;
  void _internal_set_tschchartserieserrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieserrorbarspacing = 24;
  bool has_tschchartserieserrorbarspacing() const;
  private:
  bool _internal_has_tschchartserieserrorbarspacing() const;
  public:
  void clear_tschchartserieserrorbarspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarspacing() const;
  void set_tschchartserieserrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieserrorbarspacing() const;
  void _internal_set_tschchartserieserrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieserrorbarspacingscatterx = 25;
  bool has_tschchartserieserrorbarspacingscatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarspacingscatterx() const;
  public:
  void clear_tschchartserieserrorbarspacingscatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarspacingscatterx() const;
  void set_tschchartserieserrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieserrorbarspacingscatterx() const;
  void _internal_set_tschchartserieserrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartserieserrorbarstddevvalue = 26;
  bool has_tschchartserieserrorbarstddevvalue() const;
  private:
  bool _internal_has_tschchartserieserrorbarstddevvalue() const;
  public:
  void clear_tschchartserieserrorbarstddevvalue();
  float tschchartserieserrorbarstddevvalue() const;
  void set_tschchartserieserrorbarstddevvalue(float value);
  private:
  float _internal_tschchartserieserrorbarstddevvalue() const;
  void _internal_set_tschchartserieserrorbarstddevvalue(float value);
  public:

  // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
  bool has_tschchartserieserrorbarstddevvaluescatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbarstddevvaluescatterx() const;
  public:
  void clear_tschchartserieserrorbarstddevvaluescatterx();
  float tschchartserieserrorbarstddevvaluescatterx() const;
  void set_tschchartserieserrorbarstddevvaluescatterx(float value);
  private:
  float _internal_tschchartserieserrorbarstddevvaluescatterx() const;
  void _internal_set_tschchartserieserrorbarstddevvaluescatterx(float value);
  public:

  // optional int32 tschchartserieserrorbartype = 30;
  bool has_tschchartserieserrorbartype() const;
  private:
  bool _internal_has_tschchartserieserrorbartype() const;
  public:
  void clear_tschchartserieserrorbartype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbartype() const;
  void set_tschchartserieserrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieserrorbartype() const;
  void _internal_set_tschchartserieserrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieserrorbartypescatterx = 31;
  bool has_tschchartserieserrorbartypescatterx() const;
  private:
  bool _internal_has_tschchartserieserrorbartypescatterx() const;
  public:
  void clear_tschchartserieserrorbartypescatterx();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbartypescatterx() const;
  void set_tschchartserieserrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieserrorbartypescatterx() const;
  void _internal_set_tschchartserieserrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartserieslabelexplosion = 33;
  bool has_tschchartserieslabelexplosion() const;
  private:
  bool _internal_has_tschchartserieslabelexplosion() const;
  public:
  void clear_tschchartserieslabelexplosion();
  float tschchartserieslabelexplosion() const;
  void set_tschchartserieslabelexplosion(float value);
  private:
  float _internal_tschchartserieslabelexplosion() const;
  void _internal_set_tschchartserieslabelexplosion(float value);
  public:

  // optional int32 tschchartserieslabelparagraphstyleindex = 34;
  bool has_tschchartserieslabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartserieslabelparagraphstyleindex() const;
  public:
  void clear_tschchartserieslabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslabelparagraphstyleindex() const;
  void set_tschchartserieslabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslabelparagraphstyleindex() const;
  void _internal_set_tschchartserieslabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartserieslinetype = 35;
  bool has_tschchartserieslinetype() const;
  private:
  bool _internal_has_tschchartserieslinetype() const;
  public:
  void clear_tschchartserieslinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinetype() const;
  void set_tschchartserieslinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartserieslinetype() const;
  void _internal_set_tschchartserieslinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesnumberformattype = 37;
  bool has_tschchartseriesnumberformattype() const;
  private:
  bool _internal_has_tschchartseriesnumberformattype() const;
  public:
  void clear_tschchartseriesnumberformattype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesnumberformattype() const;
  void set_tschchartseriesnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesnumberformattype() const;
  void _internal_set_tschchartseriesnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriesopacity = 38;
  bool has_tschchartseriesopacity() const;
  private:
  bool _internal_has_tschchartseriesopacity() const;
  public:
  void clear_tschchartseriesopacity();
  float tschchartseriesopacity() const;
  void set_tschchartseriesopacity(float value);
  private:
  float _internal_tschchartseriesopacity() const;
  void _internal_set_tschchartseriesopacity(float value);
  public:

  // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 39;
  bool has_tschchartseriesoutsidelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriesoutsidelabelparagraphstyleindex() const;
  public:
  void clear_tschchartseriesoutsidelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesoutsidelabelparagraphstyleindex() const;
  void set_tschchartseriesoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesoutsidelabelparagraphstyleindex() const;
  void _internal_set_tschchartseriesoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesseriestype = 41;
  bool has_tschchartseriesseriestype() const;
  private:
  bool _internal_has_tschchartseriesseriestype() const;
  public:
  void clear_tschchartseriesseriestype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesseriestype() const;
  void set_tschchartseriesseriestype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesseriestype() const;
  void _internal_set_tschchartseriesseriestype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesshowerrorbar = 43;
  bool has_tschchartseriesshowerrorbar() const;
  private:
  bool _internal_has_tschchartseriesshowerrorbar() const;
  public:
  void clear_tschchartseriesshowerrorbar();
  bool tschchartseriesshowerrorbar() const;
  void set_tschchartseriesshowerrorbar(bool value);
  private:
  bool _internal_tschchartseriesshowerrorbar() const;
  void _internal_set_tschchartseriesshowerrorbar(bool value);
  public:

  // optional bool tschchartseriesshowerrorbarscatterx = 44;
  bool has_tschchartseriesshowerrorbarscatterx() const;
  private:
  bool _internal_has_tschchartseriesshowerrorbarscatterx() const;
  public:
  void clear_tschchartseriesshowerrorbarscatterx();
  bool tschchartseriesshowerrorbarscatterx() const;
  void set_tschchartseriesshowerrorbarscatterx(bool value);
  private:
  bool _internal_tschchartseriesshowerrorbarscatterx() const;
  void _internal_set_tschchartseriesshowerrorbarscatterx(bool value);
  public:

  // optional bool tschchartseriesshowlabelsinfront = 45;
  bool has_tschchartseriesshowlabelsinfront() const;
  private:
  bool _internal_has_tschchartseriesshowlabelsinfront() const;
  public:
  void clear_tschchartseriesshowlabelsinfront();
  bool tschchartseriesshowlabelsinfront() const;
  void set_tschchartseriesshowlabelsinfront(bool value);
  private:
  bool _internal_tschchartseriesshowlabelsinfront() const;
  void _internal_set_tschchartseriesshowlabelsinfront(bool value);
  public:

  // optional bool tschchartseriesshowline = 46;
  bool has_tschchartseriesshowline() const;
  private:
  bool _internal_has_tschchartseriesshowline() const;
  public:
  void clear_tschchartseriesshowline();
  bool tschchartseriesshowline() const;
  void set_tschchartseriesshowline(bool value);
  private:
  bool _internal_tschchartseriesshowline() const;
  void _internal_set_tschchartseriesshowline(bool value);
  public:

  // optional bool tschchartseriesshownegativedata = 47;
  bool has_tschchartseriesshownegativedata() const;
  private:
  bool _internal_has_tschchartseriesshownegativedata() const;
  public:
  void clear_tschchartseriesshownegativedata();
  bool tschchartseriesshownegativedata() const;
  void set_tschchartseriesshownegativedata(bool value);
  private:
  bool _internal_tschchartseriesshownegativedata() const;
  void _internal_set_tschchartseriesshownegativedata(bool value);
  public:

  // optional bool tschchartseriesshowserieslabels = 48;
  bool has_tschchartseriesshowserieslabels() const;
  private:
  bool _internal_has_tschchartseriesshowserieslabels() const;
  public:
  void clear_tschchartseriesshowserieslabels();
  bool tschchartseriesshowserieslabels() const;
  void set_tschchartseriesshowserieslabels(bool value);
  private:
  bool _internal_tschchartseriesshowserieslabels() const;
  void _internal_set_tschchartseriesshowserieslabels(bool value);
  public:

  // optional bool tschchartseriesshowsymbol = 49;
  bool has_tschchartseriesshowsymbol() const;
  private:
  bool _internal_has_tschchartseriesshowsymbol() const;
  public:
  void clear_tschchartseriesshowsymbol();
  bool tschchartseriesshowsymbol() const;
  void set_tschchartseriesshowsymbol(bool value);
  private:
  bool _internal_tschchartseriesshowsymbol() const;
  void _internal_set_tschchartseriesshowsymbol(bool value);
  public:

  // optional bool tschchartseriesshowtrendline = 50;
  bool has_tschchartseriesshowtrendline() const;
  private:
  bool _internal_has_tschchartseriesshowtrendline() const;
  public:
  void clear_tschchartseriesshowtrendline();
  bool tschchartseriesshowtrendline() const;
  void set_tschchartseriesshowtrendline(bool value);
  private:
  bool _internal_tschchartseriesshowtrendline() const;
  void _internal_set_tschchartseriesshowtrendline(bool value);
  public:

  // optional int32 tschchartseriessizedimension = 52;
  bool has_tschchartseriessizedimension() const;
  private:
  bool _internal_has_tschchartseriessizedimension() const;
  public:
  void clear_tschchartseriessizedimension();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriessizedimension() const;
  void set_tschchartseriessizedimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriessizedimension() const;
  void _internal_set_tschchartseriessizedimension(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschchartseriesshowvaluelabels = 51;
  bool has_tschchartseriesshowvaluelabels() const;
  private:
  bool _internal_has_tschchartseriesshowvaluelabels() const;
  public:
  void clear_tschchartseriesshowvaluelabels();
  bool tschchartseriesshowvaluelabels() const;
  void set_tschchartseriesshowvaluelabels(bool value);
  private:
  bool _internal_tschchartseriesshowvaluelabels() const;
  void _internal_set_tschchartseriesshowvaluelabels(bool value);
  public:

  // optional bool tschchartseriesstacklabels = 53;
  bool has_tschchartseriesstacklabels() const;
  private:
  bool _internal_has_tschchartseriesstacklabels() const;
  public:
  void clear_tschchartseriesstacklabels();
  bool tschchartseriesstacklabels() const;
  void set_tschchartseriesstacklabels(bool value);
  private:
  bool _internal_tschchartseriesstacklabels() const;
  void _internal_set_tschchartseriesstacklabels(bool value);
  public:

  // optional bool tschchartseriessymbolfilluseseriesfill = 56;
  bool has_tschchartseriessymbolfilluseseriesfill() const;
  private:
  bool _internal_has_tschchartseriessymbolfilluseseriesfill() const;
  public:
  void clear_tschchartseriessymbolfilluseseriesfill();
  bool tschchartseriessymbolfilluseseriesfill() const;
  void set_tschchartseriessymbolfilluseseriesfill(bool value);
  private:
  bool _internal_tschchartseriessymbolfilluseseriesfill() const;
  void _internal_set_tschchartseriessymbolfilluseseriesfill(bool value);
  public:

  // optional bool tschchartseriessymbolfilluseseriesstroke = 57;
  bool has_tschchartseriessymbolfilluseseriesstroke() const;
  private:
  bool _internal_has_tschchartseriessymbolfilluseseriesstroke() const;
  public:
  void clear_tschchartseriessymbolfilluseseriesstroke();
  bool tschchartseriessymbolfilluseseriesstroke() const;
  void set_tschchartseriessymbolfilluseseriesstroke(bool value);
  private:
  bool _internal_tschchartseriessymbolfilluseseriesstroke() const;
  void _internal_set_tschchartseriessymbolfilluseseriesstroke(bool value);
  public:

  // optional float tschchartseriessymbolsize = 58;
  bool has_tschchartseriessymbolsize() const;
  private:
  bool _internal_has_tschchartseriessymbolsize() const;
  public:
  void clear_tschchartseriessymbolsize();
  float tschchartseriessymbolsize() const;
  void set_tschchartseriessymbolsize(float value);
  private:
  float _internal_tschchartseriessymbolsize() const;
  void _internal_set_tschchartseriessymbolsize(float value);
  public:

  // optional int32 tschchartseriessymboltype = 60;
  bool has_tschchartseriessymboltype() const;
  private:
  bool _internal_has_tschchartseriessymboltype() const;
  public:
  void clear_tschchartseriessymboltype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriessymboltype() const;
  void set_tschchartseriessymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriessymboltype() const;
  void _internal_set_tschchartseriessymboltype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriestrendlineequationoffsetx = 61;
  bool has_tschchartseriestrendlineequationoffsetx() const;
  private:
  bool _internal_has_tschchartseriestrendlineequationoffsetx() const;
  public:
  void clear_tschchartseriestrendlineequationoffsetx();
  float tschchartseriestrendlineequationoffsetx() const;
  void set_tschchartseriestrendlineequationoffsetx(float value);
  private:
  float _internal_tschchartseriestrendlineequationoffsetx() const;
  void _internal_set_tschchartseriestrendlineequationoffsetx(float value);
  public:

  // optional float tschchartseriestrendlineequationoffsety = 62;
  bool has_tschchartseriestrendlineequationoffsety() const;
  private:
  bool _internal_has_tschchartseriestrendlineequationoffsety() const;
  public:
  void clear_tschchartseriestrendlineequationoffsety();
  float tschchartseriestrendlineequationoffsety() const;
  void set_tschchartseriestrendlineequationoffsety(float value);
  private:
  float _internal_tschchartseriestrendlineequationoffsety() const;
  void _internal_set_tschchartseriestrendlineequationoffsety(float value);
  public:

  // optional int32 tschchartseriestrendlineorder = 64;
  bool has_tschchartseriestrendlineorder() const;
  private:
  bool _internal_has_tschchartseriestrendlineorder() const;
  public:
  void clear_tschchartseriestrendlineorder();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlineorder() const;
  void set_tschchartseriestrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriestrendlineorder() const;
  void _internal_set_tschchartseriestrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriestrendlineperiod = 65;
  bool has_tschchartseriestrendlineperiod() const;
  private:
  bool _internal_has_tschchartseriestrendlineperiod() const;
  public:
  void clear_tschchartseriestrendlineperiod();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlineperiod() const;
  void set_tschchartseriestrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriestrendlineperiod() const;
  void _internal_set_tschchartseriestrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriestrendlinersquaredoffsetx = 66;
  bool has_tschchartseriestrendlinersquaredoffsetx() const;
  private:
  bool _internal_has_tschchartseriestrendlinersquaredoffsetx() const;
  public:
  void clear_tschchartseriestrendlinersquaredoffsetx();
  float tschchartseriestrendlinersquaredoffsetx() const;
  void set_tschchartseriestrendlinersquaredoffsetx(float value);
  private:
  float _internal_tschchartseriestrendlinersquaredoffsetx() const;
  void _internal_set_tschchartseriestrendlinersquaredoffsetx(float value);
  public:

  // optional float tschchartseriestrendlinersquaredoffsety = 67;
  bool has_tschchartseriestrendlinersquaredoffsety() const;
  private:
  bool _internal_has_tschchartseriestrendlinersquaredoffsety() const;
  public:
  void clear_tschchartseriestrendlinersquaredoffsety();
  float tschchartseriestrendlinersquaredoffsety() const;
  void set_tschchartseriestrendlinersquaredoffsety(float value);
  private:
  float _internal_tschchartseriestrendlinersquaredoffsety() const;
  void _internal_set_tschchartseriestrendlinersquaredoffsety(float value);
  public:

  // optional bool tschchartseriestrendlineshowequation = 69;
  bool has_tschchartseriestrendlineshowequation() const;
  private:
  bool _internal_has_tschchartseriestrendlineshowequation() const;
  public:
  void clear_tschchartseriestrendlineshowequation();
  bool tschchartseriestrendlineshowequation() const;
  void set_tschchartseriestrendlineshowequation(bool value);
  private:
  bool _internal_tschchartseriestrendlineshowequation() const;
  void _internal_set_tschchartseriestrendlineshowequation(bool value);
  public:

  // optional bool tschchartseriestrendlineshowlabel = 70;
  bool has_tschchartseriestrendlineshowlabel() const;
  private:
  bool _internal_has_tschchartseriestrendlineshowlabel() const;
  public:
  void clear_tschchartseriestrendlineshowlabel();
  bool tschchartseriestrendlineshowlabel() const;
  void set_tschchartseriestrendlineshowlabel(bool value);
  private:
  bool _internal_tschchartseriestrendlineshowlabel() const;
  void _internal_set_tschchartseriestrendlineshowlabel(bool value);
  public:

  // optional bool tschchartseriestrendlineshowr2value = 71;
  bool has_tschchartseriestrendlineshowr2value() const;
  private:
  bool _internal_has_tschchartseriestrendlineshowr2value() const;
  public:
  void clear_tschchartseriestrendlineshowr2value();
  bool tschchartseriestrendlineshowr2value() const;
  void set_tschchartseriestrendlineshowr2value(bool value);
  private:
  bool _internal_tschchartseriestrendlineshowr2value() const;
  void _internal_set_tschchartseriestrendlineshowr2value(bool value);
  public:

  // optional int32 tschchartseriestrendlinetype = 73;
  bool has_tschchartseriestrendlinetype() const;
  private:
  bool _internal_has_tschchartseriestrendlinetype() const;
  public:
  void clear_tschchartseriestrendlinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlinetype() const;
  void set_tschchartseriestrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriestrendlinetype() const;
  void _internal_set_tschchartseriestrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriestrendlineequationopacity = 74;
  bool has_tschchartseriestrendlineequationopacity() const;
  private:
  bool _internal_has_tschchartseriestrendlineequationopacity() const;
  public:
  void clear_tschchartseriestrendlineequationopacity();
  float tschchartseriestrendlineequationopacity() const;
  void set_tschchartseriestrendlineequationopacity(float value);
  private:
  float _internal_tschchartseriestrendlineequationopacity() const;
  void _internal_set_tschchartseriestrendlineequationopacity(float value);
  public:

  // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 75;
  bool has_tschchartseriestrendlineequationparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriestrendlineequationparagraphstyleindex() const;
  public:
  void clear_tschchartseriestrendlineequationparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlineequationparagraphstyleindex() const;
  void set_tschchartseriestrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriestrendlineequationparagraphstyleindex() const;
  void _internal_set_tschchartseriestrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartseriestrendlinersquaredopacity = 76;
  bool has_tschchartseriestrendlinersquaredopacity() const;
  private:
  bool _internal_has_tschchartseriestrendlinersquaredopacity() const;
  public:
  void clear_tschchartseriestrendlinersquaredopacity();
  float tschchartseriestrendlinersquaredopacity() const;
  void set_tschchartseriestrendlinersquaredopacity(float value);
  private:
  float _internal_tschchartseriestrendlinersquaredopacity() const;
  void _internal_set_tschchartseriestrendlinersquaredopacity(float value);
  public:

  // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 77;
  bool has_tschchartseriestrendlinersquaredparagraphstyleindex() const;
  private:
  bool _internal_has_tschchartseriestrendlinersquaredparagraphstyleindex() const;
  public:
  void clear_tschchartseriestrendlinersquaredparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlinersquaredparagraphstyleindex() const;
  void set_tschchartseriestrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriestrendlinersquaredparagraphstyleindex() const;
  void _internal_set_tschchartseriestrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesvaluelabelposition = 78;
  bool has_tschchartseriesvaluelabelposition() const;
  private:
  bool _internal_has_tschchartseriesvaluelabelposition() const;
  public:
  void clear_tschchartseriesvaluelabelposition();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesvaluelabelposition() const;
  void set_tschchartseriesvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesvaluelabelposition() const;
  void _internal_set_tschchartseriesvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesvaluelabelspacing = 79;
  bool has_tschchartseriesvaluelabelspacing() const;
  private:
  bool _internal_has_tschchartseriesvaluelabelspacing() const;
  public:
  void clear_tschchartseriesvaluelabelspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesvaluelabelspacing() const;
  void set_tschchartseriesvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesvaluelabelspacing() const;
  void _internal_set_tschchartseriesvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschchartseriesvaluelabelsaxis = 80;
  bool has_tschchartseriesvaluelabelsaxis() const;
  private:
  bool _internal_has_tschchartseriesvaluelabelsaxis() const;
  public:
  void clear_tschchartseriesvaluelabelsaxis();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesvaluelabelsaxis() const;
  void set_tschchartseriesvaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesvaluelabelsaxis() const;
  void _internal_set_tschchartseriesvaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tschchartserieswedgeexplosion = 81;
  bool has_tschchartserieswedgeexplosion() const;
  private:
  bool _internal_has_tschchartserieswedgeexplosion() const;
  public:
  void clear_tschchartserieswedgeexplosion();
  float tschchartserieswedgeexplosion() const;
  void set_tschchartserieswedgeexplosion(float value);
  private:
  float _internal_tschchartserieswedgeexplosion() const;
  void _internal_set_tschchartserieswedgeexplosion(float value);
  public:

  // optional int32 tschchartseriesyaxisordinal = 82;
  bool has_tschchartseriesyaxisordinal() const;
  private:
  bool _internal_has_tschchartseriesyaxisordinal() const;
  public:
  void clear_tschchartseriesyaxisordinal();
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesyaxisordinal() const;
  void set_tschchartseriesyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschchartseriesyaxisordinal() const;
  void _internal_set_tschchartseriesyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschchartseriestrendlinelabelstring_;
  ::TSK::FormatStructArchive* tschchartseries1_0dateformat_;
  ::TSK::FormatStructArchive* tschchartseries1_0numberformat_;
  ::TSD::LineEndArchive* tschchartseriescalloutlineendlineend_;
  ::TSD::LineEndArchive* tschchartseriescalloutlinestartlineend_;
  ::TSD::StrokeArchive* tschchartseriescalloutlinestrokestyle_;
  ::TSK::FormatStructArchive* tschchartseriesdateformat_;
  ::TSK::FormatStructArchive* tschchartseriesdurationformat_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx_;
  ::TSD::LineEndArchive* tschchartserieserrorbarlineend_;
  ::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx_;
  ::TSD::ShadowArchive* tschchartserieserrorbarshadow_;
  ::TSD::StrokeArchive* tschchartserieserrorbarstroke_;
  ::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx_;
  ::TSD::FillArchive* tschchartseriesfill_;
  ::TSK::FormatStructArchive* tschchartseriesnumberformat_;
  ::TSK::FormatStructArchive* tschchartseriespercentnumberformat_;
  ::TSD::ShadowArchive* tschchartseriesshadow_;
  ::TSD::StrokeArchive* tschchartseriesstroke_;
  ::TSD::FillArchive* tschchartseriessymbolfill_;
  ::TSD::StrokeArchive* tschchartseriessymbolstroke_;
  ::TSD::ShadowArchive* tschchartseriestrendlineshadow_;
  ::TSD::StrokeArchive* tschchartseriestrendlinestroke_;
  float tschchartseries2_3labelexplosion_;
  float tschchartseriesadjustmentscale_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesenablecalloutline_;
  float tschchartserieserrorbarfixedvalue_;
  float tschchartserieserrorbarfixedvaluescatterx_;
  float tschchartserieserrorbarpercentvalue_;
  float tschchartserieserrorbarpercentvaluescatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarsetting_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarsettingscatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbarspacingscatterx_;
  float tschchartserieserrorbarstddevvalue_;
  float tschchartserieserrorbarstddevvaluescatterx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbartype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieserrorbartypescatterx_;
  float tschchartserieslabelexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartserieslinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesnumberformattype_;
  float tschchartseriesopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesoutsidelabelparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesseriestype_;
  bool tschchartseriesshowerrorbar_;
  bool tschchartseriesshowerrorbarscatterx_;
  bool tschchartseriesshowlabelsinfront_;
  bool tschchartseriesshowline_;
  bool tschchartseriesshownegativedata_;
  bool tschchartseriesshowserieslabels_;
  bool tschchartseriesshowsymbol_;
  bool tschchartseriesshowtrendline_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriessizedimension_;
  bool tschchartseriesshowvaluelabels_;
  bool tschchartseriesstacklabels_;
  bool tschchartseriessymbolfilluseseriesfill_;
  bool tschchartseriessymbolfilluseseriesstroke_;
  float tschchartseriessymbolsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriessymboltype_;
  float tschchartseriestrendlineequationoffsetx_;
  float tschchartseriestrendlineequationoffsety_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlineorder_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlineperiod_;
  float tschchartseriestrendlinersquaredoffsetx_;
  float tschchartseriestrendlinersquaredoffsety_;
  bool tschchartseriestrendlineshowequation_;
  bool tschchartseriestrendlineshowlabel_;
  bool tschchartseriestrendlineshowr2value_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlinetype_;
  float tschchartseriestrendlineequationopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlineequationparagraphstyleindex_;
  float tschchartseriestrendlinersquaredopacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriestrendlinersquaredparagraphstyleindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesvaluelabelposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesvaluelabelspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesvaluelabelsaxis_;
  float tschchartserieswedgeexplosion_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschchartseriesyaxisordinal_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLineGenericPropertyMapArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.Generated.ReferenceLineGenericPropertyMapArchive) */ {
 public:
  inline ReferenceLineGenericPropertyMapArchive() : ReferenceLineGenericPropertyMapArchive(nullptr) {}
  ~ReferenceLineGenericPropertyMapArchive() override;
  explicit constexpr ReferenceLineGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLineGenericPropertyMapArchive(const ReferenceLineGenericPropertyMapArchive& from);
  ReferenceLineGenericPropertyMapArchive(ReferenceLineGenericPropertyMapArchive&& from) noexcept
    : ReferenceLineGenericPropertyMapArchive() {
    *this = ::std::move(from);
  }

  inline ReferenceLineGenericPropertyMapArchive& operator=(const ReferenceLineGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLineGenericPropertyMapArchive& operator=(ReferenceLineGenericPropertyMapArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLineGenericPropertyMapArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceLineGenericPropertyMapArchive* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineGenericPropertyMapArchive*>(
               &_ReferenceLineGenericPropertyMapArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReferenceLineGenericPropertyMapArchive& a, ReferenceLineGenericPropertyMapArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLineGenericPropertyMapArchive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLineGenericPropertyMapArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceLineGenericPropertyMapArchive* New() const final {
    return new ReferenceLineGenericPropertyMapArchive();
  }

  ReferenceLineGenericPropertyMapArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceLineGenericPropertyMapArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLineGenericPropertyMapArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReferenceLineGenericPropertyMapArchive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineGenericPropertyMapArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.Generated.ReferenceLineGenericPropertyMapArchive";
  }
  protected:
  explicit ReferenceLineGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTschreferencelinelabelFieldNumber = 2,
    kTschreferencelinecustomvalueFieldNumber = 1,
    kTschreferencelineshadowFieldNumber = 4,
    kTschreferencelinestrokeFieldNumber = 8,
    kTschreferencelinelabelparagraphstyleindexFieldNumber = 3,
    kTschreferencelineshowlabelFieldNumber = 5,
    kTschreferencelineshowlineFieldNumber = 6,
    kTschreferencelineshowvaluelabelFieldNumber = 7,
    kTschreferencelinetypeFieldNumber = 9,
    kTschreferencelinevaluelabelparagraphstyleindexFieldNumber = 10,
  };
  // optional string tschreferencelinelabel = 2;
  bool has_tschreferencelinelabel() const;
  private:
  bool _internal_has_tschreferencelinelabel() const;
  public:
  void clear_tschreferencelinelabel();
  const std::string& tschreferencelinelabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tschreferencelinelabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tschreferencelinelabel();
  PROTOBUF_MUST_USE_RESULT std::string* release_tschreferencelinelabel();
  void set_allocated_tschreferencelinelabel(std::string* tschreferencelinelabel);
  private:
  const std::string& _internal_tschreferencelinelabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tschreferencelinelabel(const std::string& value);
  std::string* _internal_mutable_tschreferencelinelabel();
  public:

  // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
  bool has_tschreferencelinecustomvalue() const;
  private:
  bool _internal_has_tschreferencelinecustomvalue() const;
  public:
  void clear_tschreferencelinecustomvalue();
  const ::TSCH::ChartsNSNumberDoubleArchive& tschreferencelinecustomvalue() const;
  PROTOBUF_MUST_USE_RESULT ::TSCH::ChartsNSNumberDoubleArchive* release_tschreferencelinecustomvalue();
  ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschreferencelinecustomvalue();
  void set_allocated_tschreferencelinecustomvalue(::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinecustomvalue);
  private:
  const ::TSCH::ChartsNSNumberDoubleArchive& _internal_tschreferencelinecustomvalue() const;
  ::TSCH::ChartsNSNumberDoubleArchive* _internal_mutable_tschreferencelinecustomvalue();
  public:
  void unsafe_arena_set_allocated_tschreferencelinecustomvalue(
      ::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinecustomvalue);
  ::TSCH::ChartsNSNumberDoubleArchive* unsafe_arena_release_tschreferencelinecustomvalue();

  // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
  bool has_tschreferencelineshadow() const;
  private:
  bool _internal_has_tschreferencelineshadow() const;
  public:
  void clear_tschreferencelineshadow();
  const ::TSD::ShadowArchive& tschreferencelineshadow() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::ShadowArchive* release_tschreferencelineshadow();
  ::TSD::ShadowArchive* mutable_tschreferencelineshadow();
  void set_allocated_tschreferencelineshadow(::TSD::ShadowArchive* tschreferencelineshadow);
  private:
  const ::TSD::ShadowArchive& _internal_tschreferencelineshadow() const;
  ::TSD::ShadowArchive* _internal_mutable_tschreferencelineshadow();
  public:
  void unsafe_arena_set_allocated_tschreferencelineshadow(
      ::TSD::ShadowArchive* tschreferencelineshadow);
  ::TSD::ShadowArchive* unsafe_arena_release_tschreferencelineshadow();

  // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
  bool has_tschreferencelinestroke() const;
  private:
  bool _internal_has_tschreferencelinestroke() const;
  public:
  void clear_tschreferencelinestroke();
  const ::TSD::StrokeArchive& tschreferencelinestroke() const;
  PROTOBUF_MUST_USE_RESULT ::TSD::StrokeArchive* release_tschreferencelinestroke();
  ::TSD::StrokeArchive* mutable_tschreferencelinestroke();
  void set_allocated_tschreferencelinestroke(::TSD::StrokeArchive* tschreferencelinestroke);
  private:
  const ::TSD::StrokeArchive& _internal_tschreferencelinestroke() const;
  ::TSD::StrokeArchive* _internal_mutable_tschreferencelinestroke();
  public:
  void unsafe_arena_set_allocated_tschreferencelinestroke(
      ::TSD::StrokeArchive* tschreferencelinestroke);
  ::TSD::StrokeArchive* unsafe_arena_release_tschreferencelinestroke();

  // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
  bool has_tschreferencelinelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschreferencelinelabelparagraphstyleindex() const;
  public:
  void clear_tschreferencelinelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinelabelparagraphstyleindex() const;
  void set_tschreferencelinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschreferencelinelabelparagraphstyleindex() const;
  void _internal_set_tschreferencelinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool tschreferencelineshowlabel = 5;
  bool has_tschreferencelineshowlabel() const;
  private:
  bool _internal_has_tschreferencelineshowlabel() const;
  public:
  void clear_tschreferencelineshowlabel();
  bool tschreferencelineshowlabel() const;
  void set_tschreferencelineshowlabel(bool value);
  private:
  bool _internal_tschreferencelineshowlabel() const;
  void _internal_set_tschreferencelineshowlabel(bool value);
  public:

  // optional bool tschreferencelineshowline = 6;
  bool has_tschreferencelineshowline() const;
  private:
  bool _internal_has_tschreferencelineshowline() const;
  public:
  void clear_tschreferencelineshowline();
  bool tschreferencelineshowline() const;
  void set_tschreferencelineshowline(bool value);
  private:
  bool _internal_tschreferencelineshowline() const;
  void _internal_set_tschreferencelineshowline(bool value);
  public:

  // optional bool tschreferencelineshowvaluelabel = 7;
  bool has_tschreferencelineshowvaluelabel() const;
  private:
  bool _internal_has_tschreferencelineshowvaluelabel() const;
  public:
  void clear_tschreferencelineshowvaluelabel();
  bool tschreferencelineshowvaluelabel() const;
  void set_tschreferencelineshowvaluelabel(bool value);
  private:
  bool _internal_tschreferencelineshowvaluelabel() const;
  void _internal_set_tschreferencelineshowvaluelabel(bool value);
  public:

  // optional int32 tschreferencelinetype = 9;
  bool has_tschreferencelinetype() const;
  private:
  bool _internal_has_tschreferencelinetype() const;
  public:
  void clear_tschreferencelinetype();
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinetype() const;
  void set_tschreferencelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschreferencelinetype() const;
  void _internal_set_tschreferencelinetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
  bool has_tschreferencelinevaluelabelparagraphstyleindex() const;
  private:
  bool _internal_has_tschreferencelinevaluelabelparagraphstyleindex() const;
  public:
  void clear_tschreferencelinevaluelabelparagraphstyleindex();
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinevaluelabelparagraphstyleindex() const;
  void set_tschreferencelinevaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tschreferencelinevaluelabelparagraphstyleindex() const;
  void _internal_set_tschreferencelinevaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tschreferencelinelabel_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinecustomvalue_;
  ::TSD::ShadowArchive* tschreferencelineshadow_;
  ::TSD::StrokeArchive* tschreferencelinestroke_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinelabelparagraphstyleindex_;
  bool tschreferencelineshowlabel_;
  bool tschreferencelineshowline_;
  bool tschreferencelineshowvaluelabel_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tschreferencelinevaluelabelparagraphstyleindex_;
  friend struct ::TableStruct_TSCHArchives_2eGEN_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartStyleArchive

// optional float tschchartinfodefault3dchartopacity = 1;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefault3dchartopacity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefault3dchartopacity() const {
  return _internal_has_tschchartinfodefault3dchartopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefault3dchartopacity() {
  tschchartinfodefault3dchartopacity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefault3dchartopacity() const {
  return tschchartinfodefault3dchartopacity_;
}
inline float ChartStyleArchive::tschchartinfodefault3dchartopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dchartopacity)
  return _internal_tschchartinfodefault3dchartopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefault3dchartopacity(float value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartinfodefault3dchartopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefault3dchartopacity(float value) {
  _internal_set_tschchartinfodefault3dchartopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dchartopacity)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
inline bool ChartStyleArchive::_internal_has_tschchartinfoarea3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoarea3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoarea3dlightingpackage() const {
  return _internal_has_tschchartinfoarea3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfoarea3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfoarea3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoarea3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  return _internal_tschchartinfoarea3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoarea3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage_);
  }
  tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  if (tschchartinfoarea3dlightingpackage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoarea3dlightingpackage() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoarea3dlightingpackage_;
  tschchartinfoarea3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoarea3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  _has_bits_[0] &= ~0x00000001u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoarea3dlightingpackage_;
  tschchartinfoarea3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfoarea3dlightingpackage() {
  _has_bits_[0] |= 0x00000001u;
  if (tschchartinfoarea3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfoarea3dlightingpackage_ = p;
  }
  return tschchartinfoarea3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoarea3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfoarea3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage_);
  }
  if (tschchartinfoarea3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfoarea3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoarea3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoarea3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
inline bool ChartStyleArchive::_internal_has_tschchartinfobar3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobar3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfobar3dlightingpackage() const {
  return _internal_has_tschchartinfobar3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfobar3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfobar3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfobar3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  return _internal_tschchartinfobar3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfobar3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage_);
  }
  tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  if (tschchartinfobar3dlightingpackage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfobar3dlightingpackage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobar3dlightingpackage_;
  tschchartinfobar3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfobar3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobar3dlightingpackage_;
  tschchartinfobar3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfobar3dlightingpackage() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartinfobar3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfobar3dlightingpackage_ = p;
  }
  return tschchartinfobar3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfobar3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfobar3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage_);
  }
  if (tschchartinfobar3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfobar3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobar3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfobar3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
inline bool ChartStyleArchive::_internal_has_tschchartinfocolumn3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfocolumn3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfocolumn3dlightingpackage() const {
  return _internal_has_tschchartinfocolumn3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfocolumn3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfocolumn3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfocolumn3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  return _internal_tschchartinfocolumn3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumn3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage_);
  }
  tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  if (tschchartinfocolumn3dlightingpackage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfocolumn3dlightingpackage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumn3dlightingpackage_;
  tschchartinfocolumn3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfocolumn3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumn3dlightingpackage_;
  tschchartinfocolumn3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfocolumn3dlightingpackage() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartinfocolumn3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfocolumn3dlightingpackage_ = p;
  }
  return tschchartinfocolumn3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfocolumn3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfocolumn3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage_);
  }
  if (tschchartinfocolumn3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfocolumn3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumn3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfocolumn3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefault3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefault3dlightingpackage() const {
  return _internal_has_tschchartinfodefault3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfodefault3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfodefault3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfodefault3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  return _internal_tschchartinfodefault3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage_);
  }
  tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  if (tschchartinfodefault3dlightingpackage) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfodefault3dlightingpackage() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefault3dlightingpackage_;
  tschchartinfodefault3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefault3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefault3dlightingpackage_;
  tschchartinfodefault3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefault3dlightingpackage() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartinfodefault3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfodefault3dlightingpackage_ = p;
  }
  return tschchartinfodefault3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfodefault3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfodefault3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage_);
  }
  if (tschchartinfodefault3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefault3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
inline bool ChartStyleArchive::_internal_has_tschchartinfoline3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoline3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfoline3dlightingpackage() const {
  return _internal_has_tschchartinfoline3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfoline3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfoline3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoline3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  return _internal_tschchartinfoline3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfoline3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage_);
  }
  tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  if (tschchartinfoline3dlightingpackage) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoline3dlightingpackage() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoline3dlightingpackage_;
  tschchartinfoline3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfoline3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoline3dlightingpackage_;
  tschchartinfoline3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfoline3dlightingpackage() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartinfoline3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfoline3dlightingpackage_ = p;
  }
  return tschchartinfoline3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoline3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfoline3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage_);
  }
  if (tschchartinfoline3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfoline3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoline3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfoline3dlightingpackage)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
inline bool ChartStyleArchive::_internal_has_tschchartinfopie3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfopie3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfopie3dlightingpackage() const {
  return _internal_has_tschchartinfopie3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::_internal_tschchartinfopie3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfopie3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfopie3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  return _internal_tschchartinfopie3dlightingpackage();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfopie3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage_);
  }
  tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  if (tschchartinfopie3dlightingpackage) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfopie3dlightingpackage() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopie3dlightingpackage_;
  tschchartinfopie3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfopie3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopie3dlightingpackage_;
  tschchartinfopie3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::_internal_mutable_tschchartinfopie3dlightingpackage() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartinfopie3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfopie3dlightingpackage_ = p;
  }
  return tschchartinfopie3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfopie3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfopie3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage_);
  }
  if (tschchartinfopie3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfopie3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopie3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfopie3dlightingpackage)
}

// optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbackgroundfill() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundfill() const {
  return _internal_has_tschchartinfodefaultbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::_internal_tschchartinfodefaultbackgroundfill() const {
  const ::TSD::FillArchive* p = tschchartinfodefaultbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  return _internal_tschchartinfodefaultbackgroundfill();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbackgroundfill(
    ::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill_);
  }
  tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  if (tschchartinfodefaultbackgroundfill) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundfill() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = tschchartinfodefaultbackgroundfill_;
  tschchartinfodefaultbackgroundfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = tschchartinfodefaultbackgroundfill_;
  tschchartinfodefaultbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbackgroundfill() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartinfodefaultbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartinfodefaultbackgroundfill_ = p;
  }
  return tschchartinfodefaultbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartinfodefaultbackgroundfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill_);
  }
  if (tschchartinfodefaultbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundfill));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbackgroundfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundfill)
}

// optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbackgroundstroke() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultbackgroundstroke_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundstroke() const {
  return _internal_has_tschchartinfodefaultbackgroundstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::_internal_tschchartinfodefaultbackgroundstroke() const {
  const ::TSD::StrokeArchive* p = tschchartinfodefaultbackgroundstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultbackgroundstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  return _internal_tschchartinfodefaultbackgroundstroke();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbackgroundstroke(
    ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke_);
  }
  tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  if (tschchartinfodefaultbackgroundstroke) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundstroke() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultbackgroundstroke_;
  tschchartinfodefaultbackgroundstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbackgroundstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultbackgroundstroke_;
  tschchartinfodefaultbackgroundstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbackgroundstroke() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartinfodefaultbackgroundstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartinfodefaultbackgroundstroke_ = p;
  }
  return tschchartinfodefaultbackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartinfodefaultbackgroundstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke_);
  }
  if (tschchartinfodefaultbackgroundstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbackgroundstroke));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbackgroundstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbackgroundstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbackgroundstroke)
}

// optional float tschchartinfodefaultborderopacity = 10;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultborderopacity() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultborderopacity() const {
  return _internal_has_tschchartinfodefaultborderopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultborderopacity() {
  tschchartinfodefaultborderopacity_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultborderopacity() const {
  return tschchartinfodefaultborderopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultborderopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderopacity)
  return _internal_tschchartinfodefaultborderopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultborderopacity(float value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartinfodefaultborderopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultborderopacity(float value) {
  _internal_set_tschchartinfodefaultborderopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderopacity)
}

// optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultbordershadow() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultbordershadow_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultbordershadow() const {
  return _internal_has_tschchartinfodefaultbordershadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::_internal_tschchartinfodefaultbordershadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfodefaultbordershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfodefaultbordershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
  return _internal_tschchartinfodefaultbordershadow();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultbordershadow(
    ::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow_);
  }
  tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  if (tschchartinfodefaultbordershadow) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfodefaultbordershadow() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultbordershadow_;
  tschchartinfodefaultbordershadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultbordershadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartinfodefaultbordershadow_;
  tschchartinfodefaultbordershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultbordershadow() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartinfodefaultbordershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartinfodefaultbordershadow_ = p;
  }
  return tschchartinfodefaultbordershadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfodefaultbordershadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartinfodefaultbordershadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow_);
  }
  if (tschchartinfodefaultbordershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultbordershadow));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultbordershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultbordershadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultbordershadow)
}

// optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultborderstroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultborderstroke_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultborderstroke() const {
  return _internal_has_tschchartinfodefaultborderstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::_internal_tschchartinfodefaultborderstroke() const {
  const ::TSD::StrokeArchive* p = tschchartinfodefaultborderstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultborderstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
  return _internal_tschchartinfodefaultborderstroke();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultborderstroke(
    ::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke_);
  }
  tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  if (tschchartinfodefaultborderstroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultborderstroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultborderstroke_;
  tschchartinfodefaultborderstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultborderstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartinfodefaultborderstroke_;
  tschchartinfodefaultborderstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultborderstroke() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartinfodefaultborderstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartinfodefaultborderstroke_ = p;
  }
  return tschchartinfodefaultborderstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultborderstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartinfodefaultborderstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke_);
  }
  if (tschchartinfodefaultborderstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultborderstroke));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultborderstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultborderstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultborderstroke)
}

// optional bool tschchartinfodefaultcombinelayers = 13;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultcombinelayers() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultcombinelayers() const {
  return _internal_has_tschchartinfodefaultcombinelayers();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultcombinelayers() {
  tschchartinfodefaultcombinelayers_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultcombinelayers() const {
  return tschchartinfodefaultcombinelayers_;
}
inline bool ChartStyleArchive::tschchartinfodefaultcombinelayers() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultcombinelayers)
  return _internal_tschchartinfodefaultcombinelayers();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultcombinelayers(bool value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartinfodefaultcombinelayers_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultcombinelayers(bool value) {
  _internal_set_tschchartinfodefaultcombinelayers(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultcombinelayers)
}

// optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaultdatasetnameparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdatasetnameparagraphstyleindex() {
  tschchartinfodefaultdatasetnameparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  return tschchartinfodefaultdatasetnameparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultdatasetnameparagraphstyleindex)
  return _internal_tschchartinfodefaultdatasetnameparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultdatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartinfodefaultdatasetnameparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdatasetnameparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultdatasetnameparagraphstyleindex)
}

// optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultgridbackgroundfill() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaultgridbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundfill() const {
  return _internal_has_tschchartinfodefaultgridbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::_internal_tschchartinfodefaultgridbackgroundfill() const {
  const ::TSD::FillArchive* p = tschchartinfodefaultgridbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultgridbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  return _internal_tschchartinfodefaultgridbackgroundfill();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaultgridbackgroundfill(
    ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill_);
  }
  tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  if (tschchartinfodefaultgridbackgroundfill) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultgridbackgroundfill() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartinfodefaultgridbackgroundfill_;
  tschchartinfodefaultgridbackgroundfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaultgridbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartinfodefaultgridbackgroundfill_;
  tschchartinfodefaultgridbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartStyleArchive::_internal_mutable_tschchartinfodefaultgridbackgroundfill() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartinfodefaultgridbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartinfodefaultgridbackgroundfill_ = p;
  }
  return tschchartinfodefaultgridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultgridbackgroundfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartinfodefaultgridbackgroundfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill_);
  }
  if (tschchartinfodefaultgridbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaultgridbackgroundfill));
    if (message_arena != submessage_arena) {
      tschchartinfodefaultgridbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaultgridbackgroundfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundfill)
}

// optional float tschchartinfodefaultgridbackgroundopacity = 15;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultgridbackgroundopacity() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundopacity() const {
  return _internal_has_tschchartinfodefaultgridbackgroundopacity();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundopacity() {
  tschchartinfodefaultgridbackgroundopacity_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultgridbackgroundopacity() const {
  return tschchartinfodefaultgridbackgroundopacity_;
}
inline float ChartStyleArchive::tschchartinfodefaultgridbackgroundopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundopacity)
  return _internal_tschchartinfodefaultgridbackgroundopacity();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultgridbackgroundopacity(float value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartinfodefaultgridbackgroundopacity_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultgridbackgroundopacity(float value) {
  _internal_set_tschchartinfodefaultgridbackgroundopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultgridbackgroundopacity)
}

// optional float tschchartinfodefaultinterbargap = 16;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultinterbargap() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultinterbargap() const {
  return _internal_has_tschchartinfodefaultinterbargap();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultinterbargap() {
  tschchartinfodefaultinterbargap_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultinterbargap() const {
  return tschchartinfodefaultinterbargap_;
}
inline float ChartStyleArchive::tschchartinfodefaultinterbargap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultinterbargap)
  return _internal_tschchartinfodefaultinterbargap();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultinterbargap(float value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartinfodefaultinterbargap_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultinterbargap(float value) {
  _internal_set_tschchartinfodefaultinterbargap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultinterbargap)
}

// optional float tschchartinfodefaultintersetgap = 17;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultintersetgap() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultintersetgap() const {
  return _internal_has_tschchartinfodefaultintersetgap();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultintersetgap() {
  tschchartinfodefaultintersetgap_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultintersetgap() const {
  return tschchartinfodefaultintersetgap_;
}
inline float ChartStyleArchive::tschchartinfodefaultintersetgap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultintersetgap)
  return _internal_tschchartinfodefaultintersetgap();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultintersetgap(float value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartinfodefaultintersetgap_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultintersetgap(float value) {
  _internal_set_tschchartinfodefaultintersetgap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultintersetgap)
}

// optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultroundedcornerouterendonly() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultroundedcornerouterendonly() const {
  return _internal_has_tschchartinfodefaultroundedcornerouterendonly();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultroundedcornerouterendonly() {
  tschchartinfodefaultroundedcornerouterendonly_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultroundedcornerouterendonly() const {
  return tschchartinfodefaultroundedcornerouterendonly_;
}
inline bool ChartStyleArchive::tschchartinfodefaultroundedcornerouterendonly() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultroundedcornerouterendonly)
  return _internal_tschchartinfodefaultroundedcornerouterendonly();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultroundedcornerouterendonly(bool value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartinfodefaultroundedcornerouterendonly_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultroundedcornerouterendonly(bool value) {
  _internal_set_tschchartinfodefaultroundedcornerouterendonly(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultroundedcornerouterendonly)
}

// optional float tschchartinfodefaultroundedcornerradius = 122;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultroundedcornerradius() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultroundedcornerradius() const {
  return _internal_has_tschchartinfodefaultroundedcornerradius();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultroundedcornerradius() {
  tschchartinfodefaultroundedcornerradius_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ChartStyleArchive::_internal_tschchartinfodefaultroundedcornerradius() const {
  return tschchartinfodefaultroundedcornerradius_;
}
inline float ChartStyleArchive::tschchartinfodefaultroundedcornerradius() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultroundedcornerradius)
  return _internal_tschchartinfodefaultroundedcornerradius();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultroundedcornerradius(float value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartinfodefaultroundedcornerradius_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultroundedcornerradius(float value) {
  _internal_set_tschchartinfodefaultroundedcornerradius(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultroundedcornerradius)
}

// optional bool tschchartinfodefaultshowborder = 18;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaultshowborder() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaultshowborder() const {
  return _internal_has_tschchartinfodefaultshowborder();
}
inline void ChartStyleArchive::clear_tschchartinfodefaultshowborder() {
  tschchartinfodefaultshowborder_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ChartStyleArchive::_internal_tschchartinfodefaultshowborder() const {
  return tschchartinfodefaultshowborder_;
}
inline bool ChartStyleArchive::tschchartinfodefaultshowborder() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultshowborder)
  return _internal_tschchartinfodefaultshowborder();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaultshowborder(bool value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartinfodefaultshowborder_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaultshowborder(bool value) {
  _internal_set_tschchartinfodefaultshowborder(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaultshowborder)
}

// optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaulttitlecolor() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefaulttitlecolor_ != nullptr);
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaulttitlecolor() const {
  return _internal_has_tschchartinfodefaulttitlecolor();
}
inline const ::TSP::Color& ChartStyleArchive::_internal_tschchartinfodefaulttitlecolor() const {
  const ::TSP::Color* p = tschchartinfodefaulttitlecolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ChartStyleArchive::tschchartinfodefaulttitlecolor() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  return _internal_tschchartinfodefaulttitlecolor();
}
inline void ChartStyleArchive::unsafe_arena_set_allocated_tschchartinfodefaulttitlecolor(
    ::TSP::Color* tschchartinfodefaulttitlecolor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor_);
  }
  tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  if (tschchartinfodefaulttitlecolor) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
}
inline ::TSP::Color* ChartStyleArchive::release_tschchartinfodefaulttitlecolor() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Color* temp = tschchartinfodefaulttitlecolor_;
  tschchartinfodefaulttitlecolor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* ChartStyleArchive::unsafe_arena_release_tschchartinfodefaulttitlecolor() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  _has_bits_[0] &= ~0x00000800u;
  ::TSP::Color* temp = tschchartinfodefaulttitlecolor_;
  tschchartinfodefaulttitlecolor_ = nullptr;
  return temp;
}
inline ::TSP::Color* ChartStyleArchive::_internal_mutable_tschchartinfodefaulttitlecolor() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartinfodefaulttitlecolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    tschchartinfodefaulttitlecolor_ = p;
  }
  return tschchartinfodefaulttitlecolor_;
}
inline ::TSP::Color* ChartStyleArchive::mutable_tschchartinfodefaulttitlecolor() {
  ::TSP::Color* _msg = _internal_mutable_tschchartinfodefaulttitlecolor();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
  return _msg;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor_);
  }
  if (tschchartinfodefaulttitlecolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefaulttitlecolor));
    if (message_arena != submessage_arena) {
      tschchartinfodefaulttitlecolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefaulttitlecolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitlecolor)
}

// optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
inline bool ChartStyleArchive::_internal_has_tschchartinfodefaulttitleparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartStyleArchive::has_tschchartinfodefaulttitleparagraphstyleindex() const {
  return _internal_has_tschchartinfodefaulttitleparagraphstyleindex();
}
inline void ChartStyleArchive::clear_tschchartinfodefaulttitleparagraphstyleindex() {
  tschchartinfodefaulttitleparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::_internal_tschchartinfodefaulttitleparagraphstyleindex() const {
  return tschchartinfodefaulttitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartStyleArchive::tschchartinfodefaulttitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitleparagraphstyleindex)
  return _internal_tschchartinfodefaulttitleparagraphstyleindex();
}
inline void ChartStyleArchive::_internal_set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartinfodefaulttitleparagraphstyleindex_ = value;
}
inline void ChartStyleArchive::set_tschchartinfodefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaulttitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartStyleArchive.tschchartinfodefaulttitleparagraphstyleindex)
}

// -------------------------------------------------------------------

// ChartNonStyleArchive

// optional int32 tschchartinfodefault3dbarshape = 1;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dbarshape() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbarshape() const {
  return _internal_has_tschchartinfodefault3dbarshape();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbarshape() {
  tschchartinfodefault3dbarshape_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfodefault3dbarshape() const {
  return tschchartinfodefault3dbarshape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfodefault3dbarshape() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbarshape)
  return _internal_tschchartinfodefault3dbarshape();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tschchartinfodefault3dbarshape_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefault3dbarshape(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbarshape)
}

// optional bool tschchartinfodefault3dbeveledges = 2;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dbeveledges() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbeveledges() const {
  return _internal_has_tschchartinfodefault3dbeveledges();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbeveledges() {
  tschchartinfodefault3dbeveledges_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefault3dbeveledges() const {
  return tschchartinfodefault3dbeveledges_;
}
inline bool ChartNonStyleArchive::tschchartinfodefault3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbeveledges)
  return _internal_tschchartinfodefault3dbeveledges();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dbeveledges(bool value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartinfodefault3dbeveledges_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbeveledges(bool value) {
  _internal_set_tschchartinfodefault3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dbeveledges)
}

// optional float tschchartinfodefault3dintersetdepthgap = 3;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dintersetdepthgap() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dintersetdepthgap() const {
  return _internal_has_tschchartinfodefault3dintersetdepthgap();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dintersetdepthgap() {
  tschchartinfodefault3dintersetdepthgap_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefault3dintersetdepthgap() const {
  return tschchartinfodefault3dintersetdepthgap_;
}
inline float ChartNonStyleArchive::tschchartinfodefault3dintersetdepthgap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dintersetdepthgap)
  return _internal_tschchartinfodefault3dintersetdepthgap();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefault3dintersetdepthgap(float value) {
  _has_bits_[0] |= 0x00000400u;
  tschchartinfodefault3dintersetdepthgap_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dintersetdepthgap(float value) {
  _internal_set_tschchartinfodefault3dintersetdepthgap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dintersetdepthgap)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3drotation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3drotation_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3drotation() const {
  return _internal_has_tschchartinfodefault3drotation();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3drotation() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfodefault3drotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3drotation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
  return _internal_tschchartinfodefault3drotation();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3drotation(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation_);
  }
  tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  if (tschchartinfodefault3drotation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3drotation() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3drotation_;
  tschchartinfodefault3drotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3drotation() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3drotation_;
  tschchartinfodefault3drotation_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3drotation() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartinfodefault3drotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfodefault3drotation_ = p;
  }
  return tschchartinfodefault3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3drotation() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfodefault3drotation();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation_);
  }
  if (tschchartinfodefault3drotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3drotation));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3drotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3drotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoarea3dscale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoarea3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoarea3dscale() const {
  return _internal_has_tschchartinfoarea3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfoarea3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfoarea3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoarea3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
  return _internal_tschchartinfoarea3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoarea3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale_);
  }
  tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  if (tschchartinfoarea3dscale) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoarea3dscale() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoarea3dscale_;
  tschchartinfoarea3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoarea3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoarea3dscale_;
  tschchartinfoarea3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoarea3dscale() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartinfoarea3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfoarea3dscale_ = p;
  }
  return tschchartinfoarea3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoarea3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfoarea3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale_);
  }
  if (tschchartinfoarea3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoarea3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfoarea3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoarea3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfobar3dscale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobar3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfobar3dscale() const {
  return _internal_has_tschchartinfobar3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfobar3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfobar3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfobar3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
  return _internal_tschchartinfobar3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfobar3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale_);
  }
  tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  if (tschchartinfobar3dscale) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfobar3dscale() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfobar3dscale_;
  tschchartinfobar3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfobar3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfobar3dscale_;
  tschchartinfobar3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfobar3dscale() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartinfobar3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfobar3dscale_ = p;
  }
  return tschchartinfobar3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfobar3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfobar3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale_);
  }
  if (tschchartinfobar3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobar3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfobar3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobar3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfocolumn3dscale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfocolumn3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfocolumn3dscale() const {
  return _internal_has_tschchartinfocolumn3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfocolumn3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfocolumn3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfocolumn3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  return _internal_tschchartinfocolumn3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfocolumn3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale_);
  }
  tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  if (tschchartinfocolumn3dscale) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfocolumn3dscale() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfocolumn3dscale_;
  tschchartinfocolumn3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfocolumn3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfocolumn3dscale_;
  tschchartinfocolumn3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfocolumn3dscale() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartinfocolumn3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfocolumn3dscale_ = p;
  }
  return tschchartinfocolumn3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfocolumn3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfocolumn3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale_);
  }
  if (tschchartinfocolumn3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfocolumn3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfocolumn3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfocolumn3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dscale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dscale() const {
  return _internal_has_tschchartinfodefault3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfodefault3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
  return _internal_tschchartinfodefault3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale_);
  }
  tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  if (tschchartinfodefault3dscale) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dscale() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dscale_;
  tschchartinfodefault3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
  _has_bits_[0] &= ~0x00000020u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dscale_;
  tschchartinfodefault3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3dscale() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartinfodefault3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfodefault3dscale_ = p;
  }
  return tschchartinfodefault3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfodefault3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale_);
  }
  if (tschchartinfodefault3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoline3dscale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoline3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoline3dscale() const {
  return _internal_has_tschchartinfoline3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfoline3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfoline3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoline3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
  return _internal_tschchartinfoline3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfoline3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale_);
  }
  tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  if (tschchartinfoline3dscale) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoline3dscale() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoline3dscale_;
  tschchartinfoline3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfoline3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
  _has_bits_[0] &= ~0x00000040u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoline3dscale_;
  tschchartinfoline3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfoline3dscale() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartinfoline3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfoline3dscale_ = p;
  }
  return tschchartinfoline3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoline3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfoline3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale_);
  }
  if (tschchartinfoline3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoline3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfoline3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoline3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfopie3dscale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfopie3dscale_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfopie3dscale() const {
  return _internal_has_tschchartinfopie3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfopie3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfopie3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfopie3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
  return _internal_tschchartinfopie3dscale();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfopie3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale_);
  }
  tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  if (tschchartinfopie3dscale) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfopie3dscale() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfopie3dscale_;
  tschchartinfopie3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfopie3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
  _has_bits_[0] &= ~0x00000080u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfopie3dscale_;
  tschchartinfopie3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfopie3dscale() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartinfopie3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfopie3dscale_ = p;
  }
  return tschchartinfopie3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfopie3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfopie3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale_);
  }
  if (tschchartinfopie3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfopie3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfopie3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfopie3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefault3dviewport() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfodefault3dviewport_ != nullptr);
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dviewport() const {
  return _internal_has_tschchartinfodefault3dviewport();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::_internal_tschchartinfodefault3dviewport() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfodefault3dviewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dviewport() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  return _internal_tschchartinfodefault3dviewport();
}
inline void ChartNonStyleArchive::unsafe_arena_set_allocated_tschchartinfodefault3dviewport(
    ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport_);
  }
  tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  if (tschchartinfodefault3dviewport) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dviewport() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dviewport_;
  tschchartinfodefault3dviewport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::unsafe_arena_release_tschchartinfodefault3dviewport() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dviewport_;
  tschchartinfodefault3dviewport_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::_internal_mutable_tschchartinfodefault3dviewport() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartinfodefault3dviewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfodefault3dviewport_ = p;
  }
  return tschchartinfodefault3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dviewport() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfodefault3dviewport();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
  return _msg;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport_);
  }
  if (tschchartinfodefault3dviewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfodefault3dviewport));
    if (message_arena != submessage_arena) {
      tschchartinfodefault3dviewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfodefault3dviewport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport)
}

// optional int32 tschchartinfoareacalloutlinetype = 112;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoareacalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoareacalloutlinetype() const {
  return _internal_has_tschchartinfoareacalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfoareacalloutlinetype() {
  tschchartinfoareacalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfoareacalloutlinetype() const {
  return tschchartinfoareacalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfoareacalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfoareacalloutlinetype)
  return _internal_tschchartinfoareacalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfoareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartinfoareacalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfoareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfoareacalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfoareacalloutlinetype)
}

// optional int32 tschchartinfobarcalloutlinetype = 113;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfobarcalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfobarcalloutlinetype() const {
  return _internal_has_tschchartinfobarcalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfobarcalloutlinetype() {
  tschchartinfobarcalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfobarcalloutlinetype() const {
  return tschchartinfobarcalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfobarcalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfobarcalloutlinetype)
  return _internal_tschchartinfobarcalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfobarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartinfobarcalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfobarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfobarcalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfobarcalloutlinetype)
}

// optional int32 tschchartinfobubblecalloutlinetype = 114;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfobubblecalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfobubblecalloutlinetype() const {
  return _internal_has_tschchartinfobubblecalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfobubblecalloutlinetype() {
  tschchartinfobubblecalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfobubblecalloutlinetype() const {
  return tschchartinfobubblecalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfobubblecalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfobubblecalloutlinetype)
  return _internal_tschchartinfobubblecalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfobubblecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartinfobubblecalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfobubblecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfobubblecalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfobubblecalloutlinetype)
}

// optional int32 tschchartinfodefaultcalloutlinetype = 119;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultcalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultcalloutlinetype() const {
  return _internal_has_tschchartinfodefaultcalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultcalloutlinetype() {
  tschchartinfodefaultcalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfodefaultcalloutlinetype() const {
  return tschchartinfodefaultcalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfodefaultcalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultcalloutlinetype)
  return _internal_tschchartinfodefaultcalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartinfodefaultcalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultcalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultcalloutlinetype)
}

// optional int32 tschchartinfolinecalloutlinetype = 115;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfolinecalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfolinecalloutlinetype() const {
  return _internal_has_tschchartinfolinecalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfolinecalloutlinetype() {
  tschchartinfolinecalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfolinecalloutlinetype() const {
  return tschchartinfolinecalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfolinecalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfolinecalloutlinetype)
  return _internal_tschchartinfolinecalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfolinecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartinfolinecalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfolinecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfolinecalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfolinecalloutlinetype)
}

// optional int32 tschchartinfopiecalloutlinetype = 111;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfopiecalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfopiecalloutlinetype() const {
  return _internal_has_tschchartinfopiecalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfopiecalloutlinetype() {
  tschchartinfopiecalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfopiecalloutlinetype() const {
  return tschchartinfopiecalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfopiecalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfopiecalloutlinetype)
  return _internal_tschchartinfopiecalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfopiecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartinfopiecalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfopiecalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfopiecalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfopiecalloutlinetype)
}

// optional int32 tschchartinfoscattercalloutlinetype = 116;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfoscattercalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfoscattercalloutlinetype() const {
  return _internal_has_tschchartinfoscattercalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfoscattercalloutlinetype() {
  tschchartinfoscattercalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfoscattercalloutlinetype() const {
  return tschchartinfoscattercalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfoscattercalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfoscattercalloutlinetype)
  return _internal_tschchartinfoscattercalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfoscattercalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartinfoscattercalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfoscattercalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfoscattercalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfoscattercalloutlinetype)
}

// optional int32 tschchartinfostackedareacalloutlinetype = 117;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfostackedareacalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfostackedareacalloutlinetype() const {
  return _internal_has_tschchartinfostackedareacalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfostackedareacalloutlinetype() {
  tschchartinfostackedareacalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfostackedareacalloutlinetype() const {
  return tschchartinfostackedareacalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfostackedareacalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfostackedareacalloutlinetype)
  return _internal_tschchartinfostackedareacalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfostackedareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartinfostackedareacalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfostackedareacalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfostackedareacalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfostackedareacalloutlinetype)
}

// optional int32 tschchartinfostackedbarcalloutlinetype = 118;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfostackedbarcalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfostackedbarcalloutlinetype() const {
  return _internal_has_tschchartinfostackedbarcalloutlinetype();
}
inline void ChartNonStyleArchive::clear_tschchartinfostackedbarcalloutlinetype() {
  tschchartinfostackedbarcalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfostackedbarcalloutlinetype() const {
  return tschchartinfostackedbarcalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfostackedbarcalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfostackedbarcalloutlinetype)
  return _internal_tschchartinfostackedbarcalloutlinetype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfostackedbarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartinfostackedbarcalloutlinetype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfostackedbarcalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfostackedbarcalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfostackedbarcalloutlinetype)
}

// optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdeprecatedroundedcornerouterendonly() const {
  return _internal_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdeprecatedroundedcornerouterendonly() {
  tschchartinfodefaultdeprecatedroundedcornerouterendonly_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultdeprecatedroundedcornerouterendonly() const {
  return tschchartinfodefaultdeprecatedroundedcornerouterendonly_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultdeprecatedroundedcornerouterendonly() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdeprecatedroundedcornerouterendonly)
  return _internal_tschchartinfodefaultdeprecatedroundedcornerouterendonly();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultdeprecatedroundedcornerouterendonly(bool value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartinfodefaultdeprecatedroundedcornerouterendonly_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdeprecatedroundedcornerouterendonly(bool value) {
  _internal_set_tschchartinfodefaultdeprecatedroundedcornerouterendonly(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdeprecatedroundedcornerouterendonly)
}

// optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdeprecatedroundedcornerradius() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdeprecatedroundedcornerradius() const {
  return _internal_has_tschchartinfodefaultdeprecatedroundedcornerradius();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdeprecatedroundedcornerradius() {
  tschchartinfodefaultdeprecatedroundedcornerradius_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefaultdeprecatedroundedcornerradius() const {
  return tschchartinfodefaultdeprecatedroundedcornerradius_;
}
inline float ChartNonStyleArchive::tschchartinfodefaultdeprecatedroundedcornerradius() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdeprecatedroundedcornerradius)
  return _internal_tschchartinfodefaultdeprecatedroundedcornerradius();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultdeprecatedroundedcornerradius(float value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartinfodefaultdeprecatedroundedcornerradius_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdeprecatedroundedcornerradius(float value) {
  _internal_set_tschchartinfodefaultdeprecatedroundedcornerradius(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdeprecatedroundedcornerradius)
}

// optional int32 tschchartinfodefaultdatasetnamelocation = 24;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdatasetnamelocation() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdatasetnamelocation() const {
  return _internal_has_tschchartinfodefaultdatasetnamelocation();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdatasetnamelocation() {
  tschchartinfodefaultdatasetnamelocation_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfodefaultdatasetnamelocation() const {
  return tschchartinfodefaultdatasetnamelocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfodefaultdatasetnamelocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdatasetnamelocation)
  return _internal_tschchartinfodefaultdatasetnamelocation();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultdatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartinfodefaultdatasetnamelocation_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultdatasetnamelocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdatasetnamelocation)
}

// optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultdonutplacetitleatcenter() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdonutplacetitleatcenter() const {
  return _internal_has_tschchartinfodefaultdonutplacetitleatcenter();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdonutplacetitleatcenter() {
  tschchartinfodefaultdonutplacetitleatcenter_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultdonutplacetitleatcenter() const {
  return tschchartinfodefaultdonutplacetitleatcenter_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultdonutplacetitleatcenter() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdonutplacetitleatcenter)
  return _internal_tschchartinfodefaultdonutplacetitleatcenter();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultdonutplacetitleatcenter(bool value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartinfodefaultdonutplacetitleatcenter_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdonutplacetitleatcenter(bool value) {
  _internal_set_tschchartinfodefaultdonutplacetitleatcenter(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultdonutplacetitleatcenter)
}

// optional float tschchartinfodefaultinnerradius = 27;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultinnerradius() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultinnerradius() const {
  return _internal_has_tschchartinfodefaultinnerradius();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultinnerradius() {
  tschchartinfodefaultinnerradius_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefaultinnerradius() const {
  return tschchartinfodefaultinnerradius_;
}
inline float ChartNonStyleArchive::tschchartinfodefaultinnerradius() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultinnerradius)
  return _internal_tschchartinfodefaultinnerradius();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultinnerradius(float value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartinfodefaultinnerradius_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultinnerradius(float value) {
  _internal_set_tschchartinfodefaultinnerradius(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultinnerradius)
}

// optional int32 tschchartinfodefaultmultidatacontroltype = 25;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultmultidatacontroltype() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultmultidatacontroltype() const {
  return _internal_has_tschchartinfodefaultmultidatacontroltype();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultmultidatacontroltype() {
  tschchartinfodefaultmultidatacontroltype_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::_internal_tschchartinfodefaultmultidatacontroltype() const {
  return tschchartinfodefaultmultidatacontroltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartNonStyleArchive::tschchartinfodefaultmultidatacontroltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultmultidatacontroltype)
  return _internal_tschchartinfodefaultmultidatacontroltype();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultmultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartinfodefaultmultidatacontroltype_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultmultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodefaultmultidatacontroltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultmultidatacontroltype)
}

// optional float tschchartinfodefaultpiestartangle = 19;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultpiestartangle() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultpiestartangle() const {
  return _internal_has_tschchartinfodefaultpiestartangle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultpiestartangle() {
  tschchartinfodefaultpiestartangle_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ChartNonStyleArchive::_internal_tschchartinfodefaultpiestartangle() const {
  return tschchartinfodefaultpiestartangle_;
}
inline float ChartNonStyleArchive::tschchartinfodefaultpiestartangle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultpiestartangle)
  return _internal_tschchartinfodefaultpiestartangle();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultpiestartangle(float value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartinfodefaultpiestartangle_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultpiestartangle(float value) {
  _internal_set_tschchartinfodefaultpiestartangle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultpiestartangle)
}

// optional bool tschchartinfodefaultshowlegend = 20;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultshowlegend() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowlegend() const {
  return _internal_has_tschchartinfodefaultshowlegend();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowlegend() {
  tschchartinfodefaultshowlegend_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultshowlegend() const {
  return tschchartinfodefaultshowlegend_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowlegend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowlegend)
  return _internal_tschchartinfodefaultshowlegend();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultshowlegend(bool value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartinfodefaultshowlegend_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowlegend(bool value) {
  _internal_set_tschchartinfodefaultshowlegend(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowlegend)
}

// optional bool tschchartinfodefaultshowtitle = 21;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultshowtitle() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowtitle() const {
  return _internal_has_tschchartinfodefaultshowtitle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowtitle() {
  tschchartinfodefaultshowtitle_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultshowtitle() const {
  return tschchartinfodefaultshowtitle_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowtitle)
  return _internal_tschchartinfodefaultshowtitle();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultshowtitle(bool value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartinfodefaultshowtitle_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowtitle(bool value) {
  _internal_set_tschchartinfodefaultshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultshowtitle)
}

// optional bool tschchartinfodefaultskiphiddendata = 22;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaultskiphiddendata() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaultskiphiddendata() const {
  return _internal_has_tschchartinfodefaultskiphiddendata();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultskiphiddendata() {
  tschchartinfodefaultskiphiddendata_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ChartNonStyleArchive::_internal_tschchartinfodefaultskiphiddendata() const {
  return tschchartinfodefaultskiphiddendata_;
}
inline bool ChartNonStyleArchive::tschchartinfodefaultskiphiddendata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultskiphiddendata)
  return _internal_tschchartinfodefaultskiphiddendata();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaultskiphiddendata(bool value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartinfodefaultskiphiddendata_ = value;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultskiphiddendata(bool value) {
  _internal_set_tschchartinfodefaultskiphiddendata(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaultskiphiddendata)
}

// optional string tschchartinfodefaulttitle = 23;
inline bool ChartNonStyleArchive::_internal_has_tschchartinfodefaulttitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartNonStyleArchive::has_tschchartinfodefaulttitle() const {
  return _internal_has_tschchartinfodefaulttitle();
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaulttitle() {
  tschchartinfodefaulttitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartNonStyleArchive::tschchartinfodefaulttitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
  return _internal_tschchartinfodefaulttitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartNonStyleArchive::set_tschchartinfodefaulttitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartinfodefaulttitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
}
inline std::string* ChartNonStyleArchive::mutable_tschchartinfodefaulttitle() {
  std::string* _s = _internal_mutable_tschchartinfodefaulttitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
  return _s;
}
inline const std::string& ChartNonStyleArchive::_internal_tschchartinfodefaulttitle() const {
  return tschchartinfodefaulttitle_.Get();
}
inline void ChartNonStyleArchive::_internal_set_tschchartinfodefaulttitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartinfodefaulttitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartNonStyleArchive::_internal_mutable_tschchartinfodefaulttitle() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartinfodefaulttitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartNonStyleArchive::release_tschchartinfodefaulttitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
  if (!_internal_has_tschchartinfodefaulttitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartinfodefaulttitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefaulttitle(std::string* tschchartinfodefaulttitle) {
  if (tschchartinfodefaulttitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartinfodefaulttitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartinfodefaulttitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle)
}

// -------------------------------------------------------------------

// LegendStyleArchive

// optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultfill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodeldefaultfill_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultfill() const {
  return _internal_has_tschlegendmodeldefaultfill();
}
inline const ::TSD::FillArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultfill() const {
  const ::TSD::FillArchive* p = tschlegendmodeldefaultfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& LegendStyleArchive::tschlegendmodeldefaultfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
  return _internal_tschlegendmodeldefaultfill();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultfill(
    ::TSD::FillArchive* tschlegendmodeldefaultfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill_);
  }
  tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  if (tschlegendmodeldefaultfill) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
}
inline ::TSD::FillArchive* LegendStyleArchive::release_tschlegendmodeldefaultfill() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = tschlegendmodeldefaultfill_;
  tschlegendmodeldefaultfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = tschlegendmodeldefaultfill_;
  tschlegendmodeldefaultfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultfill() {
  _has_bits_[0] |= 0x00000001u;
  if (tschlegendmodeldefaultfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschlegendmodeldefaultfill_ = p;
  }
  return tschlegendmodeldefaultfill_;
}
inline ::TSD::FillArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschlegendmodeldefaultfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
  return _msg;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill_);
  }
  if (tschlegendmodeldefaultfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultfill));
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill)
}

// optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return _internal_has_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultlabelparagraphstyleindex() {
  tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LegendStyleArchive::_internal_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return tschlegendmodeldefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LegendStyleArchive::tschlegendmodeldefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultlabelparagraphstyleindex)
  return _internal_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline void LegendStyleArchive::_internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  tschlegendmodeldefaultlabelparagraphstyleindex_ = value;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschlegendmodeldefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultlabelparagraphstyleindex)
}

// optional float tschlegendmodeldefaultopacity = 3;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultopacity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultopacity() const {
  return _internal_has_tschlegendmodeldefaultopacity();
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultopacity() {
  tschlegendmodeldefaultopacity_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LegendStyleArchive::_internal_tschlegendmodeldefaultopacity() const {
  return tschlegendmodeldefaultopacity_;
}
inline float LegendStyleArchive::tschlegendmodeldefaultopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultopacity)
  return _internal_tschlegendmodeldefaultopacity();
}
inline void LegendStyleArchive::_internal_set_tschlegendmodeldefaultopacity(float value) {
  _has_bits_[0] |= 0x00000010u;
  tschlegendmodeldefaultopacity_ = value;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultopacity(float value) {
  _internal_set_tschlegendmodeldefaultopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultopacity)
}

// optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultshadow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodeldefaultshadow_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultshadow() const {
  return _internal_has_tschlegendmodeldefaultshadow();
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultshadow() const {
  const ::TSD::ShadowArchive* p = tschlegendmodeldefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::tschlegendmodeldefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
  return _internal_tschlegendmodeldefaultshadow();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultshadow(
    ::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow_);
  }
  tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  if (tschlegendmodeldefaultshadow) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
}
inline ::TSD::ShadowArchive* LegendStyleArchive::release_tschlegendmodeldefaultshadow() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = tschlegendmodeldefaultshadow_;
  tschlegendmodeldefaultshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = tschlegendmodeldefaultshadow_;
  tschlegendmodeldefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultshadow() {
  _has_bits_[0] |= 0x00000002u;
  if (tschlegendmodeldefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschlegendmodeldefaultshadow_ = p;
  }
  return tschlegendmodeldefaultshadow_;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschlegendmodeldefaultshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
  return _msg;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow_);
  }
  if (tschlegendmodeldefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultshadow));
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow)
}

// optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
inline bool LegendStyleArchive::_internal_has_tschlegendmodeldefaultstroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodeldefaultstroke_ != nullptr);
  return value;
}
inline bool LegendStyleArchive::has_tschlegendmodeldefaultstroke() const {
  return _internal_has_tschlegendmodeldefaultstroke();
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::_internal_tschlegendmodeldefaultstroke() const {
  const ::TSD::StrokeArchive* p = tschlegendmodeldefaultstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::tschlegendmodeldefaultstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
  return _internal_tschlegendmodeldefaultstroke();
}
inline void LegendStyleArchive::unsafe_arena_set_allocated_tschlegendmodeldefaultstroke(
    ::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke_);
  }
  tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  if (tschlegendmodeldefaultstroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
}
inline ::TSD::StrokeArchive* LegendStyleArchive::release_tschlegendmodeldefaultstroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschlegendmodeldefaultstroke_;
  tschlegendmodeldefaultstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::unsafe_arena_release_tschlegendmodeldefaultstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschlegendmodeldefaultstroke_;
  tschlegendmodeldefaultstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::_internal_mutable_tschlegendmodeldefaultstroke() {
  _has_bits_[0] |= 0x00000004u;
  if (tschlegendmodeldefaultstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschlegendmodeldefaultstroke_ = p;
  }
  return tschlegendmodeldefaultstroke_;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschlegendmodeldefaultstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
  return _msg;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke_);
  }
  if (tschlegendmodeldefaultstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodeldefaultstroke));
    if (message_arena != submessage_arena) {
      tschlegendmodeldefaultstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodeldefaultstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke)
}

// -------------------------------------------------------------------

// LegendNonStyleArchive

// -------------------------------------------------------------------

// ChartAxisStyleArchive

// optional float tschchartaxiscategory3dgridlineopacity = 1;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategory3dgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlineopacity() const {
  return _internal_has_tschchartaxiscategory3dgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlineopacity() {
  tschchartaxiscategory3dgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategory3dgridlineopacity() const {
  return tschchartaxiscategory3dgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategory3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlineopacity)
  return _internal_tschchartaxiscategory3dgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategory3dgridlineopacity(float value) {
  _has_bits_[0] |= 0x00000400u;
  tschchartaxiscategory3dgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategory3dgridlineopacity(float value) {
  _internal_set_tschchartaxiscategory3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlineopacity)
}

// optional float tschchartaxisvalue3dgridlineopacity = 2;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalue3dgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlineopacity() const {
  return _internal_has_tschchartaxisvalue3dgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlineopacity() {
  tschchartaxisvalue3dgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvalue3dgridlineopacity() const {
  return tschchartaxisvalue3dgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvalue3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlineopacity)
  return _internal_tschchartaxisvalue3dgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalue3dgridlineopacity(float value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartaxisvalue3dgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalue3dgridlineopacity(float value) {
  _internal_set_tschchartaxisvalue3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlineopacity)
}

// optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategory3dgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategory3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlinestroke() const {
  return _internal_has_tschchartaxiscategory3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategory3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxiscategory3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategory3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  return _internal_tschchartaxiscategory3dgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategory3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke_);
  }
  tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  if (tschchartaxiscategory3dgridlinestroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategory3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategory3dgridlinestroke_;
  tschchartaxiscategory3dgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategory3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategory3dgridlinestroke_;
  tschchartaxiscategory3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategory3dgridlinestroke() {
  _has_bits_[0] |= 0x00000001u;
  if (tschchartaxiscategory3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxiscategory3dgridlinestroke_ = p;
  }
  return tschchartaxiscategory3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategory3dgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxiscategory3dgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke_);
  }
  if (tschchartaxiscategory3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategory3dgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxiscategory3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategory3dgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalue3dgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvalue3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlinestroke() const {
  return _internal_has_tschchartaxisvalue3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalue3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisvalue3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalue3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  return _internal_tschchartaxisvalue3dgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalue3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke_);
  }
  tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  if (tschchartaxisvalue3dgridlinestroke) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalue3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalue3dgridlinestroke_;
  tschchartaxisvalue3dgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalue3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalue3dgridlinestroke_;
  tschchartaxisvalue3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalue3dgridlinestroke() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartaxisvalue3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxisvalue3dgridlinestroke_ = p;
  }
  return tschchartaxisvalue3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalue3dgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisvalue3dgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke_);
  }
  if (tschchartaxisvalue3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalue3dgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisvalue3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalue3dgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke)
}

// optional int32 tschchartaxiscategoryhorizontalspacing = 5;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryhorizontalspacing() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryhorizontalspacing() const {
  return _internal_has_tschchartaxiscategoryhorizontalspacing();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryhorizontalspacing() {
  tschchartaxiscategoryhorizontalspacing_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategoryhorizontalspacing() const {
  return tschchartaxiscategoryhorizontalspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategoryhorizontalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryhorizontalspacing)
  return _internal_tschchartaxiscategoryhorizontalspacing();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartaxiscategoryhorizontalspacing_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryhorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategoryhorizontalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryhorizontalspacing)
}

// optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorylabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelparagraphstyleindex() const {
  return _internal_has_tschchartaxiscategorylabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelparagraphstyleindex() {
  tschchartaxiscategorylabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategorylabelparagraphstyleindex() const {
  return tschchartaxiscategorylabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategorylabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelparagraphstyleindex)
  return _internal_tschchartaxiscategorylabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartaxiscategorylabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategorylabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelparagraphstyleindex)
}

// optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return _internal_has_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelparagraphstyleindex() {
  tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return tschchartaxisdefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisdefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelparagraphstyleindex)
  return _internal_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartaxisdefaultlabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelparagraphstyleindex)
}

// optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluelabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelparagraphstyleindex() const {
  return _internal_has_tschchartaxisvaluelabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelparagraphstyleindex() {
  tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisvaluelabelparagraphstyleindex() const {
  return tschchartaxisvaluelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisvaluelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelparagraphstyleindex)
  return _internal_tschchartaxisvaluelabelparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartaxisvaluelabelparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelparagraphstyleindex)
}

// optional float tschchartaxiscategorylabelsorientation = 9;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorylabelsorientation() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelsorientation() const {
  return _internal_has_tschchartaxiscategorylabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelsorientation() {
  tschchartaxiscategorylabelsorientation_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategorylabelsorientation() const {
  return tschchartaxiscategorylabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategorylabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelsorientation)
  return _internal_tschchartaxiscategorylabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorylabelsorientation(float value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartaxiscategorylabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelsorientation(float value) {
  _internal_set_tschchartaxiscategorylabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorylabelsorientation)
}

// optional float tschchartaxisdefaultlabelsorientation = 10;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaultlabelsorientation() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelsorientation() const {
  return _internal_has_tschchartaxisdefaultlabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelsorientation() {
  tschchartaxisdefaultlabelsorientation_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisdefaultlabelsorientation() const {
  return tschchartaxisdefaultlabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxisdefaultlabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelsorientation)
  return _internal_tschchartaxisdefaultlabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaultlabelsorientation(float value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartaxisdefaultlabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelsorientation(float value) {
  _internal_set_tschchartaxisdefaultlabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaultlabelsorientation)
}

// optional float tschchartaxisvaluelabelsorientation = 11;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluelabelsorientation() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelsorientation() const {
  return _internal_has_tschchartaxisvaluelabelsorientation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelsorientation() {
  tschchartaxisvaluelabelsorientation_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvaluelabelsorientation() const {
  return tschchartaxisvaluelabelsorientation_;
}
inline float ChartAxisStyleArchive::tschchartaxisvaluelabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelsorientation)
  return _internal_tschchartaxisvaluelabelsorientation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluelabelsorientation(float value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartaxisvaluelabelsorientation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelsorientation(float value) {
  _internal_set_tschchartaxisvaluelabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluelabelsorientation)
}

// optional float tschchartaxiscategorymajorgridlineopacity = 12;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineopacity() const {
  return _internal_has_tschchartaxiscategorymajorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineopacity() {
  tschchartaxiscategorymajorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlineopacity() const {
  return tschchartaxiscategorymajorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineopacity)
  return _internal_tschchartaxiscategorymajorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorymajorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartaxiscategorymajorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorymajorgridlineopacity(float value) {
  _internal_set_tschchartaxiscategorymajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineopacity)
}

// optional float tschchartaxisvaluemajorgridlineopacity = 13;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineopacity() const {
  return _internal_has_tschchartaxisvaluemajorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineopacity() {
  tschchartaxisvaluemajorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlineopacity() const {
  return tschchartaxisvaluemajorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineopacity)
  return _internal_tschchartaxisvaluemajorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluemajorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartaxisvaluemajorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluemajorgridlineopacity(float value) {
  _internal_set_tschchartaxisvaluemajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineopacity)
}

// optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategorymajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineshadow() const {
  return _internal_has_tschchartaxiscategorymajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxiscategorymajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  return _internal_tschchartaxiscategorymajorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow_);
  }
  tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  if (tschchartaxiscategorymajorgridlineshadow) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlineshadow() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategorymajorgridlineshadow_;
  tschchartaxiscategorymajorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategorymajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategorymajorgridlineshadow_;
  tschchartaxiscategorymajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategorymajorgridlineshadow() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartaxiscategorymajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartaxiscategorymajorgridlineshadow_ = p;
  }
  return tschchartaxiscategorymajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxiscategorymajorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow_);
  }
  if (tschchartaxiscategorymajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxiscategorymajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategorymajorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow)
}

// optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvaluemajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineshadow() const {
  return _internal_has_tschchartaxisvaluemajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxisvaluemajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  return _internal_tschchartaxisvaluemajorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow_);
  }
  tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  if (tschchartaxisvaluemajorgridlineshadow) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlineshadow() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = tschchartaxisvaluemajorgridlineshadow_;
  tschchartaxisvaluemajorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvaluemajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::ShadowArchive* temp = tschchartaxisvaluemajorgridlineshadow_;
  tschchartaxisvaluemajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvaluemajorgridlineshadow() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartaxisvaluemajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartaxisvaluemajorgridlineshadow_ = p;
  }
  return tschchartaxisvaluemajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxisvaluemajorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow_);
  }
  if (tschchartaxisvaluemajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxisvaluemajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvaluemajorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow)
}

// optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorymajorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategorymajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlinestroke() const {
  return _internal_has_tschchartaxiscategorymajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategorymajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxiscategorymajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  return _internal_tschchartaxiscategorymajorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategorymajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke_);
  }
  tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  if (tschchartaxiscategorymajorgridlinestroke) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlinestroke() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategorymajorgridlinestroke_;
  tschchartaxiscategorymajorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategorymajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategorymajorgridlinestroke_;
  tschchartaxiscategorymajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategorymajorgridlinestroke() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartaxiscategorymajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxiscategorymajorgridlinestroke_ = p;
  }
  return tschchartaxiscategorymajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxiscategorymajorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke_);
  }
  if (tschchartaxiscategorymajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategorymajorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxiscategorymajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategorymajorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluemajorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvaluemajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlinestroke() const {
  return _internal_has_tschchartaxisvaluemajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvaluemajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisvaluemajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  return _internal_tschchartaxisvaluemajorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvaluemajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke_);
  }
  tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  if (tschchartaxisvaluemajorgridlinestroke) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlinestroke() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartaxisvaluemajorgridlinestroke_;
  tschchartaxisvaluemajorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvaluemajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartaxisvaluemajorgridlinestroke_;
  tschchartaxisvaluemajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvaluemajorgridlinestroke() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartaxisvaluemajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxisvaluemajorgridlinestroke_ = p;
  }
  return tschchartaxisvaluemajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisvaluemajorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke_);
  }
  if (tschchartaxisvaluemajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvaluemajorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisvaluemajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvaluemajorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke)
}

// optional float tschchartaxiscategoryminorgridlineopacity = 18;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineopacity() const {
  return _internal_has_tschchartaxiscategoryminorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineopacity() {
  tschchartaxiscategoryminorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlineopacity() const {
  return tschchartaxiscategoryminorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineopacity)
  return _internal_tschchartaxiscategoryminorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryminorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartaxiscategoryminorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryminorgridlineopacity(float value) {
  _internal_set_tschchartaxiscategoryminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineopacity)
}

// optional float tschchartaxisvalueminorgridlineopacity = 19;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineopacity() const {
  return _internal_has_tschchartaxisvalueminorgridlineopacity();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineopacity() {
  tschchartaxisvalueminorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlineopacity() const {
  return tschchartaxisvalueminorgridlineopacity_;
}
inline float ChartAxisStyleArchive::tschchartaxisvalueminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineopacity)
  return _internal_tschchartaxisvalueminorgridlineopacity();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueminorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartaxisvalueminorgridlineopacity_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueminorgridlineopacity(float value) {
  _internal_set_tschchartaxisvalueminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineopacity)
}

// optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategoryminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineshadow() const {
  return _internal_has_tschchartaxiscategoryminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxiscategoryminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  return _internal_tschchartaxiscategoryminorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow_);
  }
  tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  if (tschchartaxiscategoryminorgridlineshadow) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlineshadow() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategoryminorgridlineshadow_;
  tschchartaxiscategoryminorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategoryminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = tschchartaxiscategoryminorgridlineshadow_;
  tschchartaxiscategoryminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategoryminorgridlineshadow() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartaxiscategoryminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartaxiscategoryminorgridlineshadow_ = p;
  }
  return tschchartaxiscategoryminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxiscategoryminorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow_);
  }
  if (tschchartaxiscategoryminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxiscategoryminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategoryminorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow)
}

// optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvalueminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineshadow() const {
  return _internal_has_tschchartaxisvalueminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxisvalueminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  return _internal_tschchartaxisvalueminorgridlineshadow();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalueminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow_);
  }
  tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  if (tschchartaxisvalueminorgridlineshadow) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlineshadow() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartaxisvalueminorgridlineshadow_;
  tschchartaxisvalueminorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalueminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartaxisvalueminorgridlineshadow_;
  tschchartaxisvalueminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalueminorgridlineshadow() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartaxisvalueminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartaxisvalueminorgridlineshadow_ = p;
  }
  return tschchartaxisvalueminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxisvalueminorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow_);
  }
  if (tschchartaxisvalueminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxisvalueminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalueminorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow)
}

// optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryminorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxiscategoryminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlinestroke() const {
  return _internal_has_tschchartaxiscategoryminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxiscategoryminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxiscategoryminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  return _internal_tschchartaxiscategoryminorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxiscategoryminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke_);
  }
  tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  if (tschchartaxiscategoryminorgridlinestroke) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlinestroke() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategoryminorgridlinestroke_;
  tschchartaxiscategoryminorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxiscategoryminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = tschchartaxiscategoryminorgridlinestroke_;
  tschchartaxiscategoryminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxiscategoryminorgridlinestroke() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartaxiscategoryminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxiscategoryminorgridlinestroke_ = p;
  }
  return tschchartaxiscategoryminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxiscategoryminorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke_);
  }
  if (tschchartaxiscategoryminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxiscategoryminorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxiscategoryminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxiscategoryminorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke)
}

// optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueminorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisvalueminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlinestroke() const {
  return _internal_has_tschchartaxisvalueminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::_internal_tschchartaxisvalueminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisvalueminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  return _internal_tschchartaxisvalueminorgridlinestroke();
}
inline void ChartAxisStyleArchive::unsafe_arena_set_allocated_tschchartaxisvalueminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke_);
  }
  tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  if (tschchartaxisvalueminorgridlinestroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlinestroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalueminorgridlinestroke_;
  tschchartaxisvalueminorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::unsafe_arena_release_tschchartaxisvalueminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartaxisvalueminorgridlinestroke_;
  tschchartaxisvalueminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::_internal_mutable_tschchartaxisvalueminorgridlinestroke() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartaxisvalueminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxisvalueminorgridlinestroke_ = p;
  }
  return tschchartaxisvalueminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisvalueminorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
  return _msg;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke_);
  }
  if (tschchartaxisvalueminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisvalueminorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisvalueminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisvalueminorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke)
}

// optional bool tschchartaxiscategoryshowaxis = 24;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowaxis() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowaxis() const {
  return _internal_has_tschchartaxiscategoryshowaxis();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowaxis() {
  tschchartaxiscategoryshowaxis_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowaxis() const {
  return tschchartaxiscategoryshowaxis_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowaxis)
  return _internal_tschchartaxiscategoryshowaxis();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowaxis(bool value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartaxiscategoryshowaxis_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowaxis(bool value) {
  _internal_set_tschchartaxiscategoryshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowaxis)
}

// optional bool tschchartaxisvalueshowaxis = 25;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowaxis() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowaxis() const {
  return _internal_has_tschchartaxisvalueshowaxis();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowaxis() {
  tschchartaxisvalueshowaxis_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowaxis() const {
  return tschchartaxisvalueshowaxis_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowaxis)
  return _internal_tschchartaxisvalueshowaxis();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowaxis(bool value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartaxisvalueshowaxis_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowaxis(bool value) {
  _internal_set_tschchartaxisvalueshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowaxis)
}

// optional bool tschchartaxiscategoryshowlastlabel = 26;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowlastlabel() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowlastlabel() const {
  return _internal_has_tschchartaxiscategoryshowlastlabel();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowlastlabel() {
  tschchartaxiscategoryshowlastlabel_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowlastlabel() const {
  return tschchartaxiscategoryshowlastlabel_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowlastlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowlastlabel)
  return _internal_tschchartaxiscategoryshowlastlabel();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowlastlabel(bool value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartaxiscategoryshowlastlabel_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowlastlabel(bool value) {
  _internal_set_tschchartaxiscategoryshowlastlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowlastlabel)
}

// optional bool tschchartaxiscategoryshowmajorgridlines = 27;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajorgridlines() const {
  return _internal_has_tschchartaxiscategoryshowmajorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajorgridlines() {
  tschchartaxiscategoryshowmajorgridlines_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowmajorgridlines() const {
  return tschchartaxiscategoryshowmajorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajorgridlines)
  return _internal_tschchartaxiscategoryshowmajorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartaxiscategoryshowmajorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  _internal_set_tschchartaxiscategoryshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajorgridlines)
}

// optional bool tschchartaxisvalueshowmajorgridlines = 28;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajorgridlines() const {
  return _internal_has_tschchartaxisvalueshowmajorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajorgridlines() {
  tschchartaxisvalueshowmajorgridlines_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowmajorgridlines() const {
  return tschchartaxisvalueshowmajorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajorgridlines)
  return _internal_tschchartaxisvalueshowmajorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowmajorgridlines(bool value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartaxisvalueshowmajorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajorgridlines(bool value) {
  _internal_set_tschchartaxisvalueshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajorgridlines)
}

// optional bool tschchartaxiscategoryshowmajortickmarks = 29;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowmajortickmarks() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajortickmarks() const {
  return _internal_has_tschchartaxiscategoryshowmajortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajortickmarks() {
  tschchartaxiscategoryshowmajortickmarks_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowmajortickmarks() const {
  return tschchartaxiscategoryshowmajortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajortickmarks)
  return _internal_tschchartaxiscategoryshowmajortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartaxiscategoryshowmajortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  _internal_set_tschchartaxiscategoryshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowmajortickmarks)
}

// optional bool tschchartaxisvalueshowmajortickmarks = 30;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowmajortickmarks() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajortickmarks() const {
  return _internal_has_tschchartaxisvalueshowmajortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajortickmarks() {
  tschchartaxisvalueshowmajortickmarks_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowmajortickmarks() const {
  return tschchartaxisvalueshowmajortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajortickmarks)
  return _internal_tschchartaxisvalueshowmajortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowmajortickmarks(bool value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartaxisvalueshowmajortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajortickmarks(bool value) {
  _internal_set_tschchartaxisvalueshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowmajortickmarks)
}

// optional bool tschchartaxisvalueshowminimumlabel = 31;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminimumlabel() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminimumlabel() const {
  return _internal_has_tschchartaxisvalueshowminimumlabel();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminimumlabel() {
  tschchartaxisvalueshowminimumlabel_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminimumlabel() const {
  return tschchartaxisvalueshowminimumlabel_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminimumlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminimumlabel)
  return _internal_tschchartaxisvalueshowminimumlabel();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminimumlabel(bool value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartaxisvalueshowminimumlabel_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminimumlabel(bool value) {
  _internal_set_tschchartaxisvalueshowminimumlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminimumlabel)
}

// optional bool tschchartaxiscategoryshowminorgridlines = 32;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowminorgridlines() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminorgridlines() const {
  return _internal_has_tschchartaxiscategoryshowminorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminorgridlines() {
  tschchartaxiscategoryshowminorgridlines_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowminorgridlines() const {
  return tschchartaxiscategoryshowminorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminorgridlines)
  return _internal_tschchartaxiscategoryshowminorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowminorgridlines(bool value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartaxiscategoryshowminorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminorgridlines(bool value) {
  _internal_set_tschchartaxiscategoryshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminorgridlines)
}

// optional bool tschchartaxisvalueshowminorgridlines = 33;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminorgridlines() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminorgridlines() const {
  return _internal_has_tschchartaxisvalueshowminorgridlines();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminorgridlines() {
  tschchartaxisvalueshowminorgridlines_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminorgridlines() const {
  return tschchartaxisvalueshowminorgridlines_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminorgridlines)
  return _internal_tschchartaxisvalueshowminorgridlines();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminorgridlines(bool value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartaxisvalueshowminorgridlines_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminorgridlines(bool value) {
  _internal_set_tschchartaxisvalueshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminorgridlines)
}

// optional bool tschchartaxiscategoryshowminortickmarks = 34;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryshowminortickmarks() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminortickmarks() const {
  return _internal_has_tschchartaxiscategoryshowminortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminortickmarks() {
  tschchartaxiscategoryshowminortickmarks_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxiscategoryshowminortickmarks() const {
  return tschchartaxiscategoryshowminortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminortickmarks)
  return _internal_tschchartaxiscategoryshowminortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryshowminortickmarks(bool value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartaxiscategoryshowminortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminortickmarks(bool value) {
  _internal_set_tschchartaxiscategoryshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryshowminortickmarks)
}

// optional bool tschchartaxisvalueshowminortickmarks = 35;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvalueshowminortickmarks() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminortickmarks() const {
  return _internal_has_tschchartaxisvalueshowminortickmarks();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminortickmarks() {
  tschchartaxisvalueshowminortickmarks_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ChartAxisStyleArchive::_internal_tschchartaxisvalueshowminortickmarks() const {
  return tschchartaxisvalueshowminortickmarks_;
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminortickmarks)
  return _internal_tschchartaxisvalueshowminortickmarks();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvalueshowminortickmarks(bool value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartaxisvalueshowminortickmarks_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminortickmarks(bool value) {
  _internal_set_tschchartaxisvalueshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueshowminortickmarks)
}

// optional int32 tschchartaxiscategorytickmarklocation = 36;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorytickmarklocation() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytickmarklocation() const {
  return _internal_has_tschchartaxiscategorytickmarklocation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytickmarklocation() {
  tschchartaxiscategorytickmarklocation_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategorytickmarklocation() const {
  return tschchartaxiscategorytickmarklocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategorytickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytickmarklocation)
  return _internal_tschchartaxiscategorytickmarklocation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartaxiscategorytickmarklocation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategorytickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytickmarklocation)
}

// optional int32 tschchartaxisvaluetickmarklocation = 37;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluetickmarklocation() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetickmarklocation() const {
  return _internal_has_tschchartaxisvaluetickmarklocation();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetickmarklocation() {
  tschchartaxisvaluetickmarklocation_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisvaluetickmarklocation() const {
  return tschchartaxisvaluetickmarklocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisvaluetickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetickmarklocation)
  return _internal_tschchartaxisvaluetickmarklocation();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartaxisvaluetickmarklocation_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluetickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetickmarklocation)
}

// optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategorytitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytitleparagraphstyleindex() const {
  return _internal_has_tschchartaxiscategorytitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytitleparagraphstyleindex() {
  tschchartaxiscategorytitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategorytitleparagraphstyleindex() const {
  return tschchartaxiscategorytitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategorytitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytitleparagraphstyleindex)
  return _internal_tschchartaxiscategorytitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartaxiscategorytitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategorytitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorytitleparagraphstyleindex)
}

// optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return _internal_has_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaulttitleparagraphstyleindex() {
  tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return tschchartaxisdefaulttitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisdefaulttitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaulttitleparagraphstyleindex)
  return _internal_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartaxisdefaulttitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaulttitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefaulttitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisdefaulttitleparagraphstyleindex)
}

// optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxisvaluetitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetitleparagraphstyleindex() const {
  return _internal_has_tschchartaxisvaluetitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetitleparagraphstyleindex() {
  tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxisvaluetitleparagraphstyleindex() const {
  return tschchartaxisvaluetitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxisvaluetitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetitleparagraphstyleindex)
  return _internal_tschchartaxisvaluetitleparagraphstyleindex();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  tschchartaxisvaluetitleparagraphstyleindex_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluetitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluetitleparagraphstyleindex)
}

// optional int32 tschchartaxiscategoryverticalspacing = 41;
inline bool ChartAxisStyleArchive::_internal_has_tschchartaxiscategoryverticalspacing() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryverticalspacing() const {
  return _internal_has_tschchartaxiscategoryverticalspacing();
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryverticalspacing() {
  tschchartaxiscategoryverticalspacing_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::_internal_tschchartaxiscategoryverticalspacing() const {
  return tschchartaxiscategoryverticalspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisStyleArchive::tschchartaxiscategoryverticalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryverticalspacing)
  return _internal_tschchartaxiscategoryverticalspacing();
}
inline void ChartAxisStyleArchive::_internal_set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000100u;
  tschchartaxiscategoryverticalspacing_ = value;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxiscategoryverticalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryverticalspacing)
}

// -------------------------------------------------------------------

// ChartAxisNonStyleArchive

// optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefault1_0dateformat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefault1_0dateformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault1_0dateformat() const {
  return _internal_has_tschchartaxisdefault1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefault1_0dateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdefault1_0dateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefault1_0dateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0dateformat)
  return _internal_tschchartaxisdefault1_0dateformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefault1_0dateformat(
    ::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefault1_0dateformat_);
  }
  tschchartaxisdefault1_0dateformat_ = tschchartaxisdefault1_0dateformat;
  if (tschchartaxisdefault1_0dateformat) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0dateformat)
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefault1_0dateformat() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefault1_0dateformat_;
  tschchartaxisdefault1_0dateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefault1_0dateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0dateformat)
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefault1_0dateformat_;
  tschchartaxisdefault1_0dateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefault1_0dateformat() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartaxisdefault1_0dateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdefault1_0dateformat_ = p;
  }
  return tschchartaxisdefault1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefault1_0dateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdefault1_0dateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0dateformat)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefault1_0dateformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefault1_0dateformat_);
  }
  if (tschchartaxisdefault1_0dateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefault1_0dateformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdefault1_0dateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefault1_0dateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartaxisdefault1_0dateformat_ = tschchartaxisdefault1_0dateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0dateformat)
}

// optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefault1_0numberformat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefault1_0numberformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault1_0numberformat() const {
  return _internal_has_tschchartaxisdefault1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefault1_0numberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdefault1_0numberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefault1_0numberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0numberformat)
  return _internal_tschchartaxisdefault1_0numberformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefault1_0numberformat(
    ::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefault1_0numberformat_);
  }
  tschchartaxisdefault1_0numberformat_ = tschchartaxisdefault1_0numberformat;
  if (tschchartaxisdefault1_0numberformat) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0numberformat)
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefault1_0numberformat() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefault1_0numberformat_;
  tschchartaxisdefault1_0numberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefault1_0numberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0numberformat)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefault1_0numberformat_;
  tschchartaxisdefault1_0numberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefault1_0numberformat() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartaxisdefault1_0numberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdefault1_0numberformat_ = p;
  }
  return tschchartaxisdefault1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefault1_0numberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdefault1_0numberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0numberformat)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefault1_0numberformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefault1_0numberformat_);
  }
  if (tschchartaxisdefault1_0numberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefault1_0numberformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdefault1_0numberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefault1_0numberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartaxisdefault1_0numberformat_ = tschchartaxisdefault1_0numberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0numberformat)
}

// optional int32 tschchartaxisdefault3dlabelposition = 1;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefault3dlabelposition() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault3dlabelposition() const {
  return _internal_has_tschchartaxisdefault3dlabelposition();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefault3dlabelposition() {
  tschchartaxisdefault3dlabelposition_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisdefault3dlabelposition() const {
  return tschchartaxisdefault3dlabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisdefault3dlabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault3dlabelposition)
  return _internal_tschchartaxisdefault3dlabelposition();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tschchartaxisdefault3dlabelposition_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefault3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefault3dlabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault3dlabelposition)
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultdateformat() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultdateformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultdateformat() const {
  return _internal_has_tschchartaxisdefaultdateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultdateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdefaultdateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultdateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdateformat)
  return _internal_tschchartaxisdefaultdateformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultdateformat(
    ::TSK::FormatStructArchive* tschchartaxisdefaultdateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultdateformat_);
  }
  tschchartaxisdefaultdateformat_ = tschchartaxisdefaultdateformat;
  if (tschchartaxisdefaultdateformat) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdateformat)
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultdateformat() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultdateformat_;
  tschchartaxisdefaultdateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultdateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdateformat)
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultdateformat_;
  tschchartaxisdefaultdateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultdateformat() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartaxisdefaultdateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdefaultdateformat_ = p;
  }
  return tschchartaxisdefaultdateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultdateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdefaultdateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdateformat)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultdateformat(::TSK::FormatStructArchive* tschchartaxisdefaultdateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultdateformat_);
  }
  if (tschchartaxisdefaultdateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultdateformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultdateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultdateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartaxisdefaultdateformat_ = tschchartaxisdefaultdateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdateformat)
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultdurationformat() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultdurationformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultdurationformat() const {
  return _internal_has_tschchartaxisdefaultdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultdurationformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdefaultdurationformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultdurationformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdurationformat)
  return _internal_tschchartaxisdefaultdurationformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultdurationformat(
    ::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultdurationformat_);
  }
  tschchartaxisdefaultdurationformat_ = tschchartaxisdefaultdurationformat;
  if (tschchartaxisdefaultdurationformat) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdurationformat)
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultdurationformat() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultdurationformat_;
  tschchartaxisdefaultdurationformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultdurationformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdurationformat)
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultdurationformat_;
  tschchartaxisdefaultdurationformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultdurationformat() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartaxisdefaultdurationformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdefaultdurationformat_ = p;
  }
  return tschchartaxisdefaultdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultdurationformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdefaultdurationformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdurationformat)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultdurationformat(::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultdurationformat_);
  }
  if (tschchartaxisdefaultdurationformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultdurationformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultdurationformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultdurationformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartaxisdefaultdurationformat_ = tschchartaxisdefaultdurationformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdurationformat)
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultnumberformat_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformat() const {
  return _internal_has_tschchartaxisdefaultnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultnumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdefaultnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  return _internal_tschchartaxisdefaultnumberformat();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultnumberformat(
    ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultnumberformat_);
  }
  tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  if (tschchartaxisdefaultnumberformat) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultnumberformat() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultnumberformat_;
  tschchartaxisdefaultnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultnumberformat_;
  tschchartaxisdefaultnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultnumberformat() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartaxisdefaultnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdefaultnumberformat_ = p;
  }
  return tschchartaxisdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdefaultnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultnumberformat(::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultnumberformat_);
  }
  if (tschchartaxisdefaultnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultnumberformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat)
}

// optional int32 tschchartaxisdefaultnumberformattype = 3;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultnumberformattype() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformattype() const {
  return _internal_has_tschchartaxisdefaultnumberformattype();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformattype() {
  tschchartaxisdefaultnumberformattype_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultnumberformattype() const {
  return tschchartaxisdefaultnumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformattype)
  return _internal_tschchartaxisdefaultnumberformattype();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  tschchartaxisdefaultnumberformattype_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisdefaultnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformattype)
}

// optional int32 tschchartaxisvaluenumberofdecades = 4;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofdecades() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofdecades() const {
  return _internal_has_tschchartaxisvaluenumberofdecades();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofdecades() {
  tschchartaxisvaluenumberofdecades_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofdecades() const {
  return tschchartaxisvaluenumberofdecades_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofdecades() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofdecades)
  return _internal_tschchartaxisvaluenumberofdecades();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartaxisvaluenumberofdecades_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluenumberofdecades(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofdecades)
}

// optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofmajorgridlines() const {
  return _internal_has_tschchartaxisvaluenumberofmajorgridlines();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofmajorgridlines() {
  tschchartaxisvaluenumberofmajorgridlines_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofmajorgridlines() const {
  return tschchartaxisvaluenumberofmajorgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofmajorgridlines)
  return _internal_tschchartaxisvaluenumberofmajorgridlines();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartaxisvaluenumberofmajorgridlines_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluenumberofmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofmajorgridlines)
}

// optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluenumberofminorgridlines() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofminorgridlines() const {
  return _internal_has_tschchartaxisvaluenumberofminorgridlines();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofminorgridlines() {
  tschchartaxisvaluenumberofminorgridlines_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluenumberofminorgridlines() const {
  return tschchartaxisvaluenumberofminorgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofminorgridlines)
  return _internal_tschchartaxisvaluenumberofminorgridlines();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartaxisvaluenumberofminorgridlines_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluenumberofminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluenumberofminorgridlines)
}

// optional bool tschchartaxiscategoryplottoedges = 7;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryplottoedges() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryplottoedges() const {
  return _internal_has_tschchartaxiscategoryplottoedges();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryplottoedges() {
  tschchartaxiscategoryplottoedges_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryplottoedges() const {
  return tschchartaxiscategoryplottoedges_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryplottoedges() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryplottoedges)
  return _internal_tschchartaxiscategoryplottoedges();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryplottoedges(bool value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartaxiscategoryplottoedges_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryplottoedges(bool value) {
  _internal_set_tschchartaxiscategoryplottoedges(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryplottoedges)
}

// optional int32 tschchartaxisvaluescale = 8;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluescale() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluescale() const {
  return _internal_has_tschchartaxisvaluescale();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluescale() {
  tschchartaxisvaluescale_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::_internal_tschchartaxisvaluescale() const {
  return tschchartaxisvaluescale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisNonStyleArchive::tschchartaxisvaluescale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluescale)
  return _internal_tschchartaxisvaluescale();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartaxisvaluescale_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisvaluescale(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluescale)
}

// optional bool tschchartaxiscategoryshowlabels = 9;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowlabels() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowlabels() const {
  return _internal_has_tschchartaxiscategoryshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowlabels() {
  tschchartaxiscategoryshowlabels_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowlabels() const {
  return tschchartaxiscategoryshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowlabels)
  return _internal_tschchartaxiscategoryshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowlabels(bool value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartaxiscategoryshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowlabels(bool value) {
  _internal_set_tschchartaxiscategoryshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowlabels)
}

// optional bool tschchartaxisdefaultshowlabels = 10;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultshowlabels() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultshowlabels() const {
  return _internal_has_tschchartaxisdefaultshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultshowlabels() {
  tschchartaxisdefaultshowlabels_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultshowlabels() const {
  return tschchartaxisdefaultshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisdefaultshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultshowlabels)
  return _internal_tschchartaxisdefaultshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisdefaultshowlabels(bool value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartaxisdefaultshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultshowlabels(bool value) {
  _internal_set_tschchartaxisdefaultshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultshowlabels)
}

// optional bool tschchartaxisvalueshowlabels = 11;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvalueshowlabels() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowlabels() const {
  return _internal_has_tschchartaxisvalueshowlabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowlabels() {
  tschchartaxisvalueshowlabels_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisvalueshowlabels() const {
  return tschchartaxisvalueshowlabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowlabels)
  return _internal_tschchartaxisvalueshowlabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvalueshowlabels(bool value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartaxisvalueshowlabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowlabels(bool value) {
  _internal_set_tschchartaxisvalueshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowlabels)
}

// optional bool tschchartaxiscategoryshowserieslabels = 12;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowserieslabels() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowserieslabels() const {
  return _internal_has_tschchartaxiscategoryshowserieslabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowserieslabels() {
  tschchartaxiscategoryshowserieslabels_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowserieslabels() const {
  return tschchartaxiscategoryshowserieslabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowserieslabels)
  return _internal_tschchartaxiscategoryshowserieslabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowserieslabels(bool value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartaxiscategoryshowserieslabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowserieslabels(bool value) {
  _internal_set_tschchartaxiscategoryshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowserieslabels)
}

// optional bool tschchartaxismultidatashowserieslabels = 19;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxismultidatashowserieslabels() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxismultidatashowserieslabels() const {
  return _internal_has_tschchartaxismultidatashowserieslabels();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxismultidatashowserieslabels() {
  tschchartaxismultidatashowserieslabels_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxismultidatashowserieslabels() const {
  return tschchartaxismultidatashowserieslabels_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxismultidatashowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxismultidatashowserieslabels)
  return _internal_tschchartaxismultidatashowserieslabels();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxismultidatashowserieslabels(bool value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartaxismultidatashowserieslabels_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxismultidatashowserieslabels(bool value) {
  _internal_set_tschchartaxismultidatashowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxismultidatashowserieslabels)
}

// optional bool tschchartaxiscategoryshowtitle = 13;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategoryshowtitle() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowtitle() const {
  return _internal_has_tschchartaxiscategoryshowtitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowtitle() {
  tschchartaxiscategoryshowtitle_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxiscategoryshowtitle() const {
  return tschchartaxiscategoryshowtitle_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowtitle)
  return _internal_tschchartaxiscategoryshowtitle();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategoryshowtitle(bool value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartaxiscategoryshowtitle_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowtitle(bool value) {
  _internal_set_tschchartaxiscategoryshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategoryshowtitle)
}

// optional bool tschchartaxisvalueshowtitle = 14;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvalueshowtitle() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowtitle() const {
  return _internal_has_tschchartaxisvalueshowtitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowtitle() {
  tschchartaxisvalueshowtitle_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ChartAxisNonStyleArchive::_internal_tschchartaxisvalueshowtitle() const {
  return tschchartaxisvalueshowtitle_;
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowtitle)
  return _internal_tschchartaxisvalueshowtitle();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvalueshowtitle(bool value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartaxisvalueshowtitle_ = value;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowtitle(bool value) {
  _internal_set_tschchartaxisvalueshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvalueshowtitle)
}

// optional string tschchartaxiscategorytitle = 15;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxiscategorytitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategorytitle() const {
  return _internal_has_tschchartaxiscategorytitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategorytitle() {
  tschchartaxiscategorytitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartAxisNonStyleArchive::tschchartaxiscategorytitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  return _internal_tschchartaxiscategorytitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartAxisNonStyleArchive::set_tschchartaxiscategorytitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartaxiscategorytitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
}
inline std::string* ChartAxisNonStyleArchive::mutable_tschchartaxiscategorytitle() {
  std::string* _s = _internal_mutable_tschchartaxiscategorytitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  return _s;
}
inline const std::string& ChartAxisNonStyleArchive::_internal_tschchartaxiscategorytitle() const {
  return tschchartaxiscategorytitle_.Get();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxiscategorytitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartaxiscategorytitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxiscategorytitle() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartaxiscategorytitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::release_tschchartaxiscategorytitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
  if (!_internal_has_tschchartaxiscategorytitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartaxiscategorytitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxiscategorytitle(std::string* tschchartaxiscategorytitle) {
  if (tschchartaxiscategorytitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartaxiscategorytitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartaxiscategorytitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle)
}

// optional string tschchartaxisvaluetitle = 16;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisvaluetitle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluetitle() const {
  return _internal_has_tschchartaxisvaluetitle();
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluetitle() {
  tschchartaxisvaluetitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartAxisNonStyleArchive::tschchartaxisvaluetitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  return _internal_tschchartaxisvaluetitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartAxisNonStyleArchive::set_tschchartaxisvaluetitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tschchartaxisvaluetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
}
inline std::string* ChartAxisNonStyleArchive::mutable_tschchartaxisvaluetitle() {
  std::string* _s = _internal_mutable_tschchartaxisvaluetitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  return _s;
}
inline const std::string& ChartAxisNonStyleArchive::_internal_tschchartaxisvaluetitle() const {
  return tschchartaxisvaluetitle_.Get();
}
inline void ChartAxisNonStyleArchive::_internal_set_tschchartaxisvaluetitle(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tschchartaxisvaluetitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisvaluetitle() {
  _has_bits_[0] |= 0x00000002u;
  return tschchartaxisvaluetitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartAxisNonStyleArchive::release_tschchartaxisvaluetitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
  if (!_internal_has_tschchartaxisvaluetitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tschchartaxisvaluetitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisvaluetitle(std::string* tschchartaxisvaluetitle) {
  if (tschchartaxisvaluetitle != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartaxisvaluetitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartaxisvaluetitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultusermax() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultusermax_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermax() const {
  return _internal_has_tschchartaxisdefaultusermax();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultusermax() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschchartaxisdefaultusermax_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermax() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  return _internal_tschchartaxisdefaultusermax();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultusermax(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax_);
  }
  tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  if (tschchartaxisdefaultusermax) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermax() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermax_;
  tschchartaxisdefaultusermax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultusermax() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermax_;
  tschchartaxisdefaultusermax_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultusermax() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartaxisdefaultusermax_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartaxisdefaultusermax_ = p;
  }
  return tschchartaxisdefaultusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermax() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschchartaxisdefaultusermax();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax_);
  }
  if (tschchartaxisdefaultusermax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermax));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultusermax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultusermax, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
inline bool ChartAxisNonStyleArchive::_internal_has_tschchartaxisdefaultusermin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdefaultusermin_ != nullptr);
  return value;
}
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermin() const {
  return _internal_has_tschchartaxisdefaultusermin();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::_internal_tschchartaxisdefaultusermin() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschchartaxisdefaultusermin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermin() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  return _internal_tschchartaxisdefaultusermin();
}
inline void ChartAxisNonStyleArchive::unsafe_arena_set_allocated_tschchartaxisdefaultusermin(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin_);
  }
  tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  if (tschchartaxisdefaultusermin) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermin() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermin_;
  tschchartaxisdefaultusermin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::unsafe_arena_release_tschchartaxisdefaultusermin() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermin_;
  tschchartaxisdefaultusermin_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::_internal_mutable_tschchartaxisdefaultusermin() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartaxisdefaultusermin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartaxisdefaultusermin_ = p;
  }
  return tschchartaxisdefaultusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermin() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschchartaxisdefaultusermin();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
  return _msg;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin_);
  }
  if (tschchartaxisdefaultusermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdefaultusermin));
    if (message_arena != submessage_arena) {
      tschchartaxisdefaultusermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdefaultusermin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin)
}

// -------------------------------------------------------------------

// ChartSeriesStyleArchive

// optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultcalloutlineendlineend() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultcalloutlineendlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultcalloutlineendlineend() const {
  return _internal_has_tschchartseriesdefaultcalloutlineendlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultcalloutlineendlineend() const {
  const ::TSD::LineEndArchive* p = tschchartseriesdefaultcalloutlineendlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaultcalloutlineendlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlineendlineend)
  return _internal_tschchartseriesdefaultcalloutlineendlineend();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultcalloutlineendlineend(
    ::TSD::LineEndArchive* tschchartseriesdefaultcalloutlineendlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlineendlineend_);
  }
  tschchartseriesdefaultcalloutlineendlineend_ = tschchartseriesdefaultcalloutlineendlineend;
  if (tschchartseriesdefaultcalloutlineendlineend) {
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlineendlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultcalloutlineendlineend() {
  _has_bits_[1] &= ~0x02000000u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaultcalloutlineendlineend_;
  tschchartseriesdefaultcalloutlineendlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultcalloutlineendlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlineendlineend)
  _has_bits_[1] &= ~0x02000000u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaultcalloutlineendlineend_;
  tschchartseriesdefaultcalloutlineendlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultcalloutlineendlineend() {
  _has_bits_[1] |= 0x02000000u;
  if (tschchartseriesdefaultcalloutlineendlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartseriesdefaultcalloutlineendlineend_ = p;
  }
  return tschchartseriesdefaultcalloutlineendlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultcalloutlineendlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriesdefaultcalloutlineendlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlineendlineend)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultcalloutlineendlineend(::TSD::LineEndArchive* tschchartseriesdefaultcalloutlineendlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlineendlineend_);
  }
  if (tschchartseriesdefaultcalloutlineendlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlineendlineend));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultcalloutlineendlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultcalloutlineendlineend, submessage_arena);
    }
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  tschchartseriesdefaultcalloutlineendlineend_ = tschchartseriesdefaultcalloutlineendlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlineendlineend)
}

// optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultcalloutlinestartlineend() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultcalloutlinestartlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultcalloutlinestartlineend() const {
  return _internal_has_tschchartseriesdefaultcalloutlinestartlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultcalloutlinestartlineend() const {
  const ::TSD::LineEndArchive* p = tschchartseriesdefaultcalloutlinestartlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaultcalloutlinestartlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestartlineend)
  return _internal_tschchartseriesdefaultcalloutlinestartlineend();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultcalloutlinestartlineend(
    ::TSD::LineEndArchive* tschchartseriesdefaultcalloutlinestartlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlinestartlineend_);
  }
  tschchartseriesdefaultcalloutlinestartlineend_ = tschchartseriesdefaultcalloutlinestartlineend;
  if (tschchartseriesdefaultcalloutlinestartlineend) {
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestartlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultcalloutlinestartlineend() {
  _has_bits_[1] &= ~0x01000000u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaultcalloutlinestartlineend_;
  tschchartseriesdefaultcalloutlinestartlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultcalloutlinestartlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestartlineend)
  _has_bits_[1] &= ~0x01000000u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaultcalloutlinestartlineend_;
  tschchartseriesdefaultcalloutlinestartlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultcalloutlinestartlineend() {
  _has_bits_[1] |= 0x01000000u;
  if (tschchartseriesdefaultcalloutlinestartlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartseriesdefaultcalloutlinestartlineend_ = p;
  }
  return tschchartseriesdefaultcalloutlinestartlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultcalloutlinestartlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriesdefaultcalloutlinestartlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestartlineend)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultcalloutlinestartlineend(::TSD::LineEndArchive* tschchartseriesdefaultcalloutlinestartlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlinestartlineend_);
  }
  if (tschchartseriesdefaultcalloutlinestartlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlinestartlineend));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultcalloutlinestartlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultcalloutlinestartlineend, submessage_arena);
    }
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  tschchartseriesdefaultcalloutlinestartlineend_ = tschchartseriesdefaultcalloutlinestartlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestartlineend)
}

// optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultcalloutlinestrokestyle() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultcalloutlinestrokestyle_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultcalloutlinestrokestyle() const {
  return _internal_has_tschchartseriesdefaultcalloutlinestrokestyle();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultcalloutlinestrokestyle() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaultcalloutlinestrokestyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaultcalloutlinestrokestyle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestrokestyle)
  return _internal_tschchartseriesdefaultcalloutlinestrokestyle();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultcalloutlinestrokestyle(
    ::TSD::StrokeArchive* tschchartseriesdefaultcalloutlinestrokestyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlinestrokestyle_);
  }
  tschchartseriesdefaultcalloutlinestrokestyle_ = tschchartseriesdefaultcalloutlinestrokestyle;
  if (tschchartseriesdefaultcalloutlinestrokestyle) {
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestrokestyle)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultcalloutlinestrokestyle() {
  _has_bits_[1] &= ~0x00800000u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaultcalloutlinestrokestyle_;
  tschchartseriesdefaultcalloutlinestrokestyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultcalloutlinestrokestyle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestrokestyle)
  _has_bits_[1] &= ~0x00800000u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaultcalloutlinestrokestyle_;
  tschchartseriesdefaultcalloutlinestrokestyle_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle() {
  _has_bits_[1] |= 0x00800000u;
  if (tschchartseriesdefaultcalloutlinestrokestyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesdefaultcalloutlinestrokestyle_ = p;
  }
  return tschchartseriesdefaultcalloutlinestrokestyle_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultcalloutlinestrokestyle() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestrokestyle)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultcalloutlinestrokestyle(::TSD::StrokeArchive* tschchartseriesdefaultcalloutlinestrokestyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlinestrokestyle_);
  }
  if (tschchartseriesdefaultcalloutlinestrokestyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultcalloutlinestrokestyle));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultcalloutlinestrokestyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultcalloutlinestrokestyle, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  tschchartseriesdefaultcalloutlinestrokestyle_ = tschchartseriesdefaultcalloutlinestrokestyle;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestrokestyle)
}

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarlineend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineend() const {
  return _internal_has_tschchartseriesdefaulterrorbarlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarlineend() const {
  const ::TSD::LineEndArchive* p = tschchartseriesdefaulterrorbarlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  return _internal_tschchartseriesdefaulterrorbarlineend();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineend(
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend_);
  }
  tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  if (tschchartseriesdefaulterrorbarlineend) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineend() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineend_;
  tschchartseriesdefaulterrorbarlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineend_;
  tschchartseriesdefaulterrorbarlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarlineend() {
  _has_bits_[0] |= 0x00000001u;
  if (tschchartseriesdefaulterrorbarlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarlineend_ = p;
  }
  return tschchartseriesdefaulterrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend_);
  }
  if (tschchartseriesdefaulterrorbarlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineend));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarlineend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend)
}

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarlineendscatterx() const {
  const ::TSD::LineEndArchive* p = tschchartseriesdefaulterrorbarlineendscatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineendscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  return _internal_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(
    ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineendscatterx() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineendscatterx_;
  tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarlineendscatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineendscatterx_;
  tschchartseriesdefaulterrorbarlineendscatterx_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartseriesdefaulterrorbarlineendscatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarlineendscatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarlineendscatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarlineendscatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarlineendscatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx)
}

// optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarshadow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarshadow() const {
  return _internal_has_tschchartseriesdefaulterrorbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesdefaulterrorbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  return _internal_tschchartseriesdefaulterrorbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow_);
  }
  tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  if (tschchartseriesdefaulterrorbarshadow) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarshadow() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulterrorbarshadow_;
  tschchartseriesdefaulterrorbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulterrorbarshadow_;
  tschchartseriesdefaulterrorbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarshadow() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartseriesdefaulterrorbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarshadow_ = p;
  }
  return tschchartseriesdefaulterrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow_);
  }
  if (tschchartseriesdefaulterrorbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow)
}

// optional int32 tschchartseriesdefaulterrorbarspacing = 98;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarspacing() const {
  bool value = (_has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarspacing() const {
  return _internal_has_tschchartseriesdefaulterrorbarspacing();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarspacing() {
  tschchartseriesdefaulterrorbarspacing_ = 0;
  _has_bits_[3] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarspacing() const {
  return tschchartseriesdefaulterrorbarspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarspacing)
  return _internal_tschchartseriesdefaulterrorbarspacing();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulterrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000010u;
  tschchartseriesdefaulterrorbarspacing_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulterrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbarspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarspacing)
}

// optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarspacingscatterx() const {
  bool value = (_has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarspacingscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarspacingscatterx();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarspacingscatterx() {
  tschchartseriesdefaulterrorbarspacingscatterx_ = 0;
  _has_bits_[3] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarspacingscatterx() const {
  return tschchartseriesdefaulterrorbarspacingscatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarspacingscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarspacingscatterx)
  return _internal_tschchartseriesdefaulterrorbarspacingscatterx();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulterrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000020u;
  tschchartseriesdefaulterrorbarspacingscatterx_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulterrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbarspacingscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarspacingscatterx)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstroke() const {
  return _internal_has_tschchartseriesdefaulterrorbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaulterrorbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  return _internal_tschchartseriesdefaulterrorbarstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstroke(
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke_);
  }
  tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  if (tschchartseriesdefaulterrorbarstroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstroke_;
  tschchartseriesdefaulterrorbarstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstroke_;
  tschchartseriesdefaulterrorbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarstroke() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartseriesdefaulterrorbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarstroke_ = p;
  }
  return tschchartseriesdefaulterrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke_);
  }
  if (tschchartseriesdefaulterrorbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulterrorbarstrokescatterx() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaulterrorbarstrokescatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstrokescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  return _internal_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(
    ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstrokescatterx() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstrokescatterx_;
  tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarstrokescatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstrokescatterx_;
  tschchartseriesdefaulterrorbarstrokescatterx_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartseriesdefaulterrorbarstrokescatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarstrokescatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarstrokescatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarstrokescatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarstrokescatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx)
}

// optional .TSD.FillArchive tschchartseries3dareafill = 6;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dareafill() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareafill() const {
  return _internal_has_tschchartseries3dareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dareafill() const {
  const ::TSD::FillArchive* p = tschchartseries3dareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
  return _internal_tschchartseries3dareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dareafill(
    ::TSD::FillArchive* tschchartseries3dareafill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill_);
  }
  tschchartseries3dareafill_ = tschchartseries3dareafill;
  if (tschchartseries3dareafill) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dareafill() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = tschchartseries3dareafill_;
  tschchartseries3dareafill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dareafill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = tschchartseries3dareafill_;
  tschchartseries3dareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dareafill() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartseries3dareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseries3dareafill_ = p;
  }
  return tschchartseries3dareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareafill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dareafill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill_);
  }
  if (tschchartseries3dareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareafill));
    if (message_arena != submessage_arena) {
      tschchartseries3dareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dareafill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartseries3dareafill_ = tschchartseries3dareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill)
}

// optional .TSD.FillArchive tschchartseries3dbarfill = 7;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dbarfill() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dbarfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarfill() const {
  return _internal_has_tschchartseries3dbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dbarfill() const {
  const ::TSD::FillArchive* p = tschchartseries3dbarfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dbarfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  return _internal_tschchartseries3dbarfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dbarfill(
    ::TSD::FillArchive* tschchartseries3dbarfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill_);
  }
  tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  if (tschchartseries3dbarfill) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarfill() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = tschchartseries3dbarfill_;
  tschchartseries3dbarfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dbarfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::FillArchive* temp = tschchartseries3dbarfill_;
  tschchartseries3dbarfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dbarfill() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartseries3dbarfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseries3dbarfill_ = p;
  }
  return tschchartseries3dbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dbarfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill_);
  }
  if (tschchartseries3dbarfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarfill));
    if (message_arena != submessage_arena) {
      tschchartseries3dbarfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dbarfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill)
}

// optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dcolumnfill() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dcolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnfill() const {
  return _internal_has_tschchartseries3dcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dcolumnfill() const {
  const ::TSD::FillArchive* p = tschchartseries3dcolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  return _internal_tschchartseries3dcolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dcolumnfill(
    ::TSD::FillArchive* tschchartseries3dcolumnfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill_);
  }
  tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  if (tschchartseries3dcolumnfill) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnfill() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::FillArchive* temp = tschchartseries3dcolumnfill_;
  tschchartseries3dcolumnfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dcolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::FillArchive* temp = tschchartseries3dcolumnfill_;
  tschchartseries3dcolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dcolumnfill() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartseries3dcolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseries3dcolumnfill_ = p;
  }
  return tschchartseries3dcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dcolumnfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill_);
  }
  if (tschchartseries3dcolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnfill));
    if (message_arena != submessage_arena) {
      tschchartseries3dcolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dcolumnfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill)
}

// optional .TSD.FillArchive tschchartseries3dlinefill = 9;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dlinefill() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dlinefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlinefill() const {
  return _internal_has_tschchartseries3dlinefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dlinefill() const {
  const ::TSD::FillArchive* p = tschchartseries3dlinefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dlinefill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  return _internal_tschchartseries3dlinefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dlinefill(
    ::TSD::FillArchive* tschchartseries3dlinefill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill_);
  }
  tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  if (tschchartseries3dlinefill) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dlinefill() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::FillArchive* temp = tschchartseries3dlinefill_;
  tschchartseries3dlinefill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dlinefill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::FillArchive* temp = tschchartseries3dlinefill_;
  tschchartseries3dlinefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dlinefill() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartseries3dlinefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseries3dlinefill_ = p;
  }
  return tschchartseries3dlinefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlinefill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dlinefill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill_);
  }
  if (tschchartseries3dlinefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlinefill));
    if (message_arena != submessage_arena) {
      tschchartseries3dlinefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dlinefill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill)
}

// optional .TSD.FillArchive tschchartseries3dpiefill = 10;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dpiefill() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dpiefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpiefill() const {
  return _internal_has_tschchartseries3dpiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dpiefill() const {
  const ::TSD::FillArchive* p = tschchartseries3dpiefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dpiefill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  return _internal_tschchartseries3dpiefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dpiefill(
    ::TSD::FillArchive* tschchartseries3dpiefill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill_);
  }
  tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  if (tschchartseries3dpiefill) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dpiefill() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::FillArchive* temp = tschchartseries3dpiefill_;
  tschchartseries3dpiefill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dpiefill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::FillArchive* temp = tschchartseries3dpiefill_;
  tschchartseries3dpiefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dpiefill() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartseries3dpiefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseries3dpiefill_ = p;
  }
  return tschchartseries3dpiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpiefill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseries3dpiefill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill_);
  }
  if (tschchartseries3dpiefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpiefill));
    if (message_arena != submessage_arena) {
      tschchartseries3dpiefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dpiefill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill)
}

// optional .TSD.FillArchive tschchartseriesareafill = 11;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareafill() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareafill() const {
  return _internal_has_tschchartseriesareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareafill() const {
  const ::TSD::FillArchive* p = tschchartseriesareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
  return _internal_tschchartseriesareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareafill(
    ::TSD::FillArchive* tschchartseriesareafill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill_);
  }
  tschchartseriesareafill_ = tschchartseriesareafill;
  if (tschchartseriesareafill) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareafill() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriesareafill_;
  tschchartseriesareafill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareafill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
  _has_bits_[0] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriesareafill_;
  tschchartseriesareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareafill() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartseriesareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesareafill_ = p;
  }
  return tschchartseriesareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareafill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesareafill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill_);
  }
  if (tschchartseriesareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareafill));
    if (message_arena != submessage_arena) {
      tschchartseriesareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareafill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartseriesareafill_ = tschchartseriesareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill)
}

// optional .TSD.FillArchive tschchartseriesbarfill = 12;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarfill() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbarfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarfill() const {
  return _internal_has_tschchartseriesbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarfill() const {
  const ::TSD::FillArchive* p = tschchartseriesbarfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbarfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
  return _internal_tschchartseriesbarfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarfill(
    ::TSD::FillArchive* tschchartseriesbarfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill_);
  }
  tschchartseriesbarfill_ = tschchartseriesbarfill;
  if (tschchartseriesbarfill) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbarfill() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::FillArchive* temp = tschchartseriesbarfill_;
  tschchartseriesbarfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
  _has_bits_[0] &= ~0x00000800u;
  ::TSD::FillArchive* temp = tschchartseriesbarfill_;
  tschchartseriesbarfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarfill() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartseriesbarfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesbarfill_ = p;
  }
  return tschchartseriesbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesbarfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill_);
  }
  if (tschchartseriesbarfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarfill));
    if (message_arena != submessage_arena) {
      tschchartseriesbarfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartseriesbarfill_ = tschchartseriesbarfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill)
}

// optional .TSD.FillArchive tschchartseriescolumnfill = 13;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriescolumnfill() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriescolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriescolumnfill() const {
  return _internal_has_tschchartseriescolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriescolumnfill() const {
  const ::TSD::FillArchive* p = tschchartseriescolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriescolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  return _internal_tschchartseriescolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriescolumnfill(
    ::TSD::FillArchive* tschchartseriescolumnfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill_);
  }
  tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  if (tschchartseriescolumnfill) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriescolumnfill() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::FillArchive* temp = tschchartseriescolumnfill_;
  tschchartseriescolumnfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriescolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::FillArchive* temp = tschchartseriescolumnfill_;
  tschchartseriescolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriescolumnfill() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartseriescolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriescolumnfill_ = p;
  }
  return tschchartseriescolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriescolumnfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriescolumnfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill_);
  }
  if (tschchartseriescolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescolumnfill));
    if (message_arena != submessage_arena) {
      tschchartseriescolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescolumnfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill)
}

// optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultfill() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultfill() const {
  return _internal_has_tschchartseriesdefaultfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultfill() const {
  const ::TSD::FillArchive* p = tschchartseriesdefaultfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesdefaultfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  return _internal_tschchartseriesdefaultfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultfill(
    ::TSD::FillArchive* tschchartseriesdefaultfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill_);
  }
  tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  if (tschchartseriesdefaultfill) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultfill() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::FillArchive* temp = tschchartseriesdefaultfill_;
  tschchartseriesdefaultfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::FillArchive* temp = tschchartseriesdefaultfill_;
  tschchartseriesdefaultfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultfill() {
  _has_bits_[0] |= 0x00002000u;
  if (tschchartseriesdefaultfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesdefaultfill_ = p;
  }
  return tschchartseriesdefaultfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesdefaultfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill_);
  }
  if (tschchartseriesdefaultfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultfill));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill)
}

// optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareafill() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareafill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareafill() const {
  return _internal_has_tschchartseriesmixedareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareafill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedareafill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareafill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  return _internal_tschchartseriesmixedareafill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareafill(
    ::TSD::FillArchive* tschchartseriesmixedareafill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill_);
  }
  tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  if (tschchartseriesmixedareafill) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareafill() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareafill_;
  tschchartseriesmixedareafill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareafill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareafill_;
  tschchartseriesmixedareafill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareafill() {
  _has_bits_[0] |= 0x00004000u;
  if (tschchartseriesmixedareafill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesmixedareafill_ = p;
  }
  return tschchartseriesmixedareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareafill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedareafill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill_);
  }
  if (tschchartseriesmixedareafill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareafill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareafill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareafill, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill)
}

// optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnfill() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedcolumnfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnfill() const {
  return _internal_has_tschchartseriesmixedcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnfill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedcolumnfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  return _internal_tschchartseriesmixedcolumnfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnfill(
    ::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill_);
  }
  tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  if (tschchartseriesmixedcolumnfill) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnfill() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedcolumnfill_;
  tschchartseriesmixedcolumnfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  _has_bits_[0] &= ~0x00008000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedcolumnfill_;
  tschchartseriesmixedcolumnfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnfill() {
  _has_bits_[0] |= 0x00008000u;
  if (tschchartseriesmixedcolumnfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesmixedcolumnfill_ = p;
  }
  return tschchartseriesmixedcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedcolumnfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill_);
  }
  if (tschchartseriesmixedcolumnfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnfill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill)
}

// optional .TSD.FillArchive tschchartseriespiefill = 17;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiefill() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespiefill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiefill() const {
  return _internal_has_tschchartseriespiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiefill() const {
  const ::TSD::FillArchive* p = tschchartseriespiefill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriespiefill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
  return _internal_tschchartseriespiefill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiefill(
    ::TSD::FillArchive* tschchartseriespiefill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill_);
  }
  tschchartseriespiefill_ = tschchartseriespiefill;
  if (tschchartseriespiefill) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriespiefill() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::FillArchive* temp = tschchartseriespiefill_;
  tschchartseriespiefill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiefill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::FillArchive* temp = tschchartseriespiefill_;
  tschchartseriespiefill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiefill() {
  _has_bits_[0] |= 0x00010000u;
  if (tschchartseriespiefill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriespiefill_ = p;
  }
  return tschchartseriespiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiefill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriespiefill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill_);
  }
  if (tschchartseriespiefill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiefill));
    if (message_arena != submessage_arena) {
      tschchartseriespiefill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiefill, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  tschchartseriespiefill_ = tschchartseriespiefill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill)
}

// optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesarealabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesarealabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesarealabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesarealabelparagraphstyleindex() {
  tschchartseriesarealabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesarealabelparagraphstyleindex() const {
  return tschchartseriesarealabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesarealabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesarealabelparagraphstyleindex)
  return _internal_tschchartseriesarealabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x04000000u;
  tschchartseriesarealabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesarealabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesarealabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesarealabelparagraphstyleindex)
}

// optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarlabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesbarlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarlabelparagraphstyleindex() {
  tschchartseriesbarlabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbarlabelparagraphstyleindex() const {
  return tschchartseriesbarlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbarlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarlabelparagraphstyleindex)
  return _internal_tschchartseriesbarlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x08000000u;
  tschchartseriesbarlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbarlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarlabelparagraphstyleindex)
}

// optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultlabelparagraphstyleindex() {
  tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return tschchartseriesdefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultlabelparagraphstyleindex)
  return _internal_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x10000000u;
  tschchartseriesdefaultlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultlabelparagraphstyleindex)
}

// optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdonutlabelparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdonutlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdonutlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdonutlabelparagraphstyleindex() {
  tschchartseriesdonutlabelparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdonutlabelparagraphstyleindex() const {
  return tschchartseriesdonutlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdonutlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdonutlabelparagraphstyleindex)
  return _internal_tschchartseriesdonutlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdonutlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000080u;
  tschchartseriesdonutlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdonutlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdonutlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdonutlabelparagraphstyleindex)
}

// optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinelabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinelabelparagraphstyleindex() const {
  return _internal_has_tschchartserieslinelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinelabelparagraphstyleindex() {
  tschchartserieslinelabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartserieslinelabelparagraphstyleindex() const {
  return tschchartserieslinelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartserieslinelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinelabelparagraphstyleindex)
  return _internal_tschchartserieslinelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x20000000u;
  tschchartserieslinelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinelabelparagraphstyleindex)
}

// optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesmixedlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlabelparagraphstyleindex() {
  tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedlabelparagraphstyleindex() const {
  return tschchartseriesmixedlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlabelparagraphstyleindex)
  return _internal_tschchartseriesmixedlabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x40000000u;
  tschchartseriesmixedlabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlabelparagraphstyleindex)
}

// optional int32 tschchartseriespielabelparagraphstyleindex = 23;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespielabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespielabelparagraphstyleindex() const {
  return _internal_has_tschchartseriespielabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespielabelparagraphstyleindex() {
  tschchartseriespielabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriespielabelparagraphstyleindex() const {
  return tschchartseriespielabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriespielabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespielabelparagraphstyleindex)
  return _internal_tschchartseriespielabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x80000000u;
  tschchartseriespielabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespielabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespielabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespielabelparagraphstyleindex)
}

// optional float tschchartseriesdefaultopacity = 24;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultopacity() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultopacity() const {
  return _internal_has_tschchartseriesdefaultopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultopacity() {
  tschchartseriesdefaultopacity_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaultopacity() const {
  return tschchartseriesdefaultopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaultopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultopacity)
  return _internal_tschchartseriesdefaultopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultopacity(float value) {
  _has_bits_[2] |= 0x00000001u;
  tschchartseriesdefaultopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultopacity(float value) {
  _internal_set_tschchartseriesdefaultopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultopacity)
}

// optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareaoutsidelabelparagraphstyleindex() {
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return tschchartseriesareaoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareaoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000002u;
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareaoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareaoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareaoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbaroutsidelabelparagraphstyleindex() {
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return tschchartseriesbaroutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbaroutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000004u;
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbaroutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbaroutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbaroutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex() {
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000008u;
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdonutoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdonutoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesdonutoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdonutoutsidelabelparagraphstyleindex() {
  tschchartseriesdonutoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[3] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdonutoutsidelabelparagraphstyleindex() const {
  return tschchartseriesdonutoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdonutoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdonutoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesdonutoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdonutoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000100u;
  tschchartseriesdonutoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdonutoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdonutoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdonutoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedoutsidelabelparagraphstyleindex() {
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return tschchartseriesmixedoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000010u;
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedoutsidelabelparagraphstyleindex)
}

// optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespieoutsidelabelparagraphstyleindex() {
  tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return tschchartseriespieoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriespieoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000020u;
  tschchartseriespieoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespieoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespieoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieoutsidelabelparagraphstyleindex)
}

// optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dareashadow() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareashadow() const {
  return _internal_has_tschchartseries3dareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dareashadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  return _internal_tschchartseries3dareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dareashadow(
    ::TSD::ShadowArchive* tschchartseries3dareashadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow_);
  }
  tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  if (tschchartseries3dareashadow) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dareashadow() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dareashadow_;
  tschchartseries3dareashadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  _has_bits_[0] &= ~0x00020000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dareashadow_;
  tschchartseries3dareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dareashadow() {
  _has_bits_[0] |= 0x00020000u;
  if (tschchartseries3dareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseries3dareashadow_ = p;
  }
  return tschchartseries3dareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareashadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dareashadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow_);
  }
  if (tschchartseries3dareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dareashadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dareashadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow)
}

// optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dbarshadow() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarshadow() const {
  return _internal_has_tschchartseries3dbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  return _internal_tschchartseries3dbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dbarshadow(
    ::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow_);
  }
  tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  if (tschchartseries3dbarshadow) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarshadow() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dbarshadow_;
  tschchartseries3dbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  _has_bits_[0] &= ~0x00040000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dbarshadow_;
  tschchartseries3dbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dbarshadow() {
  _has_bits_[0] |= 0x00040000u;
  if (tschchartseries3dbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseries3dbarshadow_ = p;
  }
  return tschchartseries3dbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow_);
  }
  if (tschchartseries3dbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dbarshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dbarshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dcolumnshadow() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dcolumnshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnshadow() const {
  return _internal_has_tschchartseries3dcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dcolumnshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dcolumnshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  return _internal_tschchartseries3dcolumnshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dcolumnshadow(
    ::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow_);
  }
  tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  if (tschchartseries3dcolumnshadow) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnshadow() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dcolumnshadow_;
  tschchartseries3dcolumnshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dcolumnshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  _has_bits_[0] &= ~0x00080000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dcolumnshadow_;
  tschchartseries3dcolumnshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dcolumnshadow() {
  _has_bits_[0] |= 0x00080000u;
  if (tschchartseries3dcolumnshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseries3dcolumnshadow_ = p;
  }
  return tschchartseries3dcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dcolumnshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow_);
  }
  if (tschchartseries3dcolumnshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dcolumnshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dcolumnshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dcolumnshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dlineshadow() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlineshadow() const {
  return _internal_has_tschchartseries3dlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  return _internal_tschchartseries3dlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dlineshadow(
    ::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow_);
  }
  tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  if (tschchartseries3dlineshadow) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dlineshadow() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dlineshadow_;
  tschchartseries3dlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dlineshadow_;
  tschchartseries3dlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dlineshadow() {
  _has_bits_[0] |= 0x00100000u;
  if (tschchartseries3dlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseries3dlineshadow_ = p;
  }
  return tschchartseries3dlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow_);
  }
  if (tschchartseries3dlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow)
}

// optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseries3dpieshadow() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries3dpieshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpieshadow() const {
  return _internal_has_tschchartseries3dpieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseries3dpieshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseries3dpieshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dpieshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  return _internal_tschchartseries3dpieshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseries3dpieshadow(
    ::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow_);
  }
  tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  if (tschchartseries3dpieshadow) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dpieshadow() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dpieshadow_;
  tschchartseries3dpieshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseries3dpieshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseries3dpieshadow_;
  tschchartseries3dpieshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseries3dpieshadow() {
  _has_bits_[0] |= 0x00200000u;
  if (tschchartseries3dpieshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseries3dpieshadow_ = p;
  }
  return tschchartseries3dpieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpieshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseries3dpieshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow_);
  }
  if (tschchartseries3dpieshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries3dpieshadow));
    if (message_arena != submessage_arena) {
      tschchartseries3dpieshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries3dpieshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow)
}

// optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareashadow() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareashadow() const {
  return _internal_has_tschchartseriesareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareashadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
  return _internal_tschchartseriesareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareashadow(
    ::TSD::ShadowArchive* tschchartseriesareashadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow_);
  }
  tschchartseriesareashadow_ = tschchartseriesareashadow;
  if (tschchartseriesareashadow) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesareashadow() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = tschchartseriesareashadow_;
  tschchartseriesareashadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::ShadowArchive* temp = tschchartseriesareashadow_;
  tschchartseriesareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareashadow() {
  _has_bits_[0] |= 0x00400000u;
  if (tschchartseriesareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesareashadow_ = p;
  }
  return tschchartseriesareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareashadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesareashadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow_);
  }
  if (tschchartseriesareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareashadow));
    if (message_arena != submessage_arena) {
      tschchartseriesareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareashadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  tschchartseriesareashadow_ = tschchartseriesareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow)
}

// optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarshadow() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarshadow() const {
  return _internal_has_tschchartseriesbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  return _internal_tschchartseriesbarshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarshadow(
    ::TSD::ShadowArchive* tschchartseriesbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow_);
  }
  tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  if (tschchartseriesbarshadow) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbarshadow() {
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbarshadow_;
  tschchartseriesbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbarshadow_;
  tschchartseriesbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarshadow() {
  _has_bits_[0] |= 0x00800000u;
  if (tschchartseriesbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesbarshadow_ = p;
  }
  return tschchartseriesbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow_);
  }
  if (tschchartseriesbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow)
}

// optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubbleshadow() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubbleshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubbleshadow() const {
  return _internal_has_tschchartseriesbubbleshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubbleshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesbubbleshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbubbleshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  return _internal_tschchartseriesbubbleshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubbleshadow(
    ::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow_);
  }
  tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  if (tschchartseriesbubbleshadow) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbubbleshadow() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbubbleshadow_;
  tschchartseriesbubbleshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubbleshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesbubbleshadow_;
  tschchartseriesbubbleshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubbleshadow() {
  _has_bits_[0] |= 0x01000000u;
  if (tschchartseriesbubbleshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesbubbleshadow_ = p;
  }
  return tschchartseriesbubbleshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubbleshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesbubbleshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow_);
  }
  if (tschchartseriesbubbleshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubbleshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesbubbleshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubbleshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow)
}

// optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultshadow() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultshadow() const {
  return _internal_has_tschchartseriesdefaultshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaultshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesdefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  return _internal_tschchartseriesdefaultshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow_);
  }
  tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  if (tschchartseriesdefaultshadow) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultshadow() {
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaultshadow_;
  tschchartseriesdefaultshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaultshadow_;
  tschchartseriesdefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaultshadow() {
  _has_bits_[0] |= 0x02000000u;
  if (tschchartseriesdefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesdefaultshadow_ = p;
  }
  return tschchartseriesdefaultshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesdefaultshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow_);
  }
  if (tschchartseriesdefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow)
}

// optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslineshadow() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslineshadow() const {
  return _internal_has_tschchartserieslineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartserieslineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartserieslineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartserieslineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
  return _internal_tschchartserieslineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslineshadow(
    ::TSD::ShadowArchive* tschchartserieslineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow_);
  }
  tschchartserieslineshadow_ = tschchartserieslineshadow;
  if (tschchartserieslineshadow) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartserieslineshadow() {
  _has_bits_[0] &= ~0x04000000u;
  ::TSD::ShadowArchive* temp = tschchartserieslineshadow_;
  tschchartserieslineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
  _has_bits_[0] &= ~0x04000000u;
  ::TSD::ShadowArchive* temp = tschchartserieslineshadow_;
  tschchartserieslineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslineshadow() {
  _has_bits_[0] |= 0x04000000u;
  if (tschchartserieslineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartserieslineshadow_ = p;
  }
  return tschchartserieslineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartserieslineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartserieslineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow_);
  }
  if (tschchartserieslineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslineshadow));
    if (message_arena != submessage_arena) {
      tschchartserieslineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  tschchartserieslineshadow_ = tschchartserieslineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareashadow() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareashadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareashadow() const {
  return _internal_has_tschchartseriesmixedareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareashadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesmixedareashadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedareashadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  return _internal_tschchartseriesmixedareashadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareashadow(
    ::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow_);
  }
  tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  if (tschchartseriesmixedareashadow) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareashadow() {
  _has_bits_[0] &= ~0x08000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedareashadow_;
  tschchartseriesmixedareashadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareashadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  _has_bits_[0] &= ~0x08000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedareashadow_;
  tschchartseriesmixedareashadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareashadow() {
  _has_bits_[0] |= 0x08000000u;
  if (tschchartseriesmixedareashadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesmixedareashadow_ = p;
  }
  return tschchartseriesmixedareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareashadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesmixedareashadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow_);
  }
  if (tschchartseriesmixedareashadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareashadow));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareashadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareashadow, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnshadow() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedcolumnshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnshadow() const {
  return _internal_has_tschchartseriesmixedcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesmixedcolumnshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  return _internal_tschchartseriesmixedcolumnshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnshadow(
    ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow_);
  }
  tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  if (tschchartseriesmixedcolumnshadow) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnshadow() {
  _has_bits_[0] &= ~0x10000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedcolumnshadow_;
  tschchartseriesmixedcolumnshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  _has_bits_[0] &= ~0x10000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedcolumnshadow_;
  tschchartseriesmixedcolumnshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnshadow() {
  _has_bits_[0] |= 0x10000000u;
  if (tschchartseriesmixedcolumnshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesmixedcolumnshadow_ = p;
  }
  return tschchartseriesmixedcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesmixedcolumnshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow_);
  }
  if (tschchartseriesmixedcolumnshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow)
}

// optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlineshadow() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlineshadow() const {
  return _internal_has_tschchartseriesmixedlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesmixedlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  return _internal_tschchartseriesmixedlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlineshadow(
    ::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow_);
  }
  tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  if (tschchartseriesmixedlineshadow) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlineshadow() {
  _has_bits_[0] &= ~0x20000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedlineshadow_;
  tschchartseriesmixedlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  _has_bits_[0] &= ~0x20000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesmixedlineshadow_;
  tschchartseriesmixedlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlineshadow() {
  _has_bits_[0] |= 0x20000000u;
  if (tschchartseriesmixedlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesmixedlineshadow_ = p;
  }
  return tschchartseriesmixedlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesmixedlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow_);
  }
  if (tschchartseriesmixedlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow)
}

// optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespieshadow() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespieshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespieshadow() const {
  return _internal_has_tschchartseriespieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriespieshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriespieshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriespieshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
  return _internal_tschchartseriespieshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespieshadow(
    ::TSD::ShadowArchive* tschchartseriespieshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow_);
  }
  tschchartseriespieshadow_ = tschchartseriespieshadow;
  if (tschchartseriespieshadow) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriespieshadow() {
  _has_bits_[0] &= ~0x40000000u;
  ::TSD::ShadowArchive* temp = tschchartseriespieshadow_;
  tschchartseriespieshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespieshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
  _has_bits_[0] &= ~0x40000000u;
  ::TSD::ShadowArchive* temp = tschchartseriespieshadow_;
  tschchartseriespieshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespieshadow() {
  _has_bits_[0] |= 0x40000000u;
  if (tschchartseriespieshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriespieshadow_ = p;
  }
  return tschchartseriespieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriespieshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriespieshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow_);
  }
  if (tschchartseriespieshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespieshadow));
    if (message_arena != submessage_arena) {
      tschchartseriespieshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespieshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  tschchartseriespieshadow_ = tschchartseriespieshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow)
}

// optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattershadow() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscattershadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattershadow() const {
  return _internal_has_tschchartseriesscattershadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattershadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesscattershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesscattershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  return _internal_tschchartseriesscattershadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattershadow(
    ::TSD::ShadowArchive* tschchartseriesscattershadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow_);
  }
  tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  if (tschchartseriesscattershadow) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesscattershadow() {
  _has_bits_[0] &= ~0x80000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesscattershadow_;
  tschchartseriesscattershadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattershadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  _has_bits_[0] &= ~0x80000000u;
  ::TSD::ShadowArchive* temp = tschchartseriesscattershadow_;
  tschchartseriesscattershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattershadow() {
  _has_bits_[0] |= 0x80000000u;
  if (tschchartseriesscattershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesscattershadow_ = p;
  }
  return tschchartseriesscattershadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattershadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesscattershadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow_);
  }
  if (tschchartseriesscattershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattershadow));
    if (message_arena != submessage_arena) {
      tschchartseriesscattershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattershadow, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow)
}

// optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareastroke() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareastroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareastroke() const {
  return _internal_has_tschchartseriesareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareastroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesareastroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareastroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
  return _internal_tschchartseriesareastroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareastroke(
    ::TSD::StrokeArchive* tschchartseriesareastroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke_);
  }
  tschchartseriesareastroke_ = tschchartseriesareastroke;
  if (tschchartseriesareastroke) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareastroke() {
  _has_bits_[1] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = tschchartseriesareastroke_;
  tschchartseriesareastroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareastroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
  _has_bits_[1] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = tschchartseriesareastroke_;
  tschchartseriesareastroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareastroke() {
  _has_bits_[1] |= 0x00000001u;
  if (tschchartseriesareastroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesareastroke_ = p;
  }
  return tschchartseriesareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareastroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesareastroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke_);
  }
  if (tschchartseriesareastroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareastroke));
    if (message_arena != submessage_arena) {
      tschchartseriesareastroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareastroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  tschchartseriesareastroke_ = tschchartseriesareastroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke)
}

// optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarstroke() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarstroke() const {
  return _internal_has_tschchartseriesbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbarstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  return _internal_tschchartseriesbarstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbarstroke(
    ::TSD::StrokeArchive* tschchartseriesbarstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke_);
  }
  tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  if (tschchartseriesbarstroke) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbarstroke() {
  _has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartseriesbarstroke_;
  tschchartseriesbarstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  _has_bits_[1] &= ~0x00000002u;
  ::TSD::StrokeArchive* temp = tschchartseriesbarstroke_;
  tschchartseriesbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbarstroke() {
  _has_bits_[1] |= 0x00000002u;
  if (tschchartseriesbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesbarstroke_ = p;
  }
  return tschchartseriesbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesbarstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke_);
  }
  if (tschchartseriesbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbarstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbarstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke)
}

// optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblestroke() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubblestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblestroke() const {
  return _internal_has_tschchartseriesbubblestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesbubblestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  return _internal_tschchartseriesbubblestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblestroke(
    ::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke_);
  }
  tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  if (tschchartseriesbubblestroke) {
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblestroke() {
  _has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblestroke_;
  tschchartseriesbubblestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  _has_bits_[1] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblestroke_;
  tschchartseriesbubblestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblestroke() {
  _has_bits_[1] |= 0x00000004u;
  if (tschchartseriesbubblestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesbubblestroke_ = p;
  }
  return tschchartseriesbubblestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesbubblestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke_);
  }
  if (tschchartseriesbubblestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblestroke));
    if (message_arena != submessage_arena) {
      tschchartseriesbubblestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke)
}

// optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinestroke() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinestroke() const {
  return _internal_has_tschchartserieslinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartserieslinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
  return _internal_tschchartserieslinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinestroke(
    ::TSD::StrokeArchive* tschchartserieslinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke_);
  }
  tschchartserieslinestroke_ = tschchartserieslinestroke;
  if (tschchartserieslinestroke) {
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinestroke() {
  _has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartserieslinestroke_;
  tschchartserieslinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
  _has_bits_[1] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartserieslinestroke_;
  tschchartserieslinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinestroke() {
  _has_bits_[1] |= 0x00000008u;
  if (tschchartserieslinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartserieslinestroke_ = p;
  }
  return tschchartserieslinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartserieslinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke_);
  }
  if (tschchartserieslinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinestroke));
    if (message_arena != submessage_arena) {
      tschchartserieslinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  tschchartserieslinestroke_ = tschchartserieslinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareastroke() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareastroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareastroke() const {
  return _internal_has_tschchartseriesmixedareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareastroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedareastroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareastroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  return _internal_tschchartseriesmixedareastroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareastroke(
    ::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke_);
  }
  tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  if (tschchartseriesmixedareastroke) {
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareastroke() {
  _has_bits_[1] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareastroke_;
  tschchartseriesmixedareastroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareastroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  _has_bits_[1] &= ~0x00000010u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareastroke_;
  tschchartseriesmixedareastroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareastroke() {
  _has_bits_[1] |= 0x00000010u;
  if (tschchartseriesmixedareastroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesmixedareastroke_ = p;
  }
  return tschchartseriesmixedareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareastroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedareastroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke_);
  }
  if (tschchartseriesmixedareastroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareastroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareastroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareastroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnstroke() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedcolumnstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnstroke() const {
  return _internal_has_tschchartseriesmixedcolumnstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedcolumnstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  return _internal_tschchartseriesmixedcolumnstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedcolumnstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke_);
  }
  tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  if (tschchartseriesmixedcolumnstroke) {
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnstroke() {
  _has_bits_[1] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedcolumnstroke_;
  tschchartseriesmixedcolumnstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedcolumnstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  _has_bits_[1] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedcolumnstroke_;
  tschchartseriesmixedcolumnstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedcolumnstroke() {
  _has_bits_[1] |= 0x00000020u;
  if (tschchartseriesmixedcolumnstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesmixedcolumnstroke_ = p;
  }
  return tschchartseriesmixedcolumnstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedcolumnstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke_);
  }
  if (tschchartseriesmixedcolumnstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedcolumnstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedcolumnstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedcolumnstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinestroke() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinestroke() const {
  return _internal_has_tschchartseriesmixedlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  return _internal_tschchartseriesmixedlinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinestroke(
    ::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke_);
  }
  tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  if (tschchartseriesmixedlinestroke) {
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinestroke() {
  _has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinestroke_;
  tschchartseriesmixedlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  _has_bits_[1] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinestroke_;
  tschchartseriesmixedlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinestroke() {
  _has_bits_[1] |= 0x00000040u;
  if (tschchartseriesmixedlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesmixedlinestroke_ = p;
  }
  return tschchartseriesmixedlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke_);
  }
  if (tschchartseriesmixedlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinestroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke)
}

// optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriespiestroke() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespiestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriespiestroke() const {
  return _internal_has_tschchartseriespiestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriespiestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriespiestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriespiestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
  return _internal_tschchartseriespiestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriespiestroke(
    ::TSD::StrokeArchive* tschchartseriespiestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke_);
  }
  tschchartseriespiestroke_ = tschchartseriespiestroke;
  if (tschchartseriespiestroke) {
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriespiestroke() {
  _has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartseriespiestroke_;
  tschchartseriespiestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriespiestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
  _has_bits_[1] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartseriespiestroke_;
  tschchartseriespiestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriespiestroke() {
  _has_bits_[1] |= 0x00000080u;
  if (tschchartseriespiestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriespiestroke_ = p;
  }
  return tschchartseriespiestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriespiestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke_);
  }
  if (tschchartseriespiestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespiestroke));
    if (message_arena != submessage_arena) {
      tschchartseriespiestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespiestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  tschchartseriespiestroke_ = tschchartseriespiestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke)
}

// optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscatterstroke() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscatterstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscatterstroke() const {
  return _internal_has_tschchartseriesscatterstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscatterstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesscatterstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscatterstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  return _internal_tschchartseriesscatterstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscatterstroke(
    ::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke_);
  }
  tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  if (tschchartseriesscatterstroke) {
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscatterstroke() {
  _has_bits_[1] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = tschchartseriesscatterstroke_;
  tschchartseriesscatterstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscatterstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  _has_bits_[1] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = tschchartseriesscatterstroke_;
  tschchartseriesscatterstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscatterstroke() {
  _has_bits_[1] |= 0x00000100u;
  if (tschchartseriesscatterstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesscatterstroke_ = p;
  }
  return tschchartseriesscatterstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscatterstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesscatterstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke_);
  }
  if (tschchartseriesscatterstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscatterstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesscatterstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscatterstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke)
}

// optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfill() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareasymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfill() const {
  return _internal_has_tschchartseriesareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesareasymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  return _internal_tschchartseriesareasymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareasymbolfill(
    ::TSD::FillArchive* tschchartseriesareasymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill_);
  }
  tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  if (tschchartseriesareasymbolfill) {
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolfill() {
  _has_bits_[1] &= ~0x00000200u;
  ::TSD::FillArchive* temp = tschchartseriesareasymbolfill_;
  tschchartseriesareasymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareasymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  _has_bits_[1] &= ~0x00000200u;
  ::TSD::FillArchive* temp = tschchartseriesareasymbolfill_;
  tschchartseriesareasymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareasymbolfill() {
  _has_bits_[1] |= 0x00000200u;
  if (tschchartseriesareasymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesareasymbolfill_ = p;
  }
  return tschchartseriesareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesareasymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill_);
  }
  if (tschchartseriesareasymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesareasymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareasymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill)
}

// optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolfill() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubblesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfill() const {
  return _internal_has_tschchartseriesbubblesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesbubblesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  return _internal_tschchartseriesbubblesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblesymbolfill(
    ::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill_);
  }
  tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  if (tschchartseriesbubblesymbolfill) {
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolfill() {
  _has_bits_[1] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriesbubblesymbolfill_;
  tschchartseriesbubblesymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  _has_bits_[1] &= ~0x00000400u;
  ::TSD::FillArchive* temp = tschchartseriesbubblesymbolfill_;
  tschchartseriesbubblesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblesymbolfill() {
  _has_bits_[1] |= 0x00000400u;
  if (tschchartseriesbubblesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesbubblesymbolfill_ = p;
  }
  return tschchartseriesbubblesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesbubblesymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill_);
  }
  if (tschchartseriesbubblesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesbubblesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblesymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill)
}

// optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfill() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfill() const {
  return _internal_has_tschchartserieslinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfill() const {
  const ::TSD::FillArchive* p = tschchartserieslinesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  return _internal_tschchartserieslinesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinesymbolfill(
    ::TSD::FillArchive* tschchartserieslinesymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill_);
  }
  tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  if (tschchartserieslinesymbolfill) {
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolfill() {
  _has_bits_[1] &= ~0x00000800u;
  ::TSD::FillArchive* temp = tschchartserieslinesymbolfill_;
  tschchartserieslinesymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  _has_bits_[1] &= ~0x00000800u;
  ::TSD::FillArchive* temp = tschchartserieslinesymbolfill_;
  tschchartserieslinesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinesymbolfill() {
  _has_bits_[1] |= 0x00000800u;
  if (tschchartserieslinesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartserieslinesymbolfill_ = p;
  }
  return tschchartserieslinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartserieslinesymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill_);
  }
  if (tschchartserieslinesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolfill));
    if (message_arena != submessage_arena) {
      tschchartserieslinesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinesymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill)
}

// optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfill() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareasymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfill() const {
  return _internal_has_tschchartseriesmixedareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedareasymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  return _internal_tschchartseriesmixedareasymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareasymbolfill(
    ::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill_);
  }
  tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  if (tschchartseriesmixedareasymbolfill) {
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolfill() {
  _has_bits_[1] &= ~0x00001000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareasymbolfill_;
  tschchartseriesmixedareasymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareasymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  _has_bits_[1] &= ~0x00001000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedareasymbolfill_;
  tschchartseriesmixedareasymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareasymbolfill() {
  _has_bits_[1] |= 0x00001000u;
  if (tschchartseriesmixedareasymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesmixedareasymbolfill_ = p;
  }
  return tschchartseriesmixedareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedareasymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill_);
  }
  if (tschchartseriesmixedareasymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareasymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareasymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill)
}

// optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfill() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlinesymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfill() const {
  return _internal_has_tschchartseriesmixedlinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesmixedlinesymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  return _internal_tschchartseriesmixedlinesymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolfill(
    ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill_);
  }
  tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  if (tschchartseriesmixedlinesymbolfill) {
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolfill() {
  _has_bits_[1] &= ~0x00002000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedlinesymbolfill_;
  tschchartseriesmixedlinesymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinesymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  _has_bits_[1] &= ~0x00002000u;
  ::TSD::FillArchive* temp = tschchartseriesmixedlinesymbolfill_;
  tschchartseriesmixedlinesymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinesymbolfill() {
  _has_bits_[1] |= 0x00002000u;
  if (tschchartseriesmixedlinesymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesmixedlinesymbolfill_ = p;
  }
  return tschchartseriesmixedlinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesmixedlinesymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill_);
  }
  if (tschchartseriesmixedlinesymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinesymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinesymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill)
}

// optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolfill() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscattersymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfill() const {
  return _internal_has_tschchartseriesscattersymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriesscattersymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  return _internal_tschchartseriesscattersymbolfill();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattersymbolfill(
    ::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill_);
  }
  tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  if (tschchartseriesscattersymbolfill) {
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolfill() {
  _has_bits_[1] &= ~0x00004000u;
  ::TSD::FillArchive* temp = tschchartseriesscattersymbolfill_;
  tschchartseriesscattersymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattersymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  _has_bits_[1] &= ~0x00004000u;
  ::TSD::FillArchive* temp = tschchartseriesscattersymbolfill_;
  tschchartseriesscattersymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattersymbolfill() {
  _has_bits_[1] |= 0x00004000u;
  if (tschchartseriesscattersymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesscattersymbolfill_ = p;
  }
  return tschchartseriesscattersymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesscattersymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill_);
  }
  if (tschchartseriesscattersymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriesscattersymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattersymbolfill, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill)
}

// optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesfill() {
  tschchartseriesareasymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00000040u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfilluseseriesfill() const {
  return tschchartseriesareasymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesfill)
  return _internal_tschchartseriesareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00000040u;
  tschchartseriesareasymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesareasymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesfill)
}

// optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesfill() const {
  return _internal_has_tschchartserieslinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesfill() {
  tschchartserieslinesymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00000080u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfilluseseriesfill() const {
  return tschchartserieslinesymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesfill)
  return _internal_tschchartserieslinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00000080u;
  tschchartserieslinesymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartserieslinesymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesfill)
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesfill() {
  tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00000100u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return tschchartseriesmixedareasymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesfill)
  return _internal_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00000100u;
  tschchartseriesmixedareasymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesmixedareasymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesfill)
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesfill() {
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
  _has_bits_[2] &= ~0x00000200u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return tschchartseriesmixedlinesymbolfilluseseriesfill_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesfill)
  return _internal_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  _has_bits_[2] |= 0x00000200u;
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriesmixedlinesymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesfill)
}

// optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesstroke() {
  tschchartseriesareasymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00000400u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolfilluseseriesstroke() const {
  return tschchartseriesareasymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesstroke)
  return _internal_tschchartseriesareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00000400u;
  tschchartseriesareasymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesareasymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfilluseseriesstroke)
}

// optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfilluseseriesstroke() {
  tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00000800u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return tschchartseriesbubblesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesbubblesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfilluseseriesstroke)
  return _internal_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00000800u;
  tschchartseriesbubblesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesbubblesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfilluseseriesstroke)
}

// optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartserieslinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesstroke() {
  tschchartserieslinesymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00001000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolfilluseseriesstroke() const {
  return tschchartserieslinesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesstroke)
  return _internal_tschchartserieslinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00001000u;
  tschchartserieslinesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartserieslinesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfilluseseriesstroke)
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesstroke() {
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00002000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return tschchartseriesmixedareasymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesstroke)
  return _internal_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00002000u;
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesmixedareasymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfilluseseriesstroke)
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesstroke() {
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00004000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return tschchartseriesmixedlinesymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesstroke)
  return _internal_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00004000u;
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesmixedlinesymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfilluseseriesstroke)
}

// optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfilluseseriesstroke() {
  tschchartseriesscattersymbolfilluseseriesstroke_ = false;
  _has_bits_[2] &= ~0x00008000u;
}
inline bool ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return tschchartseriesscattersymbolfilluseseriesstroke_;
}
inline bool ChartSeriesStyleArchive::tschchartseriesscattersymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfilluseseriesstroke)
  return _internal_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  _has_bits_[2] |= 0x00008000u;
  tschchartseriesscattersymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriesscattersymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfilluseseriesstroke)
}

// optional float tschchartseriesareasymbolsize = 70;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolsize() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolsize() const {
  return _internal_has_tschchartseriesareasymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolsize() {
  tschchartseriesareasymbolsize_ = 0;
  _has_bits_[2] &= ~0x00010000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolsize() const {
  return tschchartseriesareasymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesareasymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolsize)
  return _internal_tschchartseriesareasymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareasymbolsize(float value) {
  _has_bits_[2] |= 0x00010000u;
  tschchartseriesareasymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolsize(float value) {
  _internal_set_tschchartseriesareasymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolsize)
}

// optional float tschchartserieslinesymbolsize = 71;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolsize() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolsize() const {
  return _internal_has_tschchartserieslinesymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolsize() {
  tschchartserieslinesymbolsize_ = 0;
  _has_bits_[2] &= ~0x00020000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolsize() const {
  return tschchartserieslinesymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartserieslinesymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolsize)
  return _internal_tschchartserieslinesymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinesymbolsize(float value) {
  _has_bits_[2] |= 0x00020000u;
  tschchartserieslinesymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolsize(float value) {
  _internal_set_tschchartserieslinesymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolsize)
}

// optional float tschchartseriesmixedareasymbolsize = 72;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolsize() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolsize() const {
  return _internal_has_tschchartseriesmixedareasymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolsize() {
  tschchartseriesmixedareasymbolsize_ = 0;
  _has_bits_[2] &= ~0x00040000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolsize() const {
  return tschchartseriesmixedareasymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedareasymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolsize)
  return _internal_tschchartseriesmixedareasymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareasymbolsize(float value) {
  _has_bits_[2] |= 0x00040000u;
  tschchartseriesmixedareasymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolsize(float value) {
  _internal_set_tschchartseriesmixedareasymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolsize)
}

// optional float tschchartseriesmixedlinesymbolsize = 73;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolsize() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolsize() const {
  return _internal_has_tschchartseriesmixedlinesymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolsize() {
  tschchartseriesmixedlinesymbolsize_ = 0;
  _has_bits_[2] &= ~0x00080000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolsize() const {
  return tschchartseriesmixedlinesymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolsize)
  return _internal_tschchartseriesmixedlinesymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinesymbolsize(float value) {
  _has_bits_[2] |= 0x00080000u;
  tschchartseriesmixedlinesymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolsize(float value) {
  _internal_set_tschchartseriesmixedlinesymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolsize)
}

// optional float tschchartseriesscattersymbolsize = 74;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolsize() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolsize() const {
  return _internal_has_tschchartseriesscattersymbolsize();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolsize() {
  tschchartseriesscattersymbolsize_ = 0;
  _has_bits_[2] &= ~0x00100000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolsize() const {
  return tschchartseriesscattersymbolsize_;
}
inline float ChartSeriesStyleArchive::tschchartseriesscattersymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolsize)
  return _internal_tschchartseriesscattersymbolsize();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattersymbolsize(float value) {
  _has_bits_[2] |= 0x00100000u;
  tschchartseriesscattersymbolsize_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolsize(float value) {
  _internal_set_tschchartseriesscattersymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolsize)
}

// optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareasymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesareasymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolstroke() const {
  return _internal_has_tschchartseriesareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesareasymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesareasymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  return _internal_tschchartseriesareasymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesareasymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke_);
  }
  tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  if (tschchartseriesareasymbolstroke) {
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolstroke() {
  _has_bits_[1] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = tschchartseriesareasymbolstroke_;
  tschchartseriesareasymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesareasymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  _has_bits_[1] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = tschchartseriesareasymbolstroke_;
  tschchartseriesareasymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesareasymbolstroke() {
  _has_bits_[1] |= 0x00008000u;
  if (tschchartseriesareasymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesareasymbolstroke_ = p;
  }
  return tschchartseriesareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesareasymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke_);
  }
  if (tschchartseriesareasymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesareasymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesareasymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesareasymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblesymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesbubblesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolstroke() const {
  return _internal_has_tschchartseriesbubblesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesbubblesymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesbubblesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  return _internal_tschchartseriesbubblesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesbubblesymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke_);
  }
  tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  if (tschchartseriesbubblesymbolstroke) {
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolstroke() {
  _has_bits_[1] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblesymbolstroke_;
  tschchartseriesbubblesymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesbubblesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  _has_bits_[1] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = tschchartseriesbubblesymbolstroke_;
  tschchartseriesbubblesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesbubblesymbolstroke() {
  _has_bits_[1] |= 0x00010000u;
  if (tschchartseriesbubblesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesbubblesymbolstroke_ = p;
  }
  return tschchartseriesbubblesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesbubblesymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke_);
  }
  if (tschchartseriesbubblesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesbubblesymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesbubblesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesbubblesymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinesymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieslinesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolstroke() const {
  return _internal_has_tschchartserieslinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartserieslinesymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartserieslinesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  return _internal_tschchartserieslinesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartserieslinesymbolstroke(
    ::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke_);
  }
  tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  if (tschchartserieslinesymbolstroke) {
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolstroke() {
  _has_bits_[1] &= ~0x00020000u;
  ::TSD::StrokeArchive* temp = tschchartserieslinesymbolstroke_;
  tschchartserieslinesymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartserieslinesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  _has_bits_[1] &= ~0x00020000u;
  ::TSD::StrokeArchive* temp = tschchartserieslinesymbolstroke_;
  tschchartserieslinesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartserieslinesymbolstroke() {
  _has_bits_[1] |= 0x00020000u;
  if (tschchartserieslinesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartserieslinesymbolstroke_ = p;
  }
  return tschchartserieslinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartserieslinesymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke_);
  }
  if (tschchartserieslinesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieslinesymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartserieslinesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieslinesymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareasymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedareasymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolstroke() const {
  return _internal_has_tschchartseriesmixedareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedareasymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedareasymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  return _internal_tschchartseriesmixedareasymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedareasymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke_);
  }
  tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  if (tschchartseriesmixedareasymbolstroke) {
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolstroke() {
  _has_bits_[1] &= ~0x00040000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareasymbolstroke_;
  tschchartseriesmixedareasymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedareasymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  _has_bits_[1] &= ~0x00040000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareasymbolstroke_;
  tschchartseriesmixedareasymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedareasymbolstroke() {
  _has_bits_[1] |= 0x00040000u;
  if (tschchartseriesmixedareasymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesmixedareasymbolstroke_ = p;
  }
  return tschchartseriesmixedareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedareasymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke_);
  }
  if (tschchartseriesmixedareasymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedareasymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedareasymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedareasymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinesymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesmixedlinesymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolstroke() const {
  return _internal_has_tschchartseriesmixedlinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinesymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesmixedlinesymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  return _internal_tschchartseriesmixedlinesymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesmixedlinesymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke_);
  }
  tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  if (tschchartseriesmixedlinesymbolstroke) {
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolstroke() {
  _has_bits_[1] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinesymbolstroke_;
  tschchartseriesmixedlinesymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesmixedlinesymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  _has_bits_[1] &= ~0x00080000u;
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinesymbolstroke_;
  tschchartseriesmixedlinesymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesmixedlinesymbolstroke() {
  _has_bits_[1] |= 0x00080000u;
  if (tschchartseriesmixedlinesymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesmixedlinesymbolstroke_ = p;
  }
  return tschchartseriesmixedlinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesmixedlinesymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke_);
  }
  if (tschchartseriesmixedlinesymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesmixedlinesymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesmixedlinesymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesmixedlinesymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke)
}

// optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattersymbolstroke() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesscattersymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolstroke() const {
  return _internal_has_tschchartseriesscattersymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesscattersymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesscattersymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  return _internal_tschchartseriesscattersymbolstroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesscattersymbolstroke(
    ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke_);
  }
  tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  if (tschchartseriesscattersymbolstroke) {
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolstroke() {
  _has_bits_[1] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = tschchartseriesscattersymbolstroke_;
  tschchartseriesscattersymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesscattersymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  _has_bits_[1] &= ~0x00100000u;
  ::TSD::StrokeArchive* temp = tschchartseriesscattersymbolstroke_;
  tschchartseriesscattersymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesscattersymbolstroke() {
  _has_bits_[1] |= 0x00100000u;
  if (tschchartseriesscattersymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesscattersymbolstroke_ = p;
  }
  return tschchartseriesscattersymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesscattersymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke_);
  }
  if (tschchartseriesscattersymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesscattersymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesscattersymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesscattersymbolstroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke)
}

// optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshadow() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulttrendlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineshadow() const {
  return _internal_has_tschchartseriesdefaulttrendlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesdefaulttrendlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  return _internal_tschchartseriesdefaulttrendlineshadow();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulttrendlineshadow(
    ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow_);
  }
  tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  if (tschchartseriesdefaulttrendlineshadow) {
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlineshadow() {
  _has_bits_[1] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulttrendlineshadow_;
  tschchartseriesdefaulttrendlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulttrendlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  _has_bits_[1] &= ~0x00200000u;
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulttrendlineshadow_;
  tschchartseriesdefaulttrendlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlineshadow() {
  _has_bits_[1] |= 0x00200000u;
  if (tschchartseriesdefaulttrendlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesdefaulttrendlineshadow_ = p;
  }
  return tschchartseriesdefaulttrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesdefaulttrendlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow_);
  }
  if (tschchartseriesdefaulttrendlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulttrendlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulttrendlineshadow, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow)
}

// optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinestroke() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulttrendlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinestroke() const {
  return _internal_has_tschchartseriesdefaulttrendlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesdefaulttrendlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  return _internal_tschchartseriesdefaulttrendlinestroke();
}
inline void ChartSeriesStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulttrendlinestroke(
    ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke_);
  }
  tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  if (tschchartseriesdefaulttrendlinestroke) {
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlinestroke() {
  _has_bits_[1] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulttrendlinestroke_;
  tschchartseriesdefaulttrendlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::unsafe_arena_release_tschchartseriesdefaulttrendlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  _has_bits_[1] &= ~0x00400000u;
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulttrendlinestroke_;
  tschchartseriesdefaulttrendlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlinestroke() {
  _has_bits_[1] |= 0x00400000u;
  if (tschchartseriesdefaulttrendlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesdefaulttrendlinestroke_ = p;
  }
  return tschchartseriesdefaulttrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesdefaulttrendlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
  return _msg;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke_);
  }
  if (tschchartseriesdefaulttrendlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulttrendlinestroke));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulttrendlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulttrendlinestroke, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke)
}

// optional float tschchartseriesdefaulttrendlineequationopacity = 81;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationopacity() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationopacity() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationopacity() {
  tschchartseriesdefaulttrendlineequationopacity_ = 0;
  _has_bits_[2] &= ~0x00200000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineequationopacity() const {
  return tschchartseriesdefaulttrendlineequationopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationopacity)
  return _internal_tschchartseriesdefaulttrendlineequationopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  _has_bits_[2] |= 0x00200000u;
  tschchartseriesdefaulttrendlineequationopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationopacity)
}

// optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex() {
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationparagraphstyleindex)
  return _internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00400000u;
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineequationparagraphstyleindex)
}

// optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredopacity() {
  tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  _has_bits_[2] &= ~0x00800000u;
}
inline float ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return tschchartseriesdefaulttrendlinersquaredopacity_;
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredopacity)
  return _internal_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  _has_bits_[2] |= 0x00800000u;
  tschchartseriesdefaulttrendlinersquaredopacity_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredopacity)
}

// optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() {
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex)
  return _internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x01000000u;
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex)
}

// optional int32 tschchartseriesareavaluelabelposition = 87;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesareavaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesareavaluelabelposition() const {
  return _internal_has_tschchartseriesareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareavaluelabelposition() {
  tschchartseriesareavaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesareavaluelabelposition() const {
  return tschchartseriesareavaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareavaluelabelposition)
  return _internal_tschchartseriesareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x02000000u;
  tschchartseriesareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareavaluelabelposition)
}

// optional int32 tschchartseriesbarvaluelabelposition = 88;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbarvaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarvaluelabelposition() const {
  return _internal_has_tschchartseriesbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarvaluelabelposition() {
  tschchartseriesbarvaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbarvaluelabelposition() const {
  return tschchartseriesbarvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbarvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarvaluelabelposition)
  return _internal_tschchartseriesbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x04000000u;
  tschchartseriesbarvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbarvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarvaluelabelposition)
}

// optional int32 tschchartseriesbubblevaluelabelposition = 89;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesbubblevaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblevaluelabelposition() const {
  return _internal_has_tschchartseriesbubblevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblevaluelabelposition() {
  tschchartseriesbubblevaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesbubblevaluelabelposition() const {
  return tschchartseriesbubblevaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesbubblevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblevaluelabelposition)
  return _internal_tschchartseriesbubblevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x08000000u;
  tschchartseriesbubblevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblevaluelabelposition)
}

// optional int32 tschchartseriesdefaultvaluelabelposition = 90;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultvaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultvaluelabelposition() const {
  return _internal_has_tschchartseriesdefaultvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultvaluelabelposition() {
  tschchartseriesdefaultvaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultvaluelabelposition() const {
  return tschchartseriesdefaultvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelposition)
  return _internal_tschchartseriesdefaultvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x10000000u;
  tschchartseriesdefaultvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelposition)
}

// optional int32 tschchartserieslinevaluelabelposition = 91;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartserieslinevaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartserieslinevaluelabelposition() const {
  return _internal_has_tschchartserieslinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinevaluelabelposition() {
  tschchartserieslinevaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartserieslinevaluelabelposition() const {
  return tschchartserieslinevaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartserieslinevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinevaluelabelposition)
  return _internal_tschchartserieslinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x20000000u;
  tschchartserieslinevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinevaluelabelposition)
}

// optional int32 tschchartseriesmixedareavaluelabelposition = 92;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedareavaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareavaluelabelposition() const {
  return _internal_has_tschchartseriesmixedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareavaluelabelposition() {
  tschchartseriesmixedareavaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedareavaluelabelposition() const {
  return tschchartseriesmixedareavaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareavaluelabelposition)
  return _internal_tschchartseriesmixedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x40000000u;
  tschchartseriesmixedareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareavaluelabelposition)
}

// optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedcolumnvaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnvaluelabelposition() const {
  return _internal_has_tschchartseriesmixedcolumnvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnvaluelabelposition() {
  tschchartseriesmixedcolumnvaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedcolumnvaluelabelposition() const {
  return tschchartseriesmixedcolumnvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedcolumnvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnvaluelabelposition)
  return _internal_tschchartseriesmixedcolumnvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x80000000u;
  tschchartseriesmixedcolumnvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedcolumnvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedcolumnvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnvaluelabelposition)
}

// optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesmixedlinevaluelabelposition() const {
  bool value = (_has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinevaluelabelposition() const {
  return _internal_has_tschchartseriesmixedlinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinevaluelabelposition() {
  tschchartseriesmixedlinevaluelabelposition_ = 0;
  _has_bits_[3] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesmixedlinevaluelabelposition() const {
  return tschchartseriesmixedlinevaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesmixedlinevaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinevaluelabelposition)
  return _internal_tschchartseriesmixedlinevaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000001u;
  tschchartseriesmixedlinevaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinevaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlinevaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinevaluelabelposition)
}

// optional int32 tschchartseriesscattervaluelabelposition = 95;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesscattervaluelabelposition() const {
  bool value = (_has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattervaluelabelposition() const {
  return _internal_has_tschchartseriesscattervaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattervaluelabelposition() {
  tschchartseriesscattervaluelabelposition_ = 0;
  _has_bits_[3] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesscattervaluelabelposition() const {
  return tschchartseriesscattervaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesscattervaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattervaluelabelposition)
  return _internal_tschchartseriesscattervaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000002u;
  tschchartseriesscattervaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattervaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscattervaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattervaluelabelposition)
}

// optional int32 tschchartseriesstackedareavaluelabelposition = 96;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesstackedareavaluelabelposition() const {
  bool value = (_has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedareavaluelabelposition() const {
  return _internal_has_tschchartseriesstackedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedareavaluelabelposition() {
  tschchartseriesstackedareavaluelabelposition_ = 0;
  _has_bits_[3] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesstackedareavaluelabelposition() const {
  return tschchartseriesstackedareavaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesstackedareavaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedareavaluelabelposition)
  return _internal_tschchartseriesstackedareavaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000004u;
  tschchartseriesstackedareavaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedareavaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesstackedareavaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedareavaluelabelposition)
}

// optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesstackedbarvaluelabelposition() const {
  bool value = (_has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedbarvaluelabelposition() const {
  return _internal_has_tschchartseriesstackedbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedbarvaluelabelposition() {
  tschchartseriesstackedbarvaluelabelposition_ = 0;
  _has_bits_[3] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesstackedbarvaluelabelposition() const {
  return tschchartseriesstackedbarvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesstackedbarvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedbarvaluelabelposition)
  return _internal_tschchartseriesstackedbarvaluelabelposition();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000008u;
  tschchartseriesstackedbarvaluelabelposition_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedbarvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesstackedbarvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesstackedbarvaluelabelposition)
}

// optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
inline bool ChartSeriesStyleArchive::_internal_has_tschchartseriesdefaultvaluelabelspacing() const {
  bool value = (_has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultvaluelabelspacing() const {
  return _internal_has_tschchartseriesdefaultvaluelabelspacing();
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultvaluelabelspacing() {
  tschchartseriesdefaultvaluelabelspacing_ = 0;
  _has_bits_[3] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::_internal_tschchartseriesdefaultvaluelabelspacing() const {
  return tschchartseriesdefaultvaluelabelspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesStyleArchive::tschchartseriesdefaultvaluelabelspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelspacing)
  return _internal_tschchartseriesdefaultvaluelabelspacing();
}
inline void ChartSeriesStyleArchive::_internal_set_tschchartseriesdefaultvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[3] |= 0x00000040u;
  tschchartseriesdefaultvaluelabelspacing_ = value;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultvaluelabelspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultvaluelabelspacing)
}

// -------------------------------------------------------------------

// ChartSeriesNonStyleArchive

// optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefault1_0dateformat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefault1_0dateformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefault1_0dateformat() const {
  return _internal_has_tschchartseriesdefault1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefault1_0dateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdefault1_0dateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefault1_0dateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0dateformat)
  return _internal_tschchartseriesdefault1_0dateformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefault1_0dateformat(
    ::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefault1_0dateformat_);
  }
  tschchartseriesdefault1_0dateformat_ = tschchartseriesdefault1_0dateformat;
  if (tschchartseriesdefault1_0dateformat) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0dateformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefault1_0dateformat() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefault1_0dateformat_;
  tschchartseriesdefault1_0dateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefault1_0dateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0dateformat)
  _has_bits_[0] &= ~0x00000100u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefault1_0dateformat_;
  tschchartseriesdefault1_0dateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefault1_0dateformat() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartseriesdefault1_0dateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdefault1_0dateformat_ = p;
  }
  return tschchartseriesdefault1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefault1_0dateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdefault1_0dateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0dateformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefault1_0dateformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefault1_0dateformat_);
  }
  if (tschchartseriesdefault1_0dateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefault1_0dateformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdefault1_0dateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefault1_0dateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartseriesdefault1_0dateformat_ = tschchartseriesdefault1_0dateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0dateformat)
}

// optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefault1_0numberformat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefault1_0numberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefault1_0numberformat() const {
  return _internal_has_tschchartseriesdefault1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefault1_0numberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdefault1_0numberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefault1_0numberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0numberformat)
  return _internal_tschchartseriesdefault1_0numberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefault1_0numberformat(
    ::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefault1_0numberformat_);
  }
  tschchartseriesdefault1_0numberformat_ = tschchartseriesdefault1_0numberformat;
  if (tschchartseriesdefault1_0numberformat) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0numberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefault1_0numberformat() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefault1_0numberformat_;
  tschchartseriesdefault1_0numberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefault1_0numberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0numberformat)
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefault1_0numberformat_;
  tschchartseriesdefault1_0numberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefault1_0numberformat() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartseriesdefault1_0numberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdefault1_0numberformat_ = p;
  }
  return tschchartseriesdefault1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefault1_0numberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdefault1_0numberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0numberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefault1_0numberformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefault1_0numberformat_);
  }
  if (tschchartseriesdefault1_0numberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefault1_0numberformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdefault1_0numberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefault1_0numberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartseriesdefault1_0numberformat_ = tschchartseriesdefault1_0numberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0numberformat)
}

// optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespie1_0numberformat() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespie1_0numberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespie1_0numberformat() const {
  return _internal_has_tschchartseriespie1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriespie1_0numberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriespie1_0numberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriespie1_0numberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie1_0numberformat)
  return _internal_tschchartseriespie1_0numberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriespie1_0numberformat(
    ::TSK::FormatStructArchive* tschchartseriespie1_0numberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespie1_0numberformat_);
  }
  tschchartseriespie1_0numberformat_ = tschchartseriespie1_0numberformat;
  if (tschchartseriespie1_0numberformat) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie1_0numberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriespie1_0numberformat() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = tschchartseriespie1_0numberformat_;
  tschchartseriespie1_0numberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriespie1_0numberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie1_0numberformat)
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = tschchartseriespie1_0numberformat_;
  tschchartseriespie1_0numberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriespie1_0numberformat() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartseriespie1_0numberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriespie1_0numberformat_ = p;
  }
  return tschchartseriespie1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriespie1_0numberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriespie1_0numberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie1_0numberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriespie1_0numberformat(::TSK::FormatStructArchive* tschchartseriespie1_0numberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespie1_0numberformat_);
  }
  if (tschchartseriespie1_0numberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespie1_0numberformat));
    if (message_arena != submessage_arena) {
      tschchartseriespie1_0numberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespie1_0numberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartseriespie1_0numberformat_ = tschchartseriespie1_0numberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie1_0numberformat)
}

// optional float tschchartseriespie2_3labelexplosion = 16;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespie2_3labelexplosion() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespie2_3labelexplosion() const {
  return _internal_has_tschchartseriespie2_3labelexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespie2_3labelexplosion() {
  tschchartseriespie2_3labelexplosion_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespie2_3labelexplosion() const {
  return tschchartseriespie2_3labelexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespie2_3labelexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie2_3labelexplosion)
  return _internal_tschchartseriespie2_3labelexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespie2_3labelexplosion(float value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartseriespie2_3labelexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespie2_3labelexplosion(float value) {
  _internal_set_tschchartseriespie2_3labelexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie2_3labelexplosion)
}

// optional float tschchartseriesbubbleadjustmentscale = 1;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleadjustmentscale() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleadjustmentscale() const {
  return _internal_has_tschchartseriesbubbleadjustmentscale();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleadjustmentscale() {
  tschchartseriesbubbleadjustmentscale_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleadjustmentscale() const {
  return tschchartseriesbubbleadjustmentscale_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesbubbleadjustmentscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleadjustmentscale)
  return _internal_tschchartseriesbubbleadjustmentscale();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleadjustmentscale(float value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartseriesbubbleadjustmentscale_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleadjustmentscale(float value) {
  _internal_set_tschchartseriesbubbleadjustmentscale(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleadjustmentscale)
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultdateformat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultdateformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultdateformat() const {
  return _internal_has_tschchartseriesdefaultdateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultdateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdefaultdateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultdateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdateformat)
  return _internal_tschchartseriesdefaultdateformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultdateformat(
    ::TSK::FormatStructArchive* tschchartseriesdefaultdateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdateformat_);
  }
  tschchartseriesdefaultdateformat_ = tschchartseriesdefaultdateformat;
  if (tschchartseriesdefaultdateformat) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdateformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultdateformat() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultdateformat_;
  tschchartseriesdefaultdateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaultdateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdateformat)
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultdateformat_;
  tschchartseriesdefaultdateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaultdateformat() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartseriesdefaultdateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdefaultdateformat_ = p;
  }
  return tschchartseriesdefaultdateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultdateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdefaultdateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdateformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultdateformat(::TSK::FormatStructArchive* tschchartseriesdefaultdateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdateformat_);
  }
  if (tschchartseriesdefaultdateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdateformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultdateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultdateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartseriesdefaultdateformat_ = tschchartseriesdefaultdateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdateformat)
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultdurationformat() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultdurationformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultdurationformat() const {
  return _internal_has_tschchartseriesdefaultdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultdurationformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdefaultdurationformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultdurationformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdurationformat)
  return _internal_tschchartseriesdefaultdurationformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultdurationformat(
    ::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdurationformat_);
  }
  tschchartseriesdefaultdurationformat_ = tschchartseriesdefaultdurationformat;
  if (tschchartseriesdefaultdurationformat) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdurationformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultdurationformat() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultdurationformat_;
  tschchartseriesdefaultdurationformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaultdurationformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdurationformat)
  _has_bits_[0] &= ~0x00000200u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultdurationformat_;
  tschchartseriesdefaultdurationformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaultdurationformat() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartseriesdefaultdurationformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdefaultdurationformat_ = p;
  }
  return tschchartseriesdefaultdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultdurationformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdefaultdurationformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdurationformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultdurationformat(::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdurationformat_);
  }
  if (tschchartseriesdefaultdurationformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultdurationformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultdurationformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultdurationformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartseriesdefaultdurationformat_ = tschchartseriesdefaultdurationformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdurationformat)
}

// optional int32 tschchartseriesareaenablecalloutline = 103;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareaenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareaenablecalloutline() const {
  return _internal_has_tschchartseriesareaenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareaenablecalloutline() {
  tschchartseriesareaenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesareaenablecalloutline() const {
  return tschchartseriesareaenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesareaenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareaenablecalloutline)
  return _internal_tschchartseriesareaenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00004000u;
  tschchartseriesareaenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareaenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareaenablecalloutline)
}

// optional int32 tschchartseriesbarenablecalloutline = 104;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbarenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbarenablecalloutline() const {
  return _internal_has_tschchartseriesbarenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbarenablecalloutline() {
  tschchartseriesbarenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbarenablecalloutline() const {
  return tschchartseriesbarenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbarenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarenablecalloutline)
  return _internal_tschchartseriesbarenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00008000u;
  tschchartseriesbarenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbarenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarenablecalloutline)
}

// optional int32 tschchartseriesbubbleenablecalloutline = 105;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleenablecalloutline() const {
  return _internal_has_tschchartseriesbubbleenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleenablecalloutline() {
  tschchartseriesbubbleenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleenablecalloutline() const {
  return tschchartseriesbubbleenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbubbleenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleenablecalloutline)
  return _internal_tschchartseriesbubbleenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00010000u;
  tschchartseriesbubbleenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubbleenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleenablecalloutline)
}

// optional int32 tschchartseriesdefaultenablecalloutline = 110;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultenablecalloutline() const {
  return _internal_has_tschchartseriesdefaultenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultenablecalloutline() {
  tschchartseriesdefaultenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultenablecalloutline() const {
  return tschchartseriesdefaultenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultenablecalloutline)
  return _internal_tschchartseriesdefaultenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00200000u;
  tschchartseriesdefaultenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultenablecalloutline)
}

// optional int32 tschchartserieslineenablecalloutline = 106;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineenablecalloutline() const {
  return _internal_has_tschchartserieslineenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineenablecalloutline() {
  tschchartserieslineenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartserieslineenablecalloutline() const {
  return tschchartserieslineenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartserieslineenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineenablecalloutline)
  return _internal_tschchartserieslineenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00020000u;
  tschchartserieslineenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslineenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineenablecalloutline)
}

// optional int32 tschchartseriespieenablecalloutline = 102;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieenablecalloutline() const {
  return _internal_has_tschchartseriespieenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieenablecalloutline() {
  tschchartseriespieenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriespieenablecalloutline() const {
  return tschchartseriespieenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriespieenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieenablecalloutline)
  return _internal_tschchartseriespieenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00001000u;
  tschchartseriespieenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespieenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieenablecalloutline)
}

// optional int32 tschchartseriesscatterenablecalloutline = 107;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscatterenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscatterenablecalloutline() const {
  return _internal_has_tschchartseriesscatterenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscatterenablecalloutline() {
  tschchartseriesscatterenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesscatterenablecalloutline() const {
  return tschchartseriesscatterenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesscatterenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterenablecalloutline)
  return _internal_tschchartseriesscatterenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscatterenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00040000u;
  tschchartseriesscatterenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscatterenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscatterenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterenablecalloutline)
}

// optional int32 tschchartseriesstackedareaenablecalloutline = 108;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedareaenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedareaenablecalloutline() const {
  return _internal_has_tschchartseriesstackedareaenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedareaenablecalloutline() {
  tschchartseriesstackedareaenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedareaenablecalloutline() const {
  return tschchartseriesstackedareaenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesstackedareaenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedareaenablecalloutline)
  return _internal_tschchartseriesstackedareaenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesstackedareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00080000u;
  tschchartseriesstackedareaenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesstackedareaenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesstackedareaenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedareaenablecalloutline)
}

// optional int32 tschchartseriesstackedbarenablecalloutline = 109;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedbarenablecalloutline() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedbarenablecalloutline() const {
  return _internal_has_tschchartseriesstackedbarenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedbarenablecalloutline() {
  tschchartseriesstackedbarenablecalloutline_ = 0;
  _has_bits_[2] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedbarenablecalloutline() const {
  return tschchartseriesstackedbarenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesstackedbarenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedbarenablecalloutline)
  return _internal_tschchartseriesstackedbarenablecalloutline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesstackedbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00100000u;
  tschchartseriesstackedbarenablecalloutline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesstackedbarenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesstackedbarenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedbarenablecalloutline)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustomnegativedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  return _internal_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedata_;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedata_;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartseriesdefaulterrorbarcustomnegativedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarcustomnegativedata_ = p;
  }
  return tschchartseriesdefaulterrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedata));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustomnegativedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustomnegativedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  return _internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustomnegativedatascatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustomnegativedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustomnegativedatascatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustompositivedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustompositivedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  return _internal_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedata() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedata_;
  tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedata() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedata_;
  tschchartseriesdefaulterrorbarcustompositivedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartseriesdefaulterrorbarcustompositivedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarcustompositivedata_ = p;
  }
  return tschchartseriesdefaulterrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedata));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustompositivedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustompositivedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  return _internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = p;
  }
  return tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaulterrorbarcustompositivedatascatterx));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaulterrorbarcustompositivedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaulterrorbarcustompositivedatascatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx)
}

// optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarfixedvalue() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarfixedvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvalue() {
  tschchartseriesdefaulterrorbarfixedvalue_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarfixedvalue() const {
  return tschchartseriesdefaulterrorbarfixedvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvalue)
  return _internal_tschchartseriesdefaulterrorbarfixedvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartseriesdefaulterrorbarfixedvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarfixedvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvalue)
}

// optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvaluescatterx() {
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return tschchartseriesdefaulterrorbarfixedvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarfixedvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarfixedvaluescatterx)
}

// optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarpercentvalue() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarpercentvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvalue() {
  tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarpercentvalue() const {
  return tschchartseriesdefaulterrorbarpercentvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvalue)
  return _internal_tschchartseriesdefaulterrorbarpercentvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartseriesdefaulterrorbarpercentvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarpercentvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvalue)
}

// optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvaluescatterx() {
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return tschchartseriesdefaulterrorbarpercentvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarpercentvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarpercentvaluescatterx)
}

// optional int32 tschchartseriesdefaulterrorbarsetting = 10;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarsetting() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsetting() const {
  return _internal_has_tschchartseriesdefaulterrorbarsetting();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsetting() {
  tschchartseriesdefaulterrorbarsetting_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarsetting() const {
  return tschchartseriesdefaulterrorbarsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsetting() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsetting)
  return _internal_tschchartseriesdefaulterrorbarsetting();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartseriesdefaulterrorbarsetting_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbarsetting(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsetting)
}

// optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsettingscatterx() {
  tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return tschchartseriesdefaulterrorbarsettingscatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsettingscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsettingscatterx)
  return _internal_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartseriesdefaulterrorbarsettingscatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbarsettingscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarsettingscatterx)
}

// optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstddevvalue() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvalue() const {
  return _internal_has_tschchartseriesdefaulterrorbarstddevvalue();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvalue() {
  tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarstddevvalue() const {
  return tschchartseriesdefaulterrorbarstddevvalue_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvalue)
  return _internal_tschchartseriesdefaulterrorbarstddevvalue();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartseriesdefaulterrorbarstddevvalue_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  _internal_set_tschchartseriesdefaulterrorbarstddevvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvalue)
}

// optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvaluescatterx() {
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return tschchartseriesdefaulterrorbarstddevvaluescatterx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvaluescatterx)
  return _internal_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  _internal_set_tschchartseriesdefaulterrorbarstddevvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarstddevvaluescatterx)
}

// optional int32 tschchartseriesdefaulterrorbartype = 14;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbartype() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartype() const {
  return _internal_has_tschchartseriesdefaulterrorbartype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartype() {
  tschchartseriesdefaulterrorbartype_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbartype() const {
  return tschchartseriesdefaulterrorbartype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartype)
  return _internal_tschchartseriesdefaulterrorbartype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartseriesdefaulterrorbartype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbartype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartype)
}

// optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulterrorbartypescatterx() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartypescatterx() const {
  return _internal_has_tschchartseriesdefaulterrorbartypescatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartypescatterx() {
  tschchartseriesdefaulterrorbartypescatterx_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulterrorbartypescatterx() const {
  return tschchartseriesdefaulterrorbartypescatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartypescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartypescatterx)
  return _internal_tschchartseriesdefaulterrorbartypescatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartseriesdefaulterrorbartypescatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulterrorbartypescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbartypescatterx)
}

// optional float tschchartseriespielabelexplosion = 147;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespielabelexplosion() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespielabelexplosion() const {
  return _internal_has_tschchartseriespielabelexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespielabelexplosion() {
  tschchartseriespielabelexplosion_ = 0;
  _has_bits_[2] &= ~0x00002000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespielabelexplosion() const {
  return tschchartseriespielabelexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespielabelexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespielabelexplosion)
  return _internal_tschchartseriespielabelexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespielabelexplosion(float value) {
  _has_bits_[2] |= 0x00002000u;
  tschchartseriespielabelexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespielabelexplosion(float value) {
  _internal_set_tschchartseriespielabelexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespielabelexplosion)
}

// optional int32 tschchartseriesbubblelinetype = 17;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblelinetype() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblelinetype() const {
  return _internal_has_tschchartseriesbubblelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblelinetype() {
  tschchartseriesbubblelinetype_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblelinetype() const {
  return tschchartseriesbubblelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblelinetype)
  return _internal_tschchartseriesbubblelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartseriesbubblelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblelinetype)
}

// optional int32 tschchartserieslinelinetype = 18;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinelinetype() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinelinetype() const {
  return _internal_has_tschchartserieslinelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinelinetype() {
  tschchartserieslinelinetype_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartserieslinelinetype() const {
  return tschchartserieslinelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartserieslinelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinelinetype)
  return _internal_tschchartserieslinelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartserieslinelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinelinetype)
}

// optional int32 tschchartseriesmixedlinelinetype = 19;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlinelinetype() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinelinetype() const {
  return _internal_has_tschchartseriesmixedlinelinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinelinetype() {
  tschchartseriesmixedlinelinetype_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlinelinetype() const {
  return tschchartseriesmixedlinelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedlinelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinelinetype)
  return _internal_tschchartseriesmixedlinelinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartseriesmixedlinelinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlinelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinelinetype)
}

// optional int32 tschchartseriesscatterlinetype = 20;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscatterlinetype() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscatterlinetype() const {
  return _internal_has_tschchartseriesscatterlinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscatterlinetype() {
  tschchartseriesscatterlinetype_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesscatterlinetype() const {
  return tschchartseriesscatterlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesscatterlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterlinetype)
  return _internal_tschchartseriesscatterlinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartseriesscatterlinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscatterlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscatterlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterlinetype)
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdefaultnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformat() const {
  return _internal_has_tschchartseriesdefaultnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultnumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdefaultnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  return _internal_tschchartseriesdefaultnumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesdefaultnumberformat(
    ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultnumberformat_);
  }
  tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  if (tschchartseriesdefaultnumberformat) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultnumberformat() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultnumberformat_;
  tschchartseriesdefaultnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesdefaultnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  _has_bits_[0] &= ~0x00000800u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultnumberformat_;
  tschchartseriesdefaultnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaultnumberformat() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartseriesdefaultnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdefaultnumberformat_ = p;
  }
  return tschchartseriesdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdefaultnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultnumberformat(::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultnumberformat_);
  }
  if (tschchartseriesdefaultnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdefaultnumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdefaultnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdefaultnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat)
}

// optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespienumberformat() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespienumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformat() const {
  return _internal_has_tschchartseriespienumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriespienumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriespienumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriespienumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  return _internal_tschchartseriespienumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriespienumberformat(
    ::TSK::FormatStructArchive* tschchartseriespienumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespienumberformat_);
  }
  tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  if (tschchartseriespienumberformat) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriespienumberformat() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSK::FormatStructArchive* temp = tschchartseriespienumberformat_;
  tschchartseriespienumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriespienumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  _has_bits_[0] &= ~0x00001000u;
  ::TSK::FormatStructArchive* temp = tschchartseriespienumberformat_;
  tschchartseriespienumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriespienumberformat() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartseriespienumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriespienumberformat_ = p;
  }
  return tschchartseriespienumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriespienumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriespienumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriespienumberformat(::TSK::FormatStructArchive* tschchartseriespienumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespienumberformat_);
  }
  if (tschchartseriespienumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespienumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriespienumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespienumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat)
}

// optional int32 tschchartseriesdefaultnumberformattype = 23;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultnumberformattype() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformattype() const {
  return _internal_has_tschchartseriesdefaultnumberformattype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformattype() {
  tschchartseriesdefaultnumberformattype_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultnumberformattype() const {
  return tschchartseriesdefaultnumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformattype)
  return _internal_tschchartseriesdefaultnumberformattype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartseriesdefaultnumberformattype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformattype)
}

// optional int32 tschchartseriespienumberformattype = 24;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespienumberformattype() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformattype() const {
  return _internal_has_tschchartseriespienumberformattype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformattype() {
  tschchartseriespienumberformattype_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriespienumberformattype() const {
  return tschchartseriespienumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriespienumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformattype)
  return _internal_tschchartseriespienumberformattype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartseriespienumberformattype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespienumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriespienumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformattype)
}

// optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedpercentnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesstackedpercentnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedpercentnumberformat() const {
  return _internal_has_tschchartseriesstackedpercentnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedpercentnumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesstackedpercentnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesstackedpercentnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  return _internal_tschchartseriesstackedpercentnumberformat();
}
inline void ChartSeriesNonStyleArchive::unsafe_arena_set_allocated_tschchartseriesstackedpercentnumberformat(
    ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstackedpercentnumberformat_);
  }
  tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  if (tschchartseriesstackedpercentnumberformat) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesstackedpercentnumberformat() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = tschchartseriesstackedpercentnumberformat_;
  tschchartseriesstackedpercentnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::unsafe_arena_release_tschchartseriesstackedpercentnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = tschchartseriesstackedpercentnumberformat_;
  tschchartseriesstackedpercentnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesstackedpercentnumberformat() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartseriesstackedpercentnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesstackedpercentnumberformat_ = p;
  }
  return tschchartseriesstackedpercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesstackedpercentnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesstackedpercentnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
  return _msg;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesstackedpercentnumberformat(::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstackedpercentnumberformat_);
  }
  if (tschchartseriesstackedpercentnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstackedpercentnumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriesstackedpercentnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesstackedpercentnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat)
}

// optional int32 tschchartseriesdefaultseriestype = 26;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultseriestype() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultseriestype() const {
  return _internal_has_tschchartseriesdefaultseriestype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultseriestype() {
  tschchartseriesdefaultseriestype_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultseriestype() const {
  return tschchartseriesdefaultseriestype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultseriestype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultseriestype)
  return _internal_tschchartseriesdefaultseriestype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartseriesdefaultseriestype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultseriestype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultseriestype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultseriestype)
}

// optional bool tschchartseriesdefaultshowerrorbar = 27;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowerrorbar() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbar() const {
  return _internal_has_tschchartseriesdefaultshowerrorbar();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbar() {
  tschchartseriesdefaultshowerrorbar_ = false;
  _has_bits_[2] &= ~0x00000004u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowerrorbar() const {
  return tschchartseriesdefaultshowerrorbar_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbar() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbar)
  return _internal_tschchartseriesdefaultshowerrorbar();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowerrorbar(bool value) {
  _has_bits_[2] |= 0x00000004u;
  tschchartseriesdefaultshowerrorbar_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbar(bool value) {
  _internal_set_tschchartseriesdefaultshowerrorbar(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbar)
}

// optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowerrorbarscatterx() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbarscatterx() const {
  return _internal_has_tschchartseriesdefaultshowerrorbarscatterx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbarscatterx() {
  tschchartseriesdefaultshowerrorbarscatterx_ = false;
  _has_bits_[2] &= ~0x00000008u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowerrorbarscatterx() const {
  return tschchartseriesdefaultshowerrorbarscatterx_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbarscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbarscatterx)
  return _internal_tschchartseriesdefaultshowerrorbarscatterx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  _has_bits_[2] |= 0x00000008u;
  tschchartseriesdefaultshowerrorbarscatterx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  _internal_set_tschchartseriesdefaultshowerrorbarscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowerrorbarscatterx)
}

// optional bool tschchartseriesbubbleshowlabelsinfront = 101;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshowlabelsinfront() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowlabelsinfront() const {
  return _internal_has_tschchartseriesbubbleshowlabelsinfront();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowlabelsinfront() {
  tschchartseriesbubbleshowlabelsinfront_ = false;
  _has_bits_[2] &= ~0x00000010u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshowlabelsinfront() const {
  return tschchartseriesbubbleshowlabelsinfront_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowlabelsinfront() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowlabelsinfront)
  return _internal_tschchartseriesbubbleshowlabelsinfront();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshowlabelsinfront(bool value) {
  _has_bits_[2] |= 0x00000010u;
  tschchartseriesbubbleshowlabelsinfront_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowlabelsinfront(bool value) {
  _internal_set_tschchartseriesbubbleshowlabelsinfront(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowlabelsinfront)
}

// optional bool tschchartseriesdefaultshowlabelsinfront = 100;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowlabelsinfront() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowlabelsinfront() const {
  return _internal_has_tschchartseriesdefaultshowlabelsinfront();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowlabelsinfront() {
  tschchartseriesdefaultshowlabelsinfront_ = false;
  _has_bits_[2] &= ~0x00000020u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowlabelsinfront() const {
  return tschchartseriesdefaultshowlabelsinfront_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowlabelsinfront() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowlabelsinfront)
  return _internal_tschchartseriesdefaultshowlabelsinfront();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowlabelsinfront(bool value) {
  _has_bits_[2] |= 0x00000020u;
  tschchartseriesdefaultshowlabelsinfront_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowlabelsinfront(bool value) {
  _internal_set_tschchartseriesdefaultshowlabelsinfront(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowlabelsinfront)
}

// optional bool tschchartseriesscattershowline = 29;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowline() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowline() const {
  return _internal_has_tschchartseriesscattershowline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowline() {
  tschchartseriesscattershowline_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowline() const {
  return tschchartseriesscattershowline_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowline)
  return _internal_tschchartseriesscattershowline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowline(bool value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartseriesscattershowline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowline(bool value) {
  _internal_set_tschchartseriesscattershowline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowline)
}

// optional bool tschchartseriesbubbleshownegativedata = 30;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshownegativedata() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshownegativedata() const {
  return _internal_has_tschchartseriesbubbleshownegativedata();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshownegativedata() {
  tschchartseriesbubbleshownegativedata_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshownegativedata() const {
  return tschchartseriesbubbleshownegativedata_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshownegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshownegativedata)
  return _internal_tschchartseriesbubbleshownegativedata();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshownegativedata(bool value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartseriesbubbleshownegativedata_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshownegativedata(bool value) {
  _internal_set_tschchartseriesbubbleshownegativedata(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshownegativedata)
}

// optional bool tschchartseriesbubbleshowserieslabels = 65;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshowserieslabels() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowserieslabels() const {
  return _internal_has_tschchartseriesbubbleshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowserieslabels() {
  tschchartseriesbubbleshowserieslabels_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshowserieslabels() const {
  return tschchartseriesbubbleshowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowserieslabels)
  return _internal_tschchartseriesbubbleshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshowserieslabels(bool value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartseriesbubbleshowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowserieslabels(bool value) {
  _internal_set_tschchartseriesbubbleshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowserieslabels)
}

// optional bool tschchartseriespieshowserieslabels = 31;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieshowserieslabels() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowserieslabels() const {
  return _internal_has_tschchartseriespieshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowserieslabels() {
  tschchartseriespieshowserieslabels_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespieshowserieslabels() const {
  return tschchartseriespieshowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowserieslabels)
  return _internal_tschchartseriespieshowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieshowserieslabels(bool value) {
  _has_bits_[1] |= 0x00000080u;
  tschchartseriespieshowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowserieslabels(bool value) {
  _internal_set_tschchartseriespieshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowserieslabels)
}

// optional bool tschchartseriesscattershowserieslabels = 67;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowserieslabels() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowserieslabels() const {
  return _internal_has_tschchartseriesscattershowserieslabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowserieslabels() {
  tschchartseriesscattershowserieslabels_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowserieslabels() const {
  return tschchartseriesscattershowserieslabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowserieslabels)
  return _internal_tschchartseriesscattershowserieslabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowserieslabels(bool value) {
  _has_bits_[1] |= 0x00001000u;
  tschchartseriesscattershowserieslabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowserieslabels(bool value) {
  _internal_set_tschchartseriesscattershowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowserieslabels)
}

// optional bool tschchartseriesareashowsymbol = 32;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareashowsymbol() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowsymbol() const {
  return _internal_has_tschchartseriesareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowsymbol() {
  tschchartseriesareashowsymbol_ = false;
  _has_bits_[1] &= ~0x00002000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareashowsymbol() const {
  return tschchartseriesareashowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowsymbol)
  return _internal_tschchartseriesareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareashowsymbol(bool value) {
  _has_bits_[1] |= 0x00002000u;
  tschchartseriesareashowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowsymbol(bool value) {
  _internal_set_tschchartseriesareashowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowsymbol)
}

// optional bool tschchartserieslineshowsymbol = 33;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineshowsymbol() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowsymbol() const {
  return _internal_has_tschchartserieslineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowsymbol() {
  tschchartserieslineshowsymbol_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslineshowsymbol() const {
  return tschchartserieslineshowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowsymbol)
  return _internal_tschchartserieslineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineshowsymbol(bool value) {
  _has_bits_[1] |= 0x00004000u;
  tschchartserieslineshowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowsymbol(bool value) {
  _internal_set_tschchartserieslineshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowsymbol)
}

// optional bool tschchartseriesmixedareashowsymbol = 34;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedareashowsymbol() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareashowsymbol() const {
  return _internal_has_tschchartseriesmixedareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareashowsymbol() {
  tschchartseriesmixedareashowsymbol_ = false;
  _has_bits_[1] &= ~0x00008000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedareashowsymbol() const {
  return tschchartseriesmixedareashowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedareashowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareashowsymbol)
  return _internal_tschchartseriesmixedareashowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedareashowsymbol(bool value) {
  _has_bits_[1] |= 0x00008000u;
  tschchartseriesmixedareashowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareashowsymbol(bool value) {
  _internal_set_tschchartseriesmixedareashowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareashowsymbol)
}

// optional bool tschchartseriesmixedlineshowsymbol = 35;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlineshowsymbol() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlineshowsymbol() const {
  return _internal_has_tschchartseriesmixedlineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlineshowsymbol() {
  tschchartseriesmixedlineshowsymbol_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlineshowsymbol() const {
  return tschchartseriesmixedlineshowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedlineshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlineshowsymbol)
  return _internal_tschchartseriesmixedlineshowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlineshowsymbol(bool value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartseriesmixedlineshowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlineshowsymbol(bool value) {
  _internal_set_tschchartseriesmixedlineshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlineshowsymbol)
}

// optional bool tschchartseriesscattershowsymbol = 36;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowsymbol() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowsymbol() const {
  return _internal_has_tschchartseriesscattershowsymbol();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowsymbol() {
  tschchartseriesscattershowsymbol_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowsymbol() const {
  return tschchartseriesscattershowsymbol_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowsymbol)
  return _internal_tschchartseriesscattershowsymbol();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowsymbol(bool value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartseriesscattershowsymbol_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowsymbol(bool value) {
  _internal_set_tschchartseriesscattershowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowsymbol)
}

// optional bool tschchartseriesdefaultshowtrendline = 37;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowtrendline() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowtrendline() const {
  return _internal_has_tschchartseriesdefaultshowtrendline();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowtrendline() {
  tschchartseriesdefaultshowtrendline_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowtrendline() const {
  return tschchartseriesdefaultshowtrendline_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowtrendline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowtrendline)
  return _internal_tschchartseriesdefaultshowtrendline();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowtrendline(bool value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartseriesdefaultshowtrendline_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowtrendline(bool value) {
  _internal_set_tschchartseriesdefaultshowtrendline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowtrendline)
}

// optional bool tschchartseriesareashowvaluelabels = 38;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareashowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowvaluelabels() const {
  return _internal_has_tschchartseriesareashowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowvaluelabels() {
  tschchartseriesareashowvaluelabels_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareashowvaluelabels() const {
  return tschchartseriesareashowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowvaluelabels)
  return _internal_tschchartseriesareashowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareashowvaluelabels(bool value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartseriesareashowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowvaluelabels(bool value) {
  _internal_set_tschchartseriesareashowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareashowvaluelabels)
}

// optional bool tschchartseriesbarshowvaluelabels = 39;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbarshowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbarshowvaluelabels() const {
  return _internal_has_tschchartseriesbarshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbarshowvaluelabels() {
  tschchartseriesbarshowvaluelabels_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbarshowvaluelabels() const {
  return tschchartseriesbarshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbarshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarshowvaluelabels)
  return _internal_tschchartseriesbarshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbarshowvaluelabels(bool value) {
  _has_bits_[1] |= 0x00000100u;
  tschchartseriesbarshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbarshowvaluelabels(bool value) {
  _internal_set_tschchartseriesbarshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarshowvaluelabels)
}

// optional bool tschchartseriesbubbleshowvaluelabels = 40;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubbleshowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowvaluelabels() const {
  return _internal_has_tschchartseriesbubbleshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowvaluelabels() {
  tschchartseriesbubbleshowvaluelabels_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubbleshowvaluelabels() const {
  return tschchartseriesbubbleshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowvaluelabels)
  return _internal_tschchartseriesbubbleshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubbleshowvaluelabels(bool value) {
  _has_bits_[1] |= 0x00000200u;
  tschchartseriesbubbleshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowvaluelabels(bool value) {
  _internal_set_tschchartseriesbubbleshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubbleshowvaluelabels)
}

// optional bool tschchartseriesdefaultshowvaluelabels = 41;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultshowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowvaluelabels() const {
  return _internal_has_tschchartseriesdefaultshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowvaluelabels() {
  tschchartseriesdefaultshowvaluelabels_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultshowvaluelabels() const {
  return tschchartseriesdefaultshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowvaluelabels)
  return _internal_tschchartseriesdefaultshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultshowvaluelabels(bool value) {
  _has_bits_[1] |= 0x00000400u;
  tschchartseriesdefaultshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowvaluelabels(bool value) {
  _internal_set_tschchartseriesdefaultshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultshowvaluelabels)
}

// optional bool tschchartserieslineshowvaluelabels = 42;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslineshowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowvaluelabels() const {
  return _internal_has_tschchartserieslineshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowvaluelabels() {
  tschchartserieslineshowvaluelabels_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslineshowvaluelabels() const {
  return tschchartserieslineshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowvaluelabels)
  return _internal_tschchartserieslineshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslineshowvaluelabels(bool value) {
  _has_bits_[1] |= 0x00000800u;
  tschchartserieslineshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowvaluelabels(bool value) {
  _internal_set_tschchartserieslineshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslineshowvaluelabels)
}

// optional bool tschchartseriesmixedshowvaluelabels = 43;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedshowvaluelabels() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedshowvaluelabels() const {
  return _internal_has_tschchartseriesmixedshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedshowvaluelabels() {
  tschchartseriesmixedshowvaluelabels_ = false;
  _has_bits_[2] &= ~0x00000080u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedshowvaluelabels() const {
  return tschchartseriesmixedshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedshowvaluelabels)
  return _internal_tschchartseriesmixedshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedshowvaluelabels(bool value) {
  _has_bits_[2] |= 0x00000080u;
  tschchartseriesmixedshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedshowvaluelabels(bool value) {
  _internal_set_tschchartseriesmixedshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedshowvaluelabels)
}

// optional bool tschchartseriespieshowvaluelabels = 44;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespieshowvaluelabels() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowvaluelabels() const {
  return _internal_has_tschchartseriespieshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowvaluelabels() {
  tschchartseriespieshowvaluelabels_ = false;
  _has_bits_[2] &= ~0x00000100u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespieshowvaluelabels() const {
  return tschchartseriespieshowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowvaluelabels)
  return _internal_tschchartseriespieshowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespieshowvaluelabels(bool value) {
  _has_bits_[2] |= 0x00000100u;
  tschchartseriespieshowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowvaluelabels(bool value) {
  _internal_set_tschchartseriespieshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespieshowvaluelabels)
}

// optional bool tschchartseriesscattershowvaluelabels = 45;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattershowvaluelabels() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowvaluelabels() const {
  return _internal_has_tschchartseriesscattershowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowvaluelabels() {
  tschchartseriesscattershowvaluelabels_ = false;
  _has_bits_[2] &= ~0x00000200u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscattershowvaluelabels() const {
  return tschchartseriesscattershowvaluelabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowvaluelabels)
  return _internal_tschchartseriesscattershowvaluelabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattershowvaluelabels(bool value) {
  _has_bits_[2] |= 0x00000200u;
  tschchartseriesscattershowvaluelabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowvaluelabels(bool value) {
  _internal_set_tschchartseriesscattershowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattershowvaluelabels)
}

// optional int32 tschchartseriesbubblesizedimension = 46;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblesizedimension() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblesizedimension() const {
  return _internal_has_tschchartseriesbubblesizedimension();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblesizedimension() {
  tschchartseriesbubblesizedimension_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblesizedimension() const {
  return tschchartseriesbubblesizedimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblesizedimension() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblesizedimension)
  return _internal_tschchartseriesbubblesizedimension();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00010000u;
  tschchartseriesbubblesizedimension_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblesizedimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblesizedimension(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblesizedimension)
}

// optional bool tschchartseriesareastacklabels = 139;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareastacklabels() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareastacklabels() const {
  return _internal_has_tschchartseriesareastacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareastacklabels() {
  tschchartseriesareastacklabels_ = false;
  _has_bits_[2] &= ~0x00000400u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesareastacklabels() const {
  return tschchartseriesareastacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareastacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareastacklabels)
  return _internal_tschchartseriesareastacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareastacklabels(bool value) {
  _has_bits_[2] |= 0x00000400u;
  tschchartseriesareastacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareastacklabels(bool value) {
  _internal_set_tschchartseriesareastacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareastacklabels)
}

// optional bool tschchartseriesbarstacklabels = 140;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbarstacklabels() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbarstacklabels() const {
  return _internal_has_tschchartseriesbarstacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbarstacklabels() {
  tschchartseriesbarstacklabels_ = false;
  _has_bits_[2] &= ~0x00400000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbarstacklabels() const {
  return tschchartseriesbarstacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbarstacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarstacklabels)
  return _internal_tschchartseriesbarstacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbarstacklabels(bool value) {
  _has_bits_[2] |= 0x00400000u;
  tschchartseriesbarstacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbarstacklabels(bool value) {
  _internal_set_tschchartseriesbarstacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbarstacklabels)
}

// optional bool tschchartseriesbubblestacklabels = 141;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblestacklabels() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblestacklabels() const {
  return _internal_has_tschchartseriesbubblestacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblestacklabels() {
  tschchartseriesbubblestacklabels_ = false;
  _has_bits_[2] &= ~0x00800000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblestacklabels() const {
  return tschchartseriesbubblestacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubblestacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblestacklabels)
  return _internal_tschchartseriesbubblestacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblestacklabels(bool value) {
  _has_bits_[2] |= 0x00800000u;
  tschchartseriesbubblestacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblestacklabels(bool value) {
  _internal_set_tschchartseriesbubblestacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblestacklabels)
}

// optional bool tschchartseriesdefaultstacklabels = 146;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultstacklabels() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultstacklabels() const {
  return _internal_has_tschchartseriesdefaultstacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultstacklabels() {
  tschchartseriesdefaultstacklabels_ = false;
  _has_bits_[2] &= ~0x01000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultstacklabels() const {
  return tschchartseriesdefaultstacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultstacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultstacklabels)
  return _internal_tschchartseriesdefaultstacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultstacklabels(bool value) {
  _has_bits_[2] |= 0x01000000u;
  tschchartseriesdefaultstacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultstacklabels(bool value) {
  _internal_set_tschchartseriesdefaultstacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultstacklabels)
}

// optional bool tschchartserieslinestacklabels = 142;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinestacklabels() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinestacklabels() const {
  return _internal_has_tschchartserieslinestacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinestacklabels() {
  tschchartserieslinestacklabels_ = false;
  _has_bits_[2] &= ~0x02000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartserieslinestacklabels() const {
  return tschchartserieslinestacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslinestacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinestacklabels)
  return _internal_tschchartserieslinestacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinestacklabels(bool value) {
  _has_bits_[2] |= 0x02000000u;
  tschchartserieslinestacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinestacklabels(bool value) {
  _internal_set_tschchartserieslinestacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinestacklabels)
}

// optional bool tschchartseriespiestacklabels = 138;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespiestacklabels() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespiestacklabels() const {
  return _internal_has_tschchartseriespiestacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespiestacklabels() {
  tschchartseriespiestacklabels_ = false;
  _has_bits_[2] &= ~0x04000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriespiestacklabels() const {
  return tschchartseriespiestacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespiestacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespiestacklabels)
  return _internal_tschchartseriespiestacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespiestacklabels(bool value) {
  _has_bits_[2] |= 0x04000000u;
  tschchartseriespiestacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespiestacklabels(bool value) {
  _internal_set_tschchartseriespiestacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespiestacklabels)
}

// optional bool tschchartseriesscatterstacklabels = 143;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscatterstacklabels() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscatterstacklabels() const {
  return _internal_has_tschchartseriesscatterstacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscatterstacklabels() {
  tschchartseriesscatterstacklabels_ = false;
  _has_bits_[2] &= ~0x08000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesscatterstacklabels() const {
  return tschchartseriesscatterstacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscatterstacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterstacklabels)
  return _internal_tschchartseriesscatterstacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscatterstacklabels(bool value) {
  _has_bits_[2] |= 0x08000000u;
  tschchartseriesscatterstacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscatterstacklabels(bool value) {
  _internal_set_tschchartseriesscatterstacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscatterstacklabels)
}

// optional bool tschchartseriesstackedareastacklabels = 144;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedareastacklabels() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedareastacklabels() const {
  return _internal_has_tschchartseriesstackedareastacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedareastacklabels() {
  tschchartseriesstackedareastacklabels_ = false;
  _has_bits_[2] &= ~0x10000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedareastacklabels() const {
  return tschchartseriesstackedareastacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesstackedareastacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedareastacklabels)
  return _internal_tschchartseriesstackedareastacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesstackedareastacklabels(bool value) {
  _has_bits_[2] |= 0x10000000u;
  tschchartseriesstackedareastacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesstackedareastacklabels(bool value) {
  _internal_set_tschchartseriesstackedareastacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedareastacklabels)
}

// optional bool tschchartseriesstackedbarstacklabels = 145;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesstackedbarstacklabels() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedbarstacklabels() const {
  return _internal_has_tschchartseriesstackedbarstacklabels();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedbarstacklabels() {
  tschchartseriesstackedbarstacklabels_ = false;
  _has_bits_[2] &= ~0x20000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesstackedbarstacklabels() const {
  return tschchartseriesstackedbarstacklabels_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesstackedbarstacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedbarstacklabels)
  return _internal_tschchartseriesstackedbarstacklabels();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesstackedbarstacklabels(bool value) {
  _has_bits_[2] |= 0x20000000u;
  tschchartseriesstackedbarstacklabels_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesstackedbarstacklabels(bool value) {
  _internal_set_tschchartseriesstackedbarstacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedbarstacklabels)
}

// optional int32 tschchartseriesareasymboltype = 47;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesareasymboltype() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareasymboltype() const {
  return _internal_has_tschchartseriesareasymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareasymboltype() {
  tschchartseriesareasymboltype_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesareasymboltype() const {
  return tschchartseriesareasymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesareasymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareasymboltype)
  return _internal_tschchartseriesareasymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00020000u;
  tschchartseriesareasymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesareasymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesareasymboltype)
}

// optional int32 tschchartserieslinesymboltype = 48;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartserieslinesymboltype() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinesymboltype() const {
  return _internal_has_tschchartserieslinesymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinesymboltype() {
  tschchartserieslinesymboltype_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartserieslinesymboltype() const {
  return tschchartserieslinesymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartserieslinesymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinesymboltype)
  return _internal_tschchartserieslinesymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00040000u;
  tschchartserieslinesymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinesymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartserieslinesymboltype)
}

// optional int32 tschchartseriesmixedareasymboltype = 49;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedareasymboltype() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareasymboltype() const {
  return _internal_has_tschchartseriesmixedareasymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareasymboltype() {
  tschchartseriesmixedareasymboltype_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedareasymboltype() const {
  return tschchartseriesmixedareasymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedareasymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareasymboltype)
  return _internal_tschchartseriesmixedareasymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00080000u;
  tschchartseriesmixedareasymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareasymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedareasymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedareasymboltype)
}

// optional int32 tschchartseriesmixedlinesymboltype = 50;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesmixedlinesymboltype() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinesymboltype() const {
  return _internal_has_tschchartseriesmixedlinesymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinesymboltype() {
  tschchartseriesmixedlinesymboltype_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesmixedlinesymboltype() const {
  return tschchartseriesmixedlinesymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedlinesymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinesymboltype)
  return _internal_tschchartseriesmixedlinesymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00100000u;
  tschchartseriesmixedlinesymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinesymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesmixedlinesymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesmixedlinesymboltype)
}

// optional int32 tschchartseriesscattersymboltype = 51;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattersymboltype() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattersymboltype() const {
  return _internal_has_tschchartseriesscattersymboltype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattersymboltype() {
  tschchartseriesscattersymboltype_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesscattersymboltype() const {
  return tschchartseriesscattersymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesscattersymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattersymboltype)
  return _internal_tschchartseriesscattersymboltype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00200000u;
  tschchartseriesscattersymboltype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattersymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscattersymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattersymboltype)
}

// optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsetx() {
  tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return tschchartseriesdefaulttrendlineequationoffsetx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsetx)
  return _internal_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  _has_bits_[1] |= 0x00400000u;
  tschchartseriesdefaulttrendlineequationoffsetx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsetx)
}

// optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineequationoffsety() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsety() const {
  return _internal_has_tschchartseriesdefaulttrendlineequationoffsety();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsety() {
  tschchartseriesdefaulttrendlineequationoffsety_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineequationoffsety() const {
  return tschchartseriesdefaulttrendlineequationoffsety_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsety)
  return _internal_tschchartseriesdefaulttrendlineequationoffsety();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  _has_bits_[1] |= 0x00800000u;
  tschchartseriesdefaulttrendlineequationoffsety_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  _internal_set_tschchartseriesdefaulttrendlineequationoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineequationoffsety)
}

// optional string tschchartseriesdefaulttrendlinelabelstring = 54;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinelabelstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinelabelstring() const {
  return _internal_has_tschchartseriesdefaulttrendlinelabelstring();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinelabelstring() {
  tschchartseriesdefaulttrendlinelabelstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinelabelstring() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  return _internal_tschchartseriesdefaulttrendlinelabelstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinelabelstring(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartseriesdefaulttrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
}
inline std::string* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulttrendlinelabelstring() {
  std::string* _s = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  return _s;
}
inline const std::string& ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinelabelstring() const {
  return tschchartseriesdefaulttrendlinelabelstring_.Get();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinelabelstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartseriesdefaulttrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartSeriesNonStyleArchive::_internal_mutable_tschchartseriesdefaulttrendlinelabelstring() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartseriesdefaulttrendlinelabelstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulttrendlinelabelstring() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
  if (!_internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartseriesdefaulttrendlinelabelstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulttrendlinelabelstring(std::string* tschchartseriesdefaulttrendlinelabelstring) {
  if (tschchartseriesdefaulttrendlinelabelstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartseriesdefaulttrendlinelabelstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartseriesdefaulttrendlinelabelstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring)
}

// optional int32 tschchartseriesdefaulttrendlineorder = 55;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineorder() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineorder() const {
  return _internal_has_tschchartseriesdefaulttrendlineorder();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineorder() {
  tschchartseriesdefaulttrendlineorder_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineorder() const {
  return tschchartseriesdefaulttrendlineorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineorder() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineorder)
  return _internal_tschchartseriesdefaulttrendlineorder();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x01000000u;
  tschchartseriesdefaulttrendlineorder_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlineorder(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineorder)
}

// optional int32 tschchartseriesdefaulttrendlineperiod = 56;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineperiod() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineperiod() const {
  return _internal_has_tschchartseriesdefaulttrendlineperiod();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineperiod() {
  tschchartseriesdefaulttrendlineperiod_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineperiod() const {
  return tschchartseriesdefaulttrendlineperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineperiod() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineperiod)
  return _internal_tschchartseriesdefaulttrendlineperiod();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x02000000u;
  tschchartseriesdefaulttrendlineperiod_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlineperiod(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineperiod)
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsetx() {
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return tschchartseriesdefaulttrendlinersquaredoffsetx_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsetx)
  return _internal_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  _has_bits_[1] |= 0x04000000u;
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsetx)
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return _internal_has_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsety() {
  tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return tschchartseriesdefaulttrendlinersquaredoffsety_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsety)
  return _internal_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  _has_bits_[1] |= 0x08000000u;
  tschchartseriesdefaulttrendlinersquaredoffsety_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  _internal_set_tschchartseriesdefaulttrendlinersquaredoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinersquaredoffsety)
}

// optional bool tschchartseriesdefaulttrendlineshowequation = 59;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowequation() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowequation() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowequation();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowequation() {
  tschchartseriesdefaulttrendlineshowequation_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowequation() const {
  return tschchartseriesdefaulttrendlineshowequation_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowequation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowequation)
  return _internal_tschchartseriesdefaulttrendlineshowequation();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  _has_bits_[1] |= 0x10000000u;
  tschchartseriesdefaulttrendlineshowequation_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowequation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowequation)
}

// optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowlabel() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowlabel() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowlabel();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowlabel() {
  tschchartseriesdefaulttrendlineshowlabel_ = false;
  _has_bits_[1] &= ~0x20000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowlabel() const {
  return tschchartseriesdefaulttrendlineshowlabel_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowlabel)
  return _internal_tschchartseriesdefaulttrendlineshowlabel();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  _has_bits_[1] |= 0x20000000u;
  tschchartseriesdefaulttrendlineshowlabel_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowlabel)
}

// optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlineshowr2value() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowr2value() const {
  return _internal_has_tschchartseriesdefaulttrendlineshowr2value();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowr2value() {
  tschchartseriesdefaulttrendlineshowr2value_ = false;
  _has_bits_[1] &= ~0x40000000u;
}
inline bool ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlineshowr2value() const {
  return tschchartseriesdefaulttrendlineshowr2value_;
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowr2value() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowr2value)
  return _internal_tschchartseriesdefaulttrendlineshowr2value();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  _has_bits_[1] |= 0x40000000u;
  tschchartseriesdefaulttrendlineshowr2value_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  _internal_set_tschchartseriesdefaulttrendlineshowr2value(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlineshowr2value)
}

// optional int32 tschchartseriesdefaulttrendlinetype = 62;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaulttrendlinetype() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinetype() const {
  return _internal_has_tschchartseriesdefaulttrendlinetype();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinetype() {
  tschchartseriesdefaulttrendlinetype_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaulttrendlinetype() const {
  return tschchartseriesdefaulttrendlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinetype)
  return _internal_tschchartseriesdefaulttrendlinetype();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x80000000u;
  tschchartseriesdefaulttrendlinetype_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaulttrendlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinetype)
}

// optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesbubblevaluelabelsaxis() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblevaluelabelsaxis() const {
  return _internal_has_tschchartseriesbubblevaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblevaluelabelsaxis() {
  tschchartseriesbubblevaluelabelsaxis_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesbubblevaluelabelsaxis() const {
  return tschchartseriesbubblevaluelabelsaxis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblevaluelabelsaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblevaluelabelsaxis)
  return _internal_tschchartseriesbubblevaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesbubblevaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000040u;
  tschchartseriesbubblevaluelabelsaxis_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblevaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesbubblevaluelabelsaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesbubblevaluelabelsaxis)
}

// optional int32 tschchartseriesscattervaluelabelsaxis = 68;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesscattervaluelabelsaxis() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattervaluelabelsaxis() const {
  return _internal_has_tschchartseriesscattervaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattervaluelabelsaxis() {
  tschchartseriesscattervaluelabelsaxis_ = 0;
  _has_bits_[2] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesscattervaluelabelsaxis() const {
  return tschchartseriesscattervaluelabelsaxis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesscattervaluelabelsaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattervaluelabelsaxis)
  return _internal_tschchartseriesscattervaluelabelsaxis();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesscattervaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000800u;
  tschchartseriesscattervaluelabelsaxis_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattervaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesscattervaluelabelsaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesscattervaluelabelsaxis)
}

// optional float tschchartseriespiewedgeexplosion = 63;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriespiewedgeexplosion() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespiewedgeexplosion() const {
  return _internal_has_tschchartseriespiewedgeexplosion();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespiewedgeexplosion() {
  tschchartseriespiewedgeexplosion_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float ChartSeriesNonStyleArchive::_internal_tschchartseriespiewedgeexplosion() const {
  return tschchartseriespiewedgeexplosion_;
}
inline float ChartSeriesNonStyleArchive::tschchartseriespiewedgeexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespiewedgeexplosion)
  return _internal_tschchartseriespiewedgeexplosion();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriespiewedgeexplosion(float value) {
  _has_bits_[2] |= 0x00000001u;
  tschchartseriespiewedgeexplosion_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespiewedgeexplosion(float value) {
  _internal_set_tschchartseriespiewedgeexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespiewedgeexplosion)
}

// optional int32 tschchartseriesdefaultyaxisordinal = 64;
inline bool ChartSeriesNonStyleArchive::_internal_has_tschchartseriesdefaultyaxisordinal() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultyaxisordinal() const {
  return _internal_has_tschchartseriesdefaultyaxisordinal();
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultyaxisordinal() {
  tschchartseriesdefaultyaxisordinal_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::_internal_tschchartseriesdefaultyaxisordinal() const {
  return tschchartseriesdefaultyaxisordinal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultyaxisordinal() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultyaxisordinal)
  return _internal_tschchartseriesdefaultyaxisordinal();
}
inline void ChartSeriesNonStyleArchive::_internal_set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000002u;
  tschchartseriesdefaultyaxisordinal_ = value;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesdefaultyaxisordinal(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultyaxisordinal)
}

// -------------------------------------------------------------------

// ReferenceLineStyleArchive

// optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
inline bool ReferenceLineStyleArchive::_internal_has_tschreferencelinedefaultlabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceLineStyleArchive::has_tschreferencelinedefaultlabelparagraphstyleindex() const {
  return _internal_has_tschreferencelinedefaultlabelparagraphstyleindex();
}
inline void ReferenceLineStyleArchive::clear_tschreferencelinedefaultlabelparagraphstyleindex() {
  tschreferencelinedefaultlabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineStyleArchive::_internal_tschreferencelinedefaultlabelparagraphstyleindex() const {
  return tschreferencelinedefaultlabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineStyleArchive::tschreferencelinedefaultlabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultlabelparagraphstyleindex)
  return _internal_tschreferencelinedefaultlabelparagraphstyleindex();
}
inline void ReferenceLineStyleArchive::_internal_set_tschreferencelinedefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  tschreferencelinedefaultlabelparagraphstyleindex_ = value;
}
inline void ReferenceLineStyleArchive::set_tschreferencelinedefaultlabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschreferencelinedefaultlabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultlabelparagraphstyleindex)
}

// optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
inline bool ReferenceLineStyleArchive::_internal_has_tschreferencelinedefaultshadow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschreferencelinedefaultshadow_ != nullptr);
  return value;
}
inline bool ReferenceLineStyleArchive::has_tschreferencelinedefaultshadow() const {
  return _internal_has_tschreferencelinedefaultshadow();
}
inline const ::TSD::ShadowArchive& ReferenceLineStyleArchive::_internal_tschreferencelinedefaultshadow() const {
  const ::TSD::ShadowArchive* p = tschreferencelinedefaultshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ReferenceLineStyleArchive::tschreferencelinedefaultshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultshadow)
  return _internal_tschreferencelinedefaultshadow();
}
inline void ReferenceLineStyleArchive::unsafe_arena_set_allocated_tschreferencelinedefaultshadow(
    ::TSD::ShadowArchive* tschreferencelinedefaultshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultshadow_);
  }
  tschreferencelinedefaultshadow_ = tschreferencelinedefaultshadow;
  if (tschreferencelinedefaultshadow) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultshadow)
}
inline ::TSD::ShadowArchive* ReferenceLineStyleArchive::release_tschreferencelinedefaultshadow() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = tschreferencelinedefaultshadow_;
  tschreferencelinedefaultshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ReferenceLineStyleArchive::unsafe_arena_release_tschreferencelinedefaultshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultshadow)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = tschreferencelinedefaultshadow_;
  tschreferencelinedefaultshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ReferenceLineStyleArchive::_internal_mutable_tschreferencelinedefaultshadow() {
  _has_bits_[0] |= 0x00000002u;
  if (tschreferencelinedefaultshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschreferencelinedefaultshadow_ = p;
  }
  return tschreferencelinedefaultshadow_;
}
inline ::TSD::ShadowArchive* ReferenceLineStyleArchive::mutable_tschreferencelinedefaultshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschreferencelinedefaultshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultshadow)
  return _msg;
}
inline void ReferenceLineStyleArchive::set_allocated_tschreferencelinedefaultshadow(::TSD::ShadowArchive* tschreferencelinedefaultshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultshadow_);
  }
  if (tschreferencelinedefaultshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultshadow));
    if (message_arena != submessage_arena) {
      tschreferencelinedefaultshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschreferencelinedefaultshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschreferencelinedefaultshadow_ = tschreferencelinedefaultshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultshadow)
}

// optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
inline bool ReferenceLineStyleArchive::_internal_has_tschreferencelinedefaultstroke() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschreferencelinedefaultstroke_ != nullptr);
  return value;
}
inline bool ReferenceLineStyleArchive::has_tschreferencelinedefaultstroke() const {
  return _internal_has_tschreferencelinedefaultstroke();
}
inline const ::TSD::StrokeArchive& ReferenceLineStyleArchive::_internal_tschreferencelinedefaultstroke() const {
  const ::TSD::StrokeArchive* p = tschreferencelinedefaultstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ReferenceLineStyleArchive::tschreferencelinedefaultstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultstroke)
  return _internal_tschreferencelinedefaultstroke();
}
inline void ReferenceLineStyleArchive::unsafe_arena_set_allocated_tschreferencelinedefaultstroke(
    ::TSD::StrokeArchive* tschreferencelinedefaultstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultstroke_);
  }
  tschreferencelinedefaultstroke_ = tschreferencelinedefaultstroke;
  if (tschreferencelinedefaultstroke) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultstroke)
}
inline ::TSD::StrokeArchive* ReferenceLineStyleArchive::release_tschreferencelinedefaultstroke() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = tschreferencelinedefaultstroke_;
  tschreferencelinedefaultstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ReferenceLineStyleArchive::unsafe_arena_release_tschreferencelinedefaultstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultstroke)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::StrokeArchive* temp = tschreferencelinedefaultstroke_;
  tschreferencelinedefaultstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ReferenceLineStyleArchive::_internal_mutable_tschreferencelinedefaultstroke() {
  _has_bits_[0] |= 0x00000001u;
  if (tschreferencelinedefaultstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschreferencelinedefaultstroke_ = p;
  }
  return tschreferencelinedefaultstroke_;
}
inline ::TSD::StrokeArchive* ReferenceLineStyleArchive::mutable_tschreferencelinedefaultstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschreferencelinedefaultstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultstroke)
  return _msg;
}
inline void ReferenceLineStyleArchive::set_allocated_tschreferencelinedefaultstroke(::TSD::StrokeArchive* tschreferencelinedefaultstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultstroke_);
  }
  if (tschreferencelinedefaultstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultstroke));
    if (message_arena != submessage_arena) {
      tschreferencelinedefaultstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschreferencelinedefaultstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschreferencelinedefaultstroke_ = tschreferencelinedefaultstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultstroke)
}

// optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
inline bool ReferenceLineStyleArchive::_internal_has_tschreferencelinedefaultvaluelabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferenceLineStyleArchive::has_tschreferencelinedefaultvaluelabelparagraphstyleindex() const {
  return _internal_has_tschreferencelinedefaultvaluelabelparagraphstyleindex();
}
inline void ReferenceLineStyleArchive::clear_tschreferencelinedefaultvaluelabelparagraphstyleindex() {
  tschreferencelinedefaultvaluelabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineStyleArchive::_internal_tschreferencelinedefaultvaluelabelparagraphstyleindex() const {
  return tschreferencelinedefaultvaluelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineStyleArchive::tschreferencelinedefaultvaluelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultvaluelabelparagraphstyleindex)
  return _internal_tschreferencelinedefaultvaluelabelparagraphstyleindex();
}
inline void ReferenceLineStyleArchive::_internal_set_tschreferencelinedefaultvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  tschreferencelinedefaultvaluelabelparagraphstyleindex_ = value;
}
inline void ReferenceLineStyleArchive::set_tschreferencelinedefaultvaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschreferencelinedefaultvaluelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultvaluelabelparagraphstyleindex)
}

// -------------------------------------------------------------------

// ReferenceLineNonStyleArchive

// optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
inline bool ReferenceLineNonStyleArchive::_internal_has_tschreferencelinedefaultcustomvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschreferencelinedefaultcustomvalue_ != nullptr);
  return value;
}
inline bool ReferenceLineNonStyleArchive::has_tschreferencelinedefaultcustomvalue() const {
  return _internal_has_tschreferencelinedefaultcustomvalue();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ReferenceLineNonStyleArchive::_internal_tschreferencelinedefaultcustomvalue() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschreferencelinedefaultcustomvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ReferenceLineNonStyleArchive::tschreferencelinedefaultcustomvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultcustomvalue)
  return _internal_tschreferencelinedefaultcustomvalue();
}
inline void ReferenceLineNonStyleArchive::unsafe_arena_set_allocated_tschreferencelinedefaultcustomvalue(
    ::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinedefaultcustomvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultcustomvalue_);
  }
  tschreferencelinedefaultcustomvalue_ = tschreferencelinedefaultcustomvalue;
  if (tschreferencelinedefaultcustomvalue) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultcustomvalue)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineNonStyleArchive::release_tschreferencelinedefaultcustomvalue() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschreferencelinedefaultcustomvalue_;
  tschreferencelinedefaultcustomvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineNonStyleArchive::unsafe_arena_release_tschreferencelinedefaultcustomvalue() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultcustomvalue)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschreferencelinedefaultcustomvalue_;
  tschreferencelinedefaultcustomvalue_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineNonStyleArchive::_internal_mutable_tschreferencelinedefaultcustomvalue() {
  _has_bits_[0] |= 0x00000002u;
  if (tschreferencelinedefaultcustomvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    tschreferencelinedefaultcustomvalue_ = p;
  }
  return tschreferencelinedefaultcustomvalue_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineNonStyleArchive::mutable_tschreferencelinedefaultcustomvalue() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschreferencelinedefaultcustomvalue();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultcustomvalue)
  return _msg;
}
inline void ReferenceLineNonStyleArchive::set_allocated_tschreferencelinedefaultcustomvalue(::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinedefaultcustomvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultcustomvalue_);
  }
  if (tschreferencelinedefaultcustomvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinedefaultcustomvalue));
    if (message_arena != submessage_arena) {
      tschreferencelinedefaultcustomvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschreferencelinedefaultcustomvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschreferencelinedefaultcustomvalue_ = tschreferencelinedefaultcustomvalue;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultcustomvalue)
}

// optional string tschreferencelinedefaultlabel = 5;
inline bool ReferenceLineNonStyleArchive::_internal_has_tschreferencelinedefaultlabel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferenceLineNonStyleArchive::has_tschreferencelinedefaultlabel() const {
  return _internal_has_tschreferencelinedefaultlabel();
}
inline void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaultlabel() {
  tschreferencelinedefaultlabel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReferenceLineNonStyleArchive::tschreferencelinedefaultlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel)
  return _internal_tschreferencelinedefaultlabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferenceLineNonStyleArchive::set_tschreferencelinedefaultlabel(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschreferencelinedefaultlabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel)
}
inline std::string* ReferenceLineNonStyleArchive::mutable_tschreferencelinedefaultlabel() {
  std::string* _s = _internal_mutable_tschreferencelinedefaultlabel();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel)
  return _s;
}
inline const std::string& ReferenceLineNonStyleArchive::_internal_tschreferencelinedefaultlabel() const {
  return tschreferencelinedefaultlabel_.Get();
}
inline void ReferenceLineNonStyleArchive::_internal_set_tschreferencelinedefaultlabel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschreferencelinedefaultlabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReferenceLineNonStyleArchive::_internal_mutable_tschreferencelinedefaultlabel() {
  _has_bits_[0] |= 0x00000001u;
  return tschreferencelinedefaultlabel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReferenceLineNonStyleArchive::release_tschreferencelinedefaultlabel() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel)
  if (!_internal_has_tschreferencelinedefaultlabel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschreferencelinedefaultlabel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReferenceLineNonStyleArchive::set_allocated_tschreferencelinedefaultlabel(std::string* tschreferencelinedefaultlabel) {
  if (tschreferencelinedefaultlabel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschreferencelinedefaultlabel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschreferencelinedefaultlabel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel)
}

// optional bool tschreferencelinedefaultshowlabel = 3;
inline bool ReferenceLineNonStyleArchive::_internal_has_tschreferencelinedefaultshowlabel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferenceLineNonStyleArchive::has_tschreferencelinedefaultshowlabel() const {
  return _internal_has_tschreferencelinedefaultshowlabel();
}
inline void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaultshowlabel() {
  tschreferencelinedefaultshowlabel_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReferenceLineNonStyleArchive::_internal_tschreferencelinedefaultshowlabel() const {
  return tschreferencelinedefaultshowlabel_;
}
inline bool ReferenceLineNonStyleArchive::tschreferencelinedefaultshowlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultshowlabel)
  return _internal_tschreferencelinedefaultshowlabel();
}
inline void ReferenceLineNonStyleArchive::_internal_set_tschreferencelinedefaultshowlabel(bool value) {
  _has_bits_[0] |= 0x00000008u;
  tschreferencelinedefaultshowlabel_ = value;
}
inline void ReferenceLineNonStyleArchive::set_tschreferencelinedefaultshowlabel(bool value) {
  _internal_set_tschreferencelinedefaultshowlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultshowlabel)
}

// optional bool tschreferencelinedefaultshowline = 2;
inline bool ReferenceLineNonStyleArchive::_internal_has_tschreferencelinedefaultshowline() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReferenceLineNonStyleArchive::has_tschreferencelinedefaultshowline() const {
  return _internal_has_tschreferencelinedefaultshowline();
}
inline void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaultshowline() {
  tschreferencelinedefaultshowline_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ReferenceLineNonStyleArchive::_internal_tschreferencelinedefaultshowline() const {
  return tschreferencelinedefaultshowline_;
}
inline bool ReferenceLineNonStyleArchive::tschreferencelinedefaultshowline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultshowline)
  return _internal_tschreferencelinedefaultshowline();
}
inline void ReferenceLineNonStyleArchive::_internal_set_tschreferencelinedefaultshowline(bool value) {
  _has_bits_[0] |= 0x00000010u;
  tschreferencelinedefaultshowline_ = value;
}
inline void ReferenceLineNonStyleArchive::set_tschreferencelinedefaultshowline(bool value) {
  _internal_set_tschreferencelinedefaultshowline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultshowline)
}

// optional bool tschreferencelinedefaultshowvaluelabel = 4;
inline bool ReferenceLineNonStyleArchive::_internal_has_tschreferencelinedefaultshowvaluelabel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReferenceLineNonStyleArchive::has_tschreferencelinedefaultshowvaluelabel() const {
  return _internal_has_tschreferencelinedefaultshowvaluelabel();
}
inline void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaultshowvaluelabel() {
  tschreferencelinedefaultshowvaluelabel_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ReferenceLineNonStyleArchive::_internal_tschreferencelinedefaultshowvaluelabel() const {
  return tschreferencelinedefaultshowvaluelabel_;
}
inline bool ReferenceLineNonStyleArchive::tschreferencelinedefaultshowvaluelabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultshowvaluelabel)
  return _internal_tschreferencelinedefaultshowvaluelabel();
}
inline void ReferenceLineNonStyleArchive::_internal_set_tschreferencelinedefaultshowvaluelabel(bool value) {
  _has_bits_[0] |= 0x00000020u;
  tschreferencelinedefaultshowvaluelabel_ = value;
}
inline void ReferenceLineNonStyleArchive::set_tschreferencelinedefaultshowvaluelabel(bool value) {
  _internal_set_tschreferencelinedefaultshowvaluelabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultshowvaluelabel)
}

// optional int32 tschreferencelinedefaulttype = 1;
inline bool ReferenceLineNonStyleArchive::_internal_has_tschreferencelinedefaulttype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceLineNonStyleArchive::has_tschreferencelinedefaulttype() const {
  return _internal_has_tschreferencelinedefaulttype();
}
inline void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaulttype() {
  tschreferencelinedefaulttype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineNonStyleArchive::_internal_tschreferencelinedefaulttype() const {
  return tschreferencelinedefaulttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineNonStyleArchive::tschreferencelinedefaulttype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaulttype)
  return _internal_tschreferencelinedefaulttype();
}
inline void ReferenceLineNonStyleArchive::_internal_set_tschreferencelinedefaulttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  tschreferencelinedefaulttype_ = value;
}
inline void ReferenceLineNonStyleArchive::set_tschreferencelinedefaulttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschreferencelinedefaulttype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaulttype)
}

// -------------------------------------------------------------------

// ChartGenericPropertyMapArchive

// optional int32 tschchartinfo3dbarshape = 1;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dbarshape() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dbarshape() const {
  return _internal_has_tschchartinfo3dbarshape();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dbarshape() {
  tschchartinfo3dbarshape_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::_internal_tschchartinfo3dbarshape() const {
  return tschchartinfo3dbarshape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::tschchartinfo3dbarshape() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dbarshape)
  return _internal_tschchartinfo3dbarshape();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfo3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  tschchartinfo3dbarshape_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dbarshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfo3dbarshape(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dbarshape)
}

// optional bool tschchartinfo3dbeveledges = 2;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dbeveledges() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dbeveledges() const {
  return _internal_has_tschchartinfo3dbeveledges();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dbeveledges() {
  tschchartinfo3dbeveledges_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfo3dbeveledges() const {
  return tschchartinfo3dbeveledges_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfo3dbeveledges() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dbeveledges)
  return _internal_tschchartinfo3dbeveledges();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfo3dbeveledges(bool value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartinfo3dbeveledges_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dbeveledges(bool value) {
  _internal_set_tschchartinfo3dbeveledges(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dbeveledges)
}

// optional float tschchartinfo3dchartopacity = 3;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dchartopacity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dchartopacity() const {
  return _internal_has_tschchartinfo3dchartopacity();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dchartopacity() {
  tschchartinfo3dchartopacity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfo3dchartopacity() const {
  return tschchartinfo3dchartopacity_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfo3dchartopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dchartopacity)
  return _internal_tschchartinfo3dchartopacity();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfo3dchartopacity(float value) {
  _has_bits_[0] |= 0x00001000u;
  tschchartinfo3dchartopacity_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dchartopacity(float value) {
  _internal_set_tschchartinfo3dchartopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dchartopacity)
}

// optional float tschchartinfo3dintersetdepthgap = 4;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dintersetdepthgap() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dintersetdepthgap() const {
  return _internal_has_tschchartinfo3dintersetdepthgap();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dintersetdepthgap() {
  tschchartinfo3dintersetdepthgap_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfo3dintersetdepthgap() const {
  return tschchartinfo3dintersetdepthgap_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfo3dintersetdepthgap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dintersetdepthgap)
  return _internal_tschchartinfo3dintersetdepthgap();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfo3dintersetdepthgap(float value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartinfo3dintersetdepthgap_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dintersetdepthgap(float value) {
  _internal_set_tschchartinfo3dintersetdepthgap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dintersetdepthgap)
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dlightingpackage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfo3dlightingpackage_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dlightingpackage() const {
  return _internal_has_tschchartinfo3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfo3dlightingpackage() const {
  const ::TSCH::Chart3DLightingPackageArchive* p = tschchartinfo3dlightingpackage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DLightingPackageArchive&>(
      ::TSCH::_Chart3DLightingPackageArchive_default_instance_);
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartGenericPropertyMapArchive::tschchartinfo3dlightingpackage() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dlightingpackage)
  return _internal_tschchartinfo3dlightingpackage();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfo3dlightingpackage(
    ::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dlightingpackage_);
  }
  tschchartinfo3dlightingpackage_ = tschchartinfo3dlightingpackage;
  if (tschchartinfo3dlightingpackage) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dlightingpackage)
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3dlightingpackage() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfo3dlightingpackage_;
  tschchartinfo3dlightingpackage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfo3dlightingpackage() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dlightingpackage)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfo3dlightingpackage_;
  tschchartinfo3dlightingpackage_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfo3dlightingpackage() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartinfo3dlightingpackage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DLightingPackageArchive>(GetArenaForAllocation());
    tschchartinfo3dlightingpackage_ = p;
  }
  return tschchartinfo3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3dlightingpackage() {
  ::TSCH::Chart3DLightingPackageArchive* _msg = _internal_mutable_tschchartinfo3dlightingpackage();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dlightingpackage)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dlightingpackage_);
  }
  if (tschchartinfo3dlightingpackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dlightingpackage));
    if (message_arena != submessage_arena) {
      tschchartinfo3dlightingpackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfo3dlightingpackage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartinfo3dlightingpackage_ = tschchartinfo3dlightingpackage;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dlightingpackage)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3drotation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfo3drotation_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3drotation() const {
  return _internal_has_tschchartinfo3drotation();
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfo3drotation() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfo3drotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::tschchartinfo3drotation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3drotation)
  return _internal_tschchartinfo3drotation();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfo3drotation(
    ::TSCH::Chart3DVectorArchive* tschchartinfo3drotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3drotation_);
  }
  tschchartinfo3drotation_ = tschchartinfo3drotation;
  if (tschchartinfo3drotation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3drotation)
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3drotation() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3drotation_;
  tschchartinfo3drotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfo3drotation() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3drotation)
  _has_bits_[0] &= ~0x00000004u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3drotation_;
  tschchartinfo3drotation_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfo3drotation() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartinfo3drotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfo3drotation_ = p;
  }
  return tschchartinfo3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3drotation() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfo3drotation();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3drotation)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3drotation(::TSCH::Chart3DVectorArchive* tschchartinfo3drotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3drotation_);
  }
  if (tschchartinfo3drotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3drotation));
    if (message_arena != submessage_arena) {
      tschchartinfo3drotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfo3drotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartinfo3drotation_ = tschchartinfo3drotation;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3drotation)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dscale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfo3dscale_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dscale() const {
  return _internal_has_tschchartinfo3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfo3dscale() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfo3dscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::tschchartinfo3dscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dscale)
  return _internal_tschchartinfo3dscale();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfo3dscale(
    ::TSCH::Chart3DVectorArchive* tschchartinfo3dscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dscale_);
  }
  tschchartinfo3dscale_ = tschchartinfo3dscale;
  if (tschchartinfo3dscale) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dscale)
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3dscale() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3dscale_;
  tschchartinfo3dscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfo3dscale() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dscale)
  _has_bits_[0] &= ~0x00000008u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3dscale_;
  tschchartinfo3dscale_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfo3dscale() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartinfo3dscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfo3dscale_ = p;
  }
  return tschchartinfo3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3dscale() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfo3dscale();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dscale)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3dscale(::TSCH::Chart3DVectorArchive* tschchartinfo3dscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dscale_);
  }
  if (tschchartinfo3dscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dscale));
    if (message_arena != submessage_arena) {
      tschchartinfo3dscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfo3dscale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartinfo3dscale_ = tschchartinfo3dscale;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dscale)
}

// optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfo3dviewport() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfo3dviewport_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dviewport() const {
  return _internal_has_tschchartinfo3dviewport();
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfo3dviewport() const {
  const ::TSCH::Chart3DVectorArchive* p = tschchartinfo3dviewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::Chart3DVectorArchive&>(
      ::TSCH::_Chart3DVectorArchive_default_instance_);
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::tschchartinfo3dviewport() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dviewport)
  return _internal_tschchartinfo3dviewport();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfo3dviewport(
    ::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dviewport_);
  }
  tschchartinfo3dviewport_ = tschchartinfo3dviewport;
  if (tschchartinfo3dviewport) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dviewport)
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3dviewport() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3dviewport_;
  tschchartinfo3dviewport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfo3dviewport() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dviewport)
  _has_bits_[0] &= ~0x00000010u;
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3dviewport_;
  tschchartinfo3dviewport_ = nullptr;
  return temp;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfo3dviewport() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartinfo3dviewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::Chart3DVectorArchive>(GetArenaForAllocation());
    tschchartinfo3dviewport_ = p;
  }
  return tschchartinfo3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3dviewport() {
  ::TSCH::Chart3DVectorArchive* _msg = _internal_mutable_tschchartinfo3dviewport();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dviewport)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dviewport_);
  }
  if (tschchartinfo3dviewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfo3dviewport));
    if (message_arena != submessage_arena) {
      tschchartinfo3dviewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfo3dviewport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartinfo3dviewport_ = tschchartinfo3dviewport;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dviewport)
}

// optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfobackgroundfill() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobackgroundfill_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfobackgroundfill() const {
  return _internal_has_tschchartinfobackgroundfill();
}
inline const ::TSD::FillArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfobackgroundfill() const {
  const ::TSD::FillArchive* p = tschchartinfobackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartGenericPropertyMapArchive::tschchartinfobackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundfill)
  return _internal_tschchartinfobackgroundfill();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfobackgroundfill(
    ::TSD::FillArchive* tschchartinfobackgroundfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobackgroundfill_);
  }
  tschchartinfobackgroundfill_ = tschchartinfobackgroundfill;
  if (tschchartinfobackgroundfill) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundfill)
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::release_tschchartinfobackgroundfill() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = tschchartinfobackgroundfill_;
  tschchartinfobackgroundfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfobackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundfill)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::FillArchive* temp = tschchartinfobackgroundfill_;
  tschchartinfobackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfobackgroundfill() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartinfobackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartinfobackgroundfill_ = p;
  }
  return tschchartinfobackgroundfill_;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfobackgroundfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartinfobackgroundfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundfill)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfobackgroundfill(::TSD::FillArchive* tschchartinfobackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobackgroundfill_);
  }
  if (tschchartinfobackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobackgroundfill));
    if (message_arena != submessage_arena) {
      tschchartinfobackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobackgroundfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartinfobackgroundfill_ = tschchartinfobackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundfill)
}

// optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfobackgroundstroke() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobackgroundstroke_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfobackgroundstroke() const {
  return _internal_has_tschchartinfobackgroundstroke();
}
inline const ::TSD::StrokeArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfobackgroundstroke() const {
  const ::TSD::StrokeArchive* p = tschchartinfobackgroundstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartGenericPropertyMapArchive::tschchartinfobackgroundstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundstroke)
  return _internal_tschchartinfobackgroundstroke();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfobackgroundstroke(
    ::TSD::StrokeArchive* tschchartinfobackgroundstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobackgroundstroke_);
  }
  tschchartinfobackgroundstroke_ = tschchartinfobackgroundstroke;
  if (tschchartinfobackgroundstroke) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundstroke)
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::release_tschchartinfobackgroundstroke() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartinfobackgroundstroke_;
  tschchartinfobackgroundstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfobackgroundstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundstroke)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::StrokeArchive* temp = tschchartinfobackgroundstroke_;
  tschchartinfobackgroundstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfobackgroundstroke() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartinfobackgroundstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartinfobackgroundstroke_ = p;
  }
  return tschchartinfobackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfobackgroundstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartinfobackgroundstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundstroke)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfobackgroundstroke(::TSD::StrokeArchive* tschchartinfobackgroundstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobackgroundstroke_);
  }
  if (tschchartinfobackgroundstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobackgroundstroke));
    if (message_arena != submessage_arena) {
      tschchartinfobackgroundstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobackgroundstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartinfobackgroundstroke_ = tschchartinfobackgroundstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundstroke)
}

// optional float tschchartinfoborderopacity = 11;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoborderopacity() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoborderopacity() const {
  return _internal_has_tschchartinfoborderopacity();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoborderopacity() {
  tschchartinfoborderopacity_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfoborderopacity() const {
  return tschchartinfoborderopacity_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfoborderopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderopacity)
  return _internal_tschchartinfoborderopacity();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfoborderopacity(float value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartinfoborderopacity_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoborderopacity(float value) {
  _internal_set_tschchartinfoborderopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderopacity)
}

// optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfobordershadow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfobordershadow_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfobordershadow() const {
  return _internal_has_tschchartinfobordershadow();
}
inline const ::TSD::ShadowArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfobordershadow() const {
  const ::TSD::ShadowArchive* p = tschchartinfobordershadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartGenericPropertyMapArchive::tschchartinfobordershadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobordershadow)
  return _internal_tschchartinfobordershadow();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfobordershadow(
    ::TSD::ShadowArchive* tschchartinfobordershadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobordershadow_);
  }
  tschchartinfobordershadow_ = tschchartinfobordershadow;
  if (tschchartinfobordershadow) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobordershadow)
}
inline ::TSD::ShadowArchive* ChartGenericPropertyMapArchive::release_tschchartinfobordershadow() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartinfobordershadow_;
  tschchartinfobordershadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfobordershadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobordershadow)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::ShadowArchive* temp = tschchartinfobordershadow_;
  tschchartinfobordershadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfobordershadow() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartinfobordershadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartinfobordershadow_ = p;
  }
  return tschchartinfobordershadow_;
}
inline ::TSD::ShadowArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfobordershadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartinfobordershadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobordershadow)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfobordershadow(::TSD::ShadowArchive* tschchartinfobordershadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobordershadow_);
  }
  if (tschchartinfobordershadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfobordershadow));
    if (message_arena != submessage_arena) {
      tschchartinfobordershadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfobordershadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartinfobordershadow_ = tschchartinfobordershadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobordershadow)
}

// optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoborderstroke() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfoborderstroke_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoborderstroke() const {
  return _internal_has_tschchartinfoborderstroke();
}
inline const ::TSD::StrokeArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfoborderstroke() const {
  const ::TSD::StrokeArchive* p = tschchartinfoborderstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartGenericPropertyMapArchive::tschchartinfoborderstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderstroke)
  return _internal_tschchartinfoborderstroke();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfoborderstroke(
    ::TSD::StrokeArchive* tschchartinfoborderstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoborderstroke_);
  }
  tschchartinfoborderstroke_ = tschchartinfoborderstroke;
  if (tschchartinfoborderstroke) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderstroke)
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::release_tschchartinfoborderstroke() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = tschchartinfoborderstroke_;
  tschchartinfoborderstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfoborderstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderstroke)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::StrokeArchive* temp = tschchartinfoborderstroke_;
  tschchartinfoborderstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfoborderstroke() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartinfoborderstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartinfoborderstroke_ = p;
  }
  return tschchartinfoborderstroke_;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfoborderstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartinfoborderstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderstroke)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfoborderstroke(::TSD::StrokeArchive* tschchartinfoborderstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoborderstroke_);
  }
  if (tschchartinfoborderstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfoborderstroke));
    if (message_arena != submessage_arena) {
      tschchartinfoborderstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfoborderstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartinfoborderstroke_ = tschchartinfoborderstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderstroke)
}

// optional int32 tschchartinfocalloutlinetype = 14;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfocalloutlinetype() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfocalloutlinetype() const {
  return _internal_has_tschchartinfocalloutlinetype();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfocalloutlinetype() {
  tschchartinfocalloutlinetype_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::_internal_tschchartinfocalloutlinetype() const {
  return tschchartinfocalloutlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::tschchartinfocalloutlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfocalloutlinetype)
  return _internal_tschchartinfocalloutlinetype();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfocalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartinfocalloutlinetype_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfocalloutlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfocalloutlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfocalloutlinetype)
}

// optional bool tschchartinfocombinelayers = 15;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfocombinelayers() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfocombinelayers() const {
  return _internal_has_tschchartinfocombinelayers();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfocombinelayers() {
  tschchartinfocombinelayers_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfocombinelayers() const {
  return tschchartinfocombinelayers_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfocombinelayers() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfocombinelayers)
  return _internal_tschchartinfocombinelayers();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfocombinelayers(bool value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartinfocombinelayers_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfocombinelayers(bool value) {
  _internal_set_tschchartinfocombinelayers(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfocombinelayers)
}

// optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfodeprecatedroundedcornerouterendonly() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodeprecatedroundedcornerouterendonly() const {
  return _internal_has_tschchartinfodeprecatedroundedcornerouterendonly();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodeprecatedroundedcornerouterendonly() {
  tschchartinfodeprecatedroundedcornerouterendonly_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfodeprecatedroundedcornerouterendonly() const {
  return tschchartinfodeprecatedroundedcornerouterendonly_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfodeprecatedroundedcornerouterendonly() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodeprecatedroundedcornerouterendonly)
  return _internal_tschchartinfodeprecatedroundedcornerouterendonly();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfodeprecatedroundedcornerouterendonly(bool value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartinfodeprecatedroundedcornerouterendonly_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodeprecatedroundedcornerouterendonly(bool value) {
  _internal_set_tschchartinfodeprecatedroundedcornerouterendonly(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodeprecatedroundedcornerouterendonly)
}

// optional float tschchartinfodeprecatedroundedcornerradius = 17;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfodeprecatedroundedcornerradius() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodeprecatedroundedcornerradius() const {
  return _internal_has_tschchartinfodeprecatedroundedcornerradius();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodeprecatedroundedcornerradius() {
  tschchartinfodeprecatedroundedcornerradius_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfodeprecatedroundedcornerradius() const {
  return tschchartinfodeprecatedroundedcornerradius_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfodeprecatedroundedcornerradius() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodeprecatedroundedcornerradius)
  return _internal_tschchartinfodeprecatedroundedcornerradius();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfodeprecatedroundedcornerradius(float value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartinfodeprecatedroundedcornerradius_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodeprecatedroundedcornerradius(float value) {
  _internal_set_tschchartinfodeprecatedroundedcornerradius(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodeprecatedroundedcornerradius)
}

// optional int32 tschchartinfodatasetnamelocation = 18;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfodatasetnamelocation() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodatasetnamelocation() const {
  return _internal_has_tschchartinfodatasetnamelocation();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodatasetnamelocation() {
  tschchartinfodatasetnamelocation_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::_internal_tschchartinfodatasetnamelocation() const {
  return tschchartinfodatasetnamelocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::tschchartinfodatasetnamelocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodatasetnamelocation)
  return _internal_tschchartinfodatasetnamelocation();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfodatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartinfodatasetnamelocation_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodatasetnamelocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodatasetnamelocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodatasetnamelocation)
}

// optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfodatasetnameparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodatasetnameparagraphstyleindex() const {
  return _internal_has_tschchartinfodatasetnameparagraphstyleindex();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodatasetnameparagraphstyleindex() {
  tschchartinfodatasetnameparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::_internal_tschchartinfodatasetnameparagraphstyleindex() const {
  return tschchartinfodatasetnameparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::tschchartinfodatasetnameparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodatasetnameparagraphstyleindex)
  return _internal_tschchartinfodatasetnameparagraphstyleindex();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfodatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartinfodatasetnameparagraphstyleindex_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodatasetnameparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfodatasetnameparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodatasetnameparagraphstyleindex)
}

// optional bool tschchartinfodonutplacetitleatcenter = 20;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfodonutplacetitleatcenter() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodonutplacetitleatcenter() const {
  return _internal_has_tschchartinfodonutplacetitleatcenter();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodonutplacetitleatcenter() {
  tschchartinfodonutplacetitleatcenter_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfodonutplacetitleatcenter() const {
  return tschchartinfodonutplacetitleatcenter_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfodonutplacetitleatcenter() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodonutplacetitleatcenter)
  return _internal_tschchartinfodonutplacetitleatcenter();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfodonutplacetitleatcenter(bool value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartinfodonutplacetitleatcenter_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodonutplacetitleatcenter(bool value) {
  _internal_set_tschchartinfodonutplacetitleatcenter(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfodonutplacetitleatcenter)
}

// optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfogridbackgroundfill() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfogridbackgroundfill_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfogridbackgroundfill() const {
  return _internal_has_tschchartinfogridbackgroundfill();
}
inline const ::TSD::FillArchive& ChartGenericPropertyMapArchive::_internal_tschchartinfogridbackgroundfill() const {
  const ::TSD::FillArchive* p = tschchartinfogridbackgroundfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartGenericPropertyMapArchive::tschchartinfogridbackgroundfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundfill)
  return _internal_tschchartinfogridbackgroundfill();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfogridbackgroundfill(
    ::TSD::FillArchive* tschchartinfogridbackgroundfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfogridbackgroundfill_);
  }
  tschchartinfogridbackgroundfill_ = tschchartinfogridbackgroundfill;
  if (tschchartinfogridbackgroundfill) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundfill)
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::release_tschchartinfogridbackgroundfill() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::FillArchive* temp = tschchartinfogridbackgroundfill_;
  tschchartinfogridbackgroundfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfogridbackgroundfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundfill)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::FillArchive* temp = tschchartinfogridbackgroundfill_;
  tschchartinfogridbackgroundfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfogridbackgroundfill() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartinfogridbackgroundfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartinfogridbackgroundfill_ = p;
  }
  return tschchartinfogridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfogridbackgroundfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartinfogridbackgroundfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundfill)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfogridbackgroundfill(::TSD::FillArchive* tschchartinfogridbackgroundfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfogridbackgroundfill_);
  }
  if (tschchartinfogridbackgroundfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfogridbackgroundfill));
    if (message_arena != submessage_arena) {
      tschchartinfogridbackgroundfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfogridbackgroundfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartinfogridbackgroundfill_ = tschchartinfogridbackgroundfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundfill)
}

// optional float tschchartinfogridbackgroundopacity = 22;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfogridbackgroundopacity() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfogridbackgroundopacity() const {
  return _internal_has_tschchartinfogridbackgroundopacity();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfogridbackgroundopacity() {
  tschchartinfogridbackgroundopacity_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfogridbackgroundopacity() const {
  return tschchartinfogridbackgroundopacity_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfogridbackgroundopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundopacity)
  return _internal_tschchartinfogridbackgroundopacity();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfogridbackgroundopacity(float value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartinfogridbackgroundopacity_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfogridbackgroundopacity(float value) {
  _internal_set_tschchartinfogridbackgroundopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundopacity)
}

// optional float tschchartinfoinnerradius = 23;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoinnerradius() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoinnerradius() const {
  return _internal_has_tschchartinfoinnerradius();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoinnerradius() {
  tschchartinfoinnerradius_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfoinnerradius() const {
  return tschchartinfoinnerradius_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfoinnerradius() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoinnerradius)
  return _internal_tschchartinfoinnerradius();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfoinnerradius(float value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartinfoinnerradius_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoinnerradius(float value) {
  _internal_set_tschchartinfoinnerradius(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoinnerradius)
}

// optional float tschchartinfointerbargap = 24;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfointerbargap() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfointerbargap() const {
  return _internal_has_tschchartinfointerbargap();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfointerbargap() {
  tschchartinfointerbargap_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfointerbargap() const {
  return tschchartinfointerbargap_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfointerbargap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfointerbargap)
  return _internal_tschchartinfointerbargap();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfointerbargap(float value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartinfointerbargap_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfointerbargap(float value) {
  _internal_set_tschchartinfointerbargap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfointerbargap)
}

// optional float tschchartinfointersetgap = 25;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfointersetgap() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfointersetgap() const {
  return _internal_has_tschchartinfointersetgap();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfointersetgap() {
  tschchartinfointersetgap_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfointersetgap() const {
  return tschchartinfointersetgap_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfointersetgap() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfointersetgap)
  return _internal_tschchartinfointersetgap();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfointersetgap(float value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartinfointersetgap_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfointersetgap(float value) {
  _internal_set_tschchartinfointersetgap(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfointersetgap)
}

// optional int32 tschchartinfomultidatacontroltype = 26;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfomultidatacontroltype() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfomultidatacontroltype() const {
  return _internal_has_tschchartinfomultidatacontroltype();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfomultidatacontroltype() {
  tschchartinfomultidatacontroltype_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::_internal_tschchartinfomultidatacontroltype() const {
  return tschchartinfomultidatacontroltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::tschchartinfomultidatacontroltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfomultidatacontroltype)
  return _internal_tschchartinfomultidatacontroltype();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfomultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartinfomultidatacontroltype_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfomultidatacontroltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfomultidatacontroltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfomultidatacontroltype)
}

// optional float tschchartinfopiestartangle = 27;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfopiestartangle() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfopiestartangle() const {
  return _internal_has_tschchartinfopiestartangle();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfopiestartangle() {
  tschchartinfopiestartangle_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinfopiestartangle() const {
  return tschchartinfopiestartangle_;
}
inline float ChartGenericPropertyMapArchive::tschchartinfopiestartangle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfopiestartangle)
  return _internal_tschchartinfopiestartangle();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfopiestartangle(float value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartinfopiestartangle_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfopiestartangle(float value) {
  _internal_set_tschchartinfopiestartangle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfopiestartangle)
}

// optional bool tschchartinforoundedcornerouterendonly = 28;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinforoundedcornerouterendonly() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinforoundedcornerouterendonly() const {
  return _internal_has_tschchartinforoundedcornerouterendonly();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinforoundedcornerouterendonly() {
  tschchartinforoundedcornerouterendonly_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinforoundedcornerouterendonly() const {
  return tschchartinforoundedcornerouterendonly_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinforoundedcornerouterendonly() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinforoundedcornerouterendonly)
  return _internal_tschchartinforoundedcornerouterendonly();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinforoundedcornerouterendonly(bool value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartinforoundedcornerouterendonly_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinforoundedcornerouterendonly(bool value) {
  _internal_set_tschchartinforoundedcornerouterendonly(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinforoundedcornerouterendonly)
}

// optional float tschchartinforoundedcornerradius = 29;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinforoundedcornerradius() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinforoundedcornerradius() const {
  return _internal_has_tschchartinforoundedcornerradius();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinforoundedcornerradius() {
  tschchartinforoundedcornerradius_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float ChartGenericPropertyMapArchive::_internal_tschchartinforoundedcornerradius() const {
  return tschchartinforoundedcornerradius_;
}
inline float ChartGenericPropertyMapArchive::tschchartinforoundedcornerradius() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinforoundedcornerradius)
  return _internal_tschchartinforoundedcornerradius();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinforoundedcornerradius(float value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartinforoundedcornerradius_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinforoundedcornerradius(float value) {
  _internal_set_tschchartinforoundedcornerradius(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinforoundedcornerradius)
}

// optional bool tschchartinfoshowborder = 30;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoshowborder() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoshowborder() const {
  return _internal_has_tschchartinfoshowborder();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoshowborder() {
  tschchartinfoshowborder_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfoshowborder() const {
  return tschchartinfoshowborder_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoshowborder() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoshowborder)
  return _internal_tschchartinfoshowborder();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfoshowborder(bool value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartinfoshowborder_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoshowborder(bool value) {
  _internal_set_tschchartinfoshowborder(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoshowborder)
}

// optional bool tschchartinfoshowlegend = 31;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoshowlegend() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoshowlegend() const {
  return _internal_has_tschchartinfoshowlegend();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoshowlegend() {
  tschchartinfoshowlegend_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfoshowlegend() const {
  return tschchartinfoshowlegend_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoshowlegend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoshowlegend)
  return _internal_tschchartinfoshowlegend();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfoshowlegend(bool value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartinfoshowlegend_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoshowlegend(bool value) {
  _internal_set_tschchartinfoshowlegend(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoshowlegend)
}

// optional bool tschchartinfoshowtitle = 32;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoshowtitle() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoshowtitle() const {
  return _internal_has_tschchartinfoshowtitle();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoshowtitle() {
  tschchartinfoshowtitle_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfoshowtitle() const {
  return tschchartinfoshowtitle_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoshowtitle)
  return _internal_tschchartinfoshowtitle();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfoshowtitle(bool value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartinfoshowtitle_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoshowtitle(bool value) {
  _internal_set_tschchartinfoshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoshowtitle)
}

// optional bool tschchartinfoskiphiddendata = 33;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfoskiphiddendata() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoskiphiddendata() const {
  return _internal_has_tschchartinfoskiphiddendata();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoskiphiddendata() {
  tschchartinfoskiphiddendata_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ChartGenericPropertyMapArchive::_internal_tschchartinfoskiphiddendata() const {
  return tschchartinfoskiphiddendata_;
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoskiphiddendata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoskiphiddendata)
  return _internal_tschchartinfoskiphiddendata();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfoskiphiddendata(bool value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartinfoskiphiddendata_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoskiphiddendata(bool value) {
  _internal_set_tschchartinfoskiphiddendata(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoskiphiddendata)
}

// optional .TSP.Color tschchartinfotitlecolor = 34;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfotitlecolor() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartinfotitlecolor_ != nullptr);
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfotitlecolor() const {
  return _internal_has_tschchartinfotitlecolor();
}
inline const ::TSP::Color& ChartGenericPropertyMapArchive::_internal_tschchartinfotitlecolor() const {
  const ::TSP::Color* p = tschchartinfotitlecolor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& ChartGenericPropertyMapArchive::tschchartinfotitlecolor() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitlecolor)
  return _internal_tschchartinfotitlecolor();
}
inline void ChartGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartinfotitlecolor(
    ::TSP::Color* tschchartinfotitlecolor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfotitlecolor_);
  }
  tschchartinfotitlecolor_ = tschchartinfotitlecolor;
  if (tschchartinfotitlecolor) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitlecolor)
}
inline ::TSP::Color* ChartGenericPropertyMapArchive::release_tschchartinfotitlecolor() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Color* temp = tschchartinfotitlecolor_;
  tschchartinfotitlecolor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Color* ChartGenericPropertyMapArchive::unsafe_arena_release_tschchartinfotitlecolor() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitlecolor)
  _has_bits_[0] &= ~0x00000400u;
  ::TSP::Color* temp = tschchartinfotitlecolor_;
  tschchartinfotitlecolor_ = nullptr;
  return temp;
}
inline ::TSP::Color* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfotitlecolor() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartinfotitlecolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArenaForAllocation());
    tschchartinfotitlecolor_ = p;
  }
  return tschchartinfotitlecolor_;
}
inline ::TSP::Color* ChartGenericPropertyMapArchive::mutable_tschchartinfotitlecolor() {
  ::TSP::Color* _msg = _internal_mutable_tschchartinfotitlecolor();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitlecolor)
  return _msg;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfotitlecolor(::TSP::Color* tschchartinfotitlecolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfotitlecolor_);
  }
  if (tschchartinfotitlecolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartinfotitlecolor));
    if (message_arena != submessage_arena) {
      tschchartinfotitlecolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartinfotitlecolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartinfotitlecolor_ = tschchartinfotitlecolor;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitlecolor)
}

// optional string tschchartinfotitle = 35;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfotitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfotitle() const {
  return _internal_has_tschchartinfotitle();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfotitle() {
  tschchartinfotitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartGenericPropertyMapArchive::tschchartinfotitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle)
  return _internal_tschchartinfotitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartGenericPropertyMapArchive::set_tschchartinfotitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartinfotitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle)
}
inline std::string* ChartGenericPropertyMapArchive::mutable_tschchartinfotitle() {
  std::string* _s = _internal_mutable_tschchartinfotitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle)
  return _s;
}
inline const std::string& ChartGenericPropertyMapArchive::_internal_tschchartinfotitle() const {
  return tschchartinfotitle_.Get();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfotitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartinfotitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartGenericPropertyMapArchive::_internal_mutable_tschchartinfotitle() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartinfotitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartGenericPropertyMapArchive::release_tschchartinfotitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle)
  if (!_internal_has_tschchartinfotitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartinfotitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfotitle(std::string* tschchartinfotitle) {
  if (tschchartinfotitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartinfotitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartinfotitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle)
}

// optional int32 tschchartinfotitleparagraphstyleindex = 36;
inline bool ChartGenericPropertyMapArchive::_internal_has_tschchartinfotitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartGenericPropertyMapArchive::has_tschchartinfotitleparagraphstyleindex() const {
  return _internal_has_tschchartinfotitleparagraphstyleindex();
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfotitleparagraphstyleindex() {
  tschchartinfotitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::_internal_tschchartinfotitleparagraphstyleindex() const {
  return tschchartinfotitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartGenericPropertyMapArchive::tschchartinfotitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitleparagraphstyleindex)
  return _internal_tschchartinfotitleparagraphstyleindex();
}
inline void ChartGenericPropertyMapArchive::_internal_set_tschchartinfotitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartinfotitleparagraphstyleindex_ = value;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfotitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartinfotitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitleparagraphstyleindex)
}

// -------------------------------------------------------------------

// LegendGenericPropertyMapArchive

// optional .TSD.FillArchive tschlegendmodelfill = 1;
inline bool LegendGenericPropertyMapArchive::_internal_has_tschlegendmodelfill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodelfill_ != nullptr);
  return value;
}
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelfill() const {
  return _internal_has_tschlegendmodelfill();
}
inline const ::TSD::FillArchive& LegendGenericPropertyMapArchive::_internal_tschlegendmodelfill() const {
  const ::TSD::FillArchive* p = tschlegendmodelfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& LegendGenericPropertyMapArchive::tschlegendmodelfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelfill)
  return _internal_tschlegendmodelfill();
}
inline void LegendGenericPropertyMapArchive::unsafe_arena_set_allocated_tschlegendmodelfill(
    ::TSD::FillArchive* tschlegendmodelfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelfill_);
  }
  tschlegendmodelfill_ = tschlegendmodelfill;
  if (tschlegendmodelfill) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelfill)
}
inline ::TSD::FillArchive* LegendGenericPropertyMapArchive::release_tschlegendmodelfill() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = tschlegendmodelfill_;
  tschlegendmodelfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* LegendGenericPropertyMapArchive::unsafe_arena_release_tschlegendmodelfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelfill)
  _has_bits_[0] &= ~0x00000001u;
  ::TSD::FillArchive* temp = tschlegendmodelfill_;
  tschlegendmodelfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* LegendGenericPropertyMapArchive::_internal_mutable_tschlegendmodelfill() {
  _has_bits_[0] |= 0x00000001u;
  if (tschlegendmodelfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschlegendmodelfill_ = p;
  }
  return tschlegendmodelfill_;
}
inline ::TSD::FillArchive* LegendGenericPropertyMapArchive::mutable_tschlegendmodelfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschlegendmodelfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelfill)
  return _msg;
}
inline void LegendGenericPropertyMapArchive::set_allocated_tschlegendmodelfill(::TSD::FillArchive* tschlegendmodelfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelfill_);
  }
  if (tschlegendmodelfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelfill));
    if (message_arena != submessage_arena) {
      tschlegendmodelfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodelfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschlegendmodelfill_ = tschlegendmodelfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelfill)
}

// optional int32 tschlegendmodellabelparagraphstyleindex = 2;
inline bool LegendGenericPropertyMapArchive::_internal_has_tschlegendmodellabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodellabelparagraphstyleindex() const {
  return _internal_has_tschlegendmodellabelparagraphstyleindex();
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodellabelparagraphstyleindex() {
  tschlegendmodellabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LegendGenericPropertyMapArchive::_internal_tschlegendmodellabelparagraphstyleindex() const {
  return tschlegendmodellabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LegendGenericPropertyMapArchive::tschlegendmodellabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodellabelparagraphstyleindex)
  return _internal_tschlegendmodellabelparagraphstyleindex();
}
inline void LegendGenericPropertyMapArchive::_internal_set_tschlegendmodellabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  tschlegendmodellabelparagraphstyleindex_ = value;
}
inline void LegendGenericPropertyMapArchive::set_tschlegendmodellabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschlegendmodellabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodellabelparagraphstyleindex)
}

// optional float tschlegendmodelopacity = 3;
inline bool LegendGenericPropertyMapArchive::_internal_has_tschlegendmodelopacity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelopacity() const {
  return _internal_has_tschlegendmodelopacity();
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodelopacity() {
  tschlegendmodelopacity_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LegendGenericPropertyMapArchive::_internal_tschlegendmodelopacity() const {
  return tschlegendmodelopacity_;
}
inline float LegendGenericPropertyMapArchive::tschlegendmodelopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelopacity)
  return _internal_tschlegendmodelopacity();
}
inline void LegendGenericPropertyMapArchive::_internal_set_tschlegendmodelopacity(float value) {
  _has_bits_[0] |= 0x00000010u;
  tschlegendmodelopacity_ = value;
}
inline void LegendGenericPropertyMapArchive::set_tschlegendmodelopacity(float value) {
  _internal_set_tschlegendmodelopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelopacity)
}

// optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
inline bool LegendGenericPropertyMapArchive::_internal_has_tschlegendmodelshadow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodelshadow_ != nullptr);
  return value;
}
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelshadow() const {
  return _internal_has_tschlegendmodelshadow();
}
inline const ::TSD::ShadowArchive& LegendGenericPropertyMapArchive::_internal_tschlegendmodelshadow() const {
  const ::TSD::ShadowArchive* p = tschlegendmodelshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& LegendGenericPropertyMapArchive::tschlegendmodelshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelshadow)
  return _internal_tschlegendmodelshadow();
}
inline void LegendGenericPropertyMapArchive::unsafe_arena_set_allocated_tschlegendmodelshadow(
    ::TSD::ShadowArchive* tschlegendmodelshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelshadow_);
  }
  tschlegendmodelshadow_ = tschlegendmodelshadow;
  if (tschlegendmodelshadow) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelshadow)
}
inline ::TSD::ShadowArchive* LegendGenericPropertyMapArchive::release_tschlegendmodelshadow() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = tschlegendmodelshadow_;
  tschlegendmodelshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* LegendGenericPropertyMapArchive::unsafe_arena_release_tschlegendmodelshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelshadow)
  _has_bits_[0] &= ~0x00000002u;
  ::TSD::ShadowArchive* temp = tschlegendmodelshadow_;
  tschlegendmodelshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* LegendGenericPropertyMapArchive::_internal_mutable_tschlegendmodelshadow() {
  _has_bits_[0] |= 0x00000002u;
  if (tschlegendmodelshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschlegendmodelshadow_ = p;
  }
  return tschlegendmodelshadow_;
}
inline ::TSD::ShadowArchive* LegendGenericPropertyMapArchive::mutable_tschlegendmodelshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschlegendmodelshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelshadow)
  return _msg;
}
inline void LegendGenericPropertyMapArchive::set_allocated_tschlegendmodelshadow(::TSD::ShadowArchive* tschlegendmodelshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelshadow_);
  }
  if (tschlegendmodelshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelshadow));
    if (message_arena != submessage_arena) {
      tschlegendmodelshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodelshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschlegendmodelshadow_ = tschlegendmodelshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelshadow)
}

// optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
inline bool LegendGenericPropertyMapArchive::_internal_has_tschlegendmodelstroke() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschlegendmodelstroke_ != nullptr);
  return value;
}
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelstroke() const {
  return _internal_has_tschlegendmodelstroke();
}
inline const ::TSD::StrokeArchive& LegendGenericPropertyMapArchive::_internal_tschlegendmodelstroke() const {
  const ::TSD::StrokeArchive* p = tschlegendmodelstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& LegendGenericPropertyMapArchive::tschlegendmodelstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelstroke)
  return _internal_tschlegendmodelstroke();
}
inline void LegendGenericPropertyMapArchive::unsafe_arena_set_allocated_tschlegendmodelstroke(
    ::TSD::StrokeArchive* tschlegendmodelstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelstroke_);
  }
  tschlegendmodelstroke_ = tschlegendmodelstroke;
  if (tschlegendmodelstroke) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelstroke)
}
inline ::TSD::StrokeArchive* LegendGenericPropertyMapArchive::release_tschlegendmodelstroke() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschlegendmodelstroke_;
  tschlegendmodelstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* LegendGenericPropertyMapArchive::unsafe_arena_release_tschlegendmodelstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelstroke)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::StrokeArchive* temp = tschlegendmodelstroke_;
  tschlegendmodelstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* LegendGenericPropertyMapArchive::_internal_mutable_tschlegendmodelstroke() {
  _has_bits_[0] |= 0x00000004u;
  if (tschlegendmodelstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschlegendmodelstroke_ = p;
  }
  return tschlegendmodelstroke_;
}
inline ::TSD::StrokeArchive* LegendGenericPropertyMapArchive::mutable_tschlegendmodelstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschlegendmodelstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelstroke)
  return _msg;
}
inline void LegendGenericPropertyMapArchive::set_allocated_tschlegendmodelstroke(::TSD::StrokeArchive* tschlegendmodelstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelstroke_);
  }
  if (tschlegendmodelstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschlegendmodelstroke));
    if (message_arena != submessage_arena) {
      tschlegendmodelstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschlegendmodelstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschlegendmodelstroke_ = tschlegendmodelstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelstroke)
}

// -------------------------------------------------------------------

// ChartAxisGenericPropertyMapArchive

// optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxis1_0dateformat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxis1_0dateformat_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis1_0dateformat() const {
  return _internal_has_tschchartaxis1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxis1_0dateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxis1_0dateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxis1_0dateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0dateformat)
  return _internal_tschchartaxis1_0dateformat();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxis1_0dateformat(
    ::TSK::FormatStructArchive* tschchartaxis1_0dateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis1_0dateformat_);
  }
  tschchartaxis1_0dateformat_ = tschchartaxis1_0dateformat;
  if (tschchartaxis1_0dateformat) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0dateformat)
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxis1_0dateformat() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = tschchartaxis1_0dateformat_;
  tschchartaxis1_0dateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxis1_0dateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0dateformat)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = tschchartaxis1_0dateformat_;
  tschchartaxis1_0dateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxis1_0dateformat() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartaxis1_0dateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxis1_0dateformat_ = p;
  }
  return tschchartaxis1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxis1_0dateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxis1_0dateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0dateformat)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxis1_0dateformat(::TSK::FormatStructArchive* tschchartaxis1_0dateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis1_0dateformat_);
  }
  if (tschchartaxis1_0dateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis1_0dateformat));
    if (message_arena != submessage_arena) {
      tschchartaxis1_0dateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxis1_0dateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartaxis1_0dateformat_ = tschchartaxis1_0dateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0dateformat)
}

// optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxis1_0numberformat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxis1_0numberformat_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis1_0numberformat() const {
  return _internal_has_tschchartaxis1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxis1_0numberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxis1_0numberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxis1_0numberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0numberformat)
  return _internal_tschchartaxis1_0numberformat();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxis1_0numberformat(
    ::TSK::FormatStructArchive* tschchartaxis1_0numberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis1_0numberformat_);
  }
  tschchartaxis1_0numberformat_ = tschchartaxis1_0numberformat;
  if (tschchartaxis1_0numberformat) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0numberformat)
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxis1_0numberformat() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = tschchartaxis1_0numberformat_;
  tschchartaxis1_0numberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxis1_0numberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0numberformat)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = tschchartaxis1_0numberformat_;
  tschchartaxis1_0numberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxis1_0numberformat() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartaxis1_0numberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxis1_0numberformat_ = p;
  }
  return tschchartaxis1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxis1_0numberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxis1_0numberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0numberformat)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxis1_0numberformat(::TSK::FormatStructArchive* tschchartaxis1_0numberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis1_0numberformat_);
  }
  if (tschchartaxis1_0numberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis1_0numberformat));
    if (message_arena != submessage_arena) {
      tschchartaxis1_0numberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxis1_0numberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartaxis1_0numberformat_ = tschchartaxis1_0numberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0numberformat)
}

// optional float tschchartaxis3dgridlineopacity = 3;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxis3dgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis3dgridlineopacity() const {
  return _internal_has_tschchartaxis3dgridlineopacity();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dgridlineopacity() {
  tschchartaxis3dgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ChartAxisGenericPropertyMapArchive::_internal_tschchartaxis3dgridlineopacity() const {
  return tschchartaxis3dgridlineopacity_;
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxis3dgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlineopacity)
  return _internal_tschchartaxis3dgridlineopacity();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxis3dgridlineopacity(float value) {
  _has_bits_[0] |= 0x00002000u;
  tschchartaxis3dgridlineopacity_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxis3dgridlineopacity(float value) {
  _internal_set_tschchartaxis3dgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlineopacity)
}

// optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxis3dgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxis3dgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis3dgridlinestroke() const {
  return _internal_has_tschchartaxis3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxis3dgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxis3dgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::tschchartaxis3dgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlinestroke)
  return _internal_tschchartaxis3dgridlinestroke();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxis3dgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxis3dgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis3dgridlinestroke_);
  }
  tschchartaxis3dgridlinestroke_ = tschchartaxis3dgridlinestroke;
  if (tschchartaxis3dgridlinestroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxis3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartaxis3dgridlinestroke_;
  tschchartaxis3dgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxis3dgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlinestroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschchartaxis3dgridlinestroke_;
  tschchartaxis3dgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxis3dgridlinestroke() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartaxis3dgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxis3dgridlinestroke_ = p;
  }
  return tschchartaxis3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxis3dgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxis3dgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlinestroke)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxis3dgridlinestroke(::TSD::StrokeArchive* tschchartaxis3dgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis3dgridlinestroke_);
  }
  if (tschchartaxis3dgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxis3dgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxis3dgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxis3dgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartaxis3dgridlinestroke_ = tschchartaxis3dgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlinestroke)
}

// optional int32 tschchartaxis3dlabelposition = 5;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxis3dlabelposition() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis3dlabelposition() const {
  return _internal_has_tschchartaxis3dlabelposition();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dlabelposition() {
  tschchartaxis3dlabelposition_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxis3dlabelposition() const {
  return tschchartaxis3dlabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxis3dlabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dlabelposition)
  return _internal_tschchartaxis3dlabelposition();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxis3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  tschchartaxis3dlabelposition_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxis3dlabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxis3dlabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dlabelposition)
}

// optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisdateformat() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdateformat_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisdateformat() const {
  return _internal_has_tschchartaxisdateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisdateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisdateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdateformat)
  return _internal_tschchartaxisdateformat();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisdateformat(
    ::TSK::FormatStructArchive* tschchartaxisdateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdateformat_);
  }
  tschchartaxisdateformat_ = tschchartaxisdateformat;
  if (tschchartaxisdateformat) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdateformat)
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisdateformat() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdateformat_;
  tschchartaxisdateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisdateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdateformat)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdateformat_;
  tschchartaxisdateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisdateformat() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartaxisdateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdateformat_ = p;
  }
  return tschchartaxisdateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisdateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdateformat)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisdateformat(::TSK::FormatStructArchive* tschchartaxisdateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdateformat_);
  }
  if (tschchartaxisdateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdateformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartaxisdateformat_ = tschchartaxisdateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdateformat)
}

// optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisdurationformat() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisdurationformat_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisdurationformat() const {
  return _internal_has_tschchartaxisdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisdurationformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisdurationformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisdurationformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdurationformat)
  return _internal_tschchartaxisdurationformat();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisdurationformat(
    ::TSK::FormatStructArchive* tschchartaxisdurationformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdurationformat_);
  }
  tschchartaxisdurationformat_ = tschchartaxisdurationformat;
  if (tschchartaxisdurationformat) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdurationformat)
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisdurationformat() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdurationformat_;
  tschchartaxisdurationformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisdurationformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdurationformat)
  _has_bits_[0] &= ~0x00000020u;
  ::TSK::FormatStructArchive* temp = tschchartaxisdurationformat_;
  tschchartaxisdurationformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisdurationformat() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartaxisdurationformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisdurationformat_ = p;
  }
  return tschchartaxisdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisdurationformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisdurationformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdurationformat)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisdurationformat(::TSK::FormatStructArchive* tschchartaxisdurationformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdurationformat_);
  }
  if (tschchartaxisdurationformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisdurationformat));
    if (message_arena != submessage_arena) {
      tschchartaxisdurationformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisdurationformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartaxisdurationformat_ = tschchartaxisdurationformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdurationformat)
}

// optional int32 tschchartaxishorizontalspacing = 8;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxishorizontalspacing() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxishorizontalspacing() const {
  return _internal_has_tschchartaxishorizontalspacing();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxishorizontalspacing() {
  tschchartaxishorizontalspacing_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxishorizontalspacing() const {
  return tschchartaxishorizontalspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxishorizontalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxishorizontalspacing)
  return _internal_tschchartaxishorizontalspacing();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxishorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  tschchartaxishorizontalspacing_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxishorizontalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxishorizontalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxishorizontalspacing)
}

// optional int32 tschchartaxislabelparagraphstyleindex = 9;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxislabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxislabelparagraphstyleindex() const {
  return _internal_has_tschchartaxislabelparagraphstyleindex();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxislabelparagraphstyleindex() {
  tschchartaxislabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxislabelparagraphstyleindex() const {
  return tschchartaxislabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxislabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxislabelparagraphstyleindex)
  return _internal_tschchartaxislabelparagraphstyleindex();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxislabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  tschchartaxislabelparagraphstyleindex_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxislabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxislabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxislabelparagraphstyleindex)
}

// optional float tschchartaxislabelsorientation = 10;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxislabelsorientation() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxislabelsorientation() const {
  return _internal_has_tschchartaxislabelsorientation();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxislabelsorientation() {
  tschchartaxislabelsorientation_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ChartAxisGenericPropertyMapArchive::_internal_tschchartaxislabelsorientation() const {
  return tschchartaxislabelsorientation_;
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxislabelsorientation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxislabelsorientation)
  return _internal_tschchartaxislabelsorientation();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxislabelsorientation(float value) {
  _has_bits_[0] |= 0x00020000u;
  tschchartaxislabelsorientation_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxislabelsorientation(float value) {
  _internal_set_tschchartaxislabelsorientation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxislabelsorientation)
}

// optional float tschchartaxismajorgridlineopacity = 11;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxismajorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxismajorgridlineopacity() const {
  return _internal_has_tschchartaxismajorgridlineopacity();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlineopacity() {
  tschchartaxismajorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ChartAxisGenericPropertyMapArchive::_internal_tschchartaxismajorgridlineopacity() const {
  return tschchartaxismajorgridlineopacity_;
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxismajorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineopacity)
  return _internal_tschchartaxismajorgridlineopacity();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxismajorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00040000u;
  tschchartaxismajorgridlineopacity_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxismajorgridlineopacity(float value) {
  _internal_set_tschchartaxismajorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineopacity)
}

// optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 12;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxismajorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxismajorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxismajorgridlineshadow() const {
  return _internal_has_tschchartaxismajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxismajorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxismajorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisGenericPropertyMapArchive::tschchartaxismajorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineshadow)
  return _internal_tschchartaxismajorgridlineshadow();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxismajorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxismajorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxismajorgridlineshadow_);
  }
  tschchartaxismajorgridlineshadow_ = tschchartaxismajorgridlineshadow;
  if (tschchartaxismajorgridlineshadow) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxismajorgridlineshadow() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = tschchartaxismajorgridlineshadow_;
  tschchartaxismajorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxismajorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineshadow)
  _has_bits_[0] &= ~0x00000040u;
  ::TSD::ShadowArchive* temp = tschchartaxismajorgridlineshadow_;
  tschchartaxismajorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxismajorgridlineshadow() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartaxismajorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartaxismajorgridlineshadow_ = p;
  }
  return tschchartaxismajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxismajorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxismajorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineshadow)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxismajorgridlineshadow(::TSD::ShadowArchive* tschchartaxismajorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxismajorgridlineshadow_);
  }
  if (tschchartaxismajorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxismajorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxismajorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxismajorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartaxismajorgridlineshadow_ = tschchartaxismajorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineshadow)
}

// optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 13;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxismajorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxismajorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxismajorgridlinestroke() const {
  return _internal_has_tschchartaxismajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxismajorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxismajorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::tschchartaxismajorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlinestroke)
  return _internal_tschchartaxismajorgridlinestroke();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxismajorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxismajorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxismajorgridlinestroke_);
  }
  tschchartaxismajorgridlinestroke_ = tschchartaxismajorgridlinestroke;
  if (tschchartaxismajorgridlinestroke) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxismajorgridlinestroke() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartaxismajorgridlinestroke_;
  tschchartaxismajorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxismajorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlinestroke)
  _has_bits_[0] &= ~0x00000080u;
  ::TSD::StrokeArchive* temp = tschchartaxismajorgridlinestroke_;
  tschchartaxismajorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxismajorgridlinestroke() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartaxismajorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxismajorgridlinestroke_ = p;
  }
  return tschchartaxismajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxismajorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxismajorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlinestroke)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxismajorgridlinestroke(::TSD::StrokeArchive* tschchartaxismajorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxismajorgridlinestroke_);
  }
  if (tschchartaxismajorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxismajorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxismajorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxismajorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartaxismajorgridlinestroke_ = tschchartaxismajorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlinestroke)
}

// optional float tschchartaxisminorgridlineopacity = 14;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisminorgridlineopacity() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisminorgridlineopacity() const {
  return _internal_has_tschchartaxisminorgridlineopacity();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlineopacity() {
  tschchartaxisminorgridlineopacity_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisminorgridlineopacity() const {
  return tschchartaxisminorgridlineopacity_;
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxisminorgridlineopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineopacity)
  return _internal_tschchartaxisminorgridlineopacity();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisminorgridlineopacity(float value) {
  _has_bits_[0] |= 0x00080000u;
  tschchartaxisminorgridlineopacity_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisminorgridlineopacity(float value) {
  _internal_set_tschchartaxisminorgridlineopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineopacity)
}

// optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 15;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisminorgridlineshadow() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisminorgridlineshadow_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisminorgridlineshadow() const {
  return _internal_has_tschchartaxisminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisminorgridlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartaxisminorgridlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisminorgridlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineshadow)
  return _internal_tschchartaxisminorgridlineshadow();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisminorgridlineshadow(
    ::TSD::ShadowArchive* tschchartaxisminorgridlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisminorgridlineshadow_);
  }
  tschchartaxisminorgridlineshadow_ = tschchartaxisminorgridlineshadow;
  if (tschchartaxisminorgridlineshadow) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineshadow)
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisminorgridlineshadow() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartaxisminorgridlineshadow_;
  tschchartaxisminorgridlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisminorgridlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineshadow)
  _has_bits_[0] &= ~0x00000100u;
  ::TSD::ShadowArchive* temp = tschchartaxisminorgridlineshadow_;
  tschchartaxisminorgridlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisminorgridlineshadow() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartaxisminorgridlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartaxisminorgridlineshadow_ = p;
  }
  return tschchartaxisminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisminorgridlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartaxisminorgridlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineshadow)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisminorgridlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisminorgridlineshadow_);
  }
  if (tschchartaxisminorgridlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisminorgridlineshadow));
    if (message_arena != submessage_arena) {
      tschchartaxisminorgridlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisminorgridlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartaxisminorgridlineshadow_ = tschchartaxisminorgridlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineshadow)
}

// optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 16;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisminorgridlinestroke() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisminorgridlinestroke_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisminorgridlinestroke() const {
  return _internal_has_tschchartaxisminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisminorgridlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartaxisminorgridlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisminorgridlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlinestroke)
  return _internal_tschchartaxisminorgridlinestroke();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisminorgridlinestroke(
    ::TSD::StrokeArchive* tschchartaxisminorgridlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisminorgridlinestroke_);
  }
  tschchartaxisminorgridlinestroke_ = tschchartaxisminorgridlinestroke;
  if (tschchartaxisminorgridlinestroke) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlinestroke)
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisminorgridlinestroke() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartaxisminorgridlinestroke_;
  tschchartaxisminorgridlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisminorgridlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlinestroke)
  _has_bits_[0] &= ~0x00000200u;
  ::TSD::StrokeArchive* temp = tschchartaxisminorgridlinestroke_;
  tschchartaxisminorgridlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisminorgridlinestroke() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartaxisminorgridlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartaxisminorgridlinestroke_ = p;
  }
  return tschchartaxisminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisminorgridlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartaxisminorgridlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlinestroke)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisminorgridlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisminorgridlinestroke_);
  }
  if (tschchartaxisminorgridlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisminorgridlinestroke));
    if (message_arena != submessage_arena) {
      tschchartaxisminorgridlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisminorgridlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartaxisminorgridlinestroke_ = tschchartaxisminorgridlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlinestroke)
}

// optional .TSK.FormatStructArchive tschchartaxisnumberformat = 17;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisnumberformat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisnumberformat_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberformat() const {
  return _internal_has_tschchartaxisnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisnumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartaxisnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformat)
  return _internal_tschchartaxisnumberformat();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisnumberformat(
    ::TSK::FormatStructArchive* tschchartaxisnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisnumberformat_);
  }
  tschchartaxisnumberformat_ = tschchartaxisnumberformat;
  if (tschchartaxisnumberformat) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformat)
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisnumberformat() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::FormatStructArchive* temp = tschchartaxisnumberformat_;
  tschchartaxisnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformat)
  _has_bits_[0] &= ~0x00000400u;
  ::TSK::FormatStructArchive* temp = tschchartaxisnumberformat_;
  tschchartaxisnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisnumberformat() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartaxisnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartaxisnumberformat_ = p;
  }
  return tschchartaxisnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartaxisnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformat)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisnumberformat(::TSK::FormatStructArchive* tschchartaxisnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisnumberformat_);
  }
  if (tschchartaxisnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisnumberformat));
    if (message_arena != submessage_arena) {
      tschchartaxisnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartaxisnumberformat_ = tschchartaxisnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformat)
}

// optional int32 tschchartaxisnumberformattype = 18;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisnumberformattype() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberformattype() const {
  return _internal_has_tschchartaxisnumberformattype();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberformattype() {
  tschchartaxisnumberformattype_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisnumberformattype() const {
  return tschchartaxisnumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformattype)
  return _internal_tschchartaxisnumberformattype();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  tschchartaxisnumberformattype_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformattype)
}

// optional int32 tschchartaxisnumberofdecades = 19;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisnumberofdecades() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberofdecades() const {
  return _internal_has_tschchartaxisnumberofdecades();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberofdecades() {
  tschchartaxisnumberofdecades_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisnumberofdecades() const {
  return tschchartaxisnumberofdecades_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberofdecades() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberofdecades)
  return _internal_tschchartaxisnumberofdecades();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisnumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  tschchartaxisnumberofdecades_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberofdecades(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisnumberofdecades(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberofdecades)
}

// optional int32 tschchartaxisnumberofmajorgridlines = 20;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisnumberofmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberofmajorgridlines() const {
  return _internal_has_tschchartaxisnumberofmajorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberofmajorgridlines() {
  tschchartaxisnumberofmajorgridlines_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisnumberofmajorgridlines() const {
  return tschchartaxisnumberofmajorgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberofmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberofmajorgridlines)
  return _internal_tschchartaxisnumberofmajorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisnumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  tschchartaxisnumberofmajorgridlines_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberofmajorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisnumberofmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberofmajorgridlines)
}

// optional int32 tschchartaxisnumberofminorgridlines = 21;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisnumberofminorgridlines() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberofminorgridlines() const {
  return _internal_has_tschchartaxisnumberofminorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberofminorgridlines() {
  tschchartaxisnumberofminorgridlines_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisnumberofminorgridlines() const {
  return tschchartaxisnumberofminorgridlines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberofminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberofminorgridlines)
  return _internal_tschchartaxisnumberofminorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisnumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  tschchartaxisnumberofminorgridlines_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberofminorgridlines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisnumberofminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberofminorgridlines)
}

// optional bool tschchartaxisplottoedges = 22;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisplottoedges() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisplottoedges() const {
  return _internal_has_tschchartaxisplottoedges();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisplottoedges() {
  tschchartaxisplottoedges_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisplottoedges() const {
  return tschchartaxisplottoedges_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisplottoedges() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisplottoedges)
  return _internal_tschchartaxisplottoedges();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisplottoedges(bool value) {
  _has_bits_[0] |= 0x02000000u;
  tschchartaxisplottoedges_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisplottoedges(bool value) {
  _internal_set_tschchartaxisplottoedges(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisplottoedges)
}

// optional int32 tschchartaxisscale = 23;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisscale() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisscale() const {
  return _internal_has_tschchartaxisscale();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisscale() {
  tschchartaxisscale_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisscale() const {
  return tschchartaxisscale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisscale)
  return _internal_tschchartaxisscale();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisscale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  tschchartaxisscale_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisscale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisscale(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisscale)
}

// optional bool tschchartaxisshowaxis = 24;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowaxis() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowaxis() const {
  return _internal_has_tschchartaxisshowaxis();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowaxis() {
  tschchartaxisshowaxis_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowaxis() const {
  return tschchartaxisshowaxis_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowaxis)
  return _internal_tschchartaxisshowaxis();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowaxis(bool value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartaxisshowaxis_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowaxis(bool value) {
  _internal_set_tschchartaxisshowaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowaxis)
}

// optional bool tschchartaxisshowlabels = 25;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowlabels() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowlabels() const {
  return _internal_has_tschchartaxisshowlabels();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowlabels() {
  tschchartaxisshowlabels_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowlabels() const {
  return tschchartaxisshowlabels_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowlabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowlabels)
  return _internal_tschchartaxisshowlabels();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowlabels(bool value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartaxisshowlabels_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowlabels(bool value) {
  _internal_set_tschchartaxisshowlabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowlabels)
}

// optional bool tschchartaxisshowlastlabel = 26;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowlastlabel() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowlastlabel() const {
  return _internal_has_tschchartaxisshowlastlabel();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowlastlabel() {
  tschchartaxisshowlastlabel_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowlastlabel() const {
  return tschchartaxisshowlastlabel_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowlastlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowlastlabel)
  return _internal_tschchartaxisshowlastlabel();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowlastlabel(bool value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartaxisshowlastlabel_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowlastlabel(bool value) {
  _internal_set_tschchartaxisshowlastlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowlastlabel)
}

// optional bool tschchartaxisshowmajorgridlines = 27;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowmajorgridlines() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowmajorgridlines() const {
  return _internal_has_tschchartaxisshowmajorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowmajorgridlines() {
  tschchartaxisshowmajorgridlines_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowmajorgridlines() const {
  return tschchartaxisshowmajorgridlines_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowmajorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowmajorgridlines)
  return _internal_tschchartaxisshowmajorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowmajorgridlines(bool value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartaxisshowmajorgridlines_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowmajorgridlines(bool value) {
  _internal_set_tschchartaxisshowmajorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowmajorgridlines)
}

// optional bool tschchartaxisshowmajortickmarks = 28;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowmajortickmarks() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowmajortickmarks() const {
  return _internal_has_tschchartaxisshowmajortickmarks();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowmajortickmarks() {
  tschchartaxisshowmajortickmarks_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowmajortickmarks() const {
  return tschchartaxisshowmajortickmarks_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowmajortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowmajortickmarks)
  return _internal_tschchartaxisshowmajortickmarks();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowmajortickmarks(bool value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartaxisshowmajortickmarks_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowmajortickmarks(bool value) {
  _internal_set_tschchartaxisshowmajortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowmajortickmarks)
}

// optional bool tschchartaxisshowminimumlabel = 29;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowminimumlabel() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowminimumlabel() const {
  return _internal_has_tschchartaxisshowminimumlabel();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowminimumlabel() {
  tschchartaxisshowminimumlabel_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowminimumlabel() const {
  return tschchartaxisshowminimumlabel_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowminimumlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowminimumlabel)
  return _internal_tschchartaxisshowminimumlabel();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowminimumlabel(bool value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartaxisshowminimumlabel_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowminimumlabel(bool value) {
  _internal_set_tschchartaxisshowminimumlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowminimumlabel)
}

// optional bool tschchartaxisshowminorgridlines = 30;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowminorgridlines() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowminorgridlines() const {
  return _internal_has_tschchartaxisshowminorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowminorgridlines() {
  tschchartaxisshowminorgridlines_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowminorgridlines() const {
  return tschchartaxisshowminorgridlines_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowminorgridlines() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowminorgridlines)
  return _internal_tschchartaxisshowminorgridlines();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowminorgridlines(bool value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartaxisshowminorgridlines_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowminorgridlines(bool value) {
  _internal_set_tschchartaxisshowminorgridlines(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowminorgridlines)
}

// optional bool tschchartaxisshowminortickmarks = 31;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowminortickmarks() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowminortickmarks() const {
  return _internal_has_tschchartaxisshowminortickmarks();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowminortickmarks() {
  tschchartaxisshowminortickmarks_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowminortickmarks() const {
  return tschchartaxisshowminortickmarks_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowminortickmarks() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowminortickmarks)
  return _internal_tschchartaxisshowminortickmarks();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowminortickmarks(bool value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartaxisshowminortickmarks_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowminortickmarks(bool value) {
  _internal_set_tschchartaxisshowminortickmarks(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowminortickmarks)
}

// optional bool tschchartaxisshowserieslabels = 32;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowserieslabels() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowserieslabels() const {
  return _internal_has_tschchartaxisshowserieslabels();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowserieslabels() {
  tschchartaxisshowserieslabels_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowserieslabels() const {
  return tschchartaxisshowserieslabels_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowserieslabels)
  return _internal_tschchartaxisshowserieslabels();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowserieslabels(bool value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartaxisshowserieslabels_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowserieslabels(bool value) {
  _internal_set_tschchartaxisshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowserieslabels)
}

// optional bool tschchartaxisshowtitle = 33;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisshowtitle() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowtitle() const {
  return _internal_has_tschchartaxisshowtitle();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowtitle() {
  tschchartaxisshowtitle_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisshowtitle() const {
  return tschchartaxisshowtitle_;
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowtitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowtitle)
  return _internal_tschchartaxisshowtitle();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisshowtitle(bool value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartaxisshowtitle_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowtitle(bool value) {
  _internal_set_tschchartaxisshowtitle(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisshowtitle)
}

// optional int32 tschchartaxistickmarklocation = 34;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxistickmarklocation() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxistickmarklocation() const {
  return _internal_has_tschchartaxistickmarklocation();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxistickmarklocation() {
  tschchartaxistickmarklocation_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxistickmarklocation() const {
  return tschchartaxistickmarklocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxistickmarklocation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistickmarklocation)
  return _internal_tschchartaxistickmarklocation();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxistickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartaxistickmarklocation_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistickmarklocation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxistickmarklocation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistickmarklocation)
}

// optional string tschchartaxistitle = 35;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxistitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxistitle() const {
  return _internal_has_tschchartaxistitle();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxistitle() {
  tschchartaxistitle_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartAxisGenericPropertyMapArchive::tschchartaxistitle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle)
  return _internal_tschchartaxistitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartAxisGenericPropertyMapArchive::set_tschchartaxistitle(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartaxistitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle)
}
inline std::string* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxistitle() {
  std::string* _s = _internal_mutable_tschchartaxistitle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle)
  return _s;
}
inline const std::string& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxistitle() const {
  return tschchartaxistitle_.Get();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxistitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartaxistitle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxistitle() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartaxistitle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartAxisGenericPropertyMapArchive::release_tschchartaxistitle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle)
  if (!_internal_has_tschchartaxistitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartaxistitle_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxistitle(std::string* tschchartaxistitle) {
  if (tschchartaxistitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartaxistitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartaxistitle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle)
}

// optional int32 tschchartaxistitleparagraphstyleindex = 36;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxistitleparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxistitleparagraphstyleindex() const {
  return _internal_has_tschchartaxistitleparagraphstyleindex();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxistitleparagraphstyleindex() {
  tschchartaxistitleparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxistitleparagraphstyleindex() const {
  return tschchartaxistitleparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxistitleparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitleparagraphstyleindex)
  return _internal_tschchartaxistitleparagraphstyleindex();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxistitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartaxistitleparagraphstyleindex_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistitleparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxistitleparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitleparagraphstyleindex)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 37;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisusermax() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisusermax_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisusermax() const {
  return _internal_has_tschchartaxisusermax();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisusermax() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschchartaxisusermax_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisusermax() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermax)
  return _internal_tschchartaxisusermax();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisusermax(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisusermax_);
  }
  tschchartaxisusermax_ = tschchartaxisusermax;
  if (tschchartaxisusermax) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermax)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisusermax() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisusermax_;
  tschchartaxisusermax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisusermax() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermax)
  _has_bits_[0] &= ~0x00000800u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisusermax_;
  tschchartaxisusermax_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisusermax() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartaxisusermax_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartaxisusermax_ = p;
  }
  return tschchartaxisusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisusermax() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschchartaxisusermax();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermax)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisusermax_);
  }
  if (tschchartaxisusermax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisusermax));
    if (message_arena != submessage_arena) {
      tschchartaxisusermax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisusermax, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartaxisusermax_ = tschchartaxisusermax;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermax)
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 38;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisusermin() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartaxisusermin_ != nullptr);
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisusermin() const {
  return _internal_has_tschchartaxisusermin();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisusermin() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschchartaxisusermin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisusermin() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermin)
  return _internal_tschchartaxisusermin();
}
inline void ChartAxisGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartaxisusermin(
    ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisusermin_);
  }
  tschchartaxisusermin_ = tschchartaxisusermin;
  if (tschchartaxisusermin) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermin)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisusermin() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisusermin_;
  tschchartaxisusermin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::unsafe_arena_release_tschchartaxisusermin() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermin)
  _has_bits_[0] &= ~0x00001000u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisusermin_;
  tschchartaxisusermin_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::_internal_mutable_tschchartaxisusermin() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartaxisusermin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartaxisusermin_ = p;
  }
  return tschchartaxisusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisusermin() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschchartaxisusermin();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermin)
  return _msg;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisusermin_);
  }
  if (tschchartaxisusermin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartaxisusermin));
    if (message_arena != submessage_arena) {
      tschchartaxisusermin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartaxisusermin, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartaxisusermin_ = tschchartaxisusermin;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermin)
}

// optional int32 tschchartaxisverticalspacing = 39;
inline bool ChartAxisGenericPropertyMapArchive::_internal_has_tschchartaxisverticalspacing() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisverticalspacing() const {
  return _internal_has_tschchartaxisverticalspacing();
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisverticalspacing() {
  tschchartaxisverticalspacing_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::_internal_tschchartaxisverticalspacing() const {
  return tschchartaxisverticalspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisverticalspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisverticalspacing)
  return _internal_tschchartaxisverticalspacing();
}
inline void ChartAxisGenericPropertyMapArchive::_internal_set_tschchartaxisverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartaxisverticalspacing_ = value;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisverticalspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartaxisverticalspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisverticalspacing)
}

// -------------------------------------------------------------------

// ChartSeriesGenericPropertyMapArchive

// optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseries1_0dateformat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries1_0dateformat_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseries1_0dateformat() const {
  return _internal_has_tschchartseries1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseries1_0dateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseries1_0dateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseries1_0dateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0dateformat)
  return _internal_tschchartseries1_0dateformat();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseries1_0dateformat(
    ::TSK::FormatStructArchive* tschchartseries1_0dateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries1_0dateformat_);
  }
  tschchartseries1_0dateformat_ = tschchartseries1_0dateformat;
  if (tschchartseries1_0dateformat) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0dateformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseries1_0dateformat() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = tschchartseries1_0dateformat_;
  tschchartseries1_0dateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseries1_0dateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0dateformat)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = tschchartseries1_0dateformat_;
  tschchartseries1_0dateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseries1_0dateformat() {
  _has_bits_[0] |= 0x00000002u;
  if (tschchartseries1_0dateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseries1_0dateformat_ = p;
  }
  return tschchartseries1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseries1_0dateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseries1_0dateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0dateformat)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseries1_0dateformat(::TSK::FormatStructArchive* tschchartseries1_0dateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries1_0dateformat_);
  }
  if (tschchartseries1_0dateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries1_0dateformat));
    if (message_arena != submessage_arena) {
      tschchartseries1_0dateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries1_0dateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschchartseries1_0dateformat_ = tschchartseries1_0dateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0dateformat)
}

// optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseries1_0numberformat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseries1_0numberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseries1_0numberformat() const {
  return _internal_has_tschchartseries1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseries1_0numberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseries1_0numberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseries1_0numberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0numberformat)
  return _internal_tschchartseries1_0numberformat();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseries1_0numberformat(
    ::TSK::FormatStructArchive* tschchartseries1_0numberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries1_0numberformat_);
  }
  tschchartseries1_0numberformat_ = tschchartseries1_0numberformat;
  if (tschchartseries1_0numberformat) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0numberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseries1_0numberformat() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = tschchartseries1_0numberformat_;
  tschchartseries1_0numberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseries1_0numberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0numberformat)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::FormatStructArchive* temp = tschchartseries1_0numberformat_;
  tschchartseries1_0numberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseries1_0numberformat() {
  _has_bits_[0] |= 0x00000004u;
  if (tschchartseries1_0numberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseries1_0numberformat_ = p;
  }
  return tschchartseries1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseries1_0numberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseries1_0numberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0numberformat)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseries1_0numberformat(::TSK::FormatStructArchive* tschchartseries1_0numberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries1_0numberformat_);
  }
  if (tschchartseries1_0numberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseries1_0numberformat));
    if (message_arena != submessage_arena) {
      tschchartseries1_0numberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseries1_0numberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschchartseries1_0numberformat_ = tschchartseries1_0numberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0numberformat)
}

// optional float tschchartseries2_3labelexplosion = 3;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseries2_3labelexplosion() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseries2_3labelexplosion() const {
  return _internal_has_tschchartseries2_3labelexplosion();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries2_3labelexplosion() {
  tschchartseries2_3labelexplosion_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseries2_3labelexplosion() const {
  return tschchartseries2_3labelexplosion_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseries2_3labelexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries2_3labelexplosion)
  return _internal_tschchartseries2_3labelexplosion();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseries2_3labelexplosion(float value) {
  _has_bits_[0] |= 0x04000000u;
  tschchartseries2_3labelexplosion_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseries2_3labelexplosion(float value) {
  _internal_set_tschchartseries2_3labelexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries2_3labelexplosion)
}

// optional float tschchartseriesadjustmentscale = 4;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesadjustmentscale() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesadjustmentscale() const {
  return _internal_has_tschchartseriesadjustmentscale();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesadjustmentscale() {
  tschchartseriesadjustmentscale_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesadjustmentscale() const {
  return tschchartseriesadjustmentscale_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriesadjustmentscale() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesadjustmentscale)
  return _internal_tschchartseriesadjustmentscale();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesadjustmentscale(float value) {
  _has_bits_[0] |= 0x08000000u;
  tschchartseriesadjustmentscale_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesadjustmentscale(float value) {
  _internal_set_tschchartseriesadjustmentscale(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesadjustmentscale)
}

// optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriescalloutlineendlineend() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriescalloutlineendlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriescalloutlineendlineend() const {
  return _internal_has_tschchartseriescalloutlineendlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriescalloutlineendlineend() const {
  const ::TSD::LineEndArchive* p = tschchartseriescalloutlineendlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriescalloutlineendlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlineendlineend)
  return _internal_tschchartseriescalloutlineendlineend();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriescalloutlineendlineend(
    ::TSD::LineEndArchive* tschchartseriescalloutlineendlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlineendlineend_);
  }
  tschchartseriescalloutlineendlineend_ = tschchartseriescalloutlineendlineend;
  if (tschchartseriescalloutlineendlineend) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlineendlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriescalloutlineendlineend() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::LineEndArchive* temp = tschchartseriescalloutlineendlineend_;
  tschchartseriescalloutlineendlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriescalloutlineendlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlineendlineend)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::LineEndArchive* temp = tschchartseriescalloutlineendlineend_;
  tschchartseriescalloutlineendlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriescalloutlineendlineend() {
  _has_bits_[0] |= 0x00000008u;
  if (tschchartseriescalloutlineendlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartseriescalloutlineendlineend_ = p;
  }
  return tschchartseriescalloutlineendlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriescalloutlineendlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriescalloutlineendlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlineendlineend)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriescalloutlineendlineend(::TSD::LineEndArchive* tschchartseriescalloutlineendlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlineendlineend_);
  }
  if (tschchartseriescalloutlineendlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlineendlineend));
    if (message_arena != submessage_arena) {
      tschchartseriescalloutlineendlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescalloutlineendlineend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschchartseriescalloutlineendlineend_ = tschchartseriescalloutlineendlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlineendlineend)
}

// optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriescalloutlinestartlineend() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriescalloutlinestartlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriescalloutlinestartlineend() const {
  return _internal_has_tschchartseriescalloutlinestartlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriescalloutlinestartlineend() const {
  const ::TSD::LineEndArchive* p = tschchartseriescalloutlinestartlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriescalloutlinestartlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestartlineend)
  return _internal_tschchartseriescalloutlinestartlineend();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriescalloutlinestartlineend(
    ::TSD::LineEndArchive* tschchartseriescalloutlinestartlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlinestartlineend_);
  }
  tschchartseriescalloutlinestartlineend_ = tschchartseriescalloutlinestartlineend;
  if (tschchartseriescalloutlinestartlineend) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestartlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriescalloutlinestartlineend() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::LineEndArchive* temp = tschchartseriescalloutlinestartlineend_;
  tschchartseriescalloutlinestartlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriescalloutlinestartlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestartlineend)
  _has_bits_[0] &= ~0x00000010u;
  ::TSD::LineEndArchive* temp = tschchartseriescalloutlinestartlineend_;
  tschchartseriescalloutlinestartlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriescalloutlinestartlineend() {
  _has_bits_[0] |= 0x00000010u;
  if (tschchartseriescalloutlinestartlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartseriescalloutlinestartlineend_ = p;
  }
  return tschchartseriescalloutlinestartlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriescalloutlinestartlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartseriescalloutlinestartlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestartlineend)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriescalloutlinestartlineend(::TSD::LineEndArchive* tschchartseriescalloutlinestartlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlinestartlineend_);
  }
  if (tschchartseriescalloutlinestartlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlinestartlineend));
    if (message_arena != submessage_arena) {
      tschchartseriescalloutlinestartlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescalloutlinestartlineend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tschchartseriescalloutlinestartlineend_ = tschchartseriescalloutlinestartlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestartlineend)
}

// optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriescalloutlinestrokestyle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriescalloutlinestrokestyle_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriescalloutlinestrokestyle() const {
  return _internal_has_tschchartseriescalloutlinestrokestyle();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriescalloutlinestrokestyle() const {
  const ::TSD::StrokeArchive* p = tschchartseriescalloutlinestrokestyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriescalloutlinestrokestyle() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestrokestyle)
  return _internal_tschchartseriescalloutlinestrokestyle();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriescalloutlinestrokestyle(
    ::TSD::StrokeArchive* tschchartseriescalloutlinestrokestyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlinestrokestyle_);
  }
  tschchartseriescalloutlinestrokestyle_ = tschchartseriescalloutlinestrokestyle;
  if (tschchartseriescalloutlinestrokestyle) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestrokestyle)
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriescalloutlinestrokestyle() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartseriescalloutlinestrokestyle_;
  tschchartseriescalloutlinestrokestyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriescalloutlinestrokestyle() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestrokestyle)
  _has_bits_[0] &= ~0x00000020u;
  ::TSD::StrokeArchive* temp = tschchartseriescalloutlinestrokestyle_;
  tschchartseriescalloutlinestrokestyle_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriescalloutlinestrokestyle() {
  _has_bits_[0] |= 0x00000020u;
  if (tschchartseriescalloutlinestrokestyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriescalloutlinestrokestyle_ = p;
  }
  return tschchartseriescalloutlinestrokestyle_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriescalloutlinestrokestyle() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriescalloutlinestrokestyle();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestrokestyle)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriescalloutlinestrokestyle(::TSD::StrokeArchive* tschchartseriescalloutlinestrokestyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlinestrokestyle_);
  }
  if (tschchartseriescalloutlinestrokestyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriescalloutlinestrokestyle));
    if (message_arena != submessage_arena) {
      tschchartseriescalloutlinestrokestyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriescalloutlinestrokestyle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tschchartseriescalloutlinestrokestyle_ = tschchartseriescalloutlinestrokestyle;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestrokestyle)
}

// optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesdateformat() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdateformat_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesdateformat() const {
  return _internal_has_tschchartseriesdateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesdateformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdateformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesdateformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdateformat)
  return _internal_tschchartseriesdateformat();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriesdateformat(
    ::TSK::FormatStructArchive* tschchartseriesdateformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdateformat_);
  }
  tschchartseriesdateformat_ = tschchartseriesdateformat;
  if (tschchartseriesdateformat) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdateformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesdateformat() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdateformat_;
  tschchartseriesdateformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriesdateformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdateformat)
  _has_bits_[0] &= ~0x00000040u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdateformat_;
  tschchartseriesdateformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriesdateformat() {
  _has_bits_[0] |= 0x00000040u;
  if (tschchartseriesdateformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdateformat_ = p;
  }
  return tschchartseriesdateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesdateformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdateformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdateformat)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesdateformat(::TSK::FormatStructArchive* tschchartseriesdateformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdateformat_);
  }
  if (tschchartseriesdateformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdateformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdateformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdateformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  tschchartseriesdateformat_ = tschchartseriesdateformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdateformat)
}

// optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesdurationformat() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesdurationformat_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesdurationformat() const {
  return _internal_has_tschchartseriesdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesdurationformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesdurationformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesdurationformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdurationformat)
  return _internal_tschchartseriesdurationformat();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriesdurationformat(
    ::TSK::FormatStructArchive* tschchartseriesdurationformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdurationformat_);
  }
  tschchartseriesdurationformat_ = tschchartseriesdurationformat;
  if (tschchartseriesdurationformat) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdurationformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesdurationformat() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdurationformat_;
  tschchartseriesdurationformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriesdurationformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdurationformat)
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::FormatStructArchive* temp = tschchartseriesdurationformat_;
  tschchartseriesdurationformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriesdurationformat() {
  _has_bits_[0] |= 0x00000080u;
  if (tschchartseriesdurationformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesdurationformat_ = p;
  }
  return tschchartseriesdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesdurationformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesdurationformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdurationformat)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesdurationformat(::TSK::FormatStructArchive* tschchartseriesdurationformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdurationformat_);
  }
  if (tschchartseriesdurationformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesdurationformat));
    if (message_arena != submessage_arena) {
      tschchartseriesdurationformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesdurationformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tschchartseriesdurationformat_ = tschchartseriesdurationformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdurationformat)
}

// optional int32 tschchartseriesenablecalloutline = 10;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesenablecalloutline() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesenablecalloutline() const {
  return _internal_has_tschchartseriesenablecalloutline();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesenablecalloutline() {
  tschchartseriesenablecalloutline_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesenablecalloutline() const {
  return tschchartseriesenablecalloutline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesenablecalloutline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesenablecalloutline)
  return _internal_tschchartseriesenablecalloutline();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  tschchartseriesenablecalloutline_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesenablecalloutline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesenablecalloutline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesenablecalloutline)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarcustomnegativedata() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarcustomnegativedata_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustomnegativedata() const {
  return _internal_has_tschchartserieserrorbarcustomnegativedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarcustomnegativedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartserieserrorbarcustomnegativedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustomnegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedata)
  return _internal_tschchartserieserrorbarcustomnegativedata();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarcustomnegativedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustomnegativedata_);
  }
  tschchartserieserrorbarcustomnegativedata_ = tschchartserieserrorbarcustomnegativedata;
  if (tschchartserieserrorbarcustomnegativedata) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustomnegativedata() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustomnegativedata_;
  tschchartserieserrorbarcustomnegativedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarcustomnegativedata() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedata)
  _has_bits_[0] &= ~0x00000100u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustomnegativedata_;
  tschchartserieserrorbarcustomnegativedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarcustomnegativedata() {
  _has_bits_[0] |= 0x00000100u;
  if (tschchartserieserrorbarcustomnegativedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartserieserrorbarcustomnegativedata_ = p;
  }
  return tschchartserieserrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustomnegativedata() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartserieserrorbarcustomnegativedata();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedata)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustomnegativedata_);
  }
  if (tschchartserieserrorbarcustomnegativedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustomnegativedata));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarcustomnegativedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarcustomnegativedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  tschchartserieserrorbarcustomnegativedata_ = tschchartserieserrorbarcustomnegativedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarcustomnegativedatascatterx() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarcustomnegativedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustomnegativedatascatterx() const {
  return _internal_has_tschchartserieserrorbarcustomnegativedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarcustomnegativedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartserieserrorbarcustomnegativedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustomnegativedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedatascatterx)
  return _internal_tschchartserieserrorbarcustomnegativedatascatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarcustomnegativedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustomnegativedatascatterx_);
  }
  tschchartserieserrorbarcustomnegativedatascatterx_ = tschchartserieserrorbarcustomnegativedatascatterx;
  if (tschchartserieserrorbarcustomnegativedatascatterx) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustomnegativedatascatterx() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustomnegativedatascatterx_;
  tschchartserieserrorbarcustomnegativedatascatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarcustomnegativedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedatascatterx)
  _has_bits_[0] &= ~0x00000200u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustomnegativedatascatterx_;
  tschchartserieserrorbarcustomnegativedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx() {
  _has_bits_[0] |= 0x00000200u;
  if (tschchartserieserrorbarcustomnegativedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartserieserrorbarcustomnegativedatascatterx_ = p;
  }
  return tschchartserieserrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustomnegativedatascatterx() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedatascatterx)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustomnegativedatascatterx_);
  }
  if (tschchartserieserrorbarcustomnegativedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustomnegativedatascatterx));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarcustomnegativedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarcustomnegativedatascatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  tschchartserieserrorbarcustomnegativedatascatterx_ = tschchartserieserrorbarcustomnegativedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedatascatterx)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarcustompositivedata() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarcustompositivedata_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustompositivedata() const {
  return _internal_has_tschchartserieserrorbarcustompositivedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarcustompositivedata() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartserieserrorbarcustompositivedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustompositivedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedata)
  return _internal_tschchartserieserrorbarcustompositivedata();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarcustompositivedata(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustompositivedata_);
  }
  tschchartserieserrorbarcustompositivedata_ = tschchartserieserrorbarcustompositivedata;
  if (tschchartserieserrorbarcustompositivedata) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedata)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustompositivedata() {
  _has_bits_[0] &= ~0x00000400u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustompositivedata_;
  tschchartserieserrorbarcustompositivedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarcustompositivedata() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedata)
  _has_bits_[0] &= ~0x00000400u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustompositivedata_;
  tschchartserieserrorbarcustompositivedata_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarcustompositivedata() {
  _has_bits_[0] |= 0x00000400u;
  if (tschchartserieserrorbarcustompositivedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartserieserrorbarcustompositivedata_ = p;
  }
  return tschchartserieserrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustompositivedata() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartserieserrorbarcustompositivedata();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedata)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustompositivedata_);
  }
  if (tschchartserieserrorbarcustompositivedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustompositivedata));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarcustompositivedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarcustompositivedata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  tschchartserieserrorbarcustompositivedata_ = tschchartserieserrorbarcustompositivedata;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedata)
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarcustompositivedatascatterx() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarcustompositivedatascatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustompositivedatascatterx() const {
  return _internal_has_tschchartserieserrorbarcustompositivedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarcustompositivedatascatterx() const {
  const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* p = tschchartserieserrorbarcustompositivedatascatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSArrayOfNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustompositivedatascatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedatascatterx)
  return _internal_tschchartserieserrorbarcustompositivedatascatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarcustompositivedatascatterx(
    ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustompositivedatascatterx_);
  }
  tschchartserieserrorbarcustompositivedatascatterx_ = tschchartserieserrorbarcustompositivedatascatterx;
  if (tschchartserieserrorbarcustompositivedatascatterx) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedatascatterx)
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustompositivedatascatterx() {
  _has_bits_[0] &= ~0x00000800u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustompositivedatascatterx_;
  tschchartserieserrorbarcustompositivedatascatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarcustompositivedatascatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedatascatterx)
  _has_bits_[0] &= ~0x00000800u;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustompositivedatascatterx_;
  tschchartserieserrorbarcustompositivedatascatterx_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarcustompositivedatascatterx() {
  _has_bits_[0] |= 0x00000800u;
  if (tschchartserieserrorbarcustompositivedatascatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSArrayOfNSNumberDoubleArchive>(GetArenaForAllocation());
    tschchartserieserrorbarcustompositivedatascatterx_ = p;
  }
  return tschchartserieserrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustompositivedatascatterx() {
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* _msg = _internal_mutable_tschchartserieserrorbarcustompositivedatascatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedatascatterx)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustompositivedatascatterx_);
  }
  if (tschchartserieserrorbarcustompositivedatascatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarcustompositivedatascatterx));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarcustompositivedatascatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarcustompositivedatascatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  tschchartserieserrorbarcustompositivedatascatterx_ = tschchartserieserrorbarcustompositivedatascatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedatascatterx)
}

// optional float tschchartserieserrorbarfixedvalue = 15;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarfixedvalue() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarfixedvalue() const {
  return _internal_has_tschchartserieserrorbarfixedvalue();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarfixedvalue() {
  tschchartserieserrorbarfixedvalue_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarfixedvalue() const {
  return tschchartserieserrorbarfixedvalue_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarfixedvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarfixedvalue)
  return _internal_tschchartserieserrorbarfixedvalue();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarfixedvalue(float value) {
  _has_bits_[0] |= 0x20000000u;
  tschchartserieserrorbarfixedvalue_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarfixedvalue(float value) {
  _internal_set_tschchartserieserrorbarfixedvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarfixedvalue)
}

// optional float tschchartserieserrorbarfixedvaluescatterx = 16;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarfixedvaluescatterx() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarfixedvaluescatterx() const {
  return _internal_has_tschchartserieserrorbarfixedvaluescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarfixedvaluescatterx() {
  tschchartserieserrorbarfixedvaluescatterx_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarfixedvaluescatterx() const {
  return tschchartserieserrorbarfixedvaluescatterx_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarfixedvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarfixedvaluescatterx)
  return _internal_tschchartserieserrorbarfixedvaluescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarfixedvaluescatterx(float value) {
  _has_bits_[0] |= 0x40000000u;
  tschchartserieserrorbarfixedvaluescatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarfixedvaluescatterx(float value) {
  _internal_set_tschchartserieserrorbarfixedvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarfixedvaluescatterx)
}

// optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarlineend() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarlineend_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarlineend() const {
  return _internal_has_tschchartserieserrorbarlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarlineend() const {
  const ::TSD::LineEndArchive* p = tschchartserieserrorbarlineend_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarlineend() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineend)
  return _internal_tschchartserieserrorbarlineend();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarlineend(
    ::TSD::LineEndArchive* tschchartserieserrorbarlineend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarlineend_);
  }
  tschchartserieserrorbarlineend_ = tschchartserieserrorbarlineend;
  if (tschchartserieserrorbarlineend) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineend)
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarlineend() {
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::LineEndArchive* temp = tschchartserieserrorbarlineend_;
  tschchartserieserrorbarlineend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarlineend() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineend)
  _has_bits_[0] &= ~0x00001000u;
  ::TSD::LineEndArchive* temp = tschchartserieserrorbarlineend_;
  tschchartserieserrorbarlineend_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarlineend() {
  _has_bits_[0] |= 0x00001000u;
  if (tschchartserieserrorbarlineend_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartserieserrorbarlineend_ = p;
  }
  return tschchartserieserrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarlineend() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartserieserrorbarlineend();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineend)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarlineend(::TSD::LineEndArchive* tschchartserieserrorbarlineend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarlineend_);
  }
  if (tschchartserieserrorbarlineend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarlineend));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarlineend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarlineend, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  tschchartserieserrorbarlineend_ = tschchartserieserrorbarlineend;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineend)
}

// optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarlineendscatterx() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarlineendscatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarlineendscatterx() const {
  return _internal_has_tschchartserieserrorbarlineendscatterx();
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarlineendscatterx() const {
  const ::TSD::LineEndArchive* p = tschchartserieserrorbarlineendscatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::LineEndArchive&>(
      ::TSD::_LineEndArchive_default_instance_);
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarlineendscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineendscatterx)
  return _internal_tschchartserieserrorbarlineendscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarlineendscatterx(
    ::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarlineendscatterx_);
  }
  tschchartserieserrorbarlineendscatterx_ = tschchartserieserrorbarlineendscatterx;
  if (tschchartserieserrorbarlineendscatterx) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineendscatterx)
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarlineendscatterx() {
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::LineEndArchive* temp = tschchartserieserrorbarlineendscatterx_;
  tschchartserieserrorbarlineendscatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarlineendscatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineendscatterx)
  _has_bits_[0] &= ~0x00002000u;
  ::TSD::LineEndArchive* temp = tschchartserieserrorbarlineendscatterx_;
  tschchartserieserrorbarlineendscatterx_ = nullptr;
  return temp;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarlineendscatterx() {
  _has_bits_[0] |= 0x00002000u;
  if (tschchartserieserrorbarlineendscatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::LineEndArchive>(GetArenaForAllocation());
    tschchartserieserrorbarlineendscatterx_ = p;
  }
  return tschchartserieserrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarlineendscatterx() {
  ::TSD::LineEndArchive* _msg = _internal_mutable_tschchartserieserrorbarlineendscatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineendscatterx)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarlineendscatterx(::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarlineendscatterx_);
  }
  if (tschchartserieserrorbarlineendscatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarlineendscatterx));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarlineendscatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarlineendscatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  tschchartserieserrorbarlineendscatterx_ = tschchartserieserrorbarlineendscatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineendscatterx)
}

// optional float tschchartserieserrorbarpercentvalue = 19;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarpercentvalue() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarpercentvalue() const {
  return _internal_has_tschchartserieserrorbarpercentvalue();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarpercentvalue() {
  tschchartserieserrorbarpercentvalue_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarpercentvalue() const {
  return tschchartserieserrorbarpercentvalue_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarpercentvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarpercentvalue)
  return _internal_tschchartserieserrorbarpercentvalue();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarpercentvalue(float value) {
  _has_bits_[0] |= 0x80000000u;
  tschchartserieserrorbarpercentvalue_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarpercentvalue(float value) {
  _internal_set_tschchartserieserrorbarpercentvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarpercentvalue)
}

// optional float tschchartserieserrorbarpercentvaluescatterx = 20;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarpercentvaluescatterx() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarpercentvaluescatterx() const {
  return _internal_has_tschchartserieserrorbarpercentvaluescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarpercentvaluescatterx() {
  tschchartserieserrorbarpercentvaluescatterx_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarpercentvaluescatterx() const {
  return tschchartserieserrorbarpercentvaluescatterx_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarpercentvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarpercentvaluescatterx)
  return _internal_tschchartserieserrorbarpercentvaluescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarpercentvaluescatterx(float value) {
  _has_bits_[1] |= 0x00000001u;
  tschchartserieserrorbarpercentvaluescatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarpercentvaluescatterx(float value) {
  _internal_set_tschchartserieserrorbarpercentvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarpercentvaluescatterx)
}

// optional int32 tschchartserieserrorbarsetting = 21;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarsetting() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarsetting() const {
  return _internal_has_tschchartserieserrorbarsetting();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarsetting() {
  tschchartserieserrorbarsetting_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarsetting() const {
  return tschchartserieserrorbarsetting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarsetting() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarsetting)
  return _internal_tschchartserieserrorbarsetting();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  tschchartserieserrorbarsetting_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarsetting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieserrorbarsetting(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarsetting)
}

// optional int32 tschchartserieserrorbarsettingscatterx = 22;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarsettingscatterx() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarsettingscatterx() const {
  return _internal_has_tschchartserieserrorbarsettingscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarsettingscatterx() {
  tschchartserieserrorbarsettingscatterx_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarsettingscatterx() const {
  return tschchartserieserrorbarsettingscatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarsettingscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarsettingscatterx)
  return _internal_tschchartserieserrorbarsettingscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  tschchartserieserrorbarsettingscatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarsettingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieserrorbarsettingscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarsettingscatterx)
}

// optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarshadow() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarshadow() const {
  return _internal_has_tschchartserieserrorbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarshadow() const {
  const ::TSD::ShadowArchive* p = tschchartserieserrorbarshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarshadow)
  return _internal_tschchartserieserrorbarshadow();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarshadow(
    ::TSD::ShadowArchive* tschchartserieserrorbarshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarshadow_);
  }
  tschchartserieserrorbarshadow_ = tschchartserieserrorbarshadow;
  if (tschchartserieserrorbarshadow) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarshadow() {
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::ShadowArchive* temp = tschchartserieserrorbarshadow_;
  tschchartserieserrorbarshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarshadow)
  _has_bits_[0] &= ~0x00004000u;
  ::TSD::ShadowArchive* temp = tschchartserieserrorbarshadow_;
  tschchartserieserrorbarshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarshadow() {
  _has_bits_[0] |= 0x00004000u;
  if (tschchartserieserrorbarshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartserieserrorbarshadow_ = p;
  }
  return tschchartserieserrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartserieserrorbarshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarshadow)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarshadow(::TSD::ShadowArchive* tschchartserieserrorbarshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarshadow_);
  }
  if (tschchartserieserrorbarshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarshadow));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  tschchartserieserrorbarshadow_ = tschchartserieserrorbarshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarshadow)
}

// optional int32 tschchartserieserrorbarspacing = 24;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarspacing() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarspacing() const {
  return _internal_has_tschchartserieserrorbarspacing();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarspacing() {
  tschchartserieserrorbarspacing_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarspacing() const {
  return tschchartserieserrorbarspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarspacing)
  return _internal_tschchartserieserrorbarspacing();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  tschchartserieserrorbarspacing_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieserrorbarspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarspacing)
}

// optional int32 tschchartserieserrorbarspacingscatterx = 25;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarspacingscatterx() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarspacingscatterx() const {
  return _internal_has_tschchartserieserrorbarspacingscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarspacingscatterx() {
  tschchartserieserrorbarspacingscatterx_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarspacingscatterx() const {
  return tschchartserieserrorbarspacingscatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarspacingscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarspacingscatterx)
  return _internal_tschchartserieserrorbarspacingscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  tschchartserieserrorbarspacingscatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarspacingscatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieserrorbarspacingscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarspacingscatterx)
}

// optional float tschchartserieserrorbarstddevvalue = 26;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarstddevvalue() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstddevvalue() const {
  return _internal_has_tschchartserieserrorbarstddevvalue();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstddevvalue() {
  tschchartserieserrorbarstddevvalue_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarstddevvalue() const {
  return tschchartserieserrorbarstddevvalue_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstddevvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstddevvalue)
  return _internal_tschchartserieserrorbarstddevvalue();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarstddevvalue(float value) {
  _has_bits_[1] |= 0x00000020u;
  tschchartserieserrorbarstddevvalue_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarstddevvalue(float value) {
  _internal_set_tschchartserieserrorbarstddevvalue(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstddevvalue)
}

// optional float tschchartserieserrorbarstddevvaluescatterx = 27;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarstddevvaluescatterx() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstddevvaluescatterx() const {
  return _internal_has_tschchartserieserrorbarstddevvaluescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstddevvaluescatterx() {
  tschchartserieserrorbarstddevvaluescatterx_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarstddevvaluescatterx() const {
  return tschchartserieserrorbarstddevvaluescatterx_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstddevvaluescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstddevvaluescatterx)
  return _internal_tschchartserieserrorbarstddevvaluescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbarstddevvaluescatterx(float value) {
  _has_bits_[1] |= 0x00000040u;
  tschchartserieserrorbarstddevvaluescatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarstddevvaluescatterx(float value) {
  _internal_set_tschchartserieserrorbarstddevvaluescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstddevvaluescatterx)
}

// optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarstroke() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstroke() const {
  return _internal_has_tschchartserieserrorbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarstroke() const {
  const ::TSD::StrokeArchive* p = tschchartserieserrorbarstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstroke)
  return _internal_tschchartserieserrorbarstroke();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarstroke(
    ::TSD::StrokeArchive* tschchartserieserrorbarstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarstroke_);
  }
  tschchartserieserrorbarstroke_ = tschchartserieserrorbarstroke;
  if (tschchartserieserrorbarstroke) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarstroke() {
  _has_bits_[0] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = tschchartserieserrorbarstroke_;
  tschchartserieserrorbarstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstroke)
  _has_bits_[0] &= ~0x00008000u;
  ::TSD::StrokeArchive* temp = tschchartserieserrorbarstroke_;
  tschchartserieserrorbarstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarstroke() {
  _has_bits_[0] |= 0x00008000u;
  if (tschchartserieserrorbarstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartserieserrorbarstroke_ = p;
  }
  return tschchartserieserrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartserieserrorbarstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstroke)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarstroke(::TSD::StrokeArchive* tschchartserieserrorbarstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarstroke_);
  }
  if (tschchartserieserrorbarstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarstroke));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  tschchartserieserrorbarstroke_ = tschchartserieserrorbarstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstroke)
}

// optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbarstrokescatterx() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartserieserrorbarstrokescatterx_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstrokescatterx() const {
  return _internal_has_tschchartserieserrorbarstrokescatterx();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbarstrokescatterx() const {
  const ::TSD::StrokeArchive* p = tschchartserieserrorbarstrokescatterx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstrokescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstrokescatterx)
  return _internal_tschchartserieserrorbarstrokescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartserieserrorbarstrokescatterx(
    ::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarstrokescatterx_);
  }
  tschchartserieserrorbarstrokescatterx_ = tschchartserieserrorbarstrokescatterx;
  if (tschchartserieserrorbarstrokescatterx) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstrokescatterx)
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarstrokescatterx() {
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = tschchartserieserrorbarstrokescatterx_;
  tschchartserieserrorbarstrokescatterx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartserieserrorbarstrokescatterx() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstrokescatterx)
  _has_bits_[0] &= ~0x00010000u;
  ::TSD::StrokeArchive* temp = tschchartserieserrorbarstrokescatterx_;
  tschchartserieserrorbarstrokescatterx_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartserieserrorbarstrokescatterx() {
  _has_bits_[0] |= 0x00010000u;
  if (tschchartserieserrorbarstrokescatterx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartserieserrorbarstrokescatterx_ = p;
  }
  return tschchartserieserrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarstrokescatterx() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartserieserrorbarstrokescatterx();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstrokescatterx)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarstrokescatterx(::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarstrokescatterx_);
  }
  if (tschchartserieserrorbarstrokescatterx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartserieserrorbarstrokescatterx));
    if (message_arena != submessage_arena) {
      tschchartserieserrorbarstrokescatterx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartserieserrorbarstrokescatterx, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  tschchartserieserrorbarstrokescatterx_ = tschchartserieserrorbarstrokescatterx;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstrokescatterx)
}

// optional int32 tschchartserieserrorbartype = 30;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbartype() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbartype() const {
  return _internal_has_tschchartserieserrorbartype();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbartype() {
  tschchartserieserrorbartype_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbartype() const {
  return tschchartserieserrorbartype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbartype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbartype)
  return _internal_tschchartserieserrorbartype();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  tschchartserieserrorbartype_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbartype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieserrorbartype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbartype)
}

// optional int32 tschchartserieserrorbartypescatterx = 31;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieserrorbartypescatterx() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbartypescatterx() const {
  return _internal_has_tschchartserieserrorbartypescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbartypescatterx() {
  tschchartserieserrorbartypescatterx_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieserrorbartypescatterx() const {
  return tschchartserieserrorbartypescatterx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbartypescatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbartypescatterx)
  return _internal_tschchartserieserrorbartypescatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieserrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000100u;
  tschchartserieserrorbartypescatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbartypescatterx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieserrorbartypescatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbartypescatterx)
}

// optional .TSD.FillArchive tschchartseriesfill = 32;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesfill() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesfill_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesfill() const {
  return _internal_has_tschchartseriesfill();
}
inline const ::TSD::FillArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesfill() const {
  const ::TSD::FillArchive* p = tschchartseriesfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesfill)
  return _internal_tschchartseriesfill();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriesfill(
    ::TSD::FillArchive* tschchartseriesfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesfill_);
  }
  tschchartseriesfill_ = tschchartseriesfill;
  if (tschchartseriesfill) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesfill)
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesfill() {
  _has_bits_[0] &= ~0x00020000u;
  ::TSD::FillArchive* temp = tschchartseriesfill_;
  tschchartseriesfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriesfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesfill)
  _has_bits_[0] &= ~0x00020000u;
  ::TSD::FillArchive* temp = tschchartseriesfill_;
  tschchartseriesfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriesfill() {
  _has_bits_[0] |= 0x00020000u;
  if (tschchartseriesfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriesfill_ = p;
  }
  return tschchartseriesfill_;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriesfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesfill)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesfill(::TSD::FillArchive* tschchartseriesfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesfill_);
  }
  if (tschchartseriesfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesfill));
    if (message_arena != submessage_arena) {
      tschchartseriesfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  tschchartseriesfill_ = tschchartseriesfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesfill)
}

// optional float tschchartserieslabelexplosion = 33;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieslabelexplosion() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieslabelexplosion() const {
  return _internal_has_tschchartserieslabelexplosion();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieslabelexplosion() {
  tschchartserieslabelexplosion_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieslabelexplosion() const {
  return tschchartserieslabelexplosion_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieslabelexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieslabelexplosion)
  return _internal_tschchartserieslabelexplosion();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieslabelexplosion(float value) {
  _has_bits_[1] |= 0x00000200u;
  tschchartserieslabelexplosion_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieslabelexplosion(float value) {
  _internal_set_tschchartserieslabelexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieslabelexplosion)
}

// optional int32 tschchartserieslabelparagraphstyleindex = 34;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieslabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieslabelparagraphstyleindex() const {
  return _internal_has_tschchartserieslabelparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieslabelparagraphstyleindex() {
  tschchartserieslabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieslabelparagraphstyleindex() const {
  return tschchartserieslabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieslabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieslabelparagraphstyleindex)
  return _internal_tschchartserieslabelparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieslabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  tschchartserieslabelparagraphstyleindex_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieslabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieslabelparagraphstyleindex)
}

// optional int32 tschchartserieslinetype = 35;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieslinetype() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieslinetype() const {
  return _internal_has_tschchartserieslinetype();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieslinetype() {
  tschchartserieslinetype_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieslinetype() const {
  return tschchartserieslinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieslinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieslinetype)
  return _internal_tschchartserieslinetype();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieslinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  tschchartserieslinetype_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieslinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartserieslinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieslinetype)
}

// optional .TSK.FormatStructArchive tschchartseriesnumberformat = 36;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesnumberformat() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesnumberformat() const {
  return _internal_has_tschchartseriesnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesnumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriesnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformat)
  return _internal_tschchartseriesnumberformat();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriesnumberformat(
    ::TSK::FormatStructArchive* tschchartseriesnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesnumberformat_);
  }
  tschchartseriesnumberformat_ = tschchartseriesnumberformat;
  if (tschchartseriesnumberformat) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesnumberformat() {
  _has_bits_[0] &= ~0x00040000u;
  ::TSK::FormatStructArchive* temp = tschchartseriesnumberformat_;
  tschchartseriesnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriesnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformat)
  _has_bits_[0] &= ~0x00040000u;
  ::TSK::FormatStructArchive* temp = tschchartseriesnumberformat_;
  tschchartseriesnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriesnumberformat() {
  _has_bits_[0] |= 0x00040000u;
  if (tschchartseriesnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriesnumberformat_ = p;
  }
  return tschchartseriesnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriesnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformat)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesnumberformat(::TSK::FormatStructArchive* tschchartseriesnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesnumberformat_);
  }
  if (tschchartseriesnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesnumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriesnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  tschchartseriesnumberformat_ = tschchartseriesnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformat)
}

// optional int32 tschchartseriesnumberformattype = 37;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesnumberformattype() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesnumberformattype() const {
  return _internal_has_tschchartseriesnumberformattype();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesnumberformattype() {
  tschchartseriesnumberformattype_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesnumberformattype() const {
  return tschchartseriesnumberformattype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesnumberformattype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformattype)
  return _internal_tschchartseriesnumberformattype();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  tschchartseriesnumberformattype_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesnumberformattype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesnumberformattype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformattype)
}

// optional float tschchartseriesopacity = 38;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesopacity() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesopacity() const {
  return _internal_has_tschchartseriesopacity();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesopacity() {
  tschchartseriesopacity_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesopacity() const {
  return tschchartseriesopacity_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriesopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesopacity)
  return _internal_tschchartseriesopacity();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesopacity(float value) {
  _has_bits_[1] |= 0x00002000u;
  tschchartseriesopacity_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesopacity(float value) {
  _internal_set_tschchartseriesopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesopacity)
}

// optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 39;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesoutsidelabelparagraphstyleindex() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesoutsidelabelparagraphstyleindex() const {
  return _internal_has_tschchartseriesoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesoutsidelabelparagraphstyleindex() {
  tschchartseriesoutsidelabelparagraphstyleindex_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesoutsidelabelparagraphstyleindex() const {
  return tschchartseriesoutsidelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesoutsidelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesoutsidelabelparagraphstyleindex)
  return _internal_tschchartseriesoutsidelabelparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00004000u;
  tschchartseriesoutsidelabelparagraphstyleindex_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesoutsidelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesoutsidelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesoutsidelabelparagraphstyleindex)
}

// optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 40;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriespercentnumberformat() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriespercentnumberformat_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriespercentnumberformat() const {
  return _internal_has_tschchartseriespercentnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriespercentnumberformat() const {
  const ::TSK::FormatStructArchive* p = tschchartseriespercentnumberformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriespercentnumberformat() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriespercentnumberformat)
  return _internal_tschchartseriespercentnumberformat();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriespercentnumberformat(
    ::TSK::FormatStructArchive* tschchartseriespercentnumberformat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespercentnumberformat_);
  }
  tschchartseriespercentnumberformat_ = tschchartseriespercentnumberformat;
  if (tschchartseriespercentnumberformat) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriespercentnumberformat)
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriespercentnumberformat() {
  _has_bits_[0] &= ~0x00080000u;
  ::TSK::FormatStructArchive* temp = tschchartseriespercentnumberformat_;
  tschchartseriespercentnumberformat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriespercentnumberformat() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriespercentnumberformat)
  _has_bits_[0] &= ~0x00080000u;
  ::TSK::FormatStructArchive* temp = tschchartseriespercentnumberformat_;
  tschchartseriespercentnumberformat_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriespercentnumberformat() {
  _has_bits_[0] |= 0x00080000u;
  if (tschchartseriespercentnumberformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    tschchartseriespercentnumberformat_ = p;
  }
  return tschchartseriespercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriespercentnumberformat() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_tschchartseriespercentnumberformat();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriespercentnumberformat)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriespercentnumberformat(::TSK::FormatStructArchive* tschchartseriespercentnumberformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespercentnumberformat_);
  }
  if (tschchartseriespercentnumberformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriespercentnumberformat));
    if (message_arena != submessage_arena) {
      tschchartseriespercentnumberformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriespercentnumberformat, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  tschchartseriespercentnumberformat_ = tschchartseriespercentnumberformat;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriespercentnumberformat)
}

// optional int32 tschchartseriesseriestype = 41;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesseriestype() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesseriestype() const {
  return _internal_has_tschchartseriesseriestype();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesseriestype() {
  tschchartseriesseriestype_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesseriestype() const {
  return tschchartseriesseriestype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesseriestype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesseriestype)
  return _internal_tschchartseriesseriestype();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesseriestype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  tschchartseriesseriestype_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesseriestype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesseriestype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesseriestype)
}

// optional .TSD.ShadowArchive tschchartseriesshadow = 42;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshadow() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshadow() const {
  return _internal_has_tschchartseriesshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriesshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshadow)
  return _internal_tschchartseriesshadow();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriesshadow(
    ::TSD::ShadowArchive* tschchartseriesshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesshadow_);
  }
  tschchartseriesshadow_ = tschchartseriesshadow;
  if (tschchartseriesshadow) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesshadow() {
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseriesshadow_;
  tschchartseriesshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriesshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshadow)
  _has_bits_[0] &= ~0x00100000u;
  ::TSD::ShadowArchive* temp = tschchartseriesshadow_;
  tschchartseriesshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriesshadow() {
  _has_bits_[0] |= 0x00100000u;
  if (tschchartseriesshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriesshadow_ = p;
  }
  return tschchartseriesshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriesshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshadow)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesshadow(::TSD::ShadowArchive* tschchartseriesshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesshadow_);
  }
  if (tschchartseriesshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesshadow));
    if (message_arena != submessage_arena) {
      tschchartseriesshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  tschchartseriesshadow_ = tschchartseriesshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshadow)
}

// optional bool tschchartseriesshowerrorbar = 43;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowerrorbar() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowerrorbar() const {
  return _internal_has_tschchartseriesshowerrorbar();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowerrorbar() {
  tschchartseriesshowerrorbar_ = false;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowerrorbar() const {
  return tschchartseriesshowerrorbar_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowerrorbar() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowerrorbar)
  return _internal_tschchartseriesshowerrorbar();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowerrorbar(bool value) {
  _has_bits_[1] |= 0x00010000u;
  tschchartseriesshowerrorbar_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowerrorbar(bool value) {
  _internal_set_tschchartseriesshowerrorbar(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowerrorbar)
}

// optional bool tschchartseriesshowerrorbarscatterx = 44;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowerrorbarscatterx() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowerrorbarscatterx() const {
  return _internal_has_tschchartseriesshowerrorbarscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowerrorbarscatterx() {
  tschchartseriesshowerrorbarscatterx_ = false;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowerrorbarscatterx() const {
  return tschchartseriesshowerrorbarscatterx_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowerrorbarscatterx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowerrorbarscatterx)
  return _internal_tschchartseriesshowerrorbarscatterx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowerrorbarscatterx(bool value) {
  _has_bits_[1] |= 0x00020000u;
  tschchartseriesshowerrorbarscatterx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowerrorbarscatterx(bool value) {
  _internal_set_tschchartseriesshowerrorbarscatterx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowerrorbarscatterx)
}

// optional bool tschchartseriesshowlabelsinfront = 45;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowlabelsinfront() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowlabelsinfront() const {
  return _internal_has_tschchartseriesshowlabelsinfront();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowlabelsinfront() {
  tschchartseriesshowlabelsinfront_ = false;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowlabelsinfront() const {
  return tschchartseriesshowlabelsinfront_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowlabelsinfront() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowlabelsinfront)
  return _internal_tschchartseriesshowlabelsinfront();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowlabelsinfront(bool value) {
  _has_bits_[1] |= 0x00040000u;
  tschchartseriesshowlabelsinfront_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowlabelsinfront(bool value) {
  _internal_set_tschchartseriesshowlabelsinfront(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowlabelsinfront)
}

// optional bool tschchartseriesshowline = 46;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowline() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowline() const {
  return _internal_has_tschchartseriesshowline();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowline() {
  tschchartseriesshowline_ = false;
  _has_bits_[1] &= ~0x00080000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowline() const {
  return tschchartseriesshowline_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowline)
  return _internal_tschchartseriesshowline();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowline(bool value) {
  _has_bits_[1] |= 0x00080000u;
  tschchartseriesshowline_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowline(bool value) {
  _internal_set_tschchartseriesshowline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowline)
}

// optional bool tschchartseriesshownegativedata = 47;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshownegativedata() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshownegativedata() const {
  return _internal_has_tschchartseriesshownegativedata();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshownegativedata() {
  tschchartseriesshownegativedata_ = false;
  _has_bits_[1] &= ~0x00100000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshownegativedata() const {
  return tschchartseriesshownegativedata_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshownegativedata() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshownegativedata)
  return _internal_tschchartseriesshownegativedata();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshownegativedata(bool value) {
  _has_bits_[1] |= 0x00100000u;
  tschchartseriesshownegativedata_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshownegativedata(bool value) {
  _internal_set_tschchartseriesshownegativedata(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshownegativedata)
}

// optional bool tschchartseriesshowserieslabels = 48;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowserieslabels() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowserieslabels() const {
  return _internal_has_tschchartseriesshowserieslabels();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowserieslabels() {
  tschchartseriesshowserieslabels_ = false;
  _has_bits_[1] &= ~0x00200000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowserieslabels() const {
  return tschchartseriesshowserieslabels_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowserieslabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowserieslabels)
  return _internal_tschchartseriesshowserieslabels();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowserieslabels(bool value) {
  _has_bits_[1] |= 0x00200000u;
  tschchartseriesshowserieslabels_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowserieslabels(bool value) {
  _internal_set_tschchartseriesshowserieslabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowserieslabels)
}

// optional bool tschchartseriesshowsymbol = 49;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowsymbol() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowsymbol() const {
  return _internal_has_tschchartseriesshowsymbol();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowsymbol() {
  tschchartseriesshowsymbol_ = false;
  _has_bits_[1] &= ~0x00400000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowsymbol() const {
  return tschchartseriesshowsymbol_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowsymbol() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowsymbol)
  return _internal_tschchartseriesshowsymbol();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowsymbol(bool value) {
  _has_bits_[1] |= 0x00400000u;
  tschchartseriesshowsymbol_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowsymbol(bool value) {
  _internal_set_tschchartseriesshowsymbol(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowsymbol)
}

// optional bool tschchartseriesshowtrendline = 50;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowtrendline() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowtrendline() const {
  return _internal_has_tschchartseriesshowtrendline();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowtrendline() {
  tschchartseriesshowtrendline_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowtrendline() const {
  return tschchartseriesshowtrendline_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowtrendline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowtrendline)
  return _internal_tschchartseriesshowtrendline();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowtrendline(bool value) {
  _has_bits_[1] |= 0x00800000u;
  tschchartseriesshowtrendline_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowtrendline(bool value) {
  _internal_set_tschchartseriesshowtrendline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowtrendline)
}

// optional bool tschchartseriesshowvaluelabels = 51;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesshowvaluelabels() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowvaluelabels() const {
  return _internal_has_tschchartseriesshowvaluelabels();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowvaluelabels() {
  tschchartseriesshowvaluelabels_ = false;
  _has_bits_[1] &= ~0x02000000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesshowvaluelabels() const {
  return tschchartseriesshowvaluelabels_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowvaluelabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowvaluelabels)
  return _internal_tschchartseriesshowvaluelabels();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesshowvaluelabels(bool value) {
  _has_bits_[1] |= 0x02000000u;
  tschchartseriesshowvaluelabels_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowvaluelabels(bool value) {
  _internal_set_tschchartseriesshowvaluelabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshowvaluelabels)
}

// optional int32 tschchartseriessizedimension = 52;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessizedimension() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessizedimension() const {
  return _internal_has_tschchartseriessizedimension();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessizedimension() {
  tschchartseriessizedimension_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessizedimension() const {
  return tschchartseriessizedimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriessizedimension() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessizedimension)
  return _internal_tschchartseriessizedimension();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriessizedimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x01000000u;
  tschchartseriessizedimension_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessizedimension(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriessizedimension(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessizedimension)
}

// optional bool tschchartseriesstacklabels = 53;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesstacklabels() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesstacklabels() const {
  return _internal_has_tschchartseriesstacklabels();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesstacklabels() {
  tschchartseriesstacklabels_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesstacklabels() const {
  return tschchartseriesstacklabels_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesstacklabels() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstacklabels)
  return _internal_tschchartseriesstacklabels();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesstacklabels(bool value) {
  _has_bits_[1] |= 0x04000000u;
  tschchartseriesstacklabels_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesstacklabels(bool value) {
  _internal_set_tschchartseriesstacklabels(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstacklabels)
}

// optional .TSD.StrokeArchive tschchartseriesstroke = 54;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesstroke() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriesstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesstroke() const {
  return _internal_has_tschchartseriesstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriesstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstroke)
  return _internal_tschchartseriesstroke();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriesstroke(
    ::TSD::StrokeArchive* tschchartseriesstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstroke_);
  }
  tschchartseriesstroke_ = tschchartseriesstroke;
  if (tschchartseriesstroke) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesstroke() {
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::StrokeArchive* temp = tschchartseriesstroke_;
  tschchartseriesstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriesstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstroke)
  _has_bits_[0] &= ~0x00200000u;
  ::TSD::StrokeArchive* temp = tschchartseriesstroke_;
  tschchartseriesstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriesstroke() {
  _has_bits_[0] |= 0x00200000u;
  if (tschchartseriesstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriesstroke_ = p;
  }
  return tschchartseriesstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriesstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstroke)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesstroke(::TSD::StrokeArchive* tschchartseriesstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstroke_);
  }
  if (tschchartseriesstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriesstroke));
    if (message_arena != submessage_arena) {
      tschchartseriesstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriesstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  tschchartseriesstroke_ = tschchartseriesstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstroke)
}

// optional .TSD.FillArchive tschchartseriessymbolfill = 55;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessymbolfill() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriessymbolfill_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolfill() const {
  return _internal_has_tschchartseriessymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessymbolfill() const {
  const ::TSD::FillArchive* p = tschchartseriessymbolfill_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::FillArchive&>(
      ::TSD::_FillArchive_default_instance_);
}
inline const ::TSD::FillArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfill)
  return _internal_tschchartseriessymbolfill();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriessymbolfill(
    ::TSD::FillArchive* tschchartseriessymbolfill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriessymbolfill_);
  }
  tschchartseriessymbolfill_ = tschchartseriessymbolfill;
  if (tschchartseriessymbolfill) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfill)
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriessymbolfill() {
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::FillArchive* temp = tschchartseriessymbolfill_;
  tschchartseriessymbolfill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriessymbolfill() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfill)
  _has_bits_[0] &= ~0x00400000u;
  ::TSD::FillArchive* temp = tschchartseriessymbolfill_;
  tschchartseriessymbolfill_ = nullptr;
  return temp;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriessymbolfill() {
  _has_bits_[0] |= 0x00400000u;
  if (tschchartseriessymbolfill_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::FillArchive>(GetArenaForAllocation());
    tschchartseriessymbolfill_ = p;
  }
  return tschchartseriessymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriessymbolfill() {
  ::TSD::FillArchive* _msg = _internal_mutable_tschchartseriessymbolfill();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfill)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriessymbolfill(::TSD::FillArchive* tschchartseriessymbolfill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriessymbolfill_);
  }
  if (tschchartseriessymbolfill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriessymbolfill));
    if (message_arena != submessage_arena) {
      tschchartseriessymbolfill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriessymbolfill, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  tschchartseriessymbolfill_ = tschchartseriessymbolfill;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfill)
}

// optional bool tschchartseriessymbolfilluseseriesfill = 56;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessymbolfilluseseriesfill() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolfilluseseriesfill() const {
  return _internal_has_tschchartseriessymbolfilluseseriesfill();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfilluseseriesfill() {
  tschchartseriessymbolfilluseseriesfill_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessymbolfilluseseriesfill() const {
  return tschchartseriessymbolfilluseseriesfill_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolfilluseseriesfill() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfilluseseriesfill)
  return _internal_tschchartseriessymbolfilluseseriesfill();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriessymbolfilluseseriesfill(bool value) {
  _has_bits_[1] |= 0x08000000u;
  tschchartseriessymbolfilluseseriesfill_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymbolfilluseseriesfill(bool value) {
  _internal_set_tschchartseriessymbolfilluseseriesfill(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfilluseseriesfill)
}

// optional bool tschchartseriessymbolfilluseseriesstroke = 57;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessymbolfilluseseriesstroke() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolfilluseseriesstroke() const {
  return _internal_has_tschchartseriessymbolfilluseseriesstroke();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfilluseseriesstroke() {
  tschchartseriessymbolfilluseseriesstroke_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessymbolfilluseseriesstroke() const {
  return tschchartseriessymbolfilluseseriesstroke_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolfilluseseriesstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfilluseseriesstroke)
  return _internal_tschchartseriessymbolfilluseseriesstroke();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriessymbolfilluseseriesstroke(bool value) {
  _has_bits_[1] |= 0x10000000u;
  tschchartseriessymbolfilluseseriesstroke_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymbolfilluseseriesstroke(bool value) {
  _internal_set_tschchartseriessymbolfilluseseriesstroke(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfilluseseriesstroke)
}

// optional float tschchartseriessymbolsize = 58;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessymbolsize() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolsize() const {
  return _internal_has_tschchartseriessymbolsize();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolsize() {
  tschchartseriessymbolsize_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessymbolsize() const {
  return tschchartseriessymbolsize_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolsize() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolsize)
  return _internal_tschchartseriessymbolsize();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriessymbolsize(float value) {
  _has_bits_[1] |= 0x20000000u;
  tschchartseriessymbolsize_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymbolsize(float value) {
  _internal_set_tschchartseriessymbolsize(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolsize)
}

// optional .TSD.StrokeArchive tschchartseriessymbolstroke = 59;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessymbolstroke() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriessymbolstroke_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolstroke() const {
  return _internal_has_tschchartseriessymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessymbolstroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriessymbolstroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolstroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolstroke)
  return _internal_tschchartseriessymbolstroke();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriessymbolstroke(
    ::TSD::StrokeArchive* tschchartseriessymbolstroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriessymbolstroke_);
  }
  tschchartseriessymbolstroke_ = tschchartseriessymbolstroke;
  if (tschchartseriessymbolstroke) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolstroke)
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriessymbolstroke() {
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::StrokeArchive* temp = tschchartseriessymbolstroke_;
  tschchartseriessymbolstroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriessymbolstroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolstroke)
  _has_bits_[0] &= ~0x00800000u;
  ::TSD::StrokeArchive* temp = tschchartseriessymbolstroke_;
  tschchartseriessymbolstroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriessymbolstroke() {
  _has_bits_[0] |= 0x00800000u;
  if (tschchartseriessymbolstroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriessymbolstroke_ = p;
  }
  return tschchartseriessymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriessymbolstroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriessymbolstroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolstroke)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriessymbolstroke(::TSD::StrokeArchive* tschchartseriessymbolstroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriessymbolstroke_);
  }
  if (tschchartseriessymbolstroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriessymbolstroke));
    if (message_arena != submessage_arena) {
      tschchartseriessymbolstroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriessymbolstroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  tschchartseriessymbolstroke_ = tschchartseriessymbolstroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolstroke)
}

// optional int32 tschchartseriessymboltype = 60;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriessymboltype() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymboltype() const {
  return _internal_has_tschchartseriessymboltype();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymboltype() {
  tschchartseriessymboltype_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriessymboltype() const {
  return tschchartseriessymboltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriessymboltype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymboltype)
  return _internal_tschchartseriessymboltype();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriessymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x40000000u;
  tschchartseriessymboltype_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymboltype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriessymboltype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymboltype)
}

// optional float tschchartseriestrendlineequationoffsetx = 61;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineequationoffsetx() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationoffsetx() const {
  return _internal_has_tschchartseriestrendlineequationoffsetx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationoffsetx() {
  tschchartseriestrendlineequationoffsetx_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineequationoffsetx() const {
  return tschchartseriestrendlineequationoffsetx_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationoffsetx)
  return _internal_tschchartseriestrendlineequationoffsetx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineequationoffsetx(float value) {
  _has_bits_[1] |= 0x80000000u;
  tschchartseriestrendlineequationoffsetx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationoffsetx(float value) {
  _internal_set_tschchartseriestrendlineequationoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationoffsetx)
}

// optional float tschchartseriestrendlineequationoffsety = 62;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineequationoffsety() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationoffsety() const {
  return _internal_has_tschchartseriestrendlineequationoffsety();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationoffsety() {
  tschchartseriestrendlineequationoffsety_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineequationoffsety() const {
  return tschchartseriestrendlineequationoffsety_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationoffsety)
  return _internal_tschchartseriestrendlineequationoffsety();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineequationoffsety(float value) {
  _has_bits_[2] |= 0x00000001u;
  tschchartseriestrendlineequationoffsety_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationoffsety(float value) {
  _internal_set_tschchartseriestrendlineequationoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationoffsety)
}

// optional string tschchartseriestrendlinelabelstring = 63;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinelabelstring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinelabelstring() const {
  return _internal_has_tschchartseriestrendlinelabelstring();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinelabelstring() {
  tschchartseriestrendlinelabelstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinelabelstring() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring)
  return _internal_tschchartseriestrendlinelabelstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinelabelstring(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschchartseriestrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring)
}
inline std::string* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriestrendlinelabelstring() {
  std::string* _s = _internal_mutable_tschchartseriestrendlinelabelstring();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring)
  return _s;
}
inline const std::string& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinelabelstring() const {
  return tschchartseriestrendlinelabelstring_.Get();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlinelabelstring(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschchartseriestrendlinelabelstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriestrendlinelabelstring() {
  _has_bits_[0] |= 0x00000001u;
  return tschchartseriestrendlinelabelstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChartSeriesGenericPropertyMapArchive::release_tschchartseriestrendlinelabelstring() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring)
  if (!_internal_has_tschchartseriestrendlinelabelstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschchartseriestrendlinelabelstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriestrendlinelabelstring(std::string* tschchartseriestrendlinelabelstring) {
  if (tschchartseriestrendlinelabelstring != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschchartseriestrendlinelabelstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschchartseriestrendlinelabelstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring)
}

// optional int32 tschchartseriestrendlineorder = 64;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineorder() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineorder() const {
  return _internal_has_tschchartseriestrendlineorder();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineorder() {
  tschchartseriestrendlineorder_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineorder() const {
  return tschchartseriestrendlineorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineorder() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineorder)
  return _internal_tschchartseriestrendlineorder();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000002u;
  tschchartseriestrendlineorder_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineorder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriestrendlineorder(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineorder)
}

// optional int32 tschchartseriestrendlineperiod = 65;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineperiod() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineperiod() const {
  return _internal_has_tschchartseriestrendlineperiod();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineperiod() {
  tschchartseriestrendlineperiod_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineperiod() const {
  return tschchartseriestrendlineperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineperiod() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineperiod)
  return _internal_tschchartseriestrendlineperiod();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000004u;
  tschchartseriestrendlineperiod_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineperiod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriestrendlineperiod(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineperiod)
}

// optional float tschchartseriestrendlinersquaredoffsetx = 66;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinersquaredoffsetx() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredoffsetx() const {
  return _internal_has_tschchartseriestrendlinersquaredoffsetx();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredoffsetx() {
  tschchartseriestrendlinersquaredoffsetx_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinersquaredoffsetx() const {
  return tschchartseriestrendlinersquaredoffsetx_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredoffsetx() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredoffsetx)
  return _internal_tschchartseriestrendlinersquaredoffsetx();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlinersquaredoffsetx(float value) {
  _has_bits_[2] |= 0x00000008u;
  tschchartseriestrendlinersquaredoffsetx_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredoffsetx(float value) {
  _internal_set_tschchartseriestrendlinersquaredoffsetx(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredoffsetx)
}

// optional float tschchartseriestrendlinersquaredoffsety = 67;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinersquaredoffsety() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredoffsety() const {
  return _internal_has_tschchartseriestrendlinersquaredoffsety();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredoffsety() {
  tschchartseriestrendlinersquaredoffsety_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinersquaredoffsety() const {
  return tschchartseriestrendlinersquaredoffsety_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredoffsety() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredoffsety)
  return _internal_tschchartseriestrendlinersquaredoffsety();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlinersquaredoffsety(float value) {
  _has_bits_[2] |= 0x00000010u;
  tschchartseriestrendlinersquaredoffsety_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredoffsety(float value) {
  _internal_set_tschchartseriestrendlinersquaredoffsety(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredoffsety)
}

// optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 68;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineshadow() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriestrendlineshadow_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshadow() const {
  return _internal_has_tschchartseriestrendlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineshadow() const {
  const ::TSD::ShadowArchive* p = tschchartseriestrendlineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshadow)
  return _internal_tschchartseriestrendlineshadow();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriestrendlineshadow(
    ::TSD::ShadowArchive* tschchartseriestrendlineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriestrendlineshadow_);
  }
  tschchartseriestrendlineshadow_ = tschchartseriestrendlineshadow;
  if (tschchartseriestrendlineshadow) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshadow)
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriestrendlineshadow() {
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartseriestrendlineshadow_;
  tschchartseriestrendlineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriestrendlineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshadow)
  _has_bits_[0] &= ~0x01000000u;
  ::TSD::ShadowArchive* temp = tschchartseriestrendlineshadow_;
  tschchartseriestrendlineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriestrendlineshadow() {
  _has_bits_[0] |= 0x01000000u;
  if (tschchartseriestrendlineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschchartseriestrendlineshadow_ = p;
  }
  return tschchartseriestrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriestrendlineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschchartseriestrendlineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshadow)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriestrendlineshadow(::TSD::ShadowArchive* tschchartseriestrendlineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriestrendlineshadow_);
  }
  if (tschchartseriestrendlineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriestrendlineshadow));
    if (message_arena != submessage_arena) {
      tschchartseriestrendlineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriestrendlineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  tschchartseriestrendlineshadow_ = tschchartseriestrendlineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshadow)
}

// optional bool tschchartseriestrendlineshowequation = 69;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineshowequation() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshowequation() const {
  return _internal_has_tschchartseriestrendlineshowequation();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshowequation() {
  tschchartseriestrendlineshowequation_ = false;
  _has_bits_[2] &= ~0x00000020u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineshowequation() const {
  return tschchartseriestrendlineshowequation_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshowequation() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshowequation)
  return _internal_tschchartseriestrendlineshowequation();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineshowequation(bool value) {
  _has_bits_[2] |= 0x00000020u;
  tschchartseriestrendlineshowequation_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineshowequation(bool value) {
  _internal_set_tschchartseriestrendlineshowequation(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshowequation)
}

// optional bool tschchartseriestrendlineshowlabel = 70;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineshowlabel() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshowlabel() const {
  return _internal_has_tschchartseriestrendlineshowlabel();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshowlabel() {
  tschchartseriestrendlineshowlabel_ = false;
  _has_bits_[2] &= ~0x00000040u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineshowlabel() const {
  return tschchartseriestrendlineshowlabel_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshowlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshowlabel)
  return _internal_tschchartseriestrendlineshowlabel();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineshowlabel(bool value) {
  _has_bits_[2] |= 0x00000040u;
  tschchartseriestrendlineshowlabel_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineshowlabel(bool value) {
  _internal_set_tschchartseriestrendlineshowlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshowlabel)
}

// optional bool tschchartseriestrendlineshowr2value = 71;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineshowr2value() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshowr2value() const {
  return _internal_has_tschchartseriestrendlineshowr2value();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshowr2value() {
  tschchartseriestrendlineshowr2value_ = false;
  _has_bits_[2] &= ~0x00000080u;
}
inline bool ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineshowr2value() const {
  return tschchartseriestrendlineshowr2value_;
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshowr2value() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshowr2value)
  return _internal_tschchartseriestrendlineshowr2value();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineshowr2value(bool value) {
  _has_bits_[2] |= 0x00000080u;
  tschchartseriestrendlineshowr2value_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineshowr2value(bool value) {
  _internal_set_tschchartseriestrendlineshowr2value(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshowr2value)
}

// optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 72;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinestroke() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || tschchartseriestrendlinestroke_ != nullptr);
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinestroke() const {
  return _internal_has_tschchartseriestrendlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinestroke() const {
  const ::TSD::StrokeArchive* p = tschchartseriestrendlinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinestroke)
  return _internal_tschchartseriestrendlinestroke();
}
inline void ChartSeriesGenericPropertyMapArchive::unsafe_arena_set_allocated_tschchartseriestrendlinestroke(
    ::TSD::StrokeArchive* tschchartseriestrendlinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriestrendlinestroke_);
  }
  tschchartseriestrendlinestroke_ = tschchartseriestrendlinestroke;
  if (tschchartseriestrendlinestroke) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinestroke)
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriestrendlinestroke() {
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::StrokeArchive* temp = tschchartseriestrendlinestroke_;
  tschchartseriestrendlinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::unsafe_arena_release_tschchartseriestrendlinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinestroke)
  _has_bits_[0] &= ~0x02000000u;
  ::TSD::StrokeArchive* temp = tschchartseriestrendlinestroke_;
  tschchartseriestrendlinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::_internal_mutable_tschchartseriestrendlinestroke() {
  _has_bits_[0] |= 0x02000000u;
  if (tschchartseriestrendlinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschchartseriestrendlinestroke_ = p;
  }
  return tschchartseriestrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriestrendlinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschchartseriestrendlinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinestroke)
  return _msg;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriestrendlinestroke(::TSD::StrokeArchive* tschchartseriestrendlinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriestrendlinestroke_);
  }
  if (tschchartseriestrendlinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschchartseriestrendlinestroke));
    if (message_arena != submessage_arena) {
      tschchartseriestrendlinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschchartseriestrendlinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  tschchartseriestrendlinestroke_ = tschchartseriestrendlinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinestroke)
}

// optional int32 tschchartseriestrendlinetype = 73;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinetype() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinetype() const {
  return _internal_has_tschchartseriestrendlinetype();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinetype() {
  tschchartseriestrendlinetype_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinetype() const {
  return tschchartseriestrendlinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinetype)
  return _internal_tschchartseriestrendlinetype();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000100u;
  tschchartseriestrendlinetype_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriestrendlinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinetype)
}

// optional float tschchartseriestrendlineequationopacity = 74;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineequationopacity() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationopacity() const {
  return _internal_has_tschchartseriestrendlineequationopacity();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationopacity() {
  tschchartseriestrendlineequationopacity_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineequationopacity() const {
  return tschchartseriestrendlineequationopacity_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationopacity)
  return _internal_tschchartseriestrendlineequationopacity();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineequationopacity(float value) {
  _has_bits_[2] |= 0x00000200u;
  tschchartseriestrendlineequationopacity_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationopacity(float value) {
  _internal_set_tschchartseriestrendlineequationopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationopacity)
}

// optional int32 tschchartseriestrendlineequationparagraphstyleindex = 75;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlineequationparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationparagraphstyleindex() const {
  return _internal_has_tschchartseriestrendlineequationparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationparagraphstyleindex() {
  tschchartseriestrendlineequationparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlineequationparagraphstyleindex() const {
  return tschchartseriestrendlineequationparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationparagraphstyleindex)
  return _internal_tschchartseriestrendlineequationparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00000400u;
  tschchartseriestrendlineequationparagraphstyleindex_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriestrendlineequationparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineequationparagraphstyleindex)
}

// optional float tschchartseriestrendlinersquaredopacity = 76;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinersquaredopacity() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredopacity() const {
  return _internal_has_tschchartseriestrendlinersquaredopacity();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredopacity() {
  tschchartseriestrendlinersquaredopacity_ = 0;
  _has_bits_[2] &= ~0x00000800u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinersquaredopacity() const {
  return tschchartseriestrendlinersquaredopacity_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredopacity() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredopacity)
  return _internal_tschchartseriestrendlinersquaredopacity();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlinersquaredopacity(float value) {
  _has_bits_[2] |= 0x00000800u;
  tschchartseriestrendlinersquaredopacity_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredopacity(float value) {
  _internal_set_tschchartseriestrendlinersquaredopacity(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredopacity)
}

// optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 77;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriestrendlinersquaredparagraphstyleindex() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredparagraphstyleindex() const {
  return _internal_has_tschchartseriestrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredparagraphstyleindex() {
  tschchartseriestrendlinersquaredparagraphstyleindex_ = 0;
  _has_bits_[2] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriestrendlinersquaredparagraphstyleindex() const {
  return tschchartseriestrendlinersquaredparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredparagraphstyleindex)
  return _internal_tschchartseriestrendlinersquaredparagraphstyleindex();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriestrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00001000u;
  tschchartseriestrendlinersquaredparagraphstyleindex_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriestrendlinersquaredparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinersquaredparagraphstyleindex)
}

// optional int32 tschchartseriesvaluelabelposition = 78;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesvaluelabelposition() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesvaluelabelposition() const {
  return _internal_has_tschchartseriesvaluelabelposition();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesvaluelabelposition() {
  tschchartseriesvaluelabelposition_ = 0;
  _has_bits_[2] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesvaluelabelposition() const {
  return tschchartseriesvaluelabelposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesvaluelabelposition() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesvaluelabelposition)
  return _internal_tschchartseriesvaluelabelposition();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00002000u;
  tschchartseriesvaluelabelposition_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesvaluelabelposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesvaluelabelposition(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesvaluelabelposition)
}

// optional int32 tschchartseriesvaluelabelspacing = 79;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesvaluelabelspacing() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesvaluelabelspacing() const {
  return _internal_has_tschchartseriesvaluelabelspacing();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesvaluelabelspacing() {
  tschchartseriesvaluelabelspacing_ = 0;
  _has_bits_[2] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesvaluelabelspacing() const {
  return tschchartseriesvaluelabelspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesvaluelabelspacing() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesvaluelabelspacing)
  return _internal_tschchartseriesvaluelabelspacing();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00004000u;
  tschchartseriesvaluelabelspacing_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesvaluelabelspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesvaluelabelspacing(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesvaluelabelspacing)
}

// optional int32 tschchartseriesvaluelabelsaxis = 80;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesvaluelabelsaxis() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesvaluelabelsaxis() const {
  return _internal_has_tschchartseriesvaluelabelsaxis();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesvaluelabelsaxis() {
  tschchartseriesvaluelabelsaxis_ = 0;
  _has_bits_[2] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesvaluelabelsaxis() const {
  return tschchartseriesvaluelabelsaxis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesvaluelabelsaxis() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesvaluelabelsaxis)
  return _internal_tschchartseriesvaluelabelsaxis();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesvaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00008000u;
  tschchartseriesvaluelabelsaxis_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesvaluelabelsaxis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesvaluelabelsaxis(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesvaluelabelsaxis)
}

// optional float tschchartserieswedgeexplosion = 81;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartserieswedgeexplosion() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieswedgeexplosion() const {
  return _internal_has_tschchartserieswedgeexplosion();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieswedgeexplosion() {
  tschchartserieswedgeexplosion_ = 0;
  _has_bits_[2] &= ~0x00010000u;
}
inline float ChartSeriesGenericPropertyMapArchive::_internal_tschchartserieswedgeexplosion() const {
  return tschchartserieswedgeexplosion_;
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieswedgeexplosion() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieswedgeexplosion)
  return _internal_tschchartserieswedgeexplosion();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartserieswedgeexplosion(float value) {
  _has_bits_[2] |= 0x00010000u;
  tschchartserieswedgeexplosion_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieswedgeexplosion(float value) {
  _internal_set_tschchartserieswedgeexplosion(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieswedgeexplosion)
}

// optional int32 tschchartseriesyaxisordinal = 82;
inline bool ChartSeriesGenericPropertyMapArchive::_internal_has_tschchartseriesyaxisordinal() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesyaxisordinal() const {
  return _internal_has_tschchartseriesyaxisordinal();
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesyaxisordinal() {
  tschchartseriesyaxisordinal_ = 0;
  _has_bits_[2] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::_internal_tschchartseriesyaxisordinal() const {
  return tschchartseriesyaxisordinal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesyaxisordinal() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesyaxisordinal)
  return _internal_tschchartseriesyaxisordinal();
}
inline void ChartSeriesGenericPropertyMapArchive::_internal_set_tschchartseriesyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[2] |= 0x00020000u;
  tschchartseriesyaxisordinal_ = value;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesyaxisordinal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschchartseriesyaxisordinal(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesyaxisordinal)
}

// -------------------------------------------------------------------

// ReferenceLineGenericPropertyMapArchive

// optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelinecustomvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tschreferencelinecustomvalue_ != nullptr);
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelinecustomvalue() const {
  return _internal_has_tschreferencelinecustomvalue();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelinecustomvalue() const {
  const ::TSCH::ChartsNSNumberDoubleArchive* p = tschreferencelinecustomvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartsNSNumberDoubleArchive&>(
      ::TSCH::_ChartsNSNumberDoubleArchive_default_instance_);
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ReferenceLineGenericPropertyMapArchive::tschreferencelinecustomvalue() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinecustomvalue)
  return _internal_tschreferencelinecustomvalue();
}
inline void ReferenceLineGenericPropertyMapArchive::unsafe_arena_set_allocated_tschreferencelinecustomvalue(
    ::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinecustomvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinecustomvalue_);
  }
  tschreferencelinecustomvalue_ = tschreferencelinecustomvalue;
  if (tschreferencelinecustomvalue) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinecustomvalue)
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineGenericPropertyMapArchive::release_tschreferencelinecustomvalue() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschreferencelinecustomvalue_;
  tschreferencelinecustomvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineGenericPropertyMapArchive::unsafe_arena_release_tschreferencelinecustomvalue() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinecustomvalue)
  _has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschreferencelinecustomvalue_;
  tschreferencelinecustomvalue_ = nullptr;
  return temp;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineGenericPropertyMapArchive::_internal_mutable_tschreferencelinecustomvalue() {
  _has_bits_[0] |= 0x00000002u;
  if (tschreferencelinecustomvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartsNSNumberDoubleArchive>(GetArenaForAllocation());
    tschreferencelinecustomvalue_ = p;
  }
  return tschreferencelinecustomvalue_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ReferenceLineGenericPropertyMapArchive::mutable_tschreferencelinecustomvalue() {
  ::TSCH::ChartsNSNumberDoubleArchive* _msg = _internal_mutable_tschreferencelinecustomvalue();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinecustomvalue)
  return _msg;
}
inline void ReferenceLineGenericPropertyMapArchive::set_allocated_tschreferencelinecustomvalue(::TSCH::ChartsNSNumberDoubleArchive* tschreferencelinecustomvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinecustomvalue_);
  }
  if (tschreferencelinecustomvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinecustomvalue));
    if (message_arena != submessage_arena) {
      tschreferencelinecustomvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschreferencelinecustomvalue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tschreferencelinecustomvalue_ = tschreferencelinecustomvalue;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinecustomvalue)
}

// optional string tschreferencelinelabel = 2;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelinelabel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelinelabel() const {
  return _internal_has_tschreferencelinelabel();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinelabel() {
  tschreferencelinelabel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReferenceLineGenericPropertyMapArchive::tschreferencelinelabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel)
  return _internal_tschreferencelinelabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferenceLineGenericPropertyMapArchive::set_tschreferencelinelabel(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tschreferencelinelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel)
}
inline std::string* ReferenceLineGenericPropertyMapArchive::mutable_tschreferencelinelabel() {
  std::string* _s = _internal_mutable_tschreferencelinelabel();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel)
  return _s;
}
inline const std::string& ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelinelabel() const {
  return tschreferencelinelabel_.Get();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelinelabel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tschreferencelinelabel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReferenceLineGenericPropertyMapArchive::_internal_mutable_tschreferencelinelabel() {
  _has_bits_[0] |= 0x00000001u;
  return tschreferencelinelabel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReferenceLineGenericPropertyMapArchive::release_tschreferencelinelabel() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel)
  if (!_internal_has_tschreferencelinelabel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tschreferencelinelabel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReferenceLineGenericPropertyMapArchive::set_allocated_tschreferencelinelabel(std::string* tschreferencelinelabel) {
  if (tschreferencelinelabel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tschreferencelinelabel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tschreferencelinelabel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel)
}

// optional int32 tschreferencelinelabelparagraphstyleindex = 3;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelinelabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelinelabelparagraphstyleindex() const {
  return _internal_has_tschreferencelinelabelparagraphstyleindex();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinelabelparagraphstyleindex() {
  tschreferencelinelabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelinelabelparagraphstyleindex() const {
  return tschreferencelinelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineGenericPropertyMapArchive::tschreferencelinelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabelparagraphstyleindex)
  return _internal_tschreferencelinelabelparagraphstyleindex();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  tschreferencelinelabelparagraphstyleindex_ = value;
}
inline void ReferenceLineGenericPropertyMapArchive::set_tschreferencelinelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschreferencelinelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabelparagraphstyleindex)
}

// optional .TSD.ShadowArchive tschreferencelineshadow = 4;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelineshadow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tschreferencelineshadow_ != nullptr);
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelineshadow() const {
  return _internal_has_tschreferencelineshadow();
}
inline const ::TSD::ShadowArchive& ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelineshadow() const {
  const ::TSD::ShadowArchive* p = tschreferencelineshadow_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ShadowArchive&>(
      ::TSD::_ShadowArchive_default_instance_);
}
inline const ::TSD::ShadowArchive& ReferenceLineGenericPropertyMapArchive::tschreferencelineshadow() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshadow)
  return _internal_tschreferencelineshadow();
}
inline void ReferenceLineGenericPropertyMapArchive::unsafe_arena_set_allocated_tschreferencelineshadow(
    ::TSD::ShadowArchive* tschreferencelineshadow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelineshadow_);
  }
  tschreferencelineshadow_ = tschreferencelineshadow;
  if (tschreferencelineshadow) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshadow)
}
inline ::TSD::ShadowArchive* ReferenceLineGenericPropertyMapArchive::release_tschreferencelineshadow() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = tschreferencelineshadow_;
  tschreferencelineshadow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ShadowArchive* ReferenceLineGenericPropertyMapArchive::unsafe_arena_release_tschreferencelineshadow() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshadow)
  _has_bits_[0] &= ~0x00000004u;
  ::TSD::ShadowArchive* temp = tschreferencelineshadow_;
  tschreferencelineshadow_ = nullptr;
  return temp;
}
inline ::TSD::ShadowArchive* ReferenceLineGenericPropertyMapArchive::_internal_mutable_tschreferencelineshadow() {
  _has_bits_[0] |= 0x00000004u;
  if (tschreferencelineshadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ShadowArchive>(GetArenaForAllocation());
    tschreferencelineshadow_ = p;
  }
  return tschreferencelineshadow_;
}
inline ::TSD::ShadowArchive* ReferenceLineGenericPropertyMapArchive::mutable_tschreferencelineshadow() {
  ::TSD::ShadowArchive* _msg = _internal_mutable_tschreferencelineshadow();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshadow)
  return _msg;
}
inline void ReferenceLineGenericPropertyMapArchive::set_allocated_tschreferencelineshadow(::TSD::ShadowArchive* tschreferencelineshadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelineshadow_);
  }
  if (tschreferencelineshadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelineshadow));
    if (message_arena != submessage_arena) {
      tschreferencelineshadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschreferencelineshadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tschreferencelineshadow_ = tschreferencelineshadow;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshadow)
}

// optional bool tschreferencelineshowlabel = 5;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelineshowlabel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelineshowlabel() const {
  return _internal_has_tschreferencelineshowlabel();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelineshowlabel() {
  tschreferencelineshowlabel_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelineshowlabel() const {
  return tschreferencelineshowlabel_;
}
inline bool ReferenceLineGenericPropertyMapArchive::tschreferencelineshowlabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshowlabel)
  return _internal_tschreferencelineshowlabel();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelineshowlabel(bool value) {
  _has_bits_[0] |= 0x00000020u;
  tschreferencelineshowlabel_ = value;
}
inline void ReferenceLineGenericPropertyMapArchive::set_tschreferencelineshowlabel(bool value) {
  _internal_set_tschreferencelineshowlabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshowlabel)
}

// optional bool tschreferencelineshowline = 6;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelineshowline() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelineshowline() const {
  return _internal_has_tschreferencelineshowline();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelineshowline() {
  tschreferencelineshowline_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelineshowline() const {
  return tschreferencelineshowline_;
}
inline bool ReferenceLineGenericPropertyMapArchive::tschreferencelineshowline() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshowline)
  return _internal_tschreferencelineshowline();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelineshowline(bool value) {
  _has_bits_[0] |= 0x00000040u;
  tschreferencelineshowline_ = value;
}
inline void ReferenceLineGenericPropertyMapArchive::set_tschreferencelineshowline(bool value) {
  _internal_set_tschreferencelineshowline(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshowline)
}

// optional bool tschreferencelineshowvaluelabel = 7;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelineshowvaluelabel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelineshowvaluelabel() const {
  return _internal_has_tschreferencelineshowvaluelabel();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelineshowvaluelabel() {
  tschreferencelineshowvaluelabel_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelineshowvaluelabel() const {
  return tschreferencelineshowvaluelabel_;
}
inline bool ReferenceLineGenericPropertyMapArchive::tschreferencelineshowvaluelabel() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshowvaluelabel)
  return _internal_tschreferencelineshowvaluelabel();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelineshowvaluelabel(bool value) {
  _has_bits_[0] |= 0x00000080u;
  tschreferencelineshowvaluelabel_ = value;
}
inline void ReferenceLineGenericPropertyMapArchive::set_tschreferencelineshowvaluelabel(bool value) {
  _internal_set_tschreferencelineshowvaluelabel(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshowvaluelabel)
}

// optional .TSD.StrokeArchive tschreferencelinestroke = 8;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelinestroke() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tschreferencelinestroke_ != nullptr);
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelinestroke() const {
  return _internal_has_tschreferencelinestroke();
}
inline const ::TSD::StrokeArchive& ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelinestroke() const {
  const ::TSD::StrokeArchive* p = tschreferencelinestroke_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::StrokeArchive&>(
      ::TSD::_StrokeArchive_default_instance_);
}
inline const ::TSD::StrokeArchive& ReferenceLineGenericPropertyMapArchive::tschreferencelinestroke() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinestroke)
  return _internal_tschreferencelinestroke();
}
inline void ReferenceLineGenericPropertyMapArchive::unsafe_arena_set_allocated_tschreferencelinestroke(
    ::TSD::StrokeArchive* tschreferencelinestroke) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinestroke_);
  }
  tschreferencelinestroke_ = tschreferencelinestroke;
  if (tschreferencelinestroke) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinestroke)
}
inline ::TSD::StrokeArchive* ReferenceLineGenericPropertyMapArchive::release_tschreferencelinestroke() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschreferencelinestroke_;
  tschreferencelinestroke_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::StrokeArchive* ReferenceLineGenericPropertyMapArchive::unsafe_arena_release_tschreferencelinestroke() {
  // @@protoc_insertion_point(field_release:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinestroke)
  _has_bits_[0] &= ~0x00000008u;
  ::TSD::StrokeArchive* temp = tschreferencelinestroke_;
  tschreferencelinestroke_ = nullptr;
  return temp;
}
inline ::TSD::StrokeArchive* ReferenceLineGenericPropertyMapArchive::_internal_mutable_tschreferencelinestroke() {
  _has_bits_[0] |= 0x00000008u;
  if (tschreferencelinestroke_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::StrokeArchive>(GetArenaForAllocation());
    tschreferencelinestroke_ = p;
  }
  return tschreferencelinestroke_;
}
inline ::TSD::StrokeArchive* ReferenceLineGenericPropertyMapArchive::mutable_tschreferencelinestroke() {
  ::TSD::StrokeArchive* _msg = _internal_mutable_tschreferencelinestroke();
  // @@protoc_insertion_point(field_mutable:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinestroke)
  return _msg;
}
inline void ReferenceLineGenericPropertyMapArchive::set_allocated_tschreferencelinestroke(::TSD::StrokeArchive* tschreferencelinestroke) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinestroke_);
  }
  if (tschreferencelinestroke) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tschreferencelinestroke));
    if (message_arena != submessage_arena) {
      tschreferencelinestroke = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tschreferencelinestroke, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tschreferencelinestroke_ = tschreferencelinestroke;
  // @@protoc_insertion_point(field_set_allocated:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinestroke)
}

// optional int32 tschreferencelinetype = 9;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelinetype() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelinetype() const {
  return _internal_has_tschreferencelinetype();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinetype() {
  tschreferencelinetype_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelinetype() const {
  return tschreferencelinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineGenericPropertyMapArchive::tschreferencelinetype() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinetype)
  return _internal_tschreferencelinetype();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  tschreferencelinetype_ = value;
}
inline void ReferenceLineGenericPropertyMapArchive::set_tschreferencelinetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschreferencelinetype(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinetype)
}

// optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
inline bool ReferenceLineGenericPropertyMapArchive::_internal_has_tschreferencelinevaluelabelparagraphstyleindex() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReferenceLineGenericPropertyMapArchive::has_tschreferencelinevaluelabelparagraphstyleindex() const {
  return _internal_has_tschreferencelinevaluelabelparagraphstyleindex();
}
inline void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinevaluelabelparagraphstyleindex() {
  tschreferencelinevaluelabelparagraphstyleindex_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineGenericPropertyMapArchive::_internal_tschreferencelinevaluelabelparagraphstyleindex() const {
  return tschreferencelinevaluelabelparagraphstyleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReferenceLineGenericPropertyMapArchive::tschreferencelinevaluelabelparagraphstyleindex() const {
  // @@protoc_insertion_point(field_get:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinevaluelabelparagraphstyleindex)
  return _internal_tschreferencelinevaluelabelparagraphstyleindex();
}
inline void ReferenceLineGenericPropertyMapArchive::_internal_set_tschreferencelinevaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tschreferencelinevaluelabelparagraphstyleindex_ = value;
}
inline void ReferenceLineGenericPropertyMapArchive::set_tschreferencelinevaluelabelparagraphstyleindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tschreferencelinevaluelabelparagraphstyleindex(value);
  // @@protoc_insertion_point(field_set:TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinevaluelabelparagraphstyleindex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Generated
}  // namespace TSCH

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eGEN_2eproto
