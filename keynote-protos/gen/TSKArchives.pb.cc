// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSKArchives.proto

#include "TSKArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSK {
constexpr TreeNode::TreeNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_(nullptr){}
struct TreeNodeDefaultTypeInternal {
  constexpr TreeNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreeNodeDefaultTypeInternal() {}
  union {
    TreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
constexpr LocalCommandHistoryItem::LocalCommandHistoryItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(nullptr)
  , selection_behavior_(nullptr){}
struct LocalCommandHistoryItemDefaultTypeInternal {
  constexpr LocalCommandHistoryItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalCommandHistoryItemDefaultTypeInternal() {}
  union {
    LocalCommandHistoryItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalCommandHistoryItemDefaultTypeInternal _LocalCommandHistoryItem_default_instance_;
constexpr LocalCommandHistoryArray::LocalCommandHistoryArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct LocalCommandHistoryArrayDefaultTypeInternal {
  constexpr LocalCommandHistoryArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalCommandHistoryArrayDefaultTypeInternal() {}
  union {
    LocalCommandHistoryArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalCommandHistoryArrayDefaultTypeInternal _LocalCommandHistoryArray_default_instance_;
constexpr LocalCommandHistoryArraySegment::LocalCommandHistoryArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_object_array_segment_(nullptr){}
struct LocalCommandHistoryArraySegmentDefaultTypeInternal {
  constexpr LocalCommandHistoryArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalCommandHistoryArraySegmentDefaultTypeInternal() {}
  union {
    LocalCommandHistoryArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalCommandHistoryArraySegmentDefaultTypeInternal _LocalCommandHistoryArraySegment_default_instance_;
constexpr LocalCommandHistory::LocalCommandHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_array_(nullptr)
  , undo_count_(0u)
  , fixed_radar_13365177_(false){}
struct LocalCommandHistoryDefaultTypeInternal {
  constexpr LocalCommandHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalCommandHistoryDefaultTypeInternal() {}
  union {
    LocalCommandHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalCommandHistoryDefaultTypeInternal _LocalCommandHistory_default_instance_;
constexpr CollaborationCommandHistoryArray::CollaborationCommandHistoryArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct CollaborationCommandHistoryArrayDefaultTypeInternal {
  constexpr CollaborationCommandHistoryArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryArrayDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryArrayDefaultTypeInternal _CollaborationCommandHistoryArray_default_instance_;
constexpr CollaborationCommandHistoryArraySegment::CollaborationCommandHistoryArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_object_array_segment_(nullptr){}
struct CollaborationCommandHistoryArraySegmentDefaultTypeInternal {
  constexpr CollaborationCommandHistoryArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryArraySegmentDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryArraySegmentDefaultTypeInternal _CollaborationCommandHistoryArraySegment_default_instance_;
constexpr CollaborationCommandHistory_ItemList::CollaborationCommandHistory_ItemList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_entries_()
  , items_array_(nullptr){}
struct CollaborationCommandHistory_ItemListDefaultTypeInternal {
  constexpr CollaborationCommandHistory_ItemListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistory_ItemListDefaultTypeInternal() {}
  union {
    CollaborationCommandHistory_ItemList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistory_ItemListDefaultTypeInternal _CollaborationCommandHistory_ItemList_default_instance_;
constexpr CollaborationCommandHistory::CollaborationCommandHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_identifier_(nullptr)
  , undo_items_(nullptr)
  , redo_items_(nullptr){}
struct CollaborationCommandHistoryDefaultTypeInternal {
  constexpr CollaborationCommandHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryDefaultTypeInternal() {}
  union {
    CollaborationCommandHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryDefaultTypeInternal _CollaborationCommandHistory_default_instance_;
constexpr CollaborationCommandHistoryItem::CollaborationCommandHistoryItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(nullptr)
  , selection_behavior_(nullptr)
  , coalescing_group_(nullptr)
  , revision_sequence_(uint64_t{0u}){}
struct CollaborationCommandHistoryItemDefaultTypeInternal {
  constexpr CollaborationCommandHistoryItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryItemDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryItemDefaultTypeInternal _CollaborationCommandHistoryItem_default_instance_;
constexpr CollaborationCommandHistoryCoalescingGroup::CollaborationCommandHistoryCoalescingGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , did_coalesce_all_commands_(false){}
struct CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal {
  constexpr CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryCoalescingGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal _CollaborationCommandHistoryCoalescingGroup_default_instance_;
constexpr CollaborationCommandHistoryCoalescingGroupNode::CollaborationCommandHistoryCoalescingGroupNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(nullptr){}
struct CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal {
  constexpr CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryCoalescingGroupNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal _CollaborationCommandHistoryCoalescingGroupNode_default_instance_;
constexpr CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coalescing_group_(nullptr)
  , node_(nullptr){}
struct CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal {
  constexpr CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal() {}
  union {
    CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal _CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver_default_instance_;
constexpr DocumentArchive::DocumentArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_log_entries_()
  , locale_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creation_locale_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , annotation_author_storage_(nullptr)
  , collaboration_operation_history_(nullptr)
  , formatting_symbols_(nullptr)
  , prevent_image_conversion_on_open_(false)
  , has_floating_locale_(false)
  , has_user_defined_locale_(false)
  , should_measure_negatively_tracked_text_correctly_(false)
  , use_optimized_text_vertical_alignment_(false){}
struct DocumentArchiveDefaultTypeInternal {
  constexpr DocumentArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
constexpr FormattingSymbolsArchive_CurrencySymbol::FormattingSymbolsArchive_CurrencySymbol(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal {
  constexpr FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal() {}
  union {
    FormattingSymbolsArchive_CurrencySymbol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal _FormattingSymbolsArchive_CurrencySymbol_default_instance_;
constexpr FormattingSymbolsArchive::FormattingSymbolsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : months_()
  , standalone_months_()
  , short_months_()
  , standalone_short_months_()
  , weekdays_()
  , standalone_weekdays_()
  , short_weekdays_()
  , standalone_short_weekdays_()
  , tiny_months_()
  , standalone_tiny_months_()
  , tiny_weekdays_()
  , standalone_tiny_weekdays_()
  , quarters_()
  , standalone_quarters_()
  , short_quarters_()
  , standalone_short_quarters_()
  , eras_()
  , long_eras_()
  , currency_symbols_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , calendar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , numbering_system_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , am_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pm_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , short_date_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , medium_date_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , long_date_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , full_date_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , short_time_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , medium_time_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , long_time_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , full_time_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decimal_separator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grouping_separator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_decimal_separator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_grouping_separator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plus_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minus_sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exponential_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , percent_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , per_mille_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , infinity_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nan_symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decimal_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scientific_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , percent_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FormattingSymbolsArchiveDefaultTypeInternal {
  constexpr FormattingSymbolsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormattingSymbolsArchiveDefaultTypeInternal() {}
  union {
    FormattingSymbolsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormattingSymbolsArchiveDefaultTypeInternal _FormattingSymbolsArchive_default_instance_;
constexpr DocumentSupportCollaborationState::DocumentSupportCollaborationState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaboration_command_history_(nullptr)
  , collaboration_session_state_(nullptr){}
struct DocumentSupportCollaborationStateDefaultTypeInternal {
  constexpr DocumentSupportCollaborationStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSupportCollaborationStateDefaultTypeInternal() {}
  union {
    DocumentSupportCollaborationState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSupportCollaborationStateDefaultTypeInternal _DocumentSupportCollaborationState_default_instance_;
constexpr DocumentSupportArchive::DocumentSupportArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undo_action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redo_action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_string_localization_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_history_(nullptr)
  , command_selection_behavior_history_(nullptr)
  , view_state_(nullptr)
  , web_state_(nullptr)
  , collaboration_command_history_(nullptr)
  , collaboration_session_state_(nullptr)
  , collaboration_state_(nullptr)
  , undo_count_(0u)
  , redo_count_(0u)
  , is_in_collaboration_mode_(false){}
struct DocumentSupportArchiveDefaultTypeInternal {
  constexpr DocumentSupportArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSupportArchiveDefaultTypeInternal() {}
  union {
    DocumentSupportArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSupportArchiveDefaultTypeInternal _DocumentSupportArchive_default_instance_;
constexpr ViewStateArchive::ViewStateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_revision_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_state_root_(nullptr)
  , document_revision_sequence_(0){}
struct ViewStateArchiveDefaultTypeInternal {
  constexpr ViewStateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewStateArchiveDefaultTypeInternal() {}
  union {
    ViewStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewStateArchiveDefaultTypeInternal _ViewStateArchive_default_instance_;
constexpr CommandArchive::CommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : undoredostate_(nullptr)
  , undocollection_(nullptr)
  , shadowed_by_transform_(false)
  , shadowed_by_commit_(false)
  , remote_(false)
  , should_hold_until_group_commit_(false)
  , server_originated_(false){}
struct CommandArchiveDefaultTypeInternal {
  constexpr CommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandArchiveDefaultTypeInternal() {}
  union {
    CommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandArchiveDefaultTypeInternal _CommandArchive_default_instance_;
constexpr CommandGroupArchive::CommandGroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_()
  , action_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , process_results_(nullptr){}
struct CommandGroupArchiveDefaultTypeInternal {
  constexpr CommandGroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandGroupArchiveDefaultTypeInternal() {}
  union {
    CommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandGroupArchiveDefaultTypeInternal _CommandGroupArchive_default_instance_;
constexpr InducedCommandCollectionArchive::InducedCommandCollectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : induced_commands_()
  , super_(nullptr)
  , inducing_command_(nullptr)
  , indexes_of_processed_induced_commands_(nullptr){}
struct InducedCommandCollectionArchiveDefaultTypeInternal {
  constexpr InducedCommandCollectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InducedCommandCollectionArchiveDefaultTypeInternal() {}
  union {
    InducedCommandCollectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InducedCommandCollectionArchiveDefaultTypeInternal _InducedCommandCollectionArchive_default_instance_;
constexpr PropagatedCommandCollectionArchive::PropagatedCommandCollectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , propagatable_command_(nullptr)
  , propagating_command_(nullptr)
  , propagatable_command_process_result_(false)
  , propagating_command_process_result_(false){}
struct PropagatedCommandCollectionArchiveDefaultTypeInternal {
  constexpr PropagatedCommandCollectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropagatedCommandCollectionArchiveDefaultTypeInternal() {}
  union {
    PropagatedCommandCollectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropagatedCommandCollectionArchiveDefaultTypeInternal _PropagatedCommandCollectionArchive_default_instance_;
constexpr FinalCommandPairArchive::FinalCommandPairArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , command_(nullptr)
  , final_command_(nullptr)
  , command_process_result_(false)
  , final_command_process_result_(false){}
struct FinalCommandPairArchiveDefaultTypeInternal {
  constexpr FinalCommandPairArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FinalCommandPairArchiveDefaultTypeInternal() {}
  union {
    FinalCommandPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FinalCommandPairArchiveDefaultTypeInternal _FinalCommandPairArchive_default_instance_;
constexpr CommandContainerArchive::CommandContainerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_(){}
struct CommandContainerArchiveDefaultTypeInternal {
  constexpr CommandContainerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandContainerArchiveDefaultTypeInternal() {}
  union {
    CommandContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandContainerArchiveDefaultTypeInternal _CommandContainerArchive_default_instance_;
constexpr ShuffleMappingArchive_Entry::ShuffleMappingArchive_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(0u)
  , to_(0u){}
struct ShuffleMappingArchive_EntryDefaultTypeInternal {
  constexpr ShuffleMappingArchive_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShuffleMappingArchive_EntryDefaultTypeInternal() {}
  union {
    ShuffleMappingArchive_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShuffleMappingArchive_EntryDefaultTypeInternal _ShuffleMappingArchive_Entry_default_instance_;
constexpr ShuffleMappingArchive::ShuffleMappingArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , start_index_(0u)
  , end_index_(0u)
  , is_move_operation_(false)
  , first_moved_index_(0u)
  , destination_index_for_move_(0u)
  , number_of_indexes_moved_(0u)
  , is_vertical_(true){}
struct ShuffleMappingArchiveDefaultTypeInternal {
  constexpr ShuffleMappingArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShuffleMappingArchiveDefaultTypeInternal() {}
  union {
    ShuffleMappingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShuffleMappingArchiveDefaultTypeInternal _ShuffleMappingArchive_default_instance_;
constexpr ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ProgressiveCommandGroupArchiveDefaultTypeInternal {
  constexpr ProgressiveCommandGroupArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProgressiveCommandGroupArchiveDefaultTypeInternal() {}
  union {
    ProgressiveCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProgressiveCommandGroupArchiveDefaultTypeInternal _ProgressiveCommandGroupArchive_default_instance_;
constexpr FormatStructArchive::FormatStructArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interstitial_strings_()
  , currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_time_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_format_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bool_true_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bool_false_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inters_str_insertion_indexes_(nullptr)
  , custom_uid_(nullptr)
  , custom_format_(nullptr)
  , format_type_(0u)
  , decimal_places_(0u)
  , negative_style_(0u)
  , duration_style_(0u)
  , base_(0u)
  , show_thousands_separator_(false)
  , use_accounting_style_(false)
  , base_use_minus_sign_(false)
  , suppress_date_format_(false)
  , base_places_(0u)
  , fraction_accuracy_(0u)
  , duration_unit_largest_(0u)
  , duration_unit_smallest_(0u)
  , scale_factor_(0)
  , custom_id_(0u)
  , control_format_type_(0u)
  , control_minimum_(0)
  , control_maximum_(0)
  , control_increment_(0)
  , slider_orientation_(0u)
  , slider_position_(0u)
  , suppress_time_format_(false)
  , requires_fraction_replacement_(false)
  , is_complex_(false)
  , contains_integer_token_(false)
  , decimal_width_(0u)
  , min_integer_width_(0u)
  , num_nonspace_integer_digits_(0u)
  , num_nonspace_decimal_digits_(0u)
  , index_from_right_last_integer_(0u)
  , num_hash_decimal_digits_(0u)
  , total_num_decimal_digits_(0u)
  , multiple_choice_list_initial_value_(0u)
  , multiple_choice_list_id_(0u)
  , use_automatic_duration_units_(false)
  , uses_plus_sign_(false){}
struct FormatStructArchiveDefaultTypeInternal {
  constexpr FormatStructArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormatStructArchiveDefaultTypeInternal() {}
  union {
    FormatStructArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
constexpr CustomFormatArchive_Condition::CustomFormatArchive_Condition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : condition_format_(nullptr)
  , condition_type_(0u)
  , condition_value_(0)
  , condition_value_dbl_(0){}
struct CustomFormatArchive_ConditionDefaultTypeInternal {
  constexpr CustomFormatArchive_ConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomFormatArchive_ConditionDefaultTypeInternal() {}
  union {
    CustomFormatArchive_Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomFormatArchive_ConditionDefaultTypeInternal _CustomFormatArchive_Condition_default_instance_;
constexpr CustomFormatArchive::CustomFormatArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conditions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , default_format_(nullptr)
  , format_type_pre_bnc_(0u)
  , format_type_(0u){}
struct CustomFormatArchiveDefaultTypeInternal {
  constexpr CustomFormatArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomFormatArchiveDefaultTypeInternal() {}
  union {
    CustomFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomFormatArchiveDefaultTypeInternal _CustomFormatArchive_default_instance_;
constexpr CustomFormatListArchive::CustomFormatListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuids_()
  , custom_formats_(){}
struct CustomFormatListArchiveDefaultTypeInternal {
  constexpr CustomFormatListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomFormatListArchiveDefaultTypeInternal() {}
  union {
    CustomFormatListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomFormatListArchiveDefaultTypeInternal _CustomFormatListArchive_default_instance_;
constexpr AnnotationAuthorArchive::AnnotationAuthorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(nullptr)
  , is_public_author_(false){}
struct AnnotationAuthorArchiveDefaultTypeInternal {
  constexpr AnnotationAuthorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationAuthorArchiveDefaultTypeInternal() {}
  union {
    AnnotationAuthorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationAuthorArchiveDefaultTypeInternal _AnnotationAuthorArchive_default_instance_;
constexpr DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , change_color_(nullptr){}
struct DeprecatedChangeAuthorArchiveDefaultTypeInternal {
  constexpr DeprecatedChangeAuthorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeprecatedChangeAuthorArchiveDefaultTypeInternal() {}
  union {
    DeprecatedChangeAuthorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeprecatedChangeAuthorArchiveDefaultTypeInternal _DeprecatedChangeAuthorArchive_default_instance_;
constexpr AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotation_author_(){}
struct AnnotationAuthorStorageArchiveDefaultTypeInternal {
  constexpr AnnotationAuthorStorageArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnnotationAuthorStorageArchiveDefaultTypeInternal() {}
  union {
    AnnotationAuthorStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnnotationAuthorStorageArchiveDefaultTypeInternal _AnnotationAuthorStorageArchive_default_instance_;
constexpr SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , annotation_author_(nullptr)
  , color_(nullptr)
  , old_color_(nullptr){}
struct SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal {
  constexpr SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal() {}
  union {
    SetAnnotationAuthorColorCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal _SetAnnotationAuthorColorCommandArchive_default_instance_;
constexpr CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_selection_behaviors_()
  , archived_old_selection_(nullptr)
  , archived_new_selection_(nullptr)
  , forward_selection_path_transformer_(nullptr)
  , reverse_selection_path_transformer_(nullptr)
  , archived_selection_(nullptr)
  , selection_flags_(uint64_t{0u})
  , additional_forward_selection_flags_(uint64_t{0u})
  , additional_reverse_selection_flags_(uint64_t{0u}){}
struct CommandSelectionBehaviorArchiveDefaultTypeInternal {
  constexpr CommandSelectionBehaviorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    CommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandSelectionBehaviorArchiveDefaultTypeInternal _CommandSelectionBehaviorArchive_default_instance_;
constexpr SelectionPathTransformerArchive::SelectionPathTransformerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selection_transformers_(){}
struct SelectionPathTransformerArchiveDefaultTypeInternal {
  constexpr SelectionPathTransformerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionPathTransformerArchiveDefaultTypeInternal() {}
  union {
    SelectionPathTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionPathTransformerArchiveDefaultTypeInternal _SelectionPathTransformerArchive_default_instance_;
constexpr SelectionPathArchive::SelectionPathArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ordered_selections_(){}
struct SelectionPathArchiveDefaultTypeInternal {
  constexpr SelectionPathArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectionPathArchiveDefaultTypeInternal() {}
  union {
    SelectionPathArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectionPathArchiveDefaultTypeInternal _SelectionPathArchive_default_instance_;
constexpr DocumentSelectionArchive::DocumentSelectionArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_root_(nullptr){}
struct DocumentSelectionArchiveDefaultTypeInternal {
  constexpr DocumentSelectionArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentSelectionArchiveDefaultTypeInternal() {}
  union {
    DocumentSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentSelectionArchiveDefaultTypeInternal _DocumentSelectionArchive_default_instance_;
constexpr IdOperationArgs::IdOperationArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_path_(nullptr){}
struct IdOperationArgsDefaultTypeInternal {
  constexpr IdOperationArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdOperationArgsDefaultTypeInternal() {}
  union {
    IdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdOperationArgsDefaultTypeInternal _IdOperationArgs_default_instance_;
constexpr AddIdOperationArgs::AddIdOperationArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , index_(0){}
struct AddIdOperationArgsDefaultTypeInternal {
  constexpr AddIdOperationArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddIdOperationArgsDefaultTypeInternal() {}
  union {
    AddIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddIdOperationArgsDefaultTypeInternal _AddIdOperationArgs_default_instance_;
constexpr RemoveIdOperationArgs::RemoveIdOperationArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , index_(0){}
struct RemoveIdOperationArgsDefaultTypeInternal {
  constexpr RemoveIdOperationArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveIdOperationArgsDefaultTypeInternal() {}
  union {
    RemoveIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveIdOperationArgsDefaultTypeInternal _RemoveIdOperationArgs_default_instance_;
constexpr RearrangeIdOperationArgs::RearrangeIdOperationArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , from_index_(0)
  , to_index_(0){}
struct RearrangeIdOperationArgsDefaultTypeInternal {
  constexpr RearrangeIdOperationArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RearrangeIdOperationArgsDefaultTypeInternal() {}
  union {
    RearrangeIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RearrangeIdOperationArgsDefaultTypeInternal _RearrangeIdOperationArgs_default_instance_;
constexpr IdPlacementOperationArgs::IdPlacementOperationArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , from_index_(0)
  , to_index_(0){}
struct IdPlacementOperationArgsDefaultTypeInternal {
  constexpr IdPlacementOperationArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdPlacementOperationArgsDefaultTypeInternal() {}
  union {
    IdPlacementOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdPlacementOperationArgsDefaultTypeInternal _IdPlacementOperationArgs_default_instance_;
constexpr NullCommandArchive::NullCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct NullCommandArchiveDefaultTypeInternal {
  constexpr NullCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NullCommandArchiveDefaultTypeInternal() {}
  union {
    NullCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NullCommandArchiveDefaultTypeInternal _NullCommandArchive_default_instance_;
constexpr GroupCommitCommandArchive::GroupCommitCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct GroupCommitCommandArchiveDefaultTypeInternal {
  constexpr GroupCommitCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupCommitCommandArchiveDefaultTypeInternal() {}
  union {
    GroupCommitCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupCommitCommandArchiveDefaultTypeInternal _GroupCommitCommandArchive_default_instance_;
constexpr UpgradeDocPostProcessingCommandArchive::UpgradeDocPostProcessingCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal {
  constexpr UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal() {}
  union {
    UpgradeDocPostProcessingCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal _UpgradeDocPostProcessingCommandArchive_default_instance_;
constexpr InducedCommandCollectionCommitCommandArchive::InducedCommandCollectionCommitCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal {
  constexpr InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal() {}
  union {
    InducedCommandCollectionCommitCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal _InducedCommandCollectionCommitCommandArchive_default_instance_;
constexpr ExecuteTestBetweenRollbackAndReapplyCommandArchive::ExecuteTestBetweenRollbackAndReapplyCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal {
  constexpr ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal() {}
  union {
    ExecuteTestBetweenRollbackAndReapplyCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal _ExecuteTestBetweenRollbackAndReapplyCommandArchive_default_instance_;
constexpr ChangeDocumentPackageTypeCommandArchive::ChangeDocumentPackageTypeCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , new_package_type_(0)

  , old_package_type_(0)
{}
struct ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal {
  constexpr ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal() {}
  union {
    ChangeDocumentPackageTypeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal _ChangeDocumentPackageTypeCommandArchive_default_instance_;
constexpr CreateLocalStorageSnapshotCommandArchive::CreateLocalStorageSnapshotCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snapshot_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr){}
struct CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal {
  constexpr CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal() {}
  union {
    CreateLocalStorageSnapshotCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal _CreateLocalStorageSnapshotCommandArchive_default_instance_;
constexpr BlockDiffsAtCurrentRevisionCommand::BlockDiffsAtCurrentRevisionCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr){}
struct BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal {
  constexpr BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal() {}
  union {
    BlockDiffsAtCurrentRevisionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal _BlockDiffsAtCurrentRevisionCommand_default_instance_;
constexpr RangeAddress::RangeAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_identifier_()
  , range_list_(){}
struct RangeAddressDefaultTypeInternal {
  constexpr RangeAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeAddressDefaultTypeInternal() {}
  union {
    RangeAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeAddressDefaultTypeInternal _RangeAddress_default_instance_;
constexpr Operation::Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_identifier_()
  , range_list_()
  , _range_list_cached_byte_size_(0)
  , noop_(false)
  , preserve_lower_priority_location_(false)
  , dominating_(false)
  , property_id_(0u)
  , object_counter_space_(0)
  , object_count_(-1)
  , insert_length_(uint64_t{1u})
  , type_(6)

  , transform_behavior_(7u)
  , from_index_(-1)
  , to_index_(-1){}
struct OperationDefaultTypeInternal {
  constexpr OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationDefaultTypeInternal _Operation_default_instance_;
constexpr OperationTransformer::OperationTransformer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operations_()
  , higher_priority_(false){}
struct OperationTransformerDefaultTypeInternal {
  constexpr OperationTransformerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationTransformerDefaultTypeInternal() {}
  union {
    OperationTransformer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationTransformerDefaultTypeInternal _OperationTransformer_default_instance_;
constexpr TransformerEntry::TransformerEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformer_(nullptr)
  , sequence_(uint64_t{0u})
  , creation_time_(0){}
struct TransformerEntryDefaultTypeInternal {
  constexpr TransformerEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformerEntryDefaultTypeInternal() {}
  union {
    TransformerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformerEntryDefaultTypeInternal _TransformerEntry_default_instance_;
constexpr OutgoingCommandQueueItem::OutgoingCommandQueueItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_to_data_map_entries_()
  , large_data_list_()
  , serialized_json_without_data_base64_encoded_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(nullptr)
  , serialized_json_without_data_base64_encoded_data_(nullptr){}
struct OutgoingCommandQueueItemDefaultTypeInternal {
  constexpr OutgoingCommandQueueItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutgoingCommandQueueItemDefaultTypeInternal() {}
  union {
    OutgoingCommandQueueItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutgoingCommandQueueItemDefaultTypeInternal _OutgoingCommandQueueItem_default_instance_;
constexpr OutgoingCommandQueueItemUUIDToDataMapEntry::OutgoingCommandQueueItemUUIDToDataMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(nullptr)
  , data_(nullptr){}
struct OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal {
  constexpr OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal() {}
  union {
    OutgoingCommandQueueItemUUIDToDataMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal _OutgoingCommandQueueItemUUIDToDataMapEntry_default_instance_;
constexpr CollaborationDocumentSessionState_AcknowledgementObserverEntry::CollaborationDocumentSessionState_AcknowledgementObserverEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acknowledgement_observers_()
  , command_identifier_(nullptr){}
struct CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal {
  constexpr CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal() {}
  union {
    CollaborationDocumentSessionState_AcknowledgementObserverEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal _CollaborationDocumentSessionState_AcknowledgementObserverEntry_default_instance_;
constexpr CollaborationDocumentSessionState::CollaborationDocumentSessionState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collaborator_ids_()
  , rsvp_command_queue_items_()
  , collaborator_cursor_transformer_entries_()
  , acknowledged_commands_pending_resume_process_diffs_()
  , unprocessed_commands_pending_resume_process_diffs_()
  , command_acknowledgement_observer_entries_()
  , transformer_from_unprocessed_command_operations_entries_()
  , skipped_acknowledged_commands_pending_resume_process_diffs_()
  , mailbox_request_document_revision_identifier_(nullptr)
  , last_command_send_marker_identifier_(nullptr)
  , last_too_old_command_identifier_(nullptr)
  , unprocessed_operation_entries_pending_resume_process_diffs_(nullptr)
  , send_pending_command_queue_(nullptr)
  , last_enqueued_document_load_command_identifier_(nullptr)
  , mailbox_request_document_revision_sequence_(0)
  , last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_(false)
  , count_of_send_pending_command_queue_items_moved_from_rsvp_queue_(uint64_t{0u})
  , last_command_send_marker_sequence_(0){}
struct CollaborationDocumentSessionStateDefaultTypeInternal {
  constexpr CollaborationDocumentSessionStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CollaborationDocumentSessionStateDefaultTypeInternal() {}
  union {
    CollaborationDocumentSessionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CollaborationDocumentSessionStateDefaultTypeInternal _CollaborationDocumentSessionState_default_instance_;
constexpr NativeContentDescription::NativeContentDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : drawable_descriptions_()
  , app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NativeContentDescriptionDefaultTypeInternal {
  constexpr NativeContentDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NativeContentDescriptionDefaultTypeInternal() {}
  union {
    NativeContentDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NativeContentDescriptionDefaultTypeInternal _NativeContentDescription_default_instance_;
constexpr StructuredTextImportSettings::StructuredTextImportSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : decimal_separators_()
  , thousands_separators_()
  , delimiters_()
  , text_qualifiers_()
  , column_offsets_(nullptr)
  , type_(0)

  , starting_row_(0)
  , source_encoding_(uint64_t{0u})
  , transpose_rows_and_columns_(false)
  , collapse_consecutive_(false)
  , automatic_delimiters_(false)
  , automatic_offsets_(false){}
struct StructuredTextImportSettingsDefaultTypeInternal {
  constexpr StructuredTextImportSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredTextImportSettingsDefaultTypeInternal() {}
  union {
    StructuredTextImportSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredTextImportSettingsDefaultTypeInternal _StructuredTextImportSettings_default_instance_;
constexpr OperationStorageCommandOperationsEntry::OperationStorageCommandOperationsEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_identifier_()
  , operations_()
  , coalesced_command_entry_count_(uint64_t{0u})
  , command_identifier_same_as_revision_identifier_(false)
  , server_originated_(false){}
struct OperationStorageCommandOperationsEntryDefaultTypeInternal {
  constexpr OperationStorageCommandOperationsEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStorageCommandOperationsEntryDefaultTypeInternal() {}
  union {
    OperationStorageCommandOperationsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStorageCommandOperationsEntryDefaultTypeInternal _OperationStorageCommandOperationsEntry_default_instance_;
constexpr OperationStorageEntry::OperationStorageEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_revision_identifier_()
  , command_operation_entries_()
  , document_revision_sequence_delta_(0)
  , creation_time_diff_bucket_(0)
  , first_entry_creation_time_(0){}
struct OperationStorageEntryDefaultTypeInternal {
  constexpr OperationStorageEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStorageEntryDefaultTypeInternal() {}
  union {
    OperationStorageEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStorageEntryDefaultTypeInternal _OperationStorageEntry_default_instance_;
constexpr OperationStorageEntryArray::OperationStorageEntryArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_array_(nullptr){}
struct OperationStorageEntryArrayDefaultTypeInternal {
  constexpr OperationStorageEntryArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStorageEntryArrayDefaultTypeInternal() {}
  union {
    OperationStorageEntryArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStorageEntryArrayDefaultTypeInternal _OperationStorageEntryArray_default_instance_;
constexpr OperationStorageEntryArraySegment::OperationStorageEntryArraySegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , large_array_segment_(nullptr)
  , last_document_revision_sequence_before_segment_(0)
  , last_document_revision_sequence_(0)
  , segment_first_entry_creation_time_(0){}
struct OperationStorageEntryArraySegmentDefaultTypeInternal {
  constexpr OperationStorageEntryArraySegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStorageEntryArraySegmentDefaultTypeInternal() {}
  union {
    OperationStorageEntryArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStorageEntryArraySegmentDefaultTypeInternal _OperationStorageEntryArraySegment_default_instance_;
constexpr OperationStorage::OperationStorage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_document_revision_identifier_()
  , last_unskippable_document_revision_before_entries_identifier_()
  , last_unskippable_document_revision_in_entries_identifier_()
  , entries_(nullptr)
  , days_with_an_entry_(nullptr)
  , operation_count_(uint64_t{0u})
  , last_document_revision_sequence_(0)
  , last_unskippable_document_revision_before_entries_sequence_(0)
  , last_unskippable_document_revision_in_entries_sequence_(0){}
struct OperationStorageDefaultTypeInternal {
  constexpr OperationStorageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationStorageDefaultTypeInternal() {}
  union {
    OperationStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationStorageDefaultTypeInternal _OperationStorage_default_instance_;
constexpr OutgoingCommandQueue::OutgoingCommandQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_object_array_(nullptr){}
struct OutgoingCommandQueueDefaultTypeInternal {
  constexpr OutgoingCommandQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutgoingCommandQueueDefaultTypeInternal() {}
  union {
    OutgoingCommandQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutgoingCommandQueueDefaultTypeInternal _OutgoingCommandQueue_default_instance_;
constexpr OutgoingCommandQueueSegment::OutgoingCommandQueueSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : large_object_array_segment_(nullptr){}
struct OutgoingCommandQueueSegmentDefaultTypeInternal {
  constexpr OutgoingCommandQueueSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutgoingCommandQueueSegmentDefaultTypeInternal() {}
  union {
    OutgoingCommandQueueSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutgoingCommandQueueSegmentDefaultTypeInternal _OutgoingCommandQueueSegment_default_instance_;
constexpr DataReferenceRecord_ContainerUUIDToReferencedDataPair::DataReferenceRecord_ContainerUUIDToReferencedDataPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_uuid_(nullptr)
  , referenced_data_(nullptr)
  , reference_count_(0u){}
struct DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal {
  constexpr DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal() {}
  union {
    DataReferenceRecord_ContainerUUIDToReferencedDataPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal _DataReferenceRecord_ContainerUUIDToReferencedDataPair_default_instance_;
constexpr DataReferenceRecord::DataReferenceRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : added_container_uuid_to_referenced_data_pairs_()
  , removed_container_uuid_to_referenced_data_pairs_()
  , unbounded_referenced_datas_(){}
struct DataReferenceRecordDefaultTypeInternal {
  constexpr DataReferenceRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataReferenceRecordDefaultTypeInternal() {}
  union {
    DataReferenceRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataReferenceRecordDefaultTypeInternal _DataReferenceRecord_default_instance_;
constexpr CommandAssetChunkArchive::CommandAssetChunkArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_chunk_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , super_(nullptr)
  , asset_chunk_length_(int64_t{0})
  , resume_position_(int64_t{0})
  , materialized_length_(int64_t{0}){}
struct CommandAssetChunkArchiveDefaultTypeInternal {
  constexpr CommandAssetChunkArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAssetChunkArchiveDefaultTypeInternal() {}
  union {
    CommandAssetChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAssetChunkArchiveDefaultTypeInternal _CommandAssetChunkArchive_default_instance_;
constexpr AssetUploadStatusCommandArchive_AssetUploadStatusInfo::AssetUploadStatusCommandArchive_AssetUploadStatusInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , upload_status_(0)
{}
struct AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal {
  constexpr AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal() {}
  union {
    AssetUploadStatusCommandArchive_AssetUploadStatusInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal _AssetUploadStatusCommandArchive_AssetUploadStatusInfo_default_instance_;
constexpr AssetUploadStatusCommandArchive::AssetUploadStatusCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_list_()
  , super_(nullptr){}
struct AssetUploadStatusCommandArchiveDefaultTypeInternal {
  constexpr AssetUploadStatusCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetUploadStatusCommandArchiveDefaultTypeInternal() {}
  union {
    AssetUploadStatusCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetUploadStatusCommandArchiveDefaultTypeInternal _AssetUploadStatusCommandArchive_default_instance_;
constexpr AssetUnmaterializedOnServerCommandArchive::AssetUnmaterializedOnServerCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_list_()
  , super_(nullptr){}
struct AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal {
  constexpr AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal() {}
  union {
    AssetUnmaterializedOnServerCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal _AssetUnmaterializedOnServerCommandArchive_default_instance_;
constexpr PencilAnnotationUIState::PencilAnnotationUIState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pen_tool_color_(nullptr)
  , highlighter_tool_color_(nullptr)
  , current_tool_type_(0)

  , pen_tool_opacity_(0)
  , pen_tool_width_(0)
  , highlighter_tool_opacity_(0)
  , highlighter_tool_width_(0){}
struct PencilAnnotationUIStateDefaultTypeInternal {
  constexpr PencilAnnotationUIStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PencilAnnotationUIStateDefaultTypeInternal() {}
  union {
    PencilAnnotationUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PencilAnnotationUIStateDefaultTypeInternal _PencilAnnotationUIState_default_instance_;
}  // namespace TSK
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSKArchives_2eproto[77];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSKArchives_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSKArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSKArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, name_),
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, children_),
  PROTOBUF_FIELD_OFFSET(::TSK::TreeNode, object_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, command_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryItem, selection_behavior_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistoryArraySegment, large_object_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, undo_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, items_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::LocalCommandHistory, fixed_radar_13365177_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryArraySegment, large_object_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, items_array_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory_ItemList, transformer_entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, local_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, undo_items_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistory, redo_items_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, command_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, selection_behavior_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, coalescing_group_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryItem, revision_sequence_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, nodes_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroup, did_coalesce_all_commands_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroupNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroupNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryCoalescingGroupNode, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, coalescing_group_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, node_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, annotation_author_storage_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, activity_log_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, creation_locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, prevent_image_conversion_on_open_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, has_floating_locale_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, has_user_defined_locale_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, collaboration_operation_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, should_measure_negatively_tracked_text_correctly_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, use_optimized_text_vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentArchive, formatting_symbols_),
  0,
  2,
  ~0u,
  1,
  5,
  6,
  7,
  3,
  8,
  9,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, code_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive_CurrencySymbol, symbol_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, version_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, calendar_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, numbering_system_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, short_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_short_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, short_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_short_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, am_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, pm_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, tiny_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_tiny_months_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, tiny_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_tiny_weekdays_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, short_quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, standalone_short_quarters_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, eras_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, long_eras_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, short_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, medium_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, long_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, full_date_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, short_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, medium_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, long_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, full_time_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, decimal_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, grouping_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, currency_decimal_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, currency_grouping_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, plus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, exponential_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, percent_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, per_mille_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, infinity_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, nan_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, decimal_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, scientific_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, percent_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, currency_pattern_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormattingSymbolsArchive, currency_symbols_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, collaboration_command_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportCollaborationState, collaboration_session_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, command_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, undo_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, redo_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, undo_action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, redo_action_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, web_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, is_in_collaboration_mode_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, action_string_localization_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, collaboration_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, command_selection_behavior_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, view_state_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, collaboration_command_history_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSupportArchive, collaboration_session_state_),
  3,
  10,
  11,
  0,
  1,
  6,
  12,
  2,
  9,
  4,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, view_state_root_),
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::ViewStateArchive, document_revision_identifier_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, undoredostate_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, undocollection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, shadowed_by_transform_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, shadowed_by_commit_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, remote_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, should_hold_until_group_commit_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandArchive, server_originated_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, commands_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, process_results_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandGroupArchive, action_string_),
  1,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, inducing_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, induced_commands_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionArchive, indexes_of_processed_induced_commands_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, propagatable_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, propagatable_command_process_result_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, propagating_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::PropagatedCommandCollectionArchive, propagating_command_process_result_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, command_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, command_process_result_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, final_command_),
  PROTOBUF_FIELD_OFFSET(::TSK::FinalCommandPairArchive, final_command_process_result_),
  0,
  1,
  3,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandContainerArchive, commands_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive_Entry, from_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive_Entry, to_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, start_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, end_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, is_vertical_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, is_move_operation_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, first_moved_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, destination_index_for_move_),
  PROTOBUF_FIELD_OFFSET(::TSK::ShuffleMappingArchive, number_of_indexes_moved_),
  0,
  1,
  ~0u,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSK::ProgressiveCommandGroupArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ProgressiveCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::ProgressiveCommandGroupArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, format_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, duration_style_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, base_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, base_places_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, duration_unit_smallest_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, custom_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, custom_format_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, scale_factor_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, requires_fraction_replacement_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, control_minimum_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, control_maximum_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, control_increment_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, control_format_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, slider_orientation_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, slider_position_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, decimal_width_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, min_integer_width_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, num_nonspace_integer_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, num_nonspace_decimal_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, index_from_right_last_integer_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, interstitial_strings_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, inters_str_insertion_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, num_hash_decimal_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, total_num_decimal_digits_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, is_complex_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, contains_integer_token_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, multiple_choice_list_initial_value_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, multiple_choice_list_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, use_automatic_duration_units_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, custom_uid_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, custom_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, uses_plus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, bool_true_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::FormatStructArchive, bool_false_string_),
  8,
  9,
  0,
  10,
  13,
  14,
  11,
  12,
  17,
  15,
  18,
  16,
  29,
  1,
  19,
  20,
  22,
  2,
  21,
  30,
  24,
  25,
  26,
  23,
  27,
  28,
  33,
  34,
  35,
  36,
  37,
  ~0u,
  5,
  38,
  39,
  31,
  32,
  40,
  41,
  42,
  6,
  7,
  43,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, condition_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, condition_value_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, condition_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive_Condition, condition_value_dbl_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, format_type_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, default_format_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, conditions_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatArchive, format_type_),
  0,
  2,
  1,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatListArchive, uuids_),
  PROTOBUF_FIELD_OFFSET(::TSK::CustomFormatListArchive, custom_formats_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, public_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorArchive, is_public_author_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, name_),
  PROTOBUF_FIELD_OFFSET(::TSK::DeprecatedChangeAuthorArchive, change_color_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::AnnotationAuthorStorageArchive, annotation_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, annotation_author_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, color_),
  PROTOBUF_FIELD_OFFSET(::TSK::SetAnnotationAuthorColorCommandArchive, old_color_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, archived_selection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, archived_old_selection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, archived_new_selection_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, selection_flags_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, additional_forward_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, additional_reverse_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, forward_selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, reverse_selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandSelectionBehaviorArchive, additional_selection_behaviors_),
  4,
  0,
  1,
  5,
  6,
  7,
  2,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathTransformerArchive, selection_transformers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::SelectionPathArchive, ordered_selections_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSelectionArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DocumentSelectionArchive, document_root_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::IdOperationArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::IdOperationArgs, id_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::AddIdOperationArgs, index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::RemoveIdOperationArgs, index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, from_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::RearrangeIdOperationArgs, to_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, from_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::IdPlacementOperationArgs, to_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::NullCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::NullCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::NullCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::GroupCommitCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::UpgradeDocPostProcessingCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::UpgradeDocPostProcessingCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::UpgradeDocPostProcessingCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionCommitCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionCommitCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::InducedCommandCollectionCommitCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive, super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, new_package_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::ChangeDocumentPackageTypeCommandArchive, old_package_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::CreateLocalStorageSnapshotCommandArchive, snapshot_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::BlockDiffsAtCurrentRevisionCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::BlockDiffsAtCurrentRevisionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::BlockDiffsAtCurrentRevisionCommand, super_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::RangeAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::RangeAddress, address_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::RangeAddress, range_list_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, type_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, noop_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, address_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, insert_length_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, preserve_lower_priority_location_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, range_list_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, transform_behavior_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, property_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, from_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, to_index_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, dominating_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, object_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::Operation, object_counter_space_),
  7,
  0,
  ~0u,
  6,
  1,
  ~0u,
  8,
  3,
  9,
  10,
  2,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, higher_priority_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationTransformer, operations_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, creation_time_),
  PROTOBUF_FIELD_OFFSET(::TSK::TransformerEntry, transformer_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, command_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, serialized_json_without_data_base64_encoded_string_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, serialized_json_without_data_base64_encoded_data_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, uuid_to_data_map_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItem, large_data_list_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry, acknowledgement_observers_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, collaborator_ids_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, rsvp_command_queue_items_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, collaborator_cursor_transformer_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, acknowledged_commands_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, unprocessed_commands_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, command_acknowledgement_observer_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, transformer_from_unprocessed_command_operations_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, mailbox_request_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, mailbox_request_document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, last_command_send_marker_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, last_command_send_marker_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, skipped_acknowledged_commands_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, last_too_old_command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, unprocessed_operation_entries_pending_resume_process_diffs_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, send_pending_command_queue_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, count_of_send_pending_command_queue_items_moved_from_rsvp_queue_),
  PROTOBUF_FIELD_OFFSET(::TSK::CollaborationDocumentSessionState, last_enqueued_document_load_command_identifier_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  7,
  9,
  1,
  ~0u,
  2,
  3,
  4,
  8,
  5,
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, app_name_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, app_version_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, document_id_),
  PROTOBUF_FIELD_OFFSET(::TSK::NativeContentDescription, drawable_descriptions_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, type_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, starting_row_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, decimal_separators_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, thousands_separators_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, transpose_rows_and_columns_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, delimiters_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, text_qualifiers_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, collapse_consecutive_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, column_offsets_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, automatic_delimiters_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, automatic_offsets_),
  PROTOBUF_FIELD_OFFSET(::TSK::StructuredTextImportSettings, source_encoding_),
  1,
  2,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  5,
  0,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, command_identifier_same_as_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, command_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, operations_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, server_originated_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageCommandOperationsEntry, coalesced_command_entry_count_),
  1,
  ~0u,
  ~0u,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, document_revision_sequence_delta_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, command_operation_entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, first_entry_creation_time_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntry, creation_time_diff_bucket_),
  ~0u,
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArray, large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, elements_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, last_document_revision_sequence_before_segment_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, last_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorageEntryArraySegment, segment_first_entry_creation_time_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, entries_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, operation_count_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, last_document_revision_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, last_document_revision_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, last_unskippable_document_revision_before_entries_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, last_unskippable_document_revision_before_entries_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, last_unskippable_document_revision_in_entries_sequence_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, last_unskippable_document_revision_in_entries_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSK::OperationStorage, days_with_an_entry_),
  0,
  2,
  3,
  ~0u,
  4,
  ~0u,
  5,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueue, large_object_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::OutgoingCommandQueueSegment, large_object_array_segment_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, container_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, referenced_data_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair, reference_count_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, added_container_uuid_to_referenced_data_pairs_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, removed_container_uuid_to_referenced_data_pairs_),
  PROTOBUF_FIELD_OFFSET(::TSK::DataReferenceRecord, unbounded_referenced_datas_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, digest_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, asset_chunk_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, asset_chunk_length_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, resume_position_),
  PROTOBUF_FIELD_OFFSET(::TSK::CommandAssetChunkArchive, materialized_length_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, digest_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo, upload_status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUploadStatusCommandArchive, info_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSK::AssetUnmaterializedOnServerCommandArchive, digest_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, current_tool_type_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, pen_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, pen_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, pen_tool_width_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, highlighter_tool_color_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, highlighter_tool_opacity_),
  PROTOBUF_FIELD_OFFSET(::TSK::PencilAnnotationUIState, highlighter_tool_width_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TSK::TreeNode)},
  { 11, 18, sizeof(::TSK::LocalCommandHistoryItem)},
  { 20, 26, sizeof(::TSK::LocalCommandHistoryArray)},
  { 27, 33, sizeof(::TSK::LocalCommandHistoryArraySegment)},
  { 34, 42, sizeof(::TSK::LocalCommandHistory)},
  { 45, 51, sizeof(::TSK::CollaborationCommandHistoryArray)},
  { 52, 58, sizeof(::TSK::CollaborationCommandHistoryArraySegment)},
  { 59, 66, sizeof(::TSK::CollaborationCommandHistory_ItemList)},
  { 68, 76, sizeof(::TSK::CollaborationCommandHistory)},
  { 79, 89, sizeof(::TSK::CollaborationCommandHistoryItem)},
  { 94, 101, sizeof(::TSK::CollaborationCommandHistoryCoalescingGroup)},
  { 103, 109, sizeof(::TSK::CollaborationCommandHistoryCoalescingGroupNode)},
  { 110, 117, sizeof(::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)},
  { 119, 135, sizeof(::TSK::DocumentArchive)},
  { 146, 153, sizeof(::TSK::FormattingSymbolsArchive_CurrencySymbol)},
  { 155, 208, sizeof(::TSK::FormattingSymbolsArchive)},
  { 256, 263, sizeof(::TSK::DocumentSupportCollaborationState)},
  { 265, 283, sizeof(::TSK::DocumentSupportArchive)},
  { 296, 304, sizeof(::TSK::ViewStateArchive)},
  { 307, 319, sizeof(::TSK::CommandArchive)},
  { 326, 335, sizeof(::TSK::CommandGroupArchive)},
  { 339, 348, sizeof(::TSK::InducedCommandCollectionArchive)},
  { 352, 362, sizeof(::TSK::PropagatedCommandCollectionArchive)},
  { 367, 377, sizeof(::TSK::FinalCommandPairArchive)},
  { 382, -1, sizeof(::TSK::CommandContainerArchive)},
  { 388, 395, sizeof(::TSK::ShuffleMappingArchive_Entry)},
  { 397, 410, sizeof(::TSK::ShuffleMappingArchive)},
  { 418, 424, sizeof(::TSK::ProgressiveCommandGroupArchive)},
  { 425, 475, sizeof(::TSK::FormatStructArchive)},
  { 520, 529, sizeof(::TSK::CustomFormatArchive_Condition)},
  { 533, 543, sizeof(::TSK::CustomFormatArchive)},
  { 548, -1, sizeof(::TSK::CustomFormatListArchive)},
  { 555, 564, sizeof(::TSK::AnnotationAuthorArchive)},
  { 568, 575, sizeof(::TSK::DeprecatedChangeAuthorArchive)},
  { 577, -1, sizeof(::TSK::AnnotationAuthorStorageArchive)},
  { 583, 592, sizeof(::TSK::SetAnnotationAuthorColorCommandArchive)},
  { 596, 610, sizeof(::TSK::CommandSelectionBehaviorArchive)},
  { 619, -1, sizeof(::TSK::SelectionPathTransformerArchive)},
  { 625, -1, sizeof(::TSK::SelectionPathArchive)},
  { 631, 637, sizeof(::TSK::DocumentSelectionArchive)},
  { 638, 644, sizeof(::TSK::IdOperationArgs)},
  { 645, 652, sizeof(::TSK::AddIdOperationArgs)},
  { 654, 661, sizeof(::TSK::RemoveIdOperationArgs)},
  { 663, 671, sizeof(::TSK::RearrangeIdOperationArgs)},
  { 674, 682, sizeof(::TSK::IdPlacementOperationArgs)},
  { 685, 691, sizeof(::TSK::NullCommandArchive)},
  { 692, 698, sizeof(::TSK::GroupCommitCommandArchive)},
  { 699, 705, sizeof(::TSK::UpgradeDocPostProcessingCommandArchive)},
  { 706, 712, sizeof(::TSK::InducedCommandCollectionCommitCommandArchive)},
  { 713, 719, sizeof(::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive)},
  { 720, 728, sizeof(::TSK::ChangeDocumentPackageTypeCommandArchive)},
  { 731, 738, sizeof(::TSK::CreateLocalStorageSnapshotCommandArchive)},
  { 740, 746, sizeof(::TSK::BlockDiffsAtCurrentRevisionCommand)},
  { 747, -1, sizeof(::TSK::RangeAddress)},
  { 754, 772, sizeof(::TSK::Operation)},
  { 785, 792, sizeof(::TSK::OperationTransformer)},
  { 794, 802, sizeof(::TSK::TransformerEntry)},
  { 805, 815, sizeof(::TSK::OutgoingCommandQueueItem)},
  { 820, 827, sizeof(::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry)},
  { 829, 836, sizeof(::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry)},
  { 838, 861, sizeof(::TSK::CollaborationDocumentSessionState)},
  { 879, 888, sizeof(::TSK::NativeContentDescription)},
  { 892, 909, sizeof(::TSK::StructuredTextImportSettings)},
  { 921, 931, sizeof(::TSK::OperationStorageCommandOperationsEntry)},
  { 936, 946, sizeof(::TSK::OperationStorageEntry)},
  { 951, 957, sizeof(::TSK::OperationStorageEntryArray)},
  { 958, 968, sizeof(::TSK::OperationStorageEntryArraySegment)},
  { 973, 987, sizeof(::TSK::OperationStorage)},
  { 996, 1002, sizeof(::TSK::OutgoingCommandQueue)},
  { 1003, 1009, sizeof(::TSK::OutgoingCommandQueueSegment)},
  { 1010, 1018, sizeof(::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair)},
  { 1021, -1, sizeof(::TSK::DataReferenceRecord)},
  { 1029, 1040, sizeof(::TSK::CommandAssetChunkArchive)},
  { 1046, 1053, sizeof(::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo)},
  { 1055, 1062, sizeof(::TSK::AssetUploadStatusCommandArchive)},
  { 1064, 1071, sizeof(::TSK::AssetUnmaterializedOnServerCommandArchive)},
  { 1073, 1085, sizeof(::TSK::PencilAnnotationUIState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_TreeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_LocalCommandHistoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_LocalCommandHistoryArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_LocalCommandHistoryArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_LocalCommandHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistoryArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistoryArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistory_ItemList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistoryCoalescingGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistoryCoalescingGroupNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DocumentArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_FormattingSymbolsArchive_CurrencySymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_FormattingSymbolsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DocumentSupportCollaborationState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DocumentSupportArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_ViewStateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CommandGroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_InducedCommandCollectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_PropagatedCommandCollectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_FinalCommandPairArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CommandContainerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_ShuffleMappingArchive_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_ShuffleMappingArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_ProgressiveCommandGroupArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_FormatStructArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CustomFormatArchive_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CustomFormatArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CustomFormatListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_AnnotationAuthorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DeprecatedChangeAuthorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_AnnotationAuthorStorageArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_SetAnnotationAuthorColorCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CommandSelectionBehaviorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_SelectionPathTransformerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_SelectionPathArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DocumentSelectionArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_IdOperationArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_AddIdOperationArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_RemoveIdOperationArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_RearrangeIdOperationArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_IdPlacementOperationArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_NullCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_GroupCommitCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_UpgradeDocPostProcessingCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_InducedCommandCollectionCommitCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_ExecuteTestBetweenRollbackAndReapplyCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_ChangeDocumentPackageTypeCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CreateLocalStorageSnapshotCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_BlockDiffsAtCurrentRevisionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_RangeAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OperationTransformer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_TransformerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OutgoingCommandQueueItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OutgoingCommandQueueItemUUIDToDataMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationDocumentSessionState_AcknowledgementObserverEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CollaborationDocumentSessionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_NativeContentDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_StructuredTextImportSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OperationStorageCommandOperationsEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OperationStorageEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OperationStorageEntryArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OperationStorageEntryArraySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OperationStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OutgoingCommandQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_OutgoingCommandQueueSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DataReferenceRecord_ContainerUUIDToReferencedDataPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_DataReferenceRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_CommandAssetChunkArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_AssetUploadStatusCommandArchive_AssetUploadStatusInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_AssetUploadStatusCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_AssetUnmaterializedOnServerCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSK::_PencilAnnotationUIState_default_instance_),
};

const char descriptor_table_protodef_TSKArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSKArchives.proto\022\003TSK\032\021TSPMessages.pr"
  "oto\"Z\n\010TreeNode\022\014\n\004name\030\001 \001(\t\022 \n\010childre"
  "n\030\002 \003(\0132\016.TSP.Reference\022\036\n\006object\030\003 \001(\0132"
  "\016.TSP.Reference\"f\n\027LocalCommandHistoryIt"
  "em\022\037\n\007command\030\001 \001(\0132\016.TSP.Reference\022*\n\022s"
  "election_behavior\030\002 \001(\0132\016.TSP.Reference\""
  "@\n\030LocalCommandHistoryArray\022$\n\013large_arr"
  "ay\030\001 \002(\0132\017.TSP.LargeArray\"c\n\037LocalComman"
  "dHistoryArraySegment\022@\n\032large_object_arr"
  "ay_segment\030\001 \002(\0132\034.TSP.LargeObjectArrayS"
  "egment\"l\n\023LocalCommandHistory\022\022\n\nundo_co"
  "unt\030\001 \002(\r\022#\n\013items_array\030\002 \001(\0132\016.TSP.Ref"
  "erence\022\034\n\024fixed_radar_13365177\030\n \001(\010\"H\n "
  "CollaborationCommandHistoryArray\022$\n\013larg"
  "e_array\030\001 \002(\0132\017.TSP.LargeArray\"k\n\'Collab"
  "orationCommandHistoryArraySegment\022@\n\032lar"
  "ge_object_array_segment\030\001 \002(\0132\034.TSP.Larg"
  "eObjectArraySegment\"\236\002\n\033CollaborationCom"
  "mandHistory\022#\n\020local_identifier\030\001 \001(\0132\t."
  "TSP.UUID\022=\n\nundo_items\030\002 \001(\0132).TSK.Colla"
  "borationCommandHistory.ItemList\022=\n\nredo_"
  "items\030\003 \001(\0132).TSK.CollaborationCommandHi"
  "story.ItemList\032\\\n\010ItemList\022#\n\013items_arra"
  "y\030\001 \001(\0132\016.TSP.Reference\022+\n\023transformer_e"
  "ntries\030\002 \003(\0132\016.TSP.Reference\"\312\001\n\037Collabo"
  "rationCommandHistoryItem\022\037\n\007command\030\001 \001("
  "\0132\016.TSP.Reference\022\025\n\raction_string\030\002 \001(\t"
  "\022*\n\022selection_behavior\030\003 \001(\0132\016.TSP.Refer"
  "ence\022(\n\020coalescing_group\030\004 \001(\0132\016.TSP.Ref"
  "erence\022\031\n\021revision_sequence\030\005 \001(\004\"u\n*Col"
  "laborationCommandHistoryCoalescingGroup\022"
  "\035\n\005nodes\030\001 \003(\0132\016.TSP.Reference\022(\n\031did_co"
  "alesce_all_commands\030\002 \001(\010:\005false\"Q\n.Coll"
  "aborationCommandHistoryCoalescingGroupNo"
  "de\022\037\n\007command\030\001 \001(\0132\016.TSP.Reference\"\216\001\nD"
  "CollaborationCommandHistoryOriginatingCo"
  "mmandAcknowledgementObserver\022(\n\020coalesci"
  "ng_group\030\001 \001(\0132\016.TSP.Reference\022\034\n\004node\030\002"
  " \001(\0132\016.TSP.Reference\"\366\003\n\017DocumentArchive"
  "\022\031\n\021locale_identifier\030\004 \001(\t\0221\n\031annotatio"
  "n_author_storage\030\007 \001(\0132\016.TSP.Reference\022,"
  "\n\024activity_log_entries\030\010 \003(\0132\016.TSP.Refer"
  "ence\022\"\n\032creation_locale_identifier\030\t \001(\t"
  "\022(\n prevent_image_conversion_on_open\030\n \001"
  "(\010\022\033\n\023has_floating_locale\030\013 \001(\010\022\037\n\027has_u"
  "ser_defined_locale\030\014 \001(\010\0227\n\037collaboratio"
  "n_operation_history\030\016 \001(\0132\016.TSP.Referenc"
  "e\0228\n0should_measure_negatively_tracked_t"
  "ext_correctly\030\017 \001(\010\022-\n%use_optimized_tex"
  "t_vertical_alignment\030\020 \001(\010\0229\n\022formatting"
  "_symbols\030\021 \001(\0132\035.TSK.FormattingSymbolsAr"
  "chive\"\271\n\n\030FormattingSymbolsArchive\022\017\n\007ve"
  "rsion\030\001 \001(\t\022\020\n\010calendar\030\002 \001(\t\022\030\n\020numberi"
  "ng_system\030\003 \001(\t\022\016\n\006months\030\004 \003(\t\022\031\n\021stand"
  "alone_months\030\005 \003(\t\022\024\n\014short_months\030\006 \003(\t"
  "\022\037\n\027standalone_short_months\030\007 \003(\t\022\020\n\010wee"
  "kdays\030\010 \003(\t\022\033\n\023standalone_weekdays\030\t \003(\t"
  "\022\026\n\016short_weekdays\030\n \003(\t\022!\n\031standalone_s"
  "hort_weekdays\030\013 \003(\t\022\021\n\tam_symbol\030\014 \001(\t\022\021"
  "\n\tpm_symbol\030\r \001(\t\022\023\n\013tiny_months\030\016 \003(\t\022\036"
  "\n\026standalone_tiny_months\030\017 \003(\t\022\025\n\rtiny_w"
  "eekdays\030\020 \003(\t\022 \n\030standalone_tiny_weekday"
  "s\030\021 \003(\t\022\020\n\010quarters\030\022 \003(\t\022\033\n\023standalone_"
  "quarters\030\023 \003(\t\022\026\n\016short_quarters\030\024 \003(\t\022!"
  "\n\031standalone_short_quarters\030\025 \003(\t\022\014\n\004era"
  "s\030\026 \003(\t\022\021\n\tlong_eras\030\027 \003(\t\022\032\n\022short_date"
  "_pattern\030\030 \001(\t\022\033\n\023medium_date_pattern\030\031 "
  "\001(\t\022\031\n\021long_date_pattern\030\032 \001(\t\022\031\n\021full_d"
  "ate_pattern\030\033 \001(\t\022\032\n\022short_time_pattern\030"
  "\034 \001(\t\022\033\n\023medium_time_pattern\030\035 \001(\t\022\031\n\021lo"
  "ng_time_pattern\030\036 \001(\t\022\031\n\021full_time_patte"
  "rn\030\037 \001(\t\022\031\n\021decimal_separator\030  \001(\t\022\032\n\022g"
  "rouping_separator\030! \001(\t\022\"\n\032currency_deci"
  "mal_separator\030\" \001(\t\022#\n\033currency_grouping"
  "_separator\030# \001(\t\022\021\n\tplus_sign\030$ \001(\t\022\022\n\nm"
  "inus_sign\030% \001(\t\022\032\n\022exponential_symbol\030& "
  "\001(\t\022\026\n\016percent_symbol\030\' \001(\t\022\030\n\020per_mille"
  "_symbol\030( \001(\t\022\027\n\017infinity_symbol\030) \001(\t\022\022"
  "\n\nnan_symbol\030* \001(\t\022\027\n\017decimal_pattern\030+ "
  "\001(\t\022\032\n\022scientific_pattern\030, \001(\t\022\027\n\017perce"
  "nt_pattern\030- \001(\t\022\030\n\020currency_pattern\030. \001"
  "(\t\022\025\n\rcurrency_code\030/ \001(\t\022F\n\020currency_sy"
  "mbols\0300 \003(\0132,.TSK.FormattingSymbolsArchi"
  "ve.CurrencySymbol\032.\n\016CurrencySymbol\022\014\n\004c"
  "ode\030\001 \002(\t\022\016\n\006symbol\030\002 \002(\t\"\217\001\n!DocumentSu"
  "pportCollaborationState\0225\n\035collaboration"
  "_command_history\030\001 \001(\0132\016.TSP.Reference\0223"
  "\n\033collaboration_session_state\030\002 \001(\0132\016.TS"
  "P.Reference\"\232\004\n\026DocumentSupportArchive\022\'"
  "\n\017command_history\030\001 \001(\0132\016.TSP.Reference\022"
  "\022\n\nundo_count\030\004 \001(\r\022\022\n\nredo_count\030\005 \001(\r\022"
  "\032\n\022undo_action_string\030\006 \001(\t\022\032\n\022redo_acti"
  "on_string\030\007 \001(\t\022!\n\tweb_state\030\010 \001(\0132\016.TSP"
  ".Reference\022\'\n\030is_in_collaboration_mode\030\t"
  " \001(\010:\005false\022\"\n\032action_string_localizatio"
  "n\030\014 \001(\t\022+\n\023collaboration_state\030\r \001(\0132\016.T"
  "SP.Reference\022>\n\"command_selection_behavi"
  "or_history\030\002 \001(\0132\016.TSP.ReferenceB\002\030\001\022&\n\n"
  "view_state\030\003 \001(\0132\016.TSP.ReferenceB\002\030\001\0229\n\035"
  "collaboration_command_history\030\n \001(\0132\016.TS"
  "P.ReferenceB\002\030\001\0227\n\033collaboration_session"
  "_state\030\013 \001(\0132\016.TSP.ReferenceB\002\030\001\"\205\001\n\020Vie"
  "wStateArchive\022\'\n\017view_state_root\030\001 \002(\0132\016"
  ".TSP.Reference\022\"\n\032document_revision_sequ"
  "ence\030\002 \001(\005\022$\n\034document_revision_identifi"
  "er\030\003 \001(\t\"\361\001\n\016CommandArchive\022)\n\rundoRedoS"
  "tate\030\001 \001(\0132\016.TSP.ReferenceB\002\030\001\022&\n\016undoCo"
  "llection\030\002 \001(\0132\016.TSP.Reference\022\035\n\025shadow"
  "ed_by_transform\030\003 \001(\010\022\032\n\022shadowed_by_com"
  "mit\030\004 \001(\010\022\016\n\006remote\030\005 \001(\010\022&\n\036should_hold"
  "_until_group_commit\030\006 \001(\010\022\031\n\021server_orig"
  "inated\030\007 \001(\010\"\232\001\n\023CommandGroupArchive\022\"\n\005"
  "super\030\001 \002(\0132\023.TSK.CommandArchive\022 \n\010comm"
  "ands\030\002 \003(\0132\016.TSP.Reference\022&\n\017process_re"
  "sults\030\003 \001(\0132\r.TSP.IndexSet\022\025\n\raction_str"
  "ing\030\004 \001(\t\"\327\001\n\037InducedCommandCollectionAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022(\n\020inducing_command\030\002 \001(\0132\016.TSP.Refere"
  "nce\022(\n\020induced_commands\030\003 \003(\0132\016.TSP.Refe"
  "rence\022<\n%indexes_of_processed_induced_co"
  "mmands\030\004 \001(\0132\r.TSP.IndexSet\"\212\002\n\"Propagat"
  "edCommandCollectionArchive\022\"\n\005super\030\001 \002("
  "\0132\023.TSK.CommandArchive\022,\n\024propagatable_c"
  "ommand\030\002 \002(\0132\016.TSP.Reference\0222\n#propagat"
  "able_command_process_result\030\003 \001(\010:\005false"
  "\022+\n\023propagating_command\030\004 \002(\0132\016.TSP.Refe"
  "rence\0221\n\"propagating_command_process_res"
  "ult\030\005 \001(\010:\005false\"\331\001\n\027FinalCommandPairArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022\037\n\007command\030\002 \002(\0132\016.TSP.Reference\022%\n\026com"
  "mand_process_result\030\003 \001(\010:\005false\022%\n\rfina"
  "l_command\030\004 \002(\0132\016.TSP.Reference\022+\n\034final"
  "_command_process_result\030\005 \001(\010:\005false\";\n\027"
  "CommandContainerArchive\022 \n\010commands\030\001 \003("
  "\0132\016.TSP.Reference\"\273\002\n\025ShuffleMappingArch"
  "ive\022\023\n\013start_index\030\001 \002(\r\022\021\n\tend_index\030\002 "
  "\002(\r\0221\n\007entries\030\003 \003(\0132 .TSK.ShuffleMappin"
  "gArchive.Entry\022\031\n\013is_vertical\030\004 \001(\010:\004tru"
  "e\022 \n\021is_move_operation\030\005 \001(\010:\005false\022\034\n\021f"
  "irst_moved_index\030\006 \001(\r:\0010\022%\n\032destination"
  "_index_for_move\030\007 \001(\r:\0010\022\"\n\027number_of_in"
  "dexes_moved\030\010 \001(\r:\0010\032!\n\005Entry\022\014\n\004from\030\001 "
  "\002(\r\022\n\n\002to\030\002 \002(\r\"I\n\036ProgressiveCommandGro"
  "upArchive\022\'\n\005super\030\001 \002(\0132\030.TSK.CommandGr"
  "oupArchive\"\314\n\n\023FormatStructArchive\022\023\n\013fo"
  "rmat_type\030\001 \002(\r\022\026\n\016decimal_places\030\002 \001(\r\022"
  "\025\n\rcurrency_code\030\003 \001(\t\022\026\n\016negative_style"
  "\030\004 \001(\r\022 \n\030show_thousands_separator\030\005 \001(\010"
  "\022\034\n\024use_accounting_style\030\006 \001(\010\022\026\n\016durati"
  "on_style\030\007 \001(\r\022\014\n\004base\030\010 \001(\r\022\023\n\013base_pla"
  "ces\030\t \001(\r\022\033\n\023base_use_minus_sign\030\n \001(\010\022\031"
  "\n\021fraction_accuracy\030\013 \001(\r\022\034\n\024suppress_da"
  "te_format\030\014 \001(\010\022\034\n\024suppress_time_format\030"
  "\r \001(\010\022\030\n\020date_time_format\030\016 \001(\t\022\035\n\025durat"
  "ion_unit_largest\030\017 \001(\r\022\036\n\026duration_unit_"
  "smallest\030\020 \001(\r\022\021\n\tcustom_id\030\021 \001(\r\022\034\n\024cus"
  "tom_format_string\030\022 \001(\t\022\024\n\014scale_factor\030"
  "\023 \001(\001\022%\n\035requires_fraction_replacement\030\024"
  " \001(\010\022\027\n\017control_minimum\030\025 \001(\001\022\027\n\017control"
  "_maximum\030\026 \001(\001\022\031\n\021control_increment\030\027 \001("
  "\001\022\033\n\023control_format_type\030\030 \001(\r\022\032\n\022slider"
  "_orientation\030\031 \001(\r\022\027\n\017slider_position\030\032 "
  "\001(\r\022\025\n\rdecimal_width\030\033 \001(\r\022\031\n\021min_intege"
  "r_width\030\034 \001(\r\022#\n\033num_nonspace_integer_di"
  "gits\030\035 \001(\r\022#\n\033num_nonspace_decimal_digit"
  "s\030\036 \001(\r\022%\n\035index_from_right_last_integer"
  "\030\037 \001(\r\022\034\n\024interstitial_strings\030  \003(\t\0223\n\034"
  "inters_str_insertion_indexes\030! \001(\0132\r.TSP"
  ".IndexSet\022\037\n\027num_hash_decimal_digits\030\" \001"
  "(\r\022 \n\030total_num_decimal_digits\030# \001(\r\022\022\n\n"
  "is_complex\030$ \001(\010\022\036\n\026contains_integer_tok"
  "en\030% \001(\010\022*\n\"multiple_choice_list_initial"
  "_value\030& \001(\r\022\037\n\027multiple_choice_list_id\030"
  "\' \001(\r\022$\n\034use_automatic_duration_units\030( "
  "\001(\010\022\035\n\ncustom_uid\030) \001(\0132\t.TSP.UUID\022/\n\rcu"
  "stom_format\030* \001(\0132\030.TSK.CustomFormatArch"
  "ive\022\026\n\016uses_plus_sign\030+ \001(\010\022\030\n\020bool_true"
  "_string\030, \001(\t\022\031\n\021bool_false_string\030- \001(\t"
  "*\007\010\220N\020\240\234\001\"\317\002\n\023CustomFormatArchive\022\014\n\004nam"
  "e\030\001 \002(\t\022\033\n\023format_type_pre_bnc\030\002 \002(\r\0220\n\016"
  "default_format\030\003 \002(\0132\030.TSK.FormatStructA"
  "rchive\0226\n\nconditions\030\004 \003(\0132\".TSK.CustomF"
  "ormatArchive.Condition\022\023\n\013format_type\030\005 "
  "\001(\r\032\215\001\n\tCondition\022\026\n\016condition_type\030\001 \002("
  "\r\022\027\n\017condition_value\030\002 \001(\002\0222\n\020condition_"
  "format\030\003 \002(\0132\030.TSK.FormatStructArchive\022\033"
  "\n\023condition_value_dbl\030\004 \001(\001\"e\n\027CustomFor"
  "matListArchive\022\030\n\005uuids\030\001 \003(\0132\t.TSP.UUID"
  "\0220\n\016custom_formats\030\002 \003(\0132\030.TSK.CustomFor"
  "matArchive\"o\n\027AnnotationAuthorArchive\022\014\n"
  "\004name\030\001 \001(\t\022\031\n\005color\030\002 \001(\0132\n.TSP.Color\022\021"
  "\n\tpublic_id\030\003 \001(\t\022\030\n\020is_public_author\030\004 "
  "\001(\010\"O\n\035DeprecatedChangeAuthorArchive\022\014\n\004"
  "name\030\001 \001(\t\022 \n\014change_color\030\002 \001(\0132\n.TSP.C"
  "olor\"K\n\036AnnotationAuthorStorageArchive\022)"
  "\n\021annotation_author\030\001 \003(\0132\016.TSP.Referenc"
  "e\"\261\001\n&SetAnnotationAuthorColorCommandArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022)\n\021annotation_author\030\002 \001(\0132\016.TSP.Refere"
  "nce\022\031\n\005color\030\003 \001(\0132\n.TSP.Color\022\035\n\told_co"
  "lor\030\004 \001(\0132\n.TSP.Color\"\357\003\n\037CommandSelecti"
  "onBehaviorArchive\0225\n\022archived_selection\030"
  "\010 \001(\0132\031.TSK.SelectionPathArchive\0229\n\026arch"
  "ived_old_selection\030\001 \001(\0132\031.TSK.Selection"
  "PathArchive\0229\n\026archived_new_selection\030\002 "
  "\001(\0132\031.TSK.SelectionPathArchive\022\027\n\017select"
  "ion_flags\030\003 \001(\004\022*\n\"additional_forward_se"
  "lection_flags\030\004 \001(\004\022*\n\"additional_revers"
  "e_selection_flags\030\005 \001(\004\022:\n\"forward_selec"
  "tion_path_transformer\030\006 \001(\0132\016.TSP.Refere"
  "nce\022:\n\"reverse_selection_path_transforme"
  "r\030\007 \001(\0132\016.TSP.Reference\0226\n\036additional_se"
  "lection_behaviors\030\t \003(\0132\016.TSP.Reference\""
  "Q\n\037SelectionPathTransformerArchive\022.\n\026se"
  "lection_transformers\030\001 \003(\0132\016.TSP.Referen"
  "ce\"B\n\024SelectionPathArchive\022*\n\022ordered_se"
  "lections\030\001 \003(\0132\016.TSP.Reference\"A\n\030Docume"
  "ntSelectionArchive\022%\n\rdocument_root\030\001 \001("
  "\0132\016.TSP.Reference\"1\n\017IdOperationArgs\022\036\n\007"
  "id_path\030\001 \002(\0132\r.TSP.UUIDPath\"H\n\022AddIdOpe"
  "rationArgs\022#\n\005super\030\001 \002(\0132\024.TSK.IdOperat"
  "ionArgs\022\r\n\005index\030\002 \002(\005\"K\n\025RemoveIdOperat"
  "ionArgs\022#\n\005super\030\001 \002(\0132\024.TSK.IdOperation"
  "Args\022\r\n\005index\030\002 \002(\005\"e\n\030RearrangeIdOperat"
  "ionArgs\022#\n\005super\030\001 \002(\0132\024.TSK.IdOperation"
  "Args\022\022\n\nfrom_index\030\002 \002(\005\022\020\n\010to_index\030\003 \002"
  "(\005\"e\n\030IdPlacementOperationArgs\022#\n\005super\030"
  "\001 \002(\0132\024.TSK.IdOperationArgs\022\022\n\nfrom_inde"
  "x\030\002 \002(\005\022\020\n\010to_index\030\003 \002(\005\"8\n\022NullCommand"
  "Archive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArch"
  "ive\"\?\n\031GroupCommitCommandArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\"L\n&UpgradeD"
  "ocPostProcessingCommandArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\"R\n,InducedCom"
  "mandCollectionCommitCommandArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\"X\n2Execut"
  "eTestBetweenRollbackAndReapplyCommandArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\"\260\002\n\'ChangeDocumentPackageTypeCommandArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022R\n\020new_package_type\030\002 \002(\01628.TSK.ChangeD"
  "ocumentPackageTypeCommandArchive.Package"
  "Type\022R\n\020old_package_type\030\003 \002(\01628.TSK.Cha"
  "ngeDocumentPackageTypeCommandArchive.Pac"
  "kageType\"9\n\013PackageType\022\013\n\007Default\020\000\022\r\n\t"
  "Directory\020\001\022\016\n\nSingleFile\020\002\"c\n(CreateLoc"
  "alStorageSnapshotCommandArchive\022\"\n\005super"
  "\030\001 \002(\0132\023.TSK.CommandArchive\022\023\n\013snapshot_"
  "id\030\002 \001(\t\"H\n\"BlockDiffsAtCurrentRevisionC"
  "ommand\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\">\n\014RangeAddress\022\032\n\022address_identifier"
  "\030\001 \003(\004\022\022\n\nrange_list\030\002 \003(\r\"\212\004\n\tOperation"
  "\0228\n\004type\030\001 \001(\0162\034.TSK.Operation.Operation"
  "Type:\014ReplaceRange\022\023\n\004noop\030\002 \001(\010:\005false\022"
  "\036\n\022address_identifier\030\003 \003(\006B\002\020\001\022\030\n\rinser"
  "t_length\030\004 \001(\004:\0011\022/\n preserve_lower_prio"
  "rity_location\030\005 \001(\010:\005false\022\026\n\nrange_list"
  "\030\006 \003(\rB\002\020\001\022\035\n\022transform_behavior\030\007 \001(\r:\001"
  "7\022\023\n\013property_id\030\010 \001(\r\022\026\n\nfrom_index\030\t \001"
  "(\005:\002-1\022\024\n\010to_index\030\n \001(\005:\002-1\022\031\n\ndominati"
  "ng\030\013 \001(\010:\005false\022\030\n\014object_count\030\014 \001(\005:\002-"
  "1\022\037\n\024object_counter_space\030\r \001(\005:\0010\"s\n\rOp"
  "erationType\022\007\n\003Add\020\000\022\n\n\006Remove\020\001\022\r\n\tPlac"
  "ement\020\002\022\r\n\tRearrange\020\003\022\014\n\010UpdateId\020\004\022\017\n\013"
  "UpdateRange\020\005\022\020\n\014ReplaceRange\020\006\"S\n\024Opera"
  "tionTransformer\022\027\n\017higher_priority\030\001 \002(\010"
  "\022\"\n\noperations\030\002 \003(\0132\016.TSK.Operation\"k\n\020"
  "TransformerEntry\022\020\n\010sequence\030\001 \002(\004\022\025\n\rcr"
  "eation_time\030\002 \002(\001\022.\n\013transformer\030\003 \002(\0132\031"
  ".TSK.OperationTransformer\"\305\002\n\030OutgoingCo"
  "mmandQueueItem\022\037\n\007command\030\001 \001(\0132\016.TSP.Re"
  "ference\022:\n2serialized_json_without_data_"
  "base64_encoded_string\030\002 \001(\t\022L\n0serialize"
  "d_json_without_data_base64_encoded_data\030"
  "\004 \001(\0132\022.TSP.DataReference\022Q\n\030uuid_to_dat"
  "a_map_entries\030\003 \003(\0132/.TSK.OutgoingComman"
  "dQueueItemUUIDToDataMapEntry\022+\n\017large_da"
  "ta_list\030\005 \003(\0132\022.TSP.DataReference\"g\n*Out"
  "goingCommandQueueItemUUIDToDataMapEntry\022"
  "\027\n\004uuid\030\001 \002(\0132\t.TSP.UUID\022 \n\004data\030\002 \002(\0132\022"
  ".TSP.DataReference\"\327\n\n!CollaborationDocu"
  "mentSessionState\022\030\n\020collaborator_ids\030\001 \003"
  "(\t\0220\n\030rsvp_command_queue_items\030\003 \003(\0132\016.T"
  "SP.Reference\022\?\n\'collaborator_cursor_tran"
  "sformer_entries\030\004 \003(\0132\016.TSP.Reference\022J\n"
  "2acknowledged_commands_pending_resume_pr"
  "ocess_diffs\030\005 \003(\0132\016.TSP.Reference\022I\n1unp"
  "rocessed_commands_pending_resume_process"
  "_diffs\030\006 \003(\0132\016.TSP.Reference\022u\n(command_"
  "acknowledgement_observer_entries\030\007 \003(\0132C"
  ".TSK.CollaborationDocumentSessionState.A"
  "cknowledgementObserverEntry\022O\n7transform"
  "er_from_unprocessed_command_operations_e"
  "ntries\030\010 \003(\0132\016.TSP.Reference\0222\n*mailbox_"
  "request_document_revision_sequence\030\n \001(\005"
  "\022\?\n,mailbox_request_document_revision_id"
  "entifier\030\013 \001(\0132\t.TSP.UUID\022U\nFlast_send_p"
  "ending_command_queue_item_was_moved_from"
  "_rsvp_command_queue\030\014 \001(\010:\005false\022)\n!last"
  "_command_send_marker_sequence\030\r \001(\005\0226\n#l"
  "ast_command_send_marker_identifier\030\016 \001(\013"
  "2\t.TSP.UUID\022R\n:skipped_acknowledged_comm"
  "ands_pending_resume_process_diffs\030\017 \003(\0132"
  "\016.TSP.Reference\0222\n\037last_too_old_command_"
  "identifier\030\020 \001(\0132\t.TSP.UUID\022R\n:unprocess"
  "ed_operation_entries_pending_resume_proc"
  "ess_diffs\030\021 \001(\0132\016.TSP.Reference\0222\n\032send_"
  "pending_command_queue\030\022 \001(\0132\016.TSP.Refere"
  "nce\022J\n\?count_of_send_pending_command_que"
  "ue_items_moved_from_rsvp_queue\030\023 \001(\004:\0010\022"
  "A\n.last_enqueued_document_load_command_i"
  "dentifier\030\024 \001(\0132\t.TSP.UUID\032x\n\034Acknowledg"
  "ementObserverEntry\022%\n\022command_identifier"
  "\030\001 \002(\0132\t.TSP.UUID\0221\n\031acknowledgement_obs"
  "ervers\030\002 \003(\0132\016.TSP.Reference\"\205\001\n\030NativeC"
  "ontentDescription\022\020\n\010app_name\030\001 \001(\t\022\023\n\013a"
  "pp_version\030\002 \001(\t\022\023\n\013document_id\030\003 \001(\t\022-\n"
  "\025drawable_descriptions\030\004 \003(\0132\016.TSP.Refer"
  "ence\"\203\003\n\034StructuredTextImportSettings\022+\n"
  "\004type\030\001 \002(\0162\035.TSK.StructuredTextImportTy"
  "pe\022\024\n\014starting_row\030\002 \002(\005\022\032\n\022decimal_sepa"
  "rators\030\003 \003(\t\022\034\n\024thousands_separators\030\004 \003"
  "(\t\022\"\n\032transpose_rows_and_columns\030\005 \001(\010\022\022"
  "\n\ndelimiters\030\006 \003(\t\022\027\n\017text_qualifiers\030\007 "
  "\003(\t\022\034\n\024collapse_consecutive\030\010 \001(\010\022%\n\016col"
  "umn_offsets\030\t \001(\0132\r.TSP.IndexSet\022\034\n\024auto"
  "matic_delimiters\030\n \001(\010\022\031\n\021automatic_offs"
  "ets\030\013 \001(\010\022\027\n\017source_encoding\030\014 \001(\004\"\346\001\n&O"
  "perationStorageCommandOperationsEntry\0226\n"
  ".command_identifier_same_as_revision_ide"
  "ntifier\030\001 \001(\010\022\036\n\022command_identifier\030\002 \003("
  "\006B\002\020\001\022\"\n\noperations\030\003 \003(\0132\016.TSK.Operatio"
  "n\022\031\n\021server_originated\030\004 \001(\010\022%\n\035coalesce"
  "d_command_entry_count\030\005 \001(\004\"\201\002\n\025Operatio"
  "nStorageEntry\022(\n\034document_revision_ident"
  "ifier\030\001 \003(\006B\002\020\001\022(\n document_revision_seq"
  "uence_delta\030\002 \001(\005\022N\n\031command_operation_e"
  "ntries\030\003 \003(\0132+.TSK.OperationStorageComma"
  "ndOperationsEntry\022!\n\031first_entry_creatio"
  "n_time\030\004 \001(\001\022!\n\031creation_time_diff_bucke"
  "t\030\005 \001(\005\"B\n\032OperationStorageEntryArray\022$\n"
  "\013large_array\030\001 \001(\0132\017.TSP.LargeArray\"\222\002\n!"
  "OperationStorageEntryArraySegment\0223\n\023lar"
  "ge_array_segment\030\001 \001(\0132\026.TSP.LargeArrayS"
  "egment\022,\n\010elements\030\002 \003(\0132\032.TSK.Operation"
  "StorageEntry\0226\n.last_document_revision_s"
  "equence_before_segment\030\003 \001(\005\022\'\n\037last_doc"
  "ument_revision_sequence\030\004 \001(\005\022)\n!segment"
  "_first_entry_creation_time\030\005 \001(\001\"\343\003\n\020Ope"
  "rationStorage\022\037\n\007entries\030\001 \002(\0132\016.TSP.Ref"
  "erence\022\027\n\017operation_count\030\002 \002(\004\022\'\n\037last_"
  "document_revision_sequence\030\003 \001(\005\022-\n!last"
  "_document_revision_identifier\030\004 \003(\006B\002\020\001\022"
  "B\n:last_unskippable_document_revision_be"
  "fore_entries_sequence\030\005 \001(\005\022H\n<last_unsk"
  "ippable_document_revision_before_entries"
  "_identifier\030\006 \003(\006B\002\020\001\022>\n6last_unskippabl"
  "e_document_revision_in_entries_sequence\030"
  "\007 \001(\005\022D\n8last_unskippable_document_revis"
  "ion_in_entries_identifier\030\010 \003(\006B\002\020\001\022)\n\022d"
  "ays_with_an_entry\030\t \001(\0132\r.TSP.IndexSet\"I"
  "\n\024OutgoingCommandQueue\0221\n\022large_object_a"
  "rray\030\001 \001(\0132\025.TSP.LargeObjectArray\"_\n\033Out"
  "goingCommandQueueSegment\022@\n\032large_object"
  "_array_segment\030\001 \001(\0132\034.TSP.LargeObjectAr"
  "raySegment\"\304\003\n\023DataReferenceRecord\022q\n-ad"
  "ded_container_uuid_to_referenced_data_pa"
  "irs\030\001 \003(\0132:.TSK.DataReferenceRecord.Cont"
  "ainerUUIDToReferencedDataPair\022s\n/removed"
  "_container_uuid_to_referenced_data_pairs"
  "\030\002 \003(\0132:.TSK.DataReferenceRecord.Contain"
  "erUUIDToReferencedDataPair\0226\n\032unbounded_"
  "referenced_datas\030\003 \003(\0132\022.TSP.DataReferen"
  "ce\032\214\001\n!ContainerUUIDToReferencedDataPair"
  "\022!\n\016container_uuid\030\001 \002(\0132\t.TSP.UUID\022+\n\017r"
  "eferenced_data\030\002 \002(\0132\022.TSP.DataReference"
  "\022\027\n\017reference_count\030\003 \002(\r\"\265\001\n\030CommandAss"
  "etChunkArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
  "andArchive\022\016\n\006digest\030\002 \001(\t\022\023\n\013asset_chun"
  "k\030\003 \001(\t\022\032\n\022asset_chunk_length\030\004 \002(\003\022\027\n\017r"
  "esume_position\030\005 \002(\003\022\033\n\023materialized_len"
  "gth\030\006 \002(\003\"\353\001\n\037AssetUploadStatusCommandAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\022M\n\tinfo_list\030\002 \003(\0132:.TSK.AssetUploadSt"
  "atusCommandArchive.AssetUploadStatusInfo"
  "\032U\n\025AssetUploadStatusInfo\022\016\n\006digest\030\001 \001("
  "\t\022,\n\rupload_status\030\002 \001(\0162\025.TSP.DataUploa"
  "dStatus\"d\n)AssetUnmaterializedOnServerCo"
  "mmandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\022\023\n\013digest_list\030\002 \003(\t\"\352\002\n\027Pencil"
  "AnnotationUIState\022U\n\021current_tool_type\030\001"
  " \001(\01625.TSK.PencilAnnotationUIState.Penci"
  "lAnnotationToolType:\003Pen\022\"\n\016pen_tool_col"
  "or\030\002 \001(\0132\n.TSP.Color\022\030\n\020pen_tool_opacity"
  "\030\003 \001(\002\022\026\n\016pen_tool_width\030\004 \001(\002\022*\n\026highli"
  "ghter_tool_color\030\005 \001(\0132\n.TSP.Color\022 \n\030hi"
  "ghlighter_tool_opacity\030\006 \001(\002\022\036\n\026highligh"
  "ter_tool_width\030\007 \001(\002\"4\n\030PencilAnnotation"
  "ToolType\022\007\n\003Pen\020\000\022\017\n\013Highlighter\020\001*g\n\030St"
  "ructuredTextImportType\022\026\n\022ImportType_UNK"
  "NOWN\020\000\022\030\n\024ImportType_DELIMITED\020\001\022\031\n\025Impo"
  "rtType_FIXEDWIDTH\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSKArchives_2eproto_deps[1] = {
  &::descriptor_table_TSPMessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSKArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSKArchives_2eproto = {
  false, false, 16059, descriptor_table_protodef_TSKArchives_2eproto, "TSKArchives.proto", 
  &descriptor_table_TSKArchives_2eproto_once, descriptor_table_TSKArchives_2eproto_deps, 1, 77,
  schemas, file_default_instances, TableStruct_TSKArchives_2eproto::offsets,
  file_level_metadata_TSKArchives_2eproto, file_level_enum_descriptors_TSKArchives_2eproto, file_level_service_descriptors_TSKArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSKArchives_2eproto_getter() {
  return &descriptor_table_TSKArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSKArchives_2eproto(&descriptor_table_TSKArchives_2eproto);
namespace TSK {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[0];
}
bool ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::Default;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::Directory;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::SingleFile;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::PackageType_MIN;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::PackageType_MAX;
constexpr int ChangeDocumentPackageTypeCommandArchive::PackageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[1];
}
bool Operation_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Operation_OperationType Operation::Add;
constexpr Operation_OperationType Operation::Remove;
constexpr Operation_OperationType Operation::Placement;
constexpr Operation_OperationType Operation::Rearrange;
constexpr Operation_OperationType Operation::UpdateId;
constexpr Operation_OperationType Operation::UpdateRange;
constexpr Operation_OperationType Operation::ReplaceRange;
constexpr Operation_OperationType Operation::OperationType_MIN;
constexpr Operation_OperationType Operation::OperationType_MAX;
constexpr int Operation::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PencilAnnotationUIState_PencilAnnotationToolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[2];
}
bool PencilAnnotationUIState_PencilAnnotationToolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::Pen;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::Highlighter;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::PencilAnnotationToolType_MIN;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::PencilAnnotationToolType_MAX;
constexpr int PencilAnnotationUIState::PencilAnnotationToolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StructuredTextImportType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSKArchives_2eproto);
  return file_level_enum_descriptors_TSKArchives_2eproto[3];
}
bool StructuredTextImportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TreeNode::_Internal {
 public:
  using HasBits = decltype(std::declval<TreeNode>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& object(const TreeNode* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
TreeNode::_Internal::object(const TreeNode* msg) {
  return *msg->object_;
}
void TreeNode::clear_children() {
  children_.Clear();
}
void TreeNode::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TreeNode::TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  children_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.TreeNode)
}

inline void TreeNode::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_ = nullptr;
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:TSK.TreeNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_;
}

void TreeNode::ArenaDtor(void* object) {
  TreeNode* _this = reinterpret_cast< TreeNode* >(object);
  (void)_this;
}
void TreeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.TreeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.TreeNode.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.TreeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.TreeNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .TSP.Reference children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_children(i), target, stream);
  }

  // optional .TSP.Reference object = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.TreeNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSP.Reference object = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TreeNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TreeNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TreeNode::GetClassData() const { return &_class_data_; }

void TreeNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TreeNode *>(to)->MergeFrom(
      static_cast<const TreeNode &>(from));
}


void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(children_)) return false;
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(object_, other->object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[0]);
}

// ===================================================================

class LocalCommandHistoryItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistoryItem>()._has_bits_);
  static const ::TSP::Reference& command(const LocalCommandHistoryItem* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& selection_behavior(const LocalCommandHistoryItem* msg);
  static void set_has_selection_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
LocalCommandHistoryItem::_Internal::command(const LocalCommandHistoryItem* msg) {
  return *msg->command_;
}
const ::TSP::Reference&
LocalCommandHistoryItem::_Internal::selection_behavior(const LocalCommandHistoryItem* msg) {
  return *msg->selection_behavior_;
}
void LocalCommandHistoryItem::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LocalCommandHistoryItem::clear_selection_behavior() {
  if (selection_behavior_ != nullptr) selection_behavior_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LocalCommandHistoryItem::LocalCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistoryItem)
}
LocalCommandHistoryItem::LocalCommandHistoryItem(const LocalCommandHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    command_ = new ::TSP::Reference(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_selection_behavior()) {
    selection_behavior_ = new ::TSP::Reference(*from.selection_behavior_);
  } else {
    selection_behavior_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistoryItem)
}

inline void LocalCommandHistoryItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selection_behavior_) -
    reinterpret_cast<char*>(&command_)) + sizeof(selection_behavior_));
}

LocalCommandHistoryItem::~LocalCommandHistoryItem() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistoryItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalCommandHistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete selection_behavior_;
}

void LocalCommandHistoryItem::ArenaDtor(void* object) {
  LocalCommandHistoryItem* _this = reinterpret_cast< LocalCommandHistoryItem* >(object);
  (void)_this;
}
void LocalCommandHistoryItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalCommandHistoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalCommandHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selection_behavior_ != nullptr);
      selection_behavior_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_behavior = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_behavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalCommandHistoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command(this), target, stream);
  }

  // optional .TSP.Reference selection_behavior = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selection_behavior(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistoryItem)
  return target;
}

size_t LocalCommandHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .TSP.Reference selection_behavior = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_behavior_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistoryItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalCommandHistoryItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistoryItem::GetClassData() const { return &_class_data_; }

void LocalCommandHistoryItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LocalCommandHistoryItem *>(to)->MergeFrom(
      static_cast<const LocalCommandHistoryItem &>(from));
}


void LocalCommandHistoryItem::MergeFrom(const LocalCommandHistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_command()->::TSP::Reference::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_selection_behavior()->::TSP::Reference::MergeFrom(from._internal_selection_behavior());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistoryItem::CopyFrom(const LocalCommandHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistoryItem::IsInitialized() const {
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  if (_internal_has_selection_behavior()) {
    if (!selection_behavior_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistoryItem::InternalSwap(LocalCommandHistoryItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalCommandHistoryItem, selection_behavior_)
      + sizeof(LocalCommandHistoryItem::selection_behavior_)
      - PROTOBUF_FIELD_OFFSET(LocalCommandHistoryItem, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistoryItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[1]);
}

// ===================================================================

class LocalCommandHistoryArray::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistoryArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const LocalCommandHistoryArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeArray&
LocalCommandHistoryArray::_Internal::large_array(const LocalCommandHistoryArray* msg) {
  return *msg->large_array_;
}
void LocalCommandHistoryArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LocalCommandHistoryArray::LocalCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistoryArray)
}
LocalCommandHistoryArray::LocalCommandHistoryArray(const LocalCommandHistoryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistoryArray)
}

inline void LocalCommandHistoryArray::SharedCtor() {
large_array_ = nullptr;
}

LocalCommandHistoryArray::~LocalCommandHistoryArray() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistoryArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalCommandHistoryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void LocalCommandHistoryArray::ArenaDtor(void* object) {
  LocalCommandHistoryArray* _this = reinterpret_cast< LocalCommandHistoryArray* >(object);
  (void)_this;
}
void LocalCommandHistoryArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalCommandHistoryArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalCommandHistoryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistoryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistoryArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalCommandHistoryArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistoryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistoryArray)
  return target;
}

size_t LocalCommandHistoryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistoryArray)
  size_t total_size = 0;

  // required .TSP.LargeArray large_array = 1;
  if (_internal_has_large_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistoryArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalCommandHistoryArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistoryArray::GetClassData() const { return &_class_data_; }

void LocalCommandHistoryArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LocalCommandHistoryArray *>(to)->MergeFrom(
      static_cast<const LocalCommandHistoryArray &>(from));
}


void LocalCommandHistoryArray::MergeFrom(const LocalCommandHistoryArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistoryArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistoryArray::CopyFrom(const LocalCommandHistoryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistoryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistoryArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistoryArray::InternalSwap(LocalCommandHistoryArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistoryArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[2]);
}

// ===================================================================

class LocalCommandHistoryArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistoryArraySegment>()._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_object_array_segment(const LocalCommandHistoryArraySegment* msg);
  static void set_has_large_object_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeObjectArraySegment&
LocalCommandHistoryArraySegment::_Internal::large_object_array_segment(const LocalCommandHistoryArraySegment* msg) {
  return *msg->large_object_array_segment_;
}
void LocalCommandHistoryArraySegment::clear_large_object_array_segment() {
  if (large_object_array_segment_ != nullptr) large_object_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LocalCommandHistoryArraySegment::LocalCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistoryArraySegment)
}
LocalCommandHistoryArraySegment::LocalCommandHistoryArraySegment(const LocalCommandHistoryArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array_segment()) {
    large_object_array_segment_ = new ::TSP::LargeObjectArraySegment(*from.large_object_array_segment_);
  } else {
    large_object_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistoryArraySegment)
}

inline void LocalCommandHistoryArraySegment::SharedCtor() {
large_object_array_segment_ = nullptr;
}

LocalCommandHistoryArraySegment::~LocalCommandHistoryArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistoryArraySegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalCommandHistoryArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_object_array_segment_;
}

void LocalCommandHistoryArraySegment::ArenaDtor(void* object) {
  LocalCommandHistoryArraySegment* _this = reinterpret_cast< LocalCommandHistoryArraySegment* >(object);
  (void)_this;
}
void LocalCommandHistoryArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalCommandHistoryArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalCommandHistoryArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistoryArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_object_array_segment_ != nullptr);
    large_object_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistoryArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalCommandHistoryArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistoryArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_object_array_segment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistoryArraySegment)
  return target;
}

size_t LocalCommandHistoryArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistoryArraySegment)
  size_t total_size = 0;

  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (_internal_has_large_object_array_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_object_array_segment_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistoryArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalCommandHistoryArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistoryArraySegment::GetClassData() const { return &_class_data_; }

void LocalCommandHistoryArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LocalCommandHistoryArraySegment *>(to)->MergeFrom(
      static_cast<const LocalCommandHistoryArraySegment &>(from));
}


void LocalCommandHistoryArraySegment::MergeFrom(const LocalCommandHistoryArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistoryArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array_segment()) {
    _internal_mutable_large_object_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(from._internal_large_object_array_segment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistoryArraySegment::CopyFrom(const LocalCommandHistoryArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistoryArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistoryArraySegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_large_object_array_segment()) {
    if (!large_object_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistoryArraySegment::InternalSwap(LocalCommandHistoryArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_object_array_segment_, other->large_object_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistoryArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[3]);
}

// ===================================================================

class LocalCommandHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCommandHistory>()._has_bits_);
  static void set_has_undo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& items_array(const LocalCommandHistory* msg);
  static void set_has_items_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fixed_radar_13365177(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
LocalCommandHistory::_Internal::items_array(const LocalCommandHistory* msg) {
  return *msg->items_array_;
}
void LocalCommandHistory::clear_items_array() {
  if (items_array_ != nullptr) items_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LocalCommandHistory::LocalCommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.LocalCommandHistory)
}
LocalCommandHistory::LocalCommandHistory(const LocalCommandHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_items_array()) {
    items_array_ = new ::TSP::Reference(*from.items_array_);
  } else {
    items_array_ = nullptr;
  }
  ::memcpy(&undo_count_, &from.undo_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed_radar_13365177_) -
    reinterpret_cast<char*>(&undo_count_)) + sizeof(fixed_radar_13365177_));
  // @@protoc_insertion_point(copy_constructor:TSK.LocalCommandHistory)
}

inline void LocalCommandHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&items_array_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fixed_radar_13365177_) -
    reinterpret_cast<char*>(&items_array_)) + sizeof(fixed_radar_13365177_));
}

LocalCommandHistory::~LocalCommandHistory() {
  // @@protoc_insertion_point(destructor:TSK.LocalCommandHistory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalCommandHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete items_array_;
}

void LocalCommandHistory::ArenaDtor(void* object) {
  LocalCommandHistory* _this = reinterpret_cast< LocalCommandHistory* >(object);
  (void)_this;
}
void LocalCommandHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalCommandHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalCommandHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.LocalCommandHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(items_array_ != nullptr);
    items_array_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&undo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed_radar_13365177_) -
        reinterpret_cast<char*>(&undo_count_)) + sizeof(fixed_radar_13365177_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalCommandHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 undo_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_undo_count(&has_bits);
          undo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference items_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_items_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fixed_radar_13365177 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fixed_radar_13365177(&has_bits);
          fixed_radar_13365177_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalCommandHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.LocalCommandHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 undo_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_undo_count(), target);
  }

  // optional .TSP.Reference items_array = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::items_array(this), target, stream);
  }

  // optional bool fixed_radar_13365177 = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_fixed_radar_13365177(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.LocalCommandHistory)
  return target;
}

size_t LocalCommandHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.LocalCommandHistory)
  size_t total_size = 0;

  // required uint32 undo_count = 1;
  if (_internal_has_undo_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_undo_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference items_array = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *items_array_);
  }

  // optional bool fixed_radar_13365177 = 10;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalCommandHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalCommandHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalCommandHistory::GetClassData() const { return &_class_data_; }

void LocalCommandHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LocalCommandHistory *>(to)->MergeFrom(
      static_cast<const LocalCommandHistory &>(from));
}


void LocalCommandHistory::MergeFrom(const LocalCommandHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.LocalCommandHistory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_items_array()->::TSP::Reference::MergeFrom(from._internal_items_array());
    }
    if (cached_has_bits & 0x00000002u) {
      undo_count_ = from.undo_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      fixed_radar_13365177_ = from.fixed_radar_13365177_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalCommandHistory::CopyFrom(const LocalCommandHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.LocalCommandHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCommandHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_items_array()) {
    if (!items_array_->IsInitialized()) return false;
  }
  return true;
}

void LocalCommandHistory::InternalSwap(LocalCommandHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalCommandHistory, fixed_radar_13365177_)
      + sizeof(LocalCommandHistory::fixed_radar_13365177_)
      - PROTOBUF_FIELD_OFFSET(LocalCommandHistory, items_array_)>(
          reinterpret_cast<char*>(&items_array_),
          reinterpret_cast<char*>(&other->items_array_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalCommandHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[4]);
}

// ===================================================================

class CollaborationCommandHistoryArray::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const CollaborationCommandHistoryArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeArray&
CollaborationCommandHistoryArray::_Internal::large_array(const CollaborationCommandHistoryArray* msg) {
  return *msg->large_array_;
}
void CollaborationCommandHistoryArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistoryArray::CollaborationCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryArray)
}
CollaborationCommandHistoryArray::CollaborationCommandHistoryArray(const CollaborationCommandHistoryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryArray)
}

inline void CollaborationCommandHistoryArray::SharedCtor() {
large_array_ = nullptr;
}

CollaborationCommandHistoryArray::~CollaborationCommandHistoryArray() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistoryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void CollaborationCommandHistoryArray::ArenaDtor(void* object) {
  CollaborationCommandHistoryArray* _this = reinterpret_cast< CollaborationCommandHistoryArray* >(object);
  (void)_this;
}
void CollaborationCommandHistoryArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistoryArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistoryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistoryArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryArray)
  return target;
}

size_t CollaborationCommandHistoryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryArray)
  size_t total_size = 0;

  // required .TSP.LargeArray large_array = 1;
  if (_internal_has_large_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistoryArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryArray::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistoryArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistoryArray *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistoryArray &>(from));
}


void CollaborationCommandHistoryArray::MergeFrom(const CollaborationCommandHistoryArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryArray::CopyFrom(const CollaborationCommandHistoryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryArray::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryArray::InternalSwap(CollaborationCommandHistoryArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[5]);
}

// ===================================================================

class CollaborationCommandHistoryArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryArraySegment>()._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_object_array_segment(const CollaborationCommandHistoryArraySegment* msg);
  static void set_has_large_object_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::LargeObjectArraySegment&
CollaborationCommandHistoryArraySegment::_Internal::large_object_array_segment(const CollaborationCommandHistoryArraySegment* msg) {
  return *msg->large_object_array_segment_;
}
void CollaborationCommandHistoryArraySegment::clear_large_object_array_segment() {
  if (large_object_array_segment_ != nullptr) large_object_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistoryArraySegment::CollaborationCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryArraySegment)
}
CollaborationCommandHistoryArraySegment::CollaborationCommandHistoryArraySegment(const CollaborationCommandHistoryArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array_segment()) {
    large_object_array_segment_ = new ::TSP::LargeObjectArraySegment(*from.large_object_array_segment_);
  } else {
    large_object_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryArraySegment)
}

inline void CollaborationCommandHistoryArraySegment::SharedCtor() {
large_object_array_segment_ = nullptr;
}

CollaborationCommandHistoryArraySegment::~CollaborationCommandHistoryArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryArraySegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistoryArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_object_array_segment_;
}

void CollaborationCommandHistoryArraySegment::ArenaDtor(void* object) {
  CollaborationCommandHistoryArraySegment* _this = reinterpret_cast< CollaborationCommandHistoryArraySegment* >(object);
  (void)_this;
}
void CollaborationCommandHistoryArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistoryArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistoryArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_object_array_segment_ != nullptr);
    large_object_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistoryArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_object_array_segment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryArraySegment)
  return target;
}

size_t CollaborationCommandHistoryArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryArraySegment)
  size_t total_size = 0;

  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (_internal_has_large_object_array_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_object_array_segment_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistoryArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryArraySegment::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistoryArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistoryArraySegment *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistoryArraySegment &>(from));
}


void CollaborationCommandHistoryArraySegment::MergeFrom(const CollaborationCommandHistoryArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array_segment()) {
    _internal_mutable_large_object_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(from._internal_large_object_array_segment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryArraySegment::CopyFrom(const CollaborationCommandHistoryArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryArraySegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_large_object_array_segment()) {
    if (!large_object_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryArraySegment::InternalSwap(CollaborationCommandHistoryArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_object_array_segment_, other->large_object_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[6]);
}

// ===================================================================

class CollaborationCommandHistory_ItemList::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistory_ItemList>()._has_bits_);
  static const ::TSP::Reference& items_array(const CollaborationCommandHistory_ItemList* msg);
  static void set_has_items_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistory_ItemList::_Internal::items_array(const CollaborationCommandHistory_ItemList* msg) {
  return *msg->items_array_;
}
void CollaborationCommandHistory_ItemList::clear_items_array() {
  if (items_array_ != nullptr) items_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CollaborationCommandHistory_ItemList::clear_transformer_entries() {
  transformer_entries_.Clear();
}
CollaborationCommandHistory_ItemList::CollaborationCommandHistory_ItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transformer_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistory.ItemList)
}
CollaborationCommandHistory_ItemList::CollaborationCommandHistory_ItemList(const CollaborationCommandHistory_ItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transformer_entries_(from.transformer_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_items_array()) {
    items_array_ = new ::TSP::Reference(*from.items_array_);
  } else {
    items_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistory.ItemList)
}

inline void CollaborationCommandHistory_ItemList::SharedCtor() {
items_array_ = nullptr;
}

CollaborationCommandHistory_ItemList::~CollaborationCommandHistory_ItemList() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistory.ItemList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistory_ItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete items_array_;
}

void CollaborationCommandHistory_ItemList::ArenaDtor(void* object) {
  CollaborationCommandHistory_ItemList* _this = reinterpret_cast< CollaborationCommandHistory_ItemList* >(object);
  (void)_this;
}
void CollaborationCommandHistory_ItemList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistory_ItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistory_ItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistory.ItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformer_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(items_array_ != nullptr);
    items_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistory_ItemList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference items_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_items_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference transformer_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transformer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistory_ItemList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistory.ItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference items_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::items_array(this), target, stream);
  }

  // repeated .TSP.Reference transformer_entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transformer_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_transformer_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistory.ItemList)
  return target;
}

size_t CollaborationCommandHistory_ItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistory.ItemList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference transformer_entries = 2;
  total_size += 1UL * this->_internal_transformer_entries_size();
  for (const auto& msg : this->transformer_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference items_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *items_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistory_ItemList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistory_ItemList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistory_ItemList::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistory_ItemList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistory_ItemList *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistory_ItemList &>(from));
}


void CollaborationCommandHistory_ItemList::MergeFrom(const CollaborationCommandHistory_ItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistory.ItemList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformer_entries_.MergeFrom(from.transformer_entries_);
  if (from._internal_has_items_array()) {
    _internal_mutable_items_array()->::TSP::Reference::MergeFrom(from._internal_items_array());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistory_ItemList::CopyFrom(const CollaborationCommandHistory_ItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistory.ItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistory_ItemList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(transformer_entries_)) return false;
  if (_internal_has_items_array()) {
    if (!items_array_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistory_ItemList::InternalSwap(CollaborationCommandHistory_ItemList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transformer_entries_.InternalSwap(&other->transformer_entries_);
  swap(items_array_, other->items_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistory_ItemList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[7]);
}

// ===================================================================

class CollaborationCommandHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistory>()._has_bits_);
  static const ::TSP::UUID& local_identifier(const CollaborationCommandHistory* msg);
  static void set_has_local_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CollaborationCommandHistory_ItemList& undo_items(const CollaborationCommandHistory* msg);
  static void set_has_undo_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::CollaborationCommandHistory_ItemList& redo_items(const CollaborationCommandHistory* msg);
  static void set_has_redo_items(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::UUID&
CollaborationCommandHistory::_Internal::local_identifier(const CollaborationCommandHistory* msg) {
  return *msg->local_identifier_;
}
const ::TSK::CollaborationCommandHistory_ItemList&
CollaborationCommandHistory::_Internal::undo_items(const CollaborationCommandHistory* msg) {
  return *msg->undo_items_;
}
const ::TSK::CollaborationCommandHistory_ItemList&
CollaborationCommandHistory::_Internal::redo_items(const CollaborationCommandHistory* msg) {
  return *msg->redo_items_;
}
void CollaborationCommandHistory::clear_local_identifier() {
  if (local_identifier_ != nullptr) local_identifier_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistory::CollaborationCommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistory)
}
CollaborationCommandHistory::CollaborationCommandHistory(const CollaborationCommandHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_identifier()) {
    local_identifier_ = new ::TSP::UUID(*from.local_identifier_);
  } else {
    local_identifier_ = nullptr;
  }
  if (from._internal_has_undo_items()) {
    undo_items_ = new ::TSK::CollaborationCommandHistory_ItemList(*from.undo_items_);
  } else {
    undo_items_ = nullptr;
  }
  if (from._internal_has_redo_items()) {
    redo_items_ = new ::TSK::CollaborationCommandHistory_ItemList(*from.redo_items_);
  } else {
    redo_items_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistory)
}

inline void CollaborationCommandHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&local_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&redo_items_) -
    reinterpret_cast<char*>(&local_identifier_)) + sizeof(redo_items_));
}

CollaborationCommandHistory::~CollaborationCommandHistory() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete local_identifier_;
  if (this != internal_default_instance()) delete undo_items_;
  if (this != internal_default_instance()) delete redo_items_;
}

void CollaborationCommandHistory::ArenaDtor(void* object) {
  CollaborationCommandHistory* _this = reinterpret_cast< CollaborationCommandHistory* >(object);
  (void)_this;
}
void CollaborationCommandHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(local_identifier_ != nullptr);
      local_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undo_items_ != nullptr);
      undo_items_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(redo_items_ != nullptr);
      redo_items_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID local_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID local_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_identifier(this), target, stream);
  }

  // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::undo_items(this), target, stream);
  }

  // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::redo_items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistory)
  return target;
}

size_t CollaborationCommandHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.UUID local_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_identifier_);
    }

    // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undo_items_);
    }

    // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *redo_items_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistory::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistory *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistory &>(from));
}


void CollaborationCommandHistory::MergeFrom(const CollaborationCommandHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_local_identifier()->::TSP::UUID::MergeFrom(from._internal_local_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undo_items()->::TSK::CollaborationCommandHistory_ItemList::MergeFrom(from._internal_undo_items());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_redo_items()->::TSK::CollaborationCommandHistory_ItemList::MergeFrom(from._internal_redo_items());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistory::CopyFrom(const CollaborationCommandHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistory::IsInitialized() const {
  if (_internal_has_local_identifier()) {
    if (!local_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_undo_items()) {
    if (!undo_items_->IsInitialized()) return false;
  }
  if (_internal_has_redo_items()) {
    if (!redo_items_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistory::InternalSwap(CollaborationCommandHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationCommandHistory, redo_items_)
      + sizeof(CollaborationCommandHistory::redo_items_)
      - PROTOBUF_FIELD_OFFSET(CollaborationCommandHistory, local_identifier_)>(
          reinterpret_cast<char*>(&local_identifier_),
          reinterpret_cast<char*>(&other->local_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[8]);
}

// ===================================================================

class CollaborationCommandHistoryItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryItem>()._has_bits_);
  static const ::TSP::Reference& command(const CollaborationCommandHistoryItem* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& selection_behavior(const CollaborationCommandHistoryItem* msg);
  static void set_has_selection_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& coalescing_group(const CollaborationCommandHistoryItem* msg);
  static void set_has_coalescing_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistoryItem::_Internal::command(const CollaborationCommandHistoryItem* msg) {
  return *msg->command_;
}
const ::TSP::Reference&
CollaborationCommandHistoryItem::_Internal::selection_behavior(const CollaborationCommandHistoryItem* msg) {
  return *msg->selection_behavior_;
}
const ::TSP::Reference&
CollaborationCommandHistoryItem::_Internal::coalescing_group(const CollaborationCommandHistoryItem* msg) {
  return *msg->coalescing_group_;
}
void CollaborationCommandHistoryItem::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CollaborationCommandHistoryItem::clear_selection_behavior() {
  if (selection_behavior_ != nullptr) selection_behavior_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CollaborationCommandHistoryItem::clear_coalescing_group() {
  if (coalescing_group_ != nullptr) coalescing_group_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CollaborationCommandHistoryItem::CollaborationCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryItem)
}
CollaborationCommandHistoryItem::CollaborationCommandHistoryItem(const CollaborationCommandHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_string()) {
    action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_command()) {
    command_ = new ::TSP::Reference(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_selection_behavior()) {
    selection_behavior_ = new ::TSP::Reference(*from.selection_behavior_);
  } else {
    selection_behavior_ = nullptr;
  }
  if (from._internal_has_coalescing_group()) {
    coalescing_group_ = new ::TSP::Reference(*from.coalescing_group_);
  } else {
    coalescing_group_ = nullptr;
  }
  revision_sequence_ = from.revision_sequence_;
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryItem)
}

inline void CollaborationCommandHistoryItem::SharedCtor() {
action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revision_sequence_) -
    reinterpret_cast<char*>(&command_)) + sizeof(revision_sequence_));
}

CollaborationCommandHistoryItem::~CollaborationCommandHistoryItem() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete selection_behavior_;
  if (this != internal_default_instance()) delete coalescing_group_;
}

void CollaborationCommandHistoryItem::ArenaDtor(void* object) {
  CollaborationCommandHistoryItem* _this = reinterpret_cast< CollaborationCommandHistoryItem* >(object);
  (void)_this;
}
void CollaborationCommandHistoryItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(selection_behavior_ != nullptr);
      selection_behavior_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(coalescing_group_ != nullptr);
      coalescing_group_->Clear();
    }
  }
  revision_sequence_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CollaborationCommandHistoryItem.action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_behavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference coalescing_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coalescing_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 revision_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_revision_sequence(&has_bits);
          revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command(this), target, stream);
  }

  // optional string action_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CollaborationCommandHistoryItem.action_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action_string(), target);
  }

  // optional .TSP.Reference selection_behavior = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::selection_behavior(this), target, stream);
  }

  // optional .TSP.Reference coalescing_group = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::coalescing_group(this), target, stream);
  }

  // optional uint64 revision_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_revision_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryItem)
  return target;
}

size_t CollaborationCommandHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string action_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_string());
    }

    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .TSP.Reference selection_behavior = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selection_behavior_);
    }

    // optional .TSP.Reference coalescing_group = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coalescing_group_);
    }

    // optional uint64 revision_sequence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision_sequence());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistoryItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryItem::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistoryItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistoryItem *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistoryItem &>(from));
}


void CollaborationCommandHistoryItem::MergeFrom(const CollaborationCommandHistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_command()->::TSP::Reference::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_selection_behavior()->::TSP::Reference::MergeFrom(from._internal_selection_behavior());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_coalescing_group()->::TSP::Reference::MergeFrom(from._internal_coalescing_group());
    }
    if (cached_has_bits & 0x00000010u) {
      revision_sequence_ = from.revision_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryItem::CopyFrom(const CollaborationCommandHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryItem::IsInitialized() const {
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  if (_internal_has_selection_behavior()) {
    if (!selection_behavior_->IsInitialized()) return false;
  }
  if (_internal_has_coalescing_group()) {
    if (!coalescing_group_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryItem::InternalSwap(CollaborationCommandHistoryItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_string_, GetArenaForAllocation(),
      &other->action_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryItem, revision_sequence_)
      + sizeof(CollaborationCommandHistoryItem::revision_sequence_)
      - PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryItem, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[9]);
}

// ===================================================================

class CollaborationCommandHistoryCoalescingGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryCoalescingGroup>()._has_bits_);
  static void set_has_did_coalesce_all_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CollaborationCommandHistoryCoalescingGroup::clear_nodes() {
  nodes_.Clear();
}
CollaborationCommandHistoryCoalescingGroup::CollaborationCommandHistoryCoalescingGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryCoalescingGroup)
}
CollaborationCommandHistoryCoalescingGroup::CollaborationCommandHistoryCoalescingGroup(const CollaborationCommandHistoryCoalescingGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  did_coalesce_all_commands_ = from.did_coalesce_all_commands_;
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryCoalescingGroup)
}

inline void CollaborationCommandHistoryCoalescingGroup::SharedCtor() {
did_coalesce_all_commands_ = false;
}

CollaborationCommandHistoryCoalescingGroup::~CollaborationCommandHistoryCoalescingGroup() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryCoalescingGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistoryCoalescingGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollaborationCommandHistoryCoalescingGroup::ArenaDtor(void* object) {
  CollaborationCommandHistoryCoalescingGroup* _this = reinterpret_cast< CollaborationCommandHistoryCoalescingGroup* >(object);
  (void)_this;
}
void CollaborationCommandHistoryCoalescingGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistoryCoalescingGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistoryCoalescingGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  did_coalesce_all_commands_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryCoalescingGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool did_coalesce_all_commands = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_did_coalesce_all_commands(&has_bits);
          did_coalesce_all_commands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistoryCoalescingGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool did_coalesce_all_commands = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_did_coalesce_all_commands(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryCoalescingGroup)
  return target;
}

size_t CollaborationCommandHistoryCoalescingGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool did_coalesce_all_commands = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryCoalescingGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistoryCoalescingGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryCoalescingGroup::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistoryCoalescingGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistoryCoalescingGroup *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistoryCoalescingGroup &>(from));
}


void CollaborationCommandHistoryCoalescingGroup::MergeFrom(const CollaborationCommandHistoryCoalescingGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from._internal_has_did_coalesce_all_commands()) {
    _internal_set_did_coalesce_all_commands(from._internal_did_coalesce_all_commands());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryCoalescingGroup::CopyFrom(const CollaborationCommandHistoryCoalescingGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryCoalescingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryCoalescingGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(nodes_)) return false;
  return true;
}

void CollaborationCommandHistoryCoalescingGroup::InternalSwap(CollaborationCommandHistoryCoalescingGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  swap(did_coalesce_all_commands_, other->did_coalesce_all_commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryCoalescingGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[10]);
}

// ===================================================================

class CollaborationCommandHistoryCoalescingGroupNode::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryCoalescingGroupNode>()._has_bits_);
  static const ::TSP::Reference& command(const CollaborationCommandHistoryCoalescingGroupNode* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistoryCoalescingGroupNode::_Internal::command(const CollaborationCommandHistoryCoalescingGroupNode* msg) {
  return *msg->command_;
}
void CollaborationCommandHistoryCoalescingGroupNode::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CollaborationCommandHistoryCoalescingGroupNode::CollaborationCommandHistoryCoalescingGroupNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryCoalescingGroupNode)
}
CollaborationCommandHistoryCoalescingGroupNode::CollaborationCommandHistoryCoalescingGroupNode(const CollaborationCommandHistoryCoalescingGroupNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command()) {
    command_ = new ::TSP::Reference(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryCoalescingGroupNode)
}

inline void CollaborationCommandHistoryCoalescingGroupNode::SharedCtor() {
command_ = nullptr;
}

CollaborationCommandHistoryCoalescingGroupNode::~CollaborationCommandHistoryCoalescingGroupNode() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistoryCoalescingGroupNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete command_;
}

void CollaborationCommandHistoryCoalescingGroupNode::ArenaDtor(void* object) {
  CollaborationCommandHistoryCoalescingGroupNode* _this = reinterpret_cast< CollaborationCommandHistoryCoalescingGroupNode* >(object);
  (void)_this;
}
void CollaborationCommandHistoryCoalescingGroupNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistoryCoalescingGroupNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistoryCoalescingGroupNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_ != nullptr);
    command_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryCoalescingGroupNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistoryCoalescingGroupNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  return target;
}

size_t CollaborationCommandHistoryCoalescingGroupNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryCoalescingGroupNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistoryCoalescingGroupNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryCoalescingGroupNode::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistoryCoalescingGroupNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistoryCoalescingGroupNode *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistoryCoalescingGroupNode &>(from));
}


void CollaborationCommandHistoryCoalescingGroupNode::MergeFrom(const CollaborationCommandHistoryCoalescingGroupNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_mutable_command()->::TSP::Reference::MergeFrom(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryCoalescingGroupNode::CopyFrom(const CollaborationCommandHistoryCoalescingGroupNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryCoalescingGroupNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryCoalescingGroupNode::IsInitialized() const {
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryCoalescingGroupNode::InternalSwap(CollaborationCommandHistoryCoalescingGroupNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryCoalescingGroupNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[11]);
}

// ===================================================================

class CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver>()._has_bits_);
  static const ::TSP::Reference& coalescing_group(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg);
  static void set_has_coalescing_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& node(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg);
  static void set_has_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_Internal::coalescing_group(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg) {
  return *msg->coalescing_group_;
}
const ::TSP::Reference&
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_Internal::node(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* msg) {
  return *msg->node_;
}
void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::clear_coalescing_group() {
  if (coalescing_group_ != nullptr) coalescing_group_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
}
CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coalescing_group()) {
    coalescing_group_ = new ::TSP::Reference(*from.coalescing_group_);
  } else {
    coalescing_group_ = nullptr;
  }
  if (from._internal_has_node()) {
    node_ = new ::TSP::Reference(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
}

inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coalescing_group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_) -
    reinterpret_cast<char*>(&coalescing_group_)) + sizeof(node_));
}

CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::~CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete coalescing_group_;
  if (this != internal_default_instance()) delete node_;
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::ArenaDtor(void* object) {
  CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* _this = reinterpret_cast< CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* >(object);
  (void)_this;
}
void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(coalescing_group_ != nullptr);
      coalescing_group_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_ != nullptr);
      node_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference coalescing_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coalescing_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference coalescing_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coalescing_group(this), target, stream);
  }

  // optional .TSP.Reference node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  return target;
}

size_t CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference coalescing_group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coalescing_group_);
    }

    // optional .TSP.Reference node = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::GetClassData() const { return &_class_data_; }

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver *>(to)->MergeFrom(
      static_cast<const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver &>(from));
}


void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::MergeFrom(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_coalescing_group()->::TSP::Reference::MergeFrom(from._internal_coalescing_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_node()->::TSP::Reference::MergeFrom(from._internal_node());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::CopyFrom(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::IsInitialized() const {
  if (_internal_has_coalescing_group()) {
    if (!coalescing_group_->IsInitialized()) return false;
  }
  if (_internal_has_node()) {
    if (!node_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::InternalSwap(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, node_)
      + sizeof(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::node_)
      - PROTOBUF_FIELD_OFFSET(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver, coalescing_group_)>(
          reinterpret_cast<char*>(&coalescing_group_),
          reinterpret_cast<char*>(&other->coalescing_group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[12]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._has_bits_);
  static void set_has_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& annotation_author_storage(const DocumentArchive* msg);
  static void set_has_annotation_author_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prevent_image_conversion_on_open(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_floating_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_user_defined_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& collaboration_operation_history(const DocumentArchive* msg);
  static void set_has_collaboration_operation_history(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_should_measure_negatively_tracked_text_correctly(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_optimized_text_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormattingSymbolsArchive& formatting_symbols(const DocumentArchive* msg);
  static void set_has_formatting_symbols(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
DocumentArchive::_Internal::annotation_author_storage(const DocumentArchive* msg) {
  return *msg->annotation_author_storage_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::collaboration_operation_history(const DocumentArchive* msg) {
  return *msg->collaboration_operation_history_;
}
const ::TSK::FormattingSymbolsArchive&
DocumentArchive::_Internal::formatting_symbols(const DocumentArchive* msg) {
  return *msg->formatting_symbols_;
}
void DocumentArchive::clear_annotation_author_storage() {
  if (annotation_author_storage_ != nullptr) annotation_author_storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentArchive::clear_activity_log_entries() {
  activity_log_entries_.Clear();
}
void DocumentArchive::clear_collaboration_operation_history() {
  if (collaboration_operation_history_ != nullptr) collaboration_operation_history_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  activity_log_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      activity_log_entries_(from.activity_log_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locale_identifier()) {
    locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locale_identifier(), 
      GetArenaForAllocation());
  }
  creation_locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_creation_locale_identifier()) {
    creation_locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creation_locale_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_annotation_author_storage()) {
    annotation_author_storage_ = new ::TSP::Reference(*from.annotation_author_storage_);
  } else {
    annotation_author_storage_ = nullptr;
  }
  if (from._internal_has_collaboration_operation_history()) {
    collaboration_operation_history_ = new ::TSP::Reference(*from.collaboration_operation_history_);
  } else {
    collaboration_operation_history_ = nullptr;
  }
  if (from._internal_has_formatting_symbols()) {
    formatting_symbols_ = new ::TSK::FormattingSymbolsArchive(*from.formatting_symbols_);
  } else {
    formatting_symbols_ = nullptr;
  }
  ::memcpy(&prevent_image_conversion_on_open_, &from.prevent_image_conversion_on_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_optimized_text_vertical_alignment_) -
    reinterpret_cast<char*>(&prevent_image_conversion_on_open_)) + sizeof(use_optimized_text_vertical_alignment_));
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentArchive)
}

inline void DocumentArchive::SharedCtor() {
locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
creation_locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&annotation_author_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_optimized_text_vertical_alignment_) -
    reinterpret_cast<char*>(&annotation_author_storage_)) + sizeof(use_optimized_text_vertical_alignment_));
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:TSK.DocumentArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  locale_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creation_locale_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_author_storage_;
  if (this != internal_default_instance()) delete collaboration_operation_history_;
  if (this != internal_default_instance()) delete formatting_symbols_;
}

void DocumentArchive::ArenaDtor(void* object) {
  DocumentArchive* _this = reinterpret_cast< DocumentArchive* >(object);
  (void)_this;
}
void DocumentArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_log_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      creation_locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(annotation_author_storage_ != nullptr);
      annotation_author_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(collaboration_operation_history_ != nullptr);
      collaboration_operation_history_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(formatting_symbols_ != nullptr);
      formatting_symbols_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&prevent_image_conversion_on_open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_user_defined_locale_) -
        reinterpret_cast<char*>(&prevent_image_conversion_on_open_)) + sizeof(has_user_defined_locale_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&should_measure_negatively_tracked_text_correctly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_optimized_text_vertical_alignment_) -
        reinterpret_cast<char*>(&should_measure_negatively_tracked_text_correctly_)) + sizeof(use_optimized_text_vertical_alignment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string locale_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_locale_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.DocumentArchive.locale_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference annotation_author_storage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_author_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference activity_log_entries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activity_log_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string creation_locale_identifier = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_creation_locale_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.DocumentArchive.creation_locale_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prevent_image_conversion_on_open = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_prevent_image_conversion_on_open(&has_bits);
          prevent_image_conversion_on_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_floating_locale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_has_floating_locale(&has_bits);
          has_floating_locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_user_defined_locale = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_has_user_defined_locale(&has_bits);
          has_user_defined_locale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_operation_history = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_operation_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_measure_negatively_tracked_text_correctly = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_should_measure_negatively_tracked_text_correctly(&has_bits);
          should_measure_negatively_tracked_text_correctly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_optimized_text_vertical_alignment = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_optimized_text_vertical_alignment(&has_bits);
          use_optimized_text_vertical_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_formatting_symbols(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string locale_identifier = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale_identifier().data(), static_cast<int>(this->_internal_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentArchive.locale_identifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_locale_identifier(), target);
  }

  // optional .TSP.Reference annotation_author_storage = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::annotation_author_storage(this), target, stream);
  }

  // repeated .TSP.Reference activity_log_entries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activity_log_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_activity_log_entries(i), target, stream);
  }

  // optional string creation_locale_identifier = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_locale_identifier().data(), static_cast<int>(this->_internal_creation_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentArchive.creation_locale_identifier");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_creation_locale_identifier(), target);
  }

  // optional bool prevent_image_conversion_on_open = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_prevent_image_conversion_on_open(), target);
  }

  // optional bool has_floating_locale = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_has_floating_locale(), target);
  }

  // optional bool has_user_defined_locale = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_has_user_defined_locale(), target);
  }

  // optional .TSP.Reference collaboration_operation_history = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::collaboration_operation_history(this), target, stream);
  }

  // optional bool should_measure_negatively_tracked_text_correctly = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_should_measure_negatively_tracked_text_correctly(), target);
  }

  // optional bool use_optimized_text_vertical_alignment = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_use_optimized_text_vertical_alignment(), target);
  }

  // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::formatting_symbols(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentArchive)
  return target;
}

size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference activity_log_entries = 8;
  total_size += 1UL * this->_internal_activity_log_entries_size();
  for (const auto& msg : this->activity_log_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string locale_identifier = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale_identifier());
    }

    // optional string creation_locale_identifier = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_locale_identifier());
    }

    // optional .TSP.Reference annotation_author_storage = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *annotation_author_storage_);
    }

    // optional .TSP.Reference collaboration_operation_history = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collaboration_operation_history_);
    }

    // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formatting_symbols_);
    }

    // optional bool prevent_image_conversion_on_open = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_floating_locale = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_user_defined_locale = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool should_measure_negatively_tracked_text_correctly = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool use_optimized_text_vertical_alignment = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }

void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DocumentArchive *>(to)->MergeFrom(
      static_cast<const DocumentArchive &>(from));
}


void DocumentArchive::MergeFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_log_entries_.MergeFrom(from.activity_log_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locale_identifier(from._internal_locale_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_creation_locale_identifier(from._internal_creation_locale_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_annotation_author_storage()->::TSP::Reference::MergeFrom(from._internal_annotation_author_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_collaboration_operation_history()->::TSP::Reference::MergeFrom(from._internal_collaboration_operation_history());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_formatting_symbols()->::TSK::FormattingSymbolsArchive::MergeFrom(from._internal_formatting_symbols());
    }
    if (cached_has_bits & 0x00000020u) {
      prevent_image_conversion_on_open_ = from.prevent_image_conversion_on_open_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_floating_locale_ = from.has_floating_locale_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_user_defined_locale_ = from.has_user_defined_locale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      should_measure_negatively_tracked_text_correctly_ = from.should_measure_negatively_tracked_text_correctly_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_optimized_text_vertical_alignment_ = from.use_optimized_text_vertical_alignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(activity_log_entries_)) return false;
  if (_internal_has_annotation_author_storage()) {
    if (!annotation_author_storage_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_operation_history()) {
    if (!collaboration_operation_history_->IsInitialized()) return false;
  }
  if (_internal_has_formatting_symbols()) {
    if (!formatting_symbols_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activity_log_entries_.InternalSwap(&other->activity_log_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &locale_identifier_, GetArenaForAllocation(),
      &other->locale_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creation_locale_identifier_, GetArenaForAllocation(),
      &other->creation_locale_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, use_optimized_text_vertical_alignment_)
      + sizeof(DocumentArchive::use_optimized_text_vertical_alignment_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, annotation_author_storage_)>(
          reinterpret_cast<char*>(&annotation_author_storage_),
          reinterpret_cast<char*>(&other->annotation_author_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[13]);
}

// ===================================================================

class FormattingSymbolsArchive_CurrencySymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<FormattingSymbolsArchive_CurrencySymbol>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FormattingSymbolsArchive_CurrencySymbol::FormattingSymbolsArchive_CurrencySymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.FormattingSymbolsArchive.CurrencySymbol)
}
FormattingSymbolsArchive_CurrencySymbol::FormattingSymbolsArchive_CurrencySymbol(const FormattingSymbolsArchive_CurrencySymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSK.FormattingSymbolsArchive.CurrencySymbol)
}

inline void FormattingSymbolsArchive_CurrencySymbol::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FormattingSymbolsArchive_CurrencySymbol::~FormattingSymbolsArchive_CurrencySymbol() {
  // @@protoc_insertion_point(destructor:TSK.FormattingSymbolsArchive.CurrencySymbol)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormattingSymbolsArchive_CurrencySymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FormattingSymbolsArchive_CurrencySymbol::ArenaDtor(void* object) {
  FormattingSymbolsArchive_CurrencySymbol* _this = reinterpret_cast< FormattingSymbolsArchive_CurrencySymbol* >(object);
  (void)_this;
}
void FormattingSymbolsArchive_CurrencySymbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormattingSymbolsArchive_CurrencySymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormattingSymbolsArchive_CurrencySymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormattingSymbolsArchive_CurrencySymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.CurrencySymbol.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.CurrencySymbol.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormattingSymbolsArchive_CurrencySymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.CurrencySymbol.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // required string symbol = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.CurrencySymbol.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FormattingSymbolsArchive.CurrencySymbol)
  return target;
}

size_t FormattingSymbolsArchive_CurrencySymbol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required string code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (_internal_has_symbol()) {
    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  return total_size;
}
size_t FormattingSymbolsArchive_CurrencySymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());

    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormattingSymbolsArchive_CurrencySymbol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormattingSymbolsArchive_CurrencySymbol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormattingSymbolsArchive_CurrencySymbol::GetClassData() const { return &_class_data_; }

void FormattingSymbolsArchive_CurrencySymbol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormattingSymbolsArchive_CurrencySymbol *>(to)->MergeFrom(
      static_cast<const FormattingSymbolsArchive_CurrencySymbol &>(from));
}


void FormattingSymbolsArchive_CurrencySymbol::MergeFrom(const FormattingSymbolsArchive_CurrencySymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_symbol(from._internal_symbol());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormattingSymbolsArchive_CurrencySymbol::CopyFrom(const FormattingSymbolsArchive_CurrencySymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FormattingSymbolsArchive.CurrencySymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormattingSymbolsArchive_CurrencySymbol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FormattingSymbolsArchive_CurrencySymbol::InternalSwap(FormattingSymbolsArchive_CurrencySymbol* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FormattingSymbolsArchive_CurrencySymbol::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[14]);
}

// ===================================================================

class FormattingSymbolsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormattingSymbolsArchive>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_calendar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numbering_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_am_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pm_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_short_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_medium_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_long_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_full_date_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_short_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_medium_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_long_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_full_time_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_decimal_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_grouping_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_currency_decimal_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_currency_grouping_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_plus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_exponential_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_percent_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_per_mille_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_infinity_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_nan_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_decimal_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_scientific_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_percent_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_currency_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

FormattingSymbolsArchive::FormattingSymbolsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  months_(arena),
  standalone_months_(arena),
  short_months_(arena),
  standalone_short_months_(arena),
  weekdays_(arena),
  standalone_weekdays_(arena),
  short_weekdays_(arena),
  standalone_short_weekdays_(arena),
  tiny_months_(arena),
  standalone_tiny_months_(arena),
  tiny_weekdays_(arena),
  standalone_tiny_weekdays_(arena),
  quarters_(arena),
  standalone_quarters_(arena),
  short_quarters_(arena),
  standalone_short_quarters_(arena),
  eras_(arena),
  long_eras_(arena),
  currency_symbols_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.FormattingSymbolsArchive)
}
FormattingSymbolsArchive::FormattingSymbolsArchive(const FormattingSymbolsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      months_(from.months_),
      standalone_months_(from.standalone_months_),
      short_months_(from.short_months_),
      standalone_short_months_(from.standalone_short_months_),
      weekdays_(from.weekdays_),
      standalone_weekdays_(from.standalone_weekdays_),
      short_weekdays_(from.short_weekdays_),
      standalone_short_weekdays_(from.standalone_short_weekdays_),
      tiny_months_(from.tiny_months_),
      standalone_tiny_months_(from.standalone_tiny_months_),
      tiny_weekdays_(from.tiny_weekdays_),
      standalone_tiny_weekdays_(from.standalone_tiny_weekdays_),
      quarters_(from.quarters_),
      standalone_quarters_(from.standalone_quarters_),
      short_quarters_(from.short_quarters_),
      standalone_short_quarters_(from.standalone_short_quarters_),
      eras_(from.eras_),
      long_eras_(from.long_eras_),
      currency_symbols_(from.currency_symbols_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  calendar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_calendar()) {
    calendar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_calendar(), 
      GetArenaForAllocation());
  }
  numbering_system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_numbering_system()) {
    numbering_system_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_numbering_system(), 
      GetArenaForAllocation());
  }
  am_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_am_symbol()) {
    am_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_am_symbol(), 
      GetArenaForAllocation());
  }
  pm_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pm_symbol()) {
    pm_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pm_symbol(), 
      GetArenaForAllocation());
  }
  short_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_date_pattern()) {
    short_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_date_pattern(), 
      GetArenaForAllocation());
  }
  medium_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_medium_date_pattern()) {
    medium_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_medium_date_pattern(), 
      GetArenaForAllocation());
  }
  long_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_long_date_pattern()) {
    long_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_long_date_pattern(), 
      GetArenaForAllocation());
  }
  full_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_date_pattern()) {
    full_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_date_pattern(), 
      GetArenaForAllocation());
  }
  short_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_time_pattern()) {
    short_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_time_pattern(), 
      GetArenaForAllocation());
  }
  medium_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_medium_time_pattern()) {
    medium_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_medium_time_pattern(), 
      GetArenaForAllocation());
  }
  long_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_long_time_pattern()) {
    long_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_long_time_pattern(), 
      GetArenaForAllocation());
  }
  full_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_time_pattern()) {
    full_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_time_pattern(), 
      GetArenaForAllocation());
  }
  decimal_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decimal_separator()) {
    decimal_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decimal_separator(), 
      GetArenaForAllocation());
  }
  grouping_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_grouping_separator()) {
    grouping_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_grouping_separator(), 
      GetArenaForAllocation());
  }
  currency_decimal_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_decimal_separator()) {
    currency_decimal_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_decimal_separator(), 
      GetArenaForAllocation());
  }
  currency_grouping_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_grouping_separator()) {
    currency_grouping_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_grouping_separator(), 
      GetArenaForAllocation());
  }
  plus_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_plus_sign()) {
    plus_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plus_sign(), 
      GetArenaForAllocation());
  }
  minus_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_minus_sign()) {
    minus_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minus_sign(), 
      GetArenaForAllocation());
  }
  exponential_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exponential_symbol()) {
    exponential_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exponential_symbol(), 
      GetArenaForAllocation());
  }
  percent_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_percent_symbol()) {
    percent_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_percent_symbol(), 
      GetArenaForAllocation());
  }
  per_mille_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_per_mille_symbol()) {
    per_mille_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_per_mille_symbol(), 
      GetArenaForAllocation());
  }
  infinity_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_infinity_symbol()) {
    infinity_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_infinity_symbol(), 
      GetArenaForAllocation());
  }
  nan_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nan_symbol()) {
    nan_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nan_symbol(), 
      GetArenaForAllocation());
  }
  decimal_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decimal_pattern()) {
    decimal_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decimal_pattern(), 
      GetArenaForAllocation());
  }
  scientific_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scientific_pattern()) {
    scientific_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scientific_pattern(), 
      GetArenaForAllocation());
  }
  percent_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_percent_pattern()) {
    percent_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_percent_pattern(), 
      GetArenaForAllocation());
  }
  currency_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_pattern()) {
    currency_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_pattern(), 
      GetArenaForAllocation());
  }
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSK.FormattingSymbolsArchive)
}

inline void FormattingSymbolsArchive::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
calendar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
numbering_system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
am_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pm_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
short_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
medium_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
long_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
full_date_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
short_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
medium_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
long_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
full_time_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
decimal_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grouping_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currency_decimal_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currency_grouping_separator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
plus_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minus_sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exponential_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
percent_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
per_mille_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
infinity_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nan_symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
decimal_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scientific_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
percent_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currency_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FormattingSymbolsArchive::~FormattingSymbolsArchive() {
  // @@protoc_insertion_point(destructor:TSK.FormattingSymbolsArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormattingSymbolsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calendar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  numbering_system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  am_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pm_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_date_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  medium_date_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_date_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_date_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_time_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  medium_time_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_time_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_time_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decimal_separator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grouping_separator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_decimal_separator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_grouping_separator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plus_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minus_sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exponential_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  percent_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  per_mille_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  infinity_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nan_symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decimal_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scientific_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  percent_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FormattingSymbolsArchive::ArenaDtor(void* object) {
  FormattingSymbolsArchive* _this = reinterpret_cast< FormattingSymbolsArchive* >(object);
  (void)_this;
}
void FormattingSymbolsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormattingSymbolsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormattingSymbolsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FormattingSymbolsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  months_.Clear();
  standalone_months_.Clear();
  short_months_.Clear();
  standalone_short_months_.Clear();
  weekdays_.Clear();
  standalone_weekdays_.Clear();
  short_weekdays_.Clear();
  standalone_short_weekdays_.Clear();
  tiny_months_.Clear();
  standalone_tiny_months_.Clear();
  tiny_weekdays_.Clear();
  standalone_tiny_weekdays_.Clear();
  quarters_.Clear();
  standalone_quarters_.Clear();
  short_quarters_.Clear();
  standalone_short_quarters_.Clear();
  eras_.Clear();
  long_eras_.Clear();
  currency_symbols_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      calendar_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      numbering_system_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      am_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      pm_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      short_date_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      medium_date_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      long_date_pattern_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      full_date_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      short_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      medium_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      long_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      full_time_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      decimal_separator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      grouping_separator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      currency_decimal_separator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      currency_grouping_separator_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      plus_sign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      minus_sign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      exponential_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      percent_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      per_mille_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      infinity_symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      nan_symbol_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      decimal_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      scientific_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      percent_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      currency_pattern_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormattingSymbolsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string calendar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_calendar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.calendar");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string numbering_system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_numbering_system();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.numbering_system");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string months = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_months();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.months");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_months = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_months();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_months");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string short_months = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_short_months();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_months");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_short_months = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_short_months();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_short_months");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string weekdays = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_weekdays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.weekdays");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_weekdays = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_weekdays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_weekdays");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string short_weekdays = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_short_weekdays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_weekdays");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_short_weekdays = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_short_weekdays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_short_weekdays");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string am_symbol = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_am_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.am_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pm_symbol = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_pm_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.pm_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tiny_months = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tiny_months();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.tiny_months");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_tiny_months = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_standalone_tiny_months();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_tiny_months");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tiny_weekdays = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tiny_weekdays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.tiny_weekdays");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_tiny_weekdays = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_standalone_tiny_weekdays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_tiny_weekdays");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string quarters = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_quarters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.quarters");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_quarters = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_standalone_quarters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_quarters");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string short_quarters = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_short_quarters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_quarters");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string standalone_short_quarters = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_standalone_short_quarters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.standalone_short_quarters");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string eras = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_eras();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.eras");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string long_eras = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_long_eras();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.long_eras");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string short_date_pattern = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_short_date_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_date_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string medium_date_pattern = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_medium_date_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.medium_date_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string long_date_pattern = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_long_date_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.long_date_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_date_pattern = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_full_date_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.full_date_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string short_time_pattern = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_short_time_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.short_time_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string medium_time_pattern = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_medium_time_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.medium_time_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string long_time_pattern = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_long_time_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.long_time_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_time_pattern = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_full_time_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.full_time_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string decimal_separator = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_decimal_separator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.decimal_separator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string grouping_separator = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_grouping_separator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.grouping_separator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_decimal_separator = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency_decimal_separator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_decimal_separator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_grouping_separator = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currency_grouping_separator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_grouping_separator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string plus_sign = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_plus_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.plus_sign");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string minus_sign = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_minus_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.minus_sign");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string exponential_symbol = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_exponential_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.exponential_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string percent_symbol = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_percent_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.percent_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string per_mille_symbol = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_per_mille_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.per_mille_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string infinity_symbol = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_infinity_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.infinity_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nan_symbol = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_nan_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.nan_symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string decimal_pattern = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_decimal_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.decimal_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scientific_pattern = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_scientific_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.scientific_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string percent_pattern = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_percent_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.percent_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_pattern = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_currency_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_pattern");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_code = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormattingSymbolsArchive.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_currency_symbols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormattingSymbolsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FormattingSymbolsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional string calendar = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_calendar().data(), static_cast<int>(this->_internal_calendar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.calendar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_calendar(), target);
  }

  // optional string numbering_system = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_numbering_system().data(), static_cast<int>(this->_internal_numbering_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.numbering_system");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_numbering_system(), target);
  }

  // repeated string months = 4;
  for (int i = 0, n = this->_internal_months_size(); i < n; i++) {
    const auto& s = this->_internal_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.months");
    target = stream->WriteString(4, s, target);
  }

  // repeated string standalone_months = 5;
  for (int i = 0, n = this->_internal_standalone_months_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_months");
    target = stream->WriteString(5, s, target);
  }

  // repeated string short_months = 6;
  for (int i = 0, n = this->_internal_short_months_size(); i < n; i++) {
    const auto& s = this->_internal_short_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_months");
    target = stream->WriteString(6, s, target);
  }

  // repeated string standalone_short_months = 7;
  for (int i = 0, n = this->_internal_standalone_short_months_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_short_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_short_months");
    target = stream->WriteString(7, s, target);
  }

  // repeated string weekdays = 8;
  for (int i = 0, n = this->_internal_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.weekdays");
    target = stream->WriteString(8, s, target);
  }

  // repeated string standalone_weekdays = 9;
  for (int i = 0, n = this->_internal_standalone_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_weekdays");
    target = stream->WriteString(9, s, target);
  }

  // repeated string short_weekdays = 10;
  for (int i = 0, n = this->_internal_short_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_short_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_weekdays");
    target = stream->WriteString(10, s, target);
  }

  // repeated string standalone_short_weekdays = 11;
  for (int i = 0, n = this->_internal_standalone_short_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_short_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_short_weekdays");
    target = stream->WriteString(11, s, target);
  }

  // optional string am_symbol = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_am_symbol().data(), static_cast<int>(this->_internal_am_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.am_symbol");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_am_symbol(), target);
  }

  // optional string pm_symbol = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pm_symbol().data(), static_cast<int>(this->_internal_pm_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.pm_symbol");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pm_symbol(), target);
  }

  // repeated string tiny_months = 14;
  for (int i = 0, n = this->_internal_tiny_months_size(); i < n; i++) {
    const auto& s = this->_internal_tiny_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.tiny_months");
    target = stream->WriteString(14, s, target);
  }

  // repeated string standalone_tiny_months = 15;
  for (int i = 0, n = this->_internal_standalone_tiny_months_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_tiny_months(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_tiny_months");
    target = stream->WriteString(15, s, target);
  }

  // repeated string tiny_weekdays = 16;
  for (int i = 0, n = this->_internal_tiny_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_tiny_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.tiny_weekdays");
    target = stream->WriteString(16, s, target);
  }

  // repeated string standalone_tiny_weekdays = 17;
  for (int i = 0, n = this->_internal_standalone_tiny_weekdays_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_tiny_weekdays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_tiny_weekdays");
    target = stream->WriteString(17, s, target);
  }

  // repeated string quarters = 18;
  for (int i = 0, n = this->_internal_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.quarters");
    target = stream->WriteString(18, s, target);
  }

  // repeated string standalone_quarters = 19;
  for (int i = 0, n = this->_internal_standalone_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_quarters");
    target = stream->WriteString(19, s, target);
  }

  // repeated string short_quarters = 20;
  for (int i = 0, n = this->_internal_short_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_short_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_quarters");
    target = stream->WriteString(20, s, target);
  }

  // repeated string standalone_short_quarters = 21;
  for (int i = 0, n = this->_internal_standalone_short_quarters_size(); i < n; i++) {
    const auto& s = this->_internal_standalone_short_quarters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.standalone_short_quarters");
    target = stream->WriteString(21, s, target);
  }

  // repeated string eras = 22;
  for (int i = 0, n = this->_internal_eras_size(); i < n; i++) {
    const auto& s = this->_internal_eras(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.eras");
    target = stream->WriteString(22, s, target);
  }

  // repeated string long_eras = 23;
  for (int i = 0, n = this->_internal_long_eras_size(); i < n; i++) {
    const auto& s = this->_internal_long_eras(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.long_eras");
    target = stream->WriteString(23, s, target);
  }

  // optional string short_date_pattern = 24;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_date_pattern().data(), static_cast<int>(this->_internal_short_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_date_pattern");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_short_date_pattern(), target);
  }

  // optional string medium_date_pattern = 25;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_medium_date_pattern().data(), static_cast<int>(this->_internal_medium_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.medium_date_pattern");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_medium_date_pattern(), target);
  }

  // optional string long_date_pattern = 26;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_long_date_pattern().data(), static_cast<int>(this->_internal_long_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.long_date_pattern");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_long_date_pattern(), target);
  }

  // optional string full_date_pattern = 27;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_date_pattern().data(), static_cast<int>(this->_internal_full_date_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.full_date_pattern");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_full_date_pattern(), target);
  }

  // optional string short_time_pattern = 28;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_time_pattern().data(), static_cast<int>(this->_internal_short_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.short_time_pattern");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_short_time_pattern(), target);
  }

  // optional string medium_time_pattern = 29;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_medium_time_pattern().data(), static_cast<int>(this->_internal_medium_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.medium_time_pattern");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_medium_time_pattern(), target);
  }

  // optional string long_time_pattern = 30;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_long_time_pattern().data(), static_cast<int>(this->_internal_long_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.long_time_pattern");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_long_time_pattern(), target);
  }

  // optional string full_time_pattern = 31;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_time_pattern().data(), static_cast<int>(this->_internal_full_time_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.full_time_pattern");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_full_time_pattern(), target);
  }

  // optional string decimal_separator = 32;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_separator().data(), static_cast<int>(this->_internal_decimal_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.decimal_separator");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_decimal_separator(), target);
  }

  // optional string grouping_separator = 33;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_grouping_separator().data(), static_cast<int>(this->_internal_grouping_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.grouping_separator");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_grouping_separator(), target);
  }

  // optional string currency_decimal_separator = 34;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_decimal_separator().data(), static_cast<int>(this->_internal_currency_decimal_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_decimal_separator");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_currency_decimal_separator(), target);
  }

  // optional string currency_grouping_separator = 35;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_grouping_separator().data(), static_cast<int>(this->_internal_currency_grouping_separator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_grouping_separator");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_currency_grouping_separator(), target);
  }

  // optional string plus_sign = 36;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_plus_sign().data(), static_cast<int>(this->_internal_plus_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.plus_sign");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_plus_sign(), target);
  }

  // optional string minus_sign = 37;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_minus_sign().data(), static_cast<int>(this->_internal_minus_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.minus_sign");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_minus_sign(), target);
  }

  // optional string exponential_symbol = 38;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exponential_symbol().data(), static_cast<int>(this->_internal_exponential_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.exponential_symbol");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_exponential_symbol(), target);
  }

  // optional string percent_symbol = 39;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_percent_symbol().data(), static_cast<int>(this->_internal_percent_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.percent_symbol");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_percent_symbol(), target);
  }

  // optional string per_mille_symbol = 40;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_per_mille_symbol().data(), static_cast<int>(this->_internal_per_mille_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.per_mille_symbol");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_per_mille_symbol(), target);
  }

  // optional string infinity_symbol = 41;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_infinity_symbol().data(), static_cast<int>(this->_internal_infinity_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.infinity_symbol");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_infinity_symbol(), target);
  }

  // optional string nan_symbol = 42;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nan_symbol().data(), static_cast<int>(this->_internal_nan_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.nan_symbol");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_nan_symbol(), target);
  }

  // optional string decimal_pattern = 43;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decimal_pattern().data(), static_cast<int>(this->_internal_decimal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.decimal_pattern");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_decimal_pattern(), target);
  }

  // optional string scientific_pattern = 44;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scientific_pattern().data(), static_cast<int>(this->_internal_scientific_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.scientific_pattern");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_scientific_pattern(), target);
  }

  // optional string percent_pattern = 45;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_percent_pattern().data(), static_cast<int>(this->_internal_percent_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.percent_pattern");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_percent_pattern(), target);
  }

  // optional string currency_pattern = 46;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_pattern().data(), static_cast<int>(this->_internal_currency_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_pattern");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_currency_pattern(), target);
  }

  // optional string currency_code = 47;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormattingSymbolsArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_currency_code(), target);
  }

  // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_currency_symbols_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_currency_symbols(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FormattingSymbolsArchive)
  return target;
}

size_t FormattingSymbolsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FormattingSymbolsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string months = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(months_.size());
  for (int i = 0, n = months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      months_.Get(i));
  }

  // repeated string standalone_months = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_months_.size());
  for (int i = 0, n = standalone_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_months_.Get(i));
  }

  // repeated string short_months = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(short_months_.size());
  for (int i = 0, n = short_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      short_months_.Get(i));
  }

  // repeated string standalone_short_months = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_short_months_.size());
  for (int i = 0, n = standalone_short_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_short_months_.Get(i));
  }

  // repeated string weekdays = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(weekdays_.size());
  for (int i = 0, n = weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      weekdays_.Get(i));
  }

  // repeated string standalone_weekdays = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_weekdays_.size());
  for (int i = 0, n = standalone_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_weekdays_.Get(i));
  }

  // repeated string short_weekdays = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(short_weekdays_.size());
  for (int i = 0, n = short_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      short_weekdays_.Get(i));
  }

  // repeated string standalone_short_weekdays = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_short_weekdays_.size());
  for (int i = 0, n = standalone_short_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_short_weekdays_.Get(i));
  }

  // repeated string tiny_months = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tiny_months_.size());
  for (int i = 0, n = tiny_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tiny_months_.Get(i));
  }

  // repeated string standalone_tiny_months = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_tiny_months_.size());
  for (int i = 0, n = standalone_tiny_months_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_tiny_months_.Get(i));
  }

  // repeated string tiny_weekdays = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tiny_weekdays_.size());
  for (int i = 0, n = tiny_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tiny_weekdays_.Get(i));
  }

  // repeated string standalone_tiny_weekdays = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_tiny_weekdays_.size());
  for (int i = 0, n = standalone_tiny_weekdays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_tiny_weekdays_.Get(i));
  }

  // repeated string quarters = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(quarters_.size());
  for (int i = 0, n = quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      quarters_.Get(i));
  }

  // repeated string standalone_quarters = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_quarters_.size());
  for (int i = 0, n = standalone_quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_quarters_.Get(i));
  }

  // repeated string short_quarters = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(short_quarters_.size());
  for (int i = 0, n = short_quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      short_quarters_.Get(i));
  }

  // repeated string standalone_short_quarters = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(standalone_short_quarters_.size());
  for (int i = 0, n = standalone_short_quarters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      standalone_short_quarters_.Get(i));
  }

  // repeated string eras = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(eras_.size());
  for (int i = 0, n = eras_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      eras_.Get(i));
  }

  // repeated string long_eras = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(long_eras_.size());
  for (int i = 0, n = long_eras_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      long_eras_.Get(i));
  }

  // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
  total_size += 2UL * this->_internal_currency_symbols_size();
  for (const auto& msg : this->currency_symbols_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string calendar = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_calendar());
    }

    // optional string numbering_system = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_numbering_system());
    }

    // optional string am_symbol = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_am_symbol());
    }

    // optional string pm_symbol = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pm_symbol());
    }

    // optional string short_date_pattern = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_date_pattern());
    }

    // optional string medium_date_pattern = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_medium_date_pattern());
    }

    // optional string long_date_pattern = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_long_date_pattern());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string full_date_pattern = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_date_pattern());
    }

    // optional string short_time_pattern = 28;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_time_pattern());
    }

    // optional string medium_time_pattern = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_medium_time_pattern());
    }

    // optional string long_time_pattern = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_long_time_pattern());
    }

    // optional string full_time_pattern = 31;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_time_pattern());
    }

    // optional string decimal_separator = 32;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_separator());
    }

    // optional string grouping_separator = 33;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_grouping_separator());
    }

    // optional string currency_decimal_separator = 34;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_decimal_separator());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string currency_grouping_separator = 35;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_grouping_separator());
    }

    // optional string plus_sign = 36;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_plus_sign());
    }

    // optional string minus_sign = 37;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_minus_sign());
    }

    // optional string exponential_symbol = 38;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exponential_symbol());
    }

    // optional string percent_symbol = 39;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_percent_symbol());
    }

    // optional string per_mille_symbol = 40;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_per_mille_symbol());
    }

    // optional string infinity_symbol = 41;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_infinity_symbol());
    }

    // optional string nan_symbol = 42;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nan_symbol());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional string decimal_pattern = 43;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decimal_pattern());
    }

    // optional string scientific_pattern = 44;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scientific_pattern());
    }

    // optional string percent_pattern = 45;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_percent_pattern());
    }

    // optional string currency_pattern = 46;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_pattern());
    }

    // optional string currency_code = 47;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormattingSymbolsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormattingSymbolsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormattingSymbolsArchive::GetClassData() const { return &_class_data_; }

void FormattingSymbolsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormattingSymbolsArchive *>(to)->MergeFrom(
      static_cast<const FormattingSymbolsArchive &>(from));
}


void FormattingSymbolsArchive::MergeFrom(const FormattingSymbolsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.FormattingSymbolsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  months_.MergeFrom(from.months_);
  standalone_months_.MergeFrom(from.standalone_months_);
  short_months_.MergeFrom(from.short_months_);
  standalone_short_months_.MergeFrom(from.standalone_short_months_);
  weekdays_.MergeFrom(from.weekdays_);
  standalone_weekdays_.MergeFrom(from.standalone_weekdays_);
  short_weekdays_.MergeFrom(from.short_weekdays_);
  standalone_short_weekdays_.MergeFrom(from.standalone_short_weekdays_);
  tiny_months_.MergeFrom(from.tiny_months_);
  standalone_tiny_months_.MergeFrom(from.standalone_tiny_months_);
  tiny_weekdays_.MergeFrom(from.tiny_weekdays_);
  standalone_tiny_weekdays_.MergeFrom(from.standalone_tiny_weekdays_);
  quarters_.MergeFrom(from.quarters_);
  standalone_quarters_.MergeFrom(from.standalone_quarters_);
  short_quarters_.MergeFrom(from.short_quarters_);
  standalone_short_quarters_.MergeFrom(from.standalone_short_quarters_);
  eras_.MergeFrom(from.eras_);
  long_eras_.MergeFrom(from.long_eras_);
  currency_symbols_.MergeFrom(from.currency_symbols_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_calendar(from._internal_calendar());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_numbering_system(from._internal_numbering_system());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_am_symbol(from._internal_am_symbol());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_pm_symbol(from._internal_pm_symbol());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_short_date_pattern(from._internal_short_date_pattern());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_medium_date_pattern(from._internal_medium_date_pattern());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_long_date_pattern(from._internal_long_date_pattern());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_full_date_pattern(from._internal_full_date_pattern());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_short_time_pattern(from._internal_short_time_pattern());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_medium_time_pattern(from._internal_medium_time_pattern());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_long_time_pattern(from._internal_long_time_pattern());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_full_time_pattern(from._internal_full_time_pattern());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_decimal_separator(from._internal_decimal_separator());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_grouping_separator(from._internal_grouping_separator());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_currency_decimal_separator(from._internal_currency_decimal_separator());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_currency_grouping_separator(from._internal_currency_grouping_separator());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_plus_sign(from._internal_plus_sign());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_minus_sign(from._internal_minus_sign());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_exponential_symbol(from._internal_exponential_symbol());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_percent_symbol(from._internal_percent_symbol());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_per_mille_symbol(from._internal_per_mille_symbol());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_infinity_symbol(from._internal_infinity_symbol());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_nan_symbol(from._internal_nan_symbol());
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_decimal_pattern(from._internal_decimal_pattern());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_scientific_pattern(from._internal_scientific_pattern());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_percent_pattern(from._internal_percent_pattern());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_currency_pattern(from._internal_currency_pattern());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormattingSymbolsArchive::CopyFrom(const FormattingSymbolsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FormattingSymbolsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormattingSymbolsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(currency_symbols_)) return false;
  return true;
}

void FormattingSymbolsArchive::InternalSwap(FormattingSymbolsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  months_.InternalSwap(&other->months_);
  standalone_months_.InternalSwap(&other->standalone_months_);
  short_months_.InternalSwap(&other->short_months_);
  standalone_short_months_.InternalSwap(&other->standalone_short_months_);
  weekdays_.InternalSwap(&other->weekdays_);
  standalone_weekdays_.InternalSwap(&other->standalone_weekdays_);
  short_weekdays_.InternalSwap(&other->short_weekdays_);
  standalone_short_weekdays_.InternalSwap(&other->standalone_short_weekdays_);
  tiny_months_.InternalSwap(&other->tiny_months_);
  standalone_tiny_months_.InternalSwap(&other->standalone_tiny_months_);
  tiny_weekdays_.InternalSwap(&other->tiny_weekdays_);
  standalone_tiny_weekdays_.InternalSwap(&other->standalone_tiny_weekdays_);
  quarters_.InternalSwap(&other->quarters_);
  standalone_quarters_.InternalSwap(&other->standalone_quarters_);
  short_quarters_.InternalSwap(&other->short_quarters_);
  standalone_short_quarters_.InternalSwap(&other->standalone_short_quarters_);
  eras_.InternalSwap(&other->eras_);
  long_eras_.InternalSwap(&other->long_eras_);
  currency_symbols_.InternalSwap(&other->currency_symbols_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &calendar_, GetArenaForAllocation(),
      &other->calendar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &numbering_system_, GetArenaForAllocation(),
      &other->numbering_system_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &am_symbol_, GetArenaForAllocation(),
      &other->am_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pm_symbol_, GetArenaForAllocation(),
      &other->pm_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &short_date_pattern_, GetArenaForAllocation(),
      &other->short_date_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &medium_date_pattern_, GetArenaForAllocation(),
      &other->medium_date_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &long_date_pattern_, GetArenaForAllocation(),
      &other->long_date_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_date_pattern_, GetArenaForAllocation(),
      &other->full_date_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &short_time_pattern_, GetArenaForAllocation(),
      &other->short_time_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &medium_time_pattern_, GetArenaForAllocation(),
      &other->medium_time_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &long_time_pattern_, GetArenaForAllocation(),
      &other->long_time_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_time_pattern_, GetArenaForAllocation(),
      &other->full_time_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &decimal_separator_, GetArenaForAllocation(),
      &other->decimal_separator_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &grouping_separator_, GetArenaForAllocation(),
      &other->grouping_separator_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_decimal_separator_, GetArenaForAllocation(),
      &other->currency_decimal_separator_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_grouping_separator_, GetArenaForAllocation(),
      &other->currency_grouping_separator_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plus_sign_, GetArenaForAllocation(),
      &other->plus_sign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minus_sign_, GetArenaForAllocation(),
      &other->minus_sign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exponential_symbol_, GetArenaForAllocation(),
      &other->exponential_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &percent_symbol_, GetArenaForAllocation(),
      &other->percent_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &per_mille_symbol_, GetArenaForAllocation(),
      &other->per_mille_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &infinity_symbol_, GetArenaForAllocation(),
      &other->infinity_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nan_symbol_, GetArenaForAllocation(),
      &other->nan_symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &decimal_pattern_, GetArenaForAllocation(),
      &other->decimal_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scientific_pattern_, GetArenaForAllocation(),
      &other->scientific_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &percent_pattern_, GetArenaForAllocation(),
      &other->percent_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_pattern_, GetArenaForAllocation(),
      &other->currency_pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_code_, GetArenaForAllocation(),
      &other->currency_code_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FormattingSymbolsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[15]);
}

// ===================================================================

class DocumentSupportCollaborationState::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSupportCollaborationState>()._has_bits_);
  static const ::TSP::Reference& collaboration_command_history(const DocumentSupportCollaborationState* msg);
  static void set_has_collaboration_command_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& collaboration_session_state(const DocumentSupportCollaborationState* msg);
  static void set_has_collaboration_session_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
DocumentSupportCollaborationState::_Internal::collaboration_command_history(const DocumentSupportCollaborationState* msg) {
  return *msg->collaboration_command_history_;
}
const ::TSP::Reference&
DocumentSupportCollaborationState::_Internal::collaboration_session_state(const DocumentSupportCollaborationState* msg) {
  return *msg->collaboration_session_state_;
}
void DocumentSupportCollaborationState::clear_collaboration_command_history() {
  if (collaboration_command_history_ != nullptr) collaboration_command_history_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentSupportCollaborationState::clear_collaboration_session_state() {
  if (collaboration_session_state_ != nullptr) collaboration_session_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DocumentSupportCollaborationState::DocumentSupportCollaborationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentSupportCollaborationState)
}
DocumentSupportCollaborationState::DocumentSupportCollaborationState(const DocumentSupportCollaborationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_collaboration_command_history()) {
    collaboration_command_history_ = new ::TSP::Reference(*from.collaboration_command_history_);
  } else {
    collaboration_command_history_ = nullptr;
  }
  if (from._internal_has_collaboration_session_state()) {
    collaboration_session_state_ = new ::TSP::Reference(*from.collaboration_session_state_);
  } else {
    collaboration_session_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentSupportCollaborationState)
}

inline void DocumentSupportCollaborationState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&collaboration_command_history_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&collaboration_session_state_) -
    reinterpret_cast<char*>(&collaboration_command_history_)) + sizeof(collaboration_session_state_));
}

DocumentSupportCollaborationState::~DocumentSupportCollaborationState() {
  // @@protoc_insertion_point(destructor:TSK.DocumentSupportCollaborationState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentSupportCollaborationState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete collaboration_command_history_;
  if (this != internal_default_instance()) delete collaboration_session_state_;
}

void DocumentSupportCollaborationState::ArenaDtor(void* object) {
  DocumentSupportCollaborationState* _this = reinterpret_cast< DocumentSupportCollaborationState* >(object);
  (void)_this;
}
void DocumentSupportCollaborationState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSupportCollaborationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSupportCollaborationState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentSupportCollaborationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(collaboration_command_history_ != nullptr);
      collaboration_command_history_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(collaboration_session_state_ != nullptr);
      collaboration_session_state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSupportCollaborationState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference collaboration_command_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_command_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_session_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_session_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentSupportCollaborationState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentSupportCollaborationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference collaboration_command_history = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::collaboration_command_history(this), target, stream);
  }

  // optional .TSP.Reference collaboration_session_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::collaboration_session_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentSupportCollaborationState)
  return target;
}

size_t DocumentSupportCollaborationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentSupportCollaborationState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference collaboration_command_history = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collaboration_command_history_);
    }

    // optional .TSP.Reference collaboration_session_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collaboration_session_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSupportCollaborationState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentSupportCollaborationState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSupportCollaborationState::GetClassData() const { return &_class_data_; }

void DocumentSupportCollaborationState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DocumentSupportCollaborationState *>(to)->MergeFrom(
      static_cast<const DocumentSupportCollaborationState &>(from));
}


void DocumentSupportCollaborationState::MergeFrom(const DocumentSupportCollaborationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentSupportCollaborationState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_collaboration_command_history()->::TSP::Reference::MergeFrom(from._internal_collaboration_command_history());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_collaboration_session_state()->::TSP::Reference::MergeFrom(from._internal_collaboration_session_state());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSupportCollaborationState::CopyFrom(const DocumentSupportCollaborationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentSupportCollaborationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSupportCollaborationState::IsInitialized() const {
  if (_internal_has_collaboration_command_history()) {
    if (!collaboration_command_history_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_session_state()) {
    if (!collaboration_session_state_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSupportCollaborationState::InternalSwap(DocumentSupportCollaborationState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentSupportCollaborationState, collaboration_session_state_)
      + sizeof(DocumentSupportCollaborationState::collaboration_session_state_)
      - PROTOBUF_FIELD_OFFSET(DocumentSupportCollaborationState, collaboration_command_history_)>(
          reinterpret_cast<char*>(&collaboration_command_history_),
          reinterpret_cast<char*>(&other->collaboration_command_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSupportCollaborationState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[16]);
}

// ===================================================================

class DocumentSupportArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSupportArchive>()._has_bits_);
  static const ::TSP::Reference& command_history(const DocumentSupportArchive* msg);
  static void set_has_command_history(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_redo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_undo_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redo_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& web_state(const DocumentSupportArchive* msg);
  static void set_has_web_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_in_collaboration_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_action_string_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& collaboration_state(const DocumentSupportArchive* msg);
  static void set_has_collaboration_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& command_selection_behavior_history(const DocumentSupportArchive* msg);
  static void set_has_command_selection_behavior_history(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& view_state(const DocumentSupportArchive* msg);
  static void set_has_view_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& collaboration_command_history(const DocumentSupportArchive* msg);
  static void set_has_collaboration_command_history(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& collaboration_session_state(const DocumentSupportArchive* msg);
  static void set_has_collaboration_session_state(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::TSP::Reference&
DocumentSupportArchive::_Internal::command_history(const DocumentSupportArchive* msg) {
  return *msg->command_history_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::web_state(const DocumentSupportArchive* msg) {
  return *msg->web_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::collaboration_state(const DocumentSupportArchive* msg) {
  return *msg->collaboration_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::command_selection_behavior_history(const DocumentSupportArchive* msg) {
  return *msg->command_selection_behavior_history_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::view_state(const DocumentSupportArchive* msg) {
  return *msg->view_state_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::collaboration_command_history(const DocumentSupportArchive* msg) {
  return *msg->collaboration_command_history_;
}
const ::TSP::Reference&
DocumentSupportArchive::_Internal::collaboration_session_state(const DocumentSupportArchive* msg) {
  return *msg->collaboration_session_state_;
}
void DocumentSupportArchive::clear_command_history() {
  if (command_history_ != nullptr) command_history_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentSupportArchive::clear_web_state() {
  if (web_state_ != nullptr) web_state_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentSupportArchive::clear_collaboration_state() {
  if (collaboration_state_ != nullptr) collaboration_state_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void DocumentSupportArchive::clear_command_selection_behavior_history() {
  if (command_selection_behavior_history_ != nullptr) command_selection_behavior_history_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentSupportArchive::clear_view_state() {
  if (view_state_ != nullptr) view_state_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentSupportArchive::clear_collaboration_command_history() {
  if (collaboration_command_history_ != nullptr) collaboration_command_history_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentSupportArchive::clear_collaboration_session_state() {
  if (collaboration_session_state_ != nullptr) collaboration_session_state_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
DocumentSupportArchive::DocumentSupportArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentSupportArchive)
}
DocumentSupportArchive::DocumentSupportArchive(const DocumentSupportArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  undo_action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_undo_action_string()) {
    undo_action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_undo_action_string(), 
      GetArenaForAllocation());
  }
  redo_action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_redo_action_string()) {
    redo_action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redo_action_string(), 
      GetArenaForAllocation());
  }
  action_string_localization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_string_localization()) {
    action_string_localization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_string_localization(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_command_history()) {
    command_history_ = new ::TSP::Reference(*from.command_history_);
  } else {
    command_history_ = nullptr;
  }
  if (from._internal_has_command_selection_behavior_history()) {
    command_selection_behavior_history_ = new ::TSP::Reference(*from.command_selection_behavior_history_);
  } else {
    command_selection_behavior_history_ = nullptr;
  }
  if (from._internal_has_view_state()) {
    view_state_ = new ::TSP::Reference(*from.view_state_);
  } else {
    view_state_ = nullptr;
  }
  if (from._internal_has_web_state()) {
    web_state_ = new ::TSP::Reference(*from.web_state_);
  } else {
    web_state_ = nullptr;
  }
  if (from._internal_has_collaboration_command_history()) {
    collaboration_command_history_ = new ::TSP::Reference(*from.collaboration_command_history_);
  } else {
    collaboration_command_history_ = nullptr;
  }
  if (from._internal_has_collaboration_session_state()) {
    collaboration_session_state_ = new ::TSP::Reference(*from.collaboration_session_state_);
  } else {
    collaboration_session_state_ = nullptr;
  }
  if (from._internal_has_collaboration_state()) {
    collaboration_state_ = new ::TSP::Reference(*from.collaboration_state_);
  } else {
    collaboration_state_ = nullptr;
  }
  ::memcpy(&undo_count_, &from.undo_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_in_collaboration_mode_) -
    reinterpret_cast<char*>(&undo_count_)) + sizeof(is_in_collaboration_mode_));
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentSupportArchive)
}

inline void DocumentSupportArchive::SharedCtor() {
undo_action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redo_action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_string_localization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_history_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_in_collaboration_mode_) -
    reinterpret_cast<char*>(&command_history_)) + sizeof(is_in_collaboration_mode_));
}

DocumentSupportArchive::~DocumentSupportArchive() {
  // @@protoc_insertion_point(destructor:TSK.DocumentSupportArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentSupportArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  undo_action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redo_action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_string_localization_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_history_;
  if (this != internal_default_instance()) delete command_selection_behavior_history_;
  if (this != internal_default_instance()) delete view_state_;
  if (this != internal_default_instance()) delete web_state_;
  if (this != internal_default_instance()) delete collaboration_command_history_;
  if (this != internal_default_instance()) delete collaboration_session_state_;
  if (this != internal_default_instance()) delete collaboration_state_;
}

void DocumentSupportArchive::ArenaDtor(void* object) {
  DocumentSupportArchive* _this = reinterpret_cast< DocumentSupportArchive* >(object);
  (void)_this;
}
void DocumentSupportArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSupportArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSupportArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentSupportArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      undo_action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      redo_action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      action_string_localization_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(command_history_ != nullptr);
      command_history_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(command_selection_behavior_history_ != nullptr);
      command_selection_behavior_history_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(view_state_ != nullptr);
      view_state_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(web_state_ != nullptr);
      web_state_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(collaboration_command_history_ != nullptr);
      collaboration_command_history_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(collaboration_session_state_ != nullptr);
      collaboration_session_state_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(collaboration_state_ != nullptr);
      collaboration_state_->Clear();
    }
  }
  if (cached_has_bits & 0x00001c00u) {
    ::memset(&undo_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_in_collaboration_mode_) -
        reinterpret_cast<char*>(&undo_count_)) + sizeof(is_in_collaboration_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSupportArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_selection_behavior_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference view_state = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 undo_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_undo_count(&has_bits);
          undo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 redo_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_redo_count(&has_bits);
          redo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string undo_action_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_undo_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.DocumentSupportArchive.undo_action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string redo_action_string = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_redo_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.DocumentSupportArchive.redo_action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference web_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_collaboration_mode = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_in_collaboration_mode(&has_bits);
          is_in_collaboration_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_command_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_session_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action_string_localization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_action_string_localization();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.DocumentSupportArchive.action_string_localization");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference collaboration_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentSupportArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentSupportArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference command_history = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command_history(this), target, stream);
  }

  // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command_selection_behavior_history(this), target, stream);
  }

  // optional .TSP.Reference view_state = 3 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::view_state(this), target, stream);
  }

  // optional uint32 undo_count = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undo_count(), target);
  }

  // optional uint32 redo_count = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_redo_count(), target);
  }

  // optional string undo_action_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_undo_action_string().data(), static_cast<int>(this->_internal_undo_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentSupportArchive.undo_action_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_undo_action_string(), target);
  }

  // optional string redo_action_string = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_redo_action_string().data(), static_cast<int>(this->_internal_redo_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentSupportArchive.redo_action_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_redo_action_string(), target);
  }

  // optional .TSP.Reference web_state = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::web_state(this), target, stream);
  }

  // optional bool is_in_collaboration_mode = 9 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_in_collaboration_mode(), target);
  }

  // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::collaboration_command_history(this), target, stream);
  }

  // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::collaboration_session_state(this), target, stream);
  }

  // optional string action_string_localization = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string_localization().data(), static_cast<int>(this->_internal_action_string_localization().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DocumentSupportArchive.action_string_localization");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_action_string_localization(), target);
  }

  // optional .TSP.Reference collaboration_state = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::collaboration_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentSupportArchive)
  return target;
}

size_t DocumentSupportArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentSupportArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string undo_action_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_undo_action_string());
    }

    // optional string redo_action_string = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redo_action_string());
    }

    // optional string action_string_localization = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_string_localization());
    }

    // optional .TSP.Reference command_history = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_history_);
    }

    // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_selection_behavior_history_);
    }

    // optional .TSP.Reference view_state = 3 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_state_);
    }

    // optional .TSP.Reference web_state = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *web_state_);
    }

    // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collaboration_command_history_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collaboration_session_state_);
    }

    // optional .TSP.Reference collaboration_state = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *collaboration_state_);
    }

    // optional uint32 undo_count = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_undo_count());
    }

    // optional uint32 redo_count = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_redo_count());
    }

    // optional bool is_in_collaboration_mode = 9 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSupportArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentSupportArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSupportArchive::GetClassData() const { return &_class_data_; }

void DocumentSupportArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DocumentSupportArchive *>(to)->MergeFrom(
      static_cast<const DocumentSupportArchive &>(from));
}


void DocumentSupportArchive::MergeFrom(const DocumentSupportArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentSupportArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_undo_action_string(from._internal_undo_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_redo_action_string(from._internal_redo_action_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_action_string_localization(from._internal_action_string_localization());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_command_history()->::TSP::Reference::MergeFrom(from._internal_command_history());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_command_selection_behavior_history()->::TSP::Reference::MergeFrom(from._internal_command_selection_behavior_history());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_view_state()->::TSP::Reference::MergeFrom(from._internal_view_state());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_web_state()->::TSP::Reference::MergeFrom(from._internal_web_state());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_collaboration_command_history()->::TSP::Reference::MergeFrom(from._internal_collaboration_command_history());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_collaboration_session_state()->::TSP::Reference::MergeFrom(from._internal_collaboration_session_state());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_collaboration_state()->::TSP::Reference::MergeFrom(from._internal_collaboration_state());
    }
    if (cached_has_bits & 0x00000400u) {
      undo_count_ = from.undo_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      redo_count_ = from.redo_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_in_collaboration_mode_ = from.is_in_collaboration_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSupportArchive::CopyFrom(const DocumentSupportArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentSupportArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSupportArchive::IsInitialized() const {
  if (_internal_has_command_history()) {
    if (!command_history_->IsInitialized()) return false;
  }
  if (_internal_has_command_selection_behavior_history()) {
    if (!command_selection_behavior_history_->IsInitialized()) return false;
  }
  if (_internal_has_view_state()) {
    if (!view_state_->IsInitialized()) return false;
  }
  if (_internal_has_web_state()) {
    if (!web_state_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_command_history()) {
    if (!collaboration_command_history_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_session_state()) {
    if (!collaboration_session_state_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_state()) {
    if (!collaboration_state_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSupportArchive::InternalSwap(DocumentSupportArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &undo_action_string_, GetArenaForAllocation(),
      &other->undo_action_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redo_action_string_, GetArenaForAllocation(),
      &other->redo_action_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_string_localization_, GetArenaForAllocation(),
      &other->action_string_localization_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentSupportArchive, is_in_collaboration_mode_)
      + sizeof(DocumentSupportArchive::is_in_collaboration_mode_)
      - PROTOBUF_FIELD_OFFSET(DocumentSupportArchive, command_history_)>(
          reinterpret_cast<char*>(&command_history_),
          reinterpret_cast<char*>(&other->command_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSupportArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[17]);
}

// ===================================================================

class ViewStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewStateArchive>()._has_bits_);
  static const ::TSP::Reference& view_state_root(const ViewStateArchive* msg);
  static void set_has_view_state_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_document_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
ViewStateArchive::_Internal::view_state_root(const ViewStateArchive* msg) {
  return *msg->view_state_root_;
}
void ViewStateArchive::clear_view_state_root() {
  if (view_state_root_ != nullptr) view_state_root_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ViewStateArchive::ViewStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.ViewStateArchive)
}
ViewStateArchive::ViewStateArchive(const ViewStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  document_revision_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_document_revision_identifier()) {
    document_revision_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_revision_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_view_state_root()) {
    view_state_root_ = new ::TSP::Reference(*from.view_state_root_);
  } else {
    view_state_root_ = nullptr;
  }
  document_revision_sequence_ = from.document_revision_sequence_;
  // @@protoc_insertion_point(copy_constructor:TSK.ViewStateArchive)
}

inline void ViewStateArchive::SharedCtor() {
document_revision_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&view_state_root_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&document_revision_sequence_) -
    reinterpret_cast<char*>(&view_state_root_)) + sizeof(document_revision_sequence_));
}

ViewStateArchive::~ViewStateArchive() {
  // @@protoc_insertion_point(destructor:TSK.ViewStateArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  document_revision_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete view_state_root_;
}

void ViewStateArchive::ArenaDtor(void* object) {
  ViewStateArchive* _this = reinterpret_cast< ViewStateArchive* >(object);
  (void)_this;
}
void ViewStateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewStateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ViewStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      document_revision_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_state_root_ != nullptr);
      view_state_root_->Clear();
    }
  }
  document_revision_sequence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewStateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference view_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_state_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 document_revision_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_document_revision_sequence(&has_bits);
          document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string document_revision_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_document_revision_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.ViewStateArchive.document_revision_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewStateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ViewStateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference view_state_root = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::view_state_root(this), target, stream);
  }

  // optional int32 document_revision_sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_document_revision_sequence(), target);
  }

  // optional string document_revision_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_revision_identifier().data(), static_cast<int>(this->_internal_document_revision_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.ViewStateArchive.document_revision_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_document_revision_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ViewStateArchive)
  return target;
}

size_t ViewStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ViewStateArchive)
  size_t total_size = 0;

  // required .TSP.Reference view_state_root = 1;
  if (_internal_has_view_state_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_state_root_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string document_revision_identifier = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_revision_identifier());
  }

  // optional int32 document_revision_sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_document_revision_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewStateArchive::GetClassData() const { return &_class_data_; }

void ViewStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ViewStateArchive *>(to)->MergeFrom(
      static_cast<const ViewStateArchive &>(from));
}


void ViewStateArchive::MergeFrom(const ViewStateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.ViewStateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_document_revision_identifier(from._internal_document_revision_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_view_state_root()->::TSP::Reference::MergeFrom(from._internal_view_state_root());
    }
    if (cached_has_bits & 0x00000004u) {
      document_revision_sequence_ = from.document_revision_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewStateArchive::CopyFrom(const ViewStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ViewStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_view_state_root()) {
    if (!view_state_root_->IsInitialized()) return false;
  }
  return true;
}

void ViewStateArchive::InternalSwap(ViewStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &document_revision_identifier_, GetArenaForAllocation(),
      &other->document_revision_identifier_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewStateArchive, document_revision_sequence_)
      + sizeof(ViewStateArchive::document_revision_sequence_)
      - PROTOBUF_FIELD_OFFSET(ViewStateArchive, view_state_root_)>(
          reinterpret_cast<char*>(&view_state_root_),
          reinterpret_cast<char*>(&other->view_state_root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewStateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[18]);
}

// ===================================================================

class CommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandArchive>()._has_bits_);
  static const ::TSP::Reference& undoredostate(const CommandArchive* msg);
  static void set_has_undoredostate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& undocollection(const CommandArchive* msg);
  static void set_has_undocollection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shadowed_by_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shadowed_by_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_hold_until_group_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_originated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSP::Reference&
CommandArchive::_Internal::undoredostate(const CommandArchive* msg) {
  return *msg->undoredostate_;
}
const ::TSP::Reference&
CommandArchive::_Internal::undocollection(const CommandArchive* msg) {
  return *msg->undocollection_;
}
void CommandArchive::clear_undoredostate() {
  if (undoredostate_ != nullptr) undoredostate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CommandArchive::clear_undocollection() {
  if (undocollection_ != nullptr) undocollection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CommandArchive::CommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CommandArchive)
}
CommandArchive::CommandArchive(const CommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_undoredostate()) {
    undoredostate_ = new ::TSP::Reference(*from.undoredostate_);
  } else {
    undoredostate_ = nullptr;
  }
  if (from._internal_has_undocollection()) {
    undocollection_ = new ::TSP::Reference(*from.undocollection_);
  } else {
    undocollection_ = nullptr;
  }
  ::memcpy(&shadowed_by_transform_, &from.shadowed_by_transform_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_originated_) -
    reinterpret_cast<char*>(&shadowed_by_transform_)) + sizeof(server_originated_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandArchive)
}

inline void CommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&undoredostate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_originated_) -
    reinterpret_cast<char*>(&undoredostate_)) + sizeof(server_originated_));
}

CommandArchive::~CommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete undoredostate_;
  if (this != internal_default_instance()) delete undocollection_;
}

void CommandArchive::ArenaDtor(void* object) {
  CommandArchive* _this = reinterpret_cast< CommandArchive* >(object);
  (void)_this;
}
void CommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(undoredostate_ != nullptr);
      undoredostate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(undocollection_ != nullptr);
      undocollection_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&shadowed_by_transform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_originated_) -
        reinterpret_cast<char*>(&shadowed_by_transform_)) + sizeof(server_originated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoredostate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference undoCollection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_undocollection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shadowed_by_transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shadowed_by_transform(&has_bits);
          shadowed_by_transform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shadowed_by_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_shadowed_by_commit(&has_bits);
          shadowed_by_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remote = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_remote(&has_bits);
          remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_hold_until_group_commit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_should_hold_until_group_commit(&has_bits);
          should_hold_until_group_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool server_originated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_server_originated(&has_bits);
          server_originated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::undoredostate(this), target, stream);
  }

  // optional .TSP.Reference undoCollection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::undocollection(this), target, stream);
  }

  // optional bool shadowed_by_transform = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shadowed_by_transform(), target);
  }

  // optional bool shadowed_by_commit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_shadowed_by_commit(), target);
  }

  // optional bool remote = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_remote(), target);
  }

  // optional bool should_hold_until_group_commit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_should_hold_until_group_commit(), target);
  }

  // optional bool server_originated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_server_originated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandArchive)
  return target;
}

size_t CommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undoredostate_);
    }

    // optional .TSP.Reference undoCollection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *undocollection_);
    }

    // optional bool shadowed_by_transform = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool shadowed_by_commit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool remote = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_hold_until_group_commit = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool server_originated = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandArchive::GetClassData() const { return &_class_data_; }

void CommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandArchive *>(to)->MergeFrom(
      static_cast<const CommandArchive &>(from));
}


void CommandArchive::MergeFrom(const CommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_undoredostate()->::TSP::Reference::MergeFrom(from._internal_undoredostate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_undocollection()->::TSP::Reference::MergeFrom(from._internal_undocollection());
    }
    if (cached_has_bits & 0x00000004u) {
      shadowed_by_transform_ = from.shadowed_by_transform_;
    }
    if (cached_has_bits & 0x00000008u) {
      shadowed_by_commit_ = from.shadowed_by_commit_;
    }
    if (cached_has_bits & 0x00000010u) {
      remote_ = from.remote_;
    }
    if (cached_has_bits & 0x00000020u) {
      should_hold_until_group_commit_ = from.should_hold_until_group_commit_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_originated_ = from.server_originated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandArchive::CopyFrom(const CommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandArchive::IsInitialized() const {
  if (_internal_has_undoredostate()) {
    if (!undoredostate_->IsInitialized()) return false;
  }
  if (_internal_has_undocollection()) {
    if (!undocollection_->IsInitialized()) return false;
  }
  return true;
}

void CommandArchive::InternalSwap(CommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandArchive, server_originated_)
      + sizeof(CommandArchive::server_originated_)
      - PROTOBUF_FIELD_OFFSET(CommandArchive, undoredostate_)>(
          reinterpret_cast<char*>(&undoredostate_),
          reinterpret_cast<char*>(&other->undoredostate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[19]);
}

// ===================================================================

class CommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandGroupArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& process_results(const CommandGroupArchive* msg);
  static void set_has_process_results(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CommandGroupArchive::_Internal::super(const CommandGroupArchive* msg) {
  return *msg->super_;
}
const ::TSP::IndexSet&
CommandGroupArchive::_Internal::process_results(const CommandGroupArchive* msg) {
  return *msg->process_results_;
}
void CommandGroupArchive::clear_commands() {
  commands_.Clear();
}
void CommandGroupArchive::clear_process_results() {
  if (process_results_ != nullptr) process_results_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommandGroupArchive::CommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CommandGroupArchive)
}
CommandGroupArchive::CommandGroupArchive(const CommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_string()) {
    action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_process_results()) {
    process_results_ = new ::TSP::IndexSet(*from.process_results_);
  } else {
    process_results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CommandGroupArchive)
}

inline void CommandGroupArchive::SharedCtor() {
action_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&process_results_) -
    reinterpret_cast<char*>(&super_)) + sizeof(process_results_));
}

CommandGroupArchive::~CommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandGroupArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete process_results_;
}

void CommandGroupArchive::ArenaDtor(void* object) {
  CommandGroupArchive* _this = reinterpret_cast< CommandGroupArchive* >(object);
  (void)_this;
}
void CommandGroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandGroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_results_ != nullptr);
      process_results_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandGroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.IndexSet process_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CommandGroupArchive.action_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandGroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSP.Reference commands = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_commands(i), target, stream);
  }

  // optional .TSP.IndexSet process_results = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::process_results(this), target, stream);
  }

  // optional string action_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommandGroupArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandGroupArchive)
  return target;
}

size_t CommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandGroupArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 2;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string action_string = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  // optional .TSP.IndexSet process_results = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *process_results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandGroupArchive::GetClassData() const { return &_class_data_; }

void CommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandGroupArchive *>(to)->MergeFrom(
      static_cast<const CommandGroupArchive &>(from));
}


void CommandGroupArchive::MergeFrom(const CommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_process_results()->::TSP::IndexSet::MergeFrom(from._internal_process_results());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandGroupArchive::CopyFrom(const CommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_process_results()) {
    if (!process_results_->IsInitialized()) return false;
  }
  return true;
}

void CommandGroupArchive::InternalSwap(CommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commands_.InternalSwap(&other->commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_string_, GetArenaForAllocation(),
      &other->action_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandGroupArchive, process_results_)
      + sizeof(CommandGroupArchive::process_results_)
      - PROTOBUF_FIELD_OFFSET(CommandGroupArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandGroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[20]);
}

// ===================================================================

class InducedCommandCollectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InducedCommandCollectionArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InducedCommandCollectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& inducing_command(const InducedCommandCollectionArchive* msg);
  static void set_has_inducing_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::IndexSet& indexes_of_processed_induced_commands(const InducedCommandCollectionArchive* msg);
  static void set_has_indexes_of_processed_induced_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InducedCommandCollectionArchive::_Internal::super(const InducedCommandCollectionArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
InducedCommandCollectionArchive::_Internal::inducing_command(const InducedCommandCollectionArchive* msg) {
  return *msg->inducing_command_;
}
const ::TSP::IndexSet&
InducedCommandCollectionArchive::_Internal::indexes_of_processed_induced_commands(const InducedCommandCollectionArchive* msg) {
  return *msg->indexes_of_processed_induced_commands_;
}
void InducedCommandCollectionArchive::clear_inducing_command() {
  if (inducing_command_ != nullptr) inducing_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InducedCommandCollectionArchive::clear_induced_commands() {
  induced_commands_.Clear();
}
void InducedCommandCollectionArchive::clear_indexes_of_processed_induced_commands() {
  if (indexes_of_processed_induced_commands_ != nullptr) indexes_of_processed_induced_commands_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InducedCommandCollectionArchive::InducedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  induced_commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.InducedCommandCollectionArchive)
}
InducedCommandCollectionArchive::InducedCommandCollectionArchive(const InducedCommandCollectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      induced_commands_(from.induced_commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_inducing_command()) {
    inducing_command_ = new ::TSP::Reference(*from.inducing_command_);
  } else {
    inducing_command_ = nullptr;
  }
  if (from._internal_has_indexes_of_processed_induced_commands()) {
    indexes_of_processed_induced_commands_ = new ::TSP::IndexSet(*from.indexes_of_processed_induced_commands_);
  } else {
    indexes_of_processed_induced_commands_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.InducedCommandCollectionArchive)
}

inline void InducedCommandCollectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&indexes_of_processed_induced_commands_) -
    reinterpret_cast<char*>(&super_)) + sizeof(indexes_of_processed_induced_commands_));
}

InducedCommandCollectionArchive::~InducedCommandCollectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.InducedCommandCollectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InducedCommandCollectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete inducing_command_;
  if (this != internal_default_instance()) delete indexes_of_processed_induced_commands_;
}

void InducedCommandCollectionArchive::ArenaDtor(void* object) {
  InducedCommandCollectionArchive* _this = reinterpret_cast< InducedCommandCollectionArchive* >(object);
  (void)_this;
}
void InducedCommandCollectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InducedCommandCollectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InducedCommandCollectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.InducedCommandCollectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  induced_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(inducing_command_ != nullptr);
      inducing_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(indexes_of_processed_induced_commands_ != nullptr);
      indexes_of_processed_induced_commands_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InducedCommandCollectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference inducing_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inducing_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference induced_commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_induced_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_indexes_of_processed_induced_commands(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InducedCommandCollectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.InducedCommandCollectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference inducing_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inducing_command(this), target, stream);
  }

  // repeated .TSP.Reference induced_commands = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_induced_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_induced_commands(i), target, stream);
  }

  // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::indexes_of_processed_induced_commands(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.InducedCommandCollectionArchive)
  return target;
}

size_t InducedCommandCollectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.InducedCommandCollectionArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference induced_commands = 3;
  total_size += 1UL * this->_internal_induced_commands_size();
  for (const auto& msg : this->induced_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference inducing_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inducing_command_);
    }

    // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *indexes_of_processed_induced_commands_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InducedCommandCollectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InducedCommandCollectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InducedCommandCollectionArchive::GetClassData() const { return &_class_data_; }

void InducedCommandCollectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InducedCommandCollectionArchive *>(to)->MergeFrom(
      static_cast<const InducedCommandCollectionArchive &>(from));
}


void InducedCommandCollectionArchive::MergeFrom(const InducedCommandCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.InducedCommandCollectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  induced_commands_.MergeFrom(from.induced_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_inducing_command()->::TSP::Reference::MergeFrom(from._internal_inducing_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_indexes_of_processed_induced_commands()->::TSP::IndexSet::MergeFrom(from._internal_indexes_of_processed_induced_commands());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InducedCommandCollectionArchive::CopyFrom(const InducedCommandCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.InducedCommandCollectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InducedCommandCollectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(induced_commands_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_inducing_command()) {
    if (!inducing_command_->IsInitialized()) return false;
  }
  if (_internal_has_indexes_of_processed_induced_commands()) {
    if (!indexes_of_processed_induced_commands_->IsInitialized()) return false;
  }
  return true;
}

void InducedCommandCollectionArchive::InternalSwap(InducedCommandCollectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  induced_commands_.InternalSwap(&other->induced_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InducedCommandCollectionArchive, indexes_of_processed_induced_commands_)
      + sizeof(InducedCommandCollectionArchive::indexes_of_processed_induced_commands_)
      - PROTOBUF_FIELD_OFFSET(InducedCommandCollectionArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InducedCommandCollectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[21]);
}

// ===================================================================

class PropagatedCommandCollectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropagatedCommandCollectionArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const PropagatedCommandCollectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& propagatable_command(const PropagatedCommandCollectionArchive* msg);
  static void set_has_propagatable_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_propagatable_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& propagating_command(const PropagatedCommandCollectionArchive* msg);
  static void set_has_propagating_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_propagating_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
PropagatedCommandCollectionArchive::_Internal::super(const PropagatedCommandCollectionArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
PropagatedCommandCollectionArchive::_Internal::propagatable_command(const PropagatedCommandCollectionArchive* msg) {
  return *msg->propagatable_command_;
}
const ::TSP::Reference&
PropagatedCommandCollectionArchive::_Internal::propagating_command(const PropagatedCommandCollectionArchive* msg) {
  return *msg->propagating_command_;
}
void PropagatedCommandCollectionArchive::clear_propagatable_command() {
  if (propagatable_command_ != nullptr) propagatable_command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PropagatedCommandCollectionArchive::clear_propagating_command() {
  if (propagating_command_ != nullptr) propagating_command_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PropagatedCommandCollectionArchive::PropagatedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.PropagatedCommandCollectionArchive)
}
PropagatedCommandCollectionArchive::PropagatedCommandCollectionArchive(const PropagatedCommandCollectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_propagatable_command()) {
    propagatable_command_ = new ::TSP::Reference(*from.propagatable_command_);
  } else {
    propagatable_command_ = nullptr;
  }
  if (from._internal_has_propagating_command()) {
    propagating_command_ = new ::TSP::Reference(*from.propagating_command_);
  } else {
    propagating_command_ = nullptr;
  }
  ::memcpy(&propagatable_command_process_result_, &from.propagatable_command_process_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&propagating_command_process_result_) -
    reinterpret_cast<char*>(&propagatable_command_process_result_)) + sizeof(propagating_command_process_result_));
  // @@protoc_insertion_point(copy_constructor:TSK.PropagatedCommandCollectionArchive)
}

inline void PropagatedCommandCollectionArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&propagating_command_process_result_) -
    reinterpret_cast<char*>(&super_)) + sizeof(propagating_command_process_result_));
}

PropagatedCommandCollectionArchive::~PropagatedCommandCollectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.PropagatedCommandCollectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PropagatedCommandCollectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete propagatable_command_;
  if (this != internal_default_instance()) delete propagating_command_;
}

void PropagatedCommandCollectionArchive::ArenaDtor(void* object) {
  PropagatedCommandCollectionArchive* _this = reinterpret_cast< PropagatedCommandCollectionArchive* >(object);
  (void)_this;
}
void PropagatedCommandCollectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropagatedCommandCollectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropagatedCommandCollectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.PropagatedCommandCollectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(propagatable_command_ != nullptr);
      propagatable_command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(propagating_command_ != nullptr);
      propagating_command_->Clear();
    }
  }
  ::memset(&propagatable_command_process_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagating_command_process_result_) -
      reinterpret_cast<char*>(&propagatable_command_process_result_)) + sizeof(propagating_command_process_result_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropagatedCommandCollectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference propagatable_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_propagatable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool propagatable_command_process_result = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_propagatable_command_process_result(&has_bits);
          propagatable_command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference propagating_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_propagating_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool propagating_command_process_result = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_propagating_command_process_result(&has_bits);
          propagating_command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropagatedCommandCollectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.PropagatedCommandCollectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference propagatable_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::propagatable_command(this), target, stream);
  }

  // optional bool propagatable_command_process_result = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_propagatable_command_process_result(), target);
  }

  // required .TSP.Reference propagating_command = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::propagating_command(this), target, stream);
  }

  // optional bool propagating_command_process_result = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_propagating_command_process_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.PropagatedCommandCollectionArchive)
  return target;
}

size_t PropagatedCommandCollectionArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.PropagatedCommandCollectionArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_propagatable_command()) {
    // required .TSP.Reference propagatable_command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *propagatable_command_);
  }

  if (_internal_has_propagating_command()) {
    // required .TSP.Reference propagating_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *propagating_command_);
  }

  return total_size;
}
size_t PropagatedCommandCollectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.PropagatedCommandCollectionArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference propagatable_command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *propagatable_command_);

    // required .TSP.Reference propagating_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *propagating_command_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional bool propagatable_command_process_result = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool propagating_command_process_result = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropagatedCommandCollectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PropagatedCommandCollectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropagatedCommandCollectionArchive::GetClassData() const { return &_class_data_; }

void PropagatedCommandCollectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PropagatedCommandCollectionArchive *>(to)->MergeFrom(
      static_cast<const PropagatedCommandCollectionArchive &>(from));
}


void PropagatedCommandCollectionArchive::MergeFrom(const PropagatedCommandCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.PropagatedCommandCollectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_propagatable_command()->::TSP::Reference::MergeFrom(from._internal_propagatable_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_propagating_command()->::TSP::Reference::MergeFrom(from._internal_propagating_command());
    }
    if (cached_has_bits & 0x00000008u) {
      propagatable_command_process_result_ = from.propagatable_command_process_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      propagating_command_process_result_ = from.propagating_command_process_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropagatedCommandCollectionArchive::CopyFrom(const PropagatedCommandCollectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.PropagatedCommandCollectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropagatedCommandCollectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_propagatable_command()) {
    if (!propagatable_command_->IsInitialized()) return false;
  }
  if (_internal_has_propagating_command()) {
    if (!propagating_command_->IsInitialized()) return false;
  }
  return true;
}

void PropagatedCommandCollectionArchive::InternalSwap(PropagatedCommandCollectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropagatedCommandCollectionArchive, propagating_command_process_result_)
      + sizeof(PropagatedCommandCollectionArchive::propagating_command_process_result_)
      - PROTOBUF_FIELD_OFFSET(PropagatedCommandCollectionArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropagatedCommandCollectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[22]);
}

// ===================================================================

class FinalCommandPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FinalCommandPairArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const FinalCommandPairArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& command(const FinalCommandPairArchive* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& final_command(const FinalCommandPairArchive* msg);
  static void set_has_final_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_final_command_process_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
FinalCommandPairArchive::_Internal::super(const FinalCommandPairArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
FinalCommandPairArchive::_Internal::command(const FinalCommandPairArchive* msg) {
  return *msg->command_;
}
const ::TSP::Reference&
FinalCommandPairArchive::_Internal::final_command(const FinalCommandPairArchive* msg) {
  return *msg->final_command_;
}
void FinalCommandPairArchive::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FinalCommandPairArchive::clear_final_command() {
  if (final_command_ != nullptr) final_command_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FinalCommandPairArchive::FinalCommandPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.FinalCommandPairArchive)
}
FinalCommandPairArchive::FinalCommandPairArchive(const FinalCommandPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_command()) {
    command_ = new ::TSP::Reference(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_final_command()) {
    final_command_ = new ::TSP::Reference(*from.final_command_);
  } else {
    final_command_ = nullptr;
  }
  ::memcpy(&command_process_result_, &from.command_process_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_command_process_result_) -
    reinterpret_cast<char*>(&command_process_result_)) + sizeof(final_command_process_result_));
  // @@protoc_insertion_point(copy_constructor:TSK.FinalCommandPairArchive)
}

inline void FinalCommandPairArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&final_command_process_result_) -
    reinterpret_cast<char*>(&super_)) + sizeof(final_command_process_result_));
}

FinalCommandPairArchive::~FinalCommandPairArchive() {
  // @@protoc_insertion_point(destructor:TSK.FinalCommandPairArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FinalCommandPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete final_command_;
}

void FinalCommandPairArchive::ArenaDtor(void* object) {
  FinalCommandPairArchive* _this = reinterpret_cast< FinalCommandPairArchive* >(object);
  (void)_this;
}
void FinalCommandPairArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalCommandPairArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FinalCommandPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FinalCommandPairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(final_command_ != nullptr);
      final_command_->Clear();
    }
  }
  ::memset(&command_process_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_command_process_result_) -
      reinterpret_cast<char*>(&command_process_result_)) + sizeof(final_command_process_result_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalCommandPairArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_process_result = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_command_process_result(&has_bits);
          command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference final_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool final_command_process_result = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_final_command_process_result(&has_bits);
          final_command_process_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalCommandPairArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FinalCommandPairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSP.Reference command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command(this), target, stream);
  }

  // optional bool command_process_result = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_command_process_result(), target);
  }

  // required .TSP.Reference final_command = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::final_command(this), target, stream);
  }

  // optional bool final_command_process_result = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_final_command_process_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FinalCommandPairArchive)
  return target;
}

size_t FinalCommandPairArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.FinalCommandPairArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_command()) {
    // required .TSP.Reference command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (_internal_has_final_command()) {
    // required .TSP.Reference final_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_command_);
  }

  return total_size;
}
size_t FinalCommandPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FinalCommandPairArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSP.Reference command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);

    // required .TSP.Reference final_command = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *final_command_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional bool command_process_result = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool final_command_process_result = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FinalCommandPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FinalCommandPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FinalCommandPairArchive::GetClassData() const { return &_class_data_; }

void FinalCommandPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FinalCommandPairArchive *>(to)->MergeFrom(
      static_cast<const FinalCommandPairArchive &>(from));
}


void FinalCommandPairArchive::MergeFrom(const FinalCommandPairArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.FinalCommandPairArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_command()->::TSP::Reference::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_final_command()->::TSP::Reference::MergeFrom(from._internal_final_command());
    }
    if (cached_has_bits & 0x00000008u) {
      command_process_result_ = from.command_process_result_;
    }
    if (cached_has_bits & 0x00000010u) {
      final_command_process_result_ = from.final_command_process_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FinalCommandPairArchive::CopyFrom(const FinalCommandPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FinalCommandPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalCommandPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  if (_internal_has_final_command()) {
    if (!final_command_->IsInitialized()) return false;
  }
  return true;
}

void FinalCommandPairArchive::InternalSwap(FinalCommandPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FinalCommandPairArchive, final_command_process_result_)
      + sizeof(FinalCommandPairArchive::final_command_process_result_)
      - PROTOBUF_FIELD_OFFSET(FinalCommandPairArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalCommandPairArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[23]);
}

// ===================================================================

class CommandContainerArchive::_Internal {
 public:
};

void CommandContainerArchive::clear_commands() {
  commands_.Clear();
}
CommandContainerArchive::CommandContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CommandContainerArchive)
}
CommandContainerArchive::CommandContainerArchive(const CommandContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.CommandContainerArchive)
}

inline void CommandContainerArchive::SharedCtor() {
}

CommandContainerArchive::~CommandContainerArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandContainerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommandContainerArchive::ArenaDtor(void* object) {
  CommandContainerArchive* _this = reinterpret_cast< CommandContainerArchive* >(object);
  (void)_this;
}
void CommandContainerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandContainerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandContainerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandContainerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandContainerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandContainerArchive)
  return target;
}

size_t CommandContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandContainerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandContainerArchive::GetClassData() const { return &_class_data_; }

void CommandContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandContainerArchive *>(to)->MergeFrom(
      static_cast<const CommandContainerArchive &>(from));
}


void CommandContainerArchive::MergeFrom(const CommandContainerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandContainerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandContainerArchive::CopyFrom(const CommandContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandContainerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(commands_)) return false;
  return true;
}

void CommandContainerArchive::InternalSwap(CommandContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandContainerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[24]);
}

// ===================================================================

class ShuffleMappingArchive_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ShuffleMappingArchive_Entry>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ShuffleMappingArchive_Entry::ShuffleMappingArchive_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.ShuffleMappingArchive.Entry)
}
ShuffleMappingArchive_Entry::ShuffleMappingArchive_Entry(const ShuffleMappingArchive_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:TSK.ShuffleMappingArchive.Entry)
}

inline void ShuffleMappingArchive_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

ShuffleMappingArchive_Entry::~ShuffleMappingArchive_Entry() {
  // @@protoc_insertion_point(destructor:TSK.ShuffleMappingArchive.Entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShuffleMappingArchive_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShuffleMappingArchive_Entry::ArenaDtor(void* object) {
  ShuffleMappingArchive_Entry* _this = reinterpret_cast< ShuffleMappingArchive_Entry* >(object);
  (void)_this;
}
void ShuffleMappingArchive_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShuffleMappingArchive_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShuffleMappingArchive_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ShuffleMappingArchive.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_) -
        reinterpret_cast<char*>(&from_)) + sizeof(to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShuffleMappingArchive_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_to(&has_bits);
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShuffleMappingArchive_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ShuffleMappingArchive.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // required uint32 to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ShuffleMappingArchive.Entry)
  return target;
}

size_t ShuffleMappingArchive_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ShuffleMappingArchive.Entry)
  size_t total_size = 0;

  if (_internal_has_from()) {
    // required uint32 from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  if (_internal_has_to()) {
    // required uint32 to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  return total_size;
}
size_t ShuffleMappingArchive_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ShuffleMappingArchive.Entry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 from = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());

    // required uint32 to = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShuffleMappingArchive_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShuffleMappingArchive_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShuffleMappingArchive_Entry::GetClassData() const { return &_class_data_; }

void ShuffleMappingArchive_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShuffleMappingArchive_Entry *>(to)->MergeFrom(
      static_cast<const ShuffleMappingArchive_Entry &>(from));
}


void ShuffleMappingArchive_Entry::MergeFrom(const ShuffleMappingArchive_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.ShuffleMappingArchive.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ = from.to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShuffleMappingArchive_Entry::CopyFrom(const ShuffleMappingArchive_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ShuffleMappingArchive.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleMappingArchive_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShuffleMappingArchive_Entry::InternalSwap(ShuffleMappingArchive_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShuffleMappingArchive_Entry, to_)
      + sizeof(ShuffleMappingArchive_Entry::to_)
      - PROTOBUF_FIELD_OFFSET(ShuffleMappingArchive_Entry, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShuffleMappingArchive_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[25]);
}

// ===================================================================

class ShuffleMappingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShuffleMappingArchive>()._has_bits_);
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_vertical(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_move_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_moved_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_destination_index_for_move(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_number_of_indexes_moved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ShuffleMappingArchive::ShuffleMappingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.ShuffleMappingArchive)
}
ShuffleMappingArchive::ShuffleMappingArchive(const ShuffleMappingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vertical_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(is_vertical_));
  // @@protoc_insertion_point(copy_constructor:TSK.ShuffleMappingArchive)
}

inline void ShuffleMappingArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_of_indexes_moved_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(number_of_indexes_moved_));
is_vertical_ = true;
}

ShuffleMappingArchive::~ShuffleMappingArchive() {
  // @@protoc_insertion_point(destructor:TSK.ShuffleMappingArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShuffleMappingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShuffleMappingArchive::ArenaDtor(void* object) {
  ShuffleMappingArchive* _this = reinterpret_cast< ShuffleMappingArchive* >(object);
  (void)_this;
}
void ShuffleMappingArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShuffleMappingArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShuffleMappingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ShuffleMappingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&start_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_indexes_moved_) -
        reinterpret_cast<char*>(&start_index_)) + sizeof(number_of_indexes_moved_));
    is_vertical_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShuffleMappingArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_index(&has_bits);
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 end_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_index(&has_bits);
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_vertical = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_vertical(&has_bits);
          is_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_move_operation = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_move_operation(&has_bits);
          is_move_operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_moved_index = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_first_moved_index(&has_bits);
          first_moved_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 destination_index_for_move = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_destination_index_for_move(&has_bits);
          destination_index_for_move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number_of_indexes_moved = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_number_of_indexes_moved(&has_bits);
          number_of_indexes_moved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShuffleMappingArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ShuffleMappingArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 start_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_index(), target);
  }

  // required uint32 end_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end_index(), target);
  }

  // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  // optional bool is_vertical = 4 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_vertical(), target);
  }

  // optional bool is_move_operation = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_move_operation(), target);
  }

  // optional uint32 first_moved_index = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_first_moved_index(), target);
  }

  // optional uint32 destination_index_for_move = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_destination_index_for_move(), target);
  }

  // optional uint32 number_of_indexes_moved = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_number_of_indexes_moved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ShuffleMappingArchive)
  return target;
}

size_t ShuffleMappingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ShuffleMappingArchive)
  size_t total_size = 0;

  if (_internal_has_start_index()) {
    // required uint32 start_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_index());
  }

  if (_internal_has_end_index()) {
    // required uint32 end_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_index());
  }

  return total_size;
}
size_t ShuffleMappingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ShuffleMappingArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 start_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_index());

    // required uint32 end_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007cu) {
    // optional bool is_move_operation = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 first_moved_index = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_moved_index());
    }

    // optional uint32 destination_index_for_move = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_destination_index_for_move());
    }

    // optional uint32 number_of_indexes_moved = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number_of_indexes_moved());
    }

    // optional bool is_vertical = 4 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShuffleMappingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShuffleMappingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShuffleMappingArchive::GetClassData() const { return &_class_data_; }

void ShuffleMappingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShuffleMappingArchive *>(to)->MergeFrom(
      static_cast<const ShuffleMappingArchive &>(from));
}


void ShuffleMappingArchive::MergeFrom(const ShuffleMappingArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.ShuffleMappingArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      start_index_ = from.start_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_index_ = from.end_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_move_operation_ = from.is_move_operation_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_moved_index_ = from.first_moved_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      destination_index_for_move_ = from.destination_index_for_move_;
    }
    if (cached_has_bits & 0x00000020u) {
      number_of_indexes_moved_ = from.number_of_indexes_moved_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_vertical_ = from.is_vertical_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShuffleMappingArchive::CopyFrom(const ShuffleMappingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ShuffleMappingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShuffleMappingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void ShuffleMappingArchive::InternalSwap(ShuffleMappingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShuffleMappingArchive, number_of_indexes_moved_)
      + sizeof(ShuffleMappingArchive::number_of_indexes_moved_)
      - PROTOBUF_FIELD_OFFSET(ShuffleMappingArchive, start_index_)>(
          reinterpret_cast<char*>(&start_index_),
          reinterpret_cast<char*>(&other->start_index_));
  swap(is_vertical_, other->is_vertical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShuffleMappingArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[26]);
}

// ===================================================================

class ProgressiveCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ProgressiveCommandGroupArchive>()._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const ProgressiveCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandGroupArchive&
ProgressiveCommandGroupArchive::_Internal::super(const ProgressiveCommandGroupArchive* msg) {
  return *msg->super_;
}
ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.ProgressiveCommandGroupArchive)
}
ProgressiveCommandGroupArchive::ProgressiveCommandGroupArchive(const ProgressiveCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandGroupArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ProgressiveCommandGroupArchive)
}

inline void ProgressiveCommandGroupArchive::SharedCtor() {
super_ = nullptr;
}

ProgressiveCommandGroupArchive::~ProgressiveCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TSK.ProgressiveCommandGroupArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProgressiveCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ProgressiveCommandGroupArchive::ArenaDtor(void* object) {
  ProgressiveCommandGroupArchive* _this = reinterpret_cast< ProgressiveCommandGroupArchive* >(object);
  (void)_this;
}
void ProgressiveCommandGroupArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProgressiveCommandGroupArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProgressiveCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ProgressiveCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgressiveCommandGroupArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgressiveCommandGroupArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ProgressiveCommandGroupArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ProgressiveCommandGroupArchive)
  return target;
}

size_t ProgressiveCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ProgressiveCommandGroupArchive)
  size_t total_size = 0;

  // required .TSK.CommandGroupArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgressiveCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProgressiveCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgressiveCommandGroupArchive::GetClassData() const { return &_class_data_; }

void ProgressiveCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProgressiveCommandGroupArchive *>(to)->MergeFrom(
      static_cast<const ProgressiveCommandGroupArchive &>(from));
}


void ProgressiveCommandGroupArchive::MergeFrom(const ProgressiveCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.ProgressiveCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgressiveCommandGroupArchive::CopyFrom(const ProgressiveCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ProgressiveCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressiveCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ProgressiveCommandGroupArchive::InternalSwap(ProgressiveCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgressiveCommandGroupArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[27]);
}

// ===================================================================

class FormatStructArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormatStructArchive>()._has_bits_);
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_custom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_custom_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_requires_fraction_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_control_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_control_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_control_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_control_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_slider_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_slider_position(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_decimal_width(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_min_integer_width(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_num_nonspace_integer_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_num_nonspace_decimal_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_index_from_right_last_integer(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSP::IndexSet& inters_str_insertion_indexes(const FormatStructArchive* msg);
  static void set_has_inters_str_insertion_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_hash_decimal_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_total_num_decimal_digits(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_is_complex(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_contains_integer_token(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_multiple_choice_list_initial_value(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_multiple_choice_list_id(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_use_automatic_duration_units(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSP::UUID& custom_uid(const FormatStructArchive* msg);
  static void set_has_custom_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::CustomFormatArchive& custom_format(const FormatStructArchive* msg);
  static void set_has_custom_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uses_plus_sign(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_bool_true_string(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bool_false_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000100) ^ 0x00000100) != 0;
  }
};

const ::TSP::IndexSet&
FormatStructArchive::_Internal::inters_str_insertion_indexes(const FormatStructArchive* msg) {
  return *msg->inters_str_insertion_indexes_;
}
const ::TSP::UUID&
FormatStructArchive::_Internal::custom_uid(const FormatStructArchive* msg) {
  return *msg->custom_uid_;
}
const ::TSK::CustomFormatArchive&
FormatStructArchive::_Internal::custom_format(const FormatStructArchive* msg) {
  return *msg->custom_format_;
}
void FormatStructArchive::clear_inters_str_insertion_indexes() {
  if (inters_str_insertion_indexes_ != nullptr) inters_str_insertion_indexes_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void FormatStructArchive::clear_custom_uid() {
  if (custom_uid_ != nullptr) custom_uid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
FormatStructArchive::FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  _extensions_(arena),
  interstitial_strings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.FormatStructArchive)
}
FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      interstitial_strings_(from.interstitial_strings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArenaForAllocation());
  }
  date_time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date_time_format()) {
    date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_time_format(), 
      GetArenaForAllocation());
  }
  custom_format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_format_string()) {
    custom_format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_format_string(), 
      GetArenaForAllocation());
  }
  bool_true_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bool_true_string()) {
    bool_true_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bool_true_string(), 
      GetArenaForAllocation());
  }
  bool_false_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bool_false_string()) {
    bool_false_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bool_false_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_inters_str_insertion_indexes()) {
    inters_str_insertion_indexes_ = new ::TSP::IndexSet(*from.inters_str_insertion_indexes_);
  } else {
    inters_str_insertion_indexes_ = nullptr;
  }
  if (from._internal_has_custom_uid()) {
    custom_uid_ = new ::TSP::UUID(*from.custom_uid_);
  } else {
    custom_uid_ = nullptr;
  }
  if (from._internal_has_custom_format()) {
    custom_format_ = new ::TSK::CustomFormatArchive(*from.custom_format_);
  } else {
    custom_format_ = nullptr;
  }
  ::memcpy(&format_type_, &from.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&uses_plus_sign_) -
    reinterpret_cast<char*>(&format_type_)) + sizeof(uses_plus_sign_));
  // @@protoc_insertion_point(copy_constructor:TSK.FormatStructArchive)
}

inline void FormatStructArchive::SharedCtor() {
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_format_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bool_true_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bool_false_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inters_str_insertion_indexes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uses_plus_sign_) -
    reinterpret_cast<char*>(&inters_str_insertion_indexes_)) + sizeof(uses_plus_sign_));
}

FormatStructArchive::~FormatStructArchive() {
  // @@protoc_insertion_point(destructor:TSK.FormatStructArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormatStructArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_time_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_format_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bool_true_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bool_false_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inters_str_insertion_indexes_;
  if (this != internal_default_instance()) delete custom_uid_;
  if (this != internal_default_instance()) delete custom_format_;
}

void FormatStructArchive::ArenaDtor(void* object) {
  FormatStructArchive* _this = reinterpret_cast< FormatStructArchive* >(object);
  (void)_this;
}
void FormatStructArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormatStructArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormatStructArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.FormatStructArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  interstitial_strings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      date_time_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      custom_format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      bool_true_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      bool_false_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(inters_str_insertion_indexes_ != nullptr);
      inters_str_insertion_indexes_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(custom_uid_ != nullptr);
      custom_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(custom_format_ != nullptr);
      custom_format_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&format_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_use_minus_sign_) -
        reinterpret_cast<char*>(&format_type_)) + sizeof(base_use_minus_sign_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&suppress_date_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&control_format_type_) -
        reinterpret_cast<char*>(&suppress_date_format_)) + sizeof(control_format_type_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&control_minimum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_complex_) -
        reinterpret_cast<char*>(&control_minimum_)) + sizeof(is_complex_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&contains_integer_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_num_decimal_digits_) -
        reinterpret_cast<char*>(&contains_integer_token_)) + sizeof(total_num_decimal_digits_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&multiple_choice_list_initial_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uses_plus_sign_) -
        reinterpret_cast<char*>(&multiple_choice_list_initial_value_)) + sizeof(uses_plus_sign_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormatStructArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 format_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_format_type(&_has_bits_);
          format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decimal_places(&_has_bits_);
          decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormatStructArchive.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 negative_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_negative_style(&_has_bits_);
          negative_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_thousands_separator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_show_thousands_separator(&_has_bits_);
          show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_accounting_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_accounting_style(&_has_bits_);
          use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_duration_style(&_has_bits_);
          duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_base(&_has_bits_);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_places = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_base_places(&_has_bits_);
          base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool base_use_minus_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_base_use_minus_sign(&_has_bits_);
          base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fraction_accuracy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fraction_accuracy(&_has_bits_);
          fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_suppress_date_format(&_has_bits_);
          suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_time_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_suppress_time_format(&_has_bits_);
          suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string date_time_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_date_time_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormatStructArchive.date_time_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_unit_largest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_duration_unit_largest(&_has_bits_);
          duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_unit_smallest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_duration_unit_smallest(&_has_bits_);
          duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_custom_id(&_has_bits_);
          custom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_format_string = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_custom_format_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormatStructArchive.custom_format_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double scale_factor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_scale_factor(&_has_bits_);
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool requires_fraction_replacement = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_requires_fraction_replacement(&_has_bits_);
          requires_fraction_replacement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double control_minimum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_control_minimum(&_has_bits_);
          control_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double control_maximum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_control_maximum(&_has_bits_);
          control_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double control_increment = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_control_increment(&_has_bits_);
          control_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 control_format_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_control_format_type(&_has_bits_);
          control_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slider_orientation = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_slider_orientation(&_has_bits_);
          slider_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slider_position = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_slider_position(&_has_bits_);
          slider_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 decimal_width = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_decimal_width(&_has_bits_);
          decimal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_integer_width = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_min_integer_width(&_has_bits_);
          min_integer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_nonspace_integer_digits = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_num_nonspace_integer_digits(&_has_bits_);
          num_nonspace_integer_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_nonspace_decimal_digits = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_num_nonspace_decimal_digits(&_has_bits_);
          num_nonspace_decimal_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 index_from_right_last_integer = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_index_from_right_last_integer(&_has_bits_);
          index_from_right_last_integer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string interstitial_strings = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_interstitial_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormatStructArchive.interstitial_strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inters_str_insertion_indexes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_hash_decimal_digits = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_hash_decimal_digits(&_has_bits_);
          num_hash_decimal_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_num_decimal_digits = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_num_decimal_digits(&_has_bits_);
          total_num_decimal_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_complex = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_complex(&_has_bits_);
          is_complex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contains_integer_token = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_contains_integer_token(&_has_bits_);
          contains_integer_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multiple_choice_list_initial_value = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_multiple_choice_list_initial_value(&_has_bits_);
          multiple_choice_list_initial_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multiple_choice_list_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_multiple_choice_list_id(&_has_bits_);
          multiple_choice_list_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_automatic_duration_units = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_use_automatic_duration_units(&_has_bits_);
          use_automatic_duration_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID custom_uid = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.CustomFormatArchive custom_format = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool uses_plus_sign = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_uses_plus_sign(&_has_bits_);
          uses_plus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bool_true_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_bool_true_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormatStructArchive.bool_true_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bool_false_string = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_bool_false_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.FormatStructArchive.bool_false_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((80000u <= tag && tag < 160000u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormatStructArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.FormatStructArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 format_type = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_duration_style(), target);
  }

  // optional uint32 base = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base(), target);
  }

  // optional uint32 base_places = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time_format().data(), static_cast<int>(this->_internal_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.date_time_format");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duration_unit_smallest(), target);
  }

  // optional uint32 custom_id = 17;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_custom_id(), target);
  }

  // optional string custom_format_string = 18;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_format_string().data(), static_cast<int>(this->_internal_custom_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.custom_format_string");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_custom_format_string(), target);
  }

  // optional double scale_factor = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_scale_factor(), target);
  }

  // optional bool requires_fraction_replacement = 20;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_requires_fraction_replacement(), target);
  }

  // optional double control_minimum = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_control_minimum(), target);
  }

  // optional double control_maximum = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_control_maximum(), target);
  }

  // optional double control_increment = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_control_increment(), target);
  }

  // optional uint32 control_format_type = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_control_format_type(), target);
  }

  // optional uint32 slider_orientation = 25;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_slider_orientation(), target);
  }

  // optional uint32 slider_position = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_slider_position(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 decimal_width = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_decimal_width(), target);
  }

  // optional uint32 min_integer_width = 28;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_min_integer_width(), target);
  }

  // optional uint32 num_nonspace_integer_digits = 29;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_num_nonspace_integer_digits(), target);
  }

  // optional uint32 num_nonspace_decimal_digits = 30;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_num_nonspace_decimal_digits(), target);
  }

  // optional uint32 index_from_right_last_integer = 31;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_index_from_right_last_integer(), target);
  }

  // repeated string interstitial_strings = 32;
  for (int i = 0, n = this->_internal_interstitial_strings_size(); i < n; i++) {
    const auto& s = this->_internal_interstitial_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.interstitial_strings");
    target = stream->WriteString(32, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::inters_str_insertion_indexes(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_hash_decimal_digits = 34;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_num_hash_decimal_digits(), target);
  }

  // optional uint32 total_num_decimal_digits = 35;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_total_num_decimal_digits(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_complex = 36;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_is_complex(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool contains_integer_token = 37;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_contains_integer_token(), target);
  }

  // optional uint32 multiple_choice_list_initial_value = 38;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_multiple_choice_list_initial_value(), target);
  }

  // optional uint32 multiple_choice_list_id = 39;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_multiple_choice_list_id(), target);
  }

  // optional bool use_automatic_duration_units = 40;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_use_automatic_duration_units(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID custom_uid = 41;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::custom_uid(this), target, stream);
  }

  // optional .TSK.CustomFormatArchive custom_format = 42;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::custom_format(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool uses_plus_sign = 43;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_uses_plus_sign(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string bool_true_string = 44;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bool_true_string().data(), static_cast<int>(this->_internal_bool_true_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.bool_true_string");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_bool_true_string(), target);
  }

  // optional string bool_false_string = 45;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bool_false_string().data(), static_cast<int>(this->_internal_bool_false_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.FormatStructArchive.bool_false_string");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_bool_false_string(), target);
  }

  // Extension range [10000, 20000)
  target = _extensions_._InternalSerialize(
      10000, 20000, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.FormatStructArchive)
  return target;
}

size_t FormatStructArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.FormatStructArchive)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required uint32 format_type = 1;
  if (_internal_has_format_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_format_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string interstitial_strings = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(interstitial_strings_.size());
  for (int i = 0, n = interstitial_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      interstitial_strings_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string date_time_format = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time_format());
    }

    // optional string custom_format_string = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_format_string());
    }

    // optional string bool_true_string = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bool_true_string());
    }

    // optional string bool_false_string = 45;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bool_false_string());
    }

    // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inters_str_insertion_indexes_);
    }

    // optional .TSP.UUID custom_uid = 41;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_uid_);
    }

    // optional .TSK.CustomFormatArchive custom_format = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_format_);
    }

  }
  if (cached_has_bits & 0x0000fe00u) {
    // optional uint32 decimal_places = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_decimal_places());
    }

    // optional uint32 negative_style = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_negative_style());
    }

    // optional uint32 duration_style = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_style());
    }

    // optional uint32 base = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base());
    }

    // optional bool show_thousands_separator = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool use_accounting_style = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool base_use_minus_sign = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool suppress_date_format = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional uint32 base_places = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_places());
    }

    // optional uint32 fraction_accuracy = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fraction_accuracy());
    }

    // optional uint32 duration_unit_largest = 15;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_smallest());
    }

    // optional double scale_factor = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional uint32 custom_id = 17;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_id());
    }

    // optional uint32 control_format_type = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_control_format_type());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double control_minimum = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double control_maximum = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double control_increment = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional uint32 slider_orientation = 25;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slider_orientation());
    }

    // optional uint32 slider_position = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slider_position());
    }

    // optional bool suppress_time_format = 13;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 1;
    }

    // optional bool requires_fraction_replacement = 20;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_complex = 36;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool contains_integer_token = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional uint32 decimal_width = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_decimal_width());
    }

    // optional uint32 min_integer_width = 28;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_integer_width());
    }

    // optional uint32 num_nonspace_integer_digits = 29;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_nonspace_integer_digits());
    }

    // optional uint32 num_nonspace_decimal_digits = 30;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_nonspace_decimal_digits());
    }

    // optional uint32 index_from_right_last_integer = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index_from_right_last_integer());
    }

    // optional uint32 num_hash_decimal_digits = 34;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_hash_decimal_digits());
    }

    // optional uint32 total_num_decimal_digits = 35;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_num_decimal_digits());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 multiple_choice_list_initial_value = 38;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multiple_choice_list_initial_value());
    }

    // optional uint32 multiple_choice_list_id = 39;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multiple_choice_list_id());
    }

    // optional bool use_automatic_duration_units = 40;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool uses_plus_sign = 43;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormatStructArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormatStructArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormatStructArchive::GetClassData() const { return &_class_data_; }

void FormatStructArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FormatStructArchive *>(to)->MergeFrom(
      static_cast<const FormatStructArchive &>(from));
}


void FormatStructArchive::MergeFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.FormatStructArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interstitial_strings_.MergeFrom(from.interstitial_strings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_date_time_format(from._internal_date_time_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_custom_format_string(from._internal_custom_format_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_bool_true_string(from._internal_bool_true_string());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_bool_false_string(from._internal_bool_false_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_inters_str_insertion_indexes()->::TSP::IndexSet::MergeFrom(from._internal_inters_str_insertion_indexes());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_custom_uid()->::TSP::UUID::MergeFrom(from._internal_custom_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_custom_format()->::TSK::CustomFormatArchive::MergeFrom(from._internal_custom_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      format_type_ = from.format_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      decimal_places_ = from.decimal_places_;
    }
    if (cached_has_bits & 0x00000400u) {
      negative_style_ = from.negative_style_;
    }
    if (cached_has_bits & 0x00000800u) {
      duration_style_ = from.duration_style_;
    }
    if (cached_has_bits & 0x00001000u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00002000u) {
      show_thousands_separator_ = from.show_thousands_separator_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_accounting_style_ = from.use_accounting_style_;
    }
    if (cached_has_bits & 0x00008000u) {
      base_use_minus_sign_ = from.base_use_minus_sign_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      suppress_date_format_ = from.suppress_date_format_;
    }
    if (cached_has_bits & 0x00020000u) {
      base_places_ = from.base_places_;
    }
    if (cached_has_bits & 0x00040000u) {
      fraction_accuracy_ = from.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00080000u) {
      duration_unit_largest_ = from.duration_unit_largest_;
    }
    if (cached_has_bits & 0x00100000u) {
      duration_unit_smallest_ = from.duration_unit_smallest_;
    }
    if (cached_has_bits & 0x00200000u) {
      scale_factor_ = from.scale_factor_;
    }
    if (cached_has_bits & 0x00400000u) {
      custom_id_ = from.custom_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      control_format_type_ = from.control_format_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      control_minimum_ = from.control_minimum_;
    }
    if (cached_has_bits & 0x02000000u) {
      control_maximum_ = from.control_maximum_;
    }
    if (cached_has_bits & 0x04000000u) {
      control_increment_ = from.control_increment_;
    }
    if (cached_has_bits & 0x08000000u) {
      slider_orientation_ = from.slider_orientation_;
    }
    if (cached_has_bits & 0x10000000u) {
      slider_position_ = from.slider_position_;
    }
    if (cached_has_bits & 0x20000000u) {
      suppress_time_format_ = from.suppress_time_format_;
    }
    if (cached_has_bits & 0x40000000u) {
      requires_fraction_replacement_ = from.requires_fraction_replacement_;
    }
    if (cached_has_bits & 0x80000000u) {
      is_complex_ = from.is_complex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      contains_integer_token_ = from.contains_integer_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      decimal_width_ = from.decimal_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_integer_width_ = from.min_integer_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_nonspace_integer_digits_ = from.num_nonspace_integer_digits_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_nonspace_decimal_digits_ = from.num_nonspace_decimal_digits_;
    }
    if (cached_has_bits & 0x00000020u) {
      index_from_right_last_integer_ = from.index_from_right_last_integer_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_hash_decimal_digits_ = from.num_hash_decimal_digits_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_num_decimal_digits_ = from.total_num_decimal_digits_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      multiple_choice_list_initial_value_ = from.multiple_choice_list_initial_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      multiple_choice_list_id_ = from.multiple_choice_list_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_automatic_duration_units_ = from.use_automatic_duration_units_;
    }
    if (cached_has_bits & 0x00000800u) {
      uses_plus_sign_ = from.uses_plus_sign_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.FormatStructArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_inters_str_insertion_indexes()) {
    if (!inters_str_insertion_indexes_->IsInitialized()) return false;
  }
  if (_internal_has_custom_uid()) {
    if (!custom_uid_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format()) {
    if (!custom_format_->IsInitialized()) return false;
  }
  return true;
}

void FormatStructArchive::InternalSwap(FormatStructArchive* other) {
  using std::swap;
  _extensions_.InternalSwap(&other->_extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  interstitial_strings_.InternalSwap(&other->interstitial_strings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_code_, GetArenaForAllocation(),
      &other->currency_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &date_time_format_, GetArenaForAllocation(),
      &other->date_time_format_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_format_string_, GetArenaForAllocation(),
      &other->custom_format_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bool_true_string_, GetArenaForAllocation(),
      &other->bool_true_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bool_false_string_, GetArenaForAllocation(),
      &other->bool_false_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormatStructArchive, uses_plus_sign_)
      + sizeof(FormatStructArchive::uses_plus_sign_)
      - PROTOBUF_FIELD_OFFSET(FormatStructArchive, inters_str_insertion_indexes_)>(
          reinterpret_cast<char*>(&inters_str_insertion_indexes_),
          reinterpret_cast<char*>(&other->inters_str_insertion_indexes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormatStructArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[28]);
}

// ===================================================================

class CustomFormatArchive_Condition::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomFormatArchive_Condition>()._has_bits_);
  static void set_has_condition_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_condition_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& condition_format(const CustomFormatArchive_Condition* msg);
  static void set_has_condition_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_condition_value_dbl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
CustomFormatArchive_Condition::_Internal::condition_format(const CustomFormatArchive_Condition* msg) {
  return *msg->condition_format_;
}
CustomFormatArchive_Condition::CustomFormatArchive_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CustomFormatArchive.Condition)
}
CustomFormatArchive_Condition::CustomFormatArchive_Condition(const CustomFormatArchive_Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition_format()) {
    condition_format_ = new ::TSK::FormatStructArchive(*from.condition_format_);
  } else {
    condition_format_ = nullptr;
  }
  ::memcpy(&condition_type_, &from.condition_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&condition_value_dbl_) -
    reinterpret_cast<char*>(&condition_type_)) + sizeof(condition_value_dbl_));
  // @@protoc_insertion_point(copy_constructor:TSK.CustomFormatArchive.Condition)
}

inline void CustomFormatArchive_Condition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&condition_format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&condition_value_dbl_) -
    reinterpret_cast<char*>(&condition_format_)) + sizeof(condition_value_dbl_));
}

CustomFormatArchive_Condition::~CustomFormatArchive_Condition() {
  // @@protoc_insertion_point(destructor:TSK.CustomFormatArchive.Condition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CustomFormatArchive_Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete condition_format_;
}

void CustomFormatArchive_Condition::ArenaDtor(void* object) {
  CustomFormatArchive_Condition* _this = reinterpret_cast< CustomFormatArchive_Condition* >(object);
  (void)_this;
}
void CustomFormatArchive_Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomFormatArchive_Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomFormatArchive_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CustomFormatArchive.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(condition_format_ != nullptr);
    condition_format_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&condition_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&condition_value_dbl_) -
        reinterpret_cast<char*>(&condition_type_)) + sizeof(condition_value_dbl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFormatArchive_Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 condition_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_condition_type(&has_bits);
          condition_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float condition_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_condition_value(&has_bits);
          condition_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive condition_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double condition_value_dbl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_condition_value_dbl(&has_bits);
          condition_value_dbl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomFormatArchive_Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CustomFormatArchive.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 condition_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_condition_type(), target);
  }

  // optional float condition_value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_condition_value(), target);
  }

  // required .TSK.FormatStructArchive condition_format = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::condition_format(this), target, stream);
  }

  // optional double condition_value_dbl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_condition_value_dbl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CustomFormatArchive.Condition)
  return target;
}

size_t CustomFormatArchive_Condition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CustomFormatArchive.Condition)
  size_t total_size = 0;

  if (_internal_has_condition_format()) {
    // required .TSK.FormatStructArchive condition_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_format_);
  }

  if (_internal_has_condition_type()) {
    // required uint32 condition_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_type());
  }

  return total_size;
}
size_t CustomFormatArchive_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CustomFormatArchive.Condition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.FormatStructArchive condition_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_format_);

    // required uint32 condition_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_condition_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional float condition_value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional double condition_value_dbl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFormatArchive_Condition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomFormatArchive_Condition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFormatArchive_Condition::GetClassData() const { return &_class_data_; }

void CustomFormatArchive_Condition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CustomFormatArchive_Condition *>(to)->MergeFrom(
      static_cast<const CustomFormatArchive_Condition &>(from));
}


void CustomFormatArchive_Condition::MergeFrom(const CustomFormatArchive_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CustomFormatArchive.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_condition_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_condition_format());
    }
    if (cached_has_bits & 0x00000002u) {
      condition_type_ = from.condition_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      condition_value_ = from.condition_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      condition_value_dbl_ = from.condition_value_dbl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFormatArchive_Condition::CopyFrom(const CustomFormatArchive_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CustomFormatArchive.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatArchive_Condition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_condition_format()) {
    if (!condition_format_->IsInitialized()) return false;
  }
  return true;
}

void CustomFormatArchive_Condition::InternalSwap(CustomFormatArchive_Condition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomFormatArchive_Condition, condition_value_dbl_)
      + sizeof(CustomFormatArchive_Condition::condition_value_dbl_)
      - PROTOBUF_FIELD_OFFSET(CustomFormatArchive_Condition, condition_format_)>(
          reinterpret_cast<char*>(&condition_format_),
          reinterpret_cast<char*>(&other->condition_format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFormatArchive_Condition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[29]);
}

// ===================================================================

class CustomFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomFormatArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_type_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& default_format(const CustomFormatArchive* msg);
  static void set_has_default_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::FormatStructArchive&
CustomFormatArchive::_Internal::default_format(const CustomFormatArchive* msg) {
  return *msg->default_format_;
}
CustomFormatArchive::CustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  conditions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CustomFormatArchive)
}
CustomFormatArchive::CustomFormatArchive(const CustomFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_default_format()) {
    default_format_ = new ::TSK::FormatStructArchive(*from.default_format_);
  } else {
    default_format_ = nullptr;
  }
  ::memcpy(&format_type_pre_bnc_, &from.format_type_pre_bnc_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_type_) -
    reinterpret_cast<char*>(&format_type_pre_bnc_)) + sizeof(format_type_));
  // @@protoc_insertion_point(copy_constructor:TSK.CustomFormatArchive)
}

inline void CustomFormatArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_type_) -
    reinterpret_cast<char*>(&default_format_)) + sizeof(format_type_));
}

CustomFormatArchive::~CustomFormatArchive() {
  // @@protoc_insertion_point(destructor:TSK.CustomFormatArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CustomFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_format_;
}

void CustomFormatArchive::ArenaDtor(void* object) {
  CustomFormatArchive* _this = reinterpret_cast< CustomFormatArchive* >(object);
  (void)_this;
}
void CustomFormatArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomFormatArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CustomFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(default_format_ != nullptr);
      default_format_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&format_type_pre_bnc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_type_) -
        reinterpret_cast<char*>(&format_type_pre_bnc_)) + sizeof(format_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFormatArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CustomFormatArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 format_type_pre_bnc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_format_type_pre_bnc(&has_bits);
          format_type_pre_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive default_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 format_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_format_type(&has_bits);
          format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomFormatArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CustomFormatArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CustomFormatArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 format_type_pre_bnc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_format_type_pre_bnc(), target);
  }

  // required .TSK.FormatStructArchive default_format = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::default_format(this), target, stream);
  }

  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_conditions(i), target, stream);
  }

  // optional uint32 format_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_format_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CustomFormatArchive)
  return target;
}

size_t CustomFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CustomFormatArchive)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_default_format()) {
    // required .TSK.FormatStructArchive default_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_format_);
  }

  if (_internal_has_format_type_pre_bnc()) {
    // required uint32 format_type_pre_bnc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_format_type_pre_bnc());
  }

  return total_size;
}
size_t CustomFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CustomFormatArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .TSK.FormatStructArchive default_format = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_format_);

    // required uint32 format_type_pre_bnc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_format_type_pre_bnc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 format_type = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_format_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFormatArchive::GetClassData() const { return &_class_data_; }

void CustomFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CustomFormatArchive *>(to)->MergeFrom(
      static_cast<const CustomFormatArchive &>(from));
}


void CustomFormatArchive::MergeFrom(const CustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CustomFormatArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_default_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_default_format());
    }
    if (cached_has_bits & 0x00000004u) {
      format_type_pre_bnc_ = from.format_type_pre_bnc_;
    }
    if (cached_has_bits & 0x00000008u) {
      format_type_ = from.format_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFormatArchive::CopyFrom(const CustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CustomFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(conditions_)) return false;
  if (_internal_has_default_format()) {
    if (!default_format_->IsInitialized()) return false;
  }
  return true;
}

void CustomFormatArchive::InternalSwap(CustomFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conditions_.InternalSwap(&other->conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomFormatArchive, format_type_)
      + sizeof(CustomFormatArchive::format_type_)
      - PROTOBUF_FIELD_OFFSET(CustomFormatArchive, default_format_)>(
          reinterpret_cast<char*>(&default_format_),
          reinterpret_cast<char*>(&other->default_format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFormatArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[30]);
}

// ===================================================================

class CustomFormatListArchive::_Internal {
 public:
};

void CustomFormatListArchive::clear_uuids() {
  uuids_.Clear();
}
CustomFormatListArchive::CustomFormatListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uuids_(arena),
  custom_formats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CustomFormatListArchive)
}
CustomFormatListArchive::CustomFormatListArchive(const CustomFormatListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uuids_(from.uuids_),
      custom_formats_(from.custom_formats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.CustomFormatListArchive)
}

inline void CustomFormatListArchive::SharedCtor() {
}

CustomFormatListArchive::~CustomFormatListArchive() {
  // @@protoc_insertion_point(destructor:TSK.CustomFormatListArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CustomFormatListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomFormatListArchive::ArenaDtor(void* object) {
  CustomFormatListArchive* _this = reinterpret_cast< CustomFormatListArchive* >(object);
  (void)_this;
}
void CustomFormatListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomFormatListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomFormatListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CustomFormatListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuids_.Clear();
  custom_formats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomFormatListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.CustomFormatArchive custom_formats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomFormatListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CustomFormatListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uuids(i), target, stream);
  }

  // repeated .TSK.CustomFormatArchive custom_formats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_formats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_custom_formats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CustomFormatListArchive)
  return target;
}

size_t CustomFormatListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CustomFormatListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1UL * this->_internal_uuids_size();
  for (const auto& msg : this->uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.CustomFormatArchive custom_formats = 2;
  total_size += 1UL * this->_internal_custom_formats_size();
  for (const auto& msg : this->custom_formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomFormatListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomFormatListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomFormatListArchive::GetClassData() const { return &_class_data_; }

void CustomFormatListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CustomFormatListArchive *>(to)->MergeFrom(
      static_cast<const CustomFormatListArchive &>(from));
}


void CustomFormatListArchive::MergeFrom(const CustomFormatListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CustomFormatListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuids_.MergeFrom(from.uuids_);
  custom_formats_.MergeFrom(from.custom_formats_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomFormatListArchive::CopyFrom(const CustomFormatListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CustomFormatListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomFormatListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(custom_formats_)) return false;
  return true;
}

void CustomFormatListArchive::InternalSwap(CustomFormatListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uuids_.InternalSwap(&other->uuids_);
  custom_formats_.InternalSwap(&other->custom_formats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomFormatListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[31]);
}

// ===================================================================

class AnnotationAuthorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotationAuthorArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Color& color(const AnnotationAuthorArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_public_author(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Color&
AnnotationAuthorArchive::_Internal::color(const AnnotationAuthorArchive* msg) {
  return *msg->color_;
}
void AnnotationAuthorArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AnnotationAuthorArchive::AnnotationAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.AnnotationAuthorArchive)
}
AnnotationAuthorArchive::AnnotationAuthorArchive(const AnnotationAuthorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_id()) {
    public_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  is_public_author_ = from.is_public_author_;
  // @@protoc_insertion_point(copy_constructor:TSK.AnnotationAuthorArchive)
}

inline void AnnotationAuthorArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_public_author_) -
    reinterpret_cast<char*>(&color_)) + sizeof(is_public_author_));
}

AnnotationAuthorArchive::~AnnotationAuthorArchive() {
  // @@protoc_insertion_point(destructor:TSK.AnnotationAuthorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnnotationAuthorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
}

void AnnotationAuthorArchive::ArenaDtor(void* object) {
  AnnotationAuthorArchive* _this = reinterpret_cast< AnnotationAuthorArchive* >(object);
  (void)_this;
}
void AnnotationAuthorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationAuthorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationAuthorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AnnotationAuthorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      public_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
  }
  is_public_author_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationAuthorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.AnnotationAuthorArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string public_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.AnnotationAuthorArchive.public_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_public_author = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_public_author(&has_bits);
          is_public_author_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationAuthorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AnnotationAuthorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AnnotationAuthorArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  // optional string public_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AnnotationAuthorArchive.public_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_id(), target);
  }

  // optional bool is_public_author = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_public_author(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AnnotationAuthorArchive)
  return target;
}

size_t AnnotationAuthorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AnnotationAuthorArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string public_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_public_id());
    }

    // optional .TSP.Color color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional bool is_public_author = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationAuthorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationAuthorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationAuthorArchive::GetClassData() const { return &_class_data_; }

void AnnotationAuthorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnnotationAuthorArchive *>(to)->MergeFrom(
      static_cast<const AnnotationAuthorArchive &>(from));
}


void AnnotationAuthorArchive::MergeFrom(const AnnotationAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.AnnotationAuthorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_public_id(from._internal_public_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      is_public_author_ = from.is_public_author_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationAuthorArchive::CopyFrom(const AnnotationAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AnnotationAuthorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationAuthorArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void AnnotationAuthorArchive::InternalSwap(AnnotationAuthorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_id_, GetArenaForAllocation(),
      &other->public_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnnotationAuthorArchive, is_public_author_)
      + sizeof(AnnotationAuthorArchive::is_public_author_)
      - PROTOBUF_FIELD_OFFSET(AnnotationAuthorArchive, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationAuthorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[32]);
}

// ===================================================================

class DeprecatedChangeAuthorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecatedChangeAuthorArchive>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Color& change_color(const DeprecatedChangeAuthorArchive* msg);
  static void set_has_change_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Color&
DeprecatedChangeAuthorArchive::_Internal::change_color(const DeprecatedChangeAuthorArchive* msg) {
  return *msg->change_color_;
}
void DeprecatedChangeAuthorArchive::clear_change_color() {
  if (change_color_ != nullptr) change_color_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DeprecatedChangeAuthorArchive)
}
DeprecatedChangeAuthorArchive::DeprecatedChangeAuthorArchive(const DeprecatedChangeAuthorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_change_color()) {
    change_color_ = new ::TSP::Color(*from.change_color_);
  } else {
    change_color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.DeprecatedChangeAuthorArchive)
}

inline void DeprecatedChangeAuthorArchive::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
change_color_ = nullptr;
}

DeprecatedChangeAuthorArchive::~DeprecatedChangeAuthorArchive() {
  // @@protoc_insertion_point(destructor:TSK.DeprecatedChangeAuthorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeprecatedChangeAuthorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete change_color_;
}

void DeprecatedChangeAuthorArchive::ArenaDtor(void* object) {
  DeprecatedChangeAuthorArchive* _this = reinterpret_cast< DeprecatedChangeAuthorArchive* >(object);
  (void)_this;
}
void DeprecatedChangeAuthorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeprecatedChangeAuthorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeprecatedChangeAuthorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DeprecatedChangeAuthorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_color_ != nullptr);
      change_color_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecatedChangeAuthorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.DeprecatedChangeAuthorArchive.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color change_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeprecatedChangeAuthorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DeprecatedChangeAuthorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.DeprecatedChangeAuthorArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Color change_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::change_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DeprecatedChangeAuthorArchive)
  return target;
}

size_t DeprecatedChangeAuthorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DeprecatedChangeAuthorArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .TSP.Color change_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_color_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeprecatedChangeAuthorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeprecatedChangeAuthorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeprecatedChangeAuthorArchive::GetClassData() const { return &_class_data_; }

void DeprecatedChangeAuthorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeprecatedChangeAuthorArchive *>(to)->MergeFrom(
      static_cast<const DeprecatedChangeAuthorArchive &>(from));
}


void DeprecatedChangeAuthorArchive::MergeFrom(const DeprecatedChangeAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DeprecatedChangeAuthorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_change_color()->::TSP::Color::MergeFrom(from._internal_change_color());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeprecatedChangeAuthorArchive::CopyFrom(const DeprecatedChangeAuthorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DeprecatedChangeAuthorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedChangeAuthorArchive::IsInitialized() const {
  if (_internal_has_change_color()) {
    if (!change_color_->IsInitialized()) return false;
  }
  return true;
}

void DeprecatedChangeAuthorArchive::InternalSwap(DeprecatedChangeAuthorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(change_color_, other->change_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedChangeAuthorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[33]);
}

// ===================================================================

class AnnotationAuthorStorageArchive::_Internal {
 public:
};

void AnnotationAuthorStorageArchive::clear_annotation_author() {
  annotation_author_.Clear();
}
AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotation_author_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.AnnotationAuthorStorageArchive)
}
AnnotationAuthorStorageArchive::AnnotationAuthorStorageArchive(const AnnotationAuthorStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      annotation_author_(from.annotation_author_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.AnnotationAuthorStorageArchive)
}

inline void AnnotationAuthorStorageArchive::SharedCtor() {
}

AnnotationAuthorStorageArchive::~AnnotationAuthorStorageArchive() {
  // @@protoc_insertion_point(destructor:TSK.AnnotationAuthorStorageArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnnotationAuthorStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnnotationAuthorStorageArchive::ArenaDtor(void* object) {
  AnnotationAuthorStorageArchive* _this = reinterpret_cast< AnnotationAuthorStorageArchive* >(object);
  (void)_this;
}
void AnnotationAuthorStorageArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnnotationAuthorStorageArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotationAuthorStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AnnotationAuthorStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_author_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnnotationAuthorStorageArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference annotation_author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_author(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationAuthorStorageArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AnnotationAuthorStorageArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference annotation_author = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_author_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_annotation_author(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AnnotationAuthorStorageArchive)
  return target;
}

size_t AnnotationAuthorStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AnnotationAuthorStorageArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference annotation_author = 1;
  total_size += 1UL * this->_internal_annotation_author_size();
  for (const auto& msg : this->annotation_author_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnnotationAuthorStorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnnotationAuthorStorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnnotationAuthorStorageArchive::GetClassData() const { return &_class_data_; }

void AnnotationAuthorStorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnnotationAuthorStorageArchive *>(to)->MergeFrom(
      static_cast<const AnnotationAuthorStorageArchive &>(from));
}


void AnnotationAuthorStorageArchive::MergeFrom(const AnnotationAuthorStorageArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.AnnotationAuthorStorageArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_author_.MergeFrom(from.annotation_author_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnnotationAuthorStorageArchive::CopyFrom(const AnnotationAuthorStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AnnotationAuthorStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationAuthorStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(annotation_author_)) return false;
  return true;
}

void AnnotationAuthorStorageArchive::InternalSwap(AnnotationAuthorStorageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  annotation_author_.InternalSwap(&other->annotation_author_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationAuthorStorageArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[34]);
}

// ===================================================================

class SetAnnotationAuthorColorCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetAnnotationAuthorColorCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& annotation_author(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_annotation_author(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Color& color(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Color& old_color(const SetAnnotationAuthorColorCommandArchive* msg);
  static void set_has_old_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
SetAnnotationAuthorColorCommandArchive::_Internal::super(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->super_;
}
const ::TSP::Reference&
SetAnnotationAuthorColorCommandArchive::_Internal::annotation_author(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->annotation_author_;
}
const ::TSP::Color&
SetAnnotationAuthorColorCommandArchive::_Internal::color(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->color_;
}
const ::TSP::Color&
SetAnnotationAuthorColorCommandArchive::_Internal::old_color(const SetAnnotationAuthorColorCommandArchive* msg) {
  return *msg->old_color_;
}
void SetAnnotationAuthorColorCommandArchive::clear_annotation_author() {
  if (annotation_author_ != nullptr) annotation_author_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SetAnnotationAuthorColorCommandArchive::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SetAnnotationAuthorColorCommandArchive::clear_old_color() {
  if (old_color_ != nullptr) old_color_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.SetAnnotationAuthorColorCommandArchive)
}
SetAnnotationAuthorColorCommandArchive::SetAnnotationAuthorColorCommandArchive(const SetAnnotationAuthorColorCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_annotation_author()) {
    annotation_author_ = new ::TSP::Reference(*from.annotation_author_);
  } else {
    annotation_author_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::TSP::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_old_color()) {
    old_color_ = new ::TSP::Color(*from.old_color_);
  } else {
    old_color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.SetAnnotationAuthorColorCommandArchive)
}

inline void SetAnnotationAuthorColorCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_color_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_color_));
}

SetAnnotationAuthorColorCommandArchive::~SetAnnotationAuthorColorCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.SetAnnotationAuthorColorCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAnnotationAuthorColorCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete annotation_author_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete old_color_;
}

void SetAnnotationAuthorColorCommandArchive::ArenaDtor(void* object) {
  SetAnnotationAuthorColorCommandArchive* _this = reinterpret_cast< SetAnnotationAuthorColorCommandArchive* >(object);
  (void)_this;
}
void SetAnnotationAuthorColorCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAnnotationAuthorColorCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAnnotationAuthorColorCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SetAnnotationAuthorColorCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(annotation_author_ != nullptr);
      annotation_author_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_color_ != nullptr);
      old_color_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAnnotationAuthorColorCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference annotation_author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color old_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAnnotationAuthorColorCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SetAnnotationAuthorColorCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional .TSP.Reference annotation_author = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotation_author(this), target, stream);
  }

  // optional .TSP.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // optional .TSP.Color old_color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::old_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SetAnnotationAuthorColorCommandArchive)
  return target;
}

size_t SetAnnotationAuthorColorCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SetAnnotationAuthorColorCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference annotation_author = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *annotation_author_);
    }

    // optional .TSP.Color color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .TSP.Color old_color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *old_color_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAnnotationAuthorColorCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAnnotationAuthorColorCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAnnotationAuthorColorCommandArchive::GetClassData() const { return &_class_data_; }

void SetAnnotationAuthorColorCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetAnnotationAuthorColorCommandArchive *>(to)->MergeFrom(
      static_cast<const SetAnnotationAuthorColorCommandArchive &>(from));
}


void SetAnnotationAuthorColorCommandArchive::MergeFrom(const SetAnnotationAuthorColorCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.SetAnnotationAuthorColorCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_annotation_author()->::TSP::Reference::MergeFrom(from._internal_annotation_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color()->::TSP::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_old_color()->::TSP::Color::MergeFrom(from._internal_old_color());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAnnotationAuthorColorCommandArchive::CopyFrom(const SetAnnotationAuthorColorCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SetAnnotationAuthorColorCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAnnotationAuthorColorCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_annotation_author()) {
    if (!annotation_author_->IsInitialized()) return false;
  }
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  if (_internal_has_old_color()) {
    if (!old_color_->IsInitialized()) return false;
  }
  return true;
}

void SetAnnotationAuthorColorCommandArchive::InternalSwap(SetAnnotationAuthorColorCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, old_color_)
      + sizeof(SetAnnotationAuthorColorCommandArchive::old_color_)
      - PROTOBUF_FIELD_OFFSET(SetAnnotationAuthorColorCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAnnotationAuthorColorCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[35]);
}

// ===================================================================

class CommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSelectionBehaviorArchive>()._has_bits_);
  static const ::TSK::SelectionPathArchive& archived_selection(const CommandSelectionBehaviorArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::SelectionPathArchive& archived_old_selection(const CommandSelectionBehaviorArchive* msg);
  static void set_has_archived_old_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::SelectionPathArchive& archived_new_selection(const CommandSelectionBehaviorArchive* msg);
  static void set_has_archived_new_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_additional_forward_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_additional_reverse_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& forward_selection_path_transformer(const CommandSelectionBehaviorArchive* msg);
  static void set_has_forward_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& reverse_selection_path_transformer(const CommandSelectionBehaviorArchive* msg);
  static void set_has_reverse_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSK::SelectionPathArchive&
CommandSelectionBehaviorArchive::_Internal::archived_selection(const CommandSelectionBehaviorArchive* msg) {
  return *msg->archived_selection_;
}
const ::TSK::SelectionPathArchive&
CommandSelectionBehaviorArchive::_Internal::archived_old_selection(const CommandSelectionBehaviorArchive* msg) {
  return *msg->archived_old_selection_;
}
const ::TSK::SelectionPathArchive&
CommandSelectionBehaviorArchive::_Internal::archived_new_selection(const CommandSelectionBehaviorArchive* msg) {
  return *msg->archived_new_selection_;
}
const ::TSP::Reference&
CommandSelectionBehaviorArchive::_Internal::forward_selection_path_transformer(const CommandSelectionBehaviorArchive* msg) {
  return *msg->forward_selection_path_transformer_;
}
const ::TSP::Reference&
CommandSelectionBehaviorArchive::_Internal::reverse_selection_path_transformer(const CommandSelectionBehaviorArchive* msg) {
  return *msg->reverse_selection_path_transformer_;
}
void CommandSelectionBehaviorArchive::clear_forward_selection_path_transformer() {
  if (forward_selection_path_transformer_ != nullptr) forward_selection_path_transformer_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CommandSelectionBehaviorArchive::clear_reverse_selection_path_transformer() {
  if (reverse_selection_path_transformer_ != nullptr) reverse_selection_path_transformer_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CommandSelectionBehaviorArchive::clear_additional_selection_behaviors() {
  additional_selection_behaviors_.Clear();
}
CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_selection_behaviors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CommandSelectionBehaviorArchive)
}
CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(const CommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_selection_behaviors_(from.additional_selection_behaviors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_archived_old_selection()) {
    archived_old_selection_ = new ::TSK::SelectionPathArchive(*from.archived_old_selection_);
  } else {
    archived_old_selection_ = nullptr;
  }
  if (from._internal_has_archived_new_selection()) {
    archived_new_selection_ = new ::TSK::SelectionPathArchive(*from.archived_new_selection_);
  } else {
    archived_new_selection_ = nullptr;
  }
  if (from._internal_has_forward_selection_path_transformer()) {
    forward_selection_path_transformer_ = new ::TSP::Reference(*from.forward_selection_path_transformer_);
  } else {
    forward_selection_path_transformer_ = nullptr;
  }
  if (from._internal_has_reverse_selection_path_transformer()) {
    reverse_selection_path_transformer_ = new ::TSP::Reference(*from.reverse_selection_path_transformer_);
  } else {
    reverse_selection_path_transformer_ = nullptr;
  }
  if (from._internal_has_archived_selection()) {
    archived_selection_ = new ::TSK::SelectionPathArchive(*from.archived_selection_);
  } else {
    archived_selection_ = nullptr;
  }
  ::memcpy(&selection_flags_, &from.selection_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&additional_reverse_selection_flags_) -
    reinterpret_cast<char*>(&selection_flags_)) + sizeof(additional_reverse_selection_flags_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandSelectionBehaviorArchive)
}

inline void CommandSelectionBehaviorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&archived_old_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&additional_reverse_selection_flags_) -
    reinterpret_cast<char*>(&archived_old_selection_)) + sizeof(additional_reverse_selection_flags_));
}

CommandSelectionBehaviorArchive::~CommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandSelectionBehaviorArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete archived_old_selection_;
  if (this != internal_default_instance()) delete archived_new_selection_;
  if (this != internal_default_instance()) delete forward_selection_path_transformer_;
  if (this != internal_default_instance()) delete reverse_selection_path_transformer_;
  if (this != internal_default_instance()) delete archived_selection_;
}

void CommandSelectionBehaviorArchive::ArenaDtor(void* object) {
  CommandSelectionBehaviorArchive* _this = reinterpret_cast< CommandSelectionBehaviorArchive* >(object);
  (void)_this;
}
void CommandSelectionBehaviorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_selection_behaviors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(archived_old_selection_ != nullptr);
      archived_old_selection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(archived_new_selection_ != nullptr);
      archived_new_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forward_selection_path_transformer_ != nullptr);
      forward_selection_path_transformer_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reverse_selection_path_transformer_ != nullptr);
      reverse_selection_path_transformer_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(archived_selection_ != nullptr);
      archived_selection_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&additional_reverse_selection_flags_) -
        reinterpret_cast<char*>(&selection_flags_)) + sizeof(additional_reverse_selection_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.SelectionPathArchive archived_old_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_old_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive archived_new_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_new_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 selection_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_selection_flags(&has_bits);
          selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 additional_forward_selection_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_additional_forward_selection_flags(&has_bits);
          additional_forward_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 additional_reverse_selection_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_additional_reverse_selection_flags(&has_bits);
          additional_reverse_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference forward_selection_path_transformer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference reverse_selection_path_transformer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive archived_selection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference additional_selection_behaviors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_selection_behaviors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandSelectionBehaviorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandSelectionBehaviorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.SelectionPathArchive archived_old_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::archived_old_selection(this), target, stream);
  }

  // optional .TSK.SelectionPathArchive archived_new_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::archived_new_selection(this), target, stream);
  }

  // optional uint64 selection_flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_selection_flags(), target);
  }

  // optional uint64 additional_forward_selection_flags = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_additional_forward_selection_flags(), target);
  }

  // optional uint64 additional_reverse_selection_flags = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_additional_reverse_selection_flags(), target);
  }

  // optional .TSP.Reference forward_selection_path_transformer = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::forward_selection_path_transformer(this), target, stream);
  }

  // optional .TSP.Reference reverse_selection_path_transformer = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::reverse_selection_path_transformer(this), target, stream);
  }

  // optional .TSK.SelectionPathArchive archived_selection = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::archived_selection(this), target, stream);
  }

  // repeated .TSP.Reference additional_selection_behaviors = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_selection_behaviors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_additional_selection_behaviors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandSelectionBehaviorArchive)
  return target;
}

size_t CommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandSelectionBehaviorArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference additional_selection_behaviors = 9;
  total_size += 1UL * this->_internal_additional_selection_behaviors_size();
  for (const auto& msg : this->additional_selection_behaviors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSK.SelectionPathArchive archived_old_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *archived_old_selection_);
    }

    // optional .TSK.SelectionPathArchive archived_new_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *archived_new_selection_);
    }

    // optional .TSP.Reference forward_selection_path_transformer = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_selection_path_transformer_);
    }

    // optional .TSP.Reference reverse_selection_path_transformer = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_selection_path_transformer_);
    }

    // optional .TSK.SelectionPathArchive archived_selection = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *archived_selection_);
    }

    // optional uint64 selection_flags = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_selection_flags());
    }

    // optional uint64 additional_forward_selection_flags = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_additional_forward_selection_flags());
    }

    // optional uint64 additional_reverse_selection_flags = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_additional_reverse_selection_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }

void CommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandSelectionBehaviorArchive *>(to)->MergeFrom(
      static_cast<const CommandSelectionBehaviorArchive &>(from));
}


void CommandSelectionBehaviorArchive::MergeFrom(const CommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_selection_behaviors_.MergeFrom(from.additional_selection_behaviors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_archived_old_selection()->::TSK::SelectionPathArchive::MergeFrom(from._internal_archived_old_selection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_archived_new_selection()->::TSK::SelectionPathArchive::MergeFrom(from._internal_archived_new_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_forward_selection_path_transformer()->::TSP::Reference::MergeFrom(from._internal_forward_selection_path_transformer());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reverse_selection_path_transformer()->::TSP::Reference::MergeFrom(from._internal_reverse_selection_path_transformer());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_archived_selection()->::TSK::SelectionPathArchive::MergeFrom(from._internal_archived_selection());
    }
    if (cached_has_bits & 0x00000020u) {
      selection_flags_ = from.selection_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      additional_forward_selection_flags_ = from.additional_forward_selection_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      additional_reverse_selection_flags_ = from.additional_reverse_selection_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSelectionBehaviorArchive::CopyFrom(const CommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSelectionBehaviorArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(additional_selection_behaviors_)) return false;
  if (_internal_has_archived_old_selection()) {
    if (!archived_old_selection_->IsInitialized()) return false;
  }
  if (_internal_has_archived_new_selection()) {
    if (!archived_new_selection_->IsInitialized()) return false;
  }
  if (_internal_has_forward_selection_path_transformer()) {
    if (!forward_selection_path_transformer_->IsInitialized()) return false;
  }
  if (_internal_has_reverse_selection_path_transformer()) {
    if (!reverse_selection_path_transformer_->IsInitialized()) return false;
  }
  if (_internal_has_archived_selection()) {
    if (!archived_selection_->IsInitialized()) return false;
  }
  return true;
}

void CommandSelectionBehaviorArchive::InternalSwap(CommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_selection_behaviors_.InternalSwap(&other->additional_selection_behaviors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSelectionBehaviorArchive, additional_reverse_selection_flags_)
      + sizeof(CommandSelectionBehaviorArchive::additional_reverse_selection_flags_)
      - PROTOBUF_FIELD_OFFSET(CommandSelectionBehaviorArchive, archived_old_selection_)>(
          reinterpret_cast<char*>(&archived_old_selection_),
          reinterpret_cast<char*>(&other->archived_old_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSelectionBehaviorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[36]);
}

// ===================================================================

class SelectionPathTransformerArchive::_Internal {
 public:
};

void SelectionPathTransformerArchive::clear_selection_transformers() {
  selection_transformers_.Clear();
}
SelectionPathTransformerArchive::SelectionPathTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  selection_transformers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.SelectionPathTransformerArchive)
}
SelectionPathTransformerArchive::SelectionPathTransformerArchive(const SelectionPathTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selection_transformers_(from.selection_transformers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.SelectionPathTransformerArchive)
}

inline void SelectionPathTransformerArchive::SharedCtor() {
}

SelectionPathTransformerArchive::~SelectionPathTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSK.SelectionPathTransformerArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionPathTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectionPathTransformerArchive::ArenaDtor(void* object) {
  SelectionPathTransformerArchive* _this = reinterpret_cast< SelectionPathTransformerArchive* >(object);
  (void)_this;
}
void SelectionPathTransformerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionPathTransformerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionPathTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SelectionPathTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_transformers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionPathTransformerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference selection_transformers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selection_transformers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionPathTransformerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SelectionPathTransformerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference selection_transformers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selection_transformers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_selection_transformers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SelectionPathTransformerArchive)
  return target;
}

size_t SelectionPathTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SelectionPathTransformerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selection_transformers = 1;
  total_size += 1UL * this->_internal_selection_transformers_size();
  for (const auto& msg : this->selection_transformers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionPathTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionPathTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionPathTransformerArchive::GetClassData() const { return &_class_data_; }

void SelectionPathTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectionPathTransformerArchive *>(to)->MergeFrom(
      static_cast<const SelectionPathTransformerArchive &>(from));
}


void SelectionPathTransformerArchive::MergeFrom(const SelectionPathTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.SelectionPathTransformerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selection_transformers_.MergeFrom(from.selection_transformers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionPathTransformerArchive::CopyFrom(const SelectionPathTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SelectionPathTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionPathTransformerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(selection_transformers_)) return false;
  return true;
}

void SelectionPathTransformerArchive::InternalSwap(SelectionPathTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  selection_transformers_.InternalSwap(&other->selection_transformers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionPathTransformerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[37]);
}

// ===================================================================

class SelectionPathArchive::_Internal {
 public:
};

void SelectionPathArchive::clear_ordered_selections() {
  ordered_selections_.Clear();
}
SelectionPathArchive::SelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ordered_selections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.SelectionPathArchive)
}
SelectionPathArchive::SelectionPathArchive(const SelectionPathArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ordered_selections_(from.ordered_selections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.SelectionPathArchive)
}

inline void SelectionPathArchive::SharedCtor() {
}

SelectionPathArchive::~SelectionPathArchive() {
  // @@protoc_insertion_point(destructor:TSK.SelectionPathArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SelectionPathArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectionPathArchive::ArenaDtor(void* object) {
  SelectionPathArchive* _this = reinterpret_cast< SelectionPathArchive* >(object);
  (void)_this;
}
void SelectionPathArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectionPathArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionPathArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.SelectionPathArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ordered_selections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionPathArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference ordered_selections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ordered_selections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectionPathArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.SelectionPathArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference ordered_selections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ordered_selections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ordered_selections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.SelectionPathArchive)
  return target;
}

size_t SelectionPathArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.SelectionPathArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference ordered_selections = 1;
  total_size += 1UL * this->_internal_ordered_selections_size();
  for (const auto& msg : this->ordered_selections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionPathArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionPathArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionPathArchive::GetClassData() const { return &_class_data_; }

void SelectionPathArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SelectionPathArchive *>(to)->MergeFrom(
      static_cast<const SelectionPathArchive &>(from));
}


void SelectionPathArchive::MergeFrom(const SelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.SelectionPathArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ordered_selections_.MergeFrom(from.ordered_selections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionPathArchive::CopyFrom(const SelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.SelectionPathArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionPathArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ordered_selections_)) return false;
  return true;
}

void SelectionPathArchive::InternalSwap(SelectionPathArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ordered_selections_.InternalSwap(&other->ordered_selections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionPathArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[38]);
}

// ===================================================================

class DocumentSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentSelectionArchive>()._has_bits_);
  static const ::TSP::Reference& document_root(const DocumentSelectionArchive* msg);
  static void set_has_document_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
DocumentSelectionArchive::_Internal::document_root(const DocumentSelectionArchive* msg) {
  return *msg->document_root_;
}
void DocumentSelectionArchive::clear_document_root() {
  if (document_root_ != nullptr) document_root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DocumentSelectionArchive::DocumentSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DocumentSelectionArchive)
}
DocumentSelectionArchive::DocumentSelectionArchive(const DocumentSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document_root()) {
    document_root_ = new ::TSP::Reference(*from.document_root_);
  } else {
    document_root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.DocumentSelectionArchive)
}

inline void DocumentSelectionArchive::SharedCtor() {
document_root_ = nullptr;
}

DocumentSelectionArchive::~DocumentSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSK.DocumentSelectionArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_root_;
}

void DocumentSelectionArchive::ArenaDtor(void* object) {
  DocumentSelectionArchive* _this = reinterpret_cast< DocumentSelectionArchive* >(object);
  (void)_this;
}
void DocumentSelectionArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentSelectionArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DocumentSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(document_root_ != nullptr);
    document_root_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentSelectionArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference document_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentSelectionArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DocumentSelectionArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference document_root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document_root(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DocumentSelectionArchive)
  return target;
}

size_t DocumentSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DocumentSelectionArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference document_root = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_root_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentSelectionArchive::GetClassData() const { return &_class_data_; }

void DocumentSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DocumentSelectionArchive *>(to)->MergeFrom(
      static_cast<const DocumentSelectionArchive &>(from));
}


void DocumentSelectionArchive::MergeFrom(const DocumentSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DocumentSelectionArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document_root()) {
    _internal_mutable_document_root()->::TSP::Reference::MergeFrom(from._internal_document_root());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentSelectionArchive::CopyFrom(const DocumentSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DocumentSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSelectionArchive::IsInitialized() const {
  if (_internal_has_document_root()) {
    if (!document_root_->IsInitialized()) return false;
  }
  return true;
}

void DocumentSelectionArchive::InternalSwap(DocumentSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(document_root_, other->document_root_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentSelectionArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[39]);
}

// ===================================================================

class IdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<IdOperationArgs>()._has_bits_);
  static const ::TSP::UUIDPath& id_path(const IdOperationArgs* msg);
  static void set_has_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUIDPath&
IdOperationArgs::_Internal::id_path(const IdOperationArgs* msg) {
  return *msg->id_path_;
}
void IdOperationArgs::clear_id_path() {
  if (id_path_ != nullptr) id_path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IdOperationArgs::IdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.IdOperationArgs)
}
IdOperationArgs::IdOperationArgs(const IdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id_path()) {
    id_path_ = new ::TSP::UUIDPath(*from.id_path_);
  } else {
    id_path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.IdOperationArgs)
}

inline void IdOperationArgs::SharedCtor() {
id_path_ = nullptr;
}

IdOperationArgs::~IdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.IdOperationArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_path_;
}

void IdOperationArgs::ArenaDtor(void* object) {
  IdOperationArgs* _this = reinterpret_cast< IdOperationArgs* >(object);
  (void)_this;
}
void IdOperationArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdOperationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.IdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_path_ != nullptr);
    id_path_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdOperationArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUIDPath id_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdOperationArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.IdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUIDPath id_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id_path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.IdOperationArgs)
  return target;
}

size_t IdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.IdOperationArgs)
  size_t total_size = 0;

  // required .TSP.UUIDPath id_path = 1;
  if (_internal_has_id_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_path_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdOperationArgs::GetClassData() const { return &_class_data_; }

void IdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IdOperationArgs *>(to)->MergeFrom(
      static_cast<const IdOperationArgs &>(from));
}


void IdOperationArgs::MergeFrom(const IdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.IdOperationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id_path()) {
    _internal_mutable_id_path()->::TSP::UUIDPath::MergeFrom(from._internal_id_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdOperationArgs::CopyFrom(const IdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.IdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_id_path()) {
    if (!id_path_->IsInitialized()) return false;
  }
  return true;
}

void IdOperationArgs::InternalSwap(IdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_path_, other->id_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdOperationArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[40]);
}

// ===================================================================

class AddIdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<AddIdOperationArgs>()._has_bits_);
  static const ::TSK::IdOperationArgs& super(const AddIdOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::IdOperationArgs&
AddIdOperationArgs::_Internal::super(const AddIdOperationArgs* msg) {
  return *msg->super_;
}
AddIdOperationArgs::AddIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.AddIdOperationArgs)
}
AddIdOperationArgs::AddIdOperationArgs(const AddIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::IdOperationArgs(*from.super_);
  } else {
    super_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSK.AddIdOperationArgs)
}

inline void AddIdOperationArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(index_));
}

AddIdOperationArgs::~AddIdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.AddIdOperationArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void AddIdOperationArgs::ArenaDtor(void* object) {
  AddIdOperationArgs* _this = reinterpret_cast< AddIdOperationArgs* >(object);
  (void)_this;
}
void AddIdOperationArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddIdOperationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AddIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddIdOperationArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddIdOperationArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AddIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AddIdOperationArgs)
  return target;
}

size_t AddIdOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.AddIdOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_index()) {
    // required int32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t AddIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AddIdOperationArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddIdOperationArgs::GetClassData() const { return &_class_data_; }

void AddIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddIdOperationArgs *>(to)->MergeFrom(
      static_cast<const AddIdOperationArgs &>(from));
}


void AddIdOperationArgs::MergeFrom(const AddIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.AddIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddIdOperationArgs::CopyFrom(const AddIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AddIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddIdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void AddIdOperationArgs::InternalSwap(AddIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddIdOperationArgs, index_)
      + sizeof(AddIdOperationArgs::index_)
      - PROTOBUF_FIELD_OFFSET(AddIdOperationArgs, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddIdOperationArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[41]);
}

// ===================================================================

class RemoveIdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveIdOperationArgs>()._has_bits_);
  static const ::TSK::IdOperationArgs& super(const RemoveIdOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::IdOperationArgs&
RemoveIdOperationArgs::_Internal::super(const RemoveIdOperationArgs* msg) {
  return *msg->super_;
}
RemoveIdOperationArgs::RemoveIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.RemoveIdOperationArgs)
}
RemoveIdOperationArgs::RemoveIdOperationArgs(const RemoveIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::IdOperationArgs(*from.super_);
  } else {
    super_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:TSK.RemoveIdOperationArgs)
}

inline void RemoveIdOperationArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(index_));
}

RemoveIdOperationArgs::~RemoveIdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.RemoveIdOperationArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void RemoveIdOperationArgs::ArenaDtor(void* object) {
  RemoveIdOperationArgs* _this = reinterpret_cast< RemoveIdOperationArgs* >(object);
  (void)_this;
}
void RemoveIdOperationArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveIdOperationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.RemoveIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveIdOperationArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveIdOperationArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.RemoveIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.RemoveIdOperationArgs)
  return target;
}

size_t RemoveIdOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.RemoveIdOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_index()) {
    // required int32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t RemoveIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.RemoveIdOperationArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveIdOperationArgs::GetClassData() const { return &_class_data_; }

void RemoveIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RemoveIdOperationArgs *>(to)->MergeFrom(
      static_cast<const RemoveIdOperationArgs &>(from));
}


void RemoveIdOperationArgs::MergeFrom(const RemoveIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.RemoveIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveIdOperationArgs::CopyFrom(const RemoveIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.RemoveIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveIdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void RemoveIdOperationArgs::InternalSwap(RemoveIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveIdOperationArgs, index_)
      + sizeof(RemoveIdOperationArgs::index_)
      - PROTOBUF_FIELD_OFFSET(RemoveIdOperationArgs, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveIdOperationArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[42]);
}

// ===================================================================

class RearrangeIdOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<RearrangeIdOperationArgs>()._has_bits_);
  static const ::TSK::IdOperationArgs& super(const RearrangeIdOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::IdOperationArgs&
RearrangeIdOperationArgs::_Internal::super(const RearrangeIdOperationArgs* msg) {
  return *msg->super_;
}
RearrangeIdOperationArgs::RearrangeIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.RearrangeIdOperationArgs)
}
RearrangeIdOperationArgs::RearrangeIdOperationArgs(const RearrangeIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::IdOperationArgs(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&from_index_, &from.from_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_index_) -
    reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
  // @@protoc_insertion_point(copy_constructor:TSK.RearrangeIdOperationArgs)
}

inline void RearrangeIdOperationArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(to_index_));
}

RearrangeIdOperationArgs::~RearrangeIdOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.RearrangeIdOperationArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RearrangeIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void RearrangeIdOperationArgs::ArenaDtor(void* object) {
  RearrangeIdOperationArgs* _this = reinterpret_cast< RearrangeIdOperationArgs* >(object);
  (void)_this;
}
void RearrangeIdOperationArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RearrangeIdOperationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RearrangeIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.RearrangeIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&from_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_index_) -
        reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RearrangeIdOperationArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_from_index(&has_bits);
          from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_to_index(&has_bits);
          to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RearrangeIdOperationArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.RearrangeIdOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 from_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_from_index(), target);
  }

  // required int32 to_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.RearrangeIdOperationArgs)
  return target;
}

size_t RearrangeIdOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.RearrangeIdOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_from_index()) {
    // required int32 from_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_index());
  }

  if (_internal_has_to_index()) {
    // required int32 to_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_index());
  }

  return total_size;
}
size_t RearrangeIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.RearrangeIdOperationArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 from_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_index());

    // required int32 to_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RearrangeIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RearrangeIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RearrangeIdOperationArgs::GetClassData() const { return &_class_data_; }

void RearrangeIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RearrangeIdOperationArgs *>(to)->MergeFrom(
      static_cast<const RearrangeIdOperationArgs &>(from));
}


void RearrangeIdOperationArgs::MergeFrom(const RearrangeIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.RearrangeIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      from_index_ = from.from_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      to_index_ = from.to_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RearrangeIdOperationArgs::CopyFrom(const RearrangeIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.RearrangeIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RearrangeIdOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void RearrangeIdOperationArgs::InternalSwap(RearrangeIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RearrangeIdOperationArgs, to_index_)
      + sizeof(RearrangeIdOperationArgs::to_index_)
      - PROTOBUF_FIELD_OFFSET(RearrangeIdOperationArgs, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RearrangeIdOperationArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[43]);
}

// ===================================================================

class IdPlacementOperationArgs::_Internal {
 public:
  using HasBits = decltype(std::declval<IdPlacementOperationArgs>()._has_bits_);
  static const ::TSK::IdOperationArgs& super(const IdPlacementOperationArgs* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::IdOperationArgs&
IdPlacementOperationArgs::_Internal::super(const IdPlacementOperationArgs* msg) {
  return *msg->super_;
}
IdPlacementOperationArgs::IdPlacementOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.IdPlacementOperationArgs)
}
IdPlacementOperationArgs::IdPlacementOperationArgs(const IdPlacementOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::IdOperationArgs(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&from_index_, &from.from_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_index_) -
    reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
  // @@protoc_insertion_point(copy_constructor:TSK.IdPlacementOperationArgs)
}

inline void IdPlacementOperationArgs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_index_) -
    reinterpret_cast<char*>(&super_)) + sizeof(to_index_));
}

IdPlacementOperationArgs::~IdPlacementOperationArgs() {
  // @@protoc_insertion_point(destructor:TSK.IdPlacementOperationArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IdPlacementOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void IdPlacementOperationArgs::ArenaDtor(void* object) {
  IdPlacementOperationArgs* _this = reinterpret_cast< IdPlacementOperationArgs* >(object);
  (void)_this;
}
void IdPlacementOperationArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdPlacementOperationArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdPlacementOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.IdPlacementOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&from_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_index_) -
        reinterpret_cast<char*>(&from_index_)) + sizeof(to_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdPlacementOperationArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.IdOperationArgs super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 from_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_from_index(&has_bits);
          from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 to_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_to_index(&has_bits);
          to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdPlacementOperationArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.IdPlacementOperationArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.IdOperationArgs super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required int32 from_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_from_index(), target);
  }

  // required int32 to_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.IdPlacementOperationArgs)
  return target;
}

size_t IdPlacementOperationArgs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.IdPlacementOperationArgs)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_from_index()) {
    // required int32 from_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_index());
  }

  if (_internal_has_to_index()) {
    // required int32 to_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_index());
  }

  return total_size;
}
size_t IdPlacementOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.IdPlacementOperationArgs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.IdOperationArgs super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int32 from_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_index());

    // required int32 to_index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdPlacementOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IdPlacementOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdPlacementOperationArgs::GetClassData() const { return &_class_data_; }

void IdPlacementOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IdPlacementOperationArgs *>(to)->MergeFrom(
      static_cast<const IdPlacementOperationArgs &>(from));
}


void IdPlacementOperationArgs::MergeFrom(const IdPlacementOperationArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.IdPlacementOperationArgs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::IdOperationArgs::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      from_index_ = from.from_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      to_index_ = from.to_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdPlacementOperationArgs::CopyFrom(const IdPlacementOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.IdPlacementOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdPlacementOperationArgs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void IdPlacementOperationArgs::InternalSwap(IdPlacementOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdPlacementOperationArgs, to_index_)
      + sizeof(IdPlacementOperationArgs::to_index_)
      - PROTOBUF_FIELD_OFFSET(IdPlacementOperationArgs, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdPlacementOperationArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[44]);
}

// ===================================================================

class NullCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NullCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const NullCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
NullCommandArchive::_Internal::super(const NullCommandArchive* msg) {
  return *msg->super_;
}
NullCommandArchive::NullCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.NullCommandArchive)
}
NullCommandArchive::NullCommandArchive(const NullCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.NullCommandArchive)
}

inline void NullCommandArchive::SharedCtor() {
super_ = nullptr;
}

NullCommandArchive::~NullCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.NullCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NullCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void NullCommandArchive::ArenaDtor(void* object) {
  NullCommandArchive* _this = reinterpret_cast< NullCommandArchive* >(object);
  (void)_this;
}
void NullCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NullCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NullCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.NullCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NullCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NullCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.NullCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.NullCommandArchive)
  return target;
}

size_t NullCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.NullCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NullCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NullCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NullCommandArchive::GetClassData() const { return &_class_data_; }

void NullCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NullCommandArchive *>(to)->MergeFrom(
      static_cast<const NullCommandArchive &>(from));
}


void NullCommandArchive::MergeFrom(const NullCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.NullCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NullCommandArchive::CopyFrom(const NullCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.NullCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void NullCommandArchive::InternalSwap(NullCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NullCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[45]);
}

// ===================================================================

class GroupCommitCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupCommitCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const GroupCommitCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
GroupCommitCommandArchive::_Internal::super(const GroupCommitCommandArchive* msg) {
  return *msg->super_;
}
GroupCommitCommandArchive::GroupCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.GroupCommitCommandArchive)
}
GroupCommitCommandArchive::GroupCommitCommandArchive(const GroupCommitCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.GroupCommitCommandArchive)
}

inline void GroupCommitCommandArchive::SharedCtor() {
super_ = nullptr;
}

GroupCommitCommandArchive::~GroupCommitCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.GroupCommitCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GroupCommitCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void GroupCommitCommandArchive::ArenaDtor(void* object) {
  GroupCommitCommandArchive* _this = reinterpret_cast< GroupCommitCommandArchive* >(object);
  (void)_this;
}
void GroupCommitCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupCommitCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupCommitCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.GroupCommitCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupCommitCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupCommitCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.GroupCommitCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.GroupCommitCommandArchive)
  return target;
}

size_t GroupCommitCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.GroupCommitCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupCommitCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GroupCommitCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupCommitCommandArchive::GetClassData() const { return &_class_data_; }

void GroupCommitCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GroupCommitCommandArchive *>(to)->MergeFrom(
      static_cast<const GroupCommitCommandArchive &>(from));
}


void GroupCommitCommandArchive::MergeFrom(const GroupCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.GroupCommitCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupCommitCommandArchive::CopyFrom(const GroupCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.GroupCommitCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCommitCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void GroupCommitCommandArchive::InternalSwap(GroupCommitCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupCommitCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[46]);
}

// ===================================================================

class UpgradeDocPostProcessingCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UpgradeDocPostProcessingCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const UpgradeDocPostProcessingCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
UpgradeDocPostProcessingCommandArchive::_Internal::super(const UpgradeDocPostProcessingCommandArchive* msg) {
  return *msg->super_;
}
UpgradeDocPostProcessingCommandArchive::UpgradeDocPostProcessingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.UpgradeDocPostProcessingCommandArchive)
}
UpgradeDocPostProcessingCommandArchive::UpgradeDocPostProcessingCommandArchive(const UpgradeDocPostProcessingCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.UpgradeDocPostProcessingCommandArchive)
}

inline void UpgradeDocPostProcessingCommandArchive::SharedCtor() {
super_ = nullptr;
}

UpgradeDocPostProcessingCommandArchive::~UpgradeDocPostProcessingCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.UpgradeDocPostProcessingCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpgradeDocPostProcessingCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void UpgradeDocPostProcessingCommandArchive::ArenaDtor(void* object) {
  UpgradeDocPostProcessingCommandArchive* _this = reinterpret_cast< UpgradeDocPostProcessingCommandArchive* >(object);
  (void)_this;
}
void UpgradeDocPostProcessingCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpgradeDocPostProcessingCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpgradeDocPostProcessingCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.UpgradeDocPostProcessingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpgradeDocPostProcessingCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpgradeDocPostProcessingCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.UpgradeDocPostProcessingCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.UpgradeDocPostProcessingCommandArchive)
  return target;
}

size_t UpgradeDocPostProcessingCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.UpgradeDocPostProcessingCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpgradeDocPostProcessingCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpgradeDocPostProcessingCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpgradeDocPostProcessingCommandArchive::GetClassData() const { return &_class_data_; }

void UpgradeDocPostProcessingCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpgradeDocPostProcessingCommandArchive *>(to)->MergeFrom(
      static_cast<const UpgradeDocPostProcessingCommandArchive &>(from));
}


void UpgradeDocPostProcessingCommandArchive::MergeFrom(const UpgradeDocPostProcessingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.UpgradeDocPostProcessingCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpgradeDocPostProcessingCommandArchive::CopyFrom(const UpgradeDocPostProcessingCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.UpgradeDocPostProcessingCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeDocPostProcessingCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void UpgradeDocPostProcessingCommandArchive::InternalSwap(UpgradeDocPostProcessingCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpgradeDocPostProcessingCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[47]);
}

// ===================================================================

class InducedCommandCollectionCommitCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InducedCommandCollectionCommitCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const InducedCommandCollectionCommitCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InducedCommandCollectionCommitCommandArchive::_Internal::super(const InducedCommandCollectionCommitCommandArchive* msg) {
  return *msg->super_;
}
InducedCommandCollectionCommitCommandArchive::InducedCommandCollectionCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.InducedCommandCollectionCommitCommandArchive)
}
InducedCommandCollectionCommitCommandArchive::InducedCommandCollectionCommitCommandArchive(const InducedCommandCollectionCommitCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.InducedCommandCollectionCommitCommandArchive)
}

inline void InducedCommandCollectionCommitCommandArchive::SharedCtor() {
super_ = nullptr;
}

InducedCommandCollectionCommitCommandArchive::~InducedCommandCollectionCommitCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.InducedCommandCollectionCommitCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InducedCommandCollectionCommitCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void InducedCommandCollectionCommitCommandArchive::ArenaDtor(void* object) {
  InducedCommandCollectionCommitCommandArchive* _this = reinterpret_cast< InducedCommandCollectionCommitCommandArchive* >(object);
  (void)_this;
}
void InducedCommandCollectionCommitCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InducedCommandCollectionCommitCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InducedCommandCollectionCommitCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.InducedCommandCollectionCommitCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InducedCommandCollectionCommitCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InducedCommandCollectionCommitCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.InducedCommandCollectionCommitCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.InducedCommandCollectionCommitCommandArchive)
  return target;
}

size_t InducedCommandCollectionCommitCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.InducedCommandCollectionCommitCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InducedCommandCollectionCommitCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InducedCommandCollectionCommitCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InducedCommandCollectionCommitCommandArchive::GetClassData() const { return &_class_data_; }

void InducedCommandCollectionCommitCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InducedCommandCollectionCommitCommandArchive *>(to)->MergeFrom(
      static_cast<const InducedCommandCollectionCommitCommandArchive &>(from));
}


void InducedCommandCollectionCommitCommandArchive::MergeFrom(const InducedCommandCollectionCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.InducedCommandCollectionCommitCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InducedCommandCollectionCommitCommandArchive::CopyFrom(const InducedCommandCollectionCommitCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.InducedCommandCollectionCommitCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InducedCommandCollectionCommitCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void InducedCommandCollectionCommitCommandArchive::InternalSwap(InducedCommandCollectionCommitCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InducedCommandCollectionCommitCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[48]);
}

// ===================================================================

class ExecuteTestBetweenRollbackAndReapplyCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecuteTestBetweenRollbackAndReapplyCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ExecuteTestBetweenRollbackAndReapplyCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ExecuteTestBetweenRollbackAndReapplyCommandArchive::_Internal::super(const ExecuteTestBetweenRollbackAndReapplyCommandArchive* msg) {
  return *msg->super_;
}
ExecuteTestBetweenRollbackAndReapplyCommandArchive::ExecuteTestBetweenRollbackAndReapplyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
}
ExecuteTestBetweenRollbackAndReapplyCommandArchive::ExecuteTestBetweenRollbackAndReapplyCommandArchive(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
}

inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::SharedCtor() {
super_ = nullptr;
}

ExecuteTestBetweenRollbackAndReapplyCommandArchive::~ExecuteTestBetweenRollbackAndReapplyCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::ArenaDtor(void* object) {
  ExecuteTestBetweenRollbackAndReapplyCommandArchive* _this = reinterpret_cast< ExecuteTestBetweenRollbackAndReapplyCommandArchive* >(object);
  (void)_this;
}
void ExecuteTestBetweenRollbackAndReapplyCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteTestBetweenRollbackAndReapplyCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteTestBetweenRollbackAndReapplyCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteTestBetweenRollbackAndReapplyCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  return target;
}

size_t ExecuteTestBetweenRollbackAndReapplyCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteTestBetweenRollbackAndReapplyCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteTestBetweenRollbackAndReapplyCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteTestBetweenRollbackAndReapplyCommandArchive::GetClassData() const { return &_class_data_; }

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExecuteTestBetweenRollbackAndReapplyCommandArchive *>(to)->MergeFrom(
      static_cast<const ExecuteTestBetweenRollbackAndReapplyCommandArchive &>(from));
}


void ExecuteTestBetweenRollbackAndReapplyCommandArchive::MergeFrom(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::CopyFrom(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTestBetweenRollbackAndReapplyCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ExecuteTestBetweenRollbackAndReapplyCommandArchive::InternalSwap(ExecuteTestBetweenRollbackAndReapplyCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteTestBetweenRollbackAndReapplyCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[49]);
}

// ===================================================================

class ChangeDocumentPackageTypeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeDocumentPackageTypeCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ChangeDocumentPackageTypeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_package_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_package_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
ChangeDocumentPackageTypeCommandArchive::_Internal::super(const ChangeDocumentPackageTypeCommandArchive* msg) {
  return *msg->super_;
}
ChangeDocumentPackageTypeCommandArchive::ChangeDocumentPackageTypeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.ChangeDocumentPackageTypeCommandArchive)
}
ChangeDocumentPackageTypeCommandArchive::ChangeDocumentPackageTypeCommandArchive(const ChangeDocumentPackageTypeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&new_package_type_, &from.new_package_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_package_type_) -
    reinterpret_cast<char*>(&new_package_type_)) + sizeof(old_package_type_));
  // @@protoc_insertion_point(copy_constructor:TSK.ChangeDocumentPackageTypeCommandArchive)
}

inline void ChangeDocumentPackageTypeCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_package_type_) -
    reinterpret_cast<char*>(&super_)) + sizeof(old_package_type_));
}

ChangeDocumentPackageTypeCommandArchive::~ChangeDocumentPackageTypeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.ChangeDocumentPackageTypeCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeDocumentPackageTypeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void ChangeDocumentPackageTypeCommandArchive::ArenaDtor(void* object) {
  ChangeDocumentPackageTypeCommandArchive* _this = reinterpret_cast< ChangeDocumentPackageTypeCommandArchive* >(object);
  (void)_this;
}
void ChangeDocumentPackageTypeCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDocumentPackageTypeCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeDocumentPackageTypeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&new_package_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&old_package_type_) -
        reinterpret_cast<char*>(&new_package_type_)) + sizeof(old_package_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDocumentPackageTypeCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(val))) {
            _internal_set_new_package_type(static_cast<::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(val))) {
            _internal_set_old_package_type(static_cast<::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDocumentPackageTypeCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_package_type(), target);
  }

  // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_old_package_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.ChangeDocumentPackageTypeCommandArchive)
  return target;
}

size_t ChangeDocumentPackageTypeCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_new_package_type()) {
    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_package_type());
  }

  if (_internal_has_old_package_type()) {
    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_old_package_type());
  }

  return total_size;
}
size_t ChangeDocumentPackageTypeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_package_type());

    // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_old_package_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeDocumentPackageTypeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeDocumentPackageTypeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeDocumentPackageTypeCommandArchive::GetClassData() const { return &_class_data_; }

void ChangeDocumentPackageTypeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChangeDocumentPackageTypeCommandArchive *>(to)->MergeFrom(
      static_cast<const ChangeDocumentPackageTypeCommandArchive &>(from));
}


void ChangeDocumentPackageTypeCommandArchive::MergeFrom(const ChangeDocumentPackageTypeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      new_package_type_ = from.new_package_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_package_type_ = from.old_package_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeDocumentPackageTypeCommandArchive::CopyFrom(const ChangeDocumentPackageTypeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.ChangeDocumentPackageTypeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDocumentPackageTypeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void ChangeDocumentPackageTypeCommandArchive::InternalSwap(ChangeDocumentPackageTypeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDocumentPackageTypeCommandArchive, old_package_type_)
      + sizeof(ChangeDocumentPackageTypeCommandArchive::old_package_type_)
      - PROTOBUF_FIELD_OFFSET(ChangeDocumentPackageTypeCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDocumentPackageTypeCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[50]);
}

// ===================================================================

class CreateLocalStorageSnapshotCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateLocalStorageSnapshotCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CreateLocalStorageSnapshotCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snapshot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::CommandArchive&
CreateLocalStorageSnapshotCommandArchive::_Internal::super(const CreateLocalStorageSnapshotCommandArchive* msg) {
  return *msg->super_;
}
CreateLocalStorageSnapshotCommandArchive::CreateLocalStorageSnapshotCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CreateLocalStorageSnapshotCommandArchive)
}
CreateLocalStorageSnapshotCommandArchive::CreateLocalStorageSnapshotCommandArchive(const CreateLocalStorageSnapshotCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshot_id()) {
    snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshot_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CreateLocalStorageSnapshotCommandArchive)
}

inline void CreateLocalStorageSnapshotCommandArchive::SharedCtor() {
snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
super_ = nullptr;
}

CreateLocalStorageSnapshotCommandArchive::~CreateLocalStorageSnapshotCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.CreateLocalStorageSnapshotCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateLocalStorageSnapshotCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CreateLocalStorageSnapshotCommandArchive::ArenaDtor(void* object) {
  CreateLocalStorageSnapshotCommandArchive* _this = reinterpret_cast< CreateLocalStorageSnapshotCommandArchive* >(object);
  (void)_this;
}
void CreateLocalStorageSnapshotCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLocalStorageSnapshotCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateLocalStorageSnapshotCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      snapshot_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLocalStorageSnapshotCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string snapshot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateLocalStorageSnapshotCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string snapshot_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snapshot_id().data(), static_cast<int>(this->_internal_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snapshot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CreateLocalStorageSnapshotCommandArchive)
  return target;
}

size_t CreateLocalStorageSnapshotCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string snapshot_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateLocalStorageSnapshotCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateLocalStorageSnapshotCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateLocalStorageSnapshotCommandArchive::GetClassData() const { return &_class_data_; }

void CreateLocalStorageSnapshotCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateLocalStorageSnapshotCommandArchive *>(to)->MergeFrom(
      static_cast<const CreateLocalStorageSnapshotCommandArchive &>(from));
}


void CreateLocalStorageSnapshotCommandArchive::MergeFrom(const CreateLocalStorageSnapshotCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_snapshot_id(from._internal_snapshot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateLocalStorageSnapshotCommandArchive::CopyFrom(const CreateLocalStorageSnapshotCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CreateLocalStorageSnapshotCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLocalStorageSnapshotCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CreateLocalStorageSnapshotCommandArchive::InternalSwap(CreateLocalStorageSnapshotCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &snapshot_id_, GetArenaForAllocation(),
      &other->snapshot_id_, other->GetArenaForAllocation()
  );
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLocalStorageSnapshotCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[51]);
}

// ===================================================================

class BlockDiffsAtCurrentRevisionCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockDiffsAtCurrentRevisionCommand>()._has_bits_);
  static const ::TSK::CommandArchive& super(const BlockDiffsAtCurrentRevisionCommand* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
BlockDiffsAtCurrentRevisionCommand::_Internal::super(const BlockDiffsAtCurrentRevisionCommand* msg) {
  return *msg->super_;
}
BlockDiffsAtCurrentRevisionCommand::BlockDiffsAtCurrentRevisionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.BlockDiffsAtCurrentRevisionCommand)
}
BlockDiffsAtCurrentRevisionCommand::BlockDiffsAtCurrentRevisionCommand(const BlockDiffsAtCurrentRevisionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.BlockDiffsAtCurrentRevisionCommand)
}

inline void BlockDiffsAtCurrentRevisionCommand::SharedCtor() {
super_ = nullptr;
}

BlockDiffsAtCurrentRevisionCommand::~BlockDiffsAtCurrentRevisionCommand() {
  // @@protoc_insertion_point(destructor:TSK.BlockDiffsAtCurrentRevisionCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockDiffsAtCurrentRevisionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void BlockDiffsAtCurrentRevisionCommand::ArenaDtor(void* object) {
  BlockDiffsAtCurrentRevisionCommand* _this = reinterpret_cast< BlockDiffsAtCurrentRevisionCommand* >(object);
  (void)_this;
}
void BlockDiffsAtCurrentRevisionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockDiffsAtCurrentRevisionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockDiffsAtCurrentRevisionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockDiffsAtCurrentRevisionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockDiffsAtCurrentRevisionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.BlockDiffsAtCurrentRevisionCommand)
  return target;
}

size_t BlockDiffsAtCurrentRevisionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockDiffsAtCurrentRevisionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockDiffsAtCurrentRevisionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockDiffsAtCurrentRevisionCommand::GetClassData() const { return &_class_data_; }

void BlockDiffsAtCurrentRevisionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockDiffsAtCurrentRevisionCommand *>(to)->MergeFrom(
      static_cast<const BlockDiffsAtCurrentRevisionCommand &>(from));
}


void BlockDiffsAtCurrentRevisionCommand::MergeFrom(const BlockDiffsAtCurrentRevisionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockDiffsAtCurrentRevisionCommand::CopyFrom(const BlockDiffsAtCurrentRevisionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.BlockDiffsAtCurrentRevisionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDiffsAtCurrentRevisionCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void BlockDiffsAtCurrentRevisionCommand::InternalSwap(BlockDiffsAtCurrentRevisionCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockDiffsAtCurrentRevisionCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[52]);
}

// ===================================================================

class RangeAddress::_Internal {
 public:
};

RangeAddress::RangeAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_identifier_(arena),
  range_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.RangeAddress)
}
RangeAddress::RangeAddress(const RangeAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_identifier_(from.address_identifier_),
      range_list_(from.range_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.RangeAddress)
}

inline void RangeAddress::SharedCtor() {
}

RangeAddress::~RangeAddress() {
  // @@protoc_insertion_point(destructor:TSK.RangeAddress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RangeAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangeAddress::ArenaDtor(void* object) {
  RangeAddress* _this = reinterpret_cast< RangeAddress* >(object);
  (void)_this;
}
void RangeAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.RangeAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_identifier_.Clear();
  range_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 address_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address_identifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 range_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_range_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_range_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.RangeAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address_identifier = 1;
  for (int i = 0, n = this->_internal_address_identifier_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address_identifier(i), target);
  }

  // repeated uint32 range_list = 2;
  for (int i = 0, n = this->_internal_range_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.RangeAddress)
  return target;
}

size_t RangeAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.RangeAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address_identifier = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->address_identifier_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_identifier_size());
    total_size += data_size;
  }

  // repeated uint32 range_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->range_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_range_list_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangeAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeAddress::GetClassData() const { return &_class_data_; }

void RangeAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RangeAddress *>(to)->MergeFrom(
      static_cast<const RangeAddress &>(from));
}


void RangeAddress::MergeFrom(const RangeAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.RangeAddress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_identifier_.MergeFrom(from.address_identifier_);
  range_list_.MergeFrom(from.range_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeAddress::CopyFrom(const RangeAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.RangeAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeAddress::IsInitialized() const {
  return true;
}

void RangeAddress::InternalSwap(RangeAddress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  address_identifier_.InternalSwap(&other->address_identifier_);
  range_list_.InternalSwap(&other->range_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeAddress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[53]);
}

// ===================================================================

class Operation::_Internal {
 public:
  using HasBits = decltype(std::declval<Operation>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_noop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insert_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preserve_lower_priority_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transform_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_property_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_index(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_to_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_dominating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_object_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_object_counter_space(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_identifier_(arena),
  range_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      address_identifier_(from.address_identifier_),
      range_list_(from.range_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&noop_, &from.noop_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_index_) -
    reinterpret_cast<char*>(&noop_)) + sizeof(to_index_));
  // @@protoc_insertion_point(copy_constructor:TSK.Operation)
}

inline void Operation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&noop_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&object_counter_space_) -
    reinterpret_cast<char*>(&noop_)) + sizeof(object_counter_space_));
object_count_ = -1;
insert_length_ = uint64_t{1u};
type_ = 6;
transform_behavior_ = 7u;
from_index_ = -1;
to_index_ = -1;
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:TSK.Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_identifier_.Clear();
  range_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&noop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&object_counter_space_) -
        reinterpret_cast<char*>(&noop_)) + sizeof(object_counter_space_));
    object_count_ = -1;
    insert_length_ = uint64_t{1u};
    type_ = 6;
  }
  if (cached_has_bits & 0x00000700u) {
    transform_behavior_ = 7u;
    from_index_ = -1;
    to_index_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::Operation_OperationType_IsValid(val))) {
            _internal_set_type(static_cast<::TSK::Operation_OperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool noop = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_noop(&has_bits);
          noop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 address_identifier = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_address_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 insert_length = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_insert_length(&has_bits);
          insert_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preserve_lower_priority_location = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_preserve_lower_priority_location(&has_bits);
          preserve_lower_priority_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 range_list = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_range_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_range_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transform_behavior = 7 [default = 7];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_transform_behavior(&has_bits);
          transform_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 property_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_property_id(&has_bits);
          property_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 from_index = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_from_index(&has_bits);
          from_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 to_index = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_to_index(&has_bits);
          to_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dominating = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_dominating(&has_bits);
          dominating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 object_count = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_object_count(&has_bits);
          object_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 object_counter_space = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_object_counter_space(&has_bits);
          object_counter_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool noop = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_noop(), target);
  }

  // repeated fixed64 address_identifier = 3 [packed = true];
  if (this->_internal_address_identifier_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_address_identifier(), target);
  }

  // optional uint64 insert_length = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_insert_length(), target);
  }

  // optional bool preserve_lower_priority_location = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_lower_priority_location(), target);
  }

  // repeated uint32 range_list = 6 [packed = true];
  {
    int byte_size = _range_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_range_list(), byte_size, target);
    }
  }

  // optional uint32 transform_behavior = 7 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_transform_behavior(), target);
  }

  // optional uint32 property_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_property_id(), target);
  }

  // optional int32 from_index = 9 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_from_index(), target);
  }

  // optional int32 to_index = 10 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_to_index(), target);
  }

  // optional bool dominating = 11 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_dominating(), target);
  }

  // optional int32 object_count = 12 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_object_count(), target);
  }

  // optional int32 object_counter_space = 13 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_object_counter_space(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 address_identifier = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_address_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 range_list = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->range_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _range_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool noop = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_lower_priority_location = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool dominating = 11 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 property_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_property_id());
    }

    // optional int32 object_counter_space = 13 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_object_counter_space());
    }

    // optional int32 object_count = 12 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_object_count());
    }

    // optional uint64 insert_length = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_insert_length());
    }

    // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 transform_behavior = 7 [default = 7];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_transform_behavior());
    }

    // optional int32 from_index = 9 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_from_index());
    }

    // optional int32 to_index = 10 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_to_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }

void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Operation *>(to)->MergeFrom(
      static_cast<const Operation &>(from));
}


void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_identifier_.MergeFrom(from.address_identifier_);
  range_list_.MergeFrom(from.range_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      noop_ = from.noop_;
    }
    if (cached_has_bits & 0x00000002u) {
      preserve_lower_priority_location_ = from.preserve_lower_priority_location_;
    }
    if (cached_has_bits & 0x00000004u) {
      dominating_ = from.dominating_;
    }
    if (cached_has_bits & 0x00000008u) {
      property_id_ = from.property_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      object_counter_space_ = from.object_counter_space_;
    }
    if (cached_has_bits & 0x00000020u) {
      object_count_ = from.object_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      insert_length_ = from.insert_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      transform_behavior_ = from.transform_behavior_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_index_ = from.from_index_;
    }
    if (cached_has_bits & 0x00000400u) {
      to_index_ = from.to_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_identifier_.InternalSwap(&other->address_identifier_);
  range_list_.InternalSwap(&other->range_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, object_counter_space_)
      + sizeof(Operation::object_counter_space_)
      - PROTOBUF_FIELD_OFFSET(Operation, noop_)>(
          reinterpret_cast<char*>(&noop_),
          reinterpret_cast<char*>(&other->noop_));
  swap(object_count_, other->object_count_);
  swap(insert_length_, other->insert_length_);
  swap(type_, other->type_);
  swap(transform_behavior_, other->transform_behavior_);
  swap(from_index_, other->from_index_);
  swap(to_index_, other->to_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[54]);
}

// ===================================================================

class OperationTransformer::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationTransformer>()._has_bits_);
  static void set_has_higher_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OperationTransformer::OperationTransformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OperationTransformer)
}
OperationTransformer::OperationTransformer(const OperationTransformer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  higher_priority_ = from.higher_priority_;
  // @@protoc_insertion_point(copy_constructor:TSK.OperationTransformer)
}

inline void OperationTransformer::SharedCtor() {
higher_priority_ = false;
}

OperationTransformer::~OperationTransformer() {
  // @@protoc_insertion_point(destructor:TSK.OperationTransformer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationTransformer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OperationTransformer::ArenaDtor(void* object) {
  OperationTransformer* _this = reinterpret_cast< OperationTransformer* >(object);
  (void)_this;
}
void OperationTransformer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationTransformer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationTransformer::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationTransformer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  higher_priority_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationTransformer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool higher_priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_higher_priority(&has_bits);
          higher_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.Operation operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationTransformer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationTransformer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool higher_priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_higher_priority(), target);
  }

  // repeated .TSK.Operation operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationTransformer)
  return target;
}

size_t OperationTransformer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationTransformer)
  size_t total_size = 0;

  // required bool higher_priority = 1;
  if (_internal_has_higher_priority()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.Operation operations = 2;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationTransformer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationTransformer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationTransformer::GetClassData() const { return &_class_data_; }

void OperationTransformer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationTransformer *>(to)->MergeFrom(
      static_cast<const OperationTransformer &>(from));
}


void OperationTransformer::MergeFrom(const OperationTransformer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationTransformer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (from._internal_has_higher_priority()) {
    _internal_set_higher_priority(from._internal_higher_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationTransformer::CopyFrom(const OperationTransformer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationTransformer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationTransformer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OperationTransformer::InternalSwap(OperationTransformer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
  swap(higher_priority_, other->higher_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationTransformer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[55]);
}

// ===================================================================

class TransformerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformerEntry>()._has_bits_);
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::OperationTransformer& transformer(const TransformerEntry* msg);
  static void set_has_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::OperationTransformer&
TransformerEntry::_Internal::transformer(const TransformerEntry* msg) {
  return *msg->transformer_;
}
TransformerEntry::TransformerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.TransformerEntry)
}
TransformerEntry::TransformerEntry(const TransformerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer()) {
    transformer_ = new ::TSK::OperationTransformer(*from.transformer_);
  } else {
    transformer_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&creation_time_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(creation_time_));
  // @@protoc_insertion_point(copy_constructor:TSK.TransformerEntry)
}

inline void TransformerEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transformer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&creation_time_) -
    reinterpret_cast<char*>(&transformer_)) + sizeof(creation_time_));
}

TransformerEntry::~TransformerEntry() {
  // @@protoc_insertion_point(destructor:TSK.TransformerEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransformerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transformer_;
}

void TransformerEntry::ArenaDtor(void* object) {
  TransformerEntry* _this = reinterpret_cast< TransformerEntry* >(object);
  (void)_this;
}
void TransformerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.TransformerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transformer_ != nullptr);
    transformer_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_) -
        reinterpret_cast<char*>(&sequence_)) + sizeof(creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sequence(&has_bits);
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double creation_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_creation_time(&has_bits);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .TSK.OperationTransformer transformer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.TransformerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sequence = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequence(), target);
  }

  // required double creation_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_creation_time(), target);
  }

  // required .TSK.OperationTransformer transformer = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transformer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.TransformerEntry)
  return target;
}

size_t TransformerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.TransformerEntry)
  size_t total_size = 0;

  if (_internal_has_transformer()) {
    // required .TSK.OperationTransformer transformer = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_);
  }

  if (_internal_has_sequence()) {
    // required uint64 sequence = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence());
  }

  if (_internal_has_creation_time()) {
    // required double creation_time = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t TransformerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.TransformerEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.OperationTransformer transformer = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformer_);

    // required uint64 sequence = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence());

    // required double creation_time = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformerEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformerEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformerEntry::GetClassData() const { return &_class_data_; }

void TransformerEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransformerEntry *>(to)->MergeFrom(
      static_cast<const TransformerEntry &>(from));
}


void TransformerEntry::MergeFrom(const TransformerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.TransformerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_transformer()->::TSK::OperationTransformer::MergeFrom(from._internal_transformer());
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformerEntry::CopyFrom(const TransformerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.TransformerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_transformer()) {
    if (!transformer_->IsInitialized()) return false;
  }
  return true;
}

void TransformerEntry::InternalSwap(TransformerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransformerEntry, creation_time_)
      + sizeof(TransformerEntry::creation_time_)
      - PROTOBUF_FIELD_OFFSET(TransformerEntry, transformer_)>(
          reinterpret_cast<char*>(&transformer_),
          reinterpret_cast<char*>(&other->transformer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformerEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[56]);
}

// ===================================================================

class OutgoingCommandQueueItem::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueueItem>()._has_bits_);
  static const ::TSP::Reference& command(const OutgoingCommandQueueItem* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serialized_json_without_data_base64_encoded_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& serialized_json_without_data_base64_encoded_data(const OutgoingCommandQueueItem* msg);
  static void set_has_serialized_json_without_data_base64_encoded_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
OutgoingCommandQueueItem::_Internal::command(const OutgoingCommandQueueItem* msg) {
  return *msg->command_;
}
const ::TSP::DataReference&
OutgoingCommandQueueItem::_Internal::serialized_json_without_data_base64_encoded_data(const OutgoingCommandQueueItem* msg) {
  return *msg->serialized_json_without_data_base64_encoded_data_;
}
void OutgoingCommandQueueItem::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void OutgoingCommandQueueItem::clear_serialized_json_without_data_base64_encoded_data() {
  if (serialized_json_without_data_base64_encoded_data_ != nullptr) serialized_json_without_data_base64_encoded_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void OutgoingCommandQueueItem::clear_large_data_list() {
  large_data_list_.Clear();
}
OutgoingCommandQueueItem::OutgoingCommandQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uuid_to_data_map_entries_(arena),
  large_data_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueueItem)
}
OutgoingCommandQueueItem::OutgoingCommandQueueItem(const OutgoingCommandQueueItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uuid_to_data_map_entries_(from.uuid_to_data_map_entries_),
      large_data_list_(from.large_data_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_json_without_data_base64_encoded_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_json_without_data_base64_encoded_string()) {
    serialized_json_without_data_base64_encoded_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_json_without_data_base64_encoded_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_command()) {
    command_ = new ::TSP::Reference(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_serialized_json_without_data_base64_encoded_data()) {
    serialized_json_without_data_base64_encoded_data_ = new ::TSP::DataReference(*from.serialized_json_without_data_base64_encoded_data_);
  } else {
    serialized_json_without_data_base64_encoded_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueueItem)
}

inline void OutgoingCommandQueueItem::SharedCtor() {
serialized_json_without_data_base64_encoded_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serialized_json_without_data_base64_encoded_data_) -
    reinterpret_cast<char*>(&command_)) + sizeof(serialized_json_without_data_base64_encoded_data_));
}

OutgoingCommandQueueItem::~OutgoingCommandQueueItem() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueueItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutgoingCommandQueueItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serialized_json_without_data_base64_encoded_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete serialized_json_without_data_base64_encoded_data_;
}

void OutgoingCommandQueueItem::ArenaDtor(void* object) {
  OutgoingCommandQueueItem* _this = reinterpret_cast< OutgoingCommandQueueItem* >(object);
  (void)_this;
}
void OutgoingCommandQueueItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutgoingCommandQueueItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutgoingCommandQueueItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_to_data_map_entries_.Clear();
  large_data_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_json_without_data_base64_encoded_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(serialized_json_without_data_base64_encoded_data_ != nullptr);
      serialized_json_without_data_base64_encoded_data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueueItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string serialized_json_without_data_base64_encoded_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serialized_json_without_data_base64_encoded_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid_to_data_map_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_serialized_json_without_data_base64_encoded_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataReference large_data_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_large_data_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutgoingCommandQueueItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueueItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command(this), target, stream);
  }

  // optional string serialized_json_without_data_base64_encoded_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serialized_json_without_data_base64_encoded_string().data(), static_cast<int>(this->_internal_serialized_json_without_data_base64_encoded_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serialized_json_without_data_base64_encoded_string(), target);
  }

  // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuid_to_data_map_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_uuid_to_data_map_entries(i), target, stream);
  }

  // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::serialized_json_without_data_base64_encoded_data(this), target, stream);
  }

  // repeated .TSP.DataReference large_data_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_large_data_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_large_data_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueueItem)
  return target;
}

size_t OutgoingCommandQueueItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueueItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
  total_size += 1UL * this->_internal_uuid_to_data_map_entries_size();
  for (const auto& msg : this->uuid_to_data_map_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference large_data_list = 5;
  total_size += 1UL * this->_internal_large_data_list_size();
  for (const auto& msg : this->large_data_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string serialized_json_without_data_base64_encoded_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialized_json_without_data_base64_encoded_string());
    }

    // optional .TSP.Reference command = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *serialized_json_without_data_base64_encoded_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueueItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutgoingCommandQueueItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueueItem::GetClassData() const { return &_class_data_; }

void OutgoingCommandQueueItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutgoingCommandQueueItem *>(to)->MergeFrom(
      static_cast<const OutgoingCommandQueueItem &>(from));
}


void OutgoingCommandQueueItem::MergeFrom(const OutgoingCommandQueueItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueueItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuid_to_data_map_entries_.MergeFrom(from.uuid_to_data_map_entries_);
  large_data_list_.MergeFrom(from.large_data_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_json_without_data_base64_encoded_string(from._internal_serialized_json_without_data_base64_encoded_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_command()->::TSP::Reference::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_serialized_json_without_data_base64_encoded_data()->::TSP::DataReference::MergeFrom(from._internal_serialized_json_without_data_base64_encoded_data());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueueItem::CopyFrom(const OutgoingCommandQueueItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueueItem::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuid_to_data_map_entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(large_data_list_)) return false;
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  if (_internal_has_serialized_json_without_data_base64_encoded_data()) {
    if (!serialized_json_without_data_base64_encoded_data_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueueItem::InternalSwap(OutgoingCommandQueueItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uuid_to_data_map_entries_.InternalSwap(&other->uuid_to_data_map_entries_);
  large_data_list_.InternalSwap(&other->large_data_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_json_without_data_base64_encoded_string_, GetArenaForAllocation(),
      &other->serialized_json_without_data_base64_encoded_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItem, serialized_json_without_data_base64_encoded_data_)
      + sizeof(OutgoingCommandQueueItem::serialized_json_without_data_base64_encoded_data_)
      - PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItem, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueueItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[57]);
}

// ===================================================================

class OutgoingCommandQueueItemUUIDToDataMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueueItemUUIDToDataMapEntry>()._has_bits_);
  static const ::TSP::UUID& uuid(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& data(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
OutgoingCommandQueueItemUUIDToDataMapEntry::_Internal::uuid(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg) {
  return *msg->uuid_;
}
const ::TSP::DataReference&
OutgoingCommandQueueItemUUIDToDataMapEntry::_Internal::data(const OutgoingCommandQueueItemUUIDToDataMapEntry* msg) {
  return *msg->data_;
}
void OutgoingCommandQueueItemUUIDToDataMapEntry::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OutgoingCommandQueueItemUUIDToDataMapEntry::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
OutgoingCommandQueueItemUUIDToDataMapEntry::OutgoingCommandQueueItemUUIDToDataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
}
OutgoingCommandQueueItemUUIDToDataMapEntry::OutgoingCommandQueueItemUUIDToDataMapEntry(const OutgoingCommandQueueItemUUIDToDataMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::TSP::DataReference(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
}

inline void OutgoingCommandQueueItemUUIDToDataMapEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(data_));
}

OutgoingCommandQueueItemUUIDToDataMapEntry::~OutgoingCommandQueueItemUUIDToDataMapEntry() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutgoingCommandQueueItemUUIDToDataMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete data_;
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::ArenaDtor(void* object) {
  OutgoingCommandQueueItemUUIDToDataMapEntry* _this = reinterpret_cast< OutgoingCommandQueueItemUUIDToDataMapEntry* >(object);
  (void)_this;
}
void OutgoingCommandQueueItemUUIDToDataMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutgoingCommandQueueItemUUIDToDataMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueueItemUUIDToDataMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.DataReference data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutgoingCommandQueueItemUUIDToDataMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // required .TSP.DataReference data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  return target;
}

size_t OutgoingCommandQueueItemUUIDToDataMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  size_t total_size = 0;

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }

  if (_internal_has_data()) {
    // required .TSP.DataReference data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return total_size;
}
size_t OutgoingCommandQueueItemUUIDToDataMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);

    // required .TSP.DataReference data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueueItemUUIDToDataMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutgoingCommandQueueItemUUIDToDataMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueueItemUUIDToDataMapEntry::GetClassData() const { return &_class_data_; }

void OutgoingCommandQueueItemUUIDToDataMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutgoingCommandQueueItemUUIDToDataMapEntry *>(to)->MergeFrom(
      static_cast<const OutgoingCommandQueueItemUUIDToDataMapEntry &>(from));
}


void OutgoingCommandQueueItemUUIDToDataMapEntry::MergeFrom(const OutgoingCommandQueueItemUUIDToDataMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::TSP::DataReference::MergeFrom(from._internal_data());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::CopyFrom(const OutgoingCommandQueueItemUUIDToDataMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueueItemUUIDToDataMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!data_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueueItemUUIDToDataMapEntry::InternalSwap(OutgoingCommandQueueItemUUIDToDataMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItemUUIDToDataMapEntry, data_)
      + sizeof(OutgoingCommandQueueItemUUIDToDataMapEntry::data_)
      - PROTOBUF_FIELD_OFFSET(OutgoingCommandQueueItemUUIDToDataMapEntry, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueueItemUUIDToDataMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[58]);
}

// ===================================================================

class CollaborationDocumentSessionState_AcknowledgementObserverEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationDocumentSessionState_AcknowledgementObserverEntry>()._has_bits_);
  static const ::TSP::UUID& command_identifier(const CollaborationDocumentSessionState_AcknowledgementObserverEntry* msg);
  static void set_has_command_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CollaborationDocumentSessionState_AcknowledgementObserverEntry::_Internal::command_identifier(const CollaborationDocumentSessionState_AcknowledgementObserverEntry* msg) {
  return *msg->command_identifier_;
}
void CollaborationDocumentSessionState_AcknowledgementObserverEntry::clear_command_identifier() {
  if (command_identifier_ != nullptr) command_identifier_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CollaborationDocumentSessionState_AcknowledgementObserverEntry::clear_acknowledgement_observers() {
  acknowledgement_observers_.Clear();
}
CollaborationDocumentSessionState_AcknowledgementObserverEntry::CollaborationDocumentSessionState_AcknowledgementObserverEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  acknowledgement_observers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
}
CollaborationDocumentSessionState_AcknowledgementObserverEntry::CollaborationDocumentSessionState_AcknowledgementObserverEntry(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      acknowledgement_observers_(from.acknowledgement_observers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command_identifier()) {
    command_identifier_ = new ::TSP::UUID(*from.command_identifier_);
  } else {
    command_identifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
}

inline void CollaborationDocumentSessionState_AcknowledgementObserverEntry::SharedCtor() {
command_identifier_ = nullptr;
}

CollaborationDocumentSessionState_AcknowledgementObserverEntry::~CollaborationDocumentSessionState_AcknowledgementObserverEntry() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationDocumentSessionState_AcknowledgementObserverEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete command_identifier_;
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::ArenaDtor(void* object) {
  CollaborationDocumentSessionState_AcknowledgementObserverEntry* _this = reinterpret_cast< CollaborationDocumentSessionState_AcknowledgementObserverEntry* >(object);
  (void)_this;
}
void CollaborationDocumentSessionState_AcknowledgementObserverEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationDocumentSessionState_AcknowledgementObserverEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acknowledgement_observers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_identifier_ != nullptr);
    command_identifier_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationDocumentSessionState_AcknowledgementObserverEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID command_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference acknowledgement_observers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acknowledgement_observers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationDocumentSessionState_AcknowledgementObserverEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID command_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::command_identifier(this), target, stream);
  }

  // repeated .TSP.Reference acknowledgement_observers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_acknowledgement_observers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_acknowledgement_observers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  return target;
}

size_t CollaborationDocumentSessionState_AcknowledgementObserverEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  size_t total_size = 0;

  // required .TSP.UUID command_identifier = 1;
  if (_internal_has_command_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_identifier_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference acknowledgement_observers = 2;
  total_size += 1UL * this->_internal_acknowledgement_observers_size();
  for (const auto& msg : this->acknowledgement_observers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationDocumentSessionState_AcknowledgementObserverEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationDocumentSessionState_AcknowledgementObserverEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationDocumentSessionState_AcknowledgementObserverEntry::GetClassData() const { return &_class_data_; }

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationDocumentSessionState_AcknowledgementObserverEntry *>(to)->MergeFrom(
      static_cast<const CollaborationDocumentSessionState_AcknowledgementObserverEntry &>(from));
}


void CollaborationDocumentSessionState_AcknowledgementObserverEntry::MergeFrom(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acknowledgement_observers_.MergeFrom(from.acknowledgement_observers_);
  if (from._internal_has_command_identifier()) {
    _internal_mutable_command_identifier()->::TSP::UUID::MergeFrom(from._internal_command_identifier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::CopyFrom(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationDocumentSessionState_AcknowledgementObserverEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(acknowledgement_observers_)) return false;
  if (_internal_has_command_identifier()) {
    if (!command_identifier_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationDocumentSessionState_AcknowledgementObserverEntry::InternalSwap(CollaborationDocumentSessionState_AcknowledgementObserverEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acknowledgement_observers_.InternalSwap(&other->acknowledgement_observers_);
  swap(command_identifier_, other->command_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationDocumentSessionState_AcknowledgementObserverEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[59]);
}

// ===================================================================

class CollaborationDocumentSessionState::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaborationDocumentSessionState>()._has_bits_);
  static void set_has_mailbox_request_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& mailbox_request_document_revision_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_mailbox_request_document_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_command_send_marker_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::UUID& last_command_send_marker_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_last_command_send_marker_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& last_too_old_command_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_last_too_old_command_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& unprocessed_operation_entries_pending_resume_process_diffs(const CollaborationDocumentSessionState* msg);
  static void set_has_unprocessed_operation_entries_pending_resume_process_diffs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& send_pending_command_queue(const CollaborationDocumentSessionState* msg);
  static void set_has_send_pending_command_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& last_enqueued_document_load_command_identifier(const CollaborationDocumentSessionState* msg);
  static void set_has_last_enqueued_document_load_command_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::mailbox_request_document_revision_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->mailbox_request_document_revision_identifier_;
}
const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::last_command_send_marker_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->last_command_send_marker_identifier_;
}
const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::last_too_old_command_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->last_too_old_command_identifier_;
}
const ::TSP::Reference&
CollaborationDocumentSessionState::_Internal::unprocessed_operation_entries_pending_resume_process_diffs(const CollaborationDocumentSessionState* msg) {
  return *msg->unprocessed_operation_entries_pending_resume_process_diffs_;
}
const ::TSP::Reference&
CollaborationDocumentSessionState::_Internal::send_pending_command_queue(const CollaborationDocumentSessionState* msg) {
  return *msg->send_pending_command_queue_;
}
const ::TSP::UUID&
CollaborationDocumentSessionState::_Internal::last_enqueued_document_load_command_identifier(const CollaborationDocumentSessionState* msg) {
  return *msg->last_enqueued_document_load_command_identifier_;
}
void CollaborationDocumentSessionState::clear_rsvp_command_queue_items() {
  rsvp_command_queue_items_.Clear();
}
void CollaborationDocumentSessionState::clear_collaborator_cursor_transformer_entries() {
  collaborator_cursor_transformer_entries_.Clear();
}
void CollaborationDocumentSessionState::clear_acknowledged_commands_pending_resume_process_diffs() {
  acknowledged_commands_pending_resume_process_diffs_.Clear();
}
void CollaborationDocumentSessionState::clear_unprocessed_commands_pending_resume_process_diffs() {
  unprocessed_commands_pending_resume_process_diffs_.Clear();
}
void CollaborationDocumentSessionState::clear_transformer_from_unprocessed_command_operations_entries() {
  transformer_from_unprocessed_command_operations_entries_.Clear();
}
void CollaborationDocumentSessionState::clear_mailbox_request_document_revision_identifier() {
  if (mailbox_request_document_revision_identifier_ != nullptr) mailbox_request_document_revision_identifier_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CollaborationDocumentSessionState::clear_last_command_send_marker_identifier() {
  if (last_command_send_marker_identifier_ != nullptr) last_command_send_marker_identifier_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CollaborationDocumentSessionState::clear_skipped_acknowledged_commands_pending_resume_process_diffs() {
  skipped_acknowledged_commands_pending_resume_process_diffs_.Clear();
}
void CollaborationDocumentSessionState::clear_last_too_old_command_identifier() {
  if (last_too_old_command_identifier_ != nullptr) last_too_old_command_identifier_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CollaborationDocumentSessionState::clear_unprocessed_operation_entries_pending_resume_process_diffs() {
  if (unprocessed_operation_entries_pending_resume_process_diffs_ != nullptr) unprocessed_operation_entries_pending_resume_process_diffs_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CollaborationDocumentSessionState::clear_send_pending_command_queue() {
  if (send_pending_command_queue_ != nullptr) send_pending_command_queue_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CollaborationDocumentSessionState::clear_last_enqueued_document_load_command_identifier() {
  if (last_enqueued_document_load_command_identifier_ != nullptr) last_enqueued_document_load_command_identifier_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CollaborationDocumentSessionState::CollaborationDocumentSessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collaborator_ids_(arena),
  rsvp_command_queue_items_(arena),
  collaborator_cursor_transformer_entries_(arena),
  acknowledged_commands_pending_resume_process_diffs_(arena),
  unprocessed_commands_pending_resume_process_diffs_(arena),
  command_acknowledgement_observer_entries_(arena),
  transformer_from_unprocessed_command_operations_entries_(arena),
  skipped_acknowledged_commands_pending_resume_process_diffs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CollaborationDocumentSessionState)
}
CollaborationDocumentSessionState::CollaborationDocumentSessionState(const CollaborationDocumentSessionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      collaborator_ids_(from.collaborator_ids_),
      rsvp_command_queue_items_(from.rsvp_command_queue_items_),
      collaborator_cursor_transformer_entries_(from.collaborator_cursor_transformer_entries_),
      acknowledged_commands_pending_resume_process_diffs_(from.acknowledged_commands_pending_resume_process_diffs_),
      unprocessed_commands_pending_resume_process_diffs_(from.unprocessed_commands_pending_resume_process_diffs_),
      command_acknowledgement_observer_entries_(from.command_acknowledgement_observer_entries_),
      transformer_from_unprocessed_command_operations_entries_(from.transformer_from_unprocessed_command_operations_entries_),
      skipped_acknowledged_commands_pending_resume_process_diffs_(from.skipped_acknowledged_commands_pending_resume_process_diffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mailbox_request_document_revision_identifier()) {
    mailbox_request_document_revision_identifier_ = new ::TSP::UUID(*from.mailbox_request_document_revision_identifier_);
  } else {
    mailbox_request_document_revision_identifier_ = nullptr;
  }
  if (from._internal_has_last_command_send_marker_identifier()) {
    last_command_send_marker_identifier_ = new ::TSP::UUID(*from.last_command_send_marker_identifier_);
  } else {
    last_command_send_marker_identifier_ = nullptr;
  }
  if (from._internal_has_last_too_old_command_identifier()) {
    last_too_old_command_identifier_ = new ::TSP::UUID(*from.last_too_old_command_identifier_);
  } else {
    last_too_old_command_identifier_ = nullptr;
  }
  if (from._internal_has_unprocessed_operation_entries_pending_resume_process_diffs()) {
    unprocessed_operation_entries_pending_resume_process_diffs_ = new ::TSP::Reference(*from.unprocessed_operation_entries_pending_resume_process_diffs_);
  } else {
    unprocessed_operation_entries_pending_resume_process_diffs_ = nullptr;
  }
  if (from._internal_has_send_pending_command_queue()) {
    send_pending_command_queue_ = new ::TSP::Reference(*from.send_pending_command_queue_);
  } else {
    send_pending_command_queue_ = nullptr;
  }
  if (from._internal_has_last_enqueued_document_load_command_identifier()) {
    last_enqueued_document_load_command_identifier_ = new ::TSP::UUID(*from.last_enqueued_document_load_command_identifier_);
  } else {
    last_enqueued_document_load_command_identifier_ = nullptr;
  }
  ::memcpy(&mailbox_request_document_revision_sequence_, &from.mailbox_request_document_revision_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_command_send_marker_sequence_) -
    reinterpret_cast<char*>(&mailbox_request_document_revision_sequence_)) + sizeof(last_command_send_marker_sequence_));
  // @@protoc_insertion_point(copy_constructor:TSK.CollaborationDocumentSessionState)
}

inline void CollaborationDocumentSessionState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mailbox_request_document_revision_identifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_command_send_marker_sequence_) -
    reinterpret_cast<char*>(&mailbox_request_document_revision_identifier_)) + sizeof(last_command_send_marker_sequence_));
}

CollaborationDocumentSessionState::~CollaborationDocumentSessionState() {
  // @@protoc_insertion_point(destructor:TSK.CollaborationDocumentSessionState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CollaborationDocumentSessionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mailbox_request_document_revision_identifier_;
  if (this != internal_default_instance()) delete last_command_send_marker_identifier_;
  if (this != internal_default_instance()) delete last_too_old_command_identifier_;
  if (this != internal_default_instance()) delete unprocessed_operation_entries_pending_resume_process_diffs_;
  if (this != internal_default_instance()) delete send_pending_command_queue_;
  if (this != internal_default_instance()) delete last_enqueued_document_load_command_identifier_;
}

void CollaborationDocumentSessionState::ArenaDtor(void* object) {
  CollaborationDocumentSessionState* _this = reinterpret_cast< CollaborationDocumentSessionState* >(object);
  (void)_this;
}
void CollaborationDocumentSessionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollaborationDocumentSessionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollaborationDocumentSessionState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CollaborationDocumentSessionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collaborator_ids_.Clear();
  rsvp_command_queue_items_.Clear();
  collaborator_cursor_transformer_entries_.Clear();
  acknowledged_commands_pending_resume_process_diffs_.Clear();
  unprocessed_commands_pending_resume_process_diffs_.Clear();
  command_acknowledgement_observer_entries_.Clear();
  transformer_from_unprocessed_command_operations_entries_.Clear();
  skipped_acknowledged_commands_pending_resume_process_diffs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mailbox_request_document_revision_identifier_ != nullptr);
      mailbox_request_document_revision_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_command_send_marker_identifier_ != nullptr);
      last_command_send_marker_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(last_too_old_command_identifier_ != nullptr);
      last_too_old_command_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(unprocessed_operation_entries_pending_resume_process_diffs_ != nullptr);
      unprocessed_operation_entries_pending_resume_process_diffs_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(send_pending_command_queue_ != nullptr);
      send_pending_command_queue_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(last_enqueued_document_load_command_identifier_ != nullptr);
      last_enqueued_document_load_command_identifier_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&mailbox_request_document_revision_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_) -
        reinterpret_cast<char*>(&mailbox_request_document_revision_sequence_)) + sizeof(last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&count_of_send_pending_command_queue_items_moved_from_rsvp_queue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_command_send_marker_sequence_) -
        reinterpret_cast<char*>(&count_of_send_pending_command_queue_items_moved_from_rsvp_queue_)) + sizeof(last_command_send_marker_sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborationDocumentSessionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string collaborator_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collaborator_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CollaborationDocumentSessionState.collaborator_ids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference rsvp_command_queue_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsvp_command_queue_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collaborator_cursor_transformer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acknowledged_commands_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unprocessed_commands_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command_acknowledgement_observer_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transformer_from_unprocessed_command_operations_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 mailbox_request_document_revision_sequence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mailbox_request_document_revision_sequence(&has_bits);
          mailbox_request_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mailbox_request_document_revision_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(&has_bits);
          last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_command_send_marker_sequence = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_last_command_send_marker_sequence(&has_bits);
          last_command_send_marker_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID last_command_send_marker_identifier = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_command_send_marker_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skipped_acknowledged_commands_pending_resume_process_diffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID last_too_old_command_identifier = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_too_old_command_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference send_pending_command_queue = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_pending_command_queue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(&has_bits);
          count_of_send_pending_command_queue_items_moved_from_rsvp_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_enqueued_document_load_command_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollaborationDocumentSessionState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CollaborationDocumentSessionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collaborator_ids = 1;
  for (int i = 0, n = this->_internal_collaborator_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collaborator_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CollaborationDocumentSessionState.collaborator_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated .TSP.Reference rsvp_command_queue_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rsvp_command_queue_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rsvp_command_queue_items(i), target, stream);
  }

  // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collaborator_cursor_transformer_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_collaborator_cursor_transformer_entries(i), target, stream);
  }

  // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_acknowledged_commands_pending_resume_process_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_acknowledged_commands_pending_resume_process_diffs(i), target, stream);
  }

  // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unprocessed_commands_pending_resume_process_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_unprocessed_commands_pending_resume_process_diffs(i), target, stream);
  }

  // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_command_acknowledgement_observer_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_command_acknowledgement_observer_entries(i), target, stream);
  }

  // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transformer_from_unprocessed_command_operations_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_transformer_from_unprocessed_command_operations_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 mailbox_request_document_revision_sequence = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mailbox_request_document_revision_sequence(), target);
  }

  // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::mailbox_request_document_revision_identifier(this), target, stream);
  }

  // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(), target);
  }

  // optional int32 last_command_send_marker_sequence = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_last_command_send_marker_sequence(), target);
  }

  // optional .TSP.UUID last_command_send_marker_identifier = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::last_command_send_marker_identifier(this), target, stream);
  }

  // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skipped_acknowledged_commands_pending_resume_process_diffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_skipped_acknowledged_commands_pending_resume_process_diffs(i), target, stream);
  }

  // optional .TSP.UUID last_too_old_command_identifier = 16;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::last_too_old_command_identifier(this), target, stream);
  }

  // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::unprocessed_operation_entries_pending_resume_process_diffs(this), target, stream);
  }

  // optional .TSP.Reference send_pending_command_queue = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::send_pending_command_queue(this), target, stream);
  }

  // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(), target);
  }

  // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::last_enqueued_document_load_command_identifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CollaborationDocumentSessionState)
  return target;
}

size_t CollaborationDocumentSessionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CollaborationDocumentSessionState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collaborator_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collaborator_ids_.size());
  for (int i = 0, n = collaborator_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collaborator_ids_.Get(i));
  }

  // repeated .TSP.Reference rsvp_command_queue_items = 3;
  total_size += 1UL * this->_internal_rsvp_command_queue_items_size();
  for (const auto& msg : this->rsvp_command_queue_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
  total_size += 1UL * this->_internal_collaborator_cursor_transformer_entries_size();
  for (const auto& msg : this->collaborator_cursor_transformer_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
  total_size += 1UL * this->_internal_acknowledged_commands_pending_resume_process_diffs_size();
  for (const auto& msg : this->acknowledged_commands_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
  total_size += 1UL * this->_internal_unprocessed_commands_pending_resume_process_diffs_size();
  for (const auto& msg : this->unprocessed_commands_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
  total_size += 1UL * this->_internal_command_acknowledgement_observer_entries_size();
  for (const auto& msg : this->command_acknowledgement_observer_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
  total_size += 1UL * this->_internal_transformer_from_unprocessed_command_operations_entries_size();
  for (const auto& msg : this->transformer_from_unprocessed_command_operations_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
  total_size += 1UL * this->_internal_skipped_acknowledged_commands_pending_resume_process_diffs_size();
  for (const auto& msg : this->skipped_acknowledged_commands_pending_resume_process_diffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mailbox_request_document_revision_identifier_);
    }

    // optional .TSP.UUID last_command_send_marker_identifier = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_command_send_marker_identifier_);
    }

    // optional .TSP.UUID last_too_old_command_identifier = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_too_old_command_identifier_);
    }

    // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unprocessed_operation_entries_pending_resume_process_diffs_);
    }

    // optional .TSP.Reference send_pending_command_queue = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_pending_command_queue_);
    }

    // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_enqueued_document_load_command_identifier_);
    }

    // optional int32 mailbox_request_document_revision_sequence = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mailbox_request_document_revision_sequence());
    }

    // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue());
    }

    // optional int32 last_command_send_marker_sequence = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_command_send_marker_sequence());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborationDocumentSessionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollaborationDocumentSessionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborationDocumentSessionState::GetClassData() const { return &_class_data_; }

void CollaborationDocumentSessionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CollaborationDocumentSessionState *>(to)->MergeFrom(
      static_cast<const CollaborationDocumentSessionState &>(from));
}


void CollaborationDocumentSessionState::MergeFrom(const CollaborationDocumentSessionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CollaborationDocumentSessionState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collaborator_ids_.MergeFrom(from.collaborator_ids_);
  rsvp_command_queue_items_.MergeFrom(from.rsvp_command_queue_items_);
  collaborator_cursor_transformer_entries_.MergeFrom(from.collaborator_cursor_transformer_entries_);
  acknowledged_commands_pending_resume_process_diffs_.MergeFrom(from.acknowledged_commands_pending_resume_process_diffs_);
  unprocessed_commands_pending_resume_process_diffs_.MergeFrom(from.unprocessed_commands_pending_resume_process_diffs_);
  command_acknowledgement_observer_entries_.MergeFrom(from.command_acknowledgement_observer_entries_);
  transformer_from_unprocessed_command_operations_entries_.MergeFrom(from.transformer_from_unprocessed_command_operations_entries_);
  skipped_acknowledged_commands_pending_resume_process_diffs_.MergeFrom(from.skipped_acknowledged_commands_pending_resume_process_diffs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mailbox_request_document_revision_identifier()->::TSP::UUID::MergeFrom(from._internal_mailbox_request_document_revision_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_last_command_send_marker_identifier()->::TSP::UUID::MergeFrom(from._internal_last_command_send_marker_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_last_too_old_command_identifier()->::TSP::UUID::MergeFrom(from._internal_last_too_old_command_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs()->::TSP::Reference::MergeFrom(from._internal_unprocessed_operation_entries_pending_resume_process_diffs());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_send_pending_command_queue()->::TSP::Reference::MergeFrom(from._internal_send_pending_command_queue());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_last_enqueued_document_load_command_identifier()->::TSP::UUID::MergeFrom(from._internal_last_enqueued_document_load_command_identifier());
    }
    if (cached_has_bits & 0x00000040u) {
      mailbox_request_document_revision_sequence_ = from.mailbox_request_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_ = from.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      count_of_send_pending_command_queue_items_moved_from_rsvp_queue_ = from.count_of_send_pending_command_queue_items_moved_from_rsvp_queue_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_command_send_marker_sequence_ = from.last_command_send_marker_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborationDocumentSessionState::CopyFrom(const CollaborationDocumentSessionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CollaborationDocumentSessionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborationDocumentSessionState::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rsvp_command_queue_items_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(collaborator_cursor_transformer_entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(acknowledged_commands_pending_resume_process_diffs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(unprocessed_commands_pending_resume_process_diffs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(command_acknowledgement_observer_entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(transformer_from_unprocessed_command_operations_entries_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(skipped_acknowledged_commands_pending_resume_process_diffs_)) return false;
  if (_internal_has_mailbox_request_document_revision_identifier()) {
    if (!mailbox_request_document_revision_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_last_command_send_marker_identifier()) {
    if (!last_command_send_marker_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_last_too_old_command_identifier()) {
    if (!last_too_old_command_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_unprocessed_operation_entries_pending_resume_process_diffs()) {
    if (!unprocessed_operation_entries_pending_resume_process_diffs_->IsInitialized()) return false;
  }
  if (_internal_has_send_pending_command_queue()) {
    if (!send_pending_command_queue_->IsInitialized()) return false;
  }
  if (_internal_has_last_enqueued_document_load_command_identifier()) {
    if (!last_enqueued_document_load_command_identifier_->IsInitialized()) return false;
  }
  return true;
}

void CollaborationDocumentSessionState::InternalSwap(CollaborationDocumentSessionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  collaborator_ids_.InternalSwap(&other->collaborator_ids_);
  rsvp_command_queue_items_.InternalSwap(&other->rsvp_command_queue_items_);
  collaborator_cursor_transformer_entries_.InternalSwap(&other->collaborator_cursor_transformer_entries_);
  acknowledged_commands_pending_resume_process_diffs_.InternalSwap(&other->acknowledged_commands_pending_resume_process_diffs_);
  unprocessed_commands_pending_resume_process_diffs_.InternalSwap(&other->unprocessed_commands_pending_resume_process_diffs_);
  command_acknowledgement_observer_entries_.InternalSwap(&other->command_acknowledgement_observer_entries_);
  transformer_from_unprocessed_command_operations_entries_.InternalSwap(&other->transformer_from_unprocessed_command_operations_entries_);
  skipped_acknowledged_commands_pending_resume_process_diffs_.InternalSwap(&other->skipped_acknowledged_commands_pending_resume_process_diffs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaborationDocumentSessionState, last_command_send_marker_sequence_)
      + sizeof(CollaborationDocumentSessionState::last_command_send_marker_sequence_)
      - PROTOBUF_FIELD_OFFSET(CollaborationDocumentSessionState, mailbox_request_document_revision_identifier_)>(
          reinterpret_cast<char*>(&mailbox_request_document_revision_identifier_),
          reinterpret_cast<char*>(&other->mailbox_request_document_revision_identifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborationDocumentSessionState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[60]);
}

// ===================================================================

class NativeContentDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<NativeContentDescription>()._has_bits_);
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_document_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void NativeContentDescription::clear_drawable_descriptions() {
  drawable_descriptions_.Clear();
}
NativeContentDescription::NativeContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  drawable_descriptions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.NativeContentDescription)
}
NativeContentDescription::NativeContentDescription(const NativeContentDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      drawable_descriptions_(from.drawable_descriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_name()) {
    app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_name(), 
      GetArenaForAllocation());
  }
  app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_version()) {
    app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_version(), 
      GetArenaForAllocation());
  }
  document_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_document_id()) {
    document_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSK.NativeContentDescription)
}

inline void NativeContentDescription::SharedCtor() {
app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
document_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NativeContentDescription::~NativeContentDescription() {
  // @@protoc_insertion_point(destructor:TSK.NativeContentDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NativeContentDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NativeContentDescription::ArenaDtor(void* object) {
  NativeContentDescription* _this = reinterpret_cast< NativeContentDescription* >(object);
  (void)_this;
}
void NativeContentDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NativeContentDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NativeContentDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.NativeContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawable_descriptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      app_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      document_id_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NativeContentDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.NativeContentDescription.app_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string app_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.NativeContentDescription.app_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string document_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_document_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.NativeContentDescription.document_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawable_descriptions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NativeContentDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.NativeContentDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.NativeContentDescription.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // optional string app_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_version().data(), static_cast<int>(this->_internal_app_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.NativeContentDescription.app_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_version(), target);
  }

  // optional string document_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_id().data(), static_cast<int>(this->_internal_document_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.NativeContentDescription.document_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_document_id(), target);
  }

  // repeated .TSP.Reference drawable_descriptions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_drawable_descriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.NativeContentDescription)
  return target;
}

size_t NativeContentDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.NativeContentDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawable_descriptions = 4;
  total_size += 1UL * this->_internal_drawable_descriptions_size();
  for (const auto& msg : this->drawable_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string app_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional string app_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_version());
    }

    // optional string document_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NativeContentDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NativeContentDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NativeContentDescription::GetClassData() const { return &_class_data_; }

void NativeContentDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NativeContentDescription *>(to)->MergeFrom(
      static_cast<const NativeContentDescription &>(from));
}


void NativeContentDescription::MergeFrom(const NativeContentDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.NativeContentDescription)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawable_descriptions_.MergeFrom(from.drawable_descriptions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_app_version(from._internal_app_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_document_id(from._internal_document_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NativeContentDescription::CopyFrom(const NativeContentDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.NativeContentDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeContentDescription::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(drawable_descriptions_)) return false;
  return true;
}

void NativeContentDescription::InternalSwap(NativeContentDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drawable_descriptions_.InternalSwap(&other->drawable_descriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_name_, GetArenaForAllocation(),
      &other->app_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_version_, GetArenaForAllocation(),
      &other->app_version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &document_id_, GetArenaForAllocation(),
      &other->document_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NativeContentDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[61]);
}

// ===================================================================

class StructuredTextImportSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredTextImportSettings>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transpose_rows_and_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_collapse_consecutive(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::IndexSet& column_offsets(const StructuredTextImportSettings* msg);
  static void set_has_column_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_automatic_delimiters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_automatic_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_source_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSP::IndexSet&
StructuredTextImportSettings::_Internal::column_offsets(const StructuredTextImportSettings* msg) {
  return *msg->column_offsets_;
}
void StructuredTextImportSettings::clear_column_offsets() {
  if (column_offsets_ != nullptr) column_offsets_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StructuredTextImportSettings::StructuredTextImportSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  decimal_separators_(arena),
  thousands_separators_(arena),
  delimiters_(arena),
  text_qualifiers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.StructuredTextImportSettings)
}
StructuredTextImportSettings::StructuredTextImportSettings(const StructuredTextImportSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      decimal_separators_(from.decimal_separators_),
      thousands_separators_(from.thousands_separators_),
      delimiters_(from.delimiters_),
      text_qualifiers_(from.text_qualifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_offsets()) {
    column_offsets_ = new ::TSP::IndexSet(*from.column_offsets_);
  } else {
    column_offsets_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&automatic_offsets_) -
    reinterpret_cast<char*>(&type_)) + sizeof(automatic_offsets_));
  // @@protoc_insertion_point(copy_constructor:TSK.StructuredTextImportSettings)
}

inline void StructuredTextImportSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_offsets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&automatic_offsets_) -
    reinterpret_cast<char*>(&column_offsets_)) + sizeof(automatic_offsets_));
}

StructuredTextImportSettings::~StructuredTextImportSettings() {
  // @@protoc_insertion_point(destructor:TSK.StructuredTextImportSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredTextImportSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete column_offsets_;
}

void StructuredTextImportSettings::ArenaDtor(void* object) {
  StructuredTextImportSettings* _this = reinterpret_cast< StructuredTextImportSettings* >(object);
  (void)_this;
}
void StructuredTextImportSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredTextImportSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredTextImportSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.StructuredTextImportSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decimal_separators_.Clear();
  thousands_separators_.Clear();
  delimiters_.Clear();
  text_qualifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(column_offsets_ != nullptr);
    column_offsets_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&automatic_offsets_) -
        reinterpret_cast<char*>(&type_)) + sizeof(automatic_offsets_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredTextImportSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.StructuredTextImportType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::StructuredTextImportType_IsValid(val))) {
            _internal_set_type(static_cast<::TSK::StructuredTextImportType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 starting_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_starting_row(&has_bits);
          starting_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string decimal_separators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_decimal_separators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.StructuredTextImportSettings.decimal_separators");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string thousands_separators = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_thousands_separators();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.StructuredTextImportSettings.thousands_separators");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool transpose_rows_and_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_transpose_rows_and_columns(&has_bits);
          transpose_rows_and_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string delimiters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_delimiters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.StructuredTextImportSettings.delimiters");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string text_qualifiers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_text_qualifiers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.StructuredTextImportSettings.text_qualifiers");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool collapse_consecutive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_collapse_consecutive(&has_bits);
          collapse_consecutive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.IndexSet column_offsets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_offsets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool automatic_delimiters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_automatic_delimiters(&has_bits);
          automatic_delimiters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool automatic_offsets = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_automatic_offsets(&has_bits);
          automatic_offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_encoding = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_source_encoding(&has_bits);
          source_encoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructuredTextImportSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.StructuredTextImportSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.StructuredTextImportType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required int32 starting_row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_starting_row(), target);
  }

  // repeated string decimal_separators = 3;
  for (int i = 0, n = this->_internal_decimal_separators_size(); i < n; i++) {
    const auto& s = this->_internal_decimal_separators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.decimal_separators");
    target = stream->WriteString(3, s, target);
  }

  // repeated string thousands_separators = 4;
  for (int i = 0, n = this->_internal_thousands_separators_size(); i < n; i++) {
    const auto& s = this->_internal_thousands_separators(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.thousands_separators");
    target = stream->WriteString(4, s, target);
  }

  // optional bool transpose_rows_and_columns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_transpose_rows_and_columns(), target);
  }

  // repeated string delimiters = 6;
  for (int i = 0, n = this->_internal_delimiters_size(); i < n; i++) {
    const auto& s = this->_internal_delimiters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.delimiters");
    target = stream->WriteString(6, s, target);
  }

  // repeated string text_qualifiers = 7;
  for (int i = 0, n = this->_internal_text_qualifiers_size(); i < n; i++) {
    const auto& s = this->_internal_text_qualifiers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.StructuredTextImportSettings.text_qualifiers");
    target = stream->WriteString(7, s, target);
  }

  // optional bool collapse_consecutive = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_collapse_consecutive(), target);
  }

  // optional .TSP.IndexSet column_offsets = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::column_offsets(this), target, stream);
  }

  // optional bool automatic_delimiters = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_automatic_delimiters(), target);
  }

  // optional bool automatic_offsets = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_automatic_offsets(), target);
  }

  // optional uint64 source_encoding = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_source_encoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.StructuredTextImportSettings)
  return target;
}

size_t StructuredTextImportSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.StructuredTextImportSettings)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .TSK.StructuredTextImportType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_starting_row()) {
    // required int32 starting_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starting_row());
  }

  return total_size;
}
size_t StructuredTextImportSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.StructuredTextImportSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.StructuredTextImportType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required int32 starting_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starting_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string decimal_separators = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(decimal_separators_.size());
  for (int i = 0, n = decimal_separators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      decimal_separators_.Get(i));
  }

  // repeated string thousands_separators = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(thousands_separators_.size());
  for (int i = 0, n = thousands_separators_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      thousands_separators_.Get(i));
  }

  // repeated string delimiters = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(delimiters_.size());
  for (int i = 0, n = delimiters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      delimiters_.Get(i));
  }

  // repeated string text_qualifiers = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(text_qualifiers_.size());
  for (int i = 0, n = text_qualifiers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      text_qualifiers_.Get(i));
  }

  // optional .TSP.IndexSet column_offsets = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_offsets_);
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 source_encoding = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_encoding());
    }

    // optional bool transpose_rows_and_columns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool collapse_consecutive = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_delimiters = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_offsets = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructuredTextImportSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StructuredTextImportSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructuredTextImportSettings::GetClassData() const { return &_class_data_; }

void StructuredTextImportSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StructuredTextImportSettings *>(to)->MergeFrom(
      static_cast<const StructuredTextImportSettings &>(from));
}


void StructuredTextImportSettings::MergeFrom(const StructuredTextImportSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.StructuredTextImportSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decimal_separators_.MergeFrom(from.decimal_separators_);
  thousands_separators_.MergeFrom(from.thousands_separators_);
  delimiters_.MergeFrom(from.delimiters_);
  text_qualifiers_.MergeFrom(from.text_qualifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_offsets()->::TSP::IndexSet::MergeFrom(from._internal_column_offsets());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      starting_row_ = from.starting_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_encoding_ = from.source_encoding_;
    }
    if (cached_has_bits & 0x00000010u) {
      transpose_rows_and_columns_ = from.transpose_rows_and_columns_;
    }
    if (cached_has_bits & 0x00000020u) {
      collapse_consecutive_ = from.collapse_consecutive_;
    }
    if (cached_has_bits & 0x00000040u) {
      automatic_delimiters_ = from.automatic_delimiters_;
    }
    if (cached_has_bits & 0x00000080u) {
      automatic_offsets_ = from.automatic_offsets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredTextImportSettings::CopyFrom(const StructuredTextImportSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.StructuredTextImportSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredTextImportSettings::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_column_offsets()) {
    if (!column_offsets_->IsInitialized()) return false;
  }
  return true;
}

void StructuredTextImportSettings::InternalSwap(StructuredTextImportSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decimal_separators_.InternalSwap(&other->decimal_separators_);
  thousands_separators_.InternalSwap(&other->thousands_separators_);
  delimiters_.InternalSwap(&other->delimiters_);
  text_qualifiers_.InternalSwap(&other->text_qualifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredTextImportSettings, automatic_offsets_)
      + sizeof(StructuredTextImportSettings::automatic_offsets_)
      - PROTOBUF_FIELD_OFFSET(StructuredTextImportSettings, column_offsets_)>(
          reinterpret_cast<char*>(&column_offsets_),
          reinterpret_cast<char*>(&other->column_offsets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredTextImportSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[62]);
}

// ===================================================================

class OperationStorageCommandOperationsEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageCommandOperationsEntry>()._has_bits_);
  static void set_has_command_identifier_same_as_revision_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_originated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coalesced_command_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OperationStorageCommandOperationsEntry::OperationStorageCommandOperationsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  command_identifier_(arena),
  operations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageCommandOperationsEntry)
}
OperationStorageCommandOperationsEntry::OperationStorageCommandOperationsEntry(const OperationStorageCommandOperationsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      command_identifier_(from.command_identifier_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coalesced_command_entry_count_, &from.coalesced_command_entry_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_originated_) -
    reinterpret_cast<char*>(&coalesced_command_entry_count_)) + sizeof(server_originated_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageCommandOperationsEntry)
}

inline void OperationStorageCommandOperationsEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coalesced_command_entry_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_originated_) -
    reinterpret_cast<char*>(&coalesced_command_entry_count_)) + sizeof(server_originated_));
}

OperationStorageCommandOperationsEntry::~OperationStorageCommandOperationsEntry() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageCommandOperationsEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationStorageCommandOperationsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OperationStorageCommandOperationsEntry::ArenaDtor(void* object) {
  OperationStorageCommandOperationsEntry* _this = reinterpret_cast< OperationStorageCommandOperationsEntry* >(object);
  (void)_this;
}
void OperationStorageCommandOperationsEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStorageCommandOperationsEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStorageCommandOperationsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageCommandOperationsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_identifier_.Clear();
  operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&coalesced_command_entry_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_originated_) -
        reinterpret_cast<char*>(&coalesced_command_entry_count_)) + sizeof(server_originated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageCommandOperationsEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool command_identifier_same_as_revision_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_command_identifier_same_as_revision_identifier(&has_bits);
          command_identifier_same_as_revision_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 command_identifier = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_command_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_command_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.Operation operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool server_originated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_originated(&has_bits);
          server_originated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 coalesced_command_entry_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_coalesced_command_entry_count(&has_bits);
          coalesced_command_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStorageCommandOperationsEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageCommandOperationsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool command_identifier_same_as_revision_identifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_command_identifier_same_as_revision_identifier(), target);
  }

  // repeated fixed64 command_identifier = 2 [packed = true];
  if (this->_internal_command_identifier_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_command_identifier(), target);
  }

  // repeated .TSK.Operation operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_operations(i), target, stream);
  }

  // optional bool server_originated = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_server_originated(), target);
  }

  // optional uint64 coalesced_command_entry_count = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_coalesced_command_entry_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageCommandOperationsEntry)
  return target;
}

size_t OperationStorageCommandOperationsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageCommandOperationsEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 command_identifier = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_command_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .TSK.Operation operations = 3;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 coalesced_command_entry_count = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coalesced_command_entry_count());
    }

    // optional bool command_identifier_same_as_revision_identifier = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool server_originated = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageCommandOperationsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationStorageCommandOperationsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageCommandOperationsEntry::GetClassData() const { return &_class_data_; }

void OperationStorageCommandOperationsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationStorageCommandOperationsEntry *>(to)->MergeFrom(
      static_cast<const OperationStorageCommandOperationsEntry &>(from));
}


void OperationStorageCommandOperationsEntry::MergeFrom(const OperationStorageCommandOperationsEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageCommandOperationsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_identifier_.MergeFrom(from.command_identifier_);
  operations_.MergeFrom(from.operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      coalesced_command_entry_count_ = from.coalesced_command_entry_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      command_identifier_same_as_revision_identifier_ = from.command_identifier_same_as_revision_identifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_originated_ = from.server_originated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageCommandOperationsEntry::CopyFrom(const OperationStorageCommandOperationsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageCommandOperationsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageCommandOperationsEntry::IsInitialized() const {
  return true;
}

void OperationStorageCommandOperationsEntry::InternalSwap(OperationStorageCommandOperationsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_identifier_.InternalSwap(&other->command_identifier_);
  operations_.InternalSwap(&other->operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorageCommandOperationsEntry, server_originated_)
      + sizeof(OperationStorageCommandOperationsEntry::server_originated_)
      - PROTOBUF_FIELD_OFFSET(OperationStorageCommandOperationsEntry, coalesced_command_entry_count_)>(
          reinterpret_cast<char*>(&coalesced_command_entry_count_),
          reinterpret_cast<char*>(&other->coalesced_command_entry_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageCommandOperationsEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[63]);
}

// ===================================================================

class OperationStorageEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageEntry>()._has_bits_);
  static void set_has_document_revision_sequence_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_entry_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time_diff_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationStorageEntry::OperationStorageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  document_revision_identifier_(arena),
  command_operation_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageEntry)
}
OperationStorageEntry::OperationStorageEntry(const OperationStorageEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      document_revision_identifier_(from.document_revision_identifier_),
      command_operation_entries_(from.command_operation_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&document_revision_sequence_delta_, &from.document_revision_sequence_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_entry_creation_time_) -
    reinterpret_cast<char*>(&document_revision_sequence_delta_)) + sizeof(first_entry_creation_time_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageEntry)
}

inline void OperationStorageEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_revision_sequence_delta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_entry_creation_time_) -
    reinterpret_cast<char*>(&document_revision_sequence_delta_)) + sizeof(first_entry_creation_time_));
}

OperationStorageEntry::~OperationStorageEntry() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationStorageEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OperationStorageEntry::ArenaDtor(void* object) {
  OperationStorageEntry* _this = reinterpret_cast< OperationStorageEntry* >(object);
  (void)_this;
}
void OperationStorageEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStorageEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStorageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_revision_identifier_.Clear();
  command_operation_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&document_revision_sequence_delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_entry_creation_time_) -
        reinterpret_cast<char*>(&document_revision_sequence_delta_)) + sizeof(first_entry_creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 document_revision_identifier = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_document_revision_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 document_revision_sequence_delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_document_revision_sequence_delta(&has_bits);
          document_revision_sequence_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command_operation_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double first_entry_creation_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_first_entry_creation_time(&has_bits);
          first_entry_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 creation_time_diff_bucket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_creation_time_diff_bucket(&has_bits);
          creation_time_diff_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStorageEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 document_revision_identifier = 1 [packed = true];
  if (this->_internal_document_revision_identifier_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_document_revision_identifier(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 document_revision_sequence_delta = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_document_revision_sequence_delta(), target);
  }

  // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_command_operation_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_command_operation_entries(i), target, stream);
  }

  // optional double first_entry_creation_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_first_entry_creation_time(), target);
  }

  // optional int32 creation_time_diff_bucket = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_creation_time_diff_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageEntry)
  return target;
}

size_t OperationStorageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 document_revision_identifier = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_document_revision_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
  total_size += 1UL * this->_internal_command_operation_entries_size();
  for (const auto& msg : this->command_operation_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 document_revision_sequence_delta = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_document_revision_sequence_delta());
    }

    // optional int32 creation_time_diff_bucket = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_creation_time_diff_bucket());
    }

    // optional double first_entry_creation_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationStorageEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageEntry::GetClassData() const { return &_class_data_; }

void OperationStorageEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationStorageEntry *>(to)->MergeFrom(
      static_cast<const OperationStorageEntry &>(from));
}


void OperationStorageEntry::MergeFrom(const OperationStorageEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  document_revision_identifier_.MergeFrom(from.document_revision_identifier_);
  command_operation_entries_.MergeFrom(from.command_operation_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      document_revision_sequence_delta_ = from.document_revision_sequence_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      creation_time_diff_bucket_ = from.creation_time_diff_bucket_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_entry_creation_time_ = from.first_entry_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageEntry::CopyFrom(const OperationStorageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageEntry::IsInitialized() const {
  return true;
}

void OperationStorageEntry::InternalSwap(OperationStorageEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  document_revision_identifier_.InternalSwap(&other->document_revision_identifier_);
  command_operation_entries_.InternalSwap(&other->command_operation_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorageEntry, first_entry_creation_time_)
      + sizeof(OperationStorageEntry::first_entry_creation_time_)
      - PROTOBUF_FIELD_OFFSET(OperationStorageEntry, document_revision_sequence_delta_)>(
          reinterpret_cast<char*>(&document_revision_sequence_delta_),
          reinterpret_cast<char*>(&other->document_revision_sequence_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[64]);
}

// ===================================================================

class OperationStorageEntryArray::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageEntryArray>()._has_bits_);
  static const ::TSP::LargeArray& large_array(const OperationStorageEntryArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
OperationStorageEntryArray::_Internal::large_array(const OperationStorageEntryArray* msg) {
  return *msg->large_array_;
}
void OperationStorageEntryArray::clear_large_array() {
  if (large_array_ != nullptr) large_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OperationStorageEntryArray::OperationStorageEntryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageEntryArray)
}
OperationStorageEntryArray::OperationStorageEntryArray(const OperationStorageEntryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    large_array_ = new ::TSP::LargeArray(*from.large_array_);
  } else {
    large_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageEntryArray)
}

inline void OperationStorageEntryArray::SharedCtor() {
large_array_ = nullptr;
}

OperationStorageEntryArray::~OperationStorageEntryArray() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageEntryArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationStorageEntryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_array_;
}

void OperationStorageEntryArray::ArenaDtor(void* object) {
  OperationStorageEntryArray* _this = reinterpret_cast< OperationStorageEntryArray* >(object);
  (void)_this;
}
void OperationStorageEntryArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStorageEntryArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStorageEntryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageEntryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_ != nullptr);
    large_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageEntryArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStorageEntryArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageEntryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageEntryArray)
  return target;
}

size_t OperationStorageEntryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageEntryArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageEntryArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationStorageEntryArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageEntryArray::GetClassData() const { return &_class_data_; }

void OperationStorageEntryArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationStorageEntryArray *>(to)->MergeFrom(
      static_cast<const OperationStorageEntryArray &>(from));
}


void OperationStorageEntryArray::MergeFrom(const OperationStorageEntryArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageEntryArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(from._internal_large_array());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageEntryArray::CopyFrom(const OperationStorageEntryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageEntryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageEntryArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!large_array_->IsInitialized()) return false;
  }
  return true;
}

void OperationStorageEntryArray::InternalSwap(OperationStorageEntryArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_array_, other->large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageEntryArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[65]);
}

// ===================================================================

class OperationStorageEntryArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorageEntryArraySegment>()._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const OperationStorageEntryArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_document_revision_sequence_before_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_first_entry_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::LargeArraySegment&
OperationStorageEntryArraySegment::_Internal::large_array_segment(const OperationStorageEntryArraySegment* msg) {
  return *msg->large_array_segment_;
}
void OperationStorageEntryArraySegment::clear_large_array_segment() {
  if (large_array_segment_ != nullptr) large_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OperationStorageEntryArraySegment::OperationStorageEntryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  elements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorageEntryArraySegment)
}
OperationStorageEntryArraySegment::OperationStorageEntryArraySegment(const OperationStorageEntryArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    large_array_segment_ = new ::TSP::LargeArraySegment(*from.large_array_segment_);
  } else {
    large_array_segment_ = nullptr;
  }
  ::memcpy(&last_document_revision_sequence_before_segment_, &from.last_document_revision_sequence_before_segment_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_first_entry_creation_time_) -
    reinterpret_cast<char*>(&last_document_revision_sequence_before_segment_)) + sizeof(segment_first_entry_creation_time_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorageEntryArraySegment)
}

inline void OperationStorageEntryArraySegment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&large_array_segment_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&segment_first_entry_creation_time_) -
    reinterpret_cast<char*>(&large_array_segment_)) + sizeof(segment_first_entry_creation_time_));
}

OperationStorageEntryArraySegment::~OperationStorageEntryArraySegment() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorageEntryArraySegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationStorageEntryArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_array_segment_;
}

void OperationStorageEntryArraySegment::ArenaDtor(void* object) {
  OperationStorageEntryArraySegment* _this = reinterpret_cast< OperationStorageEntryArraySegment* >(object);
  (void)_this;
}
void OperationStorageEntryArraySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStorageEntryArraySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStorageEntryArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorageEntryArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_array_segment_ != nullptr);
    large_array_segment_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&last_document_revision_sequence_before_segment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&segment_first_entry_creation_time_) -
        reinterpret_cast<char*>(&last_document_revision_sequence_before_segment_)) + sizeof(segment_first_entry_creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorageEntryArraySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.OperationStorageEntry elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 last_document_revision_sequence_before_segment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_document_revision_sequence_before_segment(&has_bits);
          last_document_revision_sequence_before_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_document_revision_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_document_revision_sequence(&has_bits);
          last_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double segment_first_entry_creation_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_segment_first_entry_creation_time(&has_bits);
          segment_first_entry_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStorageEntryArraySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorageEntryArraySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_array_segment(this), target, stream);
  }

  // repeated .TSK.OperationStorageEntry elements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_elements(i), target, stream);
  }

  // optional int32 last_document_revision_sequence_before_segment = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_document_revision_sequence_before_segment(), target);
  }

  // optional int32 last_document_revision_sequence = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_last_document_revision_sequence(), target);
  }

  // optional double segment_first_entry_creation_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_segment_first_entry_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorageEntryArraySegment)
  return target;
}

size_t OperationStorageEntryArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorageEntryArraySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.OperationStorageEntry elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.LargeArraySegment large_array_segment = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *large_array_segment_);
    }

    // optional int32 last_document_revision_sequence_before_segment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_document_revision_sequence_before_segment());
    }

    // optional int32 last_document_revision_sequence = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_document_revision_sequence());
    }

    // optional double segment_first_entry_creation_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorageEntryArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationStorageEntryArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorageEntryArraySegment::GetClassData() const { return &_class_data_; }

void OperationStorageEntryArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationStorageEntryArraySegment *>(to)->MergeFrom(
      static_cast<const OperationStorageEntryArraySegment &>(from));
}


void OperationStorageEntryArraySegment::MergeFrom(const OperationStorageEntryArraySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorageEntryArraySegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(from._internal_large_array_segment());
    }
    if (cached_has_bits & 0x00000002u) {
      last_document_revision_sequence_before_segment_ = from.last_document_revision_sequence_before_segment_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_document_revision_sequence_ = from.last_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      segment_first_entry_creation_time_ = from.segment_first_entry_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorageEntryArraySegment::CopyFrom(const OperationStorageEntryArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorageEntryArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorageEntryArraySegment::IsInitialized() const {
  return true;
}

void OperationStorageEntryArraySegment::InternalSwap(OperationStorageEntryArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  elements_.InternalSwap(&other->elements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorageEntryArraySegment, segment_first_entry_creation_time_)
      + sizeof(OperationStorageEntryArraySegment::segment_first_entry_creation_time_)
      - PROTOBUF_FIELD_OFFSET(OperationStorageEntryArraySegment, large_array_segment_)>(
          reinterpret_cast<char*>(&large_array_segment_),
          reinterpret_cast<char*>(&other->large_array_segment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorageEntryArraySegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[66]);
}

// ===================================================================

class OperationStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationStorage>()._has_bits_);
  static const ::TSP::Reference& entries(const OperationStorage* msg);
  static void set_has_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_document_revision_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_unskippable_document_revision_before_entries_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_unskippable_document_revision_in_entries_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::IndexSet& days_with_an_entry(const OperationStorage* msg);
  static void set_has_days_with_an_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
OperationStorage::_Internal::entries(const OperationStorage* msg) {
  return *msg->entries_;
}
const ::TSP::IndexSet&
OperationStorage::_Internal::days_with_an_entry(const OperationStorage* msg) {
  return *msg->days_with_an_entry_;
}
void OperationStorage::clear_entries() {
  if (entries_ != nullptr) entries_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OperationStorage::clear_days_with_an_entry() {
  if (days_with_an_entry_ != nullptr) days_with_an_entry_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
OperationStorage::OperationStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  last_document_revision_identifier_(arena),
  last_unskippable_document_revision_before_entries_identifier_(arena),
  last_unskippable_document_revision_in_entries_identifier_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OperationStorage)
}
OperationStorage::OperationStorage(const OperationStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      last_document_revision_identifier_(from.last_document_revision_identifier_),
      last_unskippable_document_revision_before_entries_identifier_(from.last_unskippable_document_revision_before_entries_identifier_),
      last_unskippable_document_revision_in_entries_identifier_(from.last_unskippable_document_revision_in_entries_identifier_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entries()) {
    entries_ = new ::TSP::Reference(*from.entries_);
  } else {
    entries_ = nullptr;
  }
  if (from._internal_has_days_with_an_entry()) {
    days_with_an_entry_ = new ::TSP::IndexSet(*from.days_with_an_entry_);
  } else {
    days_with_an_entry_ = nullptr;
  }
  ::memcpy(&operation_count_, &from.operation_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_unskippable_document_revision_in_entries_sequence_) -
    reinterpret_cast<char*>(&operation_count_)) + sizeof(last_unskippable_document_revision_in_entries_sequence_));
  // @@protoc_insertion_point(copy_constructor:TSK.OperationStorage)
}

inline void OperationStorage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entries_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_unskippable_document_revision_in_entries_sequence_) -
    reinterpret_cast<char*>(&entries_)) + sizeof(last_unskippable_document_revision_in_entries_sequence_));
}

OperationStorage::~OperationStorage() {
  // @@protoc_insertion_point(destructor:TSK.OperationStorage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OperationStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entries_;
  if (this != internal_default_instance()) delete days_with_an_entry_;
}

void OperationStorage::ArenaDtor(void* object) {
  OperationStorage* _this = reinterpret_cast< OperationStorage* >(object);
  (void)_this;
}
void OperationStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperationStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OperationStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_document_revision_identifier_.Clear();
  last_unskippable_document_revision_before_entries_identifier_.Clear();
  last_unskippable_document_revision_in_entries_identifier_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(entries_ != nullptr);
      entries_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(days_with_an_entry_ != nullptr);
      days_with_an_entry_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&operation_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_unskippable_document_revision_in_entries_sequence_) -
        reinterpret_cast<char*>(&operation_count_)) + sizeof(last_unskippable_document_revision_in_entries_sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entries(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 operation_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_operation_count(&has_bits);
          operation_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_document_revision_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_document_revision_sequence(&has_bits);
          last_document_revision_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_last_document_revision_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_last_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_unskippable_document_revision_before_entries_sequence(&has_bits);
          last_unskippable_document_revision_before_entries_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_last_unskippable_document_revision_before_entries_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_last_unskippable_document_revision_before_entries_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_unskippable_document_revision_in_entries_sequence(&has_bits);
          last_unskippable_document_revision_in_entries_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_last_unskippable_document_revision_in_entries_identifier(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_last_unskippable_document_revision_in_entries_identifier(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .TSP.IndexSet days_with_an_entry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_days_with_an_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OperationStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference entries = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entries(this), target, stream);
  }

  // required uint64 operation_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_operation_count(), target);
  }

  // optional int32 last_document_revision_sequence = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_document_revision_sequence(), target);
  }

  // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
  if (this->_internal_last_document_revision_identifier_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_last_document_revision_identifier(), target);
  }

  // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_last_unskippable_document_revision_before_entries_sequence(), target);
  }

  // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
  if (this->_internal_last_unskippable_document_revision_before_entries_identifier_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_last_unskippable_document_revision_before_entries_identifier(), target);
  }

  // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_last_unskippable_document_revision_in_entries_sequence(), target);
  }

  // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
  if (this->_internal_last_unskippable_document_revision_in_entries_identifier_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_last_unskippable_document_revision_in_entries_identifier(), target);
  }

  // optional .TSP.IndexSet days_with_an_entry = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::days_with_an_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OperationStorage)
  return target;
}

size_t OperationStorage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.OperationStorage)
  size_t total_size = 0;

  if (_internal_has_entries()) {
    // required .TSP.Reference entries = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entries_);
  }

  if (_internal_has_operation_count()) {
    // required uint64 operation_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operation_count());
  }

  return total_size;
}
size_t OperationStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OperationStorage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.Reference entries = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entries_);

    // required uint64 operation_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_operation_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_document_revision_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_unskippable_document_revision_before_entries_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_last_unskippable_document_revision_in_entries_identifier_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // optional .TSP.IndexSet days_with_an_entry = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *days_with_an_entry_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int32 last_document_revision_sequence = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_document_revision_sequence());
    }

    // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_unskippable_document_revision_before_entries_sequence());
    }

    // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_unskippable_document_revision_in_entries_sequence());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperationStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStorage::GetClassData() const { return &_class_data_; }

void OperationStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OperationStorage *>(to)->MergeFrom(
      static_cast<const OperationStorage &>(from));
}


void OperationStorage::MergeFrom(const OperationStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OperationStorage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_document_revision_identifier_.MergeFrom(from.last_document_revision_identifier_);
  last_unskippable_document_revision_before_entries_identifier_.MergeFrom(from.last_unskippable_document_revision_before_entries_identifier_);
  last_unskippable_document_revision_in_entries_identifier_.MergeFrom(from.last_unskippable_document_revision_in_entries_identifier_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entries()->::TSP::Reference::MergeFrom(from._internal_entries());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_days_with_an_entry()->::TSP::IndexSet::MergeFrom(from._internal_days_with_an_entry());
    }
    if (cached_has_bits & 0x00000004u) {
      operation_count_ = from.operation_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_document_revision_sequence_ = from.last_document_revision_sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_unskippable_document_revision_before_entries_sequence_ = from.last_unskippable_document_revision_before_entries_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_unskippable_document_revision_in_entries_sequence_ = from.last_unskippable_document_revision_in_entries_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStorage::CopyFrom(const OperationStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OperationStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStorage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_entries()) {
    if (!entries_->IsInitialized()) return false;
  }
  if (_internal_has_days_with_an_entry()) {
    if (!days_with_an_entry_->IsInitialized()) return false;
  }
  return true;
}

void OperationStorage::InternalSwap(OperationStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_document_revision_identifier_.InternalSwap(&other->last_document_revision_identifier_);
  last_unskippable_document_revision_before_entries_identifier_.InternalSwap(&other->last_unskippable_document_revision_before_entries_identifier_);
  last_unskippable_document_revision_in_entries_identifier_.InternalSwap(&other->last_unskippable_document_revision_in_entries_identifier_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStorage, last_unskippable_document_revision_in_entries_sequence_)
      + sizeof(OperationStorage::last_unskippable_document_revision_in_entries_sequence_)
      - PROTOBUF_FIELD_OFFSET(OperationStorage, entries_)>(
          reinterpret_cast<char*>(&entries_),
          reinterpret_cast<char*>(&other->entries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStorage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[67]);
}

// ===================================================================

class OutgoingCommandQueue::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueue>()._has_bits_);
  static const ::TSP::LargeObjectArray& large_object_array(const OutgoingCommandQueue* msg);
  static void set_has_large_object_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeObjectArray&
OutgoingCommandQueue::_Internal::large_object_array(const OutgoingCommandQueue* msg) {
  return *msg->large_object_array_;
}
void OutgoingCommandQueue::clear_large_object_array() {
  if (large_object_array_ != nullptr) large_object_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OutgoingCommandQueue::OutgoingCommandQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueue)
}
OutgoingCommandQueue::OutgoingCommandQueue(const OutgoingCommandQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array()) {
    large_object_array_ = new ::TSP::LargeObjectArray(*from.large_object_array_);
  } else {
    large_object_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueue)
}

inline void OutgoingCommandQueue::SharedCtor() {
large_object_array_ = nullptr;
}

OutgoingCommandQueue::~OutgoingCommandQueue() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutgoingCommandQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_object_array_;
}

void OutgoingCommandQueue::ArenaDtor(void* object) {
  OutgoingCommandQueue* _this = reinterpret_cast< OutgoingCommandQueue* >(object);
  (void)_this;
}
void OutgoingCommandQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutgoingCommandQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutgoingCommandQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_object_array_ != nullptr);
    large_object_array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeObjectArray large_object_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutgoingCommandQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeObjectArray large_object_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_object_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueue)
  return target;
}

size_t OutgoingCommandQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeObjectArray large_object_array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_object_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutgoingCommandQueue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueue::GetClassData() const { return &_class_data_; }

void OutgoingCommandQueue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutgoingCommandQueue *>(to)->MergeFrom(
      static_cast<const OutgoingCommandQueue &>(from));
}


void OutgoingCommandQueue::MergeFrom(const OutgoingCommandQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array()) {
    _internal_mutable_large_object_array()->::TSP::LargeObjectArray::MergeFrom(from._internal_large_object_array());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueue::CopyFrom(const OutgoingCommandQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueue::IsInitialized() const {
  if (_internal_has_large_object_array()) {
    if (!large_object_array_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueue::InternalSwap(OutgoingCommandQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_object_array_, other->large_object_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[68]);
}

// ===================================================================

class OutgoingCommandQueueSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<OutgoingCommandQueueSegment>()._has_bits_);
  static const ::TSP::LargeObjectArraySegment& large_object_array_segment(const OutgoingCommandQueueSegment* msg);
  static void set_has_large_object_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeObjectArraySegment&
OutgoingCommandQueueSegment::_Internal::large_object_array_segment(const OutgoingCommandQueueSegment* msg) {
  return *msg->large_object_array_segment_;
}
void OutgoingCommandQueueSegment::clear_large_object_array_segment() {
  if (large_object_array_segment_ != nullptr) large_object_array_segment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OutgoingCommandQueueSegment::OutgoingCommandQueueSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.OutgoingCommandQueueSegment)
}
OutgoingCommandQueueSegment::OutgoingCommandQueueSegment(const OutgoingCommandQueueSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_object_array_segment()) {
    large_object_array_segment_ = new ::TSP::LargeObjectArraySegment(*from.large_object_array_segment_);
  } else {
    large_object_array_segment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.OutgoingCommandQueueSegment)
}

inline void OutgoingCommandQueueSegment::SharedCtor() {
large_object_array_segment_ = nullptr;
}

OutgoingCommandQueueSegment::~OutgoingCommandQueueSegment() {
  // @@protoc_insertion_point(destructor:TSK.OutgoingCommandQueueSegment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutgoingCommandQueueSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete large_object_array_segment_;
}

void OutgoingCommandQueueSegment::ArenaDtor(void* object) {
  OutgoingCommandQueueSegment* _this = reinterpret_cast< OutgoingCommandQueueSegment* >(object);
  (void)_this;
}
void OutgoingCommandQueueSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutgoingCommandQueueSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutgoingCommandQueueSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.OutgoingCommandQueueSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(large_object_array_segment_ != nullptr);
    large_object_array_segment_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutgoingCommandQueueSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_object_array_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutgoingCommandQueueSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.OutgoingCommandQueueSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::large_object_array_segment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.OutgoingCommandQueueSegment)
  return target;
}

size_t OutgoingCommandQueueSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.OutgoingCommandQueueSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_object_array_segment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutgoingCommandQueueSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OutgoingCommandQueueSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutgoingCommandQueueSegment::GetClassData() const { return &_class_data_; }

void OutgoingCommandQueueSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OutgoingCommandQueueSegment *>(to)->MergeFrom(
      static_cast<const OutgoingCommandQueueSegment &>(from));
}


void OutgoingCommandQueueSegment::MergeFrom(const OutgoingCommandQueueSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.OutgoingCommandQueueSegment)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_object_array_segment()) {
    _internal_mutable_large_object_array_segment()->::TSP::LargeObjectArraySegment::MergeFrom(from._internal_large_object_array_segment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutgoingCommandQueueSegment::CopyFrom(const OutgoingCommandQueueSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.OutgoingCommandQueueSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutgoingCommandQueueSegment::IsInitialized() const {
  if (_internal_has_large_object_array_segment()) {
    if (!large_object_array_segment_->IsInitialized()) return false;
  }
  return true;
}

void OutgoingCommandQueueSegment::InternalSwap(OutgoingCommandQueueSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(large_object_array_segment_, other->large_object_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutgoingCommandQueueSegment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[69]);
}

// ===================================================================

class DataReferenceRecord_ContainerUUIDToReferencedDataPair::_Internal {
 public:
  using HasBits = decltype(std::declval<DataReferenceRecord_ContainerUUIDToReferencedDataPair>()._has_bits_);
  static const ::TSP::UUID& container_uuid(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg);
  static void set_has_container_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& referenced_data(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg);
  static void set_has_referenced_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reference_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
DataReferenceRecord_ContainerUUIDToReferencedDataPair::_Internal::container_uuid(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg) {
  return *msg->container_uuid_;
}
const ::TSP::DataReference&
DataReferenceRecord_ContainerUUIDToReferencedDataPair::_Internal::referenced_data(const DataReferenceRecord_ContainerUUIDToReferencedDataPair* msg) {
  return *msg->referenced_data_;
}
void DataReferenceRecord_ContainerUUIDToReferencedDataPair::clear_container_uuid() {
  if (container_uuid_ != nullptr) container_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DataReferenceRecord_ContainerUUIDToReferencedDataPair::clear_referenced_data() {
  if (referenced_data_ != nullptr) referenced_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DataReferenceRecord_ContainerUUIDToReferencedDataPair::DataReferenceRecord_ContainerUUIDToReferencedDataPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
}
DataReferenceRecord_ContainerUUIDToReferencedDataPair::DataReferenceRecord_ContainerUUIDToReferencedDataPair(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_container_uuid()) {
    container_uuid_ = new ::TSP::UUID(*from.container_uuid_);
  } else {
    container_uuid_ = nullptr;
  }
  if (from._internal_has_referenced_data()) {
    referenced_data_ = new ::TSP::DataReference(*from.referenced_data_);
  } else {
    referenced_data_ = nullptr;
  }
  reference_count_ = from.reference_count_;
  // @@protoc_insertion_point(copy_constructor:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
}

inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&container_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reference_count_) -
    reinterpret_cast<char*>(&container_uuid_)) + sizeof(reference_count_));
}

DataReferenceRecord_ContainerUUIDToReferencedDataPair::~DataReferenceRecord_ContainerUUIDToReferencedDataPair() {
  // @@protoc_insertion_point(destructor:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete container_uuid_;
  if (this != internal_default_instance()) delete referenced_data_;
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::ArenaDtor(void* object) {
  DataReferenceRecord_ContainerUUIDToReferencedDataPair* _this = reinterpret_cast< DataReferenceRecord_ContainerUUIDToReferencedDataPair* >(object);
  (void)_this;
}
void DataReferenceRecord_ContainerUUIDToReferencedDataPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataReferenceRecord_ContainerUUIDToReferencedDataPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(container_uuid_ != nullptr);
      container_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(referenced_data_ != nullptr);
      referenced_data_->Clear();
    }
  }
  reference_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataReferenceRecord_ContainerUUIDToReferencedDataPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID container_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.DataReference referenced_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_referenced_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 reference_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reference_count(&has_bits);
          reference_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataReferenceRecord_ContainerUUIDToReferencedDataPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID container_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container_uuid(this), target, stream);
  }

  // required .TSP.DataReference referenced_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::referenced_data(this), target, stream);
  }

  // required uint32 reference_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reference_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  return target;
}

size_t DataReferenceRecord_ContainerUUIDToReferencedDataPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  size_t total_size = 0;

  if (_internal_has_container_uuid()) {
    // required .TSP.UUID container_uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_uuid_);
  }

  if (_internal_has_referenced_data()) {
    // required .TSP.DataReference referenced_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referenced_data_);
  }

  if (_internal_has_reference_count()) {
    // required uint32 reference_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reference_count());
  }

  return total_size;
}
size_t DataReferenceRecord_ContainerUUIDToReferencedDataPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID container_uuid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_uuid_);

    // required .TSP.DataReference referenced_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referenced_data_);

    // required uint32 reference_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reference_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataReferenceRecord_ContainerUUIDToReferencedDataPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataReferenceRecord_ContainerUUIDToReferencedDataPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataReferenceRecord_ContainerUUIDToReferencedDataPair::GetClassData() const { return &_class_data_; }

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DataReferenceRecord_ContainerUUIDToReferencedDataPair *>(to)->MergeFrom(
      static_cast<const DataReferenceRecord_ContainerUUIDToReferencedDataPair &>(from));
}


void DataReferenceRecord_ContainerUUIDToReferencedDataPair::MergeFrom(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_container_uuid()->::TSP::UUID::MergeFrom(from._internal_container_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_referenced_data()->::TSP::DataReference::MergeFrom(from._internal_referenced_data());
    }
    if (cached_has_bits & 0x00000004u) {
      reference_count_ = from.reference_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::CopyFrom(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_container_uuid()) {
    if (!container_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_referenced_data()) {
    if (!referenced_data_->IsInitialized()) return false;
  }
  return true;
}

void DataReferenceRecord_ContainerUUIDToReferencedDataPair::InternalSwap(DataReferenceRecord_ContainerUUIDToReferencedDataPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataReferenceRecord_ContainerUUIDToReferencedDataPair, reference_count_)
      + sizeof(DataReferenceRecord_ContainerUUIDToReferencedDataPair::reference_count_)
      - PROTOBUF_FIELD_OFFSET(DataReferenceRecord_ContainerUUIDToReferencedDataPair, container_uuid_)>(
          reinterpret_cast<char*>(&container_uuid_),
          reinterpret_cast<char*>(&other->container_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataReferenceRecord_ContainerUUIDToReferencedDataPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[70]);
}

// ===================================================================

class DataReferenceRecord::_Internal {
 public:
};

void DataReferenceRecord::clear_unbounded_referenced_datas() {
  unbounded_referenced_datas_.Clear();
}
DataReferenceRecord::DataReferenceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  added_container_uuid_to_referenced_data_pairs_(arena),
  removed_container_uuid_to_referenced_data_pairs_(arena),
  unbounded_referenced_datas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.DataReferenceRecord)
}
DataReferenceRecord::DataReferenceRecord(const DataReferenceRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      added_container_uuid_to_referenced_data_pairs_(from.added_container_uuid_to_referenced_data_pairs_),
      removed_container_uuid_to_referenced_data_pairs_(from.removed_container_uuid_to_referenced_data_pairs_),
      unbounded_referenced_datas_(from.unbounded_referenced_datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSK.DataReferenceRecord)
}

inline void DataReferenceRecord::SharedCtor() {
}

DataReferenceRecord::~DataReferenceRecord() {
  // @@protoc_insertion_point(destructor:TSK.DataReferenceRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataReferenceRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataReferenceRecord::ArenaDtor(void* object) {
  DataReferenceRecord* _this = reinterpret_cast< DataReferenceRecord* >(object);
  (void)_this;
}
void DataReferenceRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataReferenceRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataReferenceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.DataReferenceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  added_container_uuid_to_referenced_data_pairs_.Clear();
  removed_container_uuid_to_referenced_data_pairs_.Clear();
  unbounded_referenced_datas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataReferenceRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_added_container_uuid_to_referenced_data_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_container_uuid_to_referenced_data_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.DataReference unbounded_referenced_datas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unbounded_referenced_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataReferenceRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.DataReferenceRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_added_container_uuid_to_referenced_data_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_added_container_uuid_to_referenced_data_pairs(i), target, stream);
  }

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_container_uuid_to_referenced_data_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_removed_container_uuid_to_referenced_data_pairs(i), target, stream);
  }

  // repeated .TSP.DataReference unbounded_referenced_datas = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unbounded_referenced_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_unbounded_referenced_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.DataReferenceRecord)
  return target;
}

size_t DataReferenceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.DataReferenceRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
  total_size += 1UL * this->_internal_added_container_uuid_to_referenced_data_pairs_size();
  for (const auto& msg : this->added_container_uuid_to_referenced_data_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
  total_size += 1UL * this->_internal_removed_container_uuid_to_referenced_data_pairs_size();
  for (const auto& msg : this->removed_container_uuid_to_referenced_data_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference unbounded_referenced_datas = 3;
  total_size += 1UL * this->_internal_unbounded_referenced_datas_size();
  for (const auto& msg : this->unbounded_referenced_datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataReferenceRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataReferenceRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataReferenceRecord::GetClassData() const { return &_class_data_; }

void DataReferenceRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DataReferenceRecord *>(to)->MergeFrom(
      static_cast<const DataReferenceRecord &>(from));
}


void DataReferenceRecord::MergeFrom(const DataReferenceRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.DataReferenceRecord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  added_container_uuid_to_referenced_data_pairs_.MergeFrom(from.added_container_uuid_to_referenced_data_pairs_);
  removed_container_uuid_to_referenced_data_pairs_.MergeFrom(from.removed_container_uuid_to_referenced_data_pairs_);
  unbounded_referenced_datas_.MergeFrom(from.unbounded_referenced_datas_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataReferenceRecord::CopyFrom(const DataReferenceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.DataReferenceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReferenceRecord::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(added_container_uuid_to_referenced_data_pairs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(removed_container_uuid_to_referenced_data_pairs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(unbounded_referenced_datas_)) return false;
  return true;
}

void DataReferenceRecord::InternalSwap(DataReferenceRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  added_container_uuid_to_referenced_data_pairs_.InternalSwap(&other->added_container_uuid_to_referenced_data_pairs_);
  removed_container_uuid_to_referenced_data_pairs_.InternalSwap(&other->removed_container_uuid_to_referenced_data_pairs_);
  unbounded_referenced_datas_.InternalSwap(&other->unbounded_referenced_datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataReferenceRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[71]);
}

// ===================================================================

class CommandAssetChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAssetChunkArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandAssetChunkArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_asset_chunk_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resume_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_materialized_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::TSK::CommandArchive&
CommandAssetChunkArchive::_Internal::super(const CommandAssetChunkArchive* msg) {
  return *msg->super_;
}
CommandAssetChunkArchive::CommandAssetChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.CommandAssetChunkArchive)
}
CommandAssetChunkArchive::CommandAssetChunkArchive(const CommandAssetChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digest()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  asset_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_asset_chunk()) {
    asset_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_chunk(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  ::memcpy(&asset_chunk_length_, &from.asset_chunk_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&materialized_length_) -
    reinterpret_cast<char*>(&asset_chunk_length_)) + sizeof(materialized_length_));
  // @@protoc_insertion_point(copy_constructor:TSK.CommandAssetChunkArchive)
}

inline void CommandAssetChunkArchive::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&materialized_length_) -
    reinterpret_cast<char*>(&super_)) + sizeof(materialized_length_));
}

CommandAssetChunkArchive::~CommandAssetChunkArchive() {
  // @@protoc_insertion_point(destructor:TSK.CommandAssetChunkArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommandAssetChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete super_;
}

void CommandAssetChunkArchive::ArenaDtor(void* object) {
  CommandAssetChunkArchive* _this = reinterpret_cast< CommandAssetChunkArchive* >(object);
  (void)_this;
}
void CommandAssetChunkArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAssetChunkArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAssetChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.CommandAssetChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      digest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      asset_chunk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&asset_chunk_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&materialized_length_) -
        reinterpret_cast<char*>(&asset_chunk_length_)) + sizeof(materialized_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAssetChunkArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CommandAssetChunkArchive.digest");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string asset_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_asset_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.CommandAssetChunkArchive.asset_chunk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 asset_chunk_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_asset_chunk_length(&has_bits);
          asset_chunk_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 resume_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_resume_position(&has_bits);
          resume_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 materialized_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_materialized_length(&has_bits);
          materialized_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAssetChunkArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.CommandAssetChunkArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommandAssetChunkArchive.digest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // optional string asset_chunk = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_asset_chunk().data(), static_cast<int>(this->_internal_asset_chunk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.CommandAssetChunkArchive.asset_chunk");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_asset_chunk(), target);
  }

  // required int64 asset_chunk_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_asset_chunk_length(), target);
  }

  // required int64 resume_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_resume_position(), target);
  }

  // required int64 materialized_length = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_materialized_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.CommandAssetChunkArchive)
  return target;
}

size_t CommandAssetChunkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSK.CommandAssetChunkArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_asset_chunk_length()) {
    // required int64 asset_chunk_length = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_asset_chunk_length());
  }

  if (_internal_has_resume_position()) {
    // required int64 resume_position = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resume_position());
  }

  if (_internal_has_materialized_length()) {
    // required int64 materialized_length = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_materialized_length());
  }

  return total_size;
}
size_t CommandAssetChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.CommandAssetChunkArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required int64 asset_chunk_length = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_asset_chunk_length());

    // required int64 resume_position = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resume_position());

    // required int64 materialized_length = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_materialized_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string digest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional string asset_chunk = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asset_chunk());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandAssetChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommandAssetChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandAssetChunkArchive::GetClassData() const { return &_class_data_; }

void CommandAssetChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommandAssetChunkArchive *>(to)->MergeFrom(
      static_cast<const CommandAssetChunkArchive &>(from));
}


void CommandAssetChunkArchive::MergeFrom(const CommandAssetChunkArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.CommandAssetChunkArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_asset_chunk(from._internal_asset_chunk());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      asset_chunk_length_ = from.asset_chunk_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      resume_position_ = from.resume_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      materialized_length_ = from.materialized_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandAssetChunkArchive::CopyFrom(const CommandAssetChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.CommandAssetChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAssetChunkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void CommandAssetChunkArchive::InternalSwap(CommandAssetChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, GetArenaForAllocation(),
      &other->digest_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_chunk_, GetArenaForAllocation(),
      &other->asset_chunk_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAssetChunkArchive, materialized_length_)
      + sizeof(CommandAssetChunkArchive::materialized_length_)
      - PROTOBUF_FIELD_OFFSET(CommandAssetChunkArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAssetChunkArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[72]);
}

// ===================================================================

class AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetUploadStatusCommandArchive_AssetUploadStatusInfo>()._has_bits_);
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upload_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AssetUploadStatusCommandArchive_AssetUploadStatusInfo::AssetUploadStatusCommandArchive_AssetUploadStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
}
AssetUploadStatusCommandArchive_AssetUploadStatusInfo::AssetUploadStatusCommandArchive_AssetUploadStatusInfo(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digest()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  upload_status_ = from.upload_status_;
  // @@protoc_insertion_point(copy_constructor:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
}

inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
upload_status_ = 0;
}

AssetUploadStatusCommandArchive_AssetUploadStatusInfo::~AssetUploadStatusCommandArchive_AssetUploadStatusInfo() {
  // @@protoc_insertion_point(destructor:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::ArenaDtor(void* object) {
  AssetUploadStatusCommandArchive_AssetUploadStatusInfo* _this = reinterpret_cast< AssetUploadStatusCommandArchive_AssetUploadStatusInfo* >(object);
  (void)_this;
}
void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    digest_.ClearNonDefaultToEmpty();
  }
  upload_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.DataUploadStatus upload_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSP::DataUploadStatus_IsValid(val))) {
            _internal_set_upload_status(static_cast<::TSP::DataUploadStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string digest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digest().data(), static_cast<int>(this->_internal_digest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // optional .TSP.DataUploadStatus upload_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_upload_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  return target;
}

size_t AssetUploadStatusCommandArchive_AssetUploadStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string digest = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digest());
    }

    // optional .TSP.DataUploadStatus upload_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_upload_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssetUploadStatusCommandArchive_AssetUploadStatusInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetUploadStatusCommandArchive_AssetUploadStatusInfo::GetClassData() const { return &_class_data_; }

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AssetUploadStatusCommandArchive_AssetUploadStatusInfo *>(to)->MergeFrom(
      static_cast<const AssetUploadStatusCommandArchive_AssetUploadStatusInfo &>(from));
}


void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::MergeFrom(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_digest(from._internal_digest());
    }
    if (cached_has_bits & 0x00000002u) {
      upload_status_ = from.upload_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::CopyFrom(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetUploadStatusCommandArchive_AssetUploadStatusInfo::IsInitialized() const {
  return true;
}

void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::InternalSwap(AssetUploadStatusCommandArchive_AssetUploadStatusInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, GetArenaForAllocation(),
      &other->digest_, other->GetArenaForAllocation()
  );
  swap(upload_status_, other->upload_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetUploadStatusCommandArchive_AssetUploadStatusInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[73]);
}

// ===================================================================

class AssetUploadStatusCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetUploadStatusCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const AssetUploadStatusCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
AssetUploadStatusCommandArchive::_Internal::super(const AssetUploadStatusCommandArchive* msg) {
  return *msg->super_;
}
AssetUploadStatusCommandArchive::AssetUploadStatusCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  info_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.AssetUploadStatusCommandArchive)
}
AssetUploadStatusCommandArchive::AssetUploadStatusCommandArchive(const AssetUploadStatusCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      info_list_(from.info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.AssetUploadStatusCommandArchive)
}

inline void AssetUploadStatusCommandArchive::SharedCtor() {
super_ = nullptr;
}

AssetUploadStatusCommandArchive::~AssetUploadStatusCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.AssetUploadStatusCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssetUploadStatusCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void AssetUploadStatusCommandArchive::ArenaDtor(void* object) {
  AssetUploadStatusCommandArchive* _this = reinterpret_cast< AssetUploadStatusCommandArchive* >(object);
  (void)_this;
}
void AssetUploadStatusCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetUploadStatusCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetUploadStatusCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AssetUploadStatusCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetUploadStatusCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetUploadStatusCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AssetUploadStatusCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AssetUploadStatusCommandArchive)
  return target;
}

size_t AssetUploadStatusCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AssetUploadStatusCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetUploadStatusCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssetUploadStatusCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetUploadStatusCommandArchive::GetClassData() const { return &_class_data_; }

void AssetUploadStatusCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AssetUploadStatusCommandArchive *>(to)->MergeFrom(
      static_cast<const AssetUploadStatusCommandArchive &>(from));
}


void AssetUploadStatusCommandArchive::MergeFrom(const AssetUploadStatusCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.AssetUploadStatusCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetUploadStatusCommandArchive::CopyFrom(const AssetUploadStatusCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AssetUploadStatusCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetUploadStatusCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void AssetUploadStatusCommandArchive::InternalSwap(AssetUploadStatusCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_list_.InternalSwap(&other->info_list_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetUploadStatusCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[74]);
}

// ===================================================================

class AssetUnmaterializedOnServerCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AssetUnmaterializedOnServerCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const AssetUnmaterializedOnServerCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
AssetUnmaterializedOnServerCommandArchive::_Internal::super(const AssetUnmaterializedOnServerCommandArchive* msg) {
  return *msg->super_;
}
AssetUnmaterializedOnServerCommandArchive::AssetUnmaterializedOnServerCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  digest_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.AssetUnmaterializedOnServerCommandArchive)
}
AssetUnmaterializedOnServerCommandArchive::AssetUnmaterializedOnServerCommandArchive(const AssetUnmaterializedOnServerCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      digest_list_(from.digest_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSK.AssetUnmaterializedOnServerCommandArchive)
}

inline void AssetUnmaterializedOnServerCommandArchive::SharedCtor() {
super_ = nullptr;
}

AssetUnmaterializedOnServerCommandArchive::~AssetUnmaterializedOnServerCommandArchive() {
  // @@protoc_insertion_point(destructor:TSK.AssetUnmaterializedOnServerCommandArchive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssetUnmaterializedOnServerCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete super_;
}

void AssetUnmaterializedOnServerCommandArchive::ArenaDtor(void* object) {
  AssetUnmaterializedOnServerCommandArchive* _this = reinterpret_cast< AssetUnmaterializedOnServerCommandArchive* >(object);
  (void)_this;
}
void AssetUnmaterializedOnServerCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetUnmaterializedOnServerCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssetUnmaterializedOnServerCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digest_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(super_ != nullptr);
    super_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssetUnmaterializedOnServerCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string digest_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_digest_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSK.AssetUnmaterializedOnServerCommandArchive.digest_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetUnmaterializedOnServerCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // repeated string digest_list = 2;
  for (int i = 0, n = this->_internal_digest_list_size(); i < n; i++) {
    const auto& s = this->_internal_digest_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSK.AssetUnmaterializedOnServerCommandArchive.digest_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.AssetUnmaterializedOnServerCommandArchive)
  return target;
}

size_t AssetUnmaterializedOnServerCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string digest_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(digest_list_.size());
  for (int i = 0, n = digest_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      digest_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssetUnmaterializedOnServerCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssetUnmaterializedOnServerCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssetUnmaterializedOnServerCommandArchive::GetClassData() const { return &_class_data_; }

void AssetUnmaterializedOnServerCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AssetUnmaterializedOnServerCommandArchive *>(to)->MergeFrom(
      static_cast<const AssetUnmaterializedOnServerCommandArchive &>(from));
}


void AssetUnmaterializedOnServerCommandArchive::MergeFrom(const AssetUnmaterializedOnServerCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  digest_list_.MergeFrom(from.digest_list_);
  if (from._internal_has_super()) {
    _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssetUnmaterializedOnServerCommandArchive::CopyFrom(const AssetUnmaterializedOnServerCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.AssetUnmaterializedOnServerCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetUnmaterializedOnServerCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void AssetUnmaterializedOnServerCommandArchive::InternalSwap(AssetUnmaterializedOnServerCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  digest_list_.InternalSwap(&other->digest_list_);
  swap(super_, other->super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetUnmaterializedOnServerCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[75]);
}

// ===================================================================

class PencilAnnotationUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationUIState>()._has_bits_);
  static void set_has_current_tool_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Color& pen_tool_color(const PencilAnnotationUIState* msg);
  static void set_has_pen_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pen_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pen_tool_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Color& highlighter_tool_color(const PencilAnnotationUIState* msg);
  static void set_has_highlighter_tool_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_highlighter_tool_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_highlighter_tool_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSP::Color&
PencilAnnotationUIState::_Internal::pen_tool_color(const PencilAnnotationUIState* msg) {
  return *msg->pen_tool_color_;
}
const ::TSP::Color&
PencilAnnotationUIState::_Internal::highlighter_tool_color(const PencilAnnotationUIState* msg) {
  return *msg->highlighter_tool_color_;
}
void PencilAnnotationUIState::clear_pen_tool_color() {
  if (pen_tool_color_ != nullptr) pen_tool_color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationUIState::clear_highlighter_tool_color() {
  if (highlighter_tool_color_ != nullptr) highlighter_tool_color_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PencilAnnotationUIState::PencilAnnotationUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TSK.PencilAnnotationUIState)
}
PencilAnnotationUIState::PencilAnnotationUIState(const PencilAnnotationUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pen_tool_color()) {
    pen_tool_color_ = new ::TSP::Color(*from.pen_tool_color_);
  } else {
    pen_tool_color_ = nullptr;
  }
  if (from._internal_has_highlighter_tool_color()) {
    highlighter_tool_color_ = new ::TSP::Color(*from.highlighter_tool_color_);
  } else {
    highlighter_tool_color_ = nullptr;
  }
  ::memcpy(&current_tool_type_, &from.current_tool_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&highlighter_tool_width_) -
    reinterpret_cast<char*>(&current_tool_type_)) + sizeof(highlighter_tool_width_));
  // @@protoc_insertion_point(copy_constructor:TSK.PencilAnnotationUIState)
}

inline void PencilAnnotationUIState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pen_tool_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&highlighter_tool_width_) -
    reinterpret_cast<char*>(&pen_tool_color_)) + sizeof(highlighter_tool_width_));
}

PencilAnnotationUIState::~PencilAnnotationUIState() {
  // @@protoc_insertion_point(destructor:TSK.PencilAnnotationUIState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PencilAnnotationUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pen_tool_color_;
  if (this != internal_default_instance()) delete highlighter_tool_color_;
}

void PencilAnnotationUIState::ArenaDtor(void* object) {
  PencilAnnotationUIState* _this = reinterpret_cast< PencilAnnotationUIState* >(object);
  (void)_this;
}
void PencilAnnotationUIState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PencilAnnotationUIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PencilAnnotationUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSK.PencilAnnotationUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pen_tool_color_ != nullptr);
      pen_tool_color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(highlighter_tool_color_ != nullptr);
      highlighter_tool_color_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&current_tool_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highlighter_tool_width_) -
        reinterpret_cast<char*>(&current_tool_type_)) + sizeof(highlighter_tool_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationUIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSK::PencilAnnotationUIState_PencilAnnotationToolType_IsValid(val))) {
            _internal_set_current_tool_type(static_cast<::TSK::PencilAnnotationUIState_PencilAnnotationToolType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color pen_tool_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pen_tool_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pen_tool_opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pen_tool_opacity(&has_bits);
          pen_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pen_tool_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_pen_tool_width(&has_bits);
          pen_tool_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Color highlighter_tool_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_highlighter_tool_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float highlighter_tool_opacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_highlighter_tool_opacity(&has_bits);
          highlighter_tool_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float highlighter_tool_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_highlighter_tool_width(&has_bits);
          highlighter_tool_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PencilAnnotationUIState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSK.PencilAnnotationUIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_current_tool_type(), target);
  }

  // optional .TSP.Color pen_tool_color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pen_tool_color(this), target, stream);
  }

  // optional float pen_tool_opacity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pen_tool_opacity(), target);
  }

  // optional float pen_tool_width = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pen_tool_width(), target);
  }

  // optional .TSP.Color highlighter_tool_color = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::highlighter_tool_color(this), target, stream);
  }

  // optional float highlighter_tool_opacity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_highlighter_tool_opacity(), target);
  }

  // optional float highlighter_tool_width = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_highlighter_tool_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSK.PencilAnnotationUIState)
  return target;
}

size_t PencilAnnotationUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSK.PencilAnnotationUIState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.Color pen_tool_color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pen_tool_color_);
    }

    // optional .TSP.Color highlighter_tool_color = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *highlighter_tool_color_);
    }

    // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_tool_type());
    }

    // optional float pen_tool_opacity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pen_tool_width = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float highlighter_tool_opacity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float highlighter_tool_width = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationUIState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PencilAnnotationUIState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationUIState::GetClassData() const { return &_class_data_; }

void PencilAnnotationUIState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PencilAnnotationUIState *>(to)->MergeFrom(
      static_cast<const PencilAnnotationUIState &>(from));
}


void PencilAnnotationUIState::MergeFrom(const PencilAnnotationUIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSK.PencilAnnotationUIState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pen_tool_color()->::TSP::Color::MergeFrom(from._internal_pen_tool_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_highlighter_tool_color()->::TSP::Color::MergeFrom(from._internal_highlighter_tool_color());
    }
    if (cached_has_bits & 0x00000004u) {
      current_tool_type_ = from.current_tool_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      pen_tool_opacity_ = from.pen_tool_opacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      pen_tool_width_ = from.pen_tool_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      highlighter_tool_opacity_ = from.highlighter_tool_opacity_;
    }
    if (cached_has_bits & 0x00000040u) {
      highlighter_tool_width_ = from.highlighter_tool_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationUIState::CopyFrom(const PencilAnnotationUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSK.PencilAnnotationUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationUIState::IsInitialized() const {
  if (_internal_has_pen_tool_color()) {
    if (!pen_tool_color_->IsInitialized()) return false;
  }
  if (_internal_has_highlighter_tool_color()) {
    if (!highlighter_tool_color_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationUIState::InternalSwap(PencilAnnotationUIState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationUIState, highlighter_tool_width_)
      + sizeof(PencilAnnotationUIState::highlighter_tool_width_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationUIState, pen_tool_color_)>(
          reinterpret_cast<char*>(&pen_tool_color_),
          reinterpret_cast<char*>(&other->pen_tool_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationUIState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSKArchives_2eproto_getter, &descriptor_table_TSKArchives_2eproto_once,
      file_level_metadata_TSKArchives_2eproto[76]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSK::TreeNode* Arena::CreateMaybeMessage< ::TSK::TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::TreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistoryItem* Arena::CreateMaybeMessage< ::TSK::LocalCommandHistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistoryArray* Arena::CreateMaybeMessage< ::TSK::LocalCommandHistoryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistoryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistoryArraySegment* Arena::CreateMaybeMessage< ::TSK::LocalCommandHistoryArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistoryArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::LocalCommandHistory* Arena::CreateMaybeMessage< ::TSK::LocalCommandHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::LocalCommandHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryArray* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryArraySegment* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistory_ItemList* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistory_ItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistory_ItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistory* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryItem* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryCoalescingGroup* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryCoalescingGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryCoalescingGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryCoalescingGroupNode* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryCoalescingGroupNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryCoalescingGroupNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* Arena::CreateMaybeMessage< ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentArchive* Arena::CreateMaybeMessage< ::TSK::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FormattingSymbolsArchive_CurrencySymbol* Arena::CreateMaybeMessage< ::TSK::FormattingSymbolsArchive_CurrencySymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FormattingSymbolsArchive_CurrencySymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FormattingSymbolsArchive* Arena::CreateMaybeMessage< ::TSK::FormattingSymbolsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FormattingSymbolsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentSupportCollaborationState* Arena::CreateMaybeMessage< ::TSK::DocumentSupportCollaborationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentSupportCollaborationState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentSupportArchive* Arena::CreateMaybeMessage< ::TSK::DocumentSupportArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentSupportArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ViewStateArchive* Arena::CreateMaybeMessage< ::TSK::ViewStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ViewStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandArchive* Arena::CreateMaybeMessage< ::TSK::CommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandGroupArchive* Arena::CreateMaybeMessage< ::TSK::CommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::InducedCommandCollectionArchive* Arena::CreateMaybeMessage< ::TSK::InducedCommandCollectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::InducedCommandCollectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::PropagatedCommandCollectionArchive* Arena::CreateMaybeMessage< ::TSK::PropagatedCommandCollectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::PropagatedCommandCollectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FinalCommandPairArchive* Arena::CreateMaybeMessage< ::TSK::FinalCommandPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FinalCommandPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandContainerArchive* Arena::CreateMaybeMessage< ::TSK::CommandContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ShuffleMappingArchive_Entry* Arena::CreateMaybeMessage< ::TSK::ShuffleMappingArchive_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ShuffleMappingArchive_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ShuffleMappingArchive* Arena::CreateMaybeMessage< ::TSK::ShuffleMappingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ShuffleMappingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ProgressiveCommandGroupArchive* Arena::CreateMaybeMessage< ::TSK::ProgressiveCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ProgressiveCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::FormatStructArchive* Arena::CreateMaybeMessage< ::TSK::FormatStructArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::FormatStructArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CustomFormatArchive_Condition* Arena::CreateMaybeMessage< ::TSK::CustomFormatArchive_Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CustomFormatArchive_Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CustomFormatArchive* Arena::CreateMaybeMessage< ::TSK::CustomFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CustomFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CustomFormatListArchive* Arena::CreateMaybeMessage< ::TSK::CustomFormatListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CustomFormatListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AnnotationAuthorArchive* Arena::CreateMaybeMessage< ::TSK::AnnotationAuthorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AnnotationAuthorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DeprecatedChangeAuthorArchive* Arena::CreateMaybeMessage< ::TSK::DeprecatedChangeAuthorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DeprecatedChangeAuthorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AnnotationAuthorStorageArchive* Arena::CreateMaybeMessage< ::TSK::AnnotationAuthorStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AnnotationAuthorStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SetAnnotationAuthorColorCommandArchive* Arena::CreateMaybeMessage< ::TSK::SetAnnotationAuthorColorCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SetAnnotationAuthorColorCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandSelectionBehaviorArchive* Arena::CreateMaybeMessage< ::TSK::CommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SelectionPathTransformerArchive* Arena::CreateMaybeMessage< ::TSK::SelectionPathTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SelectionPathTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::SelectionPathArchive* Arena::CreateMaybeMessage< ::TSK::SelectionPathArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::SelectionPathArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DocumentSelectionArchive* Arena::CreateMaybeMessage< ::TSK::DocumentSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DocumentSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::IdOperationArgs* Arena::CreateMaybeMessage< ::TSK::IdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::IdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AddIdOperationArgs* Arena::CreateMaybeMessage< ::TSK::AddIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AddIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::RemoveIdOperationArgs* Arena::CreateMaybeMessage< ::TSK::RemoveIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::RemoveIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::RearrangeIdOperationArgs* Arena::CreateMaybeMessage< ::TSK::RearrangeIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::RearrangeIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::IdPlacementOperationArgs* Arena::CreateMaybeMessage< ::TSK::IdPlacementOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::IdPlacementOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::NullCommandArchive* Arena::CreateMaybeMessage< ::TSK::NullCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::NullCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::GroupCommitCommandArchive* Arena::CreateMaybeMessage< ::TSK::GroupCommitCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::GroupCommitCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::UpgradeDocPostProcessingCommandArchive* Arena::CreateMaybeMessage< ::TSK::UpgradeDocPostProcessingCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::UpgradeDocPostProcessingCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::InducedCommandCollectionCommitCommandArchive* Arena::CreateMaybeMessage< ::TSK::InducedCommandCollectionCommitCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::InducedCommandCollectionCommitCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive* Arena::CreateMaybeMessage< ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::ChangeDocumentPackageTypeCommandArchive* Arena::CreateMaybeMessage< ::TSK::ChangeDocumentPackageTypeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::ChangeDocumentPackageTypeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CreateLocalStorageSnapshotCommandArchive* Arena::CreateMaybeMessage< ::TSK::CreateLocalStorageSnapshotCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CreateLocalStorageSnapshotCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::BlockDiffsAtCurrentRevisionCommand* Arena::CreateMaybeMessage< ::TSK::BlockDiffsAtCurrentRevisionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::BlockDiffsAtCurrentRevisionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::RangeAddress* Arena::CreateMaybeMessage< ::TSK::RangeAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::RangeAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::Operation* Arena::CreateMaybeMessage< ::TSK::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationTransformer* Arena::CreateMaybeMessage< ::TSK::OperationTransformer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationTransformer >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::TransformerEntry* Arena::CreateMaybeMessage< ::TSK::TransformerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::TransformerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueueItem* Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueueItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueueItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* Arena::CreateMaybeMessage< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CollaborationDocumentSessionState* Arena::CreateMaybeMessage< ::TSK::CollaborationDocumentSessionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CollaborationDocumentSessionState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::NativeContentDescription* Arena::CreateMaybeMessage< ::TSK::NativeContentDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::NativeContentDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::StructuredTextImportSettings* Arena::CreateMaybeMessage< ::TSK::StructuredTextImportSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::StructuredTextImportSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageCommandOperationsEntry* Arena::CreateMaybeMessage< ::TSK::OperationStorageCommandOperationsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageCommandOperationsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageEntry* Arena::CreateMaybeMessage< ::TSK::OperationStorageEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageEntryArray* Arena::CreateMaybeMessage< ::TSK::OperationStorageEntryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageEntryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorageEntryArraySegment* Arena::CreateMaybeMessage< ::TSK::OperationStorageEntryArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorageEntryArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OperationStorage* Arena::CreateMaybeMessage< ::TSK::OperationStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OperationStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueue* Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::OutgoingCommandQueueSegment* Arena::CreateMaybeMessage< ::TSK::OutgoingCommandQueueSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::OutgoingCommandQueueSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* Arena::CreateMaybeMessage< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::DataReferenceRecord* Arena::CreateMaybeMessage< ::TSK::DataReferenceRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::DataReferenceRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::CommandAssetChunkArchive* Arena::CreateMaybeMessage< ::TSK::CommandAssetChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::CommandAssetChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* Arena::CreateMaybeMessage< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AssetUploadStatusCommandArchive* Arena::CreateMaybeMessage< ::TSK::AssetUploadStatusCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AssetUploadStatusCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::AssetUnmaterializedOnServerCommandArchive* Arena::CreateMaybeMessage< ::TSK::AssetUnmaterializedOnServerCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::AssetUnmaterializedOnServerCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSK::PencilAnnotationUIState* Arena::CreateMaybeMessage< ::TSK::PencilAnnotationUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSK::PencilAnnotationUIState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
