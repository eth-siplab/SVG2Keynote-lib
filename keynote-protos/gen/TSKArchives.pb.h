// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSKArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSKArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSKArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSKArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSKArchives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[77]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSKArchives_2eproto;
namespace TSK {
class AddIdOperationArgs;
struct AddIdOperationArgsDefaultTypeInternal;
extern AddIdOperationArgsDefaultTypeInternal _AddIdOperationArgs_default_instance_;
class AnnotationAuthorArchive;
struct AnnotationAuthorArchiveDefaultTypeInternal;
extern AnnotationAuthorArchiveDefaultTypeInternal _AnnotationAuthorArchive_default_instance_;
class AnnotationAuthorStorageArchive;
struct AnnotationAuthorStorageArchiveDefaultTypeInternal;
extern AnnotationAuthorStorageArchiveDefaultTypeInternal _AnnotationAuthorStorageArchive_default_instance_;
class AssetUnmaterializedOnServerCommandArchive;
struct AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal;
extern AssetUnmaterializedOnServerCommandArchiveDefaultTypeInternal _AssetUnmaterializedOnServerCommandArchive_default_instance_;
class AssetUploadStatusCommandArchive;
struct AssetUploadStatusCommandArchiveDefaultTypeInternal;
extern AssetUploadStatusCommandArchiveDefaultTypeInternal _AssetUploadStatusCommandArchive_default_instance_;
class AssetUploadStatusCommandArchive_AssetUploadStatusInfo;
struct AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal;
extern AssetUploadStatusCommandArchive_AssetUploadStatusInfoDefaultTypeInternal _AssetUploadStatusCommandArchive_AssetUploadStatusInfo_default_instance_;
class BlockDiffsAtCurrentRevisionCommand;
struct BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal;
extern BlockDiffsAtCurrentRevisionCommandDefaultTypeInternal _BlockDiffsAtCurrentRevisionCommand_default_instance_;
class ChangeDocumentPackageTypeCommandArchive;
struct ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal;
extern ChangeDocumentPackageTypeCommandArchiveDefaultTypeInternal _ChangeDocumentPackageTypeCommandArchive_default_instance_;
class CollaborationCommandHistory;
struct CollaborationCommandHistoryDefaultTypeInternal;
extern CollaborationCommandHistoryDefaultTypeInternal _CollaborationCommandHistory_default_instance_;
class CollaborationCommandHistoryArray;
struct CollaborationCommandHistoryArrayDefaultTypeInternal;
extern CollaborationCommandHistoryArrayDefaultTypeInternal _CollaborationCommandHistoryArray_default_instance_;
class CollaborationCommandHistoryArraySegment;
struct CollaborationCommandHistoryArraySegmentDefaultTypeInternal;
extern CollaborationCommandHistoryArraySegmentDefaultTypeInternal _CollaborationCommandHistoryArraySegment_default_instance_;
class CollaborationCommandHistoryCoalescingGroup;
struct CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal;
extern CollaborationCommandHistoryCoalescingGroupDefaultTypeInternal _CollaborationCommandHistoryCoalescingGroup_default_instance_;
class CollaborationCommandHistoryCoalescingGroupNode;
struct CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal;
extern CollaborationCommandHistoryCoalescingGroupNodeDefaultTypeInternal _CollaborationCommandHistoryCoalescingGroupNode_default_instance_;
class CollaborationCommandHistoryItem;
struct CollaborationCommandHistoryItemDefaultTypeInternal;
extern CollaborationCommandHistoryItemDefaultTypeInternal _CollaborationCommandHistoryItem_default_instance_;
class CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver;
struct CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal;
extern CollaborationCommandHistoryOriginatingCommandAcknowledgementObserverDefaultTypeInternal _CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver_default_instance_;
class CollaborationCommandHistory_ItemList;
struct CollaborationCommandHistory_ItemListDefaultTypeInternal;
extern CollaborationCommandHistory_ItemListDefaultTypeInternal _CollaborationCommandHistory_ItemList_default_instance_;
class CollaborationDocumentSessionState;
struct CollaborationDocumentSessionStateDefaultTypeInternal;
extern CollaborationDocumentSessionStateDefaultTypeInternal _CollaborationDocumentSessionState_default_instance_;
class CollaborationDocumentSessionState_AcknowledgementObserverEntry;
struct CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal;
extern CollaborationDocumentSessionState_AcknowledgementObserverEntryDefaultTypeInternal _CollaborationDocumentSessionState_AcknowledgementObserverEntry_default_instance_;
class CommandArchive;
struct CommandArchiveDefaultTypeInternal;
extern CommandArchiveDefaultTypeInternal _CommandArchive_default_instance_;
class CommandAssetChunkArchive;
struct CommandAssetChunkArchiveDefaultTypeInternal;
extern CommandAssetChunkArchiveDefaultTypeInternal _CommandAssetChunkArchive_default_instance_;
class CommandContainerArchive;
struct CommandContainerArchiveDefaultTypeInternal;
extern CommandContainerArchiveDefaultTypeInternal _CommandContainerArchive_default_instance_;
class CommandGroupArchive;
struct CommandGroupArchiveDefaultTypeInternal;
extern CommandGroupArchiveDefaultTypeInternal _CommandGroupArchive_default_instance_;
class CommandSelectionBehaviorArchive;
struct CommandSelectionBehaviorArchiveDefaultTypeInternal;
extern CommandSelectionBehaviorArchiveDefaultTypeInternal _CommandSelectionBehaviorArchive_default_instance_;
class CreateLocalStorageSnapshotCommandArchive;
struct CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal;
extern CreateLocalStorageSnapshotCommandArchiveDefaultTypeInternal _CreateLocalStorageSnapshotCommandArchive_default_instance_;
class CustomFormatArchive;
struct CustomFormatArchiveDefaultTypeInternal;
extern CustomFormatArchiveDefaultTypeInternal _CustomFormatArchive_default_instance_;
class CustomFormatArchive_Condition;
struct CustomFormatArchive_ConditionDefaultTypeInternal;
extern CustomFormatArchive_ConditionDefaultTypeInternal _CustomFormatArchive_Condition_default_instance_;
class CustomFormatListArchive;
struct CustomFormatListArchiveDefaultTypeInternal;
extern CustomFormatListArchiveDefaultTypeInternal _CustomFormatListArchive_default_instance_;
class DataReferenceRecord;
struct DataReferenceRecordDefaultTypeInternal;
extern DataReferenceRecordDefaultTypeInternal _DataReferenceRecord_default_instance_;
class DataReferenceRecord_ContainerUUIDToReferencedDataPair;
struct DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal;
extern DataReferenceRecord_ContainerUUIDToReferencedDataPairDefaultTypeInternal _DataReferenceRecord_ContainerUUIDToReferencedDataPair_default_instance_;
class DeprecatedChangeAuthorArchive;
struct DeprecatedChangeAuthorArchiveDefaultTypeInternal;
extern DeprecatedChangeAuthorArchiveDefaultTypeInternal _DeprecatedChangeAuthorArchive_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class DocumentSelectionArchive;
struct DocumentSelectionArchiveDefaultTypeInternal;
extern DocumentSelectionArchiveDefaultTypeInternal _DocumentSelectionArchive_default_instance_;
class DocumentSupportArchive;
struct DocumentSupportArchiveDefaultTypeInternal;
extern DocumentSupportArchiveDefaultTypeInternal _DocumentSupportArchive_default_instance_;
class DocumentSupportCollaborationState;
struct DocumentSupportCollaborationStateDefaultTypeInternal;
extern DocumentSupportCollaborationStateDefaultTypeInternal _DocumentSupportCollaborationState_default_instance_;
class ExecuteTestBetweenRollbackAndReapplyCommandArchive;
struct ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal;
extern ExecuteTestBetweenRollbackAndReapplyCommandArchiveDefaultTypeInternal _ExecuteTestBetweenRollbackAndReapplyCommandArchive_default_instance_;
class FinalCommandPairArchive;
struct FinalCommandPairArchiveDefaultTypeInternal;
extern FinalCommandPairArchiveDefaultTypeInternal _FinalCommandPairArchive_default_instance_;
class FormatStructArchive;
struct FormatStructArchiveDefaultTypeInternal;
extern FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
class FormattingSymbolsArchive;
struct FormattingSymbolsArchiveDefaultTypeInternal;
extern FormattingSymbolsArchiveDefaultTypeInternal _FormattingSymbolsArchive_default_instance_;
class FormattingSymbolsArchive_CurrencySymbol;
struct FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal;
extern FormattingSymbolsArchive_CurrencySymbolDefaultTypeInternal _FormattingSymbolsArchive_CurrencySymbol_default_instance_;
class GroupCommitCommandArchive;
struct GroupCommitCommandArchiveDefaultTypeInternal;
extern GroupCommitCommandArchiveDefaultTypeInternal _GroupCommitCommandArchive_default_instance_;
class IdOperationArgs;
struct IdOperationArgsDefaultTypeInternal;
extern IdOperationArgsDefaultTypeInternal _IdOperationArgs_default_instance_;
class IdPlacementOperationArgs;
struct IdPlacementOperationArgsDefaultTypeInternal;
extern IdPlacementOperationArgsDefaultTypeInternal _IdPlacementOperationArgs_default_instance_;
class InducedCommandCollectionArchive;
struct InducedCommandCollectionArchiveDefaultTypeInternal;
extern InducedCommandCollectionArchiveDefaultTypeInternal _InducedCommandCollectionArchive_default_instance_;
class InducedCommandCollectionCommitCommandArchive;
struct InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal;
extern InducedCommandCollectionCommitCommandArchiveDefaultTypeInternal _InducedCommandCollectionCommitCommandArchive_default_instance_;
class LocalCommandHistory;
struct LocalCommandHistoryDefaultTypeInternal;
extern LocalCommandHistoryDefaultTypeInternal _LocalCommandHistory_default_instance_;
class LocalCommandHistoryArray;
struct LocalCommandHistoryArrayDefaultTypeInternal;
extern LocalCommandHistoryArrayDefaultTypeInternal _LocalCommandHistoryArray_default_instance_;
class LocalCommandHistoryArraySegment;
struct LocalCommandHistoryArraySegmentDefaultTypeInternal;
extern LocalCommandHistoryArraySegmentDefaultTypeInternal _LocalCommandHistoryArraySegment_default_instance_;
class LocalCommandHistoryItem;
struct LocalCommandHistoryItemDefaultTypeInternal;
extern LocalCommandHistoryItemDefaultTypeInternal _LocalCommandHistoryItem_default_instance_;
class NativeContentDescription;
struct NativeContentDescriptionDefaultTypeInternal;
extern NativeContentDescriptionDefaultTypeInternal _NativeContentDescription_default_instance_;
class NullCommandArchive;
struct NullCommandArchiveDefaultTypeInternal;
extern NullCommandArchiveDefaultTypeInternal _NullCommandArchive_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationStorage;
struct OperationStorageDefaultTypeInternal;
extern OperationStorageDefaultTypeInternal _OperationStorage_default_instance_;
class OperationStorageCommandOperationsEntry;
struct OperationStorageCommandOperationsEntryDefaultTypeInternal;
extern OperationStorageCommandOperationsEntryDefaultTypeInternal _OperationStorageCommandOperationsEntry_default_instance_;
class OperationStorageEntry;
struct OperationStorageEntryDefaultTypeInternal;
extern OperationStorageEntryDefaultTypeInternal _OperationStorageEntry_default_instance_;
class OperationStorageEntryArray;
struct OperationStorageEntryArrayDefaultTypeInternal;
extern OperationStorageEntryArrayDefaultTypeInternal _OperationStorageEntryArray_default_instance_;
class OperationStorageEntryArraySegment;
struct OperationStorageEntryArraySegmentDefaultTypeInternal;
extern OperationStorageEntryArraySegmentDefaultTypeInternal _OperationStorageEntryArraySegment_default_instance_;
class OperationTransformer;
struct OperationTransformerDefaultTypeInternal;
extern OperationTransformerDefaultTypeInternal _OperationTransformer_default_instance_;
class OutgoingCommandQueue;
struct OutgoingCommandQueueDefaultTypeInternal;
extern OutgoingCommandQueueDefaultTypeInternal _OutgoingCommandQueue_default_instance_;
class OutgoingCommandQueueItem;
struct OutgoingCommandQueueItemDefaultTypeInternal;
extern OutgoingCommandQueueItemDefaultTypeInternal _OutgoingCommandQueueItem_default_instance_;
class OutgoingCommandQueueItemUUIDToDataMapEntry;
struct OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal;
extern OutgoingCommandQueueItemUUIDToDataMapEntryDefaultTypeInternal _OutgoingCommandQueueItemUUIDToDataMapEntry_default_instance_;
class OutgoingCommandQueueSegment;
struct OutgoingCommandQueueSegmentDefaultTypeInternal;
extern OutgoingCommandQueueSegmentDefaultTypeInternal _OutgoingCommandQueueSegment_default_instance_;
class PencilAnnotationUIState;
struct PencilAnnotationUIStateDefaultTypeInternal;
extern PencilAnnotationUIStateDefaultTypeInternal _PencilAnnotationUIState_default_instance_;
class ProgressiveCommandGroupArchive;
struct ProgressiveCommandGroupArchiveDefaultTypeInternal;
extern ProgressiveCommandGroupArchiveDefaultTypeInternal _ProgressiveCommandGroupArchive_default_instance_;
class PropagatedCommandCollectionArchive;
struct PropagatedCommandCollectionArchiveDefaultTypeInternal;
extern PropagatedCommandCollectionArchiveDefaultTypeInternal _PropagatedCommandCollectionArchive_default_instance_;
class RangeAddress;
struct RangeAddressDefaultTypeInternal;
extern RangeAddressDefaultTypeInternal _RangeAddress_default_instance_;
class RearrangeIdOperationArgs;
struct RearrangeIdOperationArgsDefaultTypeInternal;
extern RearrangeIdOperationArgsDefaultTypeInternal _RearrangeIdOperationArgs_default_instance_;
class RemoveIdOperationArgs;
struct RemoveIdOperationArgsDefaultTypeInternal;
extern RemoveIdOperationArgsDefaultTypeInternal _RemoveIdOperationArgs_default_instance_;
class SelectionPathArchive;
struct SelectionPathArchiveDefaultTypeInternal;
extern SelectionPathArchiveDefaultTypeInternal _SelectionPathArchive_default_instance_;
class SelectionPathTransformerArchive;
struct SelectionPathTransformerArchiveDefaultTypeInternal;
extern SelectionPathTransformerArchiveDefaultTypeInternal _SelectionPathTransformerArchive_default_instance_;
class SetAnnotationAuthorColorCommandArchive;
struct SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal;
extern SetAnnotationAuthorColorCommandArchiveDefaultTypeInternal _SetAnnotationAuthorColorCommandArchive_default_instance_;
class ShuffleMappingArchive;
struct ShuffleMappingArchiveDefaultTypeInternal;
extern ShuffleMappingArchiveDefaultTypeInternal _ShuffleMappingArchive_default_instance_;
class ShuffleMappingArchive_Entry;
struct ShuffleMappingArchive_EntryDefaultTypeInternal;
extern ShuffleMappingArchive_EntryDefaultTypeInternal _ShuffleMappingArchive_Entry_default_instance_;
class StructuredTextImportSettings;
struct StructuredTextImportSettingsDefaultTypeInternal;
extern StructuredTextImportSettingsDefaultTypeInternal _StructuredTextImportSettings_default_instance_;
class TransformerEntry;
struct TransformerEntryDefaultTypeInternal;
extern TransformerEntryDefaultTypeInternal _TransformerEntry_default_instance_;
class TreeNode;
struct TreeNodeDefaultTypeInternal;
extern TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
class UpgradeDocPostProcessingCommandArchive;
struct UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal;
extern UpgradeDocPostProcessingCommandArchiveDefaultTypeInternal _UpgradeDocPostProcessingCommandArchive_default_instance_;
class ViewStateArchive;
struct ViewStateArchiveDefaultTypeInternal;
extern ViewStateArchiveDefaultTypeInternal _ViewStateArchive_default_instance_;
}  // namespace TSK
PROTOBUF_NAMESPACE_OPEN
template<> ::TSK::AddIdOperationArgs* Arena::CreateMaybeMessage<::TSK::AddIdOperationArgs>(Arena*);
template<> ::TSK::AnnotationAuthorArchive* Arena::CreateMaybeMessage<::TSK::AnnotationAuthorArchive>(Arena*);
template<> ::TSK::AnnotationAuthorStorageArchive* Arena::CreateMaybeMessage<::TSK::AnnotationAuthorStorageArchive>(Arena*);
template<> ::TSK::AssetUnmaterializedOnServerCommandArchive* Arena::CreateMaybeMessage<::TSK::AssetUnmaterializedOnServerCommandArchive>(Arena*);
template<> ::TSK::AssetUploadStatusCommandArchive* Arena::CreateMaybeMessage<::TSK::AssetUploadStatusCommandArchive>(Arena*);
template<> ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* Arena::CreateMaybeMessage<::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo>(Arena*);
template<> ::TSK::BlockDiffsAtCurrentRevisionCommand* Arena::CreateMaybeMessage<::TSK::BlockDiffsAtCurrentRevisionCommand>(Arena*);
template<> ::TSK::ChangeDocumentPackageTypeCommandArchive* Arena::CreateMaybeMessage<::TSK::ChangeDocumentPackageTypeCommandArchive>(Arena*);
template<> ::TSK::CollaborationCommandHistory* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistory>(Arena*);
template<> ::TSK::CollaborationCommandHistoryArray* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistoryArray>(Arena*);
template<> ::TSK::CollaborationCommandHistoryArraySegment* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistoryArraySegment>(Arena*);
template<> ::TSK::CollaborationCommandHistoryCoalescingGroup* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistoryCoalescingGroup>(Arena*);
template<> ::TSK::CollaborationCommandHistoryCoalescingGroupNode* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistoryCoalescingGroupNode>(Arena*);
template<> ::TSK::CollaborationCommandHistoryItem* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistoryItem>(Arena*);
template<> ::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver>(Arena*);
template<> ::TSK::CollaborationCommandHistory_ItemList* Arena::CreateMaybeMessage<::TSK::CollaborationCommandHistory_ItemList>(Arena*);
template<> ::TSK::CollaborationDocumentSessionState* Arena::CreateMaybeMessage<::TSK::CollaborationDocumentSessionState>(Arena*);
template<> ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* Arena::CreateMaybeMessage<::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry>(Arena*);
template<> ::TSK::CommandArchive* Arena::CreateMaybeMessage<::TSK::CommandArchive>(Arena*);
template<> ::TSK::CommandAssetChunkArchive* Arena::CreateMaybeMessage<::TSK::CommandAssetChunkArchive>(Arena*);
template<> ::TSK::CommandContainerArchive* Arena::CreateMaybeMessage<::TSK::CommandContainerArchive>(Arena*);
template<> ::TSK::CommandGroupArchive* Arena::CreateMaybeMessage<::TSK::CommandGroupArchive>(Arena*);
template<> ::TSK::CommandSelectionBehaviorArchive* Arena::CreateMaybeMessage<::TSK::CommandSelectionBehaviorArchive>(Arena*);
template<> ::TSK::CreateLocalStorageSnapshotCommandArchive* Arena::CreateMaybeMessage<::TSK::CreateLocalStorageSnapshotCommandArchive>(Arena*);
template<> ::TSK::CustomFormatArchive* Arena::CreateMaybeMessage<::TSK::CustomFormatArchive>(Arena*);
template<> ::TSK::CustomFormatArchive_Condition* Arena::CreateMaybeMessage<::TSK::CustomFormatArchive_Condition>(Arena*);
template<> ::TSK::CustomFormatListArchive* Arena::CreateMaybeMessage<::TSK::CustomFormatListArchive>(Arena*);
template<> ::TSK::DataReferenceRecord* Arena::CreateMaybeMessage<::TSK::DataReferenceRecord>(Arena*);
template<> ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* Arena::CreateMaybeMessage<::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair>(Arena*);
template<> ::TSK::DeprecatedChangeAuthorArchive* Arena::CreateMaybeMessage<::TSK::DeprecatedChangeAuthorArchive>(Arena*);
template<> ::TSK::DocumentArchive* Arena::CreateMaybeMessage<::TSK::DocumentArchive>(Arena*);
template<> ::TSK::DocumentSelectionArchive* Arena::CreateMaybeMessage<::TSK::DocumentSelectionArchive>(Arena*);
template<> ::TSK::DocumentSupportArchive* Arena::CreateMaybeMessage<::TSK::DocumentSupportArchive>(Arena*);
template<> ::TSK::DocumentSupportCollaborationState* Arena::CreateMaybeMessage<::TSK::DocumentSupportCollaborationState>(Arena*);
template<> ::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive* Arena::CreateMaybeMessage<::TSK::ExecuteTestBetweenRollbackAndReapplyCommandArchive>(Arena*);
template<> ::TSK::FinalCommandPairArchive* Arena::CreateMaybeMessage<::TSK::FinalCommandPairArchive>(Arena*);
template<> ::TSK::FormatStructArchive* Arena::CreateMaybeMessage<::TSK::FormatStructArchive>(Arena*);
template<> ::TSK::FormattingSymbolsArchive* Arena::CreateMaybeMessage<::TSK::FormattingSymbolsArchive>(Arena*);
template<> ::TSK::FormattingSymbolsArchive_CurrencySymbol* Arena::CreateMaybeMessage<::TSK::FormattingSymbolsArchive_CurrencySymbol>(Arena*);
template<> ::TSK::GroupCommitCommandArchive* Arena::CreateMaybeMessage<::TSK::GroupCommitCommandArchive>(Arena*);
template<> ::TSK::IdOperationArgs* Arena::CreateMaybeMessage<::TSK::IdOperationArgs>(Arena*);
template<> ::TSK::IdPlacementOperationArgs* Arena::CreateMaybeMessage<::TSK::IdPlacementOperationArgs>(Arena*);
template<> ::TSK::InducedCommandCollectionArchive* Arena::CreateMaybeMessage<::TSK::InducedCommandCollectionArchive>(Arena*);
template<> ::TSK::InducedCommandCollectionCommitCommandArchive* Arena::CreateMaybeMessage<::TSK::InducedCommandCollectionCommitCommandArchive>(Arena*);
template<> ::TSK::LocalCommandHistory* Arena::CreateMaybeMessage<::TSK::LocalCommandHistory>(Arena*);
template<> ::TSK::LocalCommandHistoryArray* Arena::CreateMaybeMessage<::TSK::LocalCommandHistoryArray>(Arena*);
template<> ::TSK::LocalCommandHistoryArraySegment* Arena::CreateMaybeMessage<::TSK::LocalCommandHistoryArraySegment>(Arena*);
template<> ::TSK::LocalCommandHistoryItem* Arena::CreateMaybeMessage<::TSK::LocalCommandHistoryItem>(Arena*);
template<> ::TSK::NativeContentDescription* Arena::CreateMaybeMessage<::TSK::NativeContentDescription>(Arena*);
template<> ::TSK::NullCommandArchive* Arena::CreateMaybeMessage<::TSK::NullCommandArchive>(Arena*);
template<> ::TSK::Operation* Arena::CreateMaybeMessage<::TSK::Operation>(Arena*);
template<> ::TSK::OperationStorage* Arena::CreateMaybeMessage<::TSK::OperationStorage>(Arena*);
template<> ::TSK::OperationStorageCommandOperationsEntry* Arena::CreateMaybeMessage<::TSK::OperationStorageCommandOperationsEntry>(Arena*);
template<> ::TSK::OperationStorageEntry* Arena::CreateMaybeMessage<::TSK::OperationStorageEntry>(Arena*);
template<> ::TSK::OperationStorageEntryArray* Arena::CreateMaybeMessage<::TSK::OperationStorageEntryArray>(Arena*);
template<> ::TSK::OperationStorageEntryArraySegment* Arena::CreateMaybeMessage<::TSK::OperationStorageEntryArraySegment>(Arena*);
template<> ::TSK::OperationTransformer* Arena::CreateMaybeMessage<::TSK::OperationTransformer>(Arena*);
template<> ::TSK::OutgoingCommandQueue* Arena::CreateMaybeMessage<::TSK::OutgoingCommandQueue>(Arena*);
template<> ::TSK::OutgoingCommandQueueItem* Arena::CreateMaybeMessage<::TSK::OutgoingCommandQueueItem>(Arena*);
template<> ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* Arena::CreateMaybeMessage<::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry>(Arena*);
template<> ::TSK::OutgoingCommandQueueSegment* Arena::CreateMaybeMessage<::TSK::OutgoingCommandQueueSegment>(Arena*);
template<> ::TSK::PencilAnnotationUIState* Arena::CreateMaybeMessage<::TSK::PencilAnnotationUIState>(Arena*);
template<> ::TSK::ProgressiveCommandGroupArchive* Arena::CreateMaybeMessage<::TSK::ProgressiveCommandGroupArchive>(Arena*);
template<> ::TSK::PropagatedCommandCollectionArchive* Arena::CreateMaybeMessage<::TSK::PropagatedCommandCollectionArchive>(Arena*);
template<> ::TSK::RangeAddress* Arena::CreateMaybeMessage<::TSK::RangeAddress>(Arena*);
template<> ::TSK::RearrangeIdOperationArgs* Arena::CreateMaybeMessage<::TSK::RearrangeIdOperationArgs>(Arena*);
template<> ::TSK::RemoveIdOperationArgs* Arena::CreateMaybeMessage<::TSK::RemoveIdOperationArgs>(Arena*);
template<> ::TSK::SelectionPathArchive* Arena::CreateMaybeMessage<::TSK::SelectionPathArchive>(Arena*);
template<> ::TSK::SelectionPathTransformerArchive* Arena::CreateMaybeMessage<::TSK::SelectionPathTransformerArchive>(Arena*);
template<> ::TSK::SetAnnotationAuthorColorCommandArchive* Arena::CreateMaybeMessage<::TSK::SetAnnotationAuthorColorCommandArchive>(Arena*);
template<> ::TSK::ShuffleMappingArchive* Arena::CreateMaybeMessage<::TSK::ShuffleMappingArchive>(Arena*);
template<> ::TSK::ShuffleMappingArchive_Entry* Arena::CreateMaybeMessage<::TSK::ShuffleMappingArchive_Entry>(Arena*);
template<> ::TSK::StructuredTextImportSettings* Arena::CreateMaybeMessage<::TSK::StructuredTextImportSettings>(Arena*);
template<> ::TSK::TransformerEntry* Arena::CreateMaybeMessage<::TSK::TransformerEntry>(Arena*);
template<> ::TSK::TreeNode* Arena::CreateMaybeMessage<::TSK::TreeNode>(Arena*);
template<> ::TSK::UpgradeDocPostProcessingCommandArchive* Arena::CreateMaybeMessage<::TSK::UpgradeDocPostProcessingCommandArchive>(Arena*);
template<> ::TSK::ViewStateArchive* Arena::CreateMaybeMessage<::TSK::ViewStateArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSK {

enum ChangeDocumentPackageTypeCommandArchive_PackageType : int {
  ChangeDocumentPackageTypeCommandArchive_PackageType_Default = 0,
  ChangeDocumentPackageTypeCommandArchive_PackageType_Directory = 1,
  ChangeDocumentPackageTypeCommandArchive_PackageType_SingleFile = 2
};
bool ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(int value);
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_MIN = ChangeDocumentPackageTypeCommandArchive_PackageType_Default;
constexpr ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_MAX = ChangeDocumentPackageTypeCommandArchive_PackageType_SingleFile;
constexpr int ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_ARRAYSIZE = ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor();
template<typename T>
inline const std::string& ChangeDocumentPackageTypeCommandArchive_PackageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeDocumentPackageTypeCommandArchive_PackageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeDocumentPackageTypeCommandArchive_PackageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor(), enum_t_value);
}
inline bool ChangeDocumentPackageTypeCommandArchive_PackageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeDocumentPackageTypeCommandArchive_PackageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeDocumentPackageTypeCommandArchive_PackageType>(
    ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor(), name, value);
}
enum Operation_OperationType : int {
  Operation_OperationType_Add = 0,
  Operation_OperationType_Remove = 1,
  Operation_OperationType_Placement = 2,
  Operation_OperationType_Rearrange = 3,
  Operation_OperationType_UpdateId = 4,
  Operation_OperationType_UpdateRange = 5,
  Operation_OperationType_ReplaceRange = 6
};
bool Operation_OperationType_IsValid(int value);
constexpr Operation_OperationType Operation_OperationType_OperationType_MIN = Operation_OperationType_Add;
constexpr Operation_OperationType Operation_OperationType_OperationType_MAX = Operation_OperationType_ReplaceRange;
constexpr int Operation_OperationType_OperationType_ARRAYSIZE = Operation_OperationType_OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationType_descriptor();
template<typename T>
inline const std::string& Operation_OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_OperationType_descriptor(), enum_t_value);
}
inline bool Operation_OperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Operation_OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_OperationType>(
    Operation_OperationType_descriptor(), name, value);
}
enum PencilAnnotationUIState_PencilAnnotationToolType : int {
  PencilAnnotationUIState_PencilAnnotationToolType_Pen = 0,
  PencilAnnotationUIState_PencilAnnotationToolType_Highlighter = 1
};
bool PencilAnnotationUIState_PencilAnnotationToolType_IsValid(int value);
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_MIN = PencilAnnotationUIState_PencilAnnotationToolType_Pen;
constexpr PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_MAX = PencilAnnotationUIState_PencilAnnotationToolType_Highlighter;
constexpr int PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_ARRAYSIZE = PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PencilAnnotationUIState_PencilAnnotationToolType_descriptor();
template<typename T>
inline const std::string& PencilAnnotationUIState_PencilAnnotationToolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PencilAnnotationUIState_PencilAnnotationToolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PencilAnnotationUIState_PencilAnnotationToolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PencilAnnotationUIState_PencilAnnotationToolType_descriptor(), enum_t_value);
}
inline bool PencilAnnotationUIState_PencilAnnotationToolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PencilAnnotationUIState_PencilAnnotationToolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PencilAnnotationUIState_PencilAnnotationToolType>(
    PencilAnnotationUIState_PencilAnnotationToolType_descriptor(), name, value);
}
enum StructuredTextImportType : int {
  ImportType_UNKNOWN = 0,
  ImportType_DELIMITED = 1,
  ImportType_FIXEDWIDTH = 2
};
bool StructuredTextImportType_IsValid(int value);
constexpr StructuredTextImportType StructuredTextImportType_MIN = ImportType_UNKNOWN;
constexpr StructuredTextImportType StructuredTextImportType_MAX = ImportType_FIXEDWIDTH;
constexpr int StructuredTextImportType_ARRAYSIZE = StructuredTextImportType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StructuredTextImportType_descriptor();
template<typename T>
inline const std::string& StructuredTextImportType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StructuredTextImportType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StructuredTextImportType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StructuredTextImportType_descriptor(), enum_t_value);
}
inline bool StructuredTextImportType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StructuredTextImportType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StructuredTextImportType>(
    StructuredTextImportType_descriptor(), name, value);
}
// ===================================================================

class TreeNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.TreeNode) */ {
 public:
  inline TreeNode() : TreeNode(nullptr) {}
  ~TreeNode() override;
  explicit constexpr TreeNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeNode(const TreeNode& from);
  TreeNode(TreeNode&& from) noexcept
    : TreeNode() {
    *this = ::std::move(from);
  }

  inline TreeNode& operator=(const TreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeNode& operator=(TreeNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeNode* internal_default_instance() {
    return reinterpret_cast<const TreeNode*>(
               &_TreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TreeNode& a, TreeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreeNode* New() const final {
    return CreateMaybeMessage<TreeNode>(nullptr);
  }

  TreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreeNode& from);
  void MergeFrom(const TreeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.TreeNode";
  }
  protected:
  explicit TreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kNameFieldNumber = 1,
    kObjectFieldNumber = 3,
  };
  // repeated .TSP.Reference children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::TSP::Reference* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();
  private:
  const ::TSP::Reference& _internal_children(int index) const;
  ::TSP::Reference* _internal_add_children();
  public:
  const ::TSP::Reference& children(int index) const;
  ::TSP::Reference* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      children() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSP.Reference object = 3;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::TSP::Reference& object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_object();
  ::TSP::Reference* mutable_object();
  void set_allocated_object(::TSP::Reference* object);
  private:
  const ::TSP::Reference& _internal_object() const;
  ::TSP::Reference* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::TSP::Reference* object);
  ::TSP::Reference* unsafe_arena_release_object();

  // @@protoc_insertion_point(class_scope:TSK.TreeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSP::Reference* object_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class LocalCommandHistoryItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.LocalCommandHistoryItem) */ {
 public:
  inline LocalCommandHistoryItem() : LocalCommandHistoryItem(nullptr) {}
  ~LocalCommandHistoryItem() override;
  explicit constexpr LocalCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCommandHistoryItem(const LocalCommandHistoryItem& from);
  LocalCommandHistoryItem(LocalCommandHistoryItem&& from) noexcept
    : LocalCommandHistoryItem() {
    *this = ::std::move(from);
  }

  inline LocalCommandHistoryItem& operator=(const LocalCommandHistoryItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCommandHistoryItem& operator=(LocalCommandHistoryItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalCommandHistoryItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCommandHistoryItem* internal_default_instance() {
    return reinterpret_cast<const LocalCommandHistoryItem*>(
               &_LocalCommandHistoryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalCommandHistoryItem& a, LocalCommandHistoryItem& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCommandHistoryItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCommandHistoryItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalCommandHistoryItem* New() const final {
    return CreateMaybeMessage<LocalCommandHistoryItem>(nullptr);
  }

  LocalCommandHistoryItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalCommandHistoryItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalCommandHistoryItem& from);
  void MergeFrom(const LocalCommandHistoryItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalCommandHistoryItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.LocalCommandHistoryItem";
  }
  protected:
  explicit LocalCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kSelectionBehaviorFieldNumber = 2,
  };
  // optional .TSP.Reference command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::TSP::Reference& command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_command();
  ::TSP::Reference* mutable_command();
  void set_allocated_command(::TSP::Reference* command);
  private:
  const ::TSP::Reference& _internal_command() const;
  ::TSP::Reference* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::TSP::Reference* command);
  ::TSP::Reference* unsafe_arena_release_command();

  // optional .TSP.Reference selection_behavior = 2;
  bool has_selection_behavior() const;
  private:
  bool _internal_has_selection_behavior() const;
  public:
  void clear_selection_behavior();
  const ::TSP::Reference& selection_behavior() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_selection_behavior();
  ::TSP::Reference* mutable_selection_behavior();
  void set_allocated_selection_behavior(::TSP::Reference* selection_behavior);
  private:
  const ::TSP::Reference& _internal_selection_behavior() const;
  ::TSP::Reference* _internal_mutable_selection_behavior();
  public:
  void unsafe_arena_set_allocated_selection_behavior(
      ::TSP::Reference* selection_behavior);
  ::TSP::Reference* unsafe_arena_release_selection_behavior();

  // @@protoc_insertion_point(class_scope:TSK.LocalCommandHistoryItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* command_;
  ::TSP::Reference* selection_behavior_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class LocalCommandHistoryArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.LocalCommandHistoryArray) */ {
 public:
  inline LocalCommandHistoryArray() : LocalCommandHistoryArray(nullptr) {}
  ~LocalCommandHistoryArray() override;
  explicit constexpr LocalCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCommandHistoryArray(const LocalCommandHistoryArray& from);
  LocalCommandHistoryArray(LocalCommandHistoryArray&& from) noexcept
    : LocalCommandHistoryArray() {
    *this = ::std::move(from);
  }

  inline LocalCommandHistoryArray& operator=(const LocalCommandHistoryArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCommandHistoryArray& operator=(LocalCommandHistoryArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalCommandHistoryArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCommandHistoryArray* internal_default_instance() {
    return reinterpret_cast<const LocalCommandHistoryArray*>(
               &_LocalCommandHistoryArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalCommandHistoryArray& a, LocalCommandHistoryArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCommandHistoryArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCommandHistoryArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalCommandHistoryArray* New() const final {
    return CreateMaybeMessage<LocalCommandHistoryArray>(nullptr);
  }

  LocalCommandHistoryArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalCommandHistoryArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalCommandHistoryArray& from);
  void MergeFrom(const LocalCommandHistoryArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalCommandHistoryArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.LocalCommandHistoryArray";
  }
  protected:
  explicit LocalCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // required .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSK.LocalCommandHistoryArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class LocalCommandHistoryArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.LocalCommandHistoryArraySegment) */ {
 public:
  inline LocalCommandHistoryArraySegment() : LocalCommandHistoryArraySegment(nullptr) {}
  ~LocalCommandHistoryArraySegment() override;
  explicit constexpr LocalCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCommandHistoryArraySegment(const LocalCommandHistoryArraySegment& from);
  LocalCommandHistoryArraySegment(LocalCommandHistoryArraySegment&& from) noexcept
    : LocalCommandHistoryArraySegment() {
    *this = ::std::move(from);
  }

  inline LocalCommandHistoryArraySegment& operator=(const LocalCommandHistoryArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCommandHistoryArraySegment& operator=(LocalCommandHistoryArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalCommandHistoryArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCommandHistoryArraySegment* internal_default_instance() {
    return reinterpret_cast<const LocalCommandHistoryArraySegment*>(
               &_LocalCommandHistoryArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalCommandHistoryArraySegment& a, LocalCommandHistoryArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCommandHistoryArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCommandHistoryArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalCommandHistoryArraySegment* New() const final {
    return CreateMaybeMessage<LocalCommandHistoryArraySegment>(nullptr);
  }

  LocalCommandHistoryArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalCommandHistoryArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalCommandHistoryArraySegment& from);
  void MergeFrom(const LocalCommandHistoryArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalCommandHistoryArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.LocalCommandHistoryArraySegment";
  }
  protected:
  explicit LocalCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeObjectArraySegmentFieldNumber = 1,
  };
  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  bool has_large_object_array_segment() const;
  private:
  bool _internal_has_large_object_array_segment() const;
  public:
  void clear_large_object_array_segment();
  const ::TSP::LargeObjectArraySegment& large_object_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeObjectArraySegment* release_large_object_array_segment();
  ::TSP::LargeObjectArraySegment* mutable_large_object_array_segment();
  void set_allocated_large_object_array_segment(::TSP::LargeObjectArraySegment* large_object_array_segment);
  private:
  const ::TSP::LargeObjectArraySegment& _internal_large_object_array_segment() const;
  ::TSP::LargeObjectArraySegment* _internal_mutable_large_object_array_segment();
  public:
  void unsafe_arena_set_allocated_large_object_array_segment(
      ::TSP::LargeObjectArraySegment* large_object_array_segment);
  ::TSP::LargeObjectArraySegment* unsafe_arena_release_large_object_array_segment();

  // @@protoc_insertion_point(class_scope:TSK.LocalCommandHistoryArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeObjectArraySegment* large_object_array_segment_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class LocalCommandHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.LocalCommandHistory) */ {
 public:
  inline LocalCommandHistory() : LocalCommandHistory(nullptr) {}
  ~LocalCommandHistory() override;
  explicit constexpr LocalCommandHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCommandHistory(const LocalCommandHistory& from);
  LocalCommandHistory(LocalCommandHistory&& from) noexcept
    : LocalCommandHistory() {
    *this = ::std::move(from);
  }

  inline LocalCommandHistory& operator=(const LocalCommandHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCommandHistory& operator=(LocalCommandHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalCommandHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCommandHistory* internal_default_instance() {
    return reinterpret_cast<const LocalCommandHistory*>(
               &_LocalCommandHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LocalCommandHistory& a, LocalCommandHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCommandHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCommandHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalCommandHistory* New() const final {
    return CreateMaybeMessage<LocalCommandHistory>(nullptr);
  }

  LocalCommandHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalCommandHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalCommandHistory& from);
  void MergeFrom(const LocalCommandHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalCommandHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.LocalCommandHistory";
  }
  protected:
  explicit LocalCommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsArrayFieldNumber = 2,
    kUndoCountFieldNumber = 1,
    kFixedRadar13365177FieldNumber = 10,
  };
  // optional .TSP.Reference items_array = 2;
  bool has_items_array() const;
  private:
  bool _internal_has_items_array() const;
  public:
  void clear_items_array();
  const ::TSP::Reference& items_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_items_array();
  ::TSP::Reference* mutable_items_array();
  void set_allocated_items_array(::TSP::Reference* items_array);
  private:
  const ::TSP::Reference& _internal_items_array() const;
  ::TSP::Reference* _internal_mutable_items_array();
  public:
  void unsafe_arena_set_allocated_items_array(
      ::TSP::Reference* items_array);
  ::TSP::Reference* unsafe_arena_release_items_array();

  // required uint32 undo_count = 1;
  bool has_undo_count() const;
  private:
  bool _internal_has_undo_count() const;
  public:
  void clear_undo_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_count() const;
  void set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_count() const;
  void _internal_set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fixed_radar_13365177 = 10;
  bool has_fixed_radar_13365177() const;
  private:
  bool _internal_has_fixed_radar_13365177() const;
  public:
  void clear_fixed_radar_13365177();
  bool fixed_radar_13365177() const;
  void set_fixed_radar_13365177(bool value);
  private:
  bool _internal_fixed_radar_13365177() const;
  void _internal_set_fixed_radar_13365177(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.LocalCommandHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* items_array_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_count_;
  bool fixed_radar_13365177_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistoryArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistoryArray) */ {
 public:
  inline CollaborationCommandHistoryArray() : CollaborationCommandHistoryArray(nullptr) {}
  ~CollaborationCommandHistoryArray() override;
  explicit constexpr CollaborationCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistoryArray(const CollaborationCommandHistoryArray& from);
  CollaborationCommandHistoryArray(CollaborationCommandHistoryArray&& from) noexcept
    : CollaborationCommandHistoryArray() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistoryArray& operator=(const CollaborationCommandHistoryArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistoryArray& operator=(CollaborationCommandHistoryArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistoryArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistoryArray* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistoryArray*>(
               &_CollaborationCommandHistoryArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CollaborationCommandHistoryArray& a, CollaborationCommandHistoryArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistoryArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistoryArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistoryArray* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistoryArray>(nullptr);
  }

  CollaborationCommandHistoryArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistoryArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistoryArray& from);
  void MergeFrom(const CollaborationCommandHistoryArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistoryArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistoryArray";
  }
  protected:
  explicit CollaborationCommandHistoryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // required .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistoryArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistoryArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistoryArraySegment) */ {
 public:
  inline CollaborationCommandHistoryArraySegment() : CollaborationCommandHistoryArraySegment(nullptr) {}
  ~CollaborationCommandHistoryArraySegment() override;
  explicit constexpr CollaborationCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistoryArraySegment(const CollaborationCommandHistoryArraySegment& from);
  CollaborationCommandHistoryArraySegment(CollaborationCommandHistoryArraySegment&& from) noexcept
    : CollaborationCommandHistoryArraySegment() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistoryArraySegment& operator=(const CollaborationCommandHistoryArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistoryArraySegment& operator=(CollaborationCommandHistoryArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistoryArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistoryArraySegment* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistoryArraySegment*>(
               &_CollaborationCommandHistoryArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CollaborationCommandHistoryArraySegment& a, CollaborationCommandHistoryArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistoryArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistoryArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistoryArraySegment* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistoryArraySegment>(nullptr);
  }

  CollaborationCommandHistoryArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistoryArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistoryArraySegment& from);
  void MergeFrom(const CollaborationCommandHistoryArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistoryArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistoryArraySegment";
  }
  protected:
  explicit CollaborationCommandHistoryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeObjectArraySegmentFieldNumber = 1,
  };
  // required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  bool has_large_object_array_segment() const;
  private:
  bool _internal_has_large_object_array_segment() const;
  public:
  void clear_large_object_array_segment();
  const ::TSP::LargeObjectArraySegment& large_object_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeObjectArraySegment* release_large_object_array_segment();
  ::TSP::LargeObjectArraySegment* mutable_large_object_array_segment();
  void set_allocated_large_object_array_segment(::TSP::LargeObjectArraySegment* large_object_array_segment);
  private:
  const ::TSP::LargeObjectArraySegment& _internal_large_object_array_segment() const;
  ::TSP::LargeObjectArraySegment* _internal_mutable_large_object_array_segment();
  public:
  void unsafe_arena_set_allocated_large_object_array_segment(
      ::TSP::LargeObjectArraySegment* large_object_array_segment);
  ::TSP::LargeObjectArraySegment* unsafe_arena_release_large_object_array_segment();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistoryArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeObjectArraySegment* large_object_array_segment_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistory_ItemList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistory.ItemList) */ {
 public:
  inline CollaborationCommandHistory_ItemList() : CollaborationCommandHistory_ItemList(nullptr) {}
  ~CollaborationCommandHistory_ItemList() override;
  explicit constexpr CollaborationCommandHistory_ItemList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistory_ItemList(const CollaborationCommandHistory_ItemList& from);
  CollaborationCommandHistory_ItemList(CollaborationCommandHistory_ItemList&& from) noexcept
    : CollaborationCommandHistory_ItemList() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistory_ItemList& operator=(const CollaborationCommandHistory_ItemList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistory_ItemList& operator=(CollaborationCommandHistory_ItemList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistory_ItemList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistory_ItemList* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistory_ItemList*>(
               &_CollaborationCommandHistory_ItemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CollaborationCommandHistory_ItemList& a, CollaborationCommandHistory_ItemList& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistory_ItemList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistory_ItemList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistory_ItemList* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistory_ItemList>(nullptr);
  }

  CollaborationCommandHistory_ItemList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistory_ItemList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistory_ItemList& from);
  void MergeFrom(const CollaborationCommandHistory_ItemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistory_ItemList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistory.ItemList";
  }
  protected:
  explicit CollaborationCommandHistory_ItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerEntriesFieldNumber = 2,
    kItemsArrayFieldNumber = 1,
  };
  // repeated .TSP.Reference transformer_entries = 2;
  int transformer_entries_size() const;
  private:
  int _internal_transformer_entries_size() const;
  public:
  void clear_transformer_entries();
  ::TSP::Reference* mutable_transformer_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_transformer_entries();
  private:
  const ::TSP::Reference& _internal_transformer_entries(int index) const;
  ::TSP::Reference* _internal_add_transformer_entries();
  public:
  const ::TSP::Reference& transformer_entries(int index) const;
  ::TSP::Reference* add_transformer_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      transformer_entries() const;

  // optional .TSP.Reference items_array = 1;
  bool has_items_array() const;
  private:
  bool _internal_has_items_array() const;
  public:
  void clear_items_array();
  const ::TSP::Reference& items_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_items_array();
  ::TSP::Reference* mutable_items_array();
  void set_allocated_items_array(::TSP::Reference* items_array);
  private:
  const ::TSP::Reference& _internal_items_array() const;
  ::TSP::Reference* _internal_mutable_items_array();
  public:
  void unsafe_arena_set_allocated_items_array(
      ::TSP::Reference* items_array);
  ::TSP::Reference* unsafe_arena_release_items_array();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistory.ItemList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > transformer_entries_;
  ::TSP::Reference* items_array_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistory) */ {
 public:
  inline CollaborationCommandHistory() : CollaborationCommandHistory(nullptr) {}
  ~CollaborationCommandHistory() override;
  explicit constexpr CollaborationCommandHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistory(const CollaborationCommandHistory& from);
  CollaborationCommandHistory(CollaborationCommandHistory&& from) noexcept
    : CollaborationCommandHistory() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistory& operator=(const CollaborationCommandHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistory& operator=(CollaborationCommandHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistory* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistory*>(
               &_CollaborationCommandHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CollaborationCommandHistory& a, CollaborationCommandHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistory* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistory>(nullptr);
  }

  CollaborationCommandHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistory& from);
  void MergeFrom(const CollaborationCommandHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistory";
  }
  protected:
  explicit CollaborationCommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CollaborationCommandHistory_ItemList ItemList;

  // accessors -------------------------------------------------------

  enum : int {
    kLocalIdentifierFieldNumber = 1,
    kUndoItemsFieldNumber = 2,
    kRedoItemsFieldNumber = 3,
  };
  // optional .TSP.UUID local_identifier = 1;
  bool has_local_identifier() const;
  private:
  bool _internal_has_local_identifier() const;
  public:
  void clear_local_identifier();
  const ::TSP::UUID& local_identifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_local_identifier();
  ::TSP::UUID* mutable_local_identifier();
  void set_allocated_local_identifier(::TSP::UUID* local_identifier);
  private:
  const ::TSP::UUID& _internal_local_identifier() const;
  ::TSP::UUID* _internal_mutable_local_identifier();
  public:
  void unsafe_arena_set_allocated_local_identifier(
      ::TSP::UUID* local_identifier);
  ::TSP::UUID* unsafe_arena_release_local_identifier();

  // optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
  bool has_undo_items() const;
  private:
  bool _internal_has_undo_items() const;
  public:
  void clear_undo_items();
  const ::TSK::CollaborationCommandHistory_ItemList& undo_items() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CollaborationCommandHistory_ItemList* release_undo_items();
  ::TSK::CollaborationCommandHistory_ItemList* mutable_undo_items();
  void set_allocated_undo_items(::TSK::CollaborationCommandHistory_ItemList* undo_items);
  private:
  const ::TSK::CollaborationCommandHistory_ItemList& _internal_undo_items() const;
  ::TSK::CollaborationCommandHistory_ItemList* _internal_mutable_undo_items();
  public:
  void unsafe_arena_set_allocated_undo_items(
      ::TSK::CollaborationCommandHistory_ItemList* undo_items);
  ::TSK::CollaborationCommandHistory_ItemList* unsafe_arena_release_undo_items();

  // optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
  bool has_redo_items() const;
  private:
  bool _internal_has_redo_items() const;
  public:
  void clear_redo_items();
  const ::TSK::CollaborationCommandHistory_ItemList& redo_items() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CollaborationCommandHistory_ItemList* release_redo_items();
  ::TSK::CollaborationCommandHistory_ItemList* mutable_redo_items();
  void set_allocated_redo_items(::TSK::CollaborationCommandHistory_ItemList* redo_items);
  private:
  const ::TSK::CollaborationCommandHistory_ItemList& _internal_redo_items() const;
  ::TSK::CollaborationCommandHistory_ItemList* _internal_mutable_redo_items();
  public:
  void unsafe_arena_set_allocated_redo_items(
      ::TSK::CollaborationCommandHistory_ItemList* redo_items);
  ::TSK::CollaborationCommandHistory_ItemList* unsafe_arena_release_redo_items();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* local_identifier_;
  ::TSK::CollaborationCommandHistory_ItemList* undo_items_;
  ::TSK::CollaborationCommandHistory_ItemList* redo_items_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistoryItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistoryItem) */ {
 public:
  inline CollaborationCommandHistoryItem() : CollaborationCommandHistoryItem(nullptr) {}
  ~CollaborationCommandHistoryItem() override;
  explicit constexpr CollaborationCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistoryItem(const CollaborationCommandHistoryItem& from);
  CollaborationCommandHistoryItem(CollaborationCommandHistoryItem&& from) noexcept
    : CollaborationCommandHistoryItem() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistoryItem& operator=(const CollaborationCommandHistoryItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistoryItem& operator=(CollaborationCommandHistoryItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistoryItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistoryItem* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistoryItem*>(
               &_CollaborationCommandHistoryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CollaborationCommandHistoryItem& a, CollaborationCommandHistoryItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistoryItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistoryItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistoryItem* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistoryItem>(nullptr);
  }

  CollaborationCommandHistoryItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistoryItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistoryItem& from);
  void MergeFrom(const CollaborationCommandHistoryItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistoryItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistoryItem";
  }
  protected:
  explicit CollaborationCommandHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionStringFieldNumber = 2,
    kCommandFieldNumber = 1,
    kSelectionBehaviorFieldNumber = 3,
    kCoalescingGroupFieldNumber = 4,
    kRevisionSequenceFieldNumber = 5,
  };
  // optional string action_string = 2;
  bool has_action_string() const;
  private:
  bool _internal_has_action_string() const;
  public:
  void clear_action_string();
  const std::string& action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_string();
  std::string* release_action_string();
  void set_allocated_action_string(std::string* action_string);
  private:
  const std::string& _internal_action_string() const;
  void _internal_set_action_string(const std::string& value);
  std::string* _internal_mutable_action_string();
  public:

  // optional .TSP.Reference command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::TSP::Reference& command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_command();
  ::TSP::Reference* mutable_command();
  void set_allocated_command(::TSP::Reference* command);
  private:
  const ::TSP::Reference& _internal_command() const;
  ::TSP::Reference* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::TSP::Reference* command);
  ::TSP::Reference* unsafe_arena_release_command();

  // optional .TSP.Reference selection_behavior = 3;
  bool has_selection_behavior() const;
  private:
  bool _internal_has_selection_behavior() const;
  public:
  void clear_selection_behavior();
  const ::TSP::Reference& selection_behavior() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_selection_behavior();
  ::TSP::Reference* mutable_selection_behavior();
  void set_allocated_selection_behavior(::TSP::Reference* selection_behavior);
  private:
  const ::TSP::Reference& _internal_selection_behavior() const;
  ::TSP::Reference* _internal_mutable_selection_behavior();
  public:
  void unsafe_arena_set_allocated_selection_behavior(
      ::TSP::Reference* selection_behavior);
  ::TSP::Reference* unsafe_arena_release_selection_behavior();

  // optional .TSP.Reference coalescing_group = 4;
  bool has_coalescing_group() const;
  private:
  bool _internal_has_coalescing_group() const;
  public:
  void clear_coalescing_group();
  const ::TSP::Reference& coalescing_group() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_coalescing_group();
  ::TSP::Reference* mutable_coalescing_group();
  void set_allocated_coalescing_group(::TSP::Reference* coalescing_group);
  private:
  const ::TSP::Reference& _internal_coalescing_group() const;
  ::TSP::Reference* _internal_mutable_coalescing_group();
  public:
  void unsafe_arena_set_allocated_coalescing_group(
      ::TSP::Reference* coalescing_group);
  ::TSP::Reference* unsafe_arena_release_coalescing_group();

  // optional uint64 revision_sequence = 5;
  bool has_revision_sequence() const;
  private:
  bool _internal_has_revision_sequence() const;
  public:
  void clear_revision_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_sequence() const;
  void set_revision_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_revision_sequence() const;
  void _internal_set_revision_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistoryItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_string_;
  ::TSP::Reference* command_;
  ::TSP::Reference* selection_behavior_;
  ::TSP::Reference* coalescing_group_;
  ::PROTOBUF_NAMESPACE_ID::uint64 revision_sequence_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistoryCoalescingGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistoryCoalescingGroup) */ {
 public:
  inline CollaborationCommandHistoryCoalescingGroup() : CollaborationCommandHistoryCoalescingGroup(nullptr) {}
  ~CollaborationCommandHistoryCoalescingGroup() override;
  explicit constexpr CollaborationCommandHistoryCoalescingGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistoryCoalescingGroup(const CollaborationCommandHistoryCoalescingGroup& from);
  CollaborationCommandHistoryCoalescingGroup(CollaborationCommandHistoryCoalescingGroup&& from) noexcept
    : CollaborationCommandHistoryCoalescingGroup() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistoryCoalescingGroup& operator=(const CollaborationCommandHistoryCoalescingGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistoryCoalescingGroup& operator=(CollaborationCommandHistoryCoalescingGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistoryCoalescingGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistoryCoalescingGroup* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistoryCoalescingGroup*>(
               &_CollaborationCommandHistoryCoalescingGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CollaborationCommandHistoryCoalescingGroup& a, CollaborationCommandHistoryCoalescingGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistoryCoalescingGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistoryCoalescingGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistoryCoalescingGroup* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistoryCoalescingGroup>(nullptr);
  }

  CollaborationCommandHistoryCoalescingGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistoryCoalescingGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistoryCoalescingGroup& from);
  void MergeFrom(const CollaborationCommandHistoryCoalescingGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistoryCoalescingGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistoryCoalescingGroup";
  }
  protected:
  explicit CollaborationCommandHistoryCoalescingGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kDidCoalesceAllCommandsFieldNumber = 2,
  };
  // repeated .TSP.Reference nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::TSP::Reference* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_nodes();
  private:
  const ::TSP::Reference& _internal_nodes(int index) const;
  ::TSP::Reference* _internal_add_nodes();
  public:
  const ::TSP::Reference& nodes(int index) const;
  ::TSP::Reference* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      nodes() const;

  // optional bool did_coalesce_all_commands = 2 [default = false];
  bool has_did_coalesce_all_commands() const;
  private:
  bool _internal_has_did_coalesce_all_commands() const;
  public:
  void clear_did_coalesce_all_commands();
  bool did_coalesce_all_commands() const;
  void set_did_coalesce_all_commands(bool value);
  private:
  bool _internal_did_coalesce_all_commands() const;
  void _internal_set_did_coalesce_all_commands(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistoryCoalescingGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > nodes_;
  bool did_coalesce_all_commands_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistoryCoalescingGroupNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistoryCoalescingGroupNode) */ {
 public:
  inline CollaborationCommandHistoryCoalescingGroupNode() : CollaborationCommandHistoryCoalescingGroupNode(nullptr) {}
  ~CollaborationCommandHistoryCoalescingGroupNode() override;
  explicit constexpr CollaborationCommandHistoryCoalescingGroupNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistoryCoalescingGroupNode(const CollaborationCommandHistoryCoalescingGroupNode& from);
  CollaborationCommandHistoryCoalescingGroupNode(CollaborationCommandHistoryCoalescingGroupNode&& from) noexcept
    : CollaborationCommandHistoryCoalescingGroupNode() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistoryCoalescingGroupNode& operator=(const CollaborationCommandHistoryCoalescingGroupNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistoryCoalescingGroupNode& operator=(CollaborationCommandHistoryCoalescingGroupNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistoryCoalescingGroupNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistoryCoalescingGroupNode* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistoryCoalescingGroupNode*>(
               &_CollaborationCommandHistoryCoalescingGroupNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CollaborationCommandHistoryCoalescingGroupNode& a, CollaborationCommandHistoryCoalescingGroupNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistoryCoalescingGroupNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistoryCoalescingGroupNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistoryCoalescingGroupNode* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistoryCoalescingGroupNode>(nullptr);
  }

  CollaborationCommandHistoryCoalescingGroupNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistoryCoalescingGroupNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistoryCoalescingGroupNode& from);
  void MergeFrom(const CollaborationCommandHistoryCoalescingGroupNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistoryCoalescingGroupNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistoryCoalescingGroupNode";
  }
  protected:
  explicit CollaborationCommandHistoryCoalescingGroupNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // optional .TSP.Reference command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::TSP::Reference& command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_command();
  ::TSP::Reference* mutable_command();
  void set_allocated_command(::TSP::Reference* command);
  private:
  const ::TSP::Reference& _internal_command() const;
  ::TSP::Reference* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::TSP::Reference* command);
  ::TSP::Reference* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistoryCoalescingGroupNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* command_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) */ {
 public:
  inline CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver() : CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(nullptr) {}
  ~CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver() override;
  explicit constexpr CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from);
  CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver&& from) noexcept
    : CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver() {
    *this = ::std::move(from);
  }

  inline CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& operator=(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& operator=(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* internal_default_instance() {
    return reinterpret_cast<const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver*>(
               &_CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& a, CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* New() const final {
    return CreateMaybeMessage<CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver>(nullptr);
  }

  CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from);
  void MergeFrom(const CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver";
  }
  protected:
  explicit CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoalescingGroupFieldNumber = 1,
    kNodeFieldNumber = 2,
  };
  // optional .TSP.Reference coalescing_group = 1;
  bool has_coalescing_group() const;
  private:
  bool _internal_has_coalescing_group() const;
  public:
  void clear_coalescing_group();
  const ::TSP::Reference& coalescing_group() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_coalescing_group();
  ::TSP::Reference* mutable_coalescing_group();
  void set_allocated_coalescing_group(::TSP::Reference* coalescing_group);
  private:
  const ::TSP::Reference& _internal_coalescing_group() const;
  ::TSP::Reference* _internal_mutable_coalescing_group();
  public:
  void unsafe_arena_set_allocated_coalescing_group(
      ::TSP::Reference* coalescing_group);
  ::TSP::Reference* unsafe_arena_release_coalescing_group();

  // optional .TSP.Reference node = 2;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::TSP::Reference& node() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_node();
  ::TSP::Reference* mutable_node();
  void set_allocated_node(::TSP::Reference* node);
  private:
  const ::TSP::Reference& _internal_node() const;
  ::TSP::Reference* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::TSP::Reference* node);
  ::TSP::Reference* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* coalescing_group_;
  ::TSP::Reference* node_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit constexpr DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentArchive* New() const final {
    return CreateMaybeMessage<DocumentArchive>(nullptr);
  }

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentArchive& from);
  void MergeFrom(const DocumentArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityLogEntriesFieldNumber = 8,
    kLocaleIdentifierFieldNumber = 4,
    kCreationLocaleIdentifierFieldNumber = 9,
    kAnnotationAuthorStorageFieldNumber = 7,
    kCollaborationOperationHistoryFieldNumber = 14,
    kFormattingSymbolsFieldNumber = 17,
    kPreventImageConversionOnOpenFieldNumber = 10,
    kHasFloatingLocaleFieldNumber = 11,
    kHasUserDefinedLocaleFieldNumber = 12,
    kShouldMeasureNegativelyTrackedTextCorrectlyFieldNumber = 15,
    kUseOptimizedTextVerticalAlignmentFieldNumber = 16,
  };
  // repeated .TSP.Reference activity_log_entries = 8;
  int activity_log_entries_size() const;
  private:
  int _internal_activity_log_entries_size() const;
  public:
  void clear_activity_log_entries();
  ::TSP::Reference* mutable_activity_log_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_activity_log_entries();
  private:
  const ::TSP::Reference& _internal_activity_log_entries(int index) const;
  ::TSP::Reference* _internal_add_activity_log_entries();
  public:
  const ::TSP::Reference& activity_log_entries(int index) const;
  ::TSP::Reference* add_activity_log_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      activity_log_entries() const;

  // optional string locale_identifier = 4;
  bool has_locale_identifier() const;
  private:
  bool _internal_has_locale_identifier() const;
  public:
  void clear_locale_identifier();
  const std::string& locale_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale_identifier();
  std::string* release_locale_identifier();
  void set_allocated_locale_identifier(std::string* locale_identifier);
  private:
  const std::string& _internal_locale_identifier() const;
  void _internal_set_locale_identifier(const std::string& value);
  std::string* _internal_mutable_locale_identifier();
  public:

  // optional string creation_locale_identifier = 9;
  bool has_creation_locale_identifier() const;
  private:
  bool _internal_has_creation_locale_identifier() const;
  public:
  void clear_creation_locale_identifier();
  const std::string& creation_locale_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_locale_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_locale_identifier();
  std::string* release_creation_locale_identifier();
  void set_allocated_creation_locale_identifier(std::string* creation_locale_identifier);
  private:
  const std::string& _internal_creation_locale_identifier() const;
  void _internal_set_creation_locale_identifier(const std::string& value);
  std::string* _internal_mutable_creation_locale_identifier();
  public:

  // optional .TSP.Reference annotation_author_storage = 7;
  bool has_annotation_author_storage() const;
  private:
  bool _internal_has_annotation_author_storage() const;
  public:
  void clear_annotation_author_storage();
  const ::TSP::Reference& annotation_author_storage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_annotation_author_storage();
  ::TSP::Reference* mutable_annotation_author_storage();
  void set_allocated_annotation_author_storage(::TSP::Reference* annotation_author_storage);
  private:
  const ::TSP::Reference& _internal_annotation_author_storage() const;
  ::TSP::Reference* _internal_mutable_annotation_author_storage();
  public:
  void unsafe_arena_set_allocated_annotation_author_storage(
      ::TSP::Reference* annotation_author_storage);
  ::TSP::Reference* unsafe_arena_release_annotation_author_storage();

  // optional .TSP.Reference collaboration_operation_history = 14;
  bool has_collaboration_operation_history() const;
  private:
  bool _internal_has_collaboration_operation_history() const;
  public:
  void clear_collaboration_operation_history();
  const ::TSP::Reference& collaboration_operation_history() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_collaboration_operation_history();
  ::TSP::Reference* mutable_collaboration_operation_history();
  void set_allocated_collaboration_operation_history(::TSP::Reference* collaboration_operation_history);
  private:
  const ::TSP::Reference& _internal_collaboration_operation_history() const;
  ::TSP::Reference* _internal_mutable_collaboration_operation_history();
  public:
  void unsafe_arena_set_allocated_collaboration_operation_history(
      ::TSP::Reference* collaboration_operation_history);
  ::TSP::Reference* unsafe_arena_release_collaboration_operation_history();

  // optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
  bool has_formatting_symbols() const;
  private:
  bool _internal_has_formatting_symbols() const;
  public:
  void clear_formatting_symbols();
  const ::TSK::FormattingSymbolsArchive& formatting_symbols() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormattingSymbolsArchive* release_formatting_symbols();
  ::TSK::FormattingSymbolsArchive* mutable_formatting_symbols();
  void set_allocated_formatting_symbols(::TSK::FormattingSymbolsArchive* formatting_symbols);
  private:
  const ::TSK::FormattingSymbolsArchive& _internal_formatting_symbols() const;
  ::TSK::FormattingSymbolsArchive* _internal_mutable_formatting_symbols();
  public:
  void unsafe_arena_set_allocated_formatting_symbols(
      ::TSK::FormattingSymbolsArchive* formatting_symbols);
  ::TSK::FormattingSymbolsArchive* unsafe_arena_release_formatting_symbols();

  // optional bool prevent_image_conversion_on_open = 10;
  bool has_prevent_image_conversion_on_open() const;
  private:
  bool _internal_has_prevent_image_conversion_on_open() const;
  public:
  void clear_prevent_image_conversion_on_open();
  bool prevent_image_conversion_on_open() const;
  void set_prevent_image_conversion_on_open(bool value);
  private:
  bool _internal_prevent_image_conversion_on_open() const;
  void _internal_set_prevent_image_conversion_on_open(bool value);
  public:

  // optional bool has_floating_locale = 11;
  bool has_has_floating_locale() const;
  private:
  bool _internal_has_has_floating_locale() const;
  public:
  void clear_has_floating_locale();
  bool has_floating_locale() const;
  void set_has_floating_locale(bool value);
  private:
  bool _internal_has_floating_locale() const;
  void _internal_set_has_floating_locale(bool value);
  public:

  // optional bool has_user_defined_locale = 12;
  bool has_has_user_defined_locale() const;
  private:
  bool _internal_has_has_user_defined_locale() const;
  public:
  void clear_has_user_defined_locale();
  bool has_user_defined_locale() const;
  void set_has_user_defined_locale(bool value);
  private:
  bool _internal_has_user_defined_locale() const;
  void _internal_set_has_user_defined_locale(bool value);
  public:

  // optional bool should_measure_negatively_tracked_text_correctly = 15;
  bool has_should_measure_negatively_tracked_text_correctly() const;
  private:
  bool _internal_has_should_measure_negatively_tracked_text_correctly() const;
  public:
  void clear_should_measure_negatively_tracked_text_correctly();
  bool should_measure_negatively_tracked_text_correctly() const;
  void set_should_measure_negatively_tracked_text_correctly(bool value);
  private:
  bool _internal_should_measure_negatively_tracked_text_correctly() const;
  void _internal_set_should_measure_negatively_tracked_text_correctly(bool value);
  public:

  // optional bool use_optimized_text_vertical_alignment = 16;
  bool has_use_optimized_text_vertical_alignment() const;
  private:
  bool _internal_has_use_optimized_text_vertical_alignment() const;
  public:
  void clear_use_optimized_text_vertical_alignment();
  bool use_optimized_text_vertical_alignment() const;
  void set_use_optimized_text_vertical_alignment(bool value);
  private:
  bool _internal_use_optimized_text_vertical_alignment() const;
  void _internal_set_use_optimized_text_vertical_alignment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.DocumentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > activity_log_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_locale_identifier_;
  ::TSP::Reference* annotation_author_storage_;
  ::TSP::Reference* collaboration_operation_history_;
  ::TSK::FormattingSymbolsArchive* formatting_symbols_;
  bool prevent_image_conversion_on_open_;
  bool has_floating_locale_;
  bool has_user_defined_locale_;
  bool should_measure_negatively_tracked_text_correctly_;
  bool use_optimized_text_vertical_alignment_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class FormattingSymbolsArchive_CurrencySymbol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.FormattingSymbolsArchive.CurrencySymbol) */ {
 public:
  inline FormattingSymbolsArchive_CurrencySymbol() : FormattingSymbolsArchive_CurrencySymbol(nullptr) {}
  ~FormattingSymbolsArchive_CurrencySymbol() override;
  explicit constexpr FormattingSymbolsArchive_CurrencySymbol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormattingSymbolsArchive_CurrencySymbol(const FormattingSymbolsArchive_CurrencySymbol& from);
  FormattingSymbolsArchive_CurrencySymbol(FormattingSymbolsArchive_CurrencySymbol&& from) noexcept
    : FormattingSymbolsArchive_CurrencySymbol() {
    *this = ::std::move(from);
  }

  inline FormattingSymbolsArchive_CurrencySymbol& operator=(const FormattingSymbolsArchive_CurrencySymbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormattingSymbolsArchive_CurrencySymbol& operator=(FormattingSymbolsArchive_CurrencySymbol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormattingSymbolsArchive_CurrencySymbol& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormattingSymbolsArchive_CurrencySymbol* internal_default_instance() {
    return reinterpret_cast<const FormattingSymbolsArchive_CurrencySymbol*>(
               &_FormattingSymbolsArchive_CurrencySymbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FormattingSymbolsArchive_CurrencySymbol& a, FormattingSymbolsArchive_CurrencySymbol& b) {
    a.Swap(&b);
  }
  inline void Swap(FormattingSymbolsArchive_CurrencySymbol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormattingSymbolsArchive_CurrencySymbol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormattingSymbolsArchive_CurrencySymbol* New() const final {
    return CreateMaybeMessage<FormattingSymbolsArchive_CurrencySymbol>(nullptr);
  }

  FormattingSymbolsArchive_CurrencySymbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormattingSymbolsArchive_CurrencySymbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormattingSymbolsArchive_CurrencySymbol& from);
  void MergeFrom(const FormattingSymbolsArchive_CurrencySymbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormattingSymbolsArchive_CurrencySymbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.FormattingSymbolsArchive.CurrencySymbol";
  }
  protected:
  explicit FormattingSymbolsArchive_CurrencySymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kSymbolFieldNumber = 2,
  };
  // required string code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // required string symbol = 2;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // @@protoc_insertion_point(class_scope:TSK.FormattingSymbolsArchive.CurrencySymbol)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class FormattingSymbolsArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.FormattingSymbolsArchive) */ {
 public:
  inline FormattingSymbolsArchive() : FormattingSymbolsArchive(nullptr) {}
  ~FormattingSymbolsArchive() override;
  explicit constexpr FormattingSymbolsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormattingSymbolsArchive(const FormattingSymbolsArchive& from);
  FormattingSymbolsArchive(FormattingSymbolsArchive&& from) noexcept
    : FormattingSymbolsArchive() {
    *this = ::std::move(from);
  }

  inline FormattingSymbolsArchive& operator=(const FormattingSymbolsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormattingSymbolsArchive& operator=(FormattingSymbolsArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormattingSymbolsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormattingSymbolsArchive* internal_default_instance() {
    return reinterpret_cast<const FormattingSymbolsArchive*>(
               &_FormattingSymbolsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FormattingSymbolsArchive& a, FormattingSymbolsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormattingSymbolsArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormattingSymbolsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormattingSymbolsArchive* New() const final {
    return CreateMaybeMessage<FormattingSymbolsArchive>(nullptr);
  }

  FormattingSymbolsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormattingSymbolsArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormattingSymbolsArchive& from);
  void MergeFrom(const FormattingSymbolsArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormattingSymbolsArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.FormattingSymbolsArchive";
  }
  protected:
  explicit FormattingSymbolsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FormattingSymbolsArchive_CurrencySymbol CurrencySymbol;

  // accessors -------------------------------------------------------

  enum : int {
    kMonthsFieldNumber = 4,
    kStandaloneMonthsFieldNumber = 5,
    kShortMonthsFieldNumber = 6,
    kStandaloneShortMonthsFieldNumber = 7,
    kWeekdaysFieldNumber = 8,
    kStandaloneWeekdaysFieldNumber = 9,
    kShortWeekdaysFieldNumber = 10,
    kStandaloneShortWeekdaysFieldNumber = 11,
    kTinyMonthsFieldNumber = 14,
    kStandaloneTinyMonthsFieldNumber = 15,
    kTinyWeekdaysFieldNumber = 16,
    kStandaloneTinyWeekdaysFieldNumber = 17,
    kQuartersFieldNumber = 18,
    kStandaloneQuartersFieldNumber = 19,
    kShortQuartersFieldNumber = 20,
    kStandaloneShortQuartersFieldNumber = 21,
    kErasFieldNumber = 22,
    kLongErasFieldNumber = 23,
    kCurrencySymbolsFieldNumber = 48,
    kVersionFieldNumber = 1,
    kCalendarFieldNumber = 2,
    kNumberingSystemFieldNumber = 3,
    kAmSymbolFieldNumber = 12,
    kPmSymbolFieldNumber = 13,
    kShortDatePatternFieldNumber = 24,
    kMediumDatePatternFieldNumber = 25,
    kLongDatePatternFieldNumber = 26,
    kFullDatePatternFieldNumber = 27,
    kShortTimePatternFieldNumber = 28,
    kMediumTimePatternFieldNumber = 29,
    kLongTimePatternFieldNumber = 30,
    kFullTimePatternFieldNumber = 31,
    kDecimalSeparatorFieldNumber = 32,
    kGroupingSeparatorFieldNumber = 33,
    kCurrencyDecimalSeparatorFieldNumber = 34,
    kCurrencyGroupingSeparatorFieldNumber = 35,
    kPlusSignFieldNumber = 36,
    kMinusSignFieldNumber = 37,
    kExponentialSymbolFieldNumber = 38,
    kPercentSymbolFieldNumber = 39,
    kPerMilleSymbolFieldNumber = 40,
    kInfinitySymbolFieldNumber = 41,
    kNanSymbolFieldNumber = 42,
    kDecimalPatternFieldNumber = 43,
    kScientificPatternFieldNumber = 44,
    kPercentPatternFieldNumber = 45,
    kCurrencyPatternFieldNumber = 46,
    kCurrencyCodeFieldNumber = 47,
  };
  // repeated string months = 4;
  int months_size() const;
  private:
  int _internal_months_size() const;
  public:
  void clear_months();
  const std::string& months(int index) const;
  std::string* mutable_months(int index);
  void set_months(int index, const std::string& value);
  void set_months(int index, std::string&& value);
  void set_months(int index, const char* value);
  void set_months(int index, const char* value, size_t size);
  std::string* add_months();
  void add_months(const std::string& value);
  void add_months(std::string&& value);
  void add_months(const char* value);
  void add_months(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& months() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_months();
  private:
  const std::string& _internal_months(int index) const;
  std::string* _internal_add_months();
  public:

  // repeated string standalone_months = 5;
  int standalone_months_size() const;
  private:
  int _internal_standalone_months_size() const;
  public:
  void clear_standalone_months();
  const std::string& standalone_months(int index) const;
  std::string* mutable_standalone_months(int index);
  void set_standalone_months(int index, const std::string& value);
  void set_standalone_months(int index, std::string&& value);
  void set_standalone_months(int index, const char* value);
  void set_standalone_months(int index, const char* value, size_t size);
  std::string* add_standalone_months();
  void add_standalone_months(const std::string& value);
  void add_standalone_months(std::string&& value);
  void add_standalone_months(const char* value);
  void add_standalone_months(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_months() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_months();
  private:
  const std::string& _internal_standalone_months(int index) const;
  std::string* _internal_add_standalone_months();
  public:

  // repeated string short_months = 6;
  int short_months_size() const;
  private:
  int _internal_short_months_size() const;
  public:
  void clear_short_months();
  const std::string& short_months(int index) const;
  std::string* mutable_short_months(int index);
  void set_short_months(int index, const std::string& value);
  void set_short_months(int index, std::string&& value);
  void set_short_months(int index, const char* value);
  void set_short_months(int index, const char* value, size_t size);
  std::string* add_short_months();
  void add_short_months(const std::string& value);
  void add_short_months(std::string&& value);
  void add_short_months(const char* value);
  void add_short_months(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& short_months() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_short_months();
  private:
  const std::string& _internal_short_months(int index) const;
  std::string* _internal_add_short_months();
  public:

  // repeated string standalone_short_months = 7;
  int standalone_short_months_size() const;
  private:
  int _internal_standalone_short_months_size() const;
  public:
  void clear_standalone_short_months();
  const std::string& standalone_short_months(int index) const;
  std::string* mutable_standalone_short_months(int index);
  void set_standalone_short_months(int index, const std::string& value);
  void set_standalone_short_months(int index, std::string&& value);
  void set_standalone_short_months(int index, const char* value);
  void set_standalone_short_months(int index, const char* value, size_t size);
  std::string* add_standalone_short_months();
  void add_standalone_short_months(const std::string& value);
  void add_standalone_short_months(std::string&& value);
  void add_standalone_short_months(const char* value);
  void add_standalone_short_months(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_short_months() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_short_months();
  private:
  const std::string& _internal_standalone_short_months(int index) const;
  std::string* _internal_add_standalone_short_months();
  public:

  // repeated string weekdays = 8;
  int weekdays_size() const;
  private:
  int _internal_weekdays_size() const;
  public:
  void clear_weekdays();
  const std::string& weekdays(int index) const;
  std::string* mutable_weekdays(int index);
  void set_weekdays(int index, const std::string& value);
  void set_weekdays(int index, std::string&& value);
  void set_weekdays(int index, const char* value);
  void set_weekdays(int index, const char* value, size_t size);
  std::string* add_weekdays();
  void add_weekdays(const std::string& value);
  void add_weekdays(std::string&& value);
  void add_weekdays(const char* value);
  void add_weekdays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& weekdays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_weekdays();
  private:
  const std::string& _internal_weekdays(int index) const;
  std::string* _internal_add_weekdays();
  public:

  // repeated string standalone_weekdays = 9;
  int standalone_weekdays_size() const;
  private:
  int _internal_standalone_weekdays_size() const;
  public:
  void clear_standalone_weekdays();
  const std::string& standalone_weekdays(int index) const;
  std::string* mutable_standalone_weekdays(int index);
  void set_standalone_weekdays(int index, const std::string& value);
  void set_standalone_weekdays(int index, std::string&& value);
  void set_standalone_weekdays(int index, const char* value);
  void set_standalone_weekdays(int index, const char* value, size_t size);
  std::string* add_standalone_weekdays();
  void add_standalone_weekdays(const std::string& value);
  void add_standalone_weekdays(std::string&& value);
  void add_standalone_weekdays(const char* value);
  void add_standalone_weekdays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_weekdays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_weekdays();
  private:
  const std::string& _internal_standalone_weekdays(int index) const;
  std::string* _internal_add_standalone_weekdays();
  public:

  // repeated string short_weekdays = 10;
  int short_weekdays_size() const;
  private:
  int _internal_short_weekdays_size() const;
  public:
  void clear_short_weekdays();
  const std::string& short_weekdays(int index) const;
  std::string* mutable_short_weekdays(int index);
  void set_short_weekdays(int index, const std::string& value);
  void set_short_weekdays(int index, std::string&& value);
  void set_short_weekdays(int index, const char* value);
  void set_short_weekdays(int index, const char* value, size_t size);
  std::string* add_short_weekdays();
  void add_short_weekdays(const std::string& value);
  void add_short_weekdays(std::string&& value);
  void add_short_weekdays(const char* value);
  void add_short_weekdays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& short_weekdays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_short_weekdays();
  private:
  const std::string& _internal_short_weekdays(int index) const;
  std::string* _internal_add_short_weekdays();
  public:

  // repeated string standalone_short_weekdays = 11;
  int standalone_short_weekdays_size() const;
  private:
  int _internal_standalone_short_weekdays_size() const;
  public:
  void clear_standalone_short_weekdays();
  const std::string& standalone_short_weekdays(int index) const;
  std::string* mutable_standalone_short_weekdays(int index);
  void set_standalone_short_weekdays(int index, const std::string& value);
  void set_standalone_short_weekdays(int index, std::string&& value);
  void set_standalone_short_weekdays(int index, const char* value);
  void set_standalone_short_weekdays(int index, const char* value, size_t size);
  std::string* add_standalone_short_weekdays();
  void add_standalone_short_weekdays(const std::string& value);
  void add_standalone_short_weekdays(std::string&& value);
  void add_standalone_short_weekdays(const char* value);
  void add_standalone_short_weekdays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_short_weekdays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_short_weekdays();
  private:
  const std::string& _internal_standalone_short_weekdays(int index) const;
  std::string* _internal_add_standalone_short_weekdays();
  public:

  // repeated string tiny_months = 14;
  int tiny_months_size() const;
  private:
  int _internal_tiny_months_size() const;
  public:
  void clear_tiny_months();
  const std::string& tiny_months(int index) const;
  std::string* mutable_tiny_months(int index);
  void set_tiny_months(int index, const std::string& value);
  void set_tiny_months(int index, std::string&& value);
  void set_tiny_months(int index, const char* value);
  void set_tiny_months(int index, const char* value, size_t size);
  std::string* add_tiny_months();
  void add_tiny_months(const std::string& value);
  void add_tiny_months(std::string&& value);
  void add_tiny_months(const char* value);
  void add_tiny_months(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tiny_months() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tiny_months();
  private:
  const std::string& _internal_tiny_months(int index) const;
  std::string* _internal_add_tiny_months();
  public:

  // repeated string standalone_tiny_months = 15;
  int standalone_tiny_months_size() const;
  private:
  int _internal_standalone_tiny_months_size() const;
  public:
  void clear_standalone_tiny_months();
  const std::string& standalone_tiny_months(int index) const;
  std::string* mutable_standalone_tiny_months(int index);
  void set_standalone_tiny_months(int index, const std::string& value);
  void set_standalone_tiny_months(int index, std::string&& value);
  void set_standalone_tiny_months(int index, const char* value);
  void set_standalone_tiny_months(int index, const char* value, size_t size);
  std::string* add_standalone_tiny_months();
  void add_standalone_tiny_months(const std::string& value);
  void add_standalone_tiny_months(std::string&& value);
  void add_standalone_tiny_months(const char* value);
  void add_standalone_tiny_months(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_tiny_months() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_tiny_months();
  private:
  const std::string& _internal_standalone_tiny_months(int index) const;
  std::string* _internal_add_standalone_tiny_months();
  public:

  // repeated string tiny_weekdays = 16;
  int tiny_weekdays_size() const;
  private:
  int _internal_tiny_weekdays_size() const;
  public:
  void clear_tiny_weekdays();
  const std::string& tiny_weekdays(int index) const;
  std::string* mutable_tiny_weekdays(int index);
  void set_tiny_weekdays(int index, const std::string& value);
  void set_tiny_weekdays(int index, std::string&& value);
  void set_tiny_weekdays(int index, const char* value);
  void set_tiny_weekdays(int index, const char* value, size_t size);
  std::string* add_tiny_weekdays();
  void add_tiny_weekdays(const std::string& value);
  void add_tiny_weekdays(std::string&& value);
  void add_tiny_weekdays(const char* value);
  void add_tiny_weekdays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tiny_weekdays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tiny_weekdays();
  private:
  const std::string& _internal_tiny_weekdays(int index) const;
  std::string* _internal_add_tiny_weekdays();
  public:

  // repeated string standalone_tiny_weekdays = 17;
  int standalone_tiny_weekdays_size() const;
  private:
  int _internal_standalone_tiny_weekdays_size() const;
  public:
  void clear_standalone_tiny_weekdays();
  const std::string& standalone_tiny_weekdays(int index) const;
  std::string* mutable_standalone_tiny_weekdays(int index);
  void set_standalone_tiny_weekdays(int index, const std::string& value);
  void set_standalone_tiny_weekdays(int index, std::string&& value);
  void set_standalone_tiny_weekdays(int index, const char* value);
  void set_standalone_tiny_weekdays(int index, const char* value, size_t size);
  std::string* add_standalone_tiny_weekdays();
  void add_standalone_tiny_weekdays(const std::string& value);
  void add_standalone_tiny_weekdays(std::string&& value);
  void add_standalone_tiny_weekdays(const char* value);
  void add_standalone_tiny_weekdays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_tiny_weekdays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_tiny_weekdays();
  private:
  const std::string& _internal_standalone_tiny_weekdays(int index) const;
  std::string* _internal_add_standalone_tiny_weekdays();
  public:

  // repeated string quarters = 18;
  int quarters_size() const;
  private:
  int _internal_quarters_size() const;
  public:
  void clear_quarters();
  const std::string& quarters(int index) const;
  std::string* mutable_quarters(int index);
  void set_quarters(int index, const std::string& value);
  void set_quarters(int index, std::string&& value);
  void set_quarters(int index, const char* value);
  void set_quarters(int index, const char* value, size_t size);
  std::string* add_quarters();
  void add_quarters(const std::string& value);
  void add_quarters(std::string&& value);
  void add_quarters(const char* value);
  void add_quarters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& quarters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_quarters();
  private:
  const std::string& _internal_quarters(int index) const;
  std::string* _internal_add_quarters();
  public:

  // repeated string standalone_quarters = 19;
  int standalone_quarters_size() const;
  private:
  int _internal_standalone_quarters_size() const;
  public:
  void clear_standalone_quarters();
  const std::string& standalone_quarters(int index) const;
  std::string* mutable_standalone_quarters(int index);
  void set_standalone_quarters(int index, const std::string& value);
  void set_standalone_quarters(int index, std::string&& value);
  void set_standalone_quarters(int index, const char* value);
  void set_standalone_quarters(int index, const char* value, size_t size);
  std::string* add_standalone_quarters();
  void add_standalone_quarters(const std::string& value);
  void add_standalone_quarters(std::string&& value);
  void add_standalone_quarters(const char* value);
  void add_standalone_quarters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_quarters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_quarters();
  private:
  const std::string& _internal_standalone_quarters(int index) const;
  std::string* _internal_add_standalone_quarters();
  public:

  // repeated string short_quarters = 20;
  int short_quarters_size() const;
  private:
  int _internal_short_quarters_size() const;
  public:
  void clear_short_quarters();
  const std::string& short_quarters(int index) const;
  std::string* mutable_short_quarters(int index);
  void set_short_quarters(int index, const std::string& value);
  void set_short_quarters(int index, std::string&& value);
  void set_short_quarters(int index, const char* value);
  void set_short_quarters(int index, const char* value, size_t size);
  std::string* add_short_quarters();
  void add_short_quarters(const std::string& value);
  void add_short_quarters(std::string&& value);
  void add_short_quarters(const char* value);
  void add_short_quarters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& short_quarters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_short_quarters();
  private:
  const std::string& _internal_short_quarters(int index) const;
  std::string* _internal_add_short_quarters();
  public:

  // repeated string standalone_short_quarters = 21;
  int standalone_short_quarters_size() const;
  private:
  int _internal_standalone_short_quarters_size() const;
  public:
  void clear_standalone_short_quarters();
  const std::string& standalone_short_quarters(int index) const;
  std::string* mutable_standalone_short_quarters(int index);
  void set_standalone_short_quarters(int index, const std::string& value);
  void set_standalone_short_quarters(int index, std::string&& value);
  void set_standalone_short_quarters(int index, const char* value);
  void set_standalone_short_quarters(int index, const char* value, size_t size);
  std::string* add_standalone_short_quarters();
  void add_standalone_short_quarters(const std::string& value);
  void add_standalone_short_quarters(std::string&& value);
  void add_standalone_short_quarters(const char* value);
  void add_standalone_short_quarters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& standalone_short_quarters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_standalone_short_quarters();
  private:
  const std::string& _internal_standalone_short_quarters(int index) const;
  std::string* _internal_add_standalone_short_quarters();
  public:

  // repeated string eras = 22;
  int eras_size() const;
  private:
  int _internal_eras_size() const;
  public:
  void clear_eras();
  const std::string& eras(int index) const;
  std::string* mutable_eras(int index);
  void set_eras(int index, const std::string& value);
  void set_eras(int index, std::string&& value);
  void set_eras(int index, const char* value);
  void set_eras(int index, const char* value, size_t size);
  std::string* add_eras();
  void add_eras(const std::string& value);
  void add_eras(std::string&& value);
  void add_eras(const char* value);
  void add_eras(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& eras() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_eras();
  private:
  const std::string& _internal_eras(int index) const;
  std::string* _internal_add_eras();
  public:

  // repeated string long_eras = 23;
  int long_eras_size() const;
  private:
  int _internal_long_eras_size() const;
  public:
  void clear_long_eras();
  const std::string& long_eras(int index) const;
  std::string* mutable_long_eras(int index);
  void set_long_eras(int index, const std::string& value);
  void set_long_eras(int index, std::string&& value);
  void set_long_eras(int index, const char* value);
  void set_long_eras(int index, const char* value, size_t size);
  std::string* add_long_eras();
  void add_long_eras(const std::string& value);
  void add_long_eras(std::string&& value);
  void add_long_eras(const char* value);
  void add_long_eras(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& long_eras() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_long_eras();
  private:
  const std::string& _internal_long_eras(int index) const;
  std::string* _internal_add_long_eras();
  public:

  // repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
  int currency_symbols_size() const;
  private:
  int _internal_currency_symbols_size() const;
  public:
  void clear_currency_symbols();
  ::TSK::FormattingSymbolsArchive_CurrencySymbol* mutable_currency_symbols(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormattingSymbolsArchive_CurrencySymbol >*
      mutable_currency_symbols();
  private:
  const ::TSK::FormattingSymbolsArchive_CurrencySymbol& _internal_currency_symbols(int index) const;
  ::TSK::FormattingSymbolsArchive_CurrencySymbol* _internal_add_currency_symbols();
  public:
  const ::TSK::FormattingSymbolsArchive_CurrencySymbol& currency_symbols(int index) const;
  ::TSK::FormattingSymbolsArchive_CurrencySymbol* add_currency_symbols();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormattingSymbolsArchive_CurrencySymbol >&
      currency_symbols() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string calendar = 2;
  bool has_calendar() const;
  private:
  bool _internal_has_calendar() const;
  public:
  void clear_calendar();
  const std::string& calendar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_calendar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_calendar();
  std::string* release_calendar();
  void set_allocated_calendar(std::string* calendar);
  private:
  const std::string& _internal_calendar() const;
  void _internal_set_calendar(const std::string& value);
  std::string* _internal_mutable_calendar();
  public:

  // optional string numbering_system = 3;
  bool has_numbering_system() const;
  private:
  bool _internal_has_numbering_system() const;
  public:
  void clear_numbering_system();
  const std::string& numbering_system() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_numbering_system(ArgT0&& arg0, ArgT... args);
  std::string* mutable_numbering_system();
  std::string* release_numbering_system();
  void set_allocated_numbering_system(std::string* numbering_system);
  private:
  const std::string& _internal_numbering_system() const;
  void _internal_set_numbering_system(const std::string& value);
  std::string* _internal_mutable_numbering_system();
  public:

  // optional string am_symbol = 12;
  bool has_am_symbol() const;
  private:
  bool _internal_has_am_symbol() const;
  public:
  void clear_am_symbol();
  const std::string& am_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_am_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_am_symbol();
  std::string* release_am_symbol();
  void set_allocated_am_symbol(std::string* am_symbol);
  private:
  const std::string& _internal_am_symbol() const;
  void _internal_set_am_symbol(const std::string& value);
  std::string* _internal_mutable_am_symbol();
  public:

  // optional string pm_symbol = 13;
  bool has_pm_symbol() const;
  private:
  bool _internal_has_pm_symbol() const;
  public:
  void clear_pm_symbol();
  const std::string& pm_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pm_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pm_symbol();
  std::string* release_pm_symbol();
  void set_allocated_pm_symbol(std::string* pm_symbol);
  private:
  const std::string& _internal_pm_symbol() const;
  void _internal_set_pm_symbol(const std::string& value);
  std::string* _internal_mutable_pm_symbol();
  public:

  // optional string short_date_pattern = 24;
  bool has_short_date_pattern() const;
  private:
  bool _internal_has_short_date_pattern() const;
  public:
  void clear_short_date_pattern();
  const std::string& short_date_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_date_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_date_pattern();
  std::string* release_short_date_pattern();
  void set_allocated_short_date_pattern(std::string* short_date_pattern);
  private:
  const std::string& _internal_short_date_pattern() const;
  void _internal_set_short_date_pattern(const std::string& value);
  std::string* _internal_mutable_short_date_pattern();
  public:

  // optional string medium_date_pattern = 25;
  bool has_medium_date_pattern() const;
  private:
  bool _internal_has_medium_date_pattern() const;
  public:
  void clear_medium_date_pattern();
  const std::string& medium_date_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_medium_date_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_medium_date_pattern();
  std::string* release_medium_date_pattern();
  void set_allocated_medium_date_pattern(std::string* medium_date_pattern);
  private:
  const std::string& _internal_medium_date_pattern() const;
  void _internal_set_medium_date_pattern(const std::string& value);
  std::string* _internal_mutable_medium_date_pattern();
  public:

  // optional string long_date_pattern = 26;
  bool has_long_date_pattern() const;
  private:
  bool _internal_has_long_date_pattern() const;
  public:
  void clear_long_date_pattern();
  const std::string& long_date_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_long_date_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_long_date_pattern();
  std::string* release_long_date_pattern();
  void set_allocated_long_date_pattern(std::string* long_date_pattern);
  private:
  const std::string& _internal_long_date_pattern() const;
  void _internal_set_long_date_pattern(const std::string& value);
  std::string* _internal_mutable_long_date_pattern();
  public:

  // optional string full_date_pattern = 27;
  bool has_full_date_pattern() const;
  private:
  bool _internal_has_full_date_pattern() const;
  public:
  void clear_full_date_pattern();
  const std::string& full_date_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_date_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_date_pattern();
  std::string* release_full_date_pattern();
  void set_allocated_full_date_pattern(std::string* full_date_pattern);
  private:
  const std::string& _internal_full_date_pattern() const;
  void _internal_set_full_date_pattern(const std::string& value);
  std::string* _internal_mutable_full_date_pattern();
  public:

  // optional string short_time_pattern = 28;
  bool has_short_time_pattern() const;
  private:
  bool _internal_has_short_time_pattern() const;
  public:
  void clear_short_time_pattern();
  const std::string& short_time_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_time_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_time_pattern();
  std::string* release_short_time_pattern();
  void set_allocated_short_time_pattern(std::string* short_time_pattern);
  private:
  const std::string& _internal_short_time_pattern() const;
  void _internal_set_short_time_pattern(const std::string& value);
  std::string* _internal_mutable_short_time_pattern();
  public:

  // optional string medium_time_pattern = 29;
  bool has_medium_time_pattern() const;
  private:
  bool _internal_has_medium_time_pattern() const;
  public:
  void clear_medium_time_pattern();
  const std::string& medium_time_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_medium_time_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_medium_time_pattern();
  std::string* release_medium_time_pattern();
  void set_allocated_medium_time_pattern(std::string* medium_time_pattern);
  private:
  const std::string& _internal_medium_time_pattern() const;
  void _internal_set_medium_time_pattern(const std::string& value);
  std::string* _internal_mutable_medium_time_pattern();
  public:

  // optional string long_time_pattern = 30;
  bool has_long_time_pattern() const;
  private:
  bool _internal_has_long_time_pattern() const;
  public:
  void clear_long_time_pattern();
  const std::string& long_time_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_long_time_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_long_time_pattern();
  std::string* release_long_time_pattern();
  void set_allocated_long_time_pattern(std::string* long_time_pattern);
  private:
  const std::string& _internal_long_time_pattern() const;
  void _internal_set_long_time_pattern(const std::string& value);
  std::string* _internal_mutable_long_time_pattern();
  public:

  // optional string full_time_pattern = 31;
  bool has_full_time_pattern() const;
  private:
  bool _internal_has_full_time_pattern() const;
  public:
  void clear_full_time_pattern();
  const std::string& full_time_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_time_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_time_pattern();
  std::string* release_full_time_pattern();
  void set_allocated_full_time_pattern(std::string* full_time_pattern);
  private:
  const std::string& _internal_full_time_pattern() const;
  void _internal_set_full_time_pattern(const std::string& value);
  std::string* _internal_mutable_full_time_pattern();
  public:

  // optional string decimal_separator = 32;
  bool has_decimal_separator() const;
  private:
  bool _internal_has_decimal_separator() const;
  public:
  void clear_decimal_separator();
  const std::string& decimal_separator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decimal_separator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decimal_separator();
  std::string* release_decimal_separator();
  void set_allocated_decimal_separator(std::string* decimal_separator);
  private:
  const std::string& _internal_decimal_separator() const;
  void _internal_set_decimal_separator(const std::string& value);
  std::string* _internal_mutable_decimal_separator();
  public:

  // optional string grouping_separator = 33;
  bool has_grouping_separator() const;
  private:
  bool _internal_has_grouping_separator() const;
  public:
  void clear_grouping_separator();
  const std::string& grouping_separator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grouping_separator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grouping_separator();
  std::string* release_grouping_separator();
  void set_allocated_grouping_separator(std::string* grouping_separator);
  private:
  const std::string& _internal_grouping_separator() const;
  void _internal_set_grouping_separator(const std::string& value);
  std::string* _internal_mutable_grouping_separator();
  public:

  // optional string currency_decimal_separator = 34;
  bool has_currency_decimal_separator() const;
  private:
  bool _internal_has_currency_decimal_separator() const;
  public:
  void clear_currency_decimal_separator();
  const std::string& currency_decimal_separator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_decimal_separator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_decimal_separator();
  std::string* release_currency_decimal_separator();
  void set_allocated_currency_decimal_separator(std::string* currency_decimal_separator);
  private:
  const std::string& _internal_currency_decimal_separator() const;
  void _internal_set_currency_decimal_separator(const std::string& value);
  std::string* _internal_mutable_currency_decimal_separator();
  public:

  // optional string currency_grouping_separator = 35;
  bool has_currency_grouping_separator() const;
  private:
  bool _internal_has_currency_grouping_separator() const;
  public:
  void clear_currency_grouping_separator();
  const std::string& currency_grouping_separator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_grouping_separator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_grouping_separator();
  std::string* release_currency_grouping_separator();
  void set_allocated_currency_grouping_separator(std::string* currency_grouping_separator);
  private:
  const std::string& _internal_currency_grouping_separator() const;
  void _internal_set_currency_grouping_separator(const std::string& value);
  std::string* _internal_mutable_currency_grouping_separator();
  public:

  // optional string plus_sign = 36;
  bool has_plus_sign() const;
  private:
  bool _internal_has_plus_sign() const;
  public:
  void clear_plus_sign();
  const std::string& plus_sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plus_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plus_sign();
  std::string* release_plus_sign();
  void set_allocated_plus_sign(std::string* plus_sign);
  private:
  const std::string& _internal_plus_sign() const;
  void _internal_set_plus_sign(const std::string& value);
  std::string* _internal_mutable_plus_sign();
  public:

  // optional string minus_sign = 37;
  bool has_minus_sign() const;
  private:
  bool _internal_has_minus_sign() const;
  public:
  void clear_minus_sign();
  const std::string& minus_sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_minus_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_minus_sign();
  std::string* release_minus_sign();
  void set_allocated_minus_sign(std::string* minus_sign);
  private:
  const std::string& _internal_minus_sign() const;
  void _internal_set_minus_sign(const std::string& value);
  std::string* _internal_mutable_minus_sign();
  public:

  // optional string exponential_symbol = 38;
  bool has_exponential_symbol() const;
  private:
  bool _internal_has_exponential_symbol() const;
  public:
  void clear_exponential_symbol();
  const std::string& exponential_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exponential_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exponential_symbol();
  std::string* release_exponential_symbol();
  void set_allocated_exponential_symbol(std::string* exponential_symbol);
  private:
  const std::string& _internal_exponential_symbol() const;
  void _internal_set_exponential_symbol(const std::string& value);
  std::string* _internal_mutable_exponential_symbol();
  public:

  // optional string percent_symbol = 39;
  bool has_percent_symbol() const;
  private:
  bool _internal_has_percent_symbol() const;
  public:
  void clear_percent_symbol();
  const std::string& percent_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_percent_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_percent_symbol();
  std::string* release_percent_symbol();
  void set_allocated_percent_symbol(std::string* percent_symbol);
  private:
  const std::string& _internal_percent_symbol() const;
  void _internal_set_percent_symbol(const std::string& value);
  std::string* _internal_mutable_percent_symbol();
  public:

  // optional string per_mille_symbol = 40;
  bool has_per_mille_symbol() const;
  private:
  bool _internal_has_per_mille_symbol() const;
  public:
  void clear_per_mille_symbol();
  const std::string& per_mille_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_per_mille_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_per_mille_symbol();
  std::string* release_per_mille_symbol();
  void set_allocated_per_mille_symbol(std::string* per_mille_symbol);
  private:
  const std::string& _internal_per_mille_symbol() const;
  void _internal_set_per_mille_symbol(const std::string& value);
  std::string* _internal_mutable_per_mille_symbol();
  public:

  // optional string infinity_symbol = 41;
  bool has_infinity_symbol() const;
  private:
  bool _internal_has_infinity_symbol() const;
  public:
  void clear_infinity_symbol();
  const std::string& infinity_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_infinity_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_infinity_symbol();
  std::string* release_infinity_symbol();
  void set_allocated_infinity_symbol(std::string* infinity_symbol);
  private:
  const std::string& _internal_infinity_symbol() const;
  void _internal_set_infinity_symbol(const std::string& value);
  std::string* _internal_mutable_infinity_symbol();
  public:

  // optional string nan_symbol = 42;
  bool has_nan_symbol() const;
  private:
  bool _internal_has_nan_symbol() const;
  public:
  void clear_nan_symbol();
  const std::string& nan_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nan_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nan_symbol();
  std::string* release_nan_symbol();
  void set_allocated_nan_symbol(std::string* nan_symbol);
  private:
  const std::string& _internal_nan_symbol() const;
  void _internal_set_nan_symbol(const std::string& value);
  std::string* _internal_mutable_nan_symbol();
  public:

  // optional string decimal_pattern = 43;
  bool has_decimal_pattern() const;
  private:
  bool _internal_has_decimal_pattern() const;
  public:
  void clear_decimal_pattern();
  const std::string& decimal_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decimal_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decimal_pattern();
  std::string* release_decimal_pattern();
  void set_allocated_decimal_pattern(std::string* decimal_pattern);
  private:
  const std::string& _internal_decimal_pattern() const;
  void _internal_set_decimal_pattern(const std::string& value);
  std::string* _internal_mutable_decimal_pattern();
  public:

  // optional string scientific_pattern = 44;
  bool has_scientific_pattern() const;
  private:
  bool _internal_has_scientific_pattern() const;
  public:
  void clear_scientific_pattern();
  const std::string& scientific_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scientific_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scientific_pattern();
  std::string* release_scientific_pattern();
  void set_allocated_scientific_pattern(std::string* scientific_pattern);
  private:
  const std::string& _internal_scientific_pattern() const;
  void _internal_set_scientific_pattern(const std::string& value);
  std::string* _internal_mutable_scientific_pattern();
  public:

  // optional string percent_pattern = 45;
  bool has_percent_pattern() const;
  private:
  bool _internal_has_percent_pattern() const;
  public:
  void clear_percent_pattern();
  const std::string& percent_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_percent_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_percent_pattern();
  std::string* release_percent_pattern();
  void set_allocated_percent_pattern(std::string* percent_pattern);
  private:
  const std::string& _internal_percent_pattern() const;
  void _internal_set_percent_pattern(const std::string& value);
  std::string* _internal_mutable_percent_pattern();
  public:

  // optional string currency_pattern = 46;
  bool has_currency_pattern() const;
  private:
  bool _internal_has_currency_pattern() const;
  public:
  void clear_currency_pattern();
  const std::string& currency_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_pattern();
  std::string* release_currency_pattern();
  void set_allocated_currency_pattern(std::string* currency_pattern);
  private:
  const std::string& _internal_currency_pattern() const;
  void _internal_set_currency_pattern(const std::string& value);
  std::string* _internal_mutable_currency_pattern();
  public:

  // optional string currency_code = 47;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // @@protoc_insertion_point(class_scope:TSK.FormattingSymbolsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> months_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_months_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> short_months_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_short_months_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> weekdays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_weekdays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> short_weekdays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_short_weekdays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tiny_months_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_tiny_months_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tiny_weekdays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_tiny_weekdays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> quarters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_quarters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> short_quarters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> standalone_short_quarters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> eras_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> long_eras_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormattingSymbolsArchive_CurrencySymbol > currency_symbols_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calendar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr numbering_system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr am_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pm_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_date_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr medium_date_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_date_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_date_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_time_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr medium_time_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_time_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_time_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimal_separator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grouping_separator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_decimal_separator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_grouping_separator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plus_sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minus_sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exponential_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percent_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr per_mille_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr infinity_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nan_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimal_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scientific_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percent_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentSupportCollaborationState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DocumentSupportCollaborationState) */ {
 public:
  inline DocumentSupportCollaborationState() : DocumentSupportCollaborationState(nullptr) {}
  ~DocumentSupportCollaborationState() override;
  explicit constexpr DocumentSupportCollaborationState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentSupportCollaborationState(const DocumentSupportCollaborationState& from);
  DocumentSupportCollaborationState(DocumentSupportCollaborationState&& from) noexcept
    : DocumentSupportCollaborationState() {
    *this = ::std::move(from);
  }

  inline DocumentSupportCollaborationState& operator=(const DocumentSupportCollaborationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentSupportCollaborationState& operator=(DocumentSupportCollaborationState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentSupportCollaborationState& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentSupportCollaborationState* internal_default_instance() {
    return reinterpret_cast<const DocumentSupportCollaborationState*>(
               &_DocumentSupportCollaborationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DocumentSupportCollaborationState& a, DocumentSupportCollaborationState& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentSupportCollaborationState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentSupportCollaborationState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentSupportCollaborationState* New() const final {
    return CreateMaybeMessage<DocumentSupportCollaborationState>(nullptr);
  }

  DocumentSupportCollaborationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentSupportCollaborationState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentSupportCollaborationState& from);
  void MergeFrom(const DocumentSupportCollaborationState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentSupportCollaborationState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DocumentSupportCollaborationState";
  }
  protected:
  explicit DocumentSupportCollaborationState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollaborationCommandHistoryFieldNumber = 1,
    kCollaborationSessionStateFieldNumber = 2,
  };
  // optional .TSP.Reference collaboration_command_history = 1;
  bool has_collaboration_command_history() const;
  private:
  bool _internal_has_collaboration_command_history() const;
  public:
  void clear_collaboration_command_history();
  const ::TSP::Reference& collaboration_command_history() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_collaboration_command_history();
  ::TSP::Reference* mutable_collaboration_command_history();
  void set_allocated_collaboration_command_history(::TSP::Reference* collaboration_command_history);
  private:
  const ::TSP::Reference& _internal_collaboration_command_history() const;
  ::TSP::Reference* _internal_mutable_collaboration_command_history();
  public:
  void unsafe_arena_set_allocated_collaboration_command_history(
      ::TSP::Reference* collaboration_command_history);
  ::TSP::Reference* unsafe_arena_release_collaboration_command_history();

  // optional .TSP.Reference collaboration_session_state = 2;
  bool has_collaboration_session_state() const;
  private:
  bool _internal_has_collaboration_session_state() const;
  public:
  void clear_collaboration_session_state();
  const ::TSP::Reference& collaboration_session_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_collaboration_session_state();
  ::TSP::Reference* mutable_collaboration_session_state();
  void set_allocated_collaboration_session_state(::TSP::Reference* collaboration_session_state);
  private:
  const ::TSP::Reference& _internal_collaboration_session_state() const;
  ::TSP::Reference* _internal_mutable_collaboration_session_state();
  public:
  void unsafe_arena_set_allocated_collaboration_session_state(
      ::TSP::Reference* collaboration_session_state);
  ::TSP::Reference* unsafe_arena_release_collaboration_session_state();

  // @@protoc_insertion_point(class_scope:TSK.DocumentSupportCollaborationState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* collaboration_command_history_;
  ::TSP::Reference* collaboration_session_state_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentSupportArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DocumentSupportArchive) */ {
 public:
  inline DocumentSupportArchive() : DocumentSupportArchive(nullptr) {}
  ~DocumentSupportArchive() override;
  explicit constexpr DocumentSupportArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentSupportArchive(const DocumentSupportArchive& from);
  DocumentSupportArchive(DocumentSupportArchive&& from) noexcept
    : DocumentSupportArchive() {
    *this = ::std::move(from);
  }

  inline DocumentSupportArchive& operator=(const DocumentSupportArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentSupportArchive& operator=(DocumentSupportArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentSupportArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentSupportArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentSupportArchive*>(
               &_DocumentSupportArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DocumentSupportArchive& a, DocumentSupportArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentSupportArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentSupportArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentSupportArchive* New() const final {
    return CreateMaybeMessage<DocumentSupportArchive>(nullptr);
  }

  DocumentSupportArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentSupportArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentSupportArchive& from);
  void MergeFrom(const DocumentSupportArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentSupportArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DocumentSupportArchive";
  }
  protected:
  explicit DocumentSupportArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoActionStringFieldNumber = 6,
    kRedoActionStringFieldNumber = 7,
    kActionStringLocalizationFieldNumber = 12,
    kCommandHistoryFieldNumber = 1,
    kCommandSelectionBehaviorHistoryFieldNumber = 2,
    kViewStateFieldNumber = 3,
    kWebStateFieldNumber = 8,
    kCollaborationCommandHistoryFieldNumber = 10,
    kCollaborationSessionStateFieldNumber = 11,
    kCollaborationStateFieldNumber = 13,
    kUndoCountFieldNumber = 4,
    kRedoCountFieldNumber = 5,
    kIsInCollaborationModeFieldNumber = 9,
  };
  // optional string undo_action_string = 6;
  bool has_undo_action_string() const;
  private:
  bool _internal_has_undo_action_string() const;
  public:
  void clear_undo_action_string();
  const std::string& undo_action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_undo_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_undo_action_string();
  std::string* release_undo_action_string();
  void set_allocated_undo_action_string(std::string* undo_action_string);
  private:
  const std::string& _internal_undo_action_string() const;
  void _internal_set_undo_action_string(const std::string& value);
  std::string* _internal_mutable_undo_action_string();
  public:

  // optional string redo_action_string = 7;
  bool has_redo_action_string() const;
  private:
  bool _internal_has_redo_action_string() const;
  public:
  void clear_redo_action_string();
  const std::string& redo_action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redo_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redo_action_string();
  std::string* release_redo_action_string();
  void set_allocated_redo_action_string(std::string* redo_action_string);
  private:
  const std::string& _internal_redo_action_string() const;
  void _internal_set_redo_action_string(const std::string& value);
  std::string* _internal_mutable_redo_action_string();
  public:

  // optional string action_string_localization = 12;
  bool has_action_string_localization() const;
  private:
  bool _internal_has_action_string_localization() const;
  public:
  void clear_action_string_localization();
  const std::string& action_string_localization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_string_localization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_string_localization();
  std::string* release_action_string_localization();
  void set_allocated_action_string_localization(std::string* action_string_localization);
  private:
  const std::string& _internal_action_string_localization() const;
  void _internal_set_action_string_localization(const std::string& value);
  std::string* _internal_mutable_action_string_localization();
  public:

  // optional .TSP.Reference command_history = 1;
  bool has_command_history() const;
  private:
  bool _internal_has_command_history() const;
  public:
  void clear_command_history();
  const ::TSP::Reference& command_history() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_command_history();
  ::TSP::Reference* mutable_command_history();
  void set_allocated_command_history(::TSP::Reference* command_history);
  private:
  const ::TSP::Reference& _internal_command_history() const;
  ::TSP::Reference* _internal_mutable_command_history();
  public:
  void unsafe_arena_set_allocated_command_history(
      ::TSP::Reference* command_history);
  ::TSP::Reference* unsafe_arena_release_command_history();

  // optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_command_selection_behavior_history() const;
  private:
  bool _internal_has_command_selection_behavior_history() const;
  public:
  PROTOBUF_DEPRECATED void clear_command_selection_behavior_history();
  PROTOBUF_DEPRECATED const ::TSP::Reference& command_selection_behavior_history() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_command_selection_behavior_history();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_command_selection_behavior_history();
  PROTOBUF_DEPRECATED void set_allocated_command_selection_behavior_history(::TSP::Reference* command_selection_behavior_history);
  private:
  const ::TSP::Reference& _internal_command_selection_behavior_history() const;
  ::TSP::Reference* _internal_mutable_command_selection_behavior_history();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_command_selection_behavior_history(
      ::TSP::Reference* command_selection_behavior_history);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_command_selection_behavior_history();

  // optional .TSP.Reference view_state = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_view_state() const;
  private:
  bool _internal_has_view_state() const;
  public:
  PROTOBUF_DEPRECATED void clear_view_state();
  PROTOBUF_DEPRECATED const ::TSP::Reference& view_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_view_state();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_view_state();
  PROTOBUF_DEPRECATED void set_allocated_view_state(::TSP::Reference* view_state);
  private:
  const ::TSP::Reference& _internal_view_state() const;
  ::TSP::Reference* _internal_mutable_view_state();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_view_state(
      ::TSP::Reference* view_state);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_view_state();

  // optional .TSP.Reference web_state = 8;
  bool has_web_state() const;
  private:
  bool _internal_has_web_state() const;
  public:
  void clear_web_state();
  const ::TSP::Reference& web_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_web_state();
  ::TSP::Reference* mutable_web_state();
  void set_allocated_web_state(::TSP::Reference* web_state);
  private:
  const ::TSP::Reference& _internal_web_state() const;
  ::TSP::Reference* _internal_mutable_web_state();
  public:
  void unsafe_arena_set_allocated_web_state(
      ::TSP::Reference* web_state);
  ::TSP::Reference* unsafe_arena_release_web_state();

  // optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_collaboration_command_history() const;
  private:
  bool _internal_has_collaboration_command_history() const;
  public:
  PROTOBUF_DEPRECATED void clear_collaboration_command_history();
  PROTOBUF_DEPRECATED const ::TSP::Reference& collaboration_command_history() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_collaboration_command_history();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_collaboration_command_history();
  PROTOBUF_DEPRECATED void set_allocated_collaboration_command_history(::TSP::Reference* collaboration_command_history);
  private:
  const ::TSP::Reference& _internal_collaboration_command_history() const;
  ::TSP::Reference* _internal_mutable_collaboration_command_history();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_collaboration_command_history(
      ::TSP::Reference* collaboration_command_history);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_collaboration_command_history();

  // optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_collaboration_session_state() const;
  private:
  bool _internal_has_collaboration_session_state() const;
  public:
  PROTOBUF_DEPRECATED void clear_collaboration_session_state();
  PROTOBUF_DEPRECATED const ::TSP::Reference& collaboration_session_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_collaboration_session_state();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_collaboration_session_state();
  PROTOBUF_DEPRECATED void set_allocated_collaboration_session_state(::TSP::Reference* collaboration_session_state);
  private:
  const ::TSP::Reference& _internal_collaboration_session_state() const;
  ::TSP::Reference* _internal_mutable_collaboration_session_state();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_collaboration_session_state(
      ::TSP::Reference* collaboration_session_state);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_collaboration_session_state();

  // optional .TSP.Reference collaboration_state = 13;
  bool has_collaboration_state() const;
  private:
  bool _internal_has_collaboration_state() const;
  public:
  void clear_collaboration_state();
  const ::TSP::Reference& collaboration_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_collaboration_state();
  ::TSP::Reference* mutable_collaboration_state();
  void set_allocated_collaboration_state(::TSP::Reference* collaboration_state);
  private:
  const ::TSP::Reference& _internal_collaboration_state() const;
  ::TSP::Reference* _internal_mutable_collaboration_state();
  public:
  void unsafe_arena_set_allocated_collaboration_state(
      ::TSP::Reference* collaboration_state);
  ::TSP::Reference* unsafe_arena_release_collaboration_state();

  // optional uint32 undo_count = 4;
  bool has_undo_count() const;
  private:
  bool _internal_has_undo_count() const;
  public:
  void clear_undo_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_count() const;
  void set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_undo_count() const;
  void _internal_set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 redo_count = 5;
  bool has_redo_count() const;
  private:
  bool _internal_has_redo_count() const;
  public:
  void clear_redo_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 redo_count() const;
  void set_redo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_redo_count() const;
  void _internal_set_redo_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_in_collaboration_mode = 9 [default = false];
  bool has_is_in_collaboration_mode() const;
  private:
  bool _internal_has_is_in_collaboration_mode() const;
  public:
  void clear_is_in_collaboration_mode();
  bool is_in_collaboration_mode() const;
  void set_is_in_collaboration_mode(bool value);
  private:
  bool _internal_is_in_collaboration_mode() const;
  void _internal_set_is_in_collaboration_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.DocumentSupportArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undo_action_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redo_action_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_string_localization_;
  ::TSP::Reference* command_history_;
  ::TSP::Reference* command_selection_behavior_history_;
  ::TSP::Reference* view_state_;
  ::TSP::Reference* web_state_;
  ::TSP::Reference* collaboration_command_history_;
  ::TSP::Reference* collaboration_session_state_;
  ::TSP::Reference* collaboration_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 undo_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 redo_count_;
  bool is_in_collaboration_mode_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class ViewStateArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.ViewStateArchive) */ {
 public:
  inline ViewStateArchive() : ViewStateArchive(nullptr) {}
  ~ViewStateArchive() override;
  explicit constexpr ViewStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewStateArchive(const ViewStateArchive& from);
  ViewStateArchive(ViewStateArchive&& from) noexcept
    : ViewStateArchive() {
    *this = ::std::move(from);
  }

  inline ViewStateArchive& operator=(const ViewStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewStateArchive& operator=(ViewStateArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewStateArchive* internal_default_instance() {
    return reinterpret_cast<const ViewStateArchive*>(
               &_ViewStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ViewStateArchive& a, ViewStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewStateArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewStateArchive* New() const final {
    return CreateMaybeMessage<ViewStateArchive>(nullptr);
  }

  ViewStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewStateArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewStateArchive& from);
  void MergeFrom(const ViewStateArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewStateArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.ViewStateArchive";
  }
  protected:
  explicit ViewStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentRevisionIdentifierFieldNumber = 3,
    kViewStateRootFieldNumber = 1,
    kDocumentRevisionSequenceFieldNumber = 2,
  };
  // optional string document_revision_identifier = 3;
  bool has_document_revision_identifier() const;
  private:
  bool _internal_has_document_revision_identifier() const;
  public:
  void clear_document_revision_identifier();
  const std::string& document_revision_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_revision_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_revision_identifier();
  std::string* release_document_revision_identifier();
  void set_allocated_document_revision_identifier(std::string* document_revision_identifier);
  private:
  const std::string& _internal_document_revision_identifier() const;
  void _internal_set_document_revision_identifier(const std::string& value);
  std::string* _internal_mutable_document_revision_identifier();
  public:

  // required .TSP.Reference view_state_root = 1;
  bool has_view_state_root() const;
  private:
  bool _internal_has_view_state_root() const;
  public:
  void clear_view_state_root();
  const ::TSP::Reference& view_state_root() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_view_state_root();
  ::TSP::Reference* mutable_view_state_root();
  void set_allocated_view_state_root(::TSP::Reference* view_state_root);
  private:
  const ::TSP::Reference& _internal_view_state_root() const;
  ::TSP::Reference* _internal_mutable_view_state_root();
  public:
  void unsafe_arena_set_allocated_view_state_root(
      ::TSP::Reference* view_state_root);
  ::TSP::Reference* unsafe_arena_release_view_state_root();

  // optional int32 document_revision_sequence = 2;
  bool has_document_revision_sequence() const;
  private:
  bool _internal_has_document_revision_sequence() const;
  public:
  void clear_document_revision_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 document_revision_sequence() const;
  void set_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_document_revision_sequence() const;
  void _internal_set_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.ViewStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_revision_identifier_;
  ::TSP::Reference* view_state_root_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_revision_sequence_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CommandArchive) */ {
 public:
  inline CommandArchive() : CommandArchive(nullptr) {}
  ~CommandArchive() override;
  explicit constexpr CommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandArchive(const CommandArchive& from);
  CommandArchive(CommandArchive&& from) noexcept
    : CommandArchive() {
    *this = ::std::move(from);
  }

  inline CommandArchive& operator=(const CommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandArchive& operator=(CommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandArchive* internal_default_instance() {
    return reinterpret_cast<const CommandArchive*>(
               &_CommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommandArchive& a, CommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandArchive* New() const final {
    return CreateMaybeMessage<CommandArchive>(nullptr);
  }

  CommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandArchive& from);
  void MergeFrom(const CommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CommandArchive";
  }
  protected:
  explicit CommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndoRedoStateFieldNumber = 1,
    kUndoCollectionFieldNumber = 2,
    kShadowedByTransformFieldNumber = 3,
    kShadowedByCommitFieldNumber = 4,
    kRemoteFieldNumber = 5,
    kShouldHoldUntilGroupCommitFieldNumber = 6,
    kServerOriginatedFieldNumber = 7,
  };
  // optional .TSP.Reference undoRedoState = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_undoredostate() const;
  private:
  bool _internal_has_undoredostate() const;
  public:
  PROTOBUF_DEPRECATED void clear_undoredostate();
  PROTOBUF_DEPRECATED const ::TSP::Reference& undoredostate() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_DEPRECATED ::TSP::Reference* release_undoredostate();
  PROTOBUF_DEPRECATED ::TSP::Reference* mutable_undoredostate();
  PROTOBUF_DEPRECATED void set_allocated_undoredostate(::TSP::Reference* undoredostate);
  private:
  const ::TSP::Reference& _internal_undoredostate() const;
  ::TSP::Reference* _internal_mutable_undoredostate();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_undoredostate(
      ::TSP::Reference* undoredostate);
  PROTOBUF_DEPRECATED ::TSP::Reference* unsafe_arena_release_undoredostate();

  // optional .TSP.Reference undoCollection = 2;
  bool has_undocollection() const;
  private:
  bool _internal_has_undocollection() const;
  public:
  void clear_undocollection();
  const ::TSP::Reference& undocollection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_undocollection();
  ::TSP::Reference* mutable_undocollection();
  void set_allocated_undocollection(::TSP::Reference* undocollection);
  private:
  const ::TSP::Reference& _internal_undocollection() const;
  ::TSP::Reference* _internal_mutable_undocollection();
  public:
  void unsafe_arena_set_allocated_undocollection(
      ::TSP::Reference* undocollection);
  ::TSP::Reference* unsafe_arena_release_undocollection();

  // optional bool shadowed_by_transform = 3;
  bool has_shadowed_by_transform() const;
  private:
  bool _internal_has_shadowed_by_transform() const;
  public:
  void clear_shadowed_by_transform();
  bool shadowed_by_transform() const;
  void set_shadowed_by_transform(bool value);
  private:
  bool _internal_shadowed_by_transform() const;
  void _internal_set_shadowed_by_transform(bool value);
  public:

  // optional bool shadowed_by_commit = 4;
  bool has_shadowed_by_commit() const;
  private:
  bool _internal_has_shadowed_by_commit() const;
  public:
  void clear_shadowed_by_commit();
  bool shadowed_by_commit() const;
  void set_shadowed_by_commit(bool value);
  private:
  bool _internal_shadowed_by_commit() const;
  void _internal_set_shadowed_by_commit(bool value);
  public:

  // optional bool remote = 5;
  bool has_remote() const;
  private:
  bool _internal_has_remote() const;
  public:
  void clear_remote();
  bool remote() const;
  void set_remote(bool value);
  private:
  bool _internal_remote() const;
  void _internal_set_remote(bool value);
  public:

  // optional bool should_hold_until_group_commit = 6;
  bool has_should_hold_until_group_commit() const;
  private:
  bool _internal_has_should_hold_until_group_commit() const;
  public:
  void clear_should_hold_until_group_commit();
  bool should_hold_until_group_commit() const;
  void set_should_hold_until_group_commit(bool value);
  private:
  bool _internal_should_hold_until_group_commit() const;
  void _internal_set_should_hold_until_group_commit(bool value);
  public:

  // optional bool server_originated = 7;
  bool has_server_originated() const;
  private:
  bool _internal_has_server_originated() const;
  public:
  void clear_server_originated();
  bool server_originated() const;
  void set_server_originated(bool value);
  private:
  bool _internal_server_originated() const;
  void _internal_set_server_originated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* undoredostate_;
  ::TSP::Reference* undocollection_;
  bool shadowed_by_transform_;
  bool shadowed_by_commit_;
  bool remote_;
  bool should_hold_until_group_commit_;
  bool server_originated_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandGroupArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CommandGroupArchive) */ {
 public:
  inline CommandGroupArchive() : CommandGroupArchive(nullptr) {}
  ~CommandGroupArchive() override;
  explicit constexpr CommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandGroupArchive(const CommandGroupArchive& from);
  CommandGroupArchive(CommandGroupArchive&& from) noexcept
    : CommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline CommandGroupArchive& operator=(const CommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandGroupArchive& operator=(CommandGroupArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const CommandGroupArchive*>(
               &_CommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CommandGroupArchive& a, CommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandGroupArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandGroupArchive* New() const final {
    return CreateMaybeMessage<CommandGroupArchive>(nullptr);
  }

  CommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandGroupArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandGroupArchive& from);
  void MergeFrom(const CommandGroupArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandGroupArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CommandGroupArchive";
  }
  protected:
  explicit CommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 2,
    kActionStringFieldNumber = 4,
    kSuperFieldNumber = 1,
    kProcessResultsFieldNumber = 3,
  };
  // repeated .TSP.Reference commands = 2;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::TSP::Reference* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();
  private:
  const ::TSP::Reference& _internal_commands(int index) const;
  ::TSP::Reference* _internal_add_commands();
  public:
  const ::TSP::Reference& commands(int index) const;
  ::TSP::Reference* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      commands() const;

  // optional string action_string = 4;
  bool has_action_string() const;
  private:
  bool _internal_has_action_string() const;
  public:
  void clear_action_string();
  const std::string& action_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_string();
  std::string* release_action_string();
  void set_allocated_action_string(std::string* action_string);
  private:
  const std::string& _internal_action_string() const;
  void _internal_set_action_string(const std::string& value);
  std::string* _internal_mutable_action_string();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.IndexSet process_results = 3;
  bool has_process_results() const;
  private:
  bool _internal_has_process_results() const;
  public:
  void clear_process_results();
  const ::TSP::IndexSet& process_results() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::IndexSet* release_process_results();
  ::TSP::IndexSet* mutable_process_results();
  void set_allocated_process_results(::TSP::IndexSet* process_results);
  private:
  const ::TSP::IndexSet& _internal_process_results() const;
  ::TSP::IndexSet* _internal_mutable_process_results();
  public:
  void unsafe_arena_set_allocated_process_results(
      ::TSP::IndexSet* process_results);
  ::TSP::IndexSet* unsafe_arena_release_process_results();

  // @@protoc_insertion_point(class_scope:TSK.CommandGroupArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_string_;
  ::TSK::CommandArchive* super_;
  ::TSP::IndexSet* process_results_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class InducedCommandCollectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.InducedCommandCollectionArchive) */ {
 public:
  inline InducedCommandCollectionArchive() : InducedCommandCollectionArchive(nullptr) {}
  ~InducedCommandCollectionArchive() override;
  explicit constexpr InducedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InducedCommandCollectionArchive(const InducedCommandCollectionArchive& from);
  InducedCommandCollectionArchive(InducedCommandCollectionArchive&& from) noexcept
    : InducedCommandCollectionArchive() {
    *this = ::std::move(from);
  }

  inline InducedCommandCollectionArchive& operator=(const InducedCommandCollectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InducedCommandCollectionArchive& operator=(InducedCommandCollectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InducedCommandCollectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InducedCommandCollectionArchive* internal_default_instance() {
    return reinterpret_cast<const InducedCommandCollectionArchive*>(
               &_InducedCommandCollectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(InducedCommandCollectionArchive& a, InducedCommandCollectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InducedCommandCollectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InducedCommandCollectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InducedCommandCollectionArchive* New() const final {
    return CreateMaybeMessage<InducedCommandCollectionArchive>(nullptr);
  }

  InducedCommandCollectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InducedCommandCollectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InducedCommandCollectionArchive& from);
  void MergeFrom(const InducedCommandCollectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InducedCommandCollectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.InducedCommandCollectionArchive";
  }
  protected:
  explicit InducedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInducedCommandsFieldNumber = 3,
    kSuperFieldNumber = 1,
    kInducingCommandFieldNumber = 2,
    kIndexesOfProcessedInducedCommandsFieldNumber = 4,
  };
  // repeated .TSP.Reference induced_commands = 3;
  int induced_commands_size() const;
  private:
  int _internal_induced_commands_size() const;
  public:
  void clear_induced_commands();
  ::TSP::Reference* mutable_induced_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_induced_commands();
  private:
  const ::TSP::Reference& _internal_induced_commands(int index) const;
  ::TSP::Reference* _internal_add_induced_commands();
  public:
  const ::TSP::Reference& induced_commands(int index) const;
  ::TSP::Reference* add_induced_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      induced_commands() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference inducing_command = 2;
  bool has_inducing_command() const;
  private:
  bool _internal_has_inducing_command() const;
  public:
  void clear_inducing_command();
  const ::TSP::Reference& inducing_command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_inducing_command();
  ::TSP::Reference* mutable_inducing_command();
  void set_allocated_inducing_command(::TSP::Reference* inducing_command);
  private:
  const ::TSP::Reference& _internal_inducing_command() const;
  ::TSP::Reference* _internal_mutable_inducing_command();
  public:
  void unsafe_arena_set_allocated_inducing_command(
      ::TSP::Reference* inducing_command);
  ::TSP::Reference* unsafe_arena_release_inducing_command();

  // optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
  bool has_indexes_of_processed_induced_commands() const;
  private:
  bool _internal_has_indexes_of_processed_induced_commands() const;
  public:
  void clear_indexes_of_processed_induced_commands();
  const ::TSP::IndexSet& indexes_of_processed_induced_commands() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::IndexSet* release_indexes_of_processed_induced_commands();
  ::TSP::IndexSet* mutable_indexes_of_processed_induced_commands();
  void set_allocated_indexes_of_processed_induced_commands(::TSP::IndexSet* indexes_of_processed_induced_commands);
  private:
  const ::TSP::IndexSet& _internal_indexes_of_processed_induced_commands() const;
  ::TSP::IndexSet* _internal_mutable_indexes_of_processed_induced_commands();
  public:
  void unsafe_arena_set_allocated_indexes_of_processed_induced_commands(
      ::TSP::IndexSet* indexes_of_processed_induced_commands);
  ::TSP::IndexSet* unsafe_arena_release_indexes_of_processed_induced_commands();

  // @@protoc_insertion_point(class_scope:TSK.InducedCommandCollectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > induced_commands_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* inducing_command_;
  ::TSP::IndexSet* indexes_of_processed_induced_commands_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class PropagatedCommandCollectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.PropagatedCommandCollectionArchive) */ {
 public:
  inline PropagatedCommandCollectionArchive() : PropagatedCommandCollectionArchive(nullptr) {}
  ~PropagatedCommandCollectionArchive() override;
  explicit constexpr PropagatedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropagatedCommandCollectionArchive(const PropagatedCommandCollectionArchive& from);
  PropagatedCommandCollectionArchive(PropagatedCommandCollectionArchive&& from) noexcept
    : PropagatedCommandCollectionArchive() {
    *this = ::std::move(from);
  }

  inline PropagatedCommandCollectionArchive& operator=(const PropagatedCommandCollectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagatedCommandCollectionArchive& operator=(PropagatedCommandCollectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropagatedCommandCollectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropagatedCommandCollectionArchive* internal_default_instance() {
    return reinterpret_cast<const PropagatedCommandCollectionArchive*>(
               &_PropagatedCommandCollectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PropagatedCommandCollectionArchive& a, PropagatedCommandCollectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagatedCommandCollectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagatedCommandCollectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropagatedCommandCollectionArchive* New() const final {
    return CreateMaybeMessage<PropagatedCommandCollectionArchive>(nullptr);
  }

  PropagatedCommandCollectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropagatedCommandCollectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropagatedCommandCollectionArchive& from);
  void MergeFrom(const PropagatedCommandCollectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagatedCommandCollectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.PropagatedCommandCollectionArchive";
  }
  protected:
  explicit PropagatedCommandCollectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPropagatableCommandFieldNumber = 2,
    kPropagatingCommandFieldNumber = 4,
    kPropagatableCommandProcessResultFieldNumber = 3,
    kPropagatingCommandProcessResultFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference propagatable_command = 2;
  bool has_propagatable_command() const;
  private:
  bool _internal_has_propagatable_command() const;
  public:
  void clear_propagatable_command();
  const ::TSP::Reference& propagatable_command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_propagatable_command();
  ::TSP::Reference* mutable_propagatable_command();
  void set_allocated_propagatable_command(::TSP::Reference* propagatable_command);
  private:
  const ::TSP::Reference& _internal_propagatable_command() const;
  ::TSP::Reference* _internal_mutable_propagatable_command();
  public:
  void unsafe_arena_set_allocated_propagatable_command(
      ::TSP::Reference* propagatable_command);
  ::TSP::Reference* unsafe_arena_release_propagatable_command();

  // required .TSP.Reference propagating_command = 4;
  bool has_propagating_command() const;
  private:
  bool _internal_has_propagating_command() const;
  public:
  void clear_propagating_command();
  const ::TSP::Reference& propagating_command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_propagating_command();
  ::TSP::Reference* mutable_propagating_command();
  void set_allocated_propagating_command(::TSP::Reference* propagating_command);
  private:
  const ::TSP::Reference& _internal_propagating_command() const;
  ::TSP::Reference* _internal_mutable_propagating_command();
  public:
  void unsafe_arena_set_allocated_propagating_command(
      ::TSP::Reference* propagating_command);
  ::TSP::Reference* unsafe_arena_release_propagating_command();

  // optional bool propagatable_command_process_result = 3 [default = false];
  bool has_propagatable_command_process_result() const;
  private:
  bool _internal_has_propagatable_command_process_result() const;
  public:
  void clear_propagatable_command_process_result();
  bool propagatable_command_process_result() const;
  void set_propagatable_command_process_result(bool value);
  private:
  bool _internal_propagatable_command_process_result() const;
  void _internal_set_propagatable_command_process_result(bool value);
  public:

  // optional bool propagating_command_process_result = 5 [default = false];
  bool has_propagating_command_process_result() const;
  private:
  bool _internal_has_propagating_command_process_result() const;
  public:
  void clear_propagating_command_process_result();
  bool propagating_command_process_result() const;
  void set_propagating_command_process_result(bool value);
  private:
  bool _internal_propagating_command_process_result() const;
  void _internal_set_propagating_command_process_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.PropagatedCommandCollectionArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* propagatable_command_;
  ::TSP::Reference* propagating_command_;
  bool propagatable_command_process_result_;
  bool propagating_command_process_result_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class FinalCommandPairArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.FinalCommandPairArchive) */ {
 public:
  inline FinalCommandPairArchive() : FinalCommandPairArchive(nullptr) {}
  ~FinalCommandPairArchive() override;
  explicit constexpr FinalCommandPairArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FinalCommandPairArchive(const FinalCommandPairArchive& from);
  FinalCommandPairArchive(FinalCommandPairArchive&& from) noexcept
    : FinalCommandPairArchive() {
    *this = ::std::move(from);
  }

  inline FinalCommandPairArchive& operator=(const FinalCommandPairArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalCommandPairArchive& operator=(FinalCommandPairArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FinalCommandPairArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FinalCommandPairArchive* internal_default_instance() {
    return reinterpret_cast<const FinalCommandPairArchive*>(
               &_FinalCommandPairArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FinalCommandPairArchive& a, FinalCommandPairArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalCommandPairArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalCommandPairArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalCommandPairArchive* New() const final {
    return CreateMaybeMessage<FinalCommandPairArchive>(nullptr);
  }

  FinalCommandPairArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalCommandPairArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinalCommandPairArchive& from);
  void MergeFrom(const FinalCommandPairArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinalCommandPairArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.FinalCommandPairArchive";
  }
  protected:
  explicit FinalCommandPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCommandFieldNumber = 2,
    kFinalCommandFieldNumber = 4,
    kCommandProcessResultFieldNumber = 3,
    kFinalCommandProcessResultFieldNumber = 5,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::TSP::Reference& command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_command();
  ::TSP::Reference* mutable_command();
  void set_allocated_command(::TSP::Reference* command);
  private:
  const ::TSP::Reference& _internal_command() const;
  ::TSP::Reference* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::TSP::Reference* command);
  ::TSP::Reference* unsafe_arena_release_command();

  // required .TSP.Reference final_command = 4;
  bool has_final_command() const;
  private:
  bool _internal_has_final_command() const;
  public:
  void clear_final_command();
  const ::TSP::Reference& final_command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_final_command();
  ::TSP::Reference* mutable_final_command();
  void set_allocated_final_command(::TSP::Reference* final_command);
  private:
  const ::TSP::Reference& _internal_final_command() const;
  ::TSP::Reference* _internal_mutable_final_command();
  public:
  void unsafe_arena_set_allocated_final_command(
      ::TSP::Reference* final_command);
  ::TSP::Reference* unsafe_arena_release_final_command();

  // optional bool command_process_result = 3 [default = false];
  bool has_command_process_result() const;
  private:
  bool _internal_has_command_process_result() const;
  public:
  void clear_command_process_result();
  bool command_process_result() const;
  void set_command_process_result(bool value);
  private:
  bool _internal_command_process_result() const;
  void _internal_set_command_process_result(bool value);
  public:

  // optional bool final_command_process_result = 5 [default = false];
  bool has_final_command_process_result() const;
  private:
  bool _internal_has_final_command_process_result() const;
  public:
  void clear_final_command_process_result();
  bool final_command_process_result() const;
  void set_final_command_process_result(bool value);
  private:
  bool _internal_final_command_process_result() const;
  void _internal_set_final_command_process_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.FinalCommandPairArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* command_;
  ::TSP::Reference* final_command_;
  bool command_process_result_;
  bool final_command_process_result_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandContainerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CommandContainerArchive) */ {
 public:
  inline CommandContainerArchive() : CommandContainerArchive(nullptr) {}
  ~CommandContainerArchive() override;
  explicit constexpr CommandContainerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandContainerArchive(const CommandContainerArchive& from);
  CommandContainerArchive(CommandContainerArchive&& from) noexcept
    : CommandContainerArchive() {
    *this = ::std::move(from);
  }

  inline CommandContainerArchive& operator=(const CommandContainerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandContainerArchive& operator=(CommandContainerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandContainerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandContainerArchive* internal_default_instance() {
    return reinterpret_cast<const CommandContainerArchive*>(
               &_CommandContainerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CommandContainerArchive& a, CommandContainerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandContainerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandContainerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandContainerArchive* New() const final {
    return CreateMaybeMessage<CommandContainerArchive>(nullptr);
  }

  CommandContainerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandContainerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandContainerArchive& from);
  void MergeFrom(const CommandContainerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandContainerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CommandContainerArchive";
  }
  protected:
  explicit CommandContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 1,
  };
  // repeated .TSP.Reference commands = 1;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::TSP::Reference* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();
  private:
  const ::TSP::Reference& _internal_commands(int index) const;
  ::TSP::Reference* _internal_add_commands();
  public:
  const ::TSP::Reference& commands(int index) const;
  ::TSP::Reference* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      commands() const;

  // @@protoc_insertion_point(class_scope:TSK.CommandContainerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > commands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class ShuffleMappingArchive_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.ShuffleMappingArchive.Entry) */ {
 public:
  inline ShuffleMappingArchive_Entry() : ShuffleMappingArchive_Entry(nullptr) {}
  ~ShuffleMappingArchive_Entry() override;
  explicit constexpr ShuffleMappingArchive_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShuffleMappingArchive_Entry(const ShuffleMappingArchive_Entry& from);
  ShuffleMappingArchive_Entry(ShuffleMappingArchive_Entry&& from) noexcept
    : ShuffleMappingArchive_Entry() {
    *this = ::std::move(from);
  }

  inline ShuffleMappingArchive_Entry& operator=(const ShuffleMappingArchive_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShuffleMappingArchive_Entry& operator=(ShuffleMappingArchive_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShuffleMappingArchive_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShuffleMappingArchive_Entry* internal_default_instance() {
    return reinterpret_cast<const ShuffleMappingArchive_Entry*>(
               &_ShuffleMappingArchive_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ShuffleMappingArchive_Entry& a, ShuffleMappingArchive_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(ShuffleMappingArchive_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShuffleMappingArchive_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShuffleMappingArchive_Entry* New() const final {
    return CreateMaybeMessage<ShuffleMappingArchive_Entry>(nullptr);
  }

  ShuffleMappingArchive_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShuffleMappingArchive_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShuffleMappingArchive_Entry& from);
  void MergeFrom(const ShuffleMappingArchive_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShuffleMappingArchive_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.ShuffleMappingArchive.Entry";
  }
  protected:
  explicit ShuffleMappingArchive_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // required uint32 from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.ShuffleMappingArchive.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class ShuffleMappingArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.ShuffleMappingArchive) */ {
 public:
  inline ShuffleMappingArchive() : ShuffleMappingArchive(nullptr) {}
  ~ShuffleMappingArchive() override;
  explicit constexpr ShuffleMappingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShuffleMappingArchive(const ShuffleMappingArchive& from);
  ShuffleMappingArchive(ShuffleMappingArchive&& from) noexcept
    : ShuffleMappingArchive() {
    *this = ::std::move(from);
  }

  inline ShuffleMappingArchive& operator=(const ShuffleMappingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShuffleMappingArchive& operator=(ShuffleMappingArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShuffleMappingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShuffleMappingArchive* internal_default_instance() {
    return reinterpret_cast<const ShuffleMappingArchive*>(
               &_ShuffleMappingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ShuffleMappingArchive& a, ShuffleMappingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShuffleMappingArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShuffleMappingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShuffleMappingArchive* New() const final {
    return CreateMaybeMessage<ShuffleMappingArchive>(nullptr);
  }

  ShuffleMappingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShuffleMappingArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShuffleMappingArchive& from);
  void MergeFrom(const ShuffleMappingArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShuffleMappingArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.ShuffleMappingArchive";
  }
  protected:
  explicit ShuffleMappingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShuffleMappingArchive_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kStartIndexFieldNumber = 1,
    kEndIndexFieldNumber = 2,
    kIsMoveOperationFieldNumber = 5,
    kFirstMovedIndexFieldNumber = 6,
    kDestinationIndexForMoveFieldNumber = 7,
    kNumberOfIndexesMovedFieldNumber = 8,
    kIsVerticalFieldNumber = 4,
  };
  // repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSK::ShuffleMappingArchive_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::ShuffleMappingArchive_Entry >*
      mutable_entries();
  private:
  const ::TSK::ShuffleMappingArchive_Entry& _internal_entries(int index) const;
  ::TSK::ShuffleMappingArchive_Entry* _internal_add_entries();
  public:
  const ::TSK::ShuffleMappingArchive_Entry& entries(int index) const;
  ::TSK::ShuffleMappingArchive_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::ShuffleMappingArchive_Entry >&
      entries() const;

  // required uint32 start_index = 1;
  bool has_start_index() const;
  private:
  bool _internal_has_start_index() const;
  public:
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_index() const;
  void _internal_set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 end_index = 2;
  bool has_end_index() const;
  private:
  bool _internal_has_end_index() const;
  public:
  void clear_end_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_index() const;
  void set_end_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_index() const;
  void _internal_set_end_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_move_operation = 5 [default = false];
  bool has_is_move_operation() const;
  private:
  bool _internal_has_is_move_operation() const;
  public:
  void clear_is_move_operation();
  bool is_move_operation() const;
  void set_is_move_operation(bool value);
  private:
  bool _internal_is_move_operation() const;
  void _internal_set_is_move_operation(bool value);
  public:

  // optional uint32 first_moved_index = 6 [default = 0];
  bool has_first_moved_index() const;
  private:
  bool _internal_has_first_moved_index() const;
  public:
  void clear_first_moved_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_moved_index() const;
  void set_first_moved_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_moved_index() const;
  void _internal_set_first_moved_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 destination_index_for_move = 7 [default = 0];
  bool has_destination_index_for_move() const;
  private:
  bool _internal_has_destination_index_for_move() const;
  public:
  void clear_destination_index_for_move();
  ::PROTOBUF_NAMESPACE_ID::uint32 destination_index_for_move() const;
  void set_destination_index_for_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_destination_index_for_move() const;
  void _internal_set_destination_index_for_move(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 number_of_indexes_moved = 8 [default = 0];
  bool has_number_of_indexes_moved() const;
  private:
  bool _internal_has_number_of_indexes_moved() const;
  public:
  void clear_number_of_indexes_moved();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_indexes_moved() const;
  void set_number_of_indexes_moved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_indexes_moved() const;
  void _internal_set_number_of_indexes_moved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_vertical = 4 [default = true];
  bool has_is_vertical() const;
  private:
  bool _internal_has_is_vertical() const;
  public:
  void clear_is_vertical();
  bool is_vertical() const;
  void set_is_vertical(bool value);
  private:
  bool _internal_is_vertical() const;
  void _internal_set_is_vertical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.ShuffleMappingArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::ShuffleMappingArchive_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_index_;
  bool is_move_operation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_moved_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 destination_index_for_move_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_indexes_moved_;
  bool is_vertical_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class ProgressiveCommandGroupArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.ProgressiveCommandGroupArchive) */ {
 public:
  inline ProgressiveCommandGroupArchive() : ProgressiveCommandGroupArchive(nullptr) {}
  ~ProgressiveCommandGroupArchive() override;
  explicit constexpr ProgressiveCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgressiveCommandGroupArchive(const ProgressiveCommandGroupArchive& from);
  ProgressiveCommandGroupArchive(ProgressiveCommandGroupArchive&& from) noexcept
    : ProgressiveCommandGroupArchive() {
    *this = ::std::move(from);
  }

  inline ProgressiveCommandGroupArchive& operator=(const ProgressiveCommandGroupArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgressiveCommandGroupArchive& operator=(ProgressiveCommandGroupArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgressiveCommandGroupArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgressiveCommandGroupArchive* internal_default_instance() {
    return reinterpret_cast<const ProgressiveCommandGroupArchive*>(
               &_ProgressiveCommandGroupArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ProgressiveCommandGroupArchive& a, ProgressiveCommandGroupArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgressiveCommandGroupArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgressiveCommandGroupArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgressiveCommandGroupArchive* New() const final {
    return CreateMaybeMessage<ProgressiveCommandGroupArchive>(nullptr);
  }

  ProgressiveCommandGroupArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgressiveCommandGroupArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgressiveCommandGroupArchive& from);
  void MergeFrom(const ProgressiveCommandGroupArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgressiveCommandGroupArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.ProgressiveCommandGroupArchive";
  }
  protected:
  explicit ProgressiveCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandGroupArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandGroupArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandGroupArchive* release_super();
  ::TSK::CommandGroupArchive* mutable_super();
  void set_allocated_super(::TSK::CommandGroupArchive* super);
  private:
  const ::TSK::CommandGroupArchive& _internal_super() const;
  ::TSK::CommandGroupArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandGroupArchive* super);
  ::TSK::CommandGroupArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.ProgressiveCommandGroupArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandGroupArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class FormatStructArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.FormatStructArchive) */ {
 public:
  inline FormatStructArchive() : FormatStructArchive(nullptr) {}
  ~FormatStructArchive() override;
  explicit constexpr FormatStructArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormatStructArchive(const FormatStructArchive& from);
  FormatStructArchive(FormatStructArchive&& from) noexcept
    : FormatStructArchive() {
    *this = ::std::move(from);
  }

  inline FormatStructArchive& operator=(const FormatStructArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormatStructArchive& operator=(FormatStructArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormatStructArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormatStructArchive* internal_default_instance() {
    return reinterpret_cast<const FormatStructArchive*>(
               &_FormatStructArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FormatStructArchive& a, FormatStructArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FormatStructArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormatStructArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormatStructArchive* New() const final {
    return CreateMaybeMessage<FormatStructArchive>(nullptr);
  }

  FormatStructArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormatStructArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormatStructArchive& from);
  void MergeFrom(const FormatStructArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormatStructArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.FormatStructArchive";
  }
  protected:
  explicit FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterstitialStringsFieldNumber = 32,
    kCurrencyCodeFieldNumber = 3,
    kDateTimeFormatFieldNumber = 14,
    kCustomFormatStringFieldNumber = 18,
    kBoolTrueStringFieldNumber = 44,
    kBoolFalseStringFieldNumber = 45,
    kIntersStrInsertionIndexesFieldNumber = 33,
    kCustomUidFieldNumber = 41,
    kCustomFormatFieldNumber = 42,
    kFormatTypeFieldNumber = 1,
    kDecimalPlacesFieldNumber = 2,
    kNegativeStyleFieldNumber = 4,
    kDurationStyleFieldNumber = 7,
    kBaseFieldNumber = 8,
    kShowThousandsSeparatorFieldNumber = 5,
    kUseAccountingStyleFieldNumber = 6,
    kBaseUseMinusSignFieldNumber = 10,
    kSuppressDateFormatFieldNumber = 12,
    kBasePlacesFieldNumber = 9,
    kFractionAccuracyFieldNumber = 11,
    kDurationUnitLargestFieldNumber = 15,
    kDurationUnitSmallestFieldNumber = 16,
    kScaleFactorFieldNumber = 19,
    kCustomIdFieldNumber = 17,
    kControlFormatTypeFieldNumber = 24,
    kControlMinimumFieldNumber = 21,
    kControlMaximumFieldNumber = 22,
    kControlIncrementFieldNumber = 23,
    kSliderOrientationFieldNumber = 25,
    kSliderPositionFieldNumber = 26,
    kSuppressTimeFormatFieldNumber = 13,
    kRequiresFractionReplacementFieldNumber = 20,
    kIsComplexFieldNumber = 36,
    kContainsIntegerTokenFieldNumber = 37,
    kDecimalWidthFieldNumber = 27,
    kMinIntegerWidthFieldNumber = 28,
    kNumNonspaceIntegerDigitsFieldNumber = 29,
    kNumNonspaceDecimalDigitsFieldNumber = 30,
    kIndexFromRightLastIntegerFieldNumber = 31,
    kNumHashDecimalDigitsFieldNumber = 34,
    kTotalNumDecimalDigitsFieldNumber = 35,
    kMultipleChoiceListInitialValueFieldNumber = 38,
    kMultipleChoiceListIdFieldNumber = 39,
    kUseAutomaticDurationUnitsFieldNumber = 40,
    kUsesPlusSignFieldNumber = 43,
  };
  // repeated string interstitial_strings = 32;
  int interstitial_strings_size() const;
  private:
  int _internal_interstitial_strings_size() const;
  public:
  void clear_interstitial_strings();
  const std::string& interstitial_strings(int index) const;
  std::string* mutable_interstitial_strings(int index);
  void set_interstitial_strings(int index, const std::string& value);
  void set_interstitial_strings(int index, std::string&& value);
  void set_interstitial_strings(int index, const char* value);
  void set_interstitial_strings(int index, const char* value, size_t size);
  std::string* add_interstitial_strings();
  void add_interstitial_strings(const std::string& value);
  void add_interstitial_strings(std::string&& value);
  void add_interstitial_strings(const char* value);
  void add_interstitial_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& interstitial_strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_interstitial_strings();
  private:
  const std::string& _internal_interstitial_strings(int index) const;
  std::string* _internal_add_interstitial_strings();
  public:

  // optional string currency_code = 3;
  bool has_currency_code() const;
  private:
  bool _internal_has_currency_code() const;
  public:
  void clear_currency_code();
  const std::string& currency_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_code();
  std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // optional string date_time_format = 14;
  bool has_date_time_format() const;
  private:
  bool _internal_has_date_time_format() const;
  public:
  void clear_date_time_format();
  const std::string& date_time_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_time_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_time_format();
  std::string* release_date_time_format();
  void set_allocated_date_time_format(std::string* date_time_format);
  private:
  const std::string& _internal_date_time_format() const;
  void _internal_set_date_time_format(const std::string& value);
  std::string* _internal_mutable_date_time_format();
  public:

  // optional string custom_format_string = 18;
  bool has_custom_format_string() const;
  private:
  bool _internal_has_custom_format_string() const;
  public:
  void clear_custom_format_string();
  const std::string& custom_format_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_format_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_format_string();
  std::string* release_custom_format_string();
  void set_allocated_custom_format_string(std::string* custom_format_string);
  private:
  const std::string& _internal_custom_format_string() const;
  void _internal_set_custom_format_string(const std::string& value);
  std::string* _internal_mutable_custom_format_string();
  public:

  // optional string bool_true_string = 44;
  bool has_bool_true_string() const;
  private:
  bool _internal_has_bool_true_string() const;
  public:
  void clear_bool_true_string();
  const std::string& bool_true_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bool_true_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bool_true_string();
  std::string* release_bool_true_string();
  void set_allocated_bool_true_string(std::string* bool_true_string);
  private:
  const std::string& _internal_bool_true_string() const;
  void _internal_set_bool_true_string(const std::string& value);
  std::string* _internal_mutable_bool_true_string();
  public:

  // optional string bool_false_string = 45;
  bool has_bool_false_string() const;
  private:
  bool _internal_has_bool_false_string() const;
  public:
  void clear_bool_false_string();
  const std::string& bool_false_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bool_false_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bool_false_string();
  std::string* release_bool_false_string();
  void set_allocated_bool_false_string(std::string* bool_false_string);
  private:
  const std::string& _internal_bool_false_string() const;
  void _internal_set_bool_false_string(const std::string& value);
  std::string* _internal_mutable_bool_false_string();
  public:

  // optional .TSP.IndexSet inters_str_insertion_indexes = 33;
  bool has_inters_str_insertion_indexes() const;
  private:
  bool _internal_has_inters_str_insertion_indexes() const;
  public:
  void clear_inters_str_insertion_indexes();
  const ::TSP::IndexSet& inters_str_insertion_indexes() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::IndexSet* release_inters_str_insertion_indexes();
  ::TSP::IndexSet* mutable_inters_str_insertion_indexes();
  void set_allocated_inters_str_insertion_indexes(::TSP::IndexSet* inters_str_insertion_indexes);
  private:
  const ::TSP::IndexSet& _internal_inters_str_insertion_indexes() const;
  ::TSP::IndexSet* _internal_mutable_inters_str_insertion_indexes();
  public:
  void unsafe_arena_set_allocated_inters_str_insertion_indexes(
      ::TSP::IndexSet* inters_str_insertion_indexes);
  ::TSP::IndexSet* unsafe_arena_release_inters_str_insertion_indexes();

  // optional .TSP.UUID custom_uid = 41;
  bool has_custom_uid() const;
  private:
  bool _internal_has_custom_uid() const;
  public:
  void clear_custom_uid();
  const ::TSP::UUID& custom_uid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_custom_uid();
  ::TSP::UUID* mutable_custom_uid();
  void set_allocated_custom_uid(::TSP::UUID* custom_uid);
  private:
  const ::TSP::UUID& _internal_custom_uid() const;
  ::TSP::UUID* _internal_mutable_custom_uid();
  public:
  void unsafe_arena_set_allocated_custom_uid(
      ::TSP::UUID* custom_uid);
  ::TSP::UUID* unsafe_arena_release_custom_uid();

  // optional .TSK.CustomFormatArchive custom_format = 42;
  bool has_custom_format() const;
  private:
  bool _internal_has_custom_format() const;
  public:
  void clear_custom_format();
  const ::TSK::CustomFormatArchive& custom_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CustomFormatArchive* release_custom_format();
  ::TSK::CustomFormatArchive* mutable_custom_format();
  void set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format);
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_format() const;
  ::TSK::CustomFormatArchive* _internal_mutable_custom_format();
  public:
  void unsafe_arena_set_allocated_custom_format(
      ::TSK::CustomFormatArchive* custom_format);
  ::TSK::CustomFormatArchive* unsafe_arena_release_custom_format();

  // required uint32 format_type = 1;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type() const;
  void set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_type() const;
  void _internal_set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 decimal_places = 2;
  bool has_decimal_places() const;
  private:
  bool _internal_has_decimal_places() const;
  public:
  void clear_decimal_places();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_places() const;
  void set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimal_places() const;
  void _internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 negative_style = 4;
  bool has_negative_style() const;
  private:
  bool _internal_has_negative_style() const;
  public:
  void clear_negative_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 negative_style() const;
  void set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_negative_style() const;
  void _internal_set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration_style = 7;
  bool has_duration_style() const;
  private:
  bool _internal_has_duration_style() const;
  public:
  void clear_duration_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_style() const;
  void set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_style() const;
  void _internal_set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 base = 8;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  ::PROTOBUF_NAMESPACE_ID::uint32 base() const;
  void set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base() const;
  void _internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool show_thousands_separator = 5;
  bool has_show_thousands_separator() const;
  private:
  bool _internal_has_show_thousands_separator() const;
  public:
  void clear_show_thousands_separator();
  bool show_thousands_separator() const;
  void set_show_thousands_separator(bool value);
  private:
  bool _internal_show_thousands_separator() const;
  void _internal_set_show_thousands_separator(bool value);
  public:

  // optional bool use_accounting_style = 6;
  bool has_use_accounting_style() const;
  private:
  bool _internal_has_use_accounting_style() const;
  public:
  void clear_use_accounting_style();
  bool use_accounting_style() const;
  void set_use_accounting_style(bool value);
  private:
  bool _internal_use_accounting_style() const;
  void _internal_set_use_accounting_style(bool value);
  public:

  // optional bool base_use_minus_sign = 10;
  bool has_base_use_minus_sign() const;
  private:
  bool _internal_has_base_use_minus_sign() const;
  public:
  void clear_base_use_minus_sign();
  bool base_use_minus_sign() const;
  void set_base_use_minus_sign(bool value);
  private:
  bool _internal_base_use_minus_sign() const;
  void _internal_set_base_use_minus_sign(bool value);
  public:

  // optional bool suppress_date_format = 12;
  bool has_suppress_date_format() const;
  private:
  bool _internal_has_suppress_date_format() const;
  public:
  void clear_suppress_date_format();
  bool suppress_date_format() const;
  void set_suppress_date_format(bool value);
  private:
  bool _internal_suppress_date_format() const;
  void _internal_set_suppress_date_format(bool value);
  public:

  // optional uint32 base_places = 9;
  bool has_base_places() const;
  private:
  bool _internal_has_base_places() const;
  public:
  void clear_base_places();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_places() const;
  void set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_places() const;
  void _internal_set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fraction_accuracy = 11;
  bool has_fraction_accuracy() const;
  private:
  bool _internal_has_fraction_accuracy() const;
  public:
  void clear_fraction_accuracy();
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_accuracy() const;
  void set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fraction_accuracy() const;
  void _internal_set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration_unit_largest = 15;
  bool has_duration_unit_largest() const;
  private:
  bool _internal_has_duration_unit_largest() const;
  public:
  void clear_duration_unit_largest();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_largest() const;
  void set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_unit_largest() const;
  void _internal_set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration_unit_smallest = 16;
  bool has_duration_unit_smallest() const;
  private:
  bool _internal_has_duration_unit_smallest() const;
  public:
  void clear_duration_unit_smallest();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_smallest() const;
  void set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration_unit_smallest() const;
  void _internal_set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double scale_factor = 19;
  bool has_scale_factor() const;
  private:
  bool _internal_has_scale_factor() const;
  public:
  void clear_scale_factor();
  double scale_factor() const;
  void set_scale_factor(double value);
  private:
  double _internal_scale_factor() const;
  void _internal_set_scale_factor(double value);
  public:

  // optional uint32 custom_id = 17;
  bool has_custom_id() const;
  private:
  bool _internal_has_custom_id() const;
  public:
  void clear_custom_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_id() const;
  void set_custom_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_id() const;
  void _internal_set_custom_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 control_format_type = 24;
  bool has_control_format_type() const;
  private:
  bool _internal_has_control_format_type() const;
  public:
  void clear_control_format_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 control_format_type() const;
  void set_control_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_control_format_type() const;
  void _internal_set_control_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double control_minimum = 21;
  bool has_control_minimum() const;
  private:
  bool _internal_has_control_minimum() const;
  public:
  void clear_control_minimum();
  double control_minimum() const;
  void set_control_minimum(double value);
  private:
  double _internal_control_minimum() const;
  void _internal_set_control_minimum(double value);
  public:

  // optional double control_maximum = 22;
  bool has_control_maximum() const;
  private:
  bool _internal_has_control_maximum() const;
  public:
  void clear_control_maximum();
  double control_maximum() const;
  void set_control_maximum(double value);
  private:
  double _internal_control_maximum() const;
  void _internal_set_control_maximum(double value);
  public:

  // optional double control_increment = 23;
  bool has_control_increment() const;
  private:
  bool _internal_has_control_increment() const;
  public:
  void clear_control_increment();
  double control_increment() const;
  void set_control_increment(double value);
  private:
  double _internal_control_increment() const;
  void _internal_set_control_increment(double value);
  public:

  // optional uint32 slider_orientation = 25;
  bool has_slider_orientation() const;
  private:
  bool _internal_has_slider_orientation() const;
  public:
  void clear_slider_orientation();
  ::PROTOBUF_NAMESPACE_ID::uint32 slider_orientation() const;
  void set_slider_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slider_orientation() const;
  void _internal_set_slider_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slider_position = 26;
  bool has_slider_position() const;
  private:
  bool _internal_has_slider_position() const;
  public:
  void clear_slider_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 slider_position() const;
  void set_slider_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slider_position() const;
  void _internal_set_slider_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool suppress_time_format = 13;
  bool has_suppress_time_format() const;
  private:
  bool _internal_has_suppress_time_format() const;
  public:
  void clear_suppress_time_format();
  bool suppress_time_format() const;
  void set_suppress_time_format(bool value);
  private:
  bool _internal_suppress_time_format() const;
  void _internal_set_suppress_time_format(bool value);
  public:

  // optional bool requires_fraction_replacement = 20;
  bool has_requires_fraction_replacement() const;
  private:
  bool _internal_has_requires_fraction_replacement() const;
  public:
  void clear_requires_fraction_replacement();
  bool requires_fraction_replacement() const;
  void set_requires_fraction_replacement(bool value);
  private:
  bool _internal_requires_fraction_replacement() const;
  void _internal_set_requires_fraction_replacement(bool value);
  public:

  // optional bool is_complex = 36;
  bool has_is_complex() const;
  private:
  bool _internal_has_is_complex() const;
  public:
  void clear_is_complex();
  bool is_complex() const;
  void set_is_complex(bool value);
  private:
  bool _internal_is_complex() const;
  void _internal_set_is_complex(bool value);
  public:

  // optional bool contains_integer_token = 37;
  bool has_contains_integer_token() const;
  private:
  bool _internal_has_contains_integer_token() const;
  public:
  void clear_contains_integer_token();
  bool contains_integer_token() const;
  void set_contains_integer_token(bool value);
  private:
  bool _internal_contains_integer_token() const;
  void _internal_set_contains_integer_token(bool value);
  public:

  // optional uint32 decimal_width = 27;
  bool has_decimal_width() const;
  private:
  bool _internal_has_decimal_width() const;
  public:
  void clear_decimal_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_width() const;
  void set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decimal_width() const;
  void _internal_set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_integer_width = 28;
  bool has_min_integer_width() const;
  private:
  bool _internal_has_min_integer_width() const;
  public:
  void clear_min_integer_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_integer_width() const;
  void set_min_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_integer_width() const;
  void _internal_set_min_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_nonspace_integer_digits = 29;
  bool has_num_nonspace_integer_digits() const;
  private:
  bool _internal_has_num_nonspace_integer_digits() const;
  public:
  void clear_num_nonspace_integer_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nonspace_integer_digits() const;
  void set_num_nonspace_integer_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_nonspace_integer_digits() const;
  void _internal_set_num_nonspace_integer_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_nonspace_decimal_digits = 30;
  bool has_num_nonspace_decimal_digits() const;
  private:
  bool _internal_has_num_nonspace_decimal_digits() const;
  public:
  void clear_num_nonspace_decimal_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nonspace_decimal_digits() const;
  void set_num_nonspace_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_nonspace_decimal_digits() const;
  void _internal_set_num_nonspace_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 index_from_right_last_integer = 31;
  bool has_index_from_right_last_integer() const;
  private:
  bool _internal_has_index_from_right_last_integer() const;
  public:
  void clear_index_from_right_last_integer();
  ::PROTOBUF_NAMESPACE_ID::uint32 index_from_right_last_integer() const;
  void set_index_from_right_last_integer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index_from_right_last_integer() const;
  void _internal_set_index_from_right_last_integer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_hash_decimal_digits = 34;
  bool has_num_hash_decimal_digits() const;
  private:
  bool _internal_has_num_hash_decimal_digits() const;
  public:
  void clear_num_hash_decimal_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_hash_decimal_digits() const;
  void set_num_hash_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_hash_decimal_digits() const;
  void _internal_set_num_hash_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_num_decimal_digits = 35;
  bool has_total_num_decimal_digits() const;
  private:
  bool _internal_has_total_num_decimal_digits() const;
  public:
  void clear_total_num_decimal_digits();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_num_decimal_digits() const;
  void set_total_num_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_num_decimal_digits() const;
  void _internal_set_total_num_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multiple_choice_list_initial_value = 38;
  bool has_multiple_choice_list_initial_value() const;
  private:
  bool _internal_has_multiple_choice_list_initial_value() const;
  public:
  void clear_multiple_choice_list_initial_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 multiple_choice_list_initial_value() const;
  void set_multiple_choice_list_initial_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multiple_choice_list_initial_value() const;
  void _internal_set_multiple_choice_list_initial_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 multiple_choice_list_id = 39;
  bool has_multiple_choice_list_id() const;
  private:
  bool _internal_has_multiple_choice_list_id() const;
  public:
  void clear_multiple_choice_list_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 multiple_choice_list_id() const;
  void set_multiple_choice_list_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multiple_choice_list_id() const;
  void _internal_set_multiple_choice_list_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool use_automatic_duration_units = 40;
  bool has_use_automatic_duration_units() const;
  private:
  bool _internal_has_use_automatic_duration_units() const;
  public:
  void clear_use_automatic_duration_units();
  bool use_automatic_duration_units() const;
  void set_use_automatic_duration_units(bool value);
  private:
  bool _internal_use_automatic_duration_units() const;
  void _internal_set_use_automatic_duration_units(bool value);
  public:

  // optional bool uses_plus_sign = 43;
  bool has_uses_plus_sign() const;
  private:
  bool _internal_has_uses_plus_sign() const;
  public:
  void clear_uses_plus_sign();
  bool uses_plus_sign() const;
  void set_uses_plus_sign(bool value);
  private:
  bool _internal_uses_plus_sign() const;
  void _internal_set_uses_plus_sign(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FormatStructArchive)
  // @@protoc_insertion_point(class_scope:TSK.FormatStructArchive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> interstitial_strings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_format_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bool_true_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bool_false_string_;
  ::TSP::IndexSet* inters_str_insertion_indexes_;
  ::TSP::UUID* custom_uid_;
  ::TSK::CustomFormatArchive* custom_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_places_;
  ::PROTOBUF_NAMESPACE_ID::uint32 negative_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_;
  bool show_thousands_separator_;
  bool use_accounting_style_;
  bool base_use_minus_sign_;
  bool suppress_date_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_places_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_accuracy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_largest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_unit_smallest_;
  double scale_factor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 control_format_type_;
  double control_minimum_;
  double control_maximum_;
  double control_increment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slider_orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slider_position_;
  bool suppress_time_format_;
  bool requires_fraction_replacement_;
  bool is_complex_;
  bool contains_integer_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decimal_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_integer_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nonspace_integer_digits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nonspace_decimal_digits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_from_right_last_integer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_hash_decimal_digits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_num_decimal_digits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multiple_choice_list_initial_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multiple_choice_list_id_;
  bool use_automatic_duration_units_;
  bool uses_plus_sign_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CustomFormatArchive_Condition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CustomFormatArchive.Condition) */ {
 public:
  inline CustomFormatArchive_Condition() : CustomFormatArchive_Condition(nullptr) {}
  ~CustomFormatArchive_Condition() override;
  explicit constexpr CustomFormatArchive_Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomFormatArchive_Condition(const CustomFormatArchive_Condition& from);
  CustomFormatArchive_Condition(CustomFormatArchive_Condition&& from) noexcept
    : CustomFormatArchive_Condition() {
    *this = ::std::move(from);
  }

  inline CustomFormatArchive_Condition& operator=(const CustomFormatArchive_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomFormatArchive_Condition& operator=(CustomFormatArchive_Condition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomFormatArchive_Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomFormatArchive_Condition* internal_default_instance() {
    return reinterpret_cast<const CustomFormatArchive_Condition*>(
               &_CustomFormatArchive_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CustomFormatArchive_Condition& a, CustomFormatArchive_Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomFormatArchive_Condition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomFormatArchive_Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomFormatArchive_Condition* New() const final {
    return CreateMaybeMessage<CustomFormatArchive_Condition>(nullptr);
  }

  CustomFormatArchive_Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomFormatArchive_Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomFormatArchive_Condition& from);
  void MergeFrom(const CustomFormatArchive_Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomFormatArchive_Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CustomFormatArchive.Condition";
  }
  protected:
  explicit CustomFormatArchive_Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFormatFieldNumber = 3,
    kConditionTypeFieldNumber = 1,
    kConditionValueFieldNumber = 2,
    kConditionValueDblFieldNumber = 4,
  };
  // required .TSK.FormatStructArchive condition_format = 3;
  bool has_condition_format() const;
  private:
  bool _internal_has_condition_format() const;
  public:
  void clear_condition_format();
  const ::TSK::FormatStructArchive& condition_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_condition_format();
  ::TSK::FormatStructArchive* mutable_condition_format();
  void set_allocated_condition_format(::TSK::FormatStructArchive* condition_format);
  private:
  const ::TSK::FormatStructArchive& _internal_condition_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_condition_format();
  public:
  void unsafe_arena_set_allocated_condition_format(
      ::TSK::FormatStructArchive* condition_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_condition_format();

  // required uint32 condition_type = 1;
  bool has_condition_type() const;
  private:
  bool _internal_has_condition_type() const;
  public:
  void clear_condition_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_type() const;
  void set_condition_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_condition_type() const;
  void _internal_set_condition_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float condition_value = 2;
  bool has_condition_value() const;
  private:
  bool _internal_has_condition_value() const;
  public:
  void clear_condition_value();
  float condition_value() const;
  void set_condition_value(float value);
  private:
  float _internal_condition_value() const;
  void _internal_set_condition_value(float value);
  public:

  // optional double condition_value_dbl = 4;
  bool has_condition_value_dbl() const;
  private:
  bool _internal_has_condition_value_dbl() const;
  public:
  void clear_condition_value_dbl();
  double condition_value_dbl() const;
  void set_condition_value_dbl(double value);
  private:
  double _internal_condition_value_dbl() const;
  void _internal_set_condition_value_dbl(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CustomFormatArchive.Condition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::FormatStructArchive* condition_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 condition_type_;
  float condition_value_;
  double condition_value_dbl_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CustomFormatArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CustomFormatArchive) */ {
 public:
  inline CustomFormatArchive() : CustomFormatArchive(nullptr) {}
  ~CustomFormatArchive() override;
  explicit constexpr CustomFormatArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomFormatArchive(const CustomFormatArchive& from);
  CustomFormatArchive(CustomFormatArchive&& from) noexcept
    : CustomFormatArchive() {
    *this = ::std::move(from);
  }

  inline CustomFormatArchive& operator=(const CustomFormatArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomFormatArchive& operator=(CustomFormatArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomFormatArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomFormatArchive* internal_default_instance() {
    return reinterpret_cast<const CustomFormatArchive*>(
               &_CustomFormatArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CustomFormatArchive& a, CustomFormatArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomFormatArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomFormatArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomFormatArchive* New() const final {
    return CreateMaybeMessage<CustomFormatArchive>(nullptr);
  }

  CustomFormatArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomFormatArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomFormatArchive& from);
  void MergeFrom(const CustomFormatArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomFormatArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CustomFormatArchive";
  }
  protected:
  explicit CustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CustomFormatArchive_Condition Condition;

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDefaultFormatFieldNumber = 3,
    kFormatTypePreBncFieldNumber = 2,
    kFormatTypeFieldNumber = 5,
  };
  // repeated .TSK.CustomFormatArchive.Condition conditions = 4;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::TSK::CustomFormatArchive_Condition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive_Condition >*
      mutable_conditions();
  private:
  const ::TSK::CustomFormatArchive_Condition& _internal_conditions(int index) const;
  ::TSK::CustomFormatArchive_Condition* _internal_add_conditions();
  public:
  const ::TSK::CustomFormatArchive_Condition& conditions(int index) const;
  ::TSK::CustomFormatArchive_Condition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive_Condition >&
      conditions() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .TSK.FormatStructArchive default_format = 3;
  bool has_default_format() const;
  private:
  bool _internal_has_default_format() const;
  public:
  void clear_default_format();
  const ::TSK::FormatStructArchive& default_format() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::FormatStructArchive* release_default_format();
  ::TSK::FormatStructArchive* mutable_default_format();
  void set_allocated_default_format(::TSK::FormatStructArchive* default_format);
  private:
  const ::TSK::FormatStructArchive& _internal_default_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_default_format();
  public:
  void unsafe_arena_set_allocated_default_format(
      ::TSK::FormatStructArchive* default_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_default_format();

  // required uint32 format_type_pre_bnc = 2;
  bool has_format_type_pre_bnc() const;
  private:
  bool _internal_has_format_type_pre_bnc() const;
  public:
  void clear_format_type_pre_bnc();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type_pre_bnc() const;
  void set_format_type_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_type_pre_bnc() const;
  void _internal_set_format_type_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 format_type = 5;
  bool has_format_type() const;
  private:
  bool _internal_has_format_type() const;
  public:
  void clear_format_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type() const;
  void set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format_type() const;
  void _internal_set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CustomFormatArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive_Condition > conditions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSK::FormatStructArchive* default_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type_pre_bnc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_type_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CustomFormatListArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CustomFormatListArchive) */ {
 public:
  inline CustomFormatListArchive() : CustomFormatListArchive(nullptr) {}
  ~CustomFormatListArchive() override;
  explicit constexpr CustomFormatListArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomFormatListArchive(const CustomFormatListArchive& from);
  CustomFormatListArchive(CustomFormatListArchive&& from) noexcept
    : CustomFormatListArchive() {
    *this = ::std::move(from);
  }

  inline CustomFormatListArchive& operator=(const CustomFormatListArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomFormatListArchive& operator=(CustomFormatListArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CustomFormatListArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomFormatListArchive* internal_default_instance() {
    return reinterpret_cast<const CustomFormatListArchive*>(
               &_CustomFormatListArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CustomFormatListArchive& a, CustomFormatListArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomFormatListArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomFormatListArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomFormatListArchive* New() const final {
    return CreateMaybeMessage<CustomFormatListArchive>(nullptr);
  }

  CustomFormatListArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomFormatListArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomFormatListArchive& from);
  void MergeFrom(const CustomFormatListArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomFormatListArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CustomFormatListArchive";
  }
  protected:
  explicit CustomFormatListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
    kCustomFormatsFieldNumber = 2,
  };
  // repeated .TSP.UUID uuids = 1;
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  ::TSP::UUID* mutable_uuids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_uuids();
  private:
  const ::TSP::UUID& _internal_uuids(int index) const;
  ::TSP::UUID* _internal_add_uuids();
  public:
  const ::TSP::UUID& uuids(int index) const;
  ::TSP::UUID* add_uuids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      uuids() const;

  // repeated .TSK.CustomFormatArchive custom_formats = 2;
  int custom_formats_size() const;
  private:
  int _internal_custom_formats_size() const;
  public:
  void clear_custom_formats();
  ::TSK::CustomFormatArchive* mutable_custom_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive >*
      mutable_custom_formats();
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_formats(int index) const;
  ::TSK::CustomFormatArchive* _internal_add_custom_formats();
  public:
  const ::TSK::CustomFormatArchive& custom_formats(int index) const;
  ::TSK::CustomFormatArchive* add_custom_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive >&
      custom_formats() const;

  // @@protoc_insertion_point(class_scope:TSK.CustomFormatListArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > uuids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive > custom_formats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class AnnotationAuthorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.AnnotationAuthorArchive) */ {
 public:
  inline AnnotationAuthorArchive() : AnnotationAuthorArchive(nullptr) {}
  ~AnnotationAuthorArchive() override;
  explicit constexpr AnnotationAuthorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotationAuthorArchive(const AnnotationAuthorArchive& from);
  AnnotationAuthorArchive(AnnotationAuthorArchive&& from) noexcept
    : AnnotationAuthorArchive() {
    *this = ::std::move(from);
  }

  inline AnnotationAuthorArchive& operator=(const AnnotationAuthorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationAuthorArchive& operator=(AnnotationAuthorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotationAuthorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotationAuthorArchive* internal_default_instance() {
    return reinterpret_cast<const AnnotationAuthorArchive*>(
               &_AnnotationAuthorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AnnotationAuthorArchive& a, AnnotationAuthorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationAuthorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotationAuthorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotationAuthorArchive* New() const final {
    return CreateMaybeMessage<AnnotationAuthorArchive>(nullptr);
  }

  AnnotationAuthorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationAuthorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotationAuthorArchive& from);
  void MergeFrom(const AnnotationAuthorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationAuthorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.AnnotationAuthorArchive";
  }
  protected:
  explicit AnnotationAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPublicIdFieldNumber = 3,
    kColorFieldNumber = 2,
    kIsPublicAuthorFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string public_id = 3;
  bool has_public_id() const;
  private:
  bool _internal_has_public_id() const;
  public:
  void clear_public_id();
  const std::string& public_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // optional .TSP.Color color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::TSP::Color& color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_color();
  ::TSP::Color* mutable_color();
  void set_allocated_color(::TSP::Color* color);
  private:
  const ::TSP::Color& _internal_color() const;
  ::TSP::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::TSP::Color* color);
  ::TSP::Color* unsafe_arena_release_color();

  // optional bool is_public_author = 4;
  bool has_is_public_author() const;
  private:
  bool _internal_has_is_public_author() const;
  public:
  void clear_is_public_author();
  bool is_public_author() const;
  void set_is_public_author(bool value);
  private:
  bool _internal_is_public_author() const;
  void _internal_set_is_public_author(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.AnnotationAuthorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  ::TSP::Color* color_;
  bool is_public_author_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedChangeAuthorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DeprecatedChangeAuthorArchive) */ {
 public:
  inline DeprecatedChangeAuthorArchive() : DeprecatedChangeAuthorArchive(nullptr) {}
  ~DeprecatedChangeAuthorArchive() override;
  explicit constexpr DeprecatedChangeAuthorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeprecatedChangeAuthorArchive(const DeprecatedChangeAuthorArchive& from);
  DeprecatedChangeAuthorArchive(DeprecatedChangeAuthorArchive&& from) noexcept
    : DeprecatedChangeAuthorArchive() {
    *this = ::std::move(from);
  }

  inline DeprecatedChangeAuthorArchive& operator=(const DeprecatedChangeAuthorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedChangeAuthorArchive& operator=(DeprecatedChangeAuthorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeprecatedChangeAuthorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeprecatedChangeAuthorArchive* internal_default_instance() {
    return reinterpret_cast<const DeprecatedChangeAuthorArchive*>(
               &_DeprecatedChangeAuthorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeprecatedChangeAuthorArchive& a, DeprecatedChangeAuthorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedChangeAuthorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeprecatedChangeAuthorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeprecatedChangeAuthorArchive* New() const final {
    return CreateMaybeMessage<DeprecatedChangeAuthorArchive>(nullptr);
  }

  DeprecatedChangeAuthorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeprecatedChangeAuthorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeprecatedChangeAuthorArchive& from);
  void MergeFrom(const DeprecatedChangeAuthorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeprecatedChangeAuthorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DeprecatedChangeAuthorArchive";
  }
  protected:
  explicit DeprecatedChangeAuthorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChangeColorFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .TSP.Color change_color = 2;
  bool has_change_color() const;
  private:
  bool _internal_has_change_color() const;
  public:
  void clear_change_color();
  const ::TSP::Color& change_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_change_color();
  ::TSP::Color* mutable_change_color();
  void set_allocated_change_color(::TSP::Color* change_color);
  private:
  const ::TSP::Color& _internal_change_color() const;
  ::TSP::Color* _internal_mutable_change_color();
  public:
  void unsafe_arena_set_allocated_change_color(
      ::TSP::Color* change_color);
  ::TSP::Color* unsafe_arena_release_change_color();

  // @@protoc_insertion_point(class_scope:TSK.DeprecatedChangeAuthorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TSP::Color* change_color_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class AnnotationAuthorStorageArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.AnnotationAuthorStorageArchive) */ {
 public:
  inline AnnotationAuthorStorageArchive() : AnnotationAuthorStorageArchive(nullptr) {}
  ~AnnotationAuthorStorageArchive() override;
  explicit constexpr AnnotationAuthorStorageArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnotationAuthorStorageArchive(const AnnotationAuthorStorageArchive& from);
  AnnotationAuthorStorageArchive(AnnotationAuthorStorageArchive&& from) noexcept
    : AnnotationAuthorStorageArchive() {
    *this = ::std::move(from);
  }

  inline AnnotationAuthorStorageArchive& operator=(const AnnotationAuthorStorageArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnotationAuthorStorageArchive& operator=(AnnotationAuthorStorageArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnotationAuthorStorageArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnotationAuthorStorageArchive* internal_default_instance() {
    return reinterpret_cast<const AnnotationAuthorStorageArchive*>(
               &_AnnotationAuthorStorageArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AnnotationAuthorStorageArchive& a, AnnotationAuthorStorageArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnotationAuthorStorageArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnotationAuthorStorageArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnnotationAuthorStorageArchive* New() const final {
    return CreateMaybeMessage<AnnotationAuthorStorageArchive>(nullptr);
  }

  AnnotationAuthorStorageArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnnotationAuthorStorageArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnnotationAuthorStorageArchive& from);
  void MergeFrom(const AnnotationAuthorStorageArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnotationAuthorStorageArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.AnnotationAuthorStorageArchive";
  }
  protected:
  explicit AnnotationAuthorStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationAuthorFieldNumber = 1,
  };
  // repeated .TSP.Reference annotation_author = 1;
  int annotation_author_size() const;
  private:
  int _internal_annotation_author_size() const;
  public:
  void clear_annotation_author();
  ::TSP::Reference* mutable_annotation_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_annotation_author();
  private:
  const ::TSP::Reference& _internal_annotation_author(int index) const;
  ::TSP::Reference* _internal_add_annotation_author();
  public:
  const ::TSP::Reference& annotation_author(int index) const;
  ::TSP::Reference* add_annotation_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      annotation_author() const;

  // @@protoc_insertion_point(class_scope:TSK.AnnotationAuthorStorageArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > annotation_author_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class SetAnnotationAuthorColorCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.SetAnnotationAuthorColorCommandArchive) */ {
 public:
  inline SetAnnotationAuthorColorCommandArchive() : SetAnnotationAuthorColorCommandArchive(nullptr) {}
  ~SetAnnotationAuthorColorCommandArchive() override;
  explicit constexpr SetAnnotationAuthorColorCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetAnnotationAuthorColorCommandArchive(const SetAnnotationAuthorColorCommandArchive& from);
  SetAnnotationAuthorColorCommandArchive(SetAnnotationAuthorColorCommandArchive&& from) noexcept
    : SetAnnotationAuthorColorCommandArchive() {
    *this = ::std::move(from);
  }

  inline SetAnnotationAuthorColorCommandArchive& operator=(const SetAnnotationAuthorColorCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnnotationAuthorColorCommandArchive& operator=(SetAnnotationAuthorColorCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnnotationAuthorColorCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnnotationAuthorColorCommandArchive* internal_default_instance() {
    return reinterpret_cast<const SetAnnotationAuthorColorCommandArchive*>(
               &_SetAnnotationAuthorColorCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetAnnotationAuthorColorCommandArchive& a, SetAnnotationAuthorColorCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAnnotationAuthorColorCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnnotationAuthorColorCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAnnotationAuthorColorCommandArchive* New() const final {
    return CreateMaybeMessage<SetAnnotationAuthorColorCommandArchive>(nullptr);
  }

  SetAnnotationAuthorColorCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAnnotationAuthorColorCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAnnotationAuthorColorCommandArchive& from);
  void MergeFrom(const SetAnnotationAuthorColorCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAnnotationAuthorColorCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.SetAnnotationAuthorColorCommandArchive";
  }
  protected:
  explicit SetAnnotationAuthorColorCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kAnnotationAuthorFieldNumber = 2,
    kColorFieldNumber = 3,
    kOldColorFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference annotation_author = 2;
  bool has_annotation_author() const;
  private:
  bool _internal_has_annotation_author() const;
  public:
  void clear_annotation_author();
  const ::TSP::Reference& annotation_author() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_annotation_author();
  ::TSP::Reference* mutable_annotation_author();
  void set_allocated_annotation_author(::TSP::Reference* annotation_author);
  private:
  const ::TSP::Reference& _internal_annotation_author() const;
  ::TSP::Reference* _internal_mutable_annotation_author();
  public:
  void unsafe_arena_set_allocated_annotation_author(
      ::TSP::Reference* annotation_author);
  ::TSP::Reference* unsafe_arena_release_annotation_author();

  // optional .TSP.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::TSP::Color& color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_color();
  ::TSP::Color* mutable_color();
  void set_allocated_color(::TSP::Color* color);
  private:
  const ::TSP::Color& _internal_color() const;
  ::TSP::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::TSP::Color* color);
  ::TSP::Color* unsafe_arena_release_color();

  // optional .TSP.Color old_color = 4;
  bool has_old_color() const;
  private:
  bool _internal_has_old_color() const;
  public:
  void clear_old_color();
  const ::TSP::Color& old_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_old_color();
  ::TSP::Color* mutable_old_color();
  void set_allocated_old_color(::TSP::Color* old_color);
  private:
  const ::TSP::Color& _internal_old_color() const;
  ::TSP::Color* _internal_mutable_old_color();
  public:
  void unsafe_arena_set_allocated_old_color(
      ::TSP::Color* old_color);
  ::TSP::Color* unsafe_arena_release_old_color();

  // @@protoc_insertion_point(class_scope:TSK.SetAnnotationAuthorColorCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  ::TSP::Reference* annotation_author_;
  ::TSP::Color* color_;
  ::TSP::Color* old_color_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandSelectionBehaviorArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CommandSelectionBehaviorArchive) */ {
 public:
  inline CommandSelectionBehaviorArchive() : CommandSelectionBehaviorArchive(nullptr) {}
  ~CommandSelectionBehaviorArchive() override;
  explicit constexpr CommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandSelectionBehaviorArchive(const CommandSelectionBehaviorArchive& from);
  CommandSelectionBehaviorArchive(CommandSelectionBehaviorArchive&& from) noexcept
    : CommandSelectionBehaviorArchive() {
    *this = ::std::move(from);
  }

  inline CommandSelectionBehaviorArchive& operator=(const CommandSelectionBehaviorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandSelectionBehaviorArchive& operator=(CommandSelectionBehaviorArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandSelectionBehaviorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandSelectionBehaviorArchive* internal_default_instance() {
    return reinterpret_cast<const CommandSelectionBehaviorArchive*>(
               &_CommandSelectionBehaviorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CommandSelectionBehaviorArchive& a, CommandSelectionBehaviorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandSelectionBehaviorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandSelectionBehaviorArchive* New() const final {
    return CreateMaybeMessage<CommandSelectionBehaviorArchive>(nullptr);
  }

  CommandSelectionBehaviorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandSelectionBehaviorArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandSelectionBehaviorArchive& from);
  void MergeFrom(const CommandSelectionBehaviorArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandSelectionBehaviorArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CommandSelectionBehaviorArchive";
  }
  protected:
  explicit CommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalSelectionBehaviorsFieldNumber = 9,
    kArchivedOldSelectionFieldNumber = 1,
    kArchivedNewSelectionFieldNumber = 2,
    kForwardSelectionPathTransformerFieldNumber = 6,
    kReverseSelectionPathTransformerFieldNumber = 7,
    kArchivedSelectionFieldNumber = 8,
    kSelectionFlagsFieldNumber = 3,
    kAdditionalForwardSelectionFlagsFieldNumber = 4,
    kAdditionalReverseSelectionFlagsFieldNumber = 5,
  };
  // repeated .TSP.Reference additional_selection_behaviors = 9;
  int additional_selection_behaviors_size() const;
  private:
  int _internal_additional_selection_behaviors_size() const;
  public:
  void clear_additional_selection_behaviors();
  ::TSP::Reference* mutable_additional_selection_behaviors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_additional_selection_behaviors();
  private:
  const ::TSP::Reference& _internal_additional_selection_behaviors(int index) const;
  ::TSP::Reference* _internal_add_additional_selection_behaviors();
  public:
  const ::TSP::Reference& additional_selection_behaviors(int index) const;
  ::TSP::Reference* add_additional_selection_behaviors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      additional_selection_behaviors() const;

  // optional .TSK.SelectionPathArchive archived_old_selection = 1;
  bool has_archived_old_selection() const;
  private:
  bool _internal_has_archived_old_selection() const;
  public:
  void clear_archived_old_selection();
  const ::TSK::SelectionPathArchive& archived_old_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_archived_old_selection();
  ::TSK::SelectionPathArchive* mutable_archived_old_selection();
  void set_allocated_archived_old_selection(::TSK::SelectionPathArchive* archived_old_selection);
  private:
  const ::TSK::SelectionPathArchive& _internal_archived_old_selection() const;
  ::TSK::SelectionPathArchive* _internal_mutable_archived_old_selection();
  public:
  void unsafe_arena_set_allocated_archived_old_selection(
      ::TSK::SelectionPathArchive* archived_old_selection);
  ::TSK::SelectionPathArchive* unsafe_arena_release_archived_old_selection();

  // optional .TSK.SelectionPathArchive archived_new_selection = 2;
  bool has_archived_new_selection() const;
  private:
  bool _internal_has_archived_new_selection() const;
  public:
  void clear_archived_new_selection();
  const ::TSK::SelectionPathArchive& archived_new_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_archived_new_selection();
  ::TSK::SelectionPathArchive* mutable_archived_new_selection();
  void set_allocated_archived_new_selection(::TSK::SelectionPathArchive* archived_new_selection);
  private:
  const ::TSK::SelectionPathArchive& _internal_archived_new_selection() const;
  ::TSK::SelectionPathArchive* _internal_mutable_archived_new_selection();
  public:
  void unsafe_arena_set_allocated_archived_new_selection(
      ::TSK::SelectionPathArchive* archived_new_selection);
  ::TSK::SelectionPathArchive* unsafe_arena_release_archived_new_selection();

  // optional .TSP.Reference forward_selection_path_transformer = 6;
  bool has_forward_selection_path_transformer() const;
  private:
  bool _internal_has_forward_selection_path_transformer() const;
  public:
  void clear_forward_selection_path_transformer();
  const ::TSP::Reference& forward_selection_path_transformer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_forward_selection_path_transformer();
  ::TSP::Reference* mutable_forward_selection_path_transformer();
  void set_allocated_forward_selection_path_transformer(::TSP::Reference* forward_selection_path_transformer);
  private:
  const ::TSP::Reference& _internal_forward_selection_path_transformer() const;
  ::TSP::Reference* _internal_mutable_forward_selection_path_transformer();
  public:
  void unsafe_arena_set_allocated_forward_selection_path_transformer(
      ::TSP::Reference* forward_selection_path_transformer);
  ::TSP::Reference* unsafe_arena_release_forward_selection_path_transformer();

  // optional .TSP.Reference reverse_selection_path_transformer = 7;
  bool has_reverse_selection_path_transformer() const;
  private:
  bool _internal_has_reverse_selection_path_transformer() const;
  public:
  void clear_reverse_selection_path_transformer();
  const ::TSP::Reference& reverse_selection_path_transformer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_reverse_selection_path_transformer();
  ::TSP::Reference* mutable_reverse_selection_path_transformer();
  void set_allocated_reverse_selection_path_transformer(::TSP::Reference* reverse_selection_path_transformer);
  private:
  const ::TSP::Reference& _internal_reverse_selection_path_transformer() const;
  ::TSP::Reference* _internal_mutable_reverse_selection_path_transformer();
  public:
  void unsafe_arena_set_allocated_reverse_selection_path_transformer(
      ::TSP::Reference* reverse_selection_path_transformer);
  ::TSP::Reference* unsafe_arena_release_reverse_selection_path_transformer();

  // optional .TSK.SelectionPathArchive archived_selection = 8;
  bool has_archived_selection() const;
  private:
  bool _internal_has_archived_selection() const;
  public:
  void clear_archived_selection();
  const ::TSK::SelectionPathArchive& archived_selection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::SelectionPathArchive* release_archived_selection();
  ::TSK::SelectionPathArchive* mutable_archived_selection();
  void set_allocated_archived_selection(::TSK::SelectionPathArchive* archived_selection);
  private:
  const ::TSK::SelectionPathArchive& _internal_archived_selection() const;
  ::TSK::SelectionPathArchive* _internal_mutable_archived_selection();
  public:
  void unsafe_arena_set_allocated_archived_selection(
      ::TSK::SelectionPathArchive* archived_selection);
  ::TSK::SelectionPathArchive* unsafe_arena_release_archived_selection();

  // optional uint64 selection_flags = 3;
  bool has_selection_flags() const;
  private:
  bool _internal_has_selection_flags() const;
  public:
  void clear_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint64 selection_flags() const;
  void set_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_selection_flags() const;
  void _internal_set_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 additional_forward_selection_flags = 4;
  bool has_additional_forward_selection_flags() const;
  private:
  bool _internal_has_additional_forward_selection_flags() const;
  public:
  void clear_additional_forward_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint64 additional_forward_selection_flags() const;
  void set_additional_forward_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_additional_forward_selection_flags() const;
  void _internal_set_additional_forward_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 additional_reverse_selection_flags = 5;
  bool has_additional_reverse_selection_flags() const;
  private:
  bool _internal_has_additional_reverse_selection_flags() const;
  public:
  void clear_additional_reverse_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint64 additional_reverse_selection_flags() const;
  void set_additional_reverse_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_additional_reverse_selection_flags() const;
  void _internal_set_additional_reverse_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CommandSelectionBehaviorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > additional_selection_behaviors_;
  ::TSK::SelectionPathArchive* archived_old_selection_;
  ::TSK::SelectionPathArchive* archived_new_selection_;
  ::TSP::Reference* forward_selection_path_transformer_;
  ::TSP::Reference* reverse_selection_path_transformer_;
  ::TSK::SelectionPathArchive* archived_selection_;
  ::PROTOBUF_NAMESPACE_ID::uint64 selection_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 additional_forward_selection_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 additional_reverse_selection_flags_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class SelectionPathTransformerArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.SelectionPathTransformerArchive) */ {
 public:
  inline SelectionPathTransformerArchive() : SelectionPathTransformerArchive(nullptr) {}
  ~SelectionPathTransformerArchive() override;
  explicit constexpr SelectionPathTransformerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionPathTransformerArchive(const SelectionPathTransformerArchive& from);
  SelectionPathTransformerArchive(SelectionPathTransformerArchive&& from) noexcept
    : SelectionPathTransformerArchive() {
    *this = ::std::move(from);
  }

  inline SelectionPathTransformerArchive& operator=(const SelectionPathTransformerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionPathTransformerArchive& operator=(SelectionPathTransformerArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionPathTransformerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionPathTransformerArchive* internal_default_instance() {
    return reinterpret_cast<const SelectionPathTransformerArchive*>(
               &_SelectionPathTransformerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SelectionPathTransformerArchive& a, SelectionPathTransformerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionPathTransformerArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionPathTransformerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectionPathTransformerArchive* New() const final {
    return CreateMaybeMessage<SelectionPathTransformerArchive>(nullptr);
  }

  SelectionPathTransformerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectionPathTransformerArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectionPathTransformerArchive& from);
  void MergeFrom(const SelectionPathTransformerArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionPathTransformerArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.SelectionPathTransformerArchive";
  }
  protected:
  explicit SelectionPathTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionTransformersFieldNumber = 1,
  };
  // repeated .TSP.Reference selection_transformers = 1;
  int selection_transformers_size() const;
  private:
  int _internal_selection_transformers_size() const;
  public:
  void clear_selection_transformers();
  ::TSP::Reference* mutable_selection_transformers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_selection_transformers();
  private:
  const ::TSP::Reference& _internal_selection_transformers(int index) const;
  ::TSP::Reference* _internal_add_selection_transformers();
  public:
  const ::TSP::Reference& selection_transformers(int index) const;
  ::TSP::Reference* add_selection_transformers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      selection_transformers() const;

  // @@protoc_insertion_point(class_scope:TSK.SelectionPathTransformerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > selection_transformers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class SelectionPathArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.SelectionPathArchive) */ {
 public:
  inline SelectionPathArchive() : SelectionPathArchive(nullptr) {}
  ~SelectionPathArchive() override;
  explicit constexpr SelectionPathArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectionPathArchive(const SelectionPathArchive& from);
  SelectionPathArchive(SelectionPathArchive&& from) noexcept
    : SelectionPathArchive() {
    *this = ::std::move(from);
  }

  inline SelectionPathArchive& operator=(const SelectionPathArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectionPathArchive& operator=(SelectionPathArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectionPathArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectionPathArchive* internal_default_instance() {
    return reinterpret_cast<const SelectionPathArchive*>(
               &_SelectionPathArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SelectionPathArchive& a, SelectionPathArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectionPathArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectionPathArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectionPathArchive* New() const final {
    return CreateMaybeMessage<SelectionPathArchive>(nullptr);
  }

  SelectionPathArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectionPathArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectionPathArchive& from);
  void MergeFrom(const SelectionPathArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectionPathArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.SelectionPathArchive";
  }
  protected:
  explicit SelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderedSelectionsFieldNumber = 1,
  };
  // repeated .TSP.Reference ordered_selections = 1;
  int ordered_selections_size() const;
  private:
  int _internal_ordered_selections_size() const;
  public:
  void clear_ordered_selections();
  ::TSP::Reference* mutable_ordered_selections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_ordered_selections();
  private:
  const ::TSP::Reference& _internal_ordered_selections(int index) const;
  ::TSP::Reference* _internal_add_ordered_selections();
  public:
  const ::TSP::Reference& ordered_selections(int index) const;
  ::TSP::Reference* add_ordered_selections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      ordered_selections() const;

  // @@protoc_insertion_point(class_scope:TSK.SelectionPathArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > ordered_selections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DocumentSelectionArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DocumentSelectionArchive) */ {
 public:
  inline DocumentSelectionArchive() : DocumentSelectionArchive(nullptr) {}
  ~DocumentSelectionArchive() override;
  explicit constexpr DocumentSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentSelectionArchive(const DocumentSelectionArchive& from);
  DocumentSelectionArchive(DocumentSelectionArchive&& from) noexcept
    : DocumentSelectionArchive() {
    *this = ::std::move(from);
  }

  inline DocumentSelectionArchive& operator=(const DocumentSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentSelectionArchive& operator=(DocumentSelectionArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentSelectionArchive*>(
               &_DocumentSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DocumentSelectionArchive& a, DocumentSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentSelectionArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentSelectionArchive* New() const final {
    return CreateMaybeMessage<DocumentSelectionArchive>(nullptr);
  }

  DocumentSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentSelectionArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentSelectionArchive& from);
  void MergeFrom(const DocumentSelectionArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentSelectionArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DocumentSelectionArchive";
  }
  protected:
  explicit DocumentSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentRootFieldNumber = 1,
  };
  // optional .TSP.Reference document_root = 1;
  bool has_document_root() const;
  private:
  bool _internal_has_document_root() const;
  public:
  void clear_document_root();
  const ::TSP::Reference& document_root() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_document_root();
  ::TSP::Reference* mutable_document_root();
  void set_allocated_document_root(::TSP::Reference* document_root);
  private:
  const ::TSP::Reference& _internal_document_root() const;
  ::TSP::Reference* _internal_mutable_document_root();
  public:
  void unsafe_arena_set_allocated_document_root(
      ::TSP::Reference* document_root);
  ::TSP::Reference* unsafe_arena_release_document_root();

  // @@protoc_insertion_point(class_scope:TSK.DocumentSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Reference* document_root_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class IdOperationArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.IdOperationArgs) */ {
 public:
  inline IdOperationArgs() : IdOperationArgs(nullptr) {}
  ~IdOperationArgs() override;
  explicit constexpr IdOperationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdOperationArgs(const IdOperationArgs& from);
  IdOperationArgs(IdOperationArgs&& from) noexcept
    : IdOperationArgs() {
    *this = ::std::move(from);
  }

  inline IdOperationArgs& operator=(const IdOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdOperationArgs& operator=(IdOperationArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdOperationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdOperationArgs* internal_default_instance() {
    return reinterpret_cast<const IdOperationArgs*>(
               &_IdOperationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(IdOperationArgs& a, IdOperationArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(IdOperationArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdOperationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdOperationArgs* New() const final {
    return CreateMaybeMessage<IdOperationArgs>(nullptr);
  }

  IdOperationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdOperationArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdOperationArgs& from);
  void MergeFrom(const IdOperationArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdOperationArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.IdOperationArgs";
  }
  protected:
  explicit IdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdPathFieldNumber = 1,
  };
  // required .TSP.UUIDPath id_path = 1;
  bool has_id_path() const;
  private:
  bool _internal_has_id_path() const;
  public:
  void clear_id_path();
  const ::TSP::UUIDPath& id_path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUIDPath* release_id_path();
  ::TSP::UUIDPath* mutable_id_path();
  void set_allocated_id_path(::TSP::UUIDPath* id_path);
  private:
  const ::TSP::UUIDPath& _internal_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_id_path();
  public:
  void unsafe_arena_set_allocated_id_path(
      ::TSP::UUIDPath* id_path);
  ::TSP::UUIDPath* unsafe_arena_release_id_path();

  // @@protoc_insertion_point(class_scope:TSK.IdOperationArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUIDPath* id_path_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class AddIdOperationArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.AddIdOperationArgs) */ {
 public:
  inline AddIdOperationArgs() : AddIdOperationArgs(nullptr) {}
  ~AddIdOperationArgs() override;
  explicit constexpr AddIdOperationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddIdOperationArgs(const AddIdOperationArgs& from);
  AddIdOperationArgs(AddIdOperationArgs&& from) noexcept
    : AddIdOperationArgs() {
    *this = ::std::move(from);
  }

  inline AddIdOperationArgs& operator=(const AddIdOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddIdOperationArgs& operator=(AddIdOperationArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddIdOperationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddIdOperationArgs* internal_default_instance() {
    return reinterpret_cast<const AddIdOperationArgs*>(
               &_AddIdOperationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(AddIdOperationArgs& a, AddIdOperationArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(AddIdOperationArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddIdOperationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddIdOperationArgs* New() const final {
    return CreateMaybeMessage<AddIdOperationArgs>(nullptr);
  }

  AddIdOperationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddIdOperationArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddIdOperationArgs& from);
  void MergeFrom(const AddIdOperationArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddIdOperationArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.AddIdOperationArgs";
  }
  protected:
  explicit AddIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required .TSK.IdOperationArgs super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::IdOperationArgs& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::IdOperationArgs* release_super();
  ::TSK::IdOperationArgs* mutable_super();
  void set_allocated_super(::TSK::IdOperationArgs* super);
  private:
  const ::TSK::IdOperationArgs& _internal_super() const;
  ::TSK::IdOperationArgs* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::IdOperationArgs* super);
  ::TSK::IdOperationArgs* unsafe_arena_release_super();

  // required int32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.AddIdOperationArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::IdOperationArgs* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoveIdOperationArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.RemoveIdOperationArgs) */ {
 public:
  inline RemoveIdOperationArgs() : RemoveIdOperationArgs(nullptr) {}
  ~RemoveIdOperationArgs() override;
  explicit constexpr RemoveIdOperationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveIdOperationArgs(const RemoveIdOperationArgs& from);
  RemoveIdOperationArgs(RemoveIdOperationArgs&& from) noexcept
    : RemoveIdOperationArgs() {
    *this = ::std::move(from);
  }

  inline RemoveIdOperationArgs& operator=(const RemoveIdOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveIdOperationArgs& operator=(RemoveIdOperationArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveIdOperationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveIdOperationArgs* internal_default_instance() {
    return reinterpret_cast<const RemoveIdOperationArgs*>(
               &_RemoveIdOperationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RemoveIdOperationArgs& a, RemoveIdOperationArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveIdOperationArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveIdOperationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveIdOperationArgs* New() const final {
    return CreateMaybeMessage<RemoveIdOperationArgs>(nullptr);
  }

  RemoveIdOperationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveIdOperationArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveIdOperationArgs& from);
  void MergeFrom(const RemoveIdOperationArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveIdOperationArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.RemoveIdOperationArgs";
  }
  protected:
  explicit RemoveIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required .TSK.IdOperationArgs super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::IdOperationArgs& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::IdOperationArgs* release_super();
  ::TSK::IdOperationArgs* mutable_super();
  void set_allocated_super(::TSK::IdOperationArgs* super);
  private:
  const ::TSK::IdOperationArgs& _internal_super() const;
  ::TSK::IdOperationArgs* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::IdOperationArgs* super);
  ::TSK::IdOperationArgs* unsafe_arena_release_super();

  // required int32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.RemoveIdOperationArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::IdOperationArgs* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class RearrangeIdOperationArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.RearrangeIdOperationArgs) */ {
 public:
  inline RearrangeIdOperationArgs() : RearrangeIdOperationArgs(nullptr) {}
  ~RearrangeIdOperationArgs() override;
  explicit constexpr RearrangeIdOperationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RearrangeIdOperationArgs(const RearrangeIdOperationArgs& from);
  RearrangeIdOperationArgs(RearrangeIdOperationArgs&& from) noexcept
    : RearrangeIdOperationArgs() {
    *this = ::std::move(from);
  }

  inline RearrangeIdOperationArgs& operator=(const RearrangeIdOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RearrangeIdOperationArgs& operator=(RearrangeIdOperationArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RearrangeIdOperationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RearrangeIdOperationArgs* internal_default_instance() {
    return reinterpret_cast<const RearrangeIdOperationArgs*>(
               &_RearrangeIdOperationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(RearrangeIdOperationArgs& a, RearrangeIdOperationArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RearrangeIdOperationArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RearrangeIdOperationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RearrangeIdOperationArgs* New() const final {
    return CreateMaybeMessage<RearrangeIdOperationArgs>(nullptr);
  }

  RearrangeIdOperationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RearrangeIdOperationArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RearrangeIdOperationArgs& from);
  void MergeFrom(const RearrangeIdOperationArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearrangeIdOperationArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.RearrangeIdOperationArgs";
  }
  protected:
  explicit RearrangeIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFromIndexFieldNumber = 2,
    kToIndexFieldNumber = 3,
  };
  // required .TSK.IdOperationArgs super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::IdOperationArgs& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::IdOperationArgs* release_super();
  ::TSK::IdOperationArgs* mutable_super();
  void set_allocated_super(::TSK::IdOperationArgs* super);
  private:
  const ::TSK::IdOperationArgs& _internal_super() const;
  ::TSK::IdOperationArgs* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::IdOperationArgs* super);
  ::TSK::IdOperationArgs* unsafe_arena_release_super();

  // required int32 from_index = 2;
  bool has_from_index() const;
  private:
  bool _internal_has_from_index() const;
  public:
  void clear_from_index();
  ::PROTOBUF_NAMESPACE_ID::int32 from_index() const;
  void set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_index() const;
  void _internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 to_index = 3;
  bool has_to_index() const;
  private:
  bool _internal_has_to_index() const;
  public:
  void clear_to_index();
  ::PROTOBUF_NAMESPACE_ID::int32 to_index() const;
  void set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_index() const;
  void _internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.RearrangeIdOperationArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::IdOperationArgs* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_index_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class IdPlacementOperationArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.IdPlacementOperationArgs) */ {
 public:
  inline IdPlacementOperationArgs() : IdPlacementOperationArgs(nullptr) {}
  ~IdPlacementOperationArgs() override;
  explicit constexpr IdPlacementOperationArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdPlacementOperationArgs(const IdPlacementOperationArgs& from);
  IdPlacementOperationArgs(IdPlacementOperationArgs&& from) noexcept
    : IdPlacementOperationArgs() {
    *this = ::std::move(from);
  }

  inline IdPlacementOperationArgs& operator=(const IdPlacementOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdPlacementOperationArgs& operator=(IdPlacementOperationArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdPlacementOperationArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdPlacementOperationArgs* internal_default_instance() {
    return reinterpret_cast<const IdPlacementOperationArgs*>(
               &_IdPlacementOperationArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(IdPlacementOperationArgs& a, IdPlacementOperationArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(IdPlacementOperationArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdPlacementOperationArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdPlacementOperationArgs* New() const final {
    return CreateMaybeMessage<IdPlacementOperationArgs>(nullptr);
  }

  IdPlacementOperationArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdPlacementOperationArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdPlacementOperationArgs& from);
  void MergeFrom(const IdPlacementOperationArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdPlacementOperationArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.IdPlacementOperationArgs";
  }
  protected:
  explicit IdPlacementOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kFromIndexFieldNumber = 2,
    kToIndexFieldNumber = 3,
  };
  // required .TSK.IdOperationArgs super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::IdOperationArgs& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::IdOperationArgs* release_super();
  ::TSK::IdOperationArgs* mutable_super();
  void set_allocated_super(::TSK::IdOperationArgs* super);
  private:
  const ::TSK::IdOperationArgs& _internal_super() const;
  ::TSK::IdOperationArgs* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::IdOperationArgs* super);
  ::TSK::IdOperationArgs* unsafe_arena_release_super();

  // required int32 from_index = 2;
  bool has_from_index() const;
  private:
  bool _internal_has_from_index() const;
  public:
  void clear_from_index();
  ::PROTOBUF_NAMESPACE_ID::int32 from_index() const;
  void set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_index() const;
  void _internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 to_index = 3;
  bool has_to_index() const;
  private:
  bool _internal_has_to_index() const;
  public:
  void clear_to_index();
  ::PROTOBUF_NAMESPACE_ID::int32 to_index() const;
  void set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_index() const;
  void _internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.IdPlacementOperationArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::IdOperationArgs* super_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_index_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class NullCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.NullCommandArchive) */ {
 public:
  inline NullCommandArchive() : NullCommandArchive(nullptr) {}
  ~NullCommandArchive() override;
  explicit constexpr NullCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullCommandArchive(const NullCommandArchive& from);
  NullCommandArchive(NullCommandArchive&& from) noexcept
    : NullCommandArchive() {
    *this = ::std::move(from);
  }

  inline NullCommandArchive& operator=(const NullCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullCommandArchive& operator=(NullCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullCommandArchive* internal_default_instance() {
    return reinterpret_cast<const NullCommandArchive*>(
               &_NullCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(NullCommandArchive& a, NullCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NullCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullCommandArchive* New() const final {
    return CreateMaybeMessage<NullCommandArchive>(nullptr);
  }

  NullCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NullCommandArchive& from);
  void MergeFrom(const NullCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.NullCommandArchive";
  }
  protected:
  explicit NullCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.NullCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class GroupCommitCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.GroupCommitCommandArchive) */ {
 public:
  inline GroupCommitCommandArchive() : GroupCommitCommandArchive(nullptr) {}
  ~GroupCommitCommandArchive() override;
  explicit constexpr GroupCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCommitCommandArchive(const GroupCommitCommandArchive& from);
  GroupCommitCommandArchive(GroupCommitCommandArchive&& from) noexcept
    : GroupCommitCommandArchive() {
    *this = ::std::move(from);
  }

  inline GroupCommitCommandArchive& operator=(const GroupCommitCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCommitCommandArchive& operator=(GroupCommitCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCommitCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCommitCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GroupCommitCommandArchive*>(
               &_GroupCommitCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GroupCommitCommandArchive& a, GroupCommitCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCommitCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCommitCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupCommitCommandArchive* New() const final {
    return CreateMaybeMessage<GroupCommitCommandArchive>(nullptr);
  }

  GroupCommitCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupCommitCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupCommitCommandArchive& from);
  void MergeFrom(const GroupCommitCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCommitCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.GroupCommitCommandArchive";
  }
  protected:
  explicit GroupCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.GroupCommitCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class UpgradeDocPostProcessingCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.UpgradeDocPostProcessingCommandArchive) */ {
 public:
  inline UpgradeDocPostProcessingCommandArchive() : UpgradeDocPostProcessingCommandArchive(nullptr) {}
  ~UpgradeDocPostProcessingCommandArchive() override;
  explicit constexpr UpgradeDocPostProcessingCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpgradeDocPostProcessingCommandArchive(const UpgradeDocPostProcessingCommandArchive& from);
  UpgradeDocPostProcessingCommandArchive(UpgradeDocPostProcessingCommandArchive&& from) noexcept
    : UpgradeDocPostProcessingCommandArchive() {
    *this = ::std::move(from);
  }

  inline UpgradeDocPostProcessingCommandArchive& operator=(const UpgradeDocPostProcessingCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpgradeDocPostProcessingCommandArchive& operator=(UpgradeDocPostProcessingCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpgradeDocPostProcessingCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpgradeDocPostProcessingCommandArchive* internal_default_instance() {
    return reinterpret_cast<const UpgradeDocPostProcessingCommandArchive*>(
               &_UpgradeDocPostProcessingCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(UpgradeDocPostProcessingCommandArchive& a, UpgradeDocPostProcessingCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UpgradeDocPostProcessingCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpgradeDocPostProcessingCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpgradeDocPostProcessingCommandArchive* New() const final {
    return CreateMaybeMessage<UpgradeDocPostProcessingCommandArchive>(nullptr);
  }

  UpgradeDocPostProcessingCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpgradeDocPostProcessingCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpgradeDocPostProcessingCommandArchive& from);
  void MergeFrom(const UpgradeDocPostProcessingCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpgradeDocPostProcessingCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.UpgradeDocPostProcessingCommandArchive";
  }
  protected:
  explicit UpgradeDocPostProcessingCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.UpgradeDocPostProcessingCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class InducedCommandCollectionCommitCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.InducedCommandCollectionCommitCommandArchive) */ {
 public:
  inline InducedCommandCollectionCommitCommandArchive() : InducedCommandCollectionCommitCommandArchive(nullptr) {}
  ~InducedCommandCollectionCommitCommandArchive() override;
  explicit constexpr InducedCommandCollectionCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InducedCommandCollectionCommitCommandArchive(const InducedCommandCollectionCommitCommandArchive& from);
  InducedCommandCollectionCommitCommandArchive(InducedCommandCollectionCommitCommandArchive&& from) noexcept
    : InducedCommandCollectionCommitCommandArchive() {
    *this = ::std::move(from);
  }

  inline InducedCommandCollectionCommitCommandArchive& operator=(const InducedCommandCollectionCommitCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InducedCommandCollectionCommitCommandArchive& operator=(InducedCommandCollectionCommitCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InducedCommandCollectionCommitCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InducedCommandCollectionCommitCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InducedCommandCollectionCommitCommandArchive*>(
               &_InducedCommandCollectionCommitCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(InducedCommandCollectionCommitCommandArchive& a, InducedCommandCollectionCommitCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InducedCommandCollectionCommitCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InducedCommandCollectionCommitCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InducedCommandCollectionCommitCommandArchive* New() const final {
    return CreateMaybeMessage<InducedCommandCollectionCommitCommandArchive>(nullptr);
  }

  InducedCommandCollectionCommitCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InducedCommandCollectionCommitCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InducedCommandCollectionCommitCommandArchive& from);
  void MergeFrom(const InducedCommandCollectionCommitCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InducedCommandCollectionCommitCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.InducedCommandCollectionCommitCommandArchive";
  }
  protected:
  explicit InducedCommandCollectionCommitCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.InducedCommandCollectionCommitCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class ExecuteTestBetweenRollbackAndReapplyCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive) */ {
 public:
  inline ExecuteTestBetweenRollbackAndReapplyCommandArchive() : ExecuteTestBetweenRollbackAndReapplyCommandArchive(nullptr) {}
  ~ExecuteTestBetweenRollbackAndReapplyCommandArchive() override;
  explicit constexpr ExecuteTestBetweenRollbackAndReapplyCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteTestBetweenRollbackAndReapplyCommandArchive(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from);
  ExecuteTestBetweenRollbackAndReapplyCommandArchive(ExecuteTestBetweenRollbackAndReapplyCommandArchive&& from) noexcept
    : ExecuteTestBetweenRollbackAndReapplyCommandArchive() {
    *this = ::std::move(from);
  }

  inline ExecuteTestBetweenRollbackAndReapplyCommandArchive& operator=(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteTestBetweenRollbackAndReapplyCommandArchive& operator=(ExecuteTestBetweenRollbackAndReapplyCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteTestBetweenRollbackAndReapplyCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteTestBetweenRollbackAndReapplyCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ExecuteTestBetweenRollbackAndReapplyCommandArchive*>(
               &_ExecuteTestBetweenRollbackAndReapplyCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ExecuteTestBetweenRollbackAndReapplyCommandArchive& a, ExecuteTestBetweenRollbackAndReapplyCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteTestBetweenRollbackAndReapplyCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteTestBetweenRollbackAndReapplyCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteTestBetweenRollbackAndReapplyCommandArchive* New() const final {
    return CreateMaybeMessage<ExecuteTestBetweenRollbackAndReapplyCommandArchive>(nullptr);
  }

  ExecuteTestBetweenRollbackAndReapplyCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteTestBetweenRollbackAndReapplyCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from);
  void MergeFrom(const ExecuteTestBetweenRollbackAndReapplyCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteTestBetweenRollbackAndReapplyCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive";
  }
  protected:
  explicit ExecuteTestBetweenRollbackAndReapplyCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeDocumentPackageTypeCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.ChangeDocumentPackageTypeCommandArchive) */ {
 public:
  inline ChangeDocumentPackageTypeCommandArchive() : ChangeDocumentPackageTypeCommandArchive(nullptr) {}
  ~ChangeDocumentPackageTypeCommandArchive() override;
  explicit constexpr ChangeDocumentPackageTypeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeDocumentPackageTypeCommandArchive(const ChangeDocumentPackageTypeCommandArchive& from);
  ChangeDocumentPackageTypeCommandArchive(ChangeDocumentPackageTypeCommandArchive&& from) noexcept
    : ChangeDocumentPackageTypeCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeDocumentPackageTypeCommandArchive& operator=(const ChangeDocumentPackageTypeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeDocumentPackageTypeCommandArchive& operator=(ChangeDocumentPackageTypeCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeDocumentPackageTypeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeDocumentPackageTypeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeDocumentPackageTypeCommandArchive*>(
               &_ChangeDocumentPackageTypeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ChangeDocumentPackageTypeCommandArchive& a, ChangeDocumentPackageTypeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeDocumentPackageTypeCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeDocumentPackageTypeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeDocumentPackageTypeCommandArchive* New() const final {
    return CreateMaybeMessage<ChangeDocumentPackageTypeCommandArchive>(nullptr);
  }

  ChangeDocumentPackageTypeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeDocumentPackageTypeCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeDocumentPackageTypeCommandArchive& from);
  void MergeFrom(const ChangeDocumentPackageTypeCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeDocumentPackageTypeCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.ChangeDocumentPackageTypeCommandArchive";
  }
  protected:
  explicit ChangeDocumentPackageTypeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeDocumentPackageTypeCommandArchive_PackageType PackageType;
  static constexpr PackageType Default =
    ChangeDocumentPackageTypeCommandArchive_PackageType_Default;
  static constexpr PackageType Directory =
    ChangeDocumentPackageTypeCommandArchive_PackageType_Directory;
  static constexpr PackageType SingleFile =
    ChangeDocumentPackageTypeCommandArchive_PackageType_SingleFile;
  static inline bool PackageType_IsValid(int value) {
    return ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(value);
  }
  static constexpr PackageType PackageType_MIN =
    ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_MIN;
  static constexpr PackageType PackageType_MAX =
    ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_MAX;
  static constexpr int PackageType_ARRAYSIZE =
    ChangeDocumentPackageTypeCommandArchive_PackageType_PackageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PackageType_descriptor() {
    return ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor();
  }
  template<typename T>
  static inline const std::string& PackageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PackageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PackageType_Name.");
    return ChangeDocumentPackageTypeCommandArchive_PackageType_Name(enum_t_value);
  }
  static inline bool PackageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PackageType* value) {
    return ChangeDocumentPackageTypeCommandArchive_PackageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNewPackageTypeFieldNumber = 2,
    kOldPackageTypeFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
  bool has_new_package_type() const;
  private:
  bool _internal_has_new_package_type() const;
  public:
  void clear_new_package_type();
  ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType new_package_type() const;
  void set_new_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value);
  private:
  ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType _internal_new_package_type() const;
  void _internal_set_new_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value);
  public:

  // required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
  bool has_old_package_type() const;
  private:
  bool _internal_has_old_package_type() const;
  public:
  void clear_old_package_type();
  ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType old_package_type() const;
  void set_old_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value);
  private:
  ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType _internal_old_package_type() const;
  void _internal_set_old_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.ChangeDocumentPackageTypeCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  int new_package_type_;
  int old_package_type_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CreateLocalStorageSnapshotCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CreateLocalStorageSnapshotCommandArchive) */ {
 public:
  inline CreateLocalStorageSnapshotCommandArchive() : CreateLocalStorageSnapshotCommandArchive(nullptr) {}
  ~CreateLocalStorageSnapshotCommandArchive() override;
  explicit constexpr CreateLocalStorageSnapshotCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLocalStorageSnapshotCommandArchive(const CreateLocalStorageSnapshotCommandArchive& from);
  CreateLocalStorageSnapshotCommandArchive(CreateLocalStorageSnapshotCommandArchive&& from) noexcept
    : CreateLocalStorageSnapshotCommandArchive() {
    *this = ::std::move(from);
  }

  inline CreateLocalStorageSnapshotCommandArchive& operator=(const CreateLocalStorageSnapshotCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLocalStorageSnapshotCommandArchive& operator=(CreateLocalStorageSnapshotCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLocalStorageSnapshotCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLocalStorageSnapshotCommandArchive* internal_default_instance() {
    return reinterpret_cast<const CreateLocalStorageSnapshotCommandArchive*>(
               &_CreateLocalStorageSnapshotCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreateLocalStorageSnapshotCommandArchive& a, CreateLocalStorageSnapshotCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLocalStorageSnapshotCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLocalStorageSnapshotCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLocalStorageSnapshotCommandArchive* New() const final {
    return CreateMaybeMessage<CreateLocalStorageSnapshotCommandArchive>(nullptr);
  }

  CreateLocalStorageSnapshotCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLocalStorageSnapshotCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLocalStorageSnapshotCommandArchive& from);
  void MergeFrom(const CreateLocalStorageSnapshotCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLocalStorageSnapshotCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CreateLocalStorageSnapshotCommandArchive";
  }
  protected:
  explicit CreateLocalStorageSnapshotCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // optional string snapshot_id = 2;
  bool has_snapshot_id() const;
  private:
  bool _internal_has_snapshot_id() const;
  public:
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_id();
  std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.CreateLocalStorageSnapshotCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class BlockDiffsAtCurrentRevisionCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.BlockDiffsAtCurrentRevisionCommand) */ {
 public:
  inline BlockDiffsAtCurrentRevisionCommand() : BlockDiffsAtCurrentRevisionCommand(nullptr) {}
  ~BlockDiffsAtCurrentRevisionCommand() override;
  explicit constexpr BlockDiffsAtCurrentRevisionCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockDiffsAtCurrentRevisionCommand(const BlockDiffsAtCurrentRevisionCommand& from);
  BlockDiffsAtCurrentRevisionCommand(BlockDiffsAtCurrentRevisionCommand&& from) noexcept
    : BlockDiffsAtCurrentRevisionCommand() {
    *this = ::std::move(from);
  }

  inline BlockDiffsAtCurrentRevisionCommand& operator=(const BlockDiffsAtCurrentRevisionCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDiffsAtCurrentRevisionCommand& operator=(BlockDiffsAtCurrentRevisionCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockDiffsAtCurrentRevisionCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDiffsAtCurrentRevisionCommand* internal_default_instance() {
    return reinterpret_cast<const BlockDiffsAtCurrentRevisionCommand*>(
               &_BlockDiffsAtCurrentRevisionCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(BlockDiffsAtCurrentRevisionCommand& a, BlockDiffsAtCurrentRevisionCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDiffsAtCurrentRevisionCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDiffsAtCurrentRevisionCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockDiffsAtCurrentRevisionCommand* New() const final {
    return CreateMaybeMessage<BlockDiffsAtCurrentRevisionCommand>(nullptr);
  }

  BlockDiffsAtCurrentRevisionCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockDiffsAtCurrentRevisionCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockDiffsAtCurrentRevisionCommand& from);
  void MergeFrom(const BlockDiffsAtCurrentRevisionCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockDiffsAtCurrentRevisionCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.BlockDiffsAtCurrentRevisionCommand";
  }
  protected:
  explicit BlockDiffsAtCurrentRevisionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.BlockDiffsAtCurrentRevisionCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class RangeAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.RangeAddress) */ {
 public:
  inline RangeAddress() : RangeAddress(nullptr) {}
  ~RangeAddress() override;
  explicit constexpr RangeAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeAddress(const RangeAddress& from);
  RangeAddress(RangeAddress&& from) noexcept
    : RangeAddress() {
    *this = ::std::move(from);
  }

  inline RangeAddress& operator=(const RangeAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeAddress& operator=(RangeAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeAddress* internal_default_instance() {
    return reinterpret_cast<const RangeAddress*>(
               &_RangeAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(RangeAddress& a, RangeAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeAddress* New() const final {
    return CreateMaybeMessage<RangeAddress>(nullptr);
  }

  RangeAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeAddress& from);
  void MergeFrom(const RangeAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.RangeAddress";
  }
  protected:
  explicit RangeAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIdentifierFieldNumber = 1,
    kRangeListFieldNumber = 2,
  };
  // repeated uint64 address_identifier = 1;
  int address_identifier_size() const;
  private:
  int _internal_address_identifier_size() const;
  public:
  void clear_address_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_address_identifier() const;
  void _internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_address_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 address_identifier(int index) const;
  void set_address_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      address_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_address_identifier();

  // repeated uint32 range_list = 2;
  int range_list_size() const;
  private:
  int _internal_range_list_size() const;
  public:
  void clear_range_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_range_list() const;
  void _internal_add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_range_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 range_list(int index) const;
  void set_range_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      range_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_range_list();

  // @@protoc_insertion_point(class_scope:TSK.RangeAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > address_identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > range_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit constexpr Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operation_OperationType OperationType;
  static constexpr OperationType Add =
    Operation_OperationType_Add;
  static constexpr OperationType Remove =
    Operation_OperationType_Remove;
  static constexpr OperationType Placement =
    Operation_OperationType_Placement;
  static constexpr OperationType Rearrange =
    Operation_OperationType_Rearrange;
  static constexpr OperationType UpdateId =
    Operation_OperationType_UpdateId;
  static constexpr OperationType UpdateRange =
    Operation_OperationType_UpdateRange;
  static constexpr OperationType ReplaceRange =
    Operation_OperationType_ReplaceRange;
  static inline bool OperationType_IsValid(int value) {
    return Operation_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN =
    Operation_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX =
    Operation_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE =
    Operation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationType_descriptor() {
    return Operation_OperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationType_Name.");
    return Operation_OperationType_Name(enum_t_value);
  }
  static inline bool OperationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperationType* value) {
    return Operation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIdentifierFieldNumber = 3,
    kRangeListFieldNumber = 6,
    kNoopFieldNumber = 2,
    kPreserveLowerPriorityLocationFieldNumber = 5,
    kDominatingFieldNumber = 11,
    kPropertyIdFieldNumber = 8,
    kObjectCounterSpaceFieldNumber = 13,
    kObjectCountFieldNumber = 12,
    kInsertLengthFieldNumber = 4,
    kTypeFieldNumber = 1,
    kTransformBehaviorFieldNumber = 7,
    kFromIndexFieldNumber = 9,
    kToIndexFieldNumber = 10,
  };
  // repeated fixed64 address_identifier = 3 [packed = true];
  int address_identifier_size() const;
  private:
  int _internal_address_identifier_size() const;
  public:
  void clear_address_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_address_identifier() const;
  void _internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_address_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 address_identifier(int index) const;
  void set_address_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      address_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_address_identifier();

  // repeated uint32 range_list = 6 [packed = true];
  int range_list_size() const;
  private:
  int _internal_range_list_size() const;
  public:
  void clear_range_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_range_list() const;
  void _internal_add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_range_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 range_list(int index) const;
  void set_range_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      range_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_range_list();

  // optional bool noop = 2 [default = false];
  bool has_noop() const;
  private:
  bool _internal_has_noop() const;
  public:
  void clear_noop();
  bool noop() const;
  void set_noop(bool value);
  private:
  bool _internal_noop() const;
  void _internal_set_noop(bool value);
  public:

  // optional bool preserve_lower_priority_location = 5 [default = false];
  bool has_preserve_lower_priority_location() const;
  private:
  bool _internal_has_preserve_lower_priority_location() const;
  public:
  void clear_preserve_lower_priority_location();
  bool preserve_lower_priority_location() const;
  void set_preserve_lower_priority_location(bool value);
  private:
  bool _internal_preserve_lower_priority_location() const;
  void _internal_set_preserve_lower_priority_location(bool value);
  public:

  // optional bool dominating = 11 [default = false];
  bool has_dominating() const;
  private:
  bool _internal_has_dominating() const;
  public:
  void clear_dominating();
  bool dominating() const;
  void set_dominating(bool value);
  private:
  bool _internal_dominating() const;
  void _internal_set_dominating(bool value);
  public:

  // optional uint32 property_id = 8;
  bool has_property_id() const;
  private:
  bool _internal_has_property_id() const;
  public:
  void clear_property_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 property_id() const;
  void set_property_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_property_id() const;
  void _internal_set_property_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 object_counter_space = 13 [default = 0];
  bool has_object_counter_space() const;
  private:
  bool _internal_has_object_counter_space() const;
  public:
  void clear_object_counter_space();
  ::PROTOBUF_NAMESPACE_ID::int32 object_counter_space() const;
  void set_object_counter_space(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_counter_space() const;
  void _internal_set_object_counter_space(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 object_count = 12 [default = -1];
  bool has_object_count() const;
  private:
  bool _internal_has_object_count() const;
  public:
  void clear_object_count();
  ::PROTOBUF_NAMESPACE_ID::int32 object_count() const;
  void set_object_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_count() const;
  void _internal_set_object_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 insert_length = 4 [default = 1];
  bool has_insert_length() const;
  private:
  bool _internal_has_insert_length() const;
  public:
  void clear_insert_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 insert_length() const;
  void set_insert_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_insert_length() const;
  void _internal_set_insert_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSK::Operation_OperationType type() const;
  void set_type(::TSK::Operation_OperationType value);
  private:
  ::TSK::Operation_OperationType _internal_type() const;
  void _internal_set_type(::TSK::Operation_OperationType value);
  public:

  // optional uint32 transform_behavior = 7 [default = 7];
  bool has_transform_behavior() const;
  private:
  bool _internal_has_transform_behavior() const;
  public:
  void clear_transform_behavior();
  ::PROTOBUF_NAMESPACE_ID::uint32 transform_behavior() const;
  void set_transform_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transform_behavior() const;
  void _internal_set_transform_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 from_index = 9 [default = -1];
  bool has_from_index() const;
  private:
  bool _internal_has_from_index() const;
  public:
  void clear_from_index();
  ::PROTOBUF_NAMESPACE_ID::int32 from_index() const;
  void set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_index() const;
  void _internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 to_index = 10 [default = -1];
  bool has_to_index() const;
  private:
  bool _internal_has_to_index() const;
  public:
  void clear_to_index();
  ::PROTOBUF_NAMESPACE_ID::int32 to_index() const;
  void set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_index() const;
  void _internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > address_identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > range_list_;
  mutable std::atomic<int> _range_list_cached_byte_size_;
  bool noop_;
  bool preserve_lower_priority_location_;
  bool dominating_;
  ::PROTOBUF_NAMESPACE_ID::uint32 property_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_counter_space_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 insert_length_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transform_behavior_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_index_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OperationTransformer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OperationTransformer) */ {
 public:
  inline OperationTransformer() : OperationTransformer(nullptr) {}
  ~OperationTransformer() override;
  explicit constexpr OperationTransformer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationTransformer(const OperationTransformer& from);
  OperationTransformer(OperationTransformer&& from) noexcept
    : OperationTransformer() {
    *this = ::std::move(from);
  }

  inline OperationTransformer& operator=(const OperationTransformer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationTransformer& operator=(OperationTransformer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationTransformer& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationTransformer* internal_default_instance() {
    return reinterpret_cast<const OperationTransformer*>(
               &_OperationTransformer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(OperationTransformer& a, OperationTransformer& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationTransformer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationTransformer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationTransformer* New() const final {
    return CreateMaybeMessage<OperationTransformer>(nullptr);
  }

  OperationTransformer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationTransformer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationTransformer& from);
  void MergeFrom(const OperationTransformer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationTransformer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OperationTransformer";
  }
  protected:
  explicit OperationTransformer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 2,
    kHigherPriorityFieldNumber = 1,
  };
  // repeated .TSK.Operation operations = 2;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::TSK::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >*
      mutable_operations();
  private:
  const ::TSK::Operation& _internal_operations(int index) const;
  ::TSK::Operation* _internal_add_operations();
  public:
  const ::TSK::Operation& operations(int index) const;
  ::TSK::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >&
      operations() const;

  // required bool higher_priority = 1;
  bool has_higher_priority() const;
  private:
  bool _internal_has_higher_priority() const;
  public:
  void clear_higher_priority();
  bool higher_priority() const;
  void set_higher_priority(bool value);
  private:
  bool _internal_higher_priority() const;
  void _internal_set_higher_priority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.OperationTransformer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation > operations_;
  bool higher_priority_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class TransformerEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.TransformerEntry) */ {
 public:
  inline TransformerEntry() : TransformerEntry(nullptr) {}
  ~TransformerEntry() override;
  explicit constexpr TransformerEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformerEntry(const TransformerEntry& from);
  TransformerEntry(TransformerEntry&& from) noexcept
    : TransformerEntry() {
    *this = ::std::move(from);
  }

  inline TransformerEntry& operator=(const TransformerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformerEntry& operator=(TransformerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformerEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformerEntry* internal_default_instance() {
    return reinterpret_cast<const TransformerEntry*>(
               &_TransformerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TransformerEntry& a, TransformerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformerEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformerEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransformerEntry* New() const final {
    return CreateMaybeMessage<TransformerEntry>(nullptr);
  }

  TransformerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformerEntry& from);
  void MergeFrom(const TransformerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.TransformerEntry";
  }
  protected:
  explicit TransformerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerFieldNumber = 3,
    kSequenceFieldNumber = 1,
    kCreationTimeFieldNumber = 2,
  };
  // required .TSK.OperationTransformer transformer = 3;
  bool has_transformer() const;
  private:
  bool _internal_has_transformer() const;
  public:
  void clear_transformer();
  const ::TSK::OperationTransformer& transformer() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::OperationTransformer* release_transformer();
  ::TSK::OperationTransformer* mutable_transformer();
  void set_allocated_transformer(::TSK::OperationTransformer* transformer);
  private:
  const ::TSK::OperationTransformer& _internal_transformer() const;
  ::TSK::OperationTransformer* _internal_mutable_transformer();
  public:
  void unsafe_arena_set_allocated_transformer(
      ::TSK::OperationTransformer* transformer);
  ::TSK::OperationTransformer* unsafe_arena_release_transformer();

  // required uint64 sequence = 1;
  bool has_sequence() const;
  private:
  bool _internal_has_sequence() const;
  public:
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double creation_time = 2;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  double creation_time() const;
  void set_creation_time(double value);
  private:
  double _internal_creation_time() const;
  void _internal_set_creation_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.TransformerEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSK::OperationTransformer* transformer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  double creation_time_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OutgoingCommandQueueItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OutgoingCommandQueueItem) */ {
 public:
  inline OutgoingCommandQueueItem() : OutgoingCommandQueueItem(nullptr) {}
  ~OutgoingCommandQueueItem() override;
  explicit constexpr OutgoingCommandQueueItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutgoingCommandQueueItem(const OutgoingCommandQueueItem& from);
  OutgoingCommandQueueItem(OutgoingCommandQueueItem&& from) noexcept
    : OutgoingCommandQueueItem() {
    *this = ::std::move(from);
  }

  inline OutgoingCommandQueueItem& operator=(const OutgoingCommandQueueItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingCommandQueueItem& operator=(OutgoingCommandQueueItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutgoingCommandQueueItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutgoingCommandQueueItem* internal_default_instance() {
    return reinterpret_cast<const OutgoingCommandQueueItem*>(
               &_OutgoingCommandQueueItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(OutgoingCommandQueueItem& a, OutgoingCommandQueueItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingCommandQueueItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutgoingCommandQueueItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutgoingCommandQueueItem* New() const final {
    return CreateMaybeMessage<OutgoingCommandQueueItem>(nullptr);
  }

  OutgoingCommandQueueItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingCommandQueueItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutgoingCommandQueueItem& from);
  void MergeFrom(const OutgoingCommandQueueItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutgoingCommandQueueItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OutgoingCommandQueueItem";
  }
  protected:
  explicit OutgoingCommandQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidToDataMapEntriesFieldNumber = 3,
    kLargeDataListFieldNumber = 5,
    kSerializedJsonWithoutDataBase64EncodedStringFieldNumber = 2,
    kCommandFieldNumber = 1,
    kSerializedJsonWithoutDataBase64EncodedDataFieldNumber = 4,
  };
  // repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
  int uuid_to_data_map_entries_size() const;
  private:
  int _internal_uuid_to_data_map_entries_size() const;
  public:
  void clear_uuid_to_data_map_entries();
  ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* mutable_uuid_to_data_map_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >*
      mutable_uuid_to_data_map_entries();
  private:
  const ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry& _internal_uuid_to_data_map_entries(int index) const;
  ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* _internal_add_uuid_to_data_map_entries();
  public:
  const ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry& uuid_to_data_map_entries(int index) const;
  ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* add_uuid_to_data_map_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >&
      uuid_to_data_map_entries() const;

  // repeated .TSP.DataReference large_data_list = 5;
  int large_data_list_size() const;
  private:
  int _internal_large_data_list_size() const;
  public:
  void clear_large_data_list();
  ::TSP::DataReference* mutable_large_data_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_large_data_list();
  private:
  const ::TSP::DataReference& _internal_large_data_list(int index) const;
  ::TSP::DataReference* _internal_add_large_data_list();
  public:
  const ::TSP::DataReference& large_data_list(int index) const;
  ::TSP::DataReference* add_large_data_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      large_data_list() const;

  // optional string serialized_json_without_data_base64_encoded_string = 2;
  bool has_serialized_json_without_data_base64_encoded_string() const;
  private:
  bool _internal_has_serialized_json_without_data_base64_encoded_string() const;
  public:
  void clear_serialized_json_without_data_base64_encoded_string();
  const std::string& serialized_json_without_data_base64_encoded_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_json_without_data_base64_encoded_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_json_without_data_base64_encoded_string();
  std::string* release_serialized_json_without_data_base64_encoded_string();
  void set_allocated_serialized_json_without_data_base64_encoded_string(std::string* serialized_json_without_data_base64_encoded_string);
  private:
  const std::string& _internal_serialized_json_without_data_base64_encoded_string() const;
  void _internal_set_serialized_json_without_data_base64_encoded_string(const std::string& value);
  std::string* _internal_mutable_serialized_json_without_data_base64_encoded_string();
  public:

  // optional .TSP.Reference command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::TSP::Reference& command() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_command();
  ::TSP::Reference* mutable_command();
  void set_allocated_command(::TSP::Reference* command);
  private:
  const ::TSP::Reference& _internal_command() const;
  ::TSP::Reference* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::TSP::Reference* command);
  ::TSP::Reference* unsafe_arena_release_command();

  // optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
  bool has_serialized_json_without_data_base64_encoded_data() const;
  private:
  bool _internal_has_serialized_json_without_data_base64_encoded_data() const;
  public:
  void clear_serialized_json_without_data_base64_encoded_data();
  const ::TSP::DataReference& serialized_json_without_data_base64_encoded_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_serialized_json_without_data_base64_encoded_data();
  ::TSP::DataReference* mutable_serialized_json_without_data_base64_encoded_data();
  void set_allocated_serialized_json_without_data_base64_encoded_data(::TSP::DataReference* serialized_json_without_data_base64_encoded_data);
  private:
  const ::TSP::DataReference& _internal_serialized_json_without_data_base64_encoded_data() const;
  ::TSP::DataReference* _internal_mutable_serialized_json_without_data_base64_encoded_data();
  public:
  void unsafe_arena_set_allocated_serialized_json_without_data_base64_encoded_data(
      ::TSP::DataReference* serialized_json_without_data_base64_encoded_data);
  ::TSP::DataReference* unsafe_arena_release_serialized_json_without_data_base64_encoded_data();

  // @@protoc_insertion_point(class_scope:TSK.OutgoingCommandQueueItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry > uuid_to_data_map_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > large_data_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_json_without_data_base64_encoded_string_;
  ::TSP::Reference* command_;
  ::TSP::DataReference* serialized_json_without_data_base64_encoded_data_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OutgoingCommandQueueItemUUIDToDataMapEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry) */ {
 public:
  inline OutgoingCommandQueueItemUUIDToDataMapEntry() : OutgoingCommandQueueItemUUIDToDataMapEntry(nullptr) {}
  ~OutgoingCommandQueueItemUUIDToDataMapEntry() override;
  explicit constexpr OutgoingCommandQueueItemUUIDToDataMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutgoingCommandQueueItemUUIDToDataMapEntry(const OutgoingCommandQueueItemUUIDToDataMapEntry& from);
  OutgoingCommandQueueItemUUIDToDataMapEntry(OutgoingCommandQueueItemUUIDToDataMapEntry&& from) noexcept
    : OutgoingCommandQueueItemUUIDToDataMapEntry() {
    *this = ::std::move(from);
  }

  inline OutgoingCommandQueueItemUUIDToDataMapEntry& operator=(const OutgoingCommandQueueItemUUIDToDataMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingCommandQueueItemUUIDToDataMapEntry& operator=(OutgoingCommandQueueItemUUIDToDataMapEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutgoingCommandQueueItemUUIDToDataMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutgoingCommandQueueItemUUIDToDataMapEntry* internal_default_instance() {
    return reinterpret_cast<const OutgoingCommandQueueItemUUIDToDataMapEntry*>(
               &_OutgoingCommandQueueItemUUIDToDataMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(OutgoingCommandQueueItemUUIDToDataMapEntry& a, OutgoingCommandQueueItemUUIDToDataMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingCommandQueueItemUUIDToDataMapEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutgoingCommandQueueItemUUIDToDataMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutgoingCommandQueueItemUUIDToDataMapEntry* New() const final {
    return CreateMaybeMessage<OutgoingCommandQueueItemUUIDToDataMapEntry>(nullptr);
  }

  OutgoingCommandQueueItemUUIDToDataMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingCommandQueueItemUUIDToDataMapEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutgoingCommandQueueItemUUIDToDataMapEntry& from);
  void MergeFrom(const OutgoingCommandQueueItemUUIDToDataMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutgoingCommandQueueItemUUIDToDataMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OutgoingCommandQueueItemUUIDToDataMapEntry";
  }
  protected:
  explicit OutgoingCommandQueueItemUUIDToDataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // required .TSP.UUID uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // required .TSP.DataReference data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::TSP::DataReference& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_data();
  ::TSP::DataReference* mutable_data();
  void set_allocated_data(::TSP::DataReference* data);
  private:
  const ::TSP::DataReference& _internal_data() const;
  ::TSP::DataReference* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::TSP::DataReference* data);
  ::TSP::DataReference* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* uuid_;
  ::TSP::DataReference* data_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationDocumentSessionState_AcknowledgementObserverEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry) */ {
 public:
  inline CollaborationDocumentSessionState_AcknowledgementObserverEntry() : CollaborationDocumentSessionState_AcknowledgementObserverEntry(nullptr) {}
  ~CollaborationDocumentSessionState_AcknowledgementObserverEntry() override;
  explicit constexpr CollaborationDocumentSessionState_AcknowledgementObserverEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationDocumentSessionState_AcknowledgementObserverEntry(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from);
  CollaborationDocumentSessionState_AcknowledgementObserverEntry(CollaborationDocumentSessionState_AcknowledgementObserverEntry&& from) noexcept
    : CollaborationDocumentSessionState_AcknowledgementObserverEntry() {
    *this = ::std::move(from);
  }

  inline CollaborationDocumentSessionState_AcknowledgementObserverEntry& operator=(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationDocumentSessionState_AcknowledgementObserverEntry& operator=(CollaborationDocumentSessionState_AcknowledgementObserverEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationDocumentSessionState_AcknowledgementObserverEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationDocumentSessionState_AcknowledgementObserverEntry* internal_default_instance() {
    return reinterpret_cast<const CollaborationDocumentSessionState_AcknowledgementObserverEntry*>(
               &_CollaborationDocumentSessionState_AcknowledgementObserverEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CollaborationDocumentSessionState_AcknowledgementObserverEntry& a, CollaborationDocumentSessionState_AcknowledgementObserverEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationDocumentSessionState_AcknowledgementObserverEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationDocumentSessionState_AcknowledgementObserverEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationDocumentSessionState_AcknowledgementObserverEntry* New() const final {
    return CreateMaybeMessage<CollaborationDocumentSessionState_AcknowledgementObserverEntry>(nullptr);
  }

  CollaborationDocumentSessionState_AcknowledgementObserverEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationDocumentSessionState_AcknowledgementObserverEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from);
  void MergeFrom(const CollaborationDocumentSessionState_AcknowledgementObserverEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationDocumentSessionState_AcknowledgementObserverEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry";
  }
  protected:
  explicit CollaborationDocumentSessionState_AcknowledgementObserverEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgementObserversFieldNumber = 2,
    kCommandIdentifierFieldNumber = 1,
  };
  // repeated .TSP.Reference acknowledgement_observers = 2;
  int acknowledgement_observers_size() const;
  private:
  int _internal_acknowledgement_observers_size() const;
  public:
  void clear_acknowledgement_observers();
  ::TSP::Reference* mutable_acknowledgement_observers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_acknowledgement_observers();
  private:
  const ::TSP::Reference& _internal_acknowledgement_observers(int index) const;
  ::TSP::Reference* _internal_add_acknowledgement_observers();
  public:
  const ::TSP::Reference& acknowledgement_observers(int index) const;
  ::TSP::Reference* add_acknowledgement_observers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      acknowledgement_observers() const;

  // required .TSP.UUID command_identifier = 1;
  bool has_command_identifier() const;
  private:
  bool _internal_has_command_identifier() const;
  public:
  void clear_command_identifier();
  const ::TSP::UUID& command_identifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_command_identifier();
  ::TSP::UUID* mutable_command_identifier();
  void set_allocated_command_identifier(::TSP::UUID* command_identifier);
  private:
  const ::TSP::UUID& _internal_command_identifier() const;
  ::TSP::UUID* _internal_mutable_command_identifier();
  public:
  void unsafe_arena_set_allocated_command_identifier(
      ::TSP::UUID* command_identifier);
  ::TSP::UUID* unsafe_arena_release_command_identifier();

  // @@protoc_insertion_point(class_scope:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > acknowledgement_observers_;
  ::TSP::UUID* command_identifier_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaborationDocumentSessionState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CollaborationDocumentSessionState) */ {
 public:
  inline CollaborationDocumentSessionState() : CollaborationDocumentSessionState(nullptr) {}
  ~CollaborationDocumentSessionState() override;
  explicit constexpr CollaborationDocumentSessionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaborationDocumentSessionState(const CollaborationDocumentSessionState& from);
  CollaborationDocumentSessionState(CollaborationDocumentSessionState&& from) noexcept
    : CollaborationDocumentSessionState() {
    *this = ::std::move(from);
  }

  inline CollaborationDocumentSessionState& operator=(const CollaborationDocumentSessionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaborationDocumentSessionState& operator=(CollaborationDocumentSessionState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaborationDocumentSessionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaborationDocumentSessionState* internal_default_instance() {
    return reinterpret_cast<const CollaborationDocumentSessionState*>(
               &_CollaborationDocumentSessionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CollaborationDocumentSessionState& a, CollaborationDocumentSessionState& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaborationDocumentSessionState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaborationDocumentSessionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollaborationDocumentSessionState* New() const final {
    return CreateMaybeMessage<CollaborationDocumentSessionState>(nullptr);
  }

  CollaborationDocumentSessionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollaborationDocumentSessionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollaborationDocumentSessionState& from);
  void MergeFrom(const CollaborationDocumentSessionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaborationDocumentSessionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CollaborationDocumentSessionState";
  }
  protected:
  explicit CollaborationDocumentSessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CollaborationDocumentSessionState_AcknowledgementObserverEntry AcknowledgementObserverEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kCollaboratorIdsFieldNumber = 1,
    kRsvpCommandQueueItemsFieldNumber = 3,
    kCollaboratorCursorTransformerEntriesFieldNumber = 4,
    kAcknowledgedCommandsPendingResumeProcessDiffsFieldNumber = 5,
    kUnprocessedCommandsPendingResumeProcessDiffsFieldNumber = 6,
    kCommandAcknowledgementObserverEntriesFieldNumber = 7,
    kTransformerFromUnprocessedCommandOperationsEntriesFieldNumber = 8,
    kSkippedAcknowledgedCommandsPendingResumeProcessDiffsFieldNumber = 15,
    kMailboxRequestDocumentRevisionIdentifierFieldNumber = 11,
    kLastCommandSendMarkerIdentifierFieldNumber = 14,
    kLastTooOldCommandIdentifierFieldNumber = 16,
    kUnprocessedOperationEntriesPendingResumeProcessDiffsFieldNumber = 17,
    kSendPendingCommandQueueFieldNumber = 18,
    kLastEnqueuedDocumentLoadCommandIdentifierFieldNumber = 20,
    kMailboxRequestDocumentRevisionSequenceFieldNumber = 10,
    kLastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueueFieldNumber = 12,
    kCountOfSendPendingCommandQueueItemsMovedFromRsvpQueueFieldNumber = 19,
    kLastCommandSendMarkerSequenceFieldNumber = 13,
  };
  // repeated string collaborator_ids = 1;
  int collaborator_ids_size() const;
  private:
  int _internal_collaborator_ids_size() const;
  public:
  void clear_collaborator_ids();
  const std::string& collaborator_ids(int index) const;
  std::string* mutable_collaborator_ids(int index);
  void set_collaborator_ids(int index, const std::string& value);
  void set_collaborator_ids(int index, std::string&& value);
  void set_collaborator_ids(int index, const char* value);
  void set_collaborator_ids(int index, const char* value, size_t size);
  std::string* add_collaborator_ids();
  void add_collaborator_ids(const std::string& value);
  void add_collaborator_ids(std::string&& value);
  void add_collaborator_ids(const char* value);
  void add_collaborator_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& collaborator_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_collaborator_ids();
  private:
  const std::string& _internal_collaborator_ids(int index) const;
  std::string* _internal_add_collaborator_ids();
  public:

  // repeated .TSP.Reference rsvp_command_queue_items = 3;
  int rsvp_command_queue_items_size() const;
  private:
  int _internal_rsvp_command_queue_items_size() const;
  public:
  void clear_rsvp_command_queue_items();
  ::TSP::Reference* mutable_rsvp_command_queue_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_rsvp_command_queue_items();
  private:
  const ::TSP::Reference& _internal_rsvp_command_queue_items(int index) const;
  ::TSP::Reference* _internal_add_rsvp_command_queue_items();
  public:
  const ::TSP::Reference& rsvp_command_queue_items(int index) const;
  ::TSP::Reference* add_rsvp_command_queue_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      rsvp_command_queue_items() const;

  // repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
  int collaborator_cursor_transformer_entries_size() const;
  private:
  int _internal_collaborator_cursor_transformer_entries_size() const;
  public:
  void clear_collaborator_cursor_transformer_entries();
  ::TSP::Reference* mutable_collaborator_cursor_transformer_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_collaborator_cursor_transformer_entries();
  private:
  const ::TSP::Reference& _internal_collaborator_cursor_transformer_entries(int index) const;
  ::TSP::Reference* _internal_add_collaborator_cursor_transformer_entries();
  public:
  const ::TSP::Reference& collaborator_cursor_transformer_entries(int index) const;
  ::TSP::Reference* add_collaborator_cursor_transformer_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      collaborator_cursor_transformer_entries() const;

  // repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
  int acknowledged_commands_pending_resume_process_diffs_size() const;
  private:
  int _internal_acknowledged_commands_pending_resume_process_diffs_size() const;
  public:
  void clear_acknowledged_commands_pending_resume_process_diffs();
  ::TSP::Reference* mutable_acknowledged_commands_pending_resume_process_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_acknowledged_commands_pending_resume_process_diffs();
  private:
  const ::TSP::Reference& _internal_acknowledged_commands_pending_resume_process_diffs(int index) const;
  ::TSP::Reference* _internal_add_acknowledged_commands_pending_resume_process_diffs();
  public:
  const ::TSP::Reference& acknowledged_commands_pending_resume_process_diffs(int index) const;
  ::TSP::Reference* add_acknowledged_commands_pending_resume_process_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      acknowledged_commands_pending_resume_process_diffs() const;

  // repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
  int unprocessed_commands_pending_resume_process_diffs_size() const;
  private:
  int _internal_unprocessed_commands_pending_resume_process_diffs_size() const;
  public:
  void clear_unprocessed_commands_pending_resume_process_diffs();
  ::TSP::Reference* mutable_unprocessed_commands_pending_resume_process_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_unprocessed_commands_pending_resume_process_diffs();
  private:
  const ::TSP::Reference& _internal_unprocessed_commands_pending_resume_process_diffs(int index) const;
  ::TSP::Reference* _internal_add_unprocessed_commands_pending_resume_process_diffs();
  public:
  const ::TSP::Reference& unprocessed_commands_pending_resume_process_diffs(int index) const;
  ::TSP::Reference* add_unprocessed_commands_pending_resume_process_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      unprocessed_commands_pending_resume_process_diffs() const;

  // repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
  int command_acknowledgement_observer_entries_size() const;
  private:
  int _internal_command_acknowledgement_observer_entries_size() const;
  public:
  void clear_command_acknowledgement_observer_entries();
  ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* mutable_command_acknowledgement_observer_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >*
      mutable_command_acknowledgement_observer_entries();
  private:
  const ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry& _internal_command_acknowledgement_observer_entries(int index) const;
  ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* _internal_add_command_acknowledgement_observer_entries();
  public:
  const ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry& command_acknowledgement_observer_entries(int index) const;
  ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* add_command_acknowledgement_observer_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >&
      command_acknowledgement_observer_entries() const;

  // repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
  int transformer_from_unprocessed_command_operations_entries_size() const;
  private:
  int _internal_transformer_from_unprocessed_command_operations_entries_size() const;
  public:
  void clear_transformer_from_unprocessed_command_operations_entries();
  ::TSP::Reference* mutable_transformer_from_unprocessed_command_operations_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_transformer_from_unprocessed_command_operations_entries();
  private:
  const ::TSP::Reference& _internal_transformer_from_unprocessed_command_operations_entries(int index) const;
  ::TSP::Reference* _internal_add_transformer_from_unprocessed_command_operations_entries();
  public:
  const ::TSP::Reference& transformer_from_unprocessed_command_operations_entries(int index) const;
  ::TSP::Reference* add_transformer_from_unprocessed_command_operations_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      transformer_from_unprocessed_command_operations_entries() const;

  // repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
  int skipped_acknowledged_commands_pending_resume_process_diffs_size() const;
  private:
  int _internal_skipped_acknowledged_commands_pending_resume_process_diffs_size() const;
  public:
  void clear_skipped_acknowledged_commands_pending_resume_process_diffs();
  ::TSP::Reference* mutable_skipped_acknowledged_commands_pending_resume_process_diffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_skipped_acknowledged_commands_pending_resume_process_diffs();
  private:
  const ::TSP::Reference& _internal_skipped_acknowledged_commands_pending_resume_process_diffs(int index) const;
  ::TSP::Reference* _internal_add_skipped_acknowledged_commands_pending_resume_process_diffs();
  public:
  const ::TSP::Reference& skipped_acknowledged_commands_pending_resume_process_diffs(int index) const;
  ::TSP::Reference* add_skipped_acknowledged_commands_pending_resume_process_diffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      skipped_acknowledged_commands_pending_resume_process_diffs() const;

  // optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
  bool has_mailbox_request_document_revision_identifier() const;
  private:
  bool _internal_has_mailbox_request_document_revision_identifier() const;
  public:
  void clear_mailbox_request_document_revision_identifier();
  const ::TSP::UUID& mailbox_request_document_revision_identifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_mailbox_request_document_revision_identifier();
  ::TSP::UUID* mutable_mailbox_request_document_revision_identifier();
  void set_allocated_mailbox_request_document_revision_identifier(::TSP::UUID* mailbox_request_document_revision_identifier);
  private:
  const ::TSP::UUID& _internal_mailbox_request_document_revision_identifier() const;
  ::TSP::UUID* _internal_mutable_mailbox_request_document_revision_identifier();
  public:
  void unsafe_arena_set_allocated_mailbox_request_document_revision_identifier(
      ::TSP::UUID* mailbox_request_document_revision_identifier);
  ::TSP::UUID* unsafe_arena_release_mailbox_request_document_revision_identifier();

  // optional .TSP.UUID last_command_send_marker_identifier = 14;
  bool has_last_command_send_marker_identifier() const;
  private:
  bool _internal_has_last_command_send_marker_identifier() const;
  public:
  void clear_last_command_send_marker_identifier();
  const ::TSP::UUID& last_command_send_marker_identifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_last_command_send_marker_identifier();
  ::TSP::UUID* mutable_last_command_send_marker_identifier();
  void set_allocated_last_command_send_marker_identifier(::TSP::UUID* last_command_send_marker_identifier);
  private:
  const ::TSP::UUID& _internal_last_command_send_marker_identifier() const;
  ::TSP::UUID* _internal_mutable_last_command_send_marker_identifier();
  public:
  void unsafe_arena_set_allocated_last_command_send_marker_identifier(
      ::TSP::UUID* last_command_send_marker_identifier);
  ::TSP::UUID* unsafe_arena_release_last_command_send_marker_identifier();

  // optional .TSP.UUID last_too_old_command_identifier = 16;
  bool has_last_too_old_command_identifier() const;
  private:
  bool _internal_has_last_too_old_command_identifier() const;
  public:
  void clear_last_too_old_command_identifier();
  const ::TSP::UUID& last_too_old_command_identifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_last_too_old_command_identifier();
  ::TSP::UUID* mutable_last_too_old_command_identifier();
  void set_allocated_last_too_old_command_identifier(::TSP::UUID* last_too_old_command_identifier);
  private:
  const ::TSP::UUID& _internal_last_too_old_command_identifier() const;
  ::TSP::UUID* _internal_mutable_last_too_old_command_identifier();
  public:
  void unsafe_arena_set_allocated_last_too_old_command_identifier(
      ::TSP::UUID* last_too_old_command_identifier);
  ::TSP::UUID* unsafe_arena_release_last_too_old_command_identifier();

  // optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
  bool has_unprocessed_operation_entries_pending_resume_process_diffs() const;
  private:
  bool _internal_has_unprocessed_operation_entries_pending_resume_process_diffs() const;
  public:
  void clear_unprocessed_operation_entries_pending_resume_process_diffs();
  const ::TSP::Reference& unprocessed_operation_entries_pending_resume_process_diffs() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_unprocessed_operation_entries_pending_resume_process_diffs();
  ::TSP::Reference* mutable_unprocessed_operation_entries_pending_resume_process_diffs();
  void set_allocated_unprocessed_operation_entries_pending_resume_process_diffs(::TSP::Reference* unprocessed_operation_entries_pending_resume_process_diffs);
  private:
  const ::TSP::Reference& _internal_unprocessed_operation_entries_pending_resume_process_diffs() const;
  ::TSP::Reference* _internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs();
  public:
  void unsafe_arena_set_allocated_unprocessed_operation_entries_pending_resume_process_diffs(
      ::TSP::Reference* unprocessed_operation_entries_pending_resume_process_diffs);
  ::TSP::Reference* unsafe_arena_release_unprocessed_operation_entries_pending_resume_process_diffs();

  // optional .TSP.Reference send_pending_command_queue = 18;
  bool has_send_pending_command_queue() const;
  private:
  bool _internal_has_send_pending_command_queue() const;
  public:
  void clear_send_pending_command_queue();
  const ::TSP::Reference& send_pending_command_queue() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_send_pending_command_queue();
  ::TSP::Reference* mutable_send_pending_command_queue();
  void set_allocated_send_pending_command_queue(::TSP::Reference* send_pending_command_queue);
  private:
  const ::TSP::Reference& _internal_send_pending_command_queue() const;
  ::TSP::Reference* _internal_mutable_send_pending_command_queue();
  public:
  void unsafe_arena_set_allocated_send_pending_command_queue(
      ::TSP::Reference* send_pending_command_queue);
  ::TSP::Reference* unsafe_arena_release_send_pending_command_queue();

  // optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
  bool has_last_enqueued_document_load_command_identifier() const;
  private:
  bool _internal_has_last_enqueued_document_load_command_identifier() const;
  public:
  void clear_last_enqueued_document_load_command_identifier();
  const ::TSP::UUID& last_enqueued_document_load_command_identifier() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_last_enqueued_document_load_command_identifier();
  ::TSP::UUID* mutable_last_enqueued_document_load_command_identifier();
  void set_allocated_last_enqueued_document_load_command_identifier(::TSP::UUID* last_enqueued_document_load_command_identifier);
  private:
  const ::TSP::UUID& _internal_last_enqueued_document_load_command_identifier() const;
  ::TSP::UUID* _internal_mutable_last_enqueued_document_load_command_identifier();
  public:
  void unsafe_arena_set_allocated_last_enqueued_document_load_command_identifier(
      ::TSP::UUID* last_enqueued_document_load_command_identifier);
  ::TSP::UUID* unsafe_arena_release_last_enqueued_document_load_command_identifier();

  // optional int32 mailbox_request_document_revision_sequence = 10;
  bool has_mailbox_request_document_revision_sequence() const;
  private:
  bool _internal_has_mailbox_request_document_revision_sequence() const;
  public:
  void clear_mailbox_request_document_revision_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 mailbox_request_document_revision_sequence() const;
  void set_mailbox_request_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mailbox_request_document_revision_sequence() const;
  void _internal_set_mailbox_request_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
  bool has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const;
  private:
  bool _internal_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const;
  public:
  void clear_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue();
  bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const;
  void set_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(bool value);
  private:
  bool _internal_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const;
  void _internal_set_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(bool value);
  public:

  // optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
  bool has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const;
  private:
  bool _internal_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const;
  public:
  void clear_count_of_send_pending_command_queue_items_moved_from_rsvp_queue();
  ::PROTOBUF_NAMESPACE_ID::uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const;
  void set_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const;
  void _internal_set_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 last_command_send_marker_sequence = 13;
  bool has_last_command_send_marker_sequence() const;
  private:
  bool _internal_has_last_command_send_marker_sequence() const;
  public:
  void clear_last_command_send_marker_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 last_command_send_marker_sequence() const;
  void set_last_command_send_marker_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_command_send_marker_sequence() const;
  void _internal_set_last_command_send_marker_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CollaborationDocumentSessionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> collaborator_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > rsvp_command_queue_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > collaborator_cursor_transformer_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > acknowledged_commands_pending_resume_process_diffs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > unprocessed_commands_pending_resume_process_diffs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry > command_acknowledgement_observer_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > transformer_from_unprocessed_command_operations_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > skipped_acknowledged_commands_pending_resume_process_diffs_;
  ::TSP::UUID* mailbox_request_document_revision_identifier_;
  ::TSP::UUID* last_command_send_marker_identifier_;
  ::TSP::UUID* last_too_old_command_identifier_;
  ::TSP::Reference* unprocessed_operation_entries_pending_resume_process_diffs_;
  ::TSP::Reference* send_pending_command_queue_;
  ::TSP::UUID* last_enqueued_document_load_command_identifier_;
  ::PROTOBUF_NAMESPACE_ID::int32 mailbox_request_document_revision_sequence_;
  bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_command_send_marker_sequence_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class NativeContentDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.NativeContentDescription) */ {
 public:
  inline NativeContentDescription() : NativeContentDescription(nullptr) {}
  ~NativeContentDescription() override;
  explicit constexpr NativeContentDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NativeContentDescription(const NativeContentDescription& from);
  NativeContentDescription(NativeContentDescription&& from) noexcept
    : NativeContentDescription() {
    *this = ::std::move(from);
  }

  inline NativeContentDescription& operator=(const NativeContentDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline NativeContentDescription& operator=(NativeContentDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NativeContentDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const NativeContentDescription* internal_default_instance() {
    return reinterpret_cast<const NativeContentDescription*>(
               &_NativeContentDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(NativeContentDescription& a, NativeContentDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(NativeContentDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NativeContentDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NativeContentDescription* New() const final {
    return CreateMaybeMessage<NativeContentDescription>(nullptr);
  }

  NativeContentDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NativeContentDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NativeContentDescription& from);
  void MergeFrom(const NativeContentDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NativeContentDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.NativeContentDescription";
  }
  protected:
  explicit NativeContentDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableDescriptionsFieldNumber = 4,
    kAppNameFieldNumber = 1,
    kAppVersionFieldNumber = 2,
    kDocumentIdFieldNumber = 3,
  };
  // repeated .TSP.Reference drawable_descriptions = 4;
  int drawable_descriptions_size() const;
  private:
  int _internal_drawable_descriptions_size() const;
  public:
  void clear_drawable_descriptions();
  ::TSP::Reference* mutable_drawable_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_drawable_descriptions();
  private:
  const ::TSP::Reference& _internal_drawable_descriptions(int index) const;
  ::TSP::Reference* _internal_add_drawable_descriptions();
  public:
  const ::TSP::Reference& drawable_descriptions(int index) const;
  ::TSP::Reference* add_drawable_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      drawable_descriptions() const;

  // optional string app_name = 1;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string app_version = 2;
  bool has_app_version() const;
  private:
  bool _internal_has_app_version() const;
  public:
  void clear_app_version();
  const std::string& app_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_version();
  std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // optional string document_id = 3;
  bool has_document_id() const;
  private:
  bool _internal_has_document_id() const;
  public:
  void clear_document_id();
  const std::string& document_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_id();
  std::string* release_document_id();
  void set_allocated_document_id(std::string* document_id);
  private:
  const std::string& _internal_document_id() const;
  void _internal_set_document_id(const std::string& value);
  std::string* _internal_mutable_document_id();
  public:

  // @@protoc_insertion_point(class_scope:TSK.NativeContentDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > drawable_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_id_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class StructuredTextImportSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.StructuredTextImportSettings) */ {
 public:
  inline StructuredTextImportSettings() : StructuredTextImportSettings(nullptr) {}
  ~StructuredTextImportSettings() override;
  explicit constexpr StructuredTextImportSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredTextImportSettings(const StructuredTextImportSettings& from);
  StructuredTextImportSettings(StructuredTextImportSettings&& from) noexcept
    : StructuredTextImportSettings() {
    *this = ::std::move(from);
  }

  inline StructuredTextImportSettings& operator=(const StructuredTextImportSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredTextImportSettings& operator=(StructuredTextImportSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructuredTextImportSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredTextImportSettings* internal_default_instance() {
    return reinterpret_cast<const StructuredTextImportSettings*>(
               &_StructuredTextImportSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(StructuredTextImportSettings& a, StructuredTextImportSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(StructuredTextImportSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredTextImportSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructuredTextImportSettings* New() const final {
    return CreateMaybeMessage<StructuredTextImportSettings>(nullptr);
  }

  StructuredTextImportSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructuredTextImportSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructuredTextImportSettings& from);
  void MergeFrom(const StructuredTextImportSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructuredTextImportSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.StructuredTextImportSettings";
  }
  protected:
  explicit StructuredTextImportSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecimalSeparatorsFieldNumber = 3,
    kThousandsSeparatorsFieldNumber = 4,
    kDelimitersFieldNumber = 6,
    kTextQualifiersFieldNumber = 7,
    kColumnOffsetsFieldNumber = 9,
    kTypeFieldNumber = 1,
    kStartingRowFieldNumber = 2,
    kSourceEncodingFieldNumber = 12,
    kTransposeRowsAndColumnsFieldNumber = 5,
    kCollapseConsecutiveFieldNumber = 8,
    kAutomaticDelimitersFieldNumber = 10,
    kAutomaticOffsetsFieldNumber = 11,
  };
  // repeated string decimal_separators = 3;
  int decimal_separators_size() const;
  private:
  int _internal_decimal_separators_size() const;
  public:
  void clear_decimal_separators();
  const std::string& decimal_separators(int index) const;
  std::string* mutable_decimal_separators(int index);
  void set_decimal_separators(int index, const std::string& value);
  void set_decimal_separators(int index, std::string&& value);
  void set_decimal_separators(int index, const char* value);
  void set_decimal_separators(int index, const char* value, size_t size);
  std::string* add_decimal_separators();
  void add_decimal_separators(const std::string& value);
  void add_decimal_separators(std::string&& value);
  void add_decimal_separators(const char* value);
  void add_decimal_separators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& decimal_separators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_decimal_separators();
  private:
  const std::string& _internal_decimal_separators(int index) const;
  std::string* _internal_add_decimal_separators();
  public:

  // repeated string thousands_separators = 4;
  int thousands_separators_size() const;
  private:
  int _internal_thousands_separators_size() const;
  public:
  void clear_thousands_separators();
  const std::string& thousands_separators(int index) const;
  std::string* mutable_thousands_separators(int index);
  void set_thousands_separators(int index, const std::string& value);
  void set_thousands_separators(int index, std::string&& value);
  void set_thousands_separators(int index, const char* value);
  void set_thousands_separators(int index, const char* value, size_t size);
  std::string* add_thousands_separators();
  void add_thousands_separators(const std::string& value);
  void add_thousands_separators(std::string&& value);
  void add_thousands_separators(const char* value);
  void add_thousands_separators(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& thousands_separators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_thousands_separators();
  private:
  const std::string& _internal_thousands_separators(int index) const;
  std::string* _internal_add_thousands_separators();
  public:

  // repeated string delimiters = 6;
  int delimiters_size() const;
  private:
  int _internal_delimiters_size() const;
  public:
  void clear_delimiters();
  const std::string& delimiters(int index) const;
  std::string* mutable_delimiters(int index);
  void set_delimiters(int index, const std::string& value);
  void set_delimiters(int index, std::string&& value);
  void set_delimiters(int index, const char* value);
  void set_delimiters(int index, const char* value, size_t size);
  std::string* add_delimiters();
  void add_delimiters(const std::string& value);
  void add_delimiters(std::string&& value);
  void add_delimiters(const char* value);
  void add_delimiters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delimiters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delimiters();
  private:
  const std::string& _internal_delimiters(int index) const;
  std::string* _internal_add_delimiters();
  public:

  // repeated string text_qualifiers = 7;
  int text_qualifiers_size() const;
  private:
  int _internal_text_qualifiers_size() const;
  public:
  void clear_text_qualifiers();
  const std::string& text_qualifiers(int index) const;
  std::string* mutable_text_qualifiers(int index);
  void set_text_qualifiers(int index, const std::string& value);
  void set_text_qualifiers(int index, std::string&& value);
  void set_text_qualifiers(int index, const char* value);
  void set_text_qualifiers(int index, const char* value, size_t size);
  std::string* add_text_qualifiers();
  void add_text_qualifiers(const std::string& value);
  void add_text_qualifiers(std::string&& value);
  void add_text_qualifiers(const char* value);
  void add_text_qualifiers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text_qualifiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text_qualifiers();
  private:
  const std::string& _internal_text_qualifiers(int index) const;
  std::string* _internal_add_text_qualifiers();
  public:

  // optional .TSP.IndexSet column_offsets = 9;
  bool has_column_offsets() const;
  private:
  bool _internal_has_column_offsets() const;
  public:
  void clear_column_offsets();
  const ::TSP::IndexSet& column_offsets() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::IndexSet* release_column_offsets();
  ::TSP::IndexSet* mutable_column_offsets();
  void set_allocated_column_offsets(::TSP::IndexSet* column_offsets);
  private:
  const ::TSP::IndexSet& _internal_column_offsets() const;
  ::TSP::IndexSet* _internal_mutable_column_offsets();
  public:
  void unsafe_arena_set_allocated_column_offsets(
      ::TSP::IndexSet* column_offsets);
  ::TSP::IndexSet* unsafe_arena_release_column_offsets();

  // required .TSK.StructuredTextImportType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::TSK::StructuredTextImportType type() const;
  void set_type(::TSK::StructuredTextImportType value);
  private:
  ::TSK::StructuredTextImportType _internal_type() const;
  void _internal_set_type(::TSK::StructuredTextImportType value);
  public:

  // required int32 starting_row = 2;
  bool has_starting_row() const;
  private:
  bool _internal_has_starting_row() const;
  public:
  void clear_starting_row();
  ::PROTOBUF_NAMESPACE_ID::int32 starting_row() const;
  void set_starting_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starting_row() const;
  void _internal_set_starting_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 source_encoding = 12;
  bool has_source_encoding() const;
  private:
  bool _internal_has_source_encoding() const;
  public:
  void clear_source_encoding();
  ::PROTOBUF_NAMESPACE_ID::uint64 source_encoding() const;
  void set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_source_encoding() const;
  void _internal_set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool transpose_rows_and_columns = 5;
  bool has_transpose_rows_and_columns() const;
  private:
  bool _internal_has_transpose_rows_and_columns() const;
  public:
  void clear_transpose_rows_and_columns();
  bool transpose_rows_and_columns() const;
  void set_transpose_rows_and_columns(bool value);
  private:
  bool _internal_transpose_rows_and_columns() const;
  void _internal_set_transpose_rows_and_columns(bool value);
  public:

  // optional bool collapse_consecutive = 8;
  bool has_collapse_consecutive() const;
  private:
  bool _internal_has_collapse_consecutive() const;
  public:
  void clear_collapse_consecutive();
  bool collapse_consecutive() const;
  void set_collapse_consecutive(bool value);
  private:
  bool _internal_collapse_consecutive() const;
  void _internal_set_collapse_consecutive(bool value);
  public:

  // optional bool automatic_delimiters = 10;
  bool has_automatic_delimiters() const;
  private:
  bool _internal_has_automatic_delimiters() const;
  public:
  void clear_automatic_delimiters();
  bool automatic_delimiters() const;
  void set_automatic_delimiters(bool value);
  private:
  bool _internal_automatic_delimiters() const;
  void _internal_set_automatic_delimiters(bool value);
  public:

  // optional bool automatic_offsets = 11;
  bool has_automatic_offsets() const;
  private:
  bool _internal_has_automatic_offsets() const;
  public:
  void clear_automatic_offsets();
  bool automatic_offsets() const;
  void set_automatic_offsets(bool value);
  private:
  bool _internal_automatic_offsets() const;
  void _internal_set_automatic_offsets(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.StructuredTextImportSettings)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> decimal_separators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> thousands_separators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delimiters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_qualifiers_;
  ::TSP::IndexSet* column_offsets_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 starting_row_;
  ::PROTOBUF_NAMESPACE_ID::uint64 source_encoding_;
  bool transpose_rows_and_columns_;
  bool collapse_consecutive_;
  bool automatic_delimiters_;
  bool automatic_offsets_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OperationStorageCommandOperationsEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OperationStorageCommandOperationsEntry) */ {
 public:
  inline OperationStorageCommandOperationsEntry() : OperationStorageCommandOperationsEntry(nullptr) {}
  ~OperationStorageCommandOperationsEntry() override;
  explicit constexpr OperationStorageCommandOperationsEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStorageCommandOperationsEntry(const OperationStorageCommandOperationsEntry& from);
  OperationStorageCommandOperationsEntry(OperationStorageCommandOperationsEntry&& from) noexcept
    : OperationStorageCommandOperationsEntry() {
    *this = ::std::move(from);
  }

  inline OperationStorageCommandOperationsEntry& operator=(const OperationStorageCommandOperationsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStorageCommandOperationsEntry& operator=(OperationStorageCommandOperationsEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStorageCommandOperationsEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStorageCommandOperationsEntry* internal_default_instance() {
    return reinterpret_cast<const OperationStorageCommandOperationsEntry*>(
               &_OperationStorageCommandOperationsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(OperationStorageCommandOperationsEntry& a, OperationStorageCommandOperationsEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStorageCommandOperationsEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStorageCommandOperationsEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStorageCommandOperationsEntry* New() const final {
    return CreateMaybeMessage<OperationStorageCommandOperationsEntry>(nullptr);
  }

  OperationStorageCommandOperationsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStorageCommandOperationsEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStorageCommandOperationsEntry& from);
  void MergeFrom(const OperationStorageCommandOperationsEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStorageCommandOperationsEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OperationStorageCommandOperationsEntry";
  }
  protected:
  explicit OperationStorageCommandOperationsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandIdentifierFieldNumber = 2,
    kOperationsFieldNumber = 3,
    kCoalescedCommandEntryCountFieldNumber = 5,
    kCommandIdentifierSameAsRevisionIdentifierFieldNumber = 1,
    kServerOriginatedFieldNumber = 4,
  };
  // repeated fixed64 command_identifier = 2 [packed = true];
  int command_identifier_size() const;
  private:
  int _internal_command_identifier_size() const;
  public:
  void clear_command_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_command_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_command_identifier() const;
  void _internal_add_command_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_command_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 command_identifier(int index) const;
  void set_command_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_command_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      command_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_command_identifier();

  // repeated .TSK.Operation operations = 3;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::TSK::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >*
      mutable_operations();
  private:
  const ::TSK::Operation& _internal_operations(int index) const;
  ::TSK::Operation* _internal_add_operations();
  public:
  const ::TSK::Operation& operations(int index) const;
  ::TSK::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >&
      operations() const;

  // optional uint64 coalesced_command_entry_count = 5;
  bool has_coalesced_command_entry_count() const;
  private:
  bool _internal_has_coalesced_command_entry_count() const;
  public:
  void clear_coalesced_command_entry_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 coalesced_command_entry_count() const;
  void set_coalesced_command_entry_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coalesced_command_entry_count() const;
  void _internal_set_coalesced_command_entry_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool command_identifier_same_as_revision_identifier = 1;
  bool has_command_identifier_same_as_revision_identifier() const;
  private:
  bool _internal_has_command_identifier_same_as_revision_identifier() const;
  public:
  void clear_command_identifier_same_as_revision_identifier();
  bool command_identifier_same_as_revision_identifier() const;
  void set_command_identifier_same_as_revision_identifier(bool value);
  private:
  bool _internal_command_identifier_same_as_revision_identifier() const;
  void _internal_set_command_identifier_same_as_revision_identifier(bool value);
  public:

  // optional bool server_originated = 4;
  bool has_server_originated() const;
  private:
  bool _internal_has_server_originated() const;
  public:
  void clear_server_originated();
  bool server_originated() const;
  void set_server_originated(bool value);
  private:
  bool _internal_server_originated() const;
  void _internal_set_server_originated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.OperationStorageCommandOperationsEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > command_identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coalesced_command_entry_count_;
  bool command_identifier_same_as_revision_identifier_;
  bool server_originated_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OperationStorageEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OperationStorageEntry) */ {
 public:
  inline OperationStorageEntry() : OperationStorageEntry(nullptr) {}
  ~OperationStorageEntry() override;
  explicit constexpr OperationStorageEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStorageEntry(const OperationStorageEntry& from);
  OperationStorageEntry(OperationStorageEntry&& from) noexcept
    : OperationStorageEntry() {
    *this = ::std::move(from);
  }

  inline OperationStorageEntry& operator=(const OperationStorageEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStorageEntry& operator=(OperationStorageEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStorageEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStorageEntry* internal_default_instance() {
    return reinterpret_cast<const OperationStorageEntry*>(
               &_OperationStorageEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(OperationStorageEntry& a, OperationStorageEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStorageEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStorageEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStorageEntry* New() const final {
    return CreateMaybeMessage<OperationStorageEntry>(nullptr);
  }

  OperationStorageEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStorageEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStorageEntry& from);
  void MergeFrom(const OperationStorageEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStorageEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OperationStorageEntry";
  }
  protected:
  explicit OperationStorageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocumentRevisionIdentifierFieldNumber = 1,
    kCommandOperationEntriesFieldNumber = 3,
    kDocumentRevisionSequenceDeltaFieldNumber = 2,
    kCreationTimeDiffBucketFieldNumber = 5,
    kFirstEntryCreationTimeFieldNumber = 4,
  };
  // repeated fixed64 document_revision_identifier = 1 [packed = true];
  int document_revision_identifier_size() const;
  private:
  int _internal_document_revision_identifier_size() const;
  public:
  void clear_document_revision_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_document_revision_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_document_revision_identifier() const;
  void _internal_add_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_document_revision_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 document_revision_identifier(int index) const;
  void set_document_revision_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      document_revision_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_document_revision_identifier();

  // repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
  int command_operation_entries_size() const;
  private:
  int _internal_command_operation_entries_size() const;
  public:
  void clear_command_operation_entries();
  ::TSK::OperationStorageCommandOperationsEntry* mutable_command_operation_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageCommandOperationsEntry >*
      mutable_command_operation_entries();
  private:
  const ::TSK::OperationStorageCommandOperationsEntry& _internal_command_operation_entries(int index) const;
  ::TSK::OperationStorageCommandOperationsEntry* _internal_add_command_operation_entries();
  public:
  const ::TSK::OperationStorageCommandOperationsEntry& command_operation_entries(int index) const;
  ::TSK::OperationStorageCommandOperationsEntry* add_command_operation_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageCommandOperationsEntry >&
      command_operation_entries() const;

  // optional int32 document_revision_sequence_delta = 2;
  bool has_document_revision_sequence_delta() const;
  private:
  bool _internal_has_document_revision_sequence_delta() const;
  public:
  void clear_document_revision_sequence_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 document_revision_sequence_delta() const;
  void set_document_revision_sequence_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_document_revision_sequence_delta() const;
  void _internal_set_document_revision_sequence_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 creation_time_diff_bucket = 5;
  bool has_creation_time_diff_bucket() const;
  private:
  bool _internal_has_creation_time_diff_bucket() const;
  public:
  void clear_creation_time_diff_bucket();
  ::PROTOBUF_NAMESPACE_ID::int32 creation_time_diff_bucket() const;
  void set_creation_time_diff_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_creation_time_diff_bucket() const;
  void _internal_set_creation_time_diff_bucket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double first_entry_creation_time = 4;
  bool has_first_entry_creation_time() const;
  private:
  bool _internal_has_first_entry_creation_time() const;
  public:
  void clear_first_entry_creation_time();
  double first_entry_creation_time() const;
  void set_first_entry_creation_time(double value);
  private:
  double _internal_first_entry_creation_time() const;
  void _internal_set_first_entry_creation_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.OperationStorageEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > document_revision_identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageCommandOperationsEntry > command_operation_entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 document_revision_sequence_delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 creation_time_diff_bucket_;
  double first_entry_creation_time_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OperationStorageEntryArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OperationStorageEntryArray) */ {
 public:
  inline OperationStorageEntryArray() : OperationStorageEntryArray(nullptr) {}
  ~OperationStorageEntryArray() override;
  explicit constexpr OperationStorageEntryArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStorageEntryArray(const OperationStorageEntryArray& from);
  OperationStorageEntryArray(OperationStorageEntryArray&& from) noexcept
    : OperationStorageEntryArray() {
    *this = ::std::move(from);
  }

  inline OperationStorageEntryArray& operator=(const OperationStorageEntryArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStorageEntryArray& operator=(OperationStorageEntryArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStorageEntryArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStorageEntryArray* internal_default_instance() {
    return reinterpret_cast<const OperationStorageEntryArray*>(
               &_OperationStorageEntryArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(OperationStorageEntryArray& a, OperationStorageEntryArray& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStorageEntryArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStorageEntryArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStorageEntryArray* New() const final {
    return CreateMaybeMessage<OperationStorageEntryArray>(nullptr);
  }

  OperationStorageEntryArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStorageEntryArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStorageEntryArray& from);
  void MergeFrom(const OperationStorageEntryArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStorageEntryArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OperationStorageEntryArray";
  }
  protected:
  explicit OperationStorageEntryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeArrayFieldNumber = 1,
  };
  // optional .TSP.LargeArray large_array = 1;
  bool has_large_array() const;
  private:
  bool _internal_has_large_array() const;
  public:
  void clear_large_array();
  const ::TSP::LargeArray& large_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArray* release_large_array();
  ::TSP::LargeArray* mutable_large_array();
  void set_allocated_large_array(::TSP::LargeArray* large_array);
  private:
  const ::TSP::LargeArray& _internal_large_array() const;
  ::TSP::LargeArray* _internal_mutable_large_array();
  public:
  void unsafe_arena_set_allocated_large_array(
      ::TSP::LargeArray* large_array);
  ::TSP::LargeArray* unsafe_arena_release_large_array();

  // @@protoc_insertion_point(class_scope:TSK.OperationStorageEntryArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeArray* large_array_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OperationStorageEntryArraySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OperationStorageEntryArraySegment) */ {
 public:
  inline OperationStorageEntryArraySegment() : OperationStorageEntryArraySegment(nullptr) {}
  ~OperationStorageEntryArraySegment() override;
  explicit constexpr OperationStorageEntryArraySegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStorageEntryArraySegment(const OperationStorageEntryArraySegment& from);
  OperationStorageEntryArraySegment(OperationStorageEntryArraySegment&& from) noexcept
    : OperationStorageEntryArraySegment() {
    *this = ::std::move(from);
  }

  inline OperationStorageEntryArraySegment& operator=(const OperationStorageEntryArraySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStorageEntryArraySegment& operator=(OperationStorageEntryArraySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStorageEntryArraySegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStorageEntryArraySegment* internal_default_instance() {
    return reinterpret_cast<const OperationStorageEntryArraySegment*>(
               &_OperationStorageEntryArraySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(OperationStorageEntryArraySegment& a, OperationStorageEntryArraySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStorageEntryArraySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStorageEntryArraySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStorageEntryArraySegment* New() const final {
    return CreateMaybeMessage<OperationStorageEntryArraySegment>(nullptr);
  }

  OperationStorageEntryArraySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStorageEntryArraySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStorageEntryArraySegment& from);
  void MergeFrom(const OperationStorageEntryArraySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStorageEntryArraySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OperationStorageEntryArraySegment";
  }
  protected:
  explicit OperationStorageEntryArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 2,
    kLargeArraySegmentFieldNumber = 1,
    kLastDocumentRevisionSequenceBeforeSegmentFieldNumber = 3,
    kLastDocumentRevisionSequenceFieldNumber = 4,
    kSegmentFirstEntryCreationTimeFieldNumber = 5,
  };
  // repeated .TSK.OperationStorageEntry elements = 2;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::TSK::OperationStorageEntry* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >*
      mutable_elements();
  private:
  const ::TSK::OperationStorageEntry& _internal_elements(int index) const;
  ::TSK::OperationStorageEntry* _internal_add_elements();
  public:
  const ::TSK::OperationStorageEntry& elements(int index) const;
  ::TSK::OperationStorageEntry* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >&
      elements() const;

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  bool has_large_array_segment() const;
  private:
  bool _internal_has_large_array_segment() const;
  public:
  void clear_large_array_segment();
  const ::TSP::LargeArraySegment& large_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeArraySegment* release_large_array_segment();
  ::TSP::LargeArraySegment* mutable_large_array_segment();
  void set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment);
  private:
  const ::TSP::LargeArraySegment& _internal_large_array_segment() const;
  ::TSP::LargeArraySegment* _internal_mutable_large_array_segment();
  public:
  void unsafe_arena_set_allocated_large_array_segment(
      ::TSP::LargeArraySegment* large_array_segment);
  ::TSP::LargeArraySegment* unsafe_arena_release_large_array_segment();

  // optional int32 last_document_revision_sequence_before_segment = 3;
  bool has_last_document_revision_sequence_before_segment() const;
  private:
  bool _internal_has_last_document_revision_sequence_before_segment() const;
  public:
  void clear_last_document_revision_sequence_before_segment();
  ::PROTOBUF_NAMESPACE_ID::int32 last_document_revision_sequence_before_segment() const;
  void set_last_document_revision_sequence_before_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_document_revision_sequence_before_segment() const;
  void _internal_set_last_document_revision_sequence_before_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 last_document_revision_sequence = 4;
  bool has_last_document_revision_sequence() const;
  private:
  bool _internal_has_last_document_revision_sequence() const;
  public:
  void clear_last_document_revision_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 last_document_revision_sequence() const;
  void set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_document_revision_sequence() const;
  void _internal_set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double segment_first_entry_creation_time = 5;
  bool has_segment_first_entry_creation_time() const;
  private:
  bool _internal_has_segment_first_entry_creation_time() const;
  public:
  void clear_segment_first_entry_creation_time();
  double segment_first_entry_creation_time() const;
  void set_segment_first_entry_creation_time(double value);
  private:
  double _internal_segment_first_entry_creation_time() const;
  void _internal_set_segment_first_entry_creation_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.OperationStorageEntryArraySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry > elements_;
  ::TSP::LargeArraySegment* large_array_segment_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_document_revision_sequence_before_segment_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_document_revision_sequence_;
  double segment_first_entry_creation_time_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OperationStorage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OperationStorage) */ {
 public:
  inline OperationStorage() : OperationStorage(nullptr) {}
  ~OperationStorage() override;
  explicit constexpr OperationStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationStorage(const OperationStorage& from);
  OperationStorage(OperationStorage&& from) noexcept
    : OperationStorage() {
    *this = ::std::move(from);
  }

  inline OperationStorage& operator=(const OperationStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationStorage& operator=(OperationStorage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationStorage* internal_default_instance() {
    return reinterpret_cast<const OperationStorage*>(
               &_OperationStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(OperationStorage& a, OperationStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationStorage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationStorage* New() const final {
    return CreateMaybeMessage<OperationStorage>(nullptr);
  }

  OperationStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationStorage& from);
  void MergeFrom(const OperationStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OperationStorage";
  }
  protected:
  explicit OperationStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastDocumentRevisionIdentifierFieldNumber = 4,
    kLastUnskippableDocumentRevisionBeforeEntriesIdentifierFieldNumber = 6,
    kLastUnskippableDocumentRevisionInEntriesIdentifierFieldNumber = 8,
    kEntriesFieldNumber = 1,
    kDaysWithAnEntryFieldNumber = 9,
    kOperationCountFieldNumber = 2,
    kLastDocumentRevisionSequenceFieldNumber = 3,
    kLastUnskippableDocumentRevisionBeforeEntriesSequenceFieldNumber = 5,
    kLastUnskippableDocumentRevisionInEntriesSequenceFieldNumber = 7,
  };
  // repeated fixed64 last_document_revision_identifier = 4 [packed = true];
  int last_document_revision_identifier_size() const;
  private:
  int _internal_last_document_revision_identifier_size() const;
  public:
  void clear_last_document_revision_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_document_revision_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_last_document_revision_identifier() const;
  void _internal_add_last_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_last_document_revision_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 last_document_revision_identifier(int index) const;
  void set_last_document_revision_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_last_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      last_document_revision_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_last_document_revision_identifier();

  // repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
  int last_unskippable_document_revision_before_entries_identifier_size() const;
  private:
  int _internal_last_unskippable_document_revision_before_entries_identifier_size() const;
  public:
  void clear_last_unskippable_document_revision_before_entries_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_unskippable_document_revision_before_entries_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_last_unskippable_document_revision_before_entries_identifier() const;
  void _internal_add_last_unskippable_document_revision_before_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_last_unskippable_document_revision_before_entries_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 last_unskippable_document_revision_before_entries_identifier(int index) const;
  void set_last_unskippable_document_revision_before_entries_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_last_unskippable_document_revision_before_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      last_unskippable_document_revision_before_entries_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_last_unskippable_document_revision_before_entries_identifier();

  // repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
  int last_unskippable_document_revision_in_entries_identifier_size() const;
  private:
  int _internal_last_unskippable_document_revision_in_entries_identifier_size() const;
  public:
  void clear_last_unskippable_document_revision_in_entries_identifier();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_unskippable_document_revision_in_entries_identifier(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_last_unskippable_document_revision_in_entries_identifier() const;
  void _internal_add_last_unskippable_document_revision_in_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_last_unskippable_document_revision_in_entries_identifier();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 last_unskippable_document_revision_in_entries_identifier(int index) const;
  void set_last_unskippable_document_revision_in_entries_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_last_unskippable_document_revision_in_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      last_unskippable_document_revision_in_entries_identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_last_unskippable_document_revision_in_entries_identifier();

  // required .TSP.Reference entries = 1;
  bool has_entries() const;
  private:
  bool _internal_has_entries() const;
  public:
  void clear_entries();
  const ::TSP::Reference& entries() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Reference* release_entries();
  ::TSP::Reference* mutable_entries();
  void set_allocated_entries(::TSP::Reference* entries);
  private:
  const ::TSP::Reference& _internal_entries() const;
  ::TSP::Reference* _internal_mutable_entries();
  public:
  void unsafe_arena_set_allocated_entries(
      ::TSP::Reference* entries);
  ::TSP::Reference* unsafe_arena_release_entries();

  // optional .TSP.IndexSet days_with_an_entry = 9;
  bool has_days_with_an_entry() const;
  private:
  bool _internal_has_days_with_an_entry() const;
  public:
  void clear_days_with_an_entry();
  const ::TSP::IndexSet& days_with_an_entry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::IndexSet* release_days_with_an_entry();
  ::TSP::IndexSet* mutable_days_with_an_entry();
  void set_allocated_days_with_an_entry(::TSP::IndexSet* days_with_an_entry);
  private:
  const ::TSP::IndexSet& _internal_days_with_an_entry() const;
  ::TSP::IndexSet* _internal_mutable_days_with_an_entry();
  public:
  void unsafe_arena_set_allocated_days_with_an_entry(
      ::TSP::IndexSet* days_with_an_entry);
  ::TSP::IndexSet* unsafe_arena_release_days_with_an_entry();

  // required uint64 operation_count = 2;
  bool has_operation_count() const;
  private:
  bool _internal_has_operation_count() const;
  public:
  void clear_operation_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 operation_count() const;
  void set_operation_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_operation_count() const;
  void _internal_set_operation_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 last_document_revision_sequence = 3;
  bool has_last_document_revision_sequence() const;
  private:
  bool _internal_has_last_document_revision_sequence() const;
  public:
  void clear_last_document_revision_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 last_document_revision_sequence() const;
  void set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_document_revision_sequence() const;
  void _internal_set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
  bool has_last_unskippable_document_revision_before_entries_sequence() const;
  private:
  bool _internal_has_last_unskippable_document_revision_before_entries_sequence() const;
  public:
  void clear_last_unskippable_document_revision_before_entries_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 last_unskippable_document_revision_before_entries_sequence() const;
  void set_last_unskippable_document_revision_before_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_unskippable_document_revision_before_entries_sequence() const;
  void _internal_set_last_unskippable_document_revision_before_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
  bool has_last_unskippable_document_revision_in_entries_sequence() const;
  private:
  bool _internal_has_last_unskippable_document_revision_in_entries_sequence() const;
  public:
  void clear_last_unskippable_document_revision_in_entries_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 last_unskippable_document_revision_in_entries_sequence() const;
  void set_last_unskippable_document_revision_in_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_unskippable_document_revision_in_entries_sequence() const;
  void _internal_set_last_unskippable_document_revision_in_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.OperationStorage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > last_document_revision_identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > last_unskippable_document_revision_before_entries_identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > last_unskippable_document_revision_in_entries_identifier_;
  ::TSP::Reference* entries_;
  ::TSP::IndexSet* days_with_an_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 operation_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_document_revision_sequence_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_unskippable_document_revision_before_entries_sequence_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_unskippable_document_revision_in_entries_sequence_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OutgoingCommandQueue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OutgoingCommandQueue) */ {
 public:
  inline OutgoingCommandQueue() : OutgoingCommandQueue(nullptr) {}
  ~OutgoingCommandQueue() override;
  explicit constexpr OutgoingCommandQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutgoingCommandQueue(const OutgoingCommandQueue& from);
  OutgoingCommandQueue(OutgoingCommandQueue&& from) noexcept
    : OutgoingCommandQueue() {
    *this = ::std::move(from);
  }

  inline OutgoingCommandQueue& operator=(const OutgoingCommandQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingCommandQueue& operator=(OutgoingCommandQueue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutgoingCommandQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutgoingCommandQueue* internal_default_instance() {
    return reinterpret_cast<const OutgoingCommandQueue*>(
               &_OutgoingCommandQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(OutgoingCommandQueue& a, OutgoingCommandQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingCommandQueue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutgoingCommandQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutgoingCommandQueue* New() const final {
    return CreateMaybeMessage<OutgoingCommandQueue>(nullptr);
  }

  OutgoingCommandQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingCommandQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutgoingCommandQueue& from);
  void MergeFrom(const OutgoingCommandQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutgoingCommandQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OutgoingCommandQueue";
  }
  protected:
  explicit OutgoingCommandQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeObjectArrayFieldNumber = 1,
  };
  // optional .TSP.LargeObjectArray large_object_array = 1;
  bool has_large_object_array() const;
  private:
  bool _internal_has_large_object_array() const;
  public:
  void clear_large_object_array();
  const ::TSP::LargeObjectArray& large_object_array() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeObjectArray* release_large_object_array();
  ::TSP::LargeObjectArray* mutable_large_object_array();
  void set_allocated_large_object_array(::TSP::LargeObjectArray* large_object_array);
  private:
  const ::TSP::LargeObjectArray& _internal_large_object_array() const;
  ::TSP::LargeObjectArray* _internal_mutable_large_object_array();
  public:
  void unsafe_arena_set_allocated_large_object_array(
      ::TSP::LargeObjectArray* large_object_array);
  ::TSP::LargeObjectArray* unsafe_arena_release_large_object_array();

  // @@protoc_insertion_point(class_scope:TSK.OutgoingCommandQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeObjectArray* large_object_array_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class OutgoingCommandQueueSegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.OutgoingCommandQueueSegment) */ {
 public:
  inline OutgoingCommandQueueSegment() : OutgoingCommandQueueSegment(nullptr) {}
  ~OutgoingCommandQueueSegment() override;
  explicit constexpr OutgoingCommandQueueSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutgoingCommandQueueSegment(const OutgoingCommandQueueSegment& from);
  OutgoingCommandQueueSegment(OutgoingCommandQueueSegment&& from) noexcept
    : OutgoingCommandQueueSegment() {
    *this = ::std::move(from);
  }

  inline OutgoingCommandQueueSegment& operator=(const OutgoingCommandQueueSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutgoingCommandQueueSegment& operator=(OutgoingCommandQueueSegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutgoingCommandQueueSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutgoingCommandQueueSegment* internal_default_instance() {
    return reinterpret_cast<const OutgoingCommandQueueSegment*>(
               &_OutgoingCommandQueueSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(OutgoingCommandQueueSegment& a, OutgoingCommandQueueSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(OutgoingCommandQueueSegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutgoingCommandQueueSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutgoingCommandQueueSegment* New() const final {
    return CreateMaybeMessage<OutgoingCommandQueueSegment>(nullptr);
  }

  OutgoingCommandQueueSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutgoingCommandQueueSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutgoingCommandQueueSegment& from);
  void MergeFrom(const OutgoingCommandQueueSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutgoingCommandQueueSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.OutgoingCommandQueueSegment";
  }
  protected:
  explicit OutgoingCommandQueueSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargeObjectArraySegmentFieldNumber = 1,
  };
  // optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
  bool has_large_object_array_segment() const;
  private:
  bool _internal_has_large_object_array_segment() const;
  public:
  void clear_large_object_array_segment();
  const ::TSP::LargeObjectArraySegment& large_object_array_segment() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::LargeObjectArraySegment* release_large_object_array_segment();
  ::TSP::LargeObjectArraySegment* mutable_large_object_array_segment();
  void set_allocated_large_object_array_segment(::TSP::LargeObjectArraySegment* large_object_array_segment);
  private:
  const ::TSP::LargeObjectArraySegment& _internal_large_object_array_segment() const;
  ::TSP::LargeObjectArraySegment* _internal_mutable_large_object_array_segment();
  public:
  void unsafe_arena_set_allocated_large_object_array_segment(
      ::TSP::LargeObjectArraySegment* large_object_array_segment);
  ::TSP::LargeObjectArraySegment* unsafe_arena_release_large_object_array_segment();

  // @@protoc_insertion_point(class_scope:TSK.OutgoingCommandQueueSegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::LargeObjectArraySegment* large_object_array_segment_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DataReferenceRecord_ContainerUUIDToReferencedDataPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair) */ {
 public:
  inline DataReferenceRecord_ContainerUUIDToReferencedDataPair() : DataReferenceRecord_ContainerUUIDToReferencedDataPair(nullptr) {}
  ~DataReferenceRecord_ContainerUUIDToReferencedDataPair() override;
  explicit constexpr DataReferenceRecord_ContainerUUIDToReferencedDataPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataReferenceRecord_ContainerUUIDToReferencedDataPair(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from);
  DataReferenceRecord_ContainerUUIDToReferencedDataPair(DataReferenceRecord_ContainerUUIDToReferencedDataPair&& from) noexcept
    : DataReferenceRecord_ContainerUUIDToReferencedDataPair() {
    *this = ::std::move(from);
  }

  inline DataReferenceRecord_ContainerUUIDToReferencedDataPair& operator=(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataReferenceRecord_ContainerUUIDToReferencedDataPair& operator=(DataReferenceRecord_ContainerUUIDToReferencedDataPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataReferenceRecord_ContainerUUIDToReferencedDataPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataReferenceRecord_ContainerUUIDToReferencedDataPair* internal_default_instance() {
    return reinterpret_cast<const DataReferenceRecord_ContainerUUIDToReferencedDataPair*>(
               &_DataReferenceRecord_ContainerUUIDToReferencedDataPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(DataReferenceRecord_ContainerUUIDToReferencedDataPair& a, DataReferenceRecord_ContainerUUIDToReferencedDataPair& b) {
    a.Swap(&b);
  }
  inline void Swap(DataReferenceRecord_ContainerUUIDToReferencedDataPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataReferenceRecord_ContainerUUIDToReferencedDataPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataReferenceRecord_ContainerUUIDToReferencedDataPair* New() const final {
    return CreateMaybeMessage<DataReferenceRecord_ContainerUUIDToReferencedDataPair>(nullptr);
  }

  DataReferenceRecord_ContainerUUIDToReferencedDataPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataReferenceRecord_ContainerUUIDToReferencedDataPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from);
  void MergeFrom(const DataReferenceRecord_ContainerUUIDToReferencedDataPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataReferenceRecord_ContainerUUIDToReferencedDataPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair";
  }
  protected:
  explicit DataReferenceRecord_ContainerUUIDToReferencedDataPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContainerUuidFieldNumber = 1,
    kReferencedDataFieldNumber = 2,
    kReferenceCountFieldNumber = 3,
  };
  // required .TSP.UUID container_uuid = 1;
  bool has_container_uuid() const;
  private:
  bool _internal_has_container_uuid() const;
  public:
  void clear_container_uuid();
  const ::TSP::UUID& container_uuid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::UUID* release_container_uuid();
  ::TSP::UUID* mutable_container_uuid();
  void set_allocated_container_uuid(::TSP::UUID* container_uuid);
  private:
  const ::TSP::UUID& _internal_container_uuid() const;
  ::TSP::UUID* _internal_mutable_container_uuid();
  public:
  void unsafe_arena_set_allocated_container_uuid(
      ::TSP::UUID* container_uuid);
  ::TSP::UUID* unsafe_arena_release_container_uuid();

  // required .TSP.DataReference referenced_data = 2;
  bool has_referenced_data() const;
  private:
  bool _internal_has_referenced_data() const;
  public:
  void clear_referenced_data();
  const ::TSP::DataReference& referenced_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::DataReference* release_referenced_data();
  ::TSP::DataReference* mutable_referenced_data();
  void set_allocated_referenced_data(::TSP::DataReference* referenced_data);
  private:
  const ::TSP::DataReference& _internal_referenced_data() const;
  ::TSP::DataReference* _internal_mutable_referenced_data();
  public:
  void unsafe_arena_set_allocated_referenced_data(
      ::TSP::DataReference* referenced_data);
  ::TSP::DataReference* unsafe_arena_release_referenced_data();

  // required uint32 reference_count = 3;
  bool has_reference_count() const;
  private:
  bool _internal_has_reference_count() const;
  public:
  void clear_reference_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 reference_count() const;
  void set_reference_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reference_count() const;
  void _internal_set_reference_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::UUID* container_uuid_;
  ::TSP::DataReference* referenced_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reference_count_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class DataReferenceRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.DataReferenceRecord) */ {
 public:
  inline DataReferenceRecord() : DataReferenceRecord(nullptr) {}
  ~DataReferenceRecord() override;
  explicit constexpr DataReferenceRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataReferenceRecord(const DataReferenceRecord& from);
  DataReferenceRecord(DataReferenceRecord&& from) noexcept
    : DataReferenceRecord() {
    *this = ::std::move(from);
  }

  inline DataReferenceRecord& operator=(const DataReferenceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataReferenceRecord& operator=(DataReferenceRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataReferenceRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataReferenceRecord* internal_default_instance() {
    return reinterpret_cast<const DataReferenceRecord*>(
               &_DataReferenceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(DataReferenceRecord& a, DataReferenceRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(DataReferenceRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataReferenceRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataReferenceRecord* New() const final {
    return CreateMaybeMessage<DataReferenceRecord>(nullptr);
  }

  DataReferenceRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataReferenceRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataReferenceRecord& from);
  void MergeFrom(const DataReferenceRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataReferenceRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.DataReferenceRecord";
  }
  protected:
  explicit DataReferenceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataReferenceRecord_ContainerUUIDToReferencedDataPair ContainerUUIDToReferencedDataPair;

  // accessors -------------------------------------------------------

  enum : int {
    kAddedContainerUuidToReferencedDataPairsFieldNumber = 1,
    kRemovedContainerUuidToReferencedDataPairsFieldNumber = 2,
    kUnboundedReferencedDatasFieldNumber = 3,
  };
  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
  int added_container_uuid_to_referenced_data_pairs_size() const;
  private:
  int _internal_added_container_uuid_to_referenced_data_pairs_size() const;
  public:
  void clear_added_container_uuid_to_referenced_data_pairs();
  ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* mutable_added_container_uuid_to_referenced_data_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >*
      mutable_added_container_uuid_to_referenced_data_pairs();
  private:
  const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& _internal_added_container_uuid_to_referenced_data_pairs(int index) const;
  ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* _internal_add_added_container_uuid_to_referenced_data_pairs();
  public:
  const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& added_container_uuid_to_referenced_data_pairs(int index) const;
  ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* add_added_container_uuid_to_referenced_data_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >&
      added_container_uuid_to_referenced_data_pairs() const;

  // repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
  int removed_container_uuid_to_referenced_data_pairs_size() const;
  private:
  int _internal_removed_container_uuid_to_referenced_data_pairs_size() const;
  public:
  void clear_removed_container_uuid_to_referenced_data_pairs();
  ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* mutable_removed_container_uuid_to_referenced_data_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >*
      mutable_removed_container_uuid_to_referenced_data_pairs();
  private:
  const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& _internal_removed_container_uuid_to_referenced_data_pairs(int index) const;
  ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* _internal_add_removed_container_uuid_to_referenced_data_pairs();
  public:
  const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& removed_container_uuid_to_referenced_data_pairs(int index) const;
  ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* add_removed_container_uuid_to_referenced_data_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >&
      removed_container_uuid_to_referenced_data_pairs() const;

  // repeated .TSP.DataReference unbounded_referenced_datas = 3;
  int unbounded_referenced_datas_size() const;
  private:
  int _internal_unbounded_referenced_datas_size() const;
  public:
  void clear_unbounded_referenced_datas();
  ::TSP::DataReference* mutable_unbounded_referenced_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
      mutable_unbounded_referenced_datas();
  private:
  const ::TSP::DataReference& _internal_unbounded_referenced_datas(int index) const;
  ::TSP::DataReference* _internal_add_unbounded_referenced_datas();
  public:
  const ::TSP::DataReference& unbounded_referenced_datas(int index) const;
  ::TSP::DataReference* add_unbounded_referenced_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
      unbounded_referenced_datas() const;

  // @@protoc_insertion_point(class_scope:TSK.DataReferenceRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair > added_container_uuid_to_referenced_data_pairs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair > removed_container_uuid_to_referenced_data_pairs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference > unbounded_referenced_datas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class CommandAssetChunkArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.CommandAssetChunkArchive) */ {
 public:
  inline CommandAssetChunkArchive() : CommandAssetChunkArchive(nullptr) {}
  ~CommandAssetChunkArchive() override;
  explicit constexpr CommandAssetChunkArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAssetChunkArchive(const CommandAssetChunkArchive& from);
  CommandAssetChunkArchive(CommandAssetChunkArchive&& from) noexcept
    : CommandAssetChunkArchive() {
    *this = ::std::move(from);
  }

  inline CommandAssetChunkArchive& operator=(const CommandAssetChunkArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAssetChunkArchive& operator=(CommandAssetChunkArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandAssetChunkArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAssetChunkArchive* internal_default_instance() {
    return reinterpret_cast<const CommandAssetChunkArchive*>(
               &_CommandAssetChunkArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CommandAssetChunkArchive& a, CommandAssetChunkArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAssetChunkArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAssetChunkArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAssetChunkArchive* New() const final {
    return CreateMaybeMessage<CommandAssetChunkArchive>(nullptr);
  }

  CommandAssetChunkArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAssetChunkArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandAssetChunkArchive& from);
  void MergeFrom(const CommandAssetChunkArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAssetChunkArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.CommandAssetChunkArchive";
  }
  protected:
  explicit CommandAssetChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 2,
    kAssetChunkFieldNumber = 3,
    kSuperFieldNumber = 1,
    kAssetChunkLengthFieldNumber = 4,
    kResumePositionFieldNumber = 5,
    kMaterializedLengthFieldNumber = 6,
  };
  // optional string digest = 2;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional string asset_chunk = 3;
  bool has_asset_chunk() const;
  private:
  bool _internal_has_asset_chunk() const;
  public:
  void clear_asset_chunk();
  const std::string& asset_chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset_chunk();
  std::string* release_asset_chunk();
  void set_allocated_asset_chunk(std::string* asset_chunk);
  private:
  const std::string& _internal_asset_chunk() const;
  void _internal_set_asset_chunk(const std::string& value);
  std::string* _internal_mutable_asset_chunk();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required int64 asset_chunk_length = 4;
  bool has_asset_chunk_length() const;
  private:
  bool _internal_has_asset_chunk_length() const;
  public:
  void clear_asset_chunk_length();
  ::PROTOBUF_NAMESPACE_ID::int64 asset_chunk_length() const;
  void set_asset_chunk_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_asset_chunk_length() const;
  void _internal_set_asset_chunk_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 resume_position = 5;
  bool has_resume_position() const;
  private:
  bool _internal_has_resume_position() const;
  public:
  void clear_resume_position();
  ::PROTOBUF_NAMESPACE_ID::int64 resume_position() const;
  void set_resume_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resume_position() const;
  void _internal_set_resume_position(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 materialized_length = 6;
  bool has_materialized_length() const;
  private:
  bool _internal_has_materialized_length() const;
  public:
  void clear_materialized_length();
  ::PROTOBUF_NAMESPACE_ID::int64 materialized_length() const;
  void set_materialized_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_materialized_length() const;
  void _internal_set_materialized_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.CommandAssetChunkArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_chunk_;
  ::TSK::CommandArchive* super_;
  ::PROTOBUF_NAMESPACE_ID::int64 asset_chunk_length_;
  ::PROTOBUF_NAMESPACE_ID::int64 resume_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 materialized_length_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class AssetUploadStatusCommandArchive_AssetUploadStatusInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo) */ {
 public:
  inline AssetUploadStatusCommandArchive_AssetUploadStatusInfo() : AssetUploadStatusCommandArchive_AssetUploadStatusInfo(nullptr) {}
  ~AssetUploadStatusCommandArchive_AssetUploadStatusInfo() override;
  explicit constexpr AssetUploadStatusCommandArchive_AssetUploadStatusInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetUploadStatusCommandArchive_AssetUploadStatusInfo(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from);
  AssetUploadStatusCommandArchive_AssetUploadStatusInfo(AssetUploadStatusCommandArchive_AssetUploadStatusInfo&& from) noexcept
    : AssetUploadStatusCommandArchive_AssetUploadStatusInfo() {
    *this = ::std::move(from);
  }

  inline AssetUploadStatusCommandArchive_AssetUploadStatusInfo& operator=(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetUploadStatusCommandArchive_AssetUploadStatusInfo& operator=(AssetUploadStatusCommandArchive_AssetUploadStatusInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetUploadStatusCommandArchive_AssetUploadStatusInfo* internal_default_instance() {
    return reinterpret_cast<const AssetUploadStatusCommandArchive_AssetUploadStatusInfo*>(
               &_AssetUploadStatusCommandArchive_AssetUploadStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(AssetUploadStatusCommandArchive_AssetUploadStatusInfo& a, AssetUploadStatusCommandArchive_AssetUploadStatusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetUploadStatusCommandArchive_AssetUploadStatusInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetUploadStatusCommandArchive_AssetUploadStatusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetUploadStatusCommandArchive_AssetUploadStatusInfo* New() const final {
    return CreateMaybeMessage<AssetUploadStatusCommandArchive_AssetUploadStatusInfo>(nullptr);
  }

  AssetUploadStatusCommandArchive_AssetUploadStatusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetUploadStatusCommandArchive_AssetUploadStatusInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from);
  void MergeFrom(const AssetUploadStatusCommandArchive_AssetUploadStatusInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetUploadStatusCommandArchive_AssetUploadStatusInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo";
  }
  protected:
  explicit AssetUploadStatusCommandArchive_AssetUploadStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 1,
    kUploadStatusFieldNumber = 2,
  };
  // optional string digest = 1;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // optional .TSP.DataUploadStatus upload_status = 2;
  bool has_upload_status() const;
  private:
  bool _internal_has_upload_status() const;
  public:
  void clear_upload_status();
  ::TSP::DataUploadStatus upload_status() const;
  void set_upload_status(::TSP::DataUploadStatus value);
  private:
  ::TSP::DataUploadStatus _internal_upload_status() const;
  void _internal_set_upload_status(::TSP::DataUploadStatus value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  int upload_status_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class AssetUploadStatusCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.AssetUploadStatusCommandArchive) */ {
 public:
  inline AssetUploadStatusCommandArchive() : AssetUploadStatusCommandArchive(nullptr) {}
  ~AssetUploadStatusCommandArchive() override;
  explicit constexpr AssetUploadStatusCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetUploadStatusCommandArchive(const AssetUploadStatusCommandArchive& from);
  AssetUploadStatusCommandArchive(AssetUploadStatusCommandArchive&& from) noexcept
    : AssetUploadStatusCommandArchive() {
    *this = ::std::move(from);
  }

  inline AssetUploadStatusCommandArchive& operator=(const AssetUploadStatusCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetUploadStatusCommandArchive& operator=(AssetUploadStatusCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetUploadStatusCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetUploadStatusCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AssetUploadStatusCommandArchive*>(
               &_AssetUploadStatusCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(AssetUploadStatusCommandArchive& a, AssetUploadStatusCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetUploadStatusCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetUploadStatusCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetUploadStatusCommandArchive* New() const final {
    return CreateMaybeMessage<AssetUploadStatusCommandArchive>(nullptr);
  }

  AssetUploadStatusCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetUploadStatusCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetUploadStatusCommandArchive& from);
  void MergeFrom(const AssetUploadStatusCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetUploadStatusCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.AssetUploadStatusCommandArchive";
  }
  protected:
  explicit AssetUploadStatusCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AssetUploadStatusCommandArchive_AssetUploadStatusInfo AssetUploadStatusInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
  int info_list_size() const;
  private:
  int _internal_info_list_size() const;
  public:
  void clear_info_list();
  ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* mutable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >*
      mutable_info_list();
  private:
  const ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo& _internal_info_list(int index) const;
  ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* _internal_add_info_list();
  public:
  const ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo& info_list(int index) const;
  ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* add_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >&
      info_list() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.AssetUploadStatusCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo > info_list_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class AssetUnmaterializedOnServerCommandArchive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.AssetUnmaterializedOnServerCommandArchive) */ {
 public:
  inline AssetUnmaterializedOnServerCommandArchive() : AssetUnmaterializedOnServerCommandArchive(nullptr) {}
  ~AssetUnmaterializedOnServerCommandArchive() override;
  explicit constexpr AssetUnmaterializedOnServerCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetUnmaterializedOnServerCommandArchive(const AssetUnmaterializedOnServerCommandArchive& from);
  AssetUnmaterializedOnServerCommandArchive(AssetUnmaterializedOnServerCommandArchive&& from) noexcept
    : AssetUnmaterializedOnServerCommandArchive() {
    *this = ::std::move(from);
  }

  inline AssetUnmaterializedOnServerCommandArchive& operator=(const AssetUnmaterializedOnServerCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetUnmaterializedOnServerCommandArchive& operator=(AssetUnmaterializedOnServerCommandArchive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetUnmaterializedOnServerCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetUnmaterializedOnServerCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AssetUnmaterializedOnServerCommandArchive*>(
               &_AssetUnmaterializedOnServerCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AssetUnmaterializedOnServerCommandArchive& a, AssetUnmaterializedOnServerCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetUnmaterializedOnServerCommandArchive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetUnmaterializedOnServerCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssetUnmaterializedOnServerCommandArchive* New() const final {
    return CreateMaybeMessage<AssetUnmaterializedOnServerCommandArchive>(nullptr);
  }

  AssetUnmaterializedOnServerCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetUnmaterializedOnServerCommandArchive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetUnmaterializedOnServerCommandArchive& from);
  void MergeFrom(const AssetUnmaterializedOnServerCommandArchive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetUnmaterializedOnServerCommandArchive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.AssetUnmaterializedOnServerCommandArchive";
  }
  protected:
  explicit AssetUnmaterializedOnServerCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestListFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated string digest_list = 2;
  int digest_list_size() const;
  private:
  int _internal_digest_list_size() const;
  public:
  void clear_digest_list();
  const std::string& digest_list(int index) const;
  std::string* mutable_digest_list(int index);
  void set_digest_list(int index, const std::string& value);
  void set_digest_list(int index, std::string&& value);
  void set_digest_list(int index, const char* value);
  void set_digest_list(int index, const char* value, size_t size);
  std::string* add_digest_list();
  void add_digest_list(const std::string& value);
  void add_digest_list(std::string&& value);
  void add_digest_list(const char* value);
  void add_digest_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& digest_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_digest_list();
  private:
  const std::string& _internal_digest_list(int index) const;
  std::string* _internal_add_digest_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSK.AssetUnmaterializedOnServerCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> digest_list_;
  ::TSK::CommandArchive* super_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// -------------------------------------------------------------------

class PencilAnnotationUIState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSK.PencilAnnotationUIState) */ {
 public:
  inline PencilAnnotationUIState() : PencilAnnotationUIState(nullptr) {}
  ~PencilAnnotationUIState() override;
  explicit constexpr PencilAnnotationUIState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PencilAnnotationUIState(const PencilAnnotationUIState& from);
  PencilAnnotationUIState(PencilAnnotationUIState&& from) noexcept
    : PencilAnnotationUIState() {
    *this = ::std::move(from);
  }

  inline PencilAnnotationUIState& operator=(const PencilAnnotationUIState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PencilAnnotationUIState& operator=(PencilAnnotationUIState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PencilAnnotationUIState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PencilAnnotationUIState* internal_default_instance() {
    return reinterpret_cast<const PencilAnnotationUIState*>(
               &_PencilAnnotationUIState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PencilAnnotationUIState& a, PencilAnnotationUIState& b) {
    a.Swap(&b);
  }
  inline void Swap(PencilAnnotationUIState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PencilAnnotationUIState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PencilAnnotationUIState* New() const final {
    return CreateMaybeMessage<PencilAnnotationUIState>(nullptr);
  }

  PencilAnnotationUIState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PencilAnnotationUIState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PencilAnnotationUIState& from);
  void MergeFrom(const PencilAnnotationUIState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PencilAnnotationUIState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSK.PencilAnnotationUIState";
  }
  protected:
  explicit PencilAnnotationUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationToolType;
  static constexpr PencilAnnotationToolType Pen =
    PencilAnnotationUIState_PencilAnnotationToolType_Pen;
  static constexpr PencilAnnotationToolType Highlighter =
    PencilAnnotationUIState_PencilAnnotationToolType_Highlighter;
  static inline bool PencilAnnotationToolType_IsValid(int value) {
    return PencilAnnotationUIState_PencilAnnotationToolType_IsValid(value);
  }
  static constexpr PencilAnnotationToolType PencilAnnotationToolType_MIN =
    PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_MIN;
  static constexpr PencilAnnotationToolType PencilAnnotationToolType_MAX =
    PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_MAX;
  static constexpr int PencilAnnotationToolType_ARRAYSIZE =
    PencilAnnotationUIState_PencilAnnotationToolType_PencilAnnotationToolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PencilAnnotationToolType_descriptor() {
    return PencilAnnotationUIState_PencilAnnotationToolType_descriptor();
  }
  template<typename T>
  static inline const std::string& PencilAnnotationToolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PencilAnnotationToolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PencilAnnotationToolType_Name.");
    return PencilAnnotationUIState_PencilAnnotationToolType_Name(enum_t_value);
  }
  static inline bool PencilAnnotationToolType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PencilAnnotationToolType* value) {
    return PencilAnnotationUIState_PencilAnnotationToolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPenToolColorFieldNumber = 2,
    kHighlighterToolColorFieldNumber = 5,
    kCurrentToolTypeFieldNumber = 1,
    kPenToolOpacityFieldNumber = 3,
    kPenToolWidthFieldNumber = 4,
    kHighlighterToolOpacityFieldNumber = 6,
    kHighlighterToolWidthFieldNumber = 7,
  };
  // optional .TSP.Color pen_tool_color = 2;
  bool has_pen_tool_color() const;
  private:
  bool _internal_has_pen_tool_color() const;
  public:
  void clear_pen_tool_color();
  const ::TSP::Color& pen_tool_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_pen_tool_color();
  ::TSP::Color* mutable_pen_tool_color();
  void set_allocated_pen_tool_color(::TSP::Color* pen_tool_color);
  private:
  const ::TSP::Color& _internal_pen_tool_color() const;
  ::TSP::Color* _internal_mutable_pen_tool_color();
  public:
  void unsafe_arena_set_allocated_pen_tool_color(
      ::TSP::Color* pen_tool_color);
  ::TSP::Color* unsafe_arena_release_pen_tool_color();

  // optional .TSP.Color highlighter_tool_color = 5;
  bool has_highlighter_tool_color() const;
  private:
  bool _internal_has_highlighter_tool_color() const;
  public:
  void clear_highlighter_tool_color();
  const ::TSP::Color& highlighter_tool_color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::TSP::Color* release_highlighter_tool_color();
  ::TSP::Color* mutable_highlighter_tool_color();
  void set_allocated_highlighter_tool_color(::TSP::Color* highlighter_tool_color);
  private:
  const ::TSP::Color& _internal_highlighter_tool_color() const;
  ::TSP::Color* _internal_mutable_highlighter_tool_color();
  public:
  void unsafe_arena_set_allocated_highlighter_tool_color(
      ::TSP::Color* highlighter_tool_color);
  ::TSP::Color* unsafe_arena_release_highlighter_tool_color();

  // optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
  bool has_current_tool_type() const;
  private:
  bool _internal_has_current_tool_type() const;
  public:
  void clear_current_tool_type();
  ::TSK::PencilAnnotationUIState_PencilAnnotationToolType current_tool_type() const;
  void set_current_tool_type(::TSK::PencilAnnotationUIState_PencilAnnotationToolType value);
  private:
  ::TSK::PencilAnnotationUIState_PencilAnnotationToolType _internal_current_tool_type() const;
  void _internal_set_current_tool_type(::TSK::PencilAnnotationUIState_PencilAnnotationToolType value);
  public:

  // optional float pen_tool_opacity = 3;
  bool has_pen_tool_opacity() const;
  private:
  bool _internal_has_pen_tool_opacity() const;
  public:
  void clear_pen_tool_opacity();
  float pen_tool_opacity() const;
  void set_pen_tool_opacity(float value);
  private:
  float _internal_pen_tool_opacity() const;
  void _internal_set_pen_tool_opacity(float value);
  public:

  // optional float pen_tool_width = 4;
  bool has_pen_tool_width() const;
  private:
  bool _internal_has_pen_tool_width() const;
  public:
  void clear_pen_tool_width();
  float pen_tool_width() const;
  void set_pen_tool_width(float value);
  private:
  float _internal_pen_tool_width() const;
  void _internal_set_pen_tool_width(float value);
  public:

  // optional float highlighter_tool_opacity = 6;
  bool has_highlighter_tool_opacity() const;
  private:
  bool _internal_has_highlighter_tool_opacity() const;
  public:
  void clear_highlighter_tool_opacity();
  float highlighter_tool_opacity() const;
  void set_highlighter_tool_opacity(float value);
  private:
  float _internal_highlighter_tool_opacity() const;
  void _internal_set_highlighter_tool_opacity(float value);
  public:

  // optional float highlighter_tool_width = 7;
  bool has_highlighter_tool_width() const;
  private:
  bool _internal_has_highlighter_tool_width() const;
  public:
  void clear_highlighter_tool_width();
  float highlighter_tool_width() const;
  void set_highlighter_tool_width(float value);
  private:
  float _internal_highlighter_tool_width() const;
  void _internal_set_highlighter_tool_width(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSK.PencilAnnotationUIState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::TSP::Color* pen_tool_color_;
  ::TSP::Color* highlighter_tool_color_;
  int current_tool_type_;
  float pen_tool_opacity_;
  float pen_tool_width_;
  float highlighter_tool_opacity_;
  float highlighter_tool_width_;
  friend struct ::TableStruct_TSKArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TreeNode

// optional string name = 1;
inline bool TreeNode::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TreeNode::has_name() const {
  return _internal_has_name();
}
inline void TreeNode::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TreeNode::name() const {
  // @@protoc_insertion_point(field_get:TSK.TreeNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void TreeNode::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.TreeNode.name)
}
inline std::string* TreeNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSK.TreeNode.name)
  return _internal_mutable_name();
}
inline const std::string& TreeNode::_internal_name() const {
  return name_.Get();
}
inline void TreeNode::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* TreeNode::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TreeNode::release_name() {
  // @@protoc_insertion_point(field_release:TSK.TreeNode.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TreeNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.TreeNode.name)
}

// repeated .TSP.Reference children = 2;
inline int TreeNode::_internal_children_size() const {
  return children_.size();
}
inline int TreeNode::children_size() const {
  return _internal_children_size();
}
inline ::TSP::Reference* TreeNode::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.TreeNode.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
TreeNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:TSK.TreeNode.children)
  return &children_;
}
inline const ::TSP::Reference& TreeNode::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::TSP::Reference& TreeNode::children(int index) const {
  // @@protoc_insertion_point(field_get:TSK.TreeNode.children)
  return _internal_children(index);
}
inline ::TSP::Reference* TreeNode::_internal_add_children() {
  return children_.Add();
}
inline ::TSP::Reference* TreeNode::add_children() {
  // @@protoc_insertion_point(field_add:TSK.TreeNode.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
TreeNode::children() const {
  // @@protoc_insertion_point(field_list:TSK.TreeNode.children)
  return children_;
}

// optional .TSP.Reference object = 3;
inline bool TreeNode::_internal_has_object() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || object_ != nullptr);
  return value;
}
inline bool TreeNode::has_object() const {
  return _internal_has_object();
}
inline const ::TSP::Reference& TreeNode::_internal_object() const {
  const ::TSP::Reference* p = object_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TreeNode::object() const {
  // @@protoc_insertion_point(field_get:TSK.TreeNode.object)
  return _internal_object();
}
inline void TreeNode::unsafe_arena_set_allocated_object(
    ::TSP::Reference* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.TreeNode.object)
}
inline ::TSP::Reference* TreeNode::release_object() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* TreeNode::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:TSK.TreeNode.object)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TreeNode::_internal_mutable_object() {
  _has_bits_[0] |= 0x00000002u;
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::TSP::Reference* TreeNode::mutable_object() {
  // @@protoc_insertion_point(field_mutable:TSK.TreeNode.object)
  return _internal_mutable_object();
}
inline void TreeNode::set_allocated_object(::TSP::Reference* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object)->GetArena();
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:TSK.TreeNode.object)
}

// -------------------------------------------------------------------

// LocalCommandHistoryItem

// optional .TSP.Reference command = 1;
inline bool LocalCommandHistoryItem::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || command_ != nullptr);
  return value;
}
inline bool LocalCommandHistoryItem::has_command() const {
  return _internal_has_command();
}
inline const ::TSP::Reference& LocalCommandHistoryItem::_internal_command() const {
  const ::TSP::Reference* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& LocalCommandHistoryItem::command() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistoryItem.command)
  return _internal_command();
}
inline void LocalCommandHistoryItem::unsafe_arena_set_allocated_command(
    ::TSP::Reference* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.LocalCommandHistoryItem.command)
}
inline ::TSP::Reference* LocalCommandHistoryItem::release_command() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* LocalCommandHistoryItem::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:TSK.LocalCommandHistoryItem.command)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* LocalCommandHistoryItem::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::TSP::Reference* LocalCommandHistoryItem::mutable_command() {
  // @@protoc_insertion_point(field_mutable:TSK.LocalCommandHistoryItem.command)
  return _internal_mutable_command();
}
inline void LocalCommandHistoryItem::set_allocated_command(::TSP::Reference* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:TSK.LocalCommandHistoryItem.command)
}

// optional .TSP.Reference selection_behavior = 2;
inline bool LocalCommandHistoryItem::_internal_has_selection_behavior() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || selection_behavior_ != nullptr);
  return value;
}
inline bool LocalCommandHistoryItem::has_selection_behavior() const {
  return _internal_has_selection_behavior();
}
inline const ::TSP::Reference& LocalCommandHistoryItem::_internal_selection_behavior() const {
  const ::TSP::Reference* p = selection_behavior_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& LocalCommandHistoryItem::selection_behavior() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistoryItem.selection_behavior)
  return _internal_selection_behavior();
}
inline void LocalCommandHistoryItem::unsafe_arena_set_allocated_selection_behavior(
    ::TSP::Reference* selection_behavior) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_behavior_);
  }
  selection_behavior_ = selection_behavior;
  if (selection_behavior) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.LocalCommandHistoryItem.selection_behavior)
}
inline ::TSP::Reference* LocalCommandHistoryItem::release_selection_behavior() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = selection_behavior_;
  selection_behavior_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* LocalCommandHistoryItem::unsafe_arena_release_selection_behavior() {
  // @@protoc_insertion_point(field_release:TSK.LocalCommandHistoryItem.selection_behavior)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = selection_behavior_;
  selection_behavior_ = nullptr;
  return temp;
}
inline ::TSP::Reference* LocalCommandHistoryItem::_internal_mutable_selection_behavior() {
  _has_bits_[0] |= 0x00000002u;
  if (selection_behavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_behavior_ = p;
  }
  return selection_behavior_;
}
inline ::TSP::Reference* LocalCommandHistoryItem::mutable_selection_behavior() {
  // @@protoc_insertion_point(field_mutable:TSK.LocalCommandHistoryItem.selection_behavior)
  return _internal_mutable_selection_behavior();
}
inline void LocalCommandHistoryItem::set_allocated_selection_behavior(::TSP::Reference* selection_behavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_behavior_);
  }
  if (selection_behavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_behavior)->GetArena();
    if (message_arena != submessage_arena) {
      selection_behavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_behavior, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  selection_behavior_ = selection_behavior;
  // @@protoc_insertion_point(field_set_allocated:TSK.LocalCommandHistoryItem.selection_behavior)
}

// -------------------------------------------------------------------

// LocalCommandHistoryArray

// required .TSP.LargeArray large_array = 1;
inline bool LocalCommandHistoryArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool LocalCommandHistoryArray::has_large_array() const {
  return _internal_has_large_array();
}
inline const ::TSP::LargeArray& LocalCommandHistoryArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& LocalCommandHistoryArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistoryArray.large_array)
  return _internal_large_array();
}
inline void LocalCommandHistoryArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.LocalCommandHistoryArray.large_array)
}
inline ::TSP::LargeArray* LocalCommandHistoryArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* LocalCommandHistoryArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSK.LocalCommandHistoryArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* LocalCommandHistoryArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* LocalCommandHistoryArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSK.LocalCommandHistoryArray.large_array)
  return _internal_mutable_large_array();
}
inline void LocalCommandHistoryArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array)->GetArena();
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSK.LocalCommandHistoryArray.large_array)
}

// -------------------------------------------------------------------

// LocalCommandHistoryArraySegment

// required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
inline bool LocalCommandHistoryArraySegment::_internal_has_large_object_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_object_array_segment_ != nullptr);
  return value;
}
inline bool LocalCommandHistoryArraySegment::has_large_object_array_segment() const {
  return _internal_has_large_object_array_segment();
}
inline const ::TSP::LargeObjectArraySegment& LocalCommandHistoryArraySegment::_internal_large_object_array_segment() const {
  const ::TSP::LargeObjectArraySegment* p = large_object_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeObjectArraySegment&>(
      ::TSP::_LargeObjectArraySegment_default_instance_);
}
inline const ::TSP::LargeObjectArraySegment& LocalCommandHistoryArraySegment::large_object_array_segment() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistoryArraySegment.large_object_array_segment)
  return _internal_large_object_array_segment();
}
inline void LocalCommandHistoryArraySegment::unsafe_arena_set_allocated_large_object_array_segment(
    ::TSP::LargeObjectArraySegment* large_object_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment_);
  }
  large_object_array_segment_ = large_object_array_segment;
  if (large_object_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.LocalCommandHistoryArraySegment.large_object_array_segment)
}
inline ::TSP::LargeObjectArraySegment* LocalCommandHistoryArraySegment::release_large_object_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArraySegment* temp = large_object_array_segment_;
  large_object_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeObjectArraySegment* LocalCommandHistoryArraySegment::unsafe_arena_release_large_object_array_segment() {
  // @@protoc_insertion_point(field_release:TSK.LocalCommandHistoryArraySegment.large_object_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArraySegment* temp = large_object_array_segment_;
  large_object_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeObjectArraySegment* LocalCommandHistoryArraySegment::_internal_mutable_large_object_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_object_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeObjectArraySegment>(GetArena());
    large_object_array_segment_ = p;
  }
  return large_object_array_segment_;
}
inline ::TSP::LargeObjectArraySegment* LocalCommandHistoryArraySegment::mutable_large_object_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSK.LocalCommandHistoryArraySegment.large_object_array_segment)
  return _internal_mutable_large_object_array_segment();
}
inline void LocalCommandHistoryArraySegment::set_allocated_large_object_array_segment(::TSP::LargeObjectArraySegment* large_object_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment_);
  }
  if (large_object_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment)->GetArena();
    if (message_arena != submessage_arena) {
      large_object_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_object_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_object_array_segment_ = large_object_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSK.LocalCommandHistoryArraySegment.large_object_array_segment)
}

// -------------------------------------------------------------------

// LocalCommandHistory

// required uint32 undo_count = 1;
inline bool LocalCommandHistory::_internal_has_undo_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalCommandHistory::has_undo_count() const {
  return _internal_has_undo_count();
}
inline void LocalCommandHistory::clear_undo_count() {
  undo_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalCommandHistory::_internal_undo_count() const {
  return undo_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalCommandHistory::undo_count() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistory.undo_count)
  return _internal_undo_count();
}
inline void LocalCommandHistory::_internal_set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  undo_count_ = value;
}
inline void LocalCommandHistory::set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_count(value);
  // @@protoc_insertion_point(field_set:TSK.LocalCommandHistory.undo_count)
}

// optional .TSP.Reference items_array = 2;
inline bool LocalCommandHistory::_internal_has_items_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || items_array_ != nullptr);
  return value;
}
inline bool LocalCommandHistory::has_items_array() const {
  return _internal_has_items_array();
}
inline const ::TSP::Reference& LocalCommandHistory::_internal_items_array() const {
  const ::TSP::Reference* p = items_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& LocalCommandHistory::items_array() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistory.items_array)
  return _internal_items_array();
}
inline void LocalCommandHistory::unsafe_arena_set_allocated_items_array(
    ::TSP::Reference* items_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_array_);
  }
  items_array_ = items_array;
  if (items_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.LocalCommandHistory.items_array)
}
inline ::TSP::Reference* LocalCommandHistory::release_items_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = items_array_;
  items_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* LocalCommandHistory::unsafe_arena_release_items_array() {
  // @@protoc_insertion_point(field_release:TSK.LocalCommandHistory.items_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = items_array_;
  items_array_ = nullptr;
  return temp;
}
inline ::TSP::Reference* LocalCommandHistory::_internal_mutable_items_array() {
  _has_bits_[0] |= 0x00000001u;
  if (items_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    items_array_ = p;
  }
  return items_array_;
}
inline ::TSP::Reference* LocalCommandHistory::mutable_items_array() {
  // @@protoc_insertion_point(field_mutable:TSK.LocalCommandHistory.items_array)
  return _internal_mutable_items_array();
}
inline void LocalCommandHistory::set_allocated_items_array(::TSP::Reference* items_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_array_);
  }
  if (items_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_array)->GetArena();
    if (message_arena != submessage_arena) {
      items_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, items_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  items_array_ = items_array;
  // @@protoc_insertion_point(field_set_allocated:TSK.LocalCommandHistory.items_array)
}

// optional bool fixed_radar_13365177 = 10;
inline bool LocalCommandHistory::_internal_has_fixed_radar_13365177() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LocalCommandHistory::has_fixed_radar_13365177() const {
  return _internal_has_fixed_radar_13365177();
}
inline void LocalCommandHistory::clear_fixed_radar_13365177() {
  fixed_radar_13365177_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LocalCommandHistory::_internal_fixed_radar_13365177() const {
  return fixed_radar_13365177_;
}
inline bool LocalCommandHistory::fixed_radar_13365177() const {
  // @@protoc_insertion_point(field_get:TSK.LocalCommandHistory.fixed_radar_13365177)
  return _internal_fixed_radar_13365177();
}
inline void LocalCommandHistory::_internal_set_fixed_radar_13365177(bool value) {
  _has_bits_[0] |= 0x00000004u;
  fixed_radar_13365177_ = value;
}
inline void LocalCommandHistory::set_fixed_radar_13365177(bool value) {
  _internal_set_fixed_radar_13365177(value);
  // @@protoc_insertion_point(field_set:TSK.LocalCommandHistory.fixed_radar_13365177)
}

// -------------------------------------------------------------------

// CollaborationCommandHistoryArray

// required .TSP.LargeArray large_array = 1;
inline bool CollaborationCommandHistoryArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryArray::has_large_array() const {
  return _internal_has_large_array();
}
inline const ::TSP::LargeArray& CollaborationCommandHistoryArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& CollaborationCommandHistoryArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryArray.large_array)
  return _internal_large_array();
}
inline void CollaborationCommandHistoryArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryArray.large_array)
}
inline ::TSP::LargeArray* CollaborationCommandHistoryArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* CollaborationCommandHistoryArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* CollaborationCommandHistoryArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* CollaborationCommandHistoryArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryArray.large_array)
  return _internal_mutable_large_array();
}
inline void CollaborationCommandHistoryArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array)->GetArena();
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryArray.large_array)
}

// -------------------------------------------------------------------

// CollaborationCommandHistoryArraySegment

// required .TSP.LargeObjectArraySegment large_object_array_segment = 1;
inline bool CollaborationCommandHistoryArraySegment::_internal_has_large_object_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_object_array_segment_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryArraySegment::has_large_object_array_segment() const {
  return _internal_has_large_object_array_segment();
}
inline const ::TSP::LargeObjectArraySegment& CollaborationCommandHistoryArraySegment::_internal_large_object_array_segment() const {
  const ::TSP::LargeObjectArraySegment* p = large_object_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeObjectArraySegment&>(
      ::TSP::_LargeObjectArraySegment_default_instance_);
}
inline const ::TSP::LargeObjectArraySegment& CollaborationCommandHistoryArraySegment::large_object_array_segment() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryArraySegment.large_object_array_segment)
  return _internal_large_object_array_segment();
}
inline void CollaborationCommandHistoryArraySegment::unsafe_arena_set_allocated_large_object_array_segment(
    ::TSP::LargeObjectArraySegment* large_object_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment_);
  }
  large_object_array_segment_ = large_object_array_segment;
  if (large_object_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryArraySegment.large_object_array_segment)
}
inline ::TSP::LargeObjectArraySegment* CollaborationCommandHistoryArraySegment::release_large_object_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArraySegment* temp = large_object_array_segment_;
  large_object_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeObjectArraySegment* CollaborationCommandHistoryArraySegment::unsafe_arena_release_large_object_array_segment() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryArraySegment.large_object_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArraySegment* temp = large_object_array_segment_;
  large_object_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeObjectArraySegment* CollaborationCommandHistoryArraySegment::_internal_mutable_large_object_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_object_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeObjectArraySegment>(GetArena());
    large_object_array_segment_ = p;
  }
  return large_object_array_segment_;
}
inline ::TSP::LargeObjectArraySegment* CollaborationCommandHistoryArraySegment::mutable_large_object_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryArraySegment.large_object_array_segment)
  return _internal_mutable_large_object_array_segment();
}
inline void CollaborationCommandHistoryArraySegment::set_allocated_large_object_array_segment(::TSP::LargeObjectArraySegment* large_object_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment_);
  }
  if (large_object_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment)->GetArena();
    if (message_arena != submessage_arena) {
      large_object_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_object_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_object_array_segment_ = large_object_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryArraySegment.large_object_array_segment)
}

// -------------------------------------------------------------------

// CollaborationCommandHistory_ItemList

// optional .TSP.Reference items_array = 1;
inline bool CollaborationCommandHistory_ItemList::_internal_has_items_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || items_array_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistory_ItemList::has_items_array() const {
  return _internal_has_items_array();
}
inline const ::TSP::Reference& CollaborationCommandHistory_ItemList::_internal_items_array() const {
  const ::TSP::Reference* p = items_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistory_ItemList::items_array() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistory.ItemList.items_array)
  return _internal_items_array();
}
inline void CollaborationCommandHistory_ItemList::unsafe_arena_set_allocated_items_array(
    ::TSP::Reference* items_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_array_);
  }
  items_array_ = items_array;
  if (items_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistory.ItemList.items_array)
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::release_items_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = items_array_;
  items_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::unsafe_arena_release_items_array() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistory.ItemList.items_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = items_array_;
  items_array_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::_internal_mutable_items_array() {
  _has_bits_[0] |= 0x00000001u;
  if (items_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    items_array_ = p;
  }
  return items_array_;
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::mutable_items_array() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistory.ItemList.items_array)
  return _internal_mutable_items_array();
}
inline void CollaborationCommandHistory_ItemList::set_allocated_items_array(::TSP::Reference* items_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_array_);
  }
  if (items_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_array)->GetArena();
    if (message_arena != submessage_arena) {
      items_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, items_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  items_array_ = items_array;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistory.ItemList.items_array)
}

// repeated .TSP.Reference transformer_entries = 2;
inline int CollaborationCommandHistory_ItemList::_internal_transformer_entries_size() const {
  return transformer_entries_.size();
}
inline int CollaborationCommandHistory_ItemList::transformer_entries_size() const {
  return _internal_transformer_entries_size();
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::mutable_transformer_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistory.ItemList.transformer_entries)
  return transformer_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationCommandHistory_ItemList::mutable_transformer_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationCommandHistory.ItemList.transformer_entries)
  return &transformer_entries_;
}
inline const ::TSP::Reference& CollaborationCommandHistory_ItemList::_internal_transformer_entries(int index) const {
  return transformer_entries_.Get(index);
}
inline const ::TSP::Reference& CollaborationCommandHistory_ItemList::transformer_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistory.ItemList.transformer_entries)
  return _internal_transformer_entries(index);
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::_internal_add_transformer_entries() {
  return transformer_entries_.Add();
}
inline ::TSP::Reference* CollaborationCommandHistory_ItemList::add_transformer_entries() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationCommandHistory.ItemList.transformer_entries)
  return _internal_add_transformer_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationCommandHistory_ItemList::transformer_entries() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationCommandHistory.ItemList.transformer_entries)
  return transformer_entries_;
}

// -------------------------------------------------------------------

// CollaborationCommandHistory

// optional .TSP.UUID local_identifier = 1;
inline bool CollaborationCommandHistory::_internal_has_local_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || local_identifier_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistory::has_local_identifier() const {
  return _internal_has_local_identifier();
}
inline const ::TSP::UUID& CollaborationCommandHistory::_internal_local_identifier() const {
  const ::TSP::UUID* p = local_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaborationCommandHistory::local_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistory.local_identifier)
  return _internal_local_identifier();
}
inline void CollaborationCommandHistory::unsafe_arena_set_allocated_local_identifier(
    ::TSP::UUID* local_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_identifier_);
  }
  local_identifier_ = local_identifier;
  if (local_identifier) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistory.local_identifier)
}
inline ::TSP::UUID* CollaborationCommandHistory::release_local_identifier() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = local_identifier_;
  local_identifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CollaborationCommandHistory::unsafe_arena_release_local_identifier() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistory.local_identifier)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = local_identifier_;
  local_identifier_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaborationCommandHistory::_internal_mutable_local_identifier() {
  _has_bits_[0] |= 0x00000001u;
  if (local_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    local_identifier_ = p;
  }
  return local_identifier_;
}
inline ::TSP::UUID* CollaborationCommandHistory::mutable_local_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistory.local_identifier)
  return _internal_mutable_local_identifier();
}
inline void CollaborationCommandHistory::set_allocated_local_identifier(::TSP::UUID* local_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_identifier_);
  }
  if (local_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      local_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_identifier_ = local_identifier;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistory.local_identifier)
}

// optional .TSK.CollaborationCommandHistory.ItemList undo_items = 2;
inline bool CollaborationCommandHistory::_internal_has_undo_items() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || undo_items_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistory::has_undo_items() const {
  return _internal_has_undo_items();
}
inline void CollaborationCommandHistory::clear_undo_items() {
  if (undo_items_ != nullptr) undo_items_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSK::CollaborationCommandHistory_ItemList& CollaborationCommandHistory::_internal_undo_items() const {
  const ::TSK::CollaborationCommandHistory_ItemList* p = undo_items_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CollaborationCommandHistory_ItemList&>(
      ::TSK::_CollaborationCommandHistory_ItemList_default_instance_);
}
inline const ::TSK::CollaborationCommandHistory_ItemList& CollaborationCommandHistory::undo_items() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistory.undo_items)
  return _internal_undo_items();
}
inline void CollaborationCommandHistory::unsafe_arena_set_allocated_undo_items(
    ::TSK::CollaborationCommandHistory_ItemList* undo_items) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undo_items_);
  }
  undo_items_ = undo_items;
  if (undo_items) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistory.undo_items)
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::release_undo_items() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CollaborationCommandHistory_ItemList* temp = undo_items_;
  undo_items_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::unsafe_arena_release_undo_items() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistory.undo_items)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CollaborationCommandHistory_ItemList* temp = undo_items_;
  undo_items_ = nullptr;
  return temp;
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::_internal_mutable_undo_items() {
  _has_bits_[0] |= 0x00000002u;
  if (undo_items_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CollaborationCommandHistory_ItemList>(GetArena());
    undo_items_ = p;
  }
  return undo_items_;
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::mutable_undo_items() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistory.undo_items)
  return _internal_mutable_undo_items();
}
inline void CollaborationCommandHistory::set_allocated_undo_items(::TSK::CollaborationCommandHistory_ItemList* undo_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete undo_items_;
  }
  if (undo_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(undo_items);
    if (message_arena != submessage_arena) {
      undo_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undo_items, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  undo_items_ = undo_items;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistory.undo_items)
}

// optional .TSK.CollaborationCommandHistory.ItemList redo_items = 3;
inline bool CollaborationCommandHistory::_internal_has_redo_items() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || redo_items_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistory::has_redo_items() const {
  return _internal_has_redo_items();
}
inline void CollaborationCommandHistory::clear_redo_items() {
  if (redo_items_ != nullptr) redo_items_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSK::CollaborationCommandHistory_ItemList& CollaborationCommandHistory::_internal_redo_items() const {
  const ::TSK::CollaborationCommandHistory_ItemList* p = redo_items_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CollaborationCommandHistory_ItemList&>(
      ::TSK::_CollaborationCommandHistory_ItemList_default_instance_);
}
inline const ::TSK::CollaborationCommandHistory_ItemList& CollaborationCommandHistory::redo_items() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistory.redo_items)
  return _internal_redo_items();
}
inline void CollaborationCommandHistory::unsafe_arena_set_allocated_redo_items(
    ::TSK::CollaborationCommandHistory_ItemList* redo_items) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redo_items_);
  }
  redo_items_ = redo_items;
  if (redo_items) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistory.redo_items)
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::release_redo_items() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CollaborationCommandHistory_ItemList* temp = redo_items_;
  redo_items_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::unsafe_arena_release_redo_items() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistory.redo_items)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CollaborationCommandHistory_ItemList* temp = redo_items_;
  redo_items_ = nullptr;
  return temp;
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::_internal_mutable_redo_items() {
  _has_bits_[0] |= 0x00000004u;
  if (redo_items_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CollaborationCommandHistory_ItemList>(GetArena());
    redo_items_ = p;
  }
  return redo_items_;
}
inline ::TSK::CollaborationCommandHistory_ItemList* CollaborationCommandHistory::mutable_redo_items() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistory.redo_items)
  return _internal_mutable_redo_items();
}
inline void CollaborationCommandHistory::set_allocated_redo_items(::TSK::CollaborationCommandHistory_ItemList* redo_items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete redo_items_;
  }
  if (redo_items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(redo_items);
    if (message_arena != submessage_arena) {
      redo_items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redo_items, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  redo_items_ = redo_items;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistory.redo_items)
}

// -------------------------------------------------------------------

// CollaborationCommandHistoryItem

// optional .TSP.Reference command = 1;
inline bool CollaborationCommandHistoryItem::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || command_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryItem::has_command() const {
  return _internal_has_command();
}
inline const ::TSP::Reference& CollaborationCommandHistoryItem::_internal_command() const {
  const ::TSP::Reference* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistoryItem::command() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryItem.command)
  return _internal_command();
}
inline void CollaborationCommandHistoryItem::unsafe_arena_set_allocated_command(
    ::TSP::Reference* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryItem.command)
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::release_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryItem.command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000002u;
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::mutable_command() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryItem.command)
  return _internal_mutable_command();
}
inline void CollaborationCommandHistoryItem::set_allocated_command(::TSP::Reference* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryItem.command)
}

// optional string action_string = 2;
inline bool CollaborationCommandHistoryItem::_internal_has_action_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CollaborationCommandHistoryItem::has_action_string() const {
  return _internal_has_action_string();
}
inline void CollaborationCommandHistoryItem::clear_action_string() {
  action_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CollaborationCommandHistoryItem::action_string() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryItem.action_string)
  return _internal_action_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CollaborationCommandHistoryItem::set_action_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.CollaborationCommandHistoryItem.action_string)
}
inline std::string* CollaborationCommandHistoryItem::mutable_action_string() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryItem.action_string)
  return _internal_mutable_action_string();
}
inline const std::string& CollaborationCommandHistoryItem::_internal_action_string() const {
  return action_string_.Get();
}
inline void CollaborationCommandHistoryItem::_internal_set_action_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CollaborationCommandHistoryItem::_internal_mutable_action_string() {
  _has_bits_[0] |= 0x00000001u;
  return action_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CollaborationCommandHistoryItem::release_action_string() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryItem.action_string)
  if (!_internal_has_action_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CollaborationCommandHistoryItem::set_allocated_action_string(std::string* action_string) {
  if (action_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryItem.action_string)
}

// optional .TSP.Reference selection_behavior = 3;
inline bool CollaborationCommandHistoryItem::_internal_has_selection_behavior() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || selection_behavior_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryItem::has_selection_behavior() const {
  return _internal_has_selection_behavior();
}
inline const ::TSP::Reference& CollaborationCommandHistoryItem::_internal_selection_behavior() const {
  const ::TSP::Reference* p = selection_behavior_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistoryItem::selection_behavior() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryItem.selection_behavior)
  return _internal_selection_behavior();
}
inline void CollaborationCommandHistoryItem::unsafe_arena_set_allocated_selection_behavior(
    ::TSP::Reference* selection_behavior) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_behavior_);
  }
  selection_behavior_ = selection_behavior;
  if (selection_behavior) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryItem.selection_behavior)
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::release_selection_behavior() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = selection_behavior_;
  selection_behavior_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::unsafe_arena_release_selection_behavior() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryItem.selection_behavior)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = selection_behavior_;
  selection_behavior_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::_internal_mutable_selection_behavior() {
  _has_bits_[0] |= 0x00000004u;
  if (selection_behavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    selection_behavior_ = p;
  }
  return selection_behavior_;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::mutable_selection_behavior() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryItem.selection_behavior)
  return _internal_mutable_selection_behavior();
}
inline void CollaborationCommandHistoryItem::set_allocated_selection_behavior(::TSP::Reference* selection_behavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_behavior_);
  }
  if (selection_behavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selection_behavior)->GetArena();
    if (message_arena != submessage_arena) {
      selection_behavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_behavior, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  selection_behavior_ = selection_behavior;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryItem.selection_behavior)
}

// optional .TSP.Reference coalescing_group = 4;
inline bool CollaborationCommandHistoryItem::_internal_has_coalescing_group() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || coalescing_group_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryItem::has_coalescing_group() const {
  return _internal_has_coalescing_group();
}
inline const ::TSP::Reference& CollaborationCommandHistoryItem::_internal_coalescing_group() const {
  const ::TSP::Reference* p = coalescing_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistoryItem::coalescing_group() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryItem.coalescing_group)
  return _internal_coalescing_group();
}
inline void CollaborationCommandHistoryItem::unsafe_arena_set_allocated_coalescing_group(
    ::TSP::Reference* coalescing_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalescing_group_);
  }
  coalescing_group_ = coalescing_group;
  if (coalescing_group) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryItem.coalescing_group)
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::release_coalescing_group() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = coalescing_group_;
  coalescing_group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::unsafe_arena_release_coalescing_group() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryItem.coalescing_group)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = coalescing_group_;
  coalescing_group_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::_internal_mutable_coalescing_group() {
  _has_bits_[0] |= 0x00000008u;
  if (coalescing_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    coalescing_group_ = p;
  }
  return coalescing_group_;
}
inline ::TSP::Reference* CollaborationCommandHistoryItem::mutable_coalescing_group() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryItem.coalescing_group)
  return _internal_mutable_coalescing_group();
}
inline void CollaborationCommandHistoryItem::set_allocated_coalescing_group(::TSP::Reference* coalescing_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalescing_group_);
  }
  if (coalescing_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalescing_group)->GetArena();
    if (message_arena != submessage_arena) {
      coalescing_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coalescing_group, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  coalescing_group_ = coalescing_group;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryItem.coalescing_group)
}

// optional uint64 revision_sequence = 5;
inline bool CollaborationCommandHistoryItem::_internal_has_revision_sequence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CollaborationCommandHistoryItem::has_revision_sequence() const {
  return _internal_has_revision_sequence();
}
inline void CollaborationCommandHistoryItem::clear_revision_sequence() {
  revision_sequence_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollaborationCommandHistoryItem::_internal_revision_sequence() const {
  return revision_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollaborationCommandHistoryItem::revision_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryItem.revision_sequence)
  return _internal_revision_sequence();
}
inline void CollaborationCommandHistoryItem::_internal_set_revision_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  revision_sequence_ = value;
}
inline void CollaborationCommandHistoryItem::set_revision_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_revision_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.CollaborationCommandHistoryItem.revision_sequence)
}

// -------------------------------------------------------------------

// CollaborationCommandHistoryCoalescingGroup

// repeated .TSP.Reference nodes = 1;
inline int CollaborationCommandHistoryCoalescingGroup::_internal_nodes_size() const {
  return nodes_.size();
}
inline int CollaborationCommandHistoryCoalescingGroup::nodes_size() const {
  return _internal_nodes_size();
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroup::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryCoalescingGroup.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationCommandHistoryCoalescingGroup::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationCommandHistoryCoalescingGroup.nodes)
  return &nodes_;
}
inline const ::TSP::Reference& CollaborationCommandHistoryCoalescingGroup::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::TSP::Reference& CollaborationCommandHistoryCoalescingGroup::nodes(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryCoalescingGroup.nodes)
  return _internal_nodes(index);
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroup::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroup::add_nodes() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationCommandHistoryCoalescingGroup.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationCommandHistoryCoalescingGroup::nodes() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationCommandHistoryCoalescingGroup.nodes)
  return nodes_;
}

// optional bool did_coalesce_all_commands = 2 [default = false];
inline bool CollaborationCommandHistoryCoalescingGroup::_internal_has_did_coalesce_all_commands() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CollaborationCommandHistoryCoalescingGroup::has_did_coalesce_all_commands() const {
  return _internal_has_did_coalesce_all_commands();
}
inline void CollaborationCommandHistoryCoalescingGroup::clear_did_coalesce_all_commands() {
  did_coalesce_all_commands_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CollaborationCommandHistoryCoalescingGroup::_internal_did_coalesce_all_commands() const {
  return did_coalesce_all_commands_;
}
inline bool CollaborationCommandHistoryCoalescingGroup::did_coalesce_all_commands() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryCoalescingGroup.did_coalesce_all_commands)
  return _internal_did_coalesce_all_commands();
}
inline void CollaborationCommandHistoryCoalescingGroup::_internal_set_did_coalesce_all_commands(bool value) {
  _has_bits_[0] |= 0x00000001u;
  did_coalesce_all_commands_ = value;
}
inline void CollaborationCommandHistoryCoalescingGroup::set_did_coalesce_all_commands(bool value) {
  _internal_set_did_coalesce_all_commands(value);
  // @@protoc_insertion_point(field_set:TSK.CollaborationCommandHistoryCoalescingGroup.did_coalesce_all_commands)
}

// -------------------------------------------------------------------

// CollaborationCommandHistoryCoalescingGroupNode

// optional .TSP.Reference command = 1;
inline bool CollaborationCommandHistoryCoalescingGroupNode::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || command_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryCoalescingGroupNode::has_command() const {
  return _internal_has_command();
}
inline const ::TSP::Reference& CollaborationCommandHistoryCoalescingGroupNode::_internal_command() const {
  const ::TSP::Reference* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistoryCoalescingGroupNode::command() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryCoalescingGroupNode.command)
  return _internal_command();
}
inline void CollaborationCommandHistoryCoalescingGroupNode::unsafe_arena_set_allocated_command(
    ::TSP::Reference* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryCoalescingGroupNode.command)
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroupNode::release_command() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroupNode::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryCoalescingGroupNode.command)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroupNode::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::TSP::Reference* CollaborationCommandHistoryCoalescingGroupNode::mutable_command() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryCoalescingGroupNode.command)
  return _internal_mutable_command();
}
inline void CollaborationCommandHistoryCoalescingGroupNode::set_allocated_command(::TSP::Reference* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryCoalescingGroupNode.command)
}

// -------------------------------------------------------------------

// CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver

// optional .TSP.Reference coalescing_group = 1;
inline bool CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_internal_has_coalescing_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || coalescing_group_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::has_coalescing_group() const {
  return _internal_has_coalescing_group();
}
inline const ::TSP::Reference& CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_internal_coalescing_group() const {
  const ::TSP::Reference* p = coalescing_group_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::coalescing_group() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.coalescing_group)
  return _internal_coalescing_group();
}
inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::unsafe_arena_set_allocated_coalescing_group(
    ::TSP::Reference* coalescing_group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalescing_group_);
  }
  coalescing_group_ = coalescing_group;
  if (coalescing_group) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.coalescing_group)
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::release_coalescing_group() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = coalescing_group_;
  coalescing_group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::unsafe_arena_release_coalescing_group() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.coalescing_group)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = coalescing_group_;
  coalescing_group_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_internal_mutable_coalescing_group() {
  _has_bits_[0] |= 0x00000001u;
  if (coalescing_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    coalescing_group_ = p;
  }
  return coalescing_group_;
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::mutable_coalescing_group() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.coalescing_group)
  return _internal_mutable_coalescing_group();
}
inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::set_allocated_coalescing_group(::TSP::Reference* coalescing_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalescing_group_);
  }
  if (coalescing_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coalescing_group)->GetArena();
    if (message_arena != submessage_arena) {
      coalescing_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coalescing_group, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  coalescing_group_ = coalescing_group;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.coalescing_group)
}

// optional .TSP.Reference node = 2;
inline bool CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || node_ != nullptr);
  return value;
}
inline bool CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::has_node() const {
  return _internal_has_node();
}
inline const ::TSP::Reference& CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_internal_node() const {
  const ::TSP::Reference* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::node() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.node)
  return _internal_node();
}
inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::unsafe_arena_set_allocated_node(
    ::TSP::Reference* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.node)
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::release_node() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = node_;
  node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.node)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000002u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::TSP::Reference* CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::mutable_node() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.node)
  return _internal_mutable_node();
}
inline void CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver::set_allocated_node(::TSP::Reference* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node)->GetArena();
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.node)
}

// -------------------------------------------------------------------

// DocumentArchive

// optional string locale_identifier = 4;
inline bool DocumentArchive::_internal_has_locale_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DocumentArchive::has_locale_identifier() const {
  return _internal_has_locale_identifier();
}
inline void DocumentArchive::clear_locale_identifier() {
  locale_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DocumentArchive::locale_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.locale_identifier)
  return _internal_locale_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentArchive::set_locale_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.locale_identifier)
}
inline std::string* DocumentArchive::mutable_locale_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentArchive.locale_identifier)
  return _internal_mutable_locale_identifier();
}
inline const std::string& DocumentArchive::_internal_locale_identifier() const {
  return locale_identifier_.Get();
}
inline void DocumentArchive::_internal_set_locale_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentArchive::_internal_mutable_locale_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return locale_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentArchive::release_locale_identifier() {
  // @@protoc_insertion_point(field_release:TSK.DocumentArchive.locale_identifier)
  if (!_internal_has_locale_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return locale_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentArchive::set_allocated_locale_identifier(std::string* locale_identifier) {
  if (locale_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentArchive.locale_identifier)
}

// optional .TSP.Reference annotation_author_storage = 7;
inline bool DocumentArchive::_internal_has_annotation_author_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || annotation_author_storage_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_annotation_author_storage() const {
  return _internal_has_annotation_author_storage();
}
inline const ::TSP::Reference& DocumentArchive::_internal_annotation_author_storage() const {
  const ::TSP::Reference* p = annotation_author_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::annotation_author_storage() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.annotation_author_storage)
  return _internal_annotation_author_storage();
}
inline void DocumentArchive::unsafe_arena_set_allocated_annotation_author_storage(
    ::TSP::Reference* annotation_author_storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_author_storage_);
  }
  annotation_author_storage_ = annotation_author_storage;
  if (annotation_author_storage) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentArchive.annotation_author_storage)
}
inline ::TSP::Reference* DocumentArchive::release_annotation_author_storage() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = annotation_author_storage_;
  annotation_author_storage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_annotation_author_storage() {
  // @@protoc_insertion_point(field_release:TSK.DocumentArchive.annotation_author_storage)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = annotation_author_storage_;
  annotation_author_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_annotation_author_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (annotation_author_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    annotation_author_storage_ = p;
  }
  return annotation_author_storage_;
}
inline ::TSP::Reference* DocumentArchive::mutable_annotation_author_storage() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentArchive.annotation_author_storage)
  return _internal_mutable_annotation_author_storage();
}
inline void DocumentArchive::set_allocated_annotation_author_storage(::TSP::Reference* annotation_author_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_author_storage_);
  }
  if (annotation_author_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_author_storage)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_author_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_author_storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  annotation_author_storage_ = annotation_author_storage;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentArchive.annotation_author_storage)
}

// repeated .TSP.Reference activity_log_entries = 8;
inline int DocumentArchive::_internal_activity_log_entries_size() const {
  return activity_log_entries_.size();
}
inline int DocumentArchive::activity_log_entries_size() const {
  return _internal_activity_log_entries_size();
}
inline ::TSP::Reference* DocumentArchive::mutable_activity_log_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentArchive.activity_log_entries)
  return activity_log_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
DocumentArchive::mutable_activity_log_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.DocumentArchive.activity_log_entries)
  return &activity_log_entries_;
}
inline const ::TSP::Reference& DocumentArchive::_internal_activity_log_entries(int index) const {
  return activity_log_entries_.Get(index);
}
inline const ::TSP::Reference& DocumentArchive::activity_log_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.activity_log_entries)
  return _internal_activity_log_entries(index);
}
inline ::TSP::Reference* DocumentArchive::_internal_add_activity_log_entries() {
  return activity_log_entries_.Add();
}
inline ::TSP::Reference* DocumentArchive::add_activity_log_entries() {
  // @@protoc_insertion_point(field_add:TSK.DocumentArchive.activity_log_entries)
  return _internal_add_activity_log_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
DocumentArchive::activity_log_entries() const {
  // @@protoc_insertion_point(field_list:TSK.DocumentArchive.activity_log_entries)
  return activity_log_entries_;
}

// optional string creation_locale_identifier = 9;
inline bool DocumentArchive::_internal_has_creation_locale_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DocumentArchive::has_creation_locale_identifier() const {
  return _internal_has_creation_locale_identifier();
}
inline void DocumentArchive::clear_creation_locale_identifier() {
  creation_locale_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DocumentArchive::creation_locale_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.creation_locale_identifier)
  return _internal_creation_locale_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentArchive::set_creation_locale_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 creation_locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.creation_locale_identifier)
}
inline std::string* DocumentArchive::mutable_creation_locale_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentArchive.creation_locale_identifier)
  return _internal_mutable_creation_locale_identifier();
}
inline const std::string& DocumentArchive::_internal_creation_locale_identifier() const {
  return creation_locale_identifier_.Get();
}
inline void DocumentArchive::_internal_set_creation_locale_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  creation_locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentArchive::_internal_mutable_creation_locale_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return creation_locale_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentArchive::release_creation_locale_identifier() {
  // @@protoc_insertion_point(field_release:TSK.DocumentArchive.creation_locale_identifier)
  if (!_internal_has_creation_locale_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return creation_locale_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentArchive::set_allocated_creation_locale_identifier(std::string* creation_locale_identifier) {
  if (creation_locale_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  creation_locale_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creation_locale_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentArchive.creation_locale_identifier)
}

// optional bool prevent_image_conversion_on_open = 10;
inline bool DocumentArchive::_internal_has_prevent_image_conversion_on_open() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DocumentArchive::has_prevent_image_conversion_on_open() const {
  return _internal_has_prevent_image_conversion_on_open();
}
inline void DocumentArchive::clear_prevent_image_conversion_on_open() {
  prevent_image_conversion_on_open_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool DocumentArchive::_internal_prevent_image_conversion_on_open() const {
  return prevent_image_conversion_on_open_;
}
inline bool DocumentArchive::prevent_image_conversion_on_open() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.prevent_image_conversion_on_open)
  return _internal_prevent_image_conversion_on_open();
}
inline void DocumentArchive::_internal_set_prevent_image_conversion_on_open(bool value) {
  _has_bits_[0] |= 0x00000020u;
  prevent_image_conversion_on_open_ = value;
}
inline void DocumentArchive::set_prevent_image_conversion_on_open(bool value) {
  _internal_set_prevent_image_conversion_on_open(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.prevent_image_conversion_on_open)
}

// optional bool has_floating_locale = 11;
inline bool DocumentArchive::_internal_has_has_floating_locale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DocumentArchive::has_has_floating_locale() const {
  return _internal_has_has_floating_locale();
}
inline void DocumentArchive::clear_has_floating_locale() {
  has_floating_locale_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool DocumentArchive::_internal_has_floating_locale() const {
  return has_floating_locale_;
}
inline bool DocumentArchive::has_floating_locale() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.has_floating_locale)
  return _internal_has_floating_locale();
}
inline void DocumentArchive::_internal_set_has_floating_locale(bool value) {
  _has_bits_[0] |= 0x00000040u;
  has_floating_locale_ = value;
}
inline void DocumentArchive::set_has_floating_locale(bool value) {
  _internal_set_has_floating_locale(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.has_floating_locale)
}

// optional bool has_user_defined_locale = 12;
inline bool DocumentArchive::_internal_has_has_user_defined_locale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DocumentArchive::has_has_user_defined_locale() const {
  return _internal_has_has_user_defined_locale();
}
inline void DocumentArchive::clear_has_user_defined_locale() {
  has_user_defined_locale_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DocumentArchive::_internal_has_user_defined_locale() const {
  return has_user_defined_locale_;
}
inline bool DocumentArchive::has_user_defined_locale() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.has_user_defined_locale)
  return _internal_has_user_defined_locale();
}
inline void DocumentArchive::_internal_set_has_user_defined_locale(bool value) {
  _has_bits_[0] |= 0x00000080u;
  has_user_defined_locale_ = value;
}
inline void DocumentArchive::set_has_user_defined_locale(bool value) {
  _internal_set_has_user_defined_locale(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.has_user_defined_locale)
}

// optional .TSP.Reference collaboration_operation_history = 14;
inline bool DocumentArchive::_internal_has_collaboration_operation_history() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || collaboration_operation_history_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_collaboration_operation_history() const {
  return _internal_has_collaboration_operation_history();
}
inline const ::TSP::Reference& DocumentArchive::_internal_collaboration_operation_history() const {
  const ::TSP::Reference* p = collaboration_operation_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::collaboration_operation_history() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.collaboration_operation_history)
  return _internal_collaboration_operation_history();
}
inline void DocumentArchive::unsafe_arena_set_allocated_collaboration_operation_history(
    ::TSP::Reference* collaboration_operation_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_operation_history_);
  }
  collaboration_operation_history_ = collaboration_operation_history;
  if (collaboration_operation_history) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentArchive.collaboration_operation_history)
}
inline ::TSP::Reference* DocumentArchive::release_collaboration_operation_history() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = collaboration_operation_history_;
  collaboration_operation_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_collaboration_operation_history() {
  // @@protoc_insertion_point(field_release:TSK.DocumentArchive.collaboration_operation_history)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = collaboration_operation_history_;
  collaboration_operation_history_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_collaboration_operation_history() {
  _has_bits_[0] |= 0x00000008u;
  if (collaboration_operation_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    collaboration_operation_history_ = p;
  }
  return collaboration_operation_history_;
}
inline ::TSP::Reference* DocumentArchive::mutable_collaboration_operation_history() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentArchive.collaboration_operation_history)
  return _internal_mutable_collaboration_operation_history();
}
inline void DocumentArchive::set_allocated_collaboration_operation_history(::TSP::Reference* collaboration_operation_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_operation_history_);
  }
  if (collaboration_operation_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_operation_history)->GetArena();
    if (message_arena != submessage_arena) {
      collaboration_operation_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaboration_operation_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  collaboration_operation_history_ = collaboration_operation_history;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentArchive.collaboration_operation_history)
}

// optional bool should_measure_negatively_tracked_text_correctly = 15;
inline bool DocumentArchive::_internal_has_should_measure_negatively_tracked_text_correctly() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DocumentArchive::has_should_measure_negatively_tracked_text_correctly() const {
  return _internal_has_should_measure_negatively_tracked_text_correctly();
}
inline void DocumentArchive::clear_should_measure_negatively_tracked_text_correctly() {
  should_measure_negatively_tracked_text_correctly_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool DocumentArchive::_internal_should_measure_negatively_tracked_text_correctly() const {
  return should_measure_negatively_tracked_text_correctly_;
}
inline bool DocumentArchive::should_measure_negatively_tracked_text_correctly() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.should_measure_negatively_tracked_text_correctly)
  return _internal_should_measure_negatively_tracked_text_correctly();
}
inline void DocumentArchive::_internal_set_should_measure_negatively_tracked_text_correctly(bool value) {
  _has_bits_[0] |= 0x00000100u;
  should_measure_negatively_tracked_text_correctly_ = value;
}
inline void DocumentArchive::set_should_measure_negatively_tracked_text_correctly(bool value) {
  _internal_set_should_measure_negatively_tracked_text_correctly(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.should_measure_negatively_tracked_text_correctly)
}

// optional bool use_optimized_text_vertical_alignment = 16;
inline bool DocumentArchive::_internal_has_use_optimized_text_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DocumentArchive::has_use_optimized_text_vertical_alignment() const {
  return _internal_has_use_optimized_text_vertical_alignment();
}
inline void DocumentArchive::clear_use_optimized_text_vertical_alignment() {
  use_optimized_text_vertical_alignment_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool DocumentArchive::_internal_use_optimized_text_vertical_alignment() const {
  return use_optimized_text_vertical_alignment_;
}
inline bool DocumentArchive::use_optimized_text_vertical_alignment() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.use_optimized_text_vertical_alignment)
  return _internal_use_optimized_text_vertical_alignment();
}
inline void DocumentArchive::_internal_set_use_optimized_text_vertical_alignment(bool value) {
  _has_bits_[0] |= 0x00000200u;
  use_optimized_text_vertical_alignment_ = value;
}
inline void DocumentArchive::set_use_optimized_text_vertical_alignment(bool value) {
  _internal_set_use_optimized_text_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentArchive.use_optimized_text_vertical_alignment)
}

// optional .TSK.FormattingSymbolsArchive formatting_symbols = 17;
inline bool DocumentArchive::_internal_has_formatting_symbols() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || formatting_symbols_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_formatting_symbols() const {
  return _internal_has_formatting_symbols();
}
inline void DocumentArchive::clear_formatting_symbols() {
  if (formatting_symbols_ != nullptr) formatting_symbols_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSK::FormattingSymbolsArchive& DocumentArchive::_internal_formatting_symbols() const {
  const ::TSK::FormattingSymbolsArchive* p = formatting_symbols_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormattingSymbolsArchive&>(
      ::TSK::_FormattingSymbolsArchive_default_instance_);
}
inline const ::TSK::FormattingSymbolsArchive& DocumentArchive::formatting_symbols() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentArchive.formatting_symbols)
  return _internal_formatting_symbols();
}
inline void DocumentArchive::unsafe_arena_set_allocated_formatting_symbols(
    ::TSK::FormattingSymbolsArchive* formatting_symbols) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(formatting_symbols_);
  }
  formatting_symbols_ = formatting_symbols;
  if (formatting_symbols) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentArchive.formatting_symbols)
}
inline ::TSK::FormattingSymbolsArchive* DocumentArchive::release_formatting_symbols() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::FormattingSymbolsArchive* temp = formatting_symbols_;
  formatting_symbols_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormattingSymbolsArchive* DocumentArchive::unsafe_arena_release_formatting_symbols() {
  // @@protoc_insertion_point(field_release:TSK.DocumentArchive.formatting_symbols)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::FormattingSymbolsArchive* temp = formatting_symbols_;
  formatting_symbols_ = nullptr;
  return temp;
}
inline ::TSK::FormattingSymbolsArchive* DocumentArchive::_internal_mutable_formatting_symbols() {
  _has_bits_[0] |= 0x00000010u;
  if (formatting_symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormattingSymbolsArchive>(GetArena());
    formatting_symbols_ = p;
  }
  return formatting_symbols_;
}
inline ::TSK::FormattingSymbolsArchive* DocumentArchive::mutable_formatting_symbols() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentArchive.formatting_symbols)
  return _internal_mutable_formatting_symbols();
}
inline void DocumentArchive::set_allocated_formatting_symbols(::TSK::FormattingSymbolsArchive* formatting_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete formatting_symbols_;
  }
  if (formatting_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(formatting_symbols);
    if (message_arena != submessage_arena) {
      formatting_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formatting_symbols, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  formatting_symbols_ = formatting_symbols;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentArchive.formatting_symbols)
}

// -------------------------------------------------------------------

// FormattingSymbolsArchive_CurrencySymbol

// required string code = 1;
inline bool FormattingSymbolsArchive_CurrencySymbol::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive_CurrencySymbol::has_code() const {
  return _internal_has_code();
}
inline void FormattingSymbolsArchive_CurrencySymbol::clear_code() {
  code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FormattingSymbolsArchive_CurrencySymbol::code() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.CurrencySymbol.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive_CurrencySymbol::set_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.CurrencySymbol.code)
}
inline std::string* FormattingSymbolsArchive_CurrencySymbol::mutable_code() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.CurrencySymbol.code)
  return _internal_mutable_code();
}
inline const std::string& FormattingSymbolsArchive_CurrencySymbol::_internal_code() const {
  return code_.Get();
}
inline void FormattingSymbolsArchive_CurrencySymbol::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive_CurrencySymbol::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive_CurrencySymbol::release_code() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.CurrencySymbol.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive_CurrencySymbol::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.CurrencySymbol.code)
}

// required string symbol = 2;
inline bool FormattingSymbolsArchive_CurrencySymbol::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive_CurrencySymbol::has_symbol() const {
  return _internal_has_symbol();
}
inline void FormattingSymbolsArchive_CurrencySymbol::clear_symbol() {
  symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FormattingSymbolsArchive_CurrencySymbol::symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.CurrencySymbol.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive_CurrencySymbol::set_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.CurrencySymbol.symbol)
}
inline std::string* FormattingSymbolsArchive_CurrencySymbol::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.CurrencySymbol.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& FormattingSymbolsArchive_CurrencySymbol::_internal_symbol() const {
  return symbol_.Get();
}
inline void FormattingSymbolsArchive_CurrencySymbol::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive_CurrencySymbol::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000002u;
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive_CurrencySymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.CurrencySymbol.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive_CurrencySymbol::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.CurrencySymbol.symbol)
}

// -------------------------------------------------------------------

// FormattingSymbolsArchive

// optional string version = 1;
inline bool FormattingSymbolsArchive::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_version() const {
  return _internal_has_version();
}
inline void FormattingSymbolsArchive::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FormattingSymbolsArchive::version() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.version)
}
inline std::string* FormattingSymbolsArchive::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.version)
  return _internal_mutable_version();
}
inline const std::string& FormattingSymbolsArchive::_internal_version() const {
  return version_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_version() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.version)
}

// optional string calendar = 2;
inline bool FormattingSymbolsArchive::_internal_has_calendar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_calendar() const {
  return _internal_has_calendar();
}
inline void FormattingSymbolsArchive::clear_calendar() {
  calendar_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FormattingSymbolsArchive::calendar() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.calendar)
  return _internal_calendar();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_calendar(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 calendar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.calendar)
}
inline std::string* FormattingSymbolsArchive::mutable_calendar() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.calendar)
  return _internal_mutable_calendar();
}
inline const std::string& FormattingSymbolsArchive::_internal_calendar() const {
  return calendar_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_calendar(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  calendar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_calendar() {
  _has_bits_[0] |= 0x00000002u;
  return calendar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_calendar() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.calendar)
  if (!_internal_has_calendar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return calendar_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_calendar(std::string* calendar) {
  if (calendar != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  calendar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calendar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.calendar)
}

// optional string numbering_system = 3;
inline bool FormattingSymbolsArchive::_internal_has_numbering_system() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_numbering_system() const {
  return _internal_has_numbering_system();
}
inline void FormattingSymbolsArchive::clear_numbering_system() {
  numbering_system_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FormattingSymbolsArchive::numbering_system() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.numbering_system)
  return _internal_numbering_system();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_numbering_system(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 numbering_system_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.numbering_system)
}
inline std::string* FormattingSymbolsArchive::mutable_numbering_system() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.numbering_system)
  return _internal_mutable_numbering_system();
}
inline const std::string& FormattingSymbolsArchive::_internal_numbering_system() const {
  return numbering_system_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_numbering_system(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  numbering_system_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_numbering_system() {
  _has_bits_[0] |= 0x00000004u;
  return numbering_system_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_numbering_system() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.numbering_system)
  if (!_internal_has_numbering_system()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return numbering_system_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_numbering_system(std::string* numbering_system) {
  if (numbering_system != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  numbering_system_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), numbering_system,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.numbering_system)
}

// repeated string months = 4;
inline int FormattingSymbolsArchive::_internal_months_size() const {
  return months_.size();
}
inline int FormattingSymbolsArchive::months_size() const {
  return _internal_months_size();
}
inline void FormattingSymbolsArchive::clear_months() {
  months_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_months() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.months)
  return _internal_add_months();
}
inline const std::string& FormattingSymbolsArchive::_internal_months(int index) const {
  return months_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::months(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.months)
  return _internal_months(index);
}
inline std::string* FormattingSymbolsArchive::mutable_months(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.months)
  return months_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_months(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.months)
  months_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_months(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.months)
  months_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_months(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  months_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.months)
}
inline void FormattingSymbolsArchive::set_months(int index, const char* value, size_t size) {
  months_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.months)
}
inline std::string* FormattingSymbolsArchive::_internal_add_months() {
  return months_.Add();
}
inline void FormattingSymbolsArchive::add_months(const std::string& value) {
  months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.months)
}
inline void FormattingSymbolsArchive::add_months(std::string&& value) {
  months_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.months)
}
inline void FormattingSymbolsArchive::add_months(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.months)
}
inline void FormattingSymbolsArchive::add_months(const char* value, size_t size) {
  months_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.months)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::months() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.months)
  return months_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_months() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.months)
  return &months_;
}

// repeated string standalone_months = 5;
inline int FormattingSymbolsArchive::_internal_standalone_months_size() const {
  return standalone_months_.size();
}
inline int FormattingSymbolsArchive::standalone_months_size() const {
  return _internal_standalone_months_size();
}
inline void FormattingSymbolsArchive::clear_standalone_months() {
  standalone_months_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_months() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_months)
  return _internal_add_standalone_months();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_months(int index) const {
  return standalone_months_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_months(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_months)
  return _internal_standalone_months(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_months(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_months)
  return standalone_months_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_months(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_months)
  standalone_months_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_months(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_months)
  standalone_months_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_months(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_months_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_months)
}
inline void FormattingSymbolsArchive::set_standalone_months(int index, const char* value, size_t size) {
  standalone_months_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_months)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_months() {
  return standalone_months_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_months(const std::string& value) {
  standalone_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_months)
}
inline void FormattingSymbolsArchive::add_standalone_months(std::string&& value) {
  standalone_months_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_months)
}
inline void FormattingSymbolsArchive::add_standalone_months(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_months)
}
inline void FormattingSymbolsArchive::add_standalone_months(const char* value, size_t size) {
  standalone_months_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_months)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_months() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_months)
  return standalone_months_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_months() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_months)
  return &standalone_months_;
}

// repeated string short_months = 6;
inline int FormattingSymbolsArchive::_internal_short_months_size() const {
  return short_months_.size();
}
inline int FormattingSymbolsArchive::short_months_size() const {
  return _internal_short_months_size();
}
inline void FormattingSymbolsArchive::clear_short_months() {
  short_months_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_short_months() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.short_months)
  return _internal_add_short_months();
}
inline const std::string& FormattingSymbolsArchive::_internal_short_months(int index) const {
  return short_months_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::short_months(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.short_months)
  return _internal_short_months(index);
}
inline std::string* FormattingSymbolsArchive::mutable_short_months(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.short_months)
  return short_months_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_short_months(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_months)
  short_months_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_short_months(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_months)
  short_months_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_short_months(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  short_months_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.short_months)
}
inline void FormattingSymbolsArchive::set_short_months(int index, const char* value, size_t size) {
  short_months_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.short_months)
}
inline std::string* FormattingSymbolsArchive::_internal_add_short_months() {
  return short_months_.Add();
}
inline void FormattingSymbolsArchive::add_short_months(const std::string& value) {
  short_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.short_months)
}
inline void FormattingSymbolsArchive::add_short_months(std::string&& value) {
  short_months_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.short_months)
}
inline void FormattingSymbolsArchive::add_short_months(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  short_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.short_months)
}
inline void FormattingSymbolsArchive::add_short_months(const char* value, size_t size) {
  short_months_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.short_months)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::short_months() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.short_months)
  return short_months_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_short_months() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.short_months)
  return &short_months_;
}

// repeated string standalone_short_months = 7;
inline int FormattingSymbolsArchive::_internal_standalone_short_months_size() const {
  return standalone_short_months_.size();
}
inline int FormattingSymbolsArchive::standalone_short_months_size() const {
  return _internal_standalone_short_months_size();
}
inline void FormattingSymbolsArchive::clear_standalone_short_months() {
  standalone_short_months_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_short_months() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_short_months)
  return _internal_add_standalone_short_months();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_short_months(int index) const {
  return standalone_short_months_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_short_months(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_short_months)
  return _internal_standalone_short_months(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_short_months(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_short_months)
  return standalone_short_months_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_short_months(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_short_months)
  standalone_short_months_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_short_months(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_short_months)
  standalone_short_months_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_short_months(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_short_months_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_short_months)
}
inline void FormattingSymbolsArchive::set_standalone_short_months(int index, const char* value, size_t size) {
  standalone_short_months_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_short_months)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_short_months() {
  return standalone_short_months_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_short_months(const std::string& value) {
  standalone_short_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_short_months)
}
inline void FormattingSymbolsArchive::add_standalone_short_months(std::string&& value) {
  standalone_short_months_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_short_months)
}
inline void FormattingSymbolsArchive::add_standalone_short_months(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_short_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_short_months)
}
inline void FormattingSymbolsArchive::add_standalone_short_months(const char* value, size_t size) {
  standalone_short_months_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_short_months)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_short_months() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_short_months)
  return standalone_short_months_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_short_months() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_short_months)
  return &standalone_short_months_;
}

// repeated string weekdays = 8;
inline int FormattingSymbolsArchive::_internal_weekdays_size() const {
  return weekdays_.size();
}
inline int FormattingSymbolsArchive::weekdays_size() const {
  return _internal_weekdays_size();
}
inline void FormattingSymbolsArchive::clear_weekdays() {
  weekdays_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_weekdays() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.weekdays)
  return _internal_add_weekdays();
}
inline const std::string& FormattingSymbolsArchive::_internal_weekdays(int index) const {
  return weekdays_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::weekdays(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.weekdays)
  return _internal_weekdays(index);
}
inline std::string* FormattingSymbolsArchive::mutable_weekdays(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.weekdays)
  return weekdays_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_weekdays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.weekdays)
  weekdays_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_weekdays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.weekdays)
  weekdays_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_weekdays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  weekdays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.weekdays)
}
inline void FormattingSymbolsArchive::set_weekdays(int index, const char* value, size_t size) {
  weekdays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.weekdays)
}
inline std::string* FormattingSymbolsArchive::_internal_add_weekdays() {
  return weekdays_.Add();
}
inline void FormattingSymbolsArchive::add_weekdays(const std::string& value) {
  weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.weekdays)
}
inline void FormattingSymbolsArchive::add_weekdays(std::string&& value) {
  weekdays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.weekdays)
}
inline void FormattingSymbolsArchive::add_weekdays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.weekdays)
}
inline void FormattingSymbolsArchive::add_weekdays(const char* value, size_t size) {
  weekdays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.weekdays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::weekdays() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.weekdays)
  return weekdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_weekdays() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.weekdays)
  return &weekdays_;
}

// repeated string standalone_weekdays = 9;
inline int FormattingSymbolsArchive::_internal_standalone_weekdays_size() const {
  return standalone_weekdays_.size();
}
inline int FormattingSymbolsArchive::standalone_weekdays_size() const {
  return _internal_standalone_weekdays_size();
}
inline void FormattingSymbolsArchive::clear_standalone_weekdays() {
  standalone_weekdays_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_weekdays() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_weekdays)
  return _internal_add_standalone_weekdays();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_weekdays(int index) const {
  return standalone_weekdays_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_weekdays(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_weekdays)
  return _internal_standalone_weekdays(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_weekdays(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_weekdays)
  return standalone_weekdays_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_weekdays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_weekdays)
  standalone_weekdays_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_weekdays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_weekdays)
  standalone_weekdays_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_weekdays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_weekdays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_weekdays)
}
inline void FormattingSymbolsArchive::set_standalone_weekdays(int index, const char* value, size_t size) {
  standalone_weekdays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_weekdays)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_weekdays() {
  return standalone_weekdays_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_weekdays(const std::string& value) {
  standalone_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_weekdays(std::string&& value) {
  standalone_weekdays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_weekdays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_weekdays(const char* value, size_t size) {
  standalone_weekdays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_weekdays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_weekdays() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_weekdays)
  return standalone_weekdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_weekdays() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_weekdays)
  return &standalone_weekdays_;
}

// repeated string short_weekdays = 10;
inline int FormattingSymbolsArchive::_internal_short_weekdays_size() const {
  return short_weekdays_.size();
}
inline int FormattingSymbolsArchive::short_weekdays_size() const {
  return _internal_short_weekdays_size();
}
inline void FormattingSymbolsArchive::clear_short_weekdays() {
  short_weekdays_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_short_weekdays() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.short_weekdays)
  return _internal_add_short_weekdays();
}
inline const std::string& FormattingSymbolsArchive::_internal_short_weekdays(int index) const {
  return short_weekdays_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::short_weekdays(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.short_weekdays)
  return _internal_short_weekdays(index);
}
inline std::string* FormattingSymbolsArchive::mutable_short_weekdays(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.short_weekdays)
  return short_weekdays_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_short_weekdays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_weekdays)
  short_weekdays_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_short_weekdays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_weekdays)
  short_weekdays_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_short_weekdays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  short_weekdays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.short_weekdays)
}
inline void FormattingSymbolsArchive::set_short_weekdays(int index, const char* value, size_t size) {
  short_weekdays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.short_weekdays)
}
inline std::string* FormattingSymbolsArchive::_internal_add_short_weekdays() {
  return short_weekdays_.Add();
}
inline void FormattingSymbolsArchive::add_short_weekdays(const std::string& value) {
  short_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.short_weekdays)
}
inline void FormattingSymbolsArchive::add_short_weekdays(std::string&& value) {
  short_weekdays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.short_weekdays)
}
inline void FormattingSymbolsArchive::add_short_weekdays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  short_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.short_weekdays)
}
inline void FormattingSymbolsArchive::add_short_weekdays(const char* value, size_t size) {
  short_weekdays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.short_weekdays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::short_weekdays() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.short_weekdays)
  return short_weekdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_short_weekdays() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.short_weekdays)
  return &short_weekdays_;
}

// repeated string standalone_short_weekdays = 11;
inline int FormattingSymbolsArchive::_internal_standalone_short_weekdays_size() const {
  return standalone_short_weekdays_.size();
}
inline int FormattingSymbolsArchive::standalone_short_weekdays_size() const {
  return _internal_standalone_short_weekdays_size();
}
inline void FormattingSymbolsArchive::clear_standalone_short_weekdays() {
  standalone_short_weekdays_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_short_weekdays() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  return _internal_add_standalone_short_weekdays();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_short_weekdays(int index) const {
  return standalone_short_weekdays_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_short_weekdays(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  return _internal_standalone_short_weekdays(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_short_weekdays(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  return standalone_short_weekdays_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_short_weekdays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  standalone_short_weekdays_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_short_weekdays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  standalone_short_weekdays_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_short_weekdays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_short_weekdays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
}
inline void FormattingSymbolsArchive::set_standalone_short_weekdays(int index, const char* value, size_t size) {
  standalone_short_weekdays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_short_weekdays() {
  return standalone_short_weekdays_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_short_weekdays(const std::string& value) {
  standalone_short_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_short_weekdays(std::string&& value) {
  standalone_short_weekdays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_short_weekdays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_short_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_short_weekdays(const char* value, size_t size) {
  standalone_short_weekdays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_short_weekdays() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  return standalone_short_weekdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_short_weekdays() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_short_weekdays)
  return &standalone_short_weekdays_;
}

// optional string am_symbol = 12;
inline bool FormattingSymbolsArchive::_internal_has_am_symbol() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_am_symbol() const {
  return _internal_has_am_symbol();
}
inline void FormattingSymbolsArchive::clear_am_symbol() {
  am_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FormattingSymbolsArchive::am_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.am_symbol)
  return _internal_am_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_am_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 am_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.am_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_am_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.am_symbol)
  return _internal_mutable_am_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_am_symbol() const {
  return am_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_am_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  am_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_am_symbol() {
  _has_bits_[0] |= 0x00000008u;
  return am_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_am_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.am_symbol)
  if (!_internal_has_am_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return am_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_am_symbol(std::string* am_symbol) {
  if (am_symbol != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  am_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), am_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.am_symbol)
}

// optional string pm_symbol = 13;
inline bool FormattingSymbolsArchive::_internal_has_pm_symbol() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_pm_symbol() const {
  return _internal_has_pm_symbol();
}
inline void FormattingSymbolsArchive::clear_pm_symbol() {
  pm_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FormattingSymbolsArchive::pm_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.pm_symbol)
  return _internal_pm_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_pm_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 pm_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.pm_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_pm_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.pm_symbol)
  return _internal_mutable_pm_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_pm_symbol() const {
  return pm_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_pm_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  pm_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_pm_symbol() {
  _has_bits_[0] |= 0x00000010u;
  return pm_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_pm_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.pm_symbol)
  if (!_internal_has_pm_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return pm_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_pm_symbol(std::string* pm_symbol) {
  if (pm_symbol != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pm_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pm_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.pm_symbol)
}

// repeated string tiny_months = 14;
inline int FormattingSymbolsArchive::_internal_tiny_months_size() const {
  return tiny_months_.size();
}
inline int FormattingSymbolsArchive::tiny_months_size() const {
  return _internal_tiny_months_size();
}
inline void FormattingSymbolsArchive::clear_tiny_months() {
  tiny_months_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_tiny_months() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.tiny_months)
  return _internal_add_tiny_months();
}
inline const std::string& FormattingSymbolsArchive::_internal_tiny_months(int index) const {
  return tiny_months_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::tiny_months(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.tiny_months)
  return _internal_tiny_months(index);
}
inline std::string* FormattingSymbolsArchive::mutable_tiny_months(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.tiny_months)
  return tiny_months_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_tiny_months(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.tiny_months)
  tiny_months_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_tiny_months(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.tiny_months)
  tiny_months_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_tiny_months(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiny_months_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.tiny_months)
}
inline void FormattingSymbolsArchive::set_tiny_months(int index, const char* value, size_t size) {
  tiny_months_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.tiny_months)
}
inline std::string* FormattingSymbolsArchive::_internal_add_tiny_months() {
  return tiny_months_.Add();
}
inline void FormattingSymbolsArchive::add_tiny_months(const std::string& value) {
  tiny_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.tiny_months)
}
inline void FormattingSymbolsArchive::add_tiny_months(std::string&& value) {
  tiny_months_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.tiny_months)
}
inline void FormattingSymbolsArchive::add_tiny_months(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiny_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.tiny_months)
}
inline void FormattingSymbolsArchive::add_tiny_months(const char* value, size_t size) {
  tiny_months_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.tiny_months)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::tiny_months() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.tiny_months)
  return tiny_months_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_tiny_months() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.tiny_months)
  return &tiny_months_;
}

// repeated string standalone_tiny_months = 15;
inline int FormattingSymbolsArchive::_internal_standalone_tiny_months_size() const {
  return standalone_tiny_months_.size();
}
inline int FormattingSymbolsArchive::standalone_tiny_months_size() const {
  return _internal_standalone_tiny_months_size();
}
inline void FormattingSymbolsArchive::clear_standalone_tiny_months() {
  standalone_tiny_months_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_tiny_months() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  return _internal_add_standalone_tiny_months();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_tiny_months(int index) const {
  return standalone_tiny_months_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_tiny_months(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  return _internal_standalone_tiny_months(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_tiny_months(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  return standalone_tiny_months_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_tiny_months(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  standalone_tiny_months_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_tiny_months(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  standalone_tiny_months_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_tiny_months(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_tiny_months_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_tiny_months)
}
inline void FormattingSymbolsArchive::set_standalone_tiny_months(int index, const char* value, size_t size) {
  standalone_tiny_months_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_tiny_months)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_tiny_months() {
  return standalone_tiny_months_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_tiny_months(const std::string& value) {
  standalone_tiny_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_tiny_months)
}
inline void FormattingSymbolsArchive::add_standalone_tiny_months(std::string&& value) {
  standalone_tiny_months_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_tiny_months)
}
inline void FormattingSymbolsArchive::add_standalone_tiny_months(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_tiny_months_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_tiny_months)
}
inline void FormattingSymbolsArchive::add_standalone_tiny_months(const char* value, size_t size) {
  standalone_tiny_months_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_tiny_months)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_tiny_months() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  return standalone_tiny_months_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_tiny_months() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_tiny_months)
  return &standalone_tiny_months_;
}

// repeated string tiny_weekdays = 16;
inline int FormattingSymbolsArchive::_internal_tiny_weekdays_size() const {
  return tiny_weekdays_.size();
}
inline int FormattingSymbolsArchive::tiny_weekdays_size() const {
  return _internal_tiny_weekdays_size();
}
inline void FormattingSymbolsArchive::clear_tiny_weekdays() {
  tiny_weekdays_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_tiny_weekdays() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.tiny_weekdays)
  return _internal_add_tiny_weekdays();
}
inline const std::string& FormattingSymbolsArchive::_internal_tiny_weekdays(int index) const {
  return tiny_weekdays_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::tiny_weekdays(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.tiny_weekdays)
  return _internal_tiny_weekdays(index);
}
inline std::string* FormattingSymbolsArchive::mutable_tiny_weekdays(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.tiny_weekdays)
  return tiny_weekdays_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_tiny_weekdays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.tiny_weekdays)
  tiny_weekdays_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_tiny_weekdays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.tiny_weekdays)
  tiny_weekdays_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_tiny_weekdays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiny_weekdays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.tiny_weekdays)
}
inline void FormattingSymbolsArchive::set_tiny_weekdays(int index, const char* value, size_t size) {
  tiny_weekdays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.tiny_weekdays)
}
inline std::string* FormattingSymbolsArchive::_internal_add_tiny_weekdays() {
  return tiny_weekdays_.Add();
}
inline void FormattingSymbolsArchive::add_tiny_weekdays(const std::string& value) {
  tiny_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.tiny_weekdays)
}
inline void FormattingSymbolsArchive::add_tiny_weekdays(std::string&& value) {
  tiny_weekdays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.tiny_weekdays)
}
inline void FormattingSymbolsArchive::add_tiny_weekdays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiny_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.tiny_weekdays)
}
inline void FormattingSymbolsArchive::add_tiny_weekdays(const char* value, size_t size) {
  tiny_weekdays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.tiny_weekdays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::tiny_weekdays() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.tiny_weekdays)
  return tiny_weekdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_tiny_weekdays() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.tiny_weekdays)
  return &tiny_weekdays_;
}

// repeated string standalone_tiny_weekdays = 17;
inline int FormattingSymbolsArchive::_internal_standalone_tiny_weekdays_size() const {
  return standalone_tiny_weekdays_.size();
}
inline int FormattingSymbolsArchive::standalone_tiny_weekdays_size() const {
  return _internal_standalone_tiny_weekdays_size();
}
inline void FormattingSymbolsArchive::clear_standalone_tiny_weekdays() {
  standalone_tiny_weekdays_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_tiny_weekdays() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  return _internal_add_standalone_tiny_weekdays();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_tiny_weekdays(int index) const {
  return standalone_tiny_weekdays_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_tiny_weekdays(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  return _internal_standalone_tiny_weekdays(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_tiny_weekdays(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  return standalone_tiny_weekdays_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_tiny_weekdays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  standalone_tiny_weekdays_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_tiny_weekdays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  standalone_tiny_weekdays_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_tiny_weekdays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_tiny_weekdays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
}
inline void FormattingSymbolsArchive::set_standalone_tiny_weekdays(int index, const char* value, size_t size) {
  standalone_tiny_weekdays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_tiny_weekdays() {
  return standalone_tiny_weekdays_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_tiny_weekdays(const std::string& value) {
  standalone_tiny_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_tiny_weekdays(std::string&& value) {
  standalone_tiny_weekdays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_tiny_weekdays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_tiny_weekdays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
}
inline void FormattingSymbolsArchive::add_standalone_tiny_weekdays(const char* value, size_t size) {
  standalone_tiny_weekdays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_tiny_weekdays() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  return standalone_tiny_weekdays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_tiny_weekdays() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_tiny_weekdays)
  return &standalone_tiny_weekdays_;
}

// repeated string quarters = 18;
inline int FormattingSymbolsArchive::_internal_quarters_size() const {
  return quarters_.size();
}
inline int FormattingSymbolsArchive::quarters_size() const {
  return _internal_quarters_size();
}
inline void FormattingSymbolsArchive::clear_quarters() {
  quarters_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_quarters() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.quarters)
  return _internal_add_quarters();
}
inline const std::string& FormattingSymbolsArchive::_internal_quarters(int index) const {
  return quarters_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::quarters(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.quarters)
  return _internal_quarters(index);
}
inline std::string* FormattingSymbolsArchive::mutable_quarters(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.quarters)
  return quarters_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_quarters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.quarters)
  quarters_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_quarters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.quarters)
  quarters_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_quarters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  quarters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.quarters)
}
inline void FormattingSymbolsArchive::set_quarters(int index, const char* value, size_t size) {
  quarters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.quarters)
}
inline std::string* FormattingSymbolsArchive::_internal_add_quarters() {
  return quarters_.Add();
}
inline void FormattingSymbolsArchive::add_quarters(const std::string& value) {
  quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.quarters)
}
inline void FormattingSymbolsArchive::add_quarters(std::string&& value) {
  quarters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.quarters)
}
inline void FormattingSymbolsArchive::add_quarters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.quarters)
}
inline void FormattingSymbolsArchive::add_quarters(const char* value, size_t size) {
  quarters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.quarters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::quarters() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.quarters)
  return quarters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_quarters() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.quarters)
  return &quarters_;
}

// repeated string standalone_quarters = 19;
inline int FormattingSymbolsArchive::_internal_standalone_quarters_size() const {
  return standalone_quarters_.size();
}
inline int FormattingSymbolsArchive::standalone_quarters_size() const {
  return _internal_standalone_quarters_size();
}
inline void FormattingSymbolsArchive::clear_standalone_quarters() {
  standalone_quarters_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_quarters() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_quarters)
  return _internal_add_standalone_quarters();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_quarters(int index) const {
  return standalone_quarters_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_quarters(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_quarters)
  return _internal_standalone_quarters(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_quarters(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_quarters)
  return standalone_quarters_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_quarters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_quarters)
  standalone_quarters_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_quarters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_quarters)
  standalone_quarters_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_quarters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_quarters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_quarters)
}
inline void FormattingSymbolsArchive::set_standalone_quarters(int index, const char* value, size_t size) {
  standalone_quarters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_quarters)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_quarters() {
  return standalone_quarters_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_quarters(const std::string& value) {
  standalone_quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_quarters)
}
inline void FormattingSymbolsArchive::add_standalone_quarters(std::string&& value) {
  standalone_quarters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_quarters)
}
inline void FormattingSymbolsArchive::add_standalone_quarters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_quarters)
}
inline void FormattingSymbolsArchive::add_standalone_quarters(const char* value, size_t size) {
  standalone_quarters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_quarters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_quarters() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_quarters)
  return standalone_quarters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_quarters() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_quarters)
  return &standalone_quarters_;
}

// repeated string short_quarters = 20;
inline int FormattingSymbolsArchive::_internal_short_quarters_size() const {
  return short_quarters_.size();
}
inline int FormattingSymbolsArchive::short_quarters_size() const {
  return _internal_short_quarters_size();
}
inline void FormattingSymbolsArchive::clear_short_quarters() {
  short_quarters_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_short_quarters() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.short_quarters)
  return _internal_add_short_quarters();
}
inline const std::string& FormattingSymbolsArchive::_internal_short_quarters(int index) const {
  return short_quarters_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::short_quarters(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.short_quarters)
  return _internal_short_quarters(index);
}
inline std::string* FormattingSymbolsArchive::mutable_short_quarters(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.short_quarters)
  return short_quarters_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_short_quarters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_quarters)
  short_quarters_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_short_quarters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_quarters)
  short_quarters_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_short_quarters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  short_quarters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.short_quarters)
}
inline void FormattingSymbolsArchive::set_short_quarters(int index, const char* value, size_t size) {
  short_quarters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.short_quarters)
}
inline std::string* FormattingSymbolsArchive::_internal_add_short_quarters() {
  return short_quarters_.Add();
}
inline void FormattingSymbolsArchive::add_short_quarters(const std::string& value) {
  short_quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.short_quarters)
}
inline void FormattingSymbolsArchive::add_short_quarters(std::string&& value) {
  short_quarters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.short_quarters)
}
inline void FormattingSymbolsArchive::add_short_quarters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  short_quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.short_quarters)
}
inline void FormattingSymbolsArchive::add_short_quarters(const char* value, size_t size) {
  short_quarters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.short_quarters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::short_quarters() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.short_quarters)
  return short_quarters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_short_quarters() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.short_quarters)
  return &short_quarters_;
}

// repeated string standalone_short_quarters = 21;
inline int FormattingSymbolsArchive::_internal_standalone_short_quarters_size() const {
  return standalone_short_quarters_.size();
}
inline int FormattingSymbolsArchive::standalone_short_quarters_size() const {
  return _internal_standalone_short_quarters_size();
}
inline void FormattingSymbolsArchive::clear_standalone_short_quarters() {
  standalone_short_quarters_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_standalone_short_quarters() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  return _internal_add_standalone_short_quarters();
}
inline const std::string& FormattingSymbolsArchive::_internal_standalone_short_quarters(int index) const {
  return standalone_short_quarters_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::standalone_short_quarters(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  return _internal_standalone_short_quarters(index);
}
inline std::string* FormattingSymbolsArchive::mutable_standalone_short_quarters(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  return standalone_short_quarters_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_standalone_short_quarters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  standalone_short_quarters_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_standalone_short_quarters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  standalone_short_quarters_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_standalone_short_quarters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_short_quarters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.standalone_short_quarters)
}
inline void FormattingSymbolsArchive::set_standalone_short_quarters(int index, const char* value, size_t size) {
  standalone_short_quarters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.standalone_short_quarters)
}
inline std::string* FormattingSymbolsArchive::_internal_add_standalone_short_quarters() {
  return standalone_short_quarters_.Add();
}
inline void FormattingSymbolsArchive::add_standalone_short_quarters(const std::string& value) {
  standalone_short_quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_short_quarters)
}
inline void FormattingSymbolsArchive::add_standalone_short_quarters(std::string&& value) {
  standalone_short_quarters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.standalone_short_quarters)
}
inline void FormattingSymbolsArchive::add_standalone_short_quarters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  standalone_short_quarters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.standalone_short_quarters)
}
inline void FormattingSymbolsArchive::add_standalone_short_quarters(const char* value, size_t size) {
  standalone_short_quarters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.standalone_short_quarters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::standalone_short_quarters() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  return standalone_short_quarters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_standalone_short_quarters() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.standalone_short_quarters)
  return &standalone_short_quarters_;
}

// repeated string eras = 22;
inline int FormattingSymbolsArchive::_internal_eras_size() const {
  return eras_.size();
}
inline int FormattingSymbolsArchive::eras_size() const {
  return _internal_eras_size();
}
inline void FormattingSymbolsArchive::clear_eras() {
  eras_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_eras() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.eras)
  return _internal_add_eras();
}
inline const std::string& FormattingSymbolsArchive::_internal_eras(int index) const {
  return eras_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::eras(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.eras)
  return _internal_eras(index);
}
inline std::string* FormattingSymbolsArchive::mutable_eras(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.eras)
  return eras_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_eras(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.eras)
  eras_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_eras(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.eras)
  eras_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_eras(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  eras_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.eras)
}
inline void FormattingSymbolsArchive::set_eras(int index, const char* value, size_t size) {
  eras_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.eras)
}
inline std::string* FormattingSymbolsArchive::_internal_add_eras() {
  return eras_.Add();
}
inline void FormattingSymbolsArchive::add_eras(const std::string& value) {
  eras_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.eras)
}
inline void FormattingSymbolsArchive::add_eras(std::string&& value) {
  eras_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.eras)
}
inline void FormattingSymbolsArchive::add_eras(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  eras_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.eras)
}
inline void FormattingSymbolsArchive::add_eras(const char* value, size_t size) {
  eras_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.eras)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::eras() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.eras)
  return eras_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_eras() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.eras)
  return &eras_;
}

// repeated string long_eras = 23;
inline int FormattingSymbolsArchive::_internal_long_eras_size() const {
  return long_eras_.size();
}
inline int FormattingSymbolsArchive::long_eras_size() const {
  return _internal_long_eras_size();
}
inline void FormattingSymbolsArchive::clear_long_eras() {
  long_eras_.Clear();
}
inline std::string* FormattingSymbolsArchive::add_long_eras() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormattingSymbolsArchive.long_eras)
  return _internal_add_long_eras();
}
inline const std::string& FormattingSymbolsArchive::_internal_long_eras(int index) const {
  return long_eras_.Get(index);
}
inline const std::string& FormattingSymbolsArchive::long_eras(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.long_eras)
  return _internal_long_eras(index);
}
inline std::string* FormattingSymbolsArchive::mutable_long_eras(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.long_eras)
  return long_eras_.Mutable(index);
}
inline void FormattingSymbolsArchive::set_long_eras(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.long_eras)
  long_eras_.Mutable(index)->assign(value);
}
inline void FormattingSymbolsArchive::set_long_eras(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.long_eras)
  long_eras_.Mutable(index)->assign(std::move(value));
}
inline void FormattingSymbolsArchive::set_long_eras(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  long_eras_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormattingSymbolsArchive.long_eras)
}
inline void FormattingSymbolsArchive::set_long_eras(int index, const char* value, size_t size) {
  long_eras_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormattingSymbolsArchive.long_eras)
}
inline std::string* FormattingSymbolsArchive::_internal_add_long_eras() {
  return long_eras_.Add();
}
inline void FormattingSymbolsArchive::add_long_eras(const std::string& value) {
  long_eras_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.long_eras)
}
inline void FormattingSymbolsArchive::add_long_eras(std::string&& value) {
  long_eras_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.long_eras)
}
inline void FormattingSymbolsArchive::add_long_eras(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  long_eras_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormattingSymbolsArchive.long_eras)
}
inline void FormattingSymbolsArchive::add_long_eras(const char* value, size_t size) {
  long_eras_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormattingSymbolsArchive.long_eras)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormattingSymbolsArchive::long_eras() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.long_eras)
  return long_eras_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormattingSymbolsArchive::mutable_long_eras() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.long_eras)
  return &long_eras_;
}

// optional string short_date_pattern = 24;
inline bool FormattingSymbolsArchive::_internal_has_short_date_pattern() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_short_date_pattern() const {
  return _internal_has_short_date_pattern();
}
inline void FormattingSymbolsArchive::clear_short_date_pattern() {
  short_date_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& FormattingSymbolsArchive::short_date_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.short_date_pattern)
  return _internal_short_date_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_short_date_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 short_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_date_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_short_date_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.short_date_pattern)
  return _internal_mutable_short_date_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_short_date_pattern() const {
  return short_date_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_short_date_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  short_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_short_date_pattern() {
  _has_bits_[0] |= 0x00000020u;
  return short_date_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_short_date_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.short_date_pattern)
  if (!_internal_has_short_date_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return short_date_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_short_date_pattern(std::string* short_date_pattern) {
  if (short_date_pattern != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  short_date_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_date_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.short_date_pattern)
}

// optional string medium_date_pattern = 25;
inline bool FormattingSymbolsArchive::_internal_has_medium_date_pattern() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_medium_date_pattern() const {
  return _internal_has_medium_date_pattern();
}
inline void FormattingSymbolsArchive::clear_medium_date_pattern() {
  medium_date_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& FormattingSymbolsArchive::medium_date_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.medium_date_pattern)
  return _internal_medium_date_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_medium_date_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 medium_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.medium_date_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_medium_date_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.medium_date_pattern)
  return _internal_mutable_medium_date_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_medium_date_pattern() const {
  return medium_date_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_medium_date_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  medium_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_medium_date_pattern() {
  _has_bits_[0] |= 0x00000040u;
  return medium_date_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_medium_date_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.medium_date_pattern)
  if (!_internal_has_medium_date_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return medium_date_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_medium_date_pattern(std::string* medium_date_pattern) {
  if (medium_date_pattern != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  medium_date_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), medium_date_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.medium_date_pattern)
}

// optional string long_date_pattern = 26;
inline bool FormattingSymbolsArchive::_internal_has_long_date_pattern() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_long_date_pattern() const {
  return _internal_has_long_date_pattern();
}
inline void FormattingSymbolsArchive::clear_long_date_pattern() {
  long_date_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& FormattingSymbolsArchive::long_date_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.long_date_pattern)
  return _internal_long_date_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_long_date_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 long_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.long_date_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_long_date_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.long_date_pattern)
  return _internal_mutable_long_date_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_long_date_pattern() const {
  return long_date_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_long_date_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  long_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_long_date_pattern() {
  _has_bits_[0] |= 0x00000080u;
  return long_date_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_long_date_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.long_date_pattern)
  if (!_internal_has_long_date_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return long_date_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_long_date_pattern(std::string* long_date_pattern) {
  if (long_date_pattern != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  long_date_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_date_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.long_date_pattern)
}

// optional string full_date_pattern = 27;
inline bool FormattingSymbolsArchive::_internal_has_full_date_pattern() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_full_date_pattern() const {
  return _internal_has_full_date_pattern();
}
inline void FormattingSymbolsArchive::clear_full_date_pattern() {
  full_date_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& FormattingSymbolsArchive::full_date_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.full_date_pattern)
  return _internal_full_date_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_full_date_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 full_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.full_date_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_full_date_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.full_date_pattern)
  return _internal_mutable_full_date_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_full_date_pattern() const {
  return full_date_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_full_date_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  full_date_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_full_date_pattern() {
  _has_bits_[0] |= 0x00000100u;
  return full_date_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_full_date_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.full_date_pattern)
  if (!_internal_has_full_date_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return full_date_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_full_date_pattern(std::string* full_date_pattern) {
  if (full_date_pattern != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  full_date_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_date_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.full_date_pattern)
}

// optional string short_time_pattern = 28;
inline bool FormattingSymbolsArchive::_internal_has_short_time_pattern() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_short_time_pattern() const {
  return _internal_has_short_time_pattern();
}
inline void FormattingSymbolsArchive::clear_short_time_pattern() {
  short_time_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& FormattingSymbolsArchive::short_time_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.short_time_pattern)
  return _internal_short_time_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_short_time_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000200u;
 short_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.short_time_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_short_time_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.short_time_pattern)
  return _internal_mutable_short_time_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_short_time_pattern() const {
  return short_time_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_short_time_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  short_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_short_time_pattern() {
  _has_bits_[0] |= 0x00000200u;
  return short_time_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_short_time_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.short_time_pattern)
  if (!_internal_has_short_time_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return short_time_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_short_time_pattern(std::string* short_time_pattern) {
  if (short_time_pattern != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  short_time_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_time_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.short_time_pattern)
}

// optional string medium_time_pattern = 29;
inline bool FormattingSymbolsArchive::_internal_has_medium_time_pattern() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_medium_time_pattern() const {
  return _internal_has_medium_time_pattern();
}
inline void FormattingSymbolsArchive::clear_medium_time_pattern() {
  medium_time_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& FormattingSymbolsArchive::medium_time_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.medium_time_pattern)
  return _internal_medium_time_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_medium_time_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000400u;
 medium_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.medium_time_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_medium_time_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.medium_time_pattern)
  return _internal_mutable_medium_time_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_medium_time_pattern() const {
  return medium_time_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_medium_time_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  medium_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_medium_time_pattern() {
  _has_bits_[0] |= 0x00000400u;
  return medium_time_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_medium_time_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.medium_time_pattern)
  if (!_internal_has_medium_time_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return medium_time_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_medium_time_pattern(std::string* medium_time_pattern) {
  if (medium_time_pattern != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  medium_time_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), medium_time_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.medium_time_pattern)
}

// optional string long_time_pattern = 30;
inline bool FormattingSymbolsArchive::_internal_has_long_time_pattern() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_long_time_pattern() const {
  return _internal_has_long_time_pattern();
}
inline void FormattingSymbolsArchive::clear_long_time_pattern() {
  long_time_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& FormattingSymbolsArchive::long_time_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.long_time_pattern)
  return _internal_long_time_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_long_time_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000800u;
 long_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.long_time_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_long_time_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.long_time_pattern)
  return _internal_mutable_long_time_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_long_time_pattern() const {
  return long_time_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_long_time_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  long_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_long_time_pattern() {
  _has_bits_[0] |= 0x00000800u;
  return long_time_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_long_time_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.long_time_pattern)
  if (!_internal_has_long_time_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return long_time_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_long_time_pattern(std::string* long_time_pattern) {
  if (long_time_pattern != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  long_time_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_time_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.long_time_pattern)
}

// optional string full_time_pattern = 31;
inline bool FormattingSymbolsArchive::_internal_has_full_time_pattern() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_full_time_pattern() const {
  return _internal_has_full_time_pattern();
}
inline void FormattingSymbolsArchive::clear_full_time_pattern() {
  full_time_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& FormattingSymbolsArchive::full_time_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.full_time_pattern)
  return _internal_full_time_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_full_time_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00001000u;
 full_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.full_time_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_full_time_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.full_time_pattern)
  return _internal_mutable_full_time_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_full_time_pattern() const {
  return full_time_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_full_time_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  full_time_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_full_time_pattern() {
  _has_bits_[0] |= 0x00001000u;
  return full_time_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_full_time_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.full_time_pattern)
  if (!_internal_has_full_time_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return full_time_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_full_time_pattern(std::string* full_time_pattern) {
  if (full_time_pattern != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  full_time_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_time_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.full_time_pattern)
}

// optional string decimal_separator = 32;
inline bool FormattingSymbolsArchive::_internal_has_decimal_separator() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_decimal_separator() const {
  return _internal_has_decimal_separator();
}
inline void FormattingSymbolsArchive::clear_decimal_separator() {
  decimal_separator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& FormattingSymbolsArchive::decimal_separator() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.decimal_separator)
  return _internal_decimal_separator();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_decimal_separator(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00002000u;
 decimal_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.decimal_separator)
}
inline std::string* FormattingSymbolsArchive::mutable_decimal_separator() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.decimal_separator)
  return _internal_mutable_decimal_separator();
}
inline const std::string& FormattingSymbolsArchive::_internal_decimal_separator() const {
  return decimal_separator_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_decimal_separator(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  decimal_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_decimal_separator() {
  _has_bits_[0] |= 0x00002000u;
  return decimal_separator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_decimal_separator() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.decimal_separator)
  if (!_internal_has_decimal_separator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return decimal_separator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_decimal_separator(std::string* decimal_separator) {
  if (decimal_separator != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  decimal_separator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decimal_separator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.decimal_separator)
}

// optional string grouping_separator = 33;
inline bool FormattingSymbolsArchive::_internal_has_grouping_separator() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_grouping_separator() const {
  return _internal_has_grouping_separator();
}
inline void FormattingSymbolsArchive::clear_grouping_separator() {
  grouping_separator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& FormattingSymbolsArchive::grouping_separator() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.grouping_separator)
  return _internal_grouping_separator();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_grouping_separator(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00004000u;
 grouping_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.grouping_separator)
}
inline std::string* FormattingSymbolsArchive::mutable_grouping_separator() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.grouping_separator)
  return _internal_mutable_grouping_separator();
}
inline const std::string& FormattingSymbolsArchive::_internal_grouping_separator() const {
  return grouping_separator_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_grouping_separator(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  grouping_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_grouping_separator() {
  _has_bits_[0] |= 0x00004000u;
  return grouping_separator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_grouping_separator() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.grouping_separator)
  if (!_internal_has_grouping_separator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return grouping_separator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_grouping_separator(std::string* grouping_separator) {
  if (grouping_separator != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  grouping_separator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grouping_separator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.grouping_separator)
}

// optional string currency_decimal_separator = 34;
inline bool FormattingSymbolsArchive::_internal_has_currency_decimal_separator() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_currency_decimal_separator() const {
  return _internal_has_currency_decimal_separator();
}
inline void FormattingSymbolsArchive::clear_currency_decimal_separator() {
  currency_decimal_separator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& FormattingSymbolsArchive::currency_decimal_separator() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.currency_decimal_separator)
  return _internal_currency_decimal_separator();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_currency_decimal_separator(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00008000u;
 currency_decimal_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.currency_decimal_separator)
}
inline std::string* FormattingSymbolsArchive::mutable_currency_decimal_separator() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.currency_decimal_separator)
  return _internal_mutable_currency_decimal_separator();
}
inline const std::string& FormattingSymbolsArchive::_internal_currency_decimal_separator() const {
  return currency_decimal_separator_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_currency_decimal_separator(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  currency_decimal_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_currency_decimal_separator() {
  _has_bits_[0] |= 0x00008000u;
  return currency_decimal_separator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_currency_decimal_separator() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.currency_decimal_separator)
  if (!_internal_has_currency_decimal_separator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return currency_decimal_separator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_currency_decimal_separator(std::string* currency_decimal_separator) {
  if (currency_decimal_separator != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  currency_decimal_separator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_decimal_separator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.currency_decimal_separator)
}

// optional string currency_grouping_separator = 35;
inline bool FormattingSymbolsArchive::_internal_has_currency_grouping_separator() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_currency_grouping_separator() const {
  return _internal_has_currency_grouping_separator();
}
inline void FormattingSymbolsArchive::clear_currency_grouping_separator() {
  currency_grouping_separator_.ClearToEmpty();
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& FormattingSymbolsArchive::currency_grouping_separator() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.currency_grouping_separator)
  return _internal_currency_grouping_separator();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_currency_grouping_separator(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00010000u;
 currency_grouping_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.currency_grouping_separator)
}
inline std::string* FormattingSymbolsArchive::mutable_currency_grouping_separator() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.currency_grouping_separator)
  return _internal_mutable_currency_grouping_separator();
}
inline const std::string& FormattingSymbolsArchive::_internal_currency_grouping_separator() const {
  return currency_grouping_separator_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_currency_grouping_separator(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  currency_grouping_separator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_currency_grouping_separator() {
  _has_bits_[0] |= 0x00010000u;
  return currency_grouping_separator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_currency_grouping_separator() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.currency_grouping_separator)
  if (!_internal_has_currency_grouping_separator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return currency_grouping_separator_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_currency_grouping_separator(std::string* currency_grouping_separator) {
  if (currency_grouping_separator != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  currency_grouping_separator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_grouping_separator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.currency_grouping_separator)
}

// optional string plus_sign = 36;
inline bool FormattingSymbolsArchive::_internal_has_plus_sign() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_plus_sign() const {
  return _internal_has_plus_sign();
}
inline void FormattingSymbolsArchive::clear_plus_sign() {
  plus_sign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& FormattingSymbolsArchive::plus_sign() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.plus_sign)
  return _internal_plus_sign();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_plus_sign(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00020000u;
 plus_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.plus_sign)
}
inline std::string* FormattingSymbolsArchive::mutable_plus_sign() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.plus_sign)
  return _internal_mutable_plus_sign();
}
inline const std::string& FormattingSymbolsArchive::_internal_plus_sign() const {
  return plus_sign_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_plus_sign(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  plus_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_plus_sign() {
  _has_bits_[0] |= 0x00020000u;
  return plus_sign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_plus_sign() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.plus_sign)
  if (!_internal_has_plus_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return plus_sign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_plus_sign(std::string* plus_sign) {
  if (plus_sign != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  plus_sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plus_sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.plus_sign)
}

// optional string minus_sign = 37;
inline bool FormattingSymbolsArchive::_internal_has_minus_sign() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_minus_sign() const {
  return _internal_has_minus_sign();
}
inline void FormattingSymbolsArchive::clear_minus_sign() {
  minus_sign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& FormattingSymbolsArchive::minus_sign() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.minus_sign)
  return _internal_minus_sign();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_minus_sign(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00040000u;
 minus_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.minus_sign)
}
inline std::string* FormattingSymbolsArchive::mutable_minus_sign() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.minus_sign)
  return _internal_mutable_minus_sign();
}
inline const std::string& FormattingSymbolsArchive::_internal_minus_sign() const {
  return minus_sign_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_minus_sign(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  minus_sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_minus_sign() {
  _has_bits_[0] |= 0x00040000u;
  return minus_sign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_minus_sign() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.minus_sign)
  if (!_internal_has_minus_sign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return minus_sign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_minus_sign(std::string* minus_sign) {
  if (minus_sign != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  minus_sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minus_sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.minus_sign)
}

// optional string exponential_symbol = 38;
inline bool FormattingSymbolsArchive::_internal_has_exponential_symbol() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_exponential_symbol() const {
  return _internal_has_exponential_symbol();
}
inline void FormattingSymbolsArchive::clear_exponential_symbol() {
  exponential_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& FormattingSymbolsArchive::exponential_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.exponential_symbol)
  return _internal_exponential_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_exponential_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00080000u;
 exponential_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.exponential_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_exponential_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.exponential_symbol)
  return _internal_mutable_exponential_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_exponential_symbol() const {
  return exponential_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_exponential_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  exponential_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_exponential_symbol() {
  _has_bits_[0] |= 0x00080000u;
  return exponential_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_exponential_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.exponential_symbol)
  if (!_internal_has_exponential_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return exponential_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_exponential_symbol(std::string* exponential_symbol) {
  if (exponential_symbol != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  exponential_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exponential_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.exponential_symbol)
}

// optional string percent_symbol = 39;
inline bool FormattingSymbolsArchive::_internal_has_percent_symbol() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_percent_symbol() const {
  return _internal_has_percent_symbol();
}
inline void FormattingSymbolsArchive::clear_percent_symbol() {
  percent_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& FormattingSymbolsArchive::percent_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.percent_symbol)
  return _internal_percent_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_percent_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00100000u;
 percent_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.percent_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_percent_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.percent_symbol)
  return _internal_mutable_percent_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_percent_symbol() const {
  return percent_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_percent_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  percent_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_percent_symbol() {
  _has_bits_[0] |= 0x00100000u;
  return percent_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_percent_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.percent_symbol)
  if (!_internal_has_percent_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return percent_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_percent_symbol(std::string* percent_symbol) {
  if (percent_symbol != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  percent_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percent_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.percent_symbol)
}

// optional string per_mille_symbol = 40;
inline bool FormattingSymbolsArchive::_internal_has_per_mille_symbol() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_per_mille_symbol() const {
  return _internal_has_per_mille_symbol();
}
inline void FormattingSymbolsArchive::clear_per_mille_symbol() {
  per_mille_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& FormattingSymbolsArchive::per_mille_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.per_mille_symbol)
  return _internal_per_mille_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_per_mille_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00200000u;
 per_mille_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.per_mille_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_per_mille_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.per_mille_symbol)
  return _internal_mutable_per_mille_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_per_mille_symbol() const {
  return per_mille_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_per_mille_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  per_mille_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_per_mille_symbol() {
  _has_bits_[0] |= 0x00200000u;
  return per_mille_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_per_mille_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.per_mille_symbol)
  if (!_internal_has_per_mille_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return per_mille_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_per_mille_symbol(std::string* per_mille_symbol) {
  if (per_mille_symbol != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  per_mille_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), per_mille_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.per_mille_symbol)
}

// optional string infinity_symbol = 41;
inline bool FormattingSymbolsArchive::_internal_has_infinity_symbol() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_infinity_symbol() const {
  return _internal_has_infinity_symbol();
}
inline void FormattingSymbolsArchive::clear_infinity_symbol() {
  infinity_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& FormattingSymbolsArchive::infinity_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.infinity_symbol)
  return _internal_infinity_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_infinity_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00400000u;
 infinity_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.infinity_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_infinity_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.infinity_symbol)
  return _internal_mutable_infinity_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_infinity_symbol() const {
  return infinity_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_infinity_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  infinity_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_infinity_symbol() {
  _has_bits_[0] |= 0x00400000u;
  return infinity_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_infinity_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.infinity_symbol)
  if (!_internal_has_infinity_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  return infinity_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_infinity_symbol(std::string* infinity_symbol) {
  if (infinity_symbol != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  infinity_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), infinity_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.infinity_symbol)
}

// optional string nan_symbol = 42;
inline bool FormattingSymbolsArchive::_internal_has_nan_symbol() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_nan_symbol() const {
  return _internal_has_nan_symbol();
}
inline void FormattingSymbolsArchive::clear_nan_symbol() {
  nan_symbol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00800000u;
}
inline const std::string& FormattingSymbolsArchive::nan_symbol() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.nan_symbol)
  return _internal_nan_symbol();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_nan_symbol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00800000u;
 nan_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.nan_symbol)
}
inline std::string* FormattingSymbolsArchive::mutable_nan_symbol() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.nan_symbol)
  return _internal_mutable_nan_symbol();
}
inline const std::string& FormattingSymbolsArchive::_internal_nan_symbol() const {
  return nan_symbol_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_nan_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00800000u;
  nan_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_nan_symbol() {
  _has_bits_[0] |= 0x00800000u;
  return nan_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_nan_symbol() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.nan_symbol)
  if (!_internal_has_nan_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00800000u;
  return nan_symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_nan_symbol(std::string* nan_symbol) {
  if (nan_symbol != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  nan_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nan_symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.nan_symbol)
}

// optional string decimal_pattern = 43;
inline bool FormattingSymbolsArchive::_internal_has_decimal_pattern() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_decimal_pattern() const {
  return _internal_has_decimal_pattern();
}
inline void FormattingSymbolsArchive::clear_decimal_pattern() {
  decimal_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& FormattingSymbolsArchive::decimal_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.decimal_pattern)
  return _internal_decimal_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_decimal_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x01000000u;
 decimal_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.decimal_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_decimal_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.decimal_pattern)
  return _internal_mutable_decimal_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_decimal_pattern() const {
  return decimal_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_decimal_pattern(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  decimal_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_decimal_pattern() {
  _has_bits_[0] |= 0x01000000u;
  return decimal_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_decimal_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.decimal_pattern)
  if (!_internal_has_decimal_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  return decimal_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_decimal_pattern(std::string* decimal_pattern) {
  if (decimal_pattern != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  decimal_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decimal_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.decimal_pattern)
}

// optional string scientific_pattern = 44;
inline bool FormattingSymbolsArchive::_internal_has_scientific_pattern() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_scientific_pattern() const {
  return _internal_has_scientific_pattern();
}
inline void FormattingSymbolsArchive::clear_scientific_pattern() {
  scientific_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x02000000u;
}
inline const std::string& FormattingSymbolsArchive::scientific_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.scientific_pattern)
  return _internal_scientific_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_scientific_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x02000000u;
 scientific_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.scientific_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_scientific_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.scientific_pattern)
  return _internal_mutable_scientific_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_scientific_pattern() const {
  return scientific_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_scientific_pattern(const std::string& value) {
  _has_bits_[0] |= 0x02000000u;
  scientific_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_scientific_pattern() {
  _has_bits_[0] |= 0x02000000u;
  return scientific_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_scientific_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.scientific_pattern)
  if (!_internal_has_scientific_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x02000000u;
  return scientific_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_scientific_pattern(std::string* scientific_pattern) {
  if (scientific_pattern != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  scientific_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scientific_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.scientific_pattern)
}

// optional string percent_pattern = 45;
inline bool FormattingSymbolsArchive::_internal_has_percent_pattern() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_percent_pattern() const {
  return _internal_has_percent_pattern();
}
inline void FormattingSymbolsArchive::clear_percent_pattern() {
  percent_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x04000000u;
}
inline const std::string& FormattingSymbolsArchive::percent_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.percent_pattern)
  return _internal_percent_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_percent_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x04000000u;
 percent_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.percent_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_percent_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.percent_pattern)
  return _internal_mutable_percent_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_percent_pattern() const {
  return percent_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_percent_pattern(const std::string& value) {
  _has_bits_[0] |= 0x04000000u;
  percent_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_percent_pattern() {
  _has_bits_[0] |= 0x04000000u;
  return percent_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_percent_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.percent_pattern)
  if (!_internal_has_percent_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x04000000u;
  return percent_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_percent_pattern(std::string* percent_pattern) {
  if (percent_pattern != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  percent_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percent_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.percent_pattern)
}

// optional string currency_pattern = 46;
inline bool FormattingSymbolsArchive::_internal_has_currency_pattern() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_currency_pattern() const {
  return _internal_has_currency_pattern();
}
inline void FormattingSymbolsArchive::clear_currency_pattern() {
  currency_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x08000000u;
}
inline const std::string& FormattingSymbolsArchive::currency_pattern() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.currency_pattern)
  return _internal_currency_pattern();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_currency_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x08000000u;
 currency_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.currency_pattern)
}
inline std::string* FormattingSymbolsArchive::mutable_currency_pattern() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.currency_pattern)
  return _internal_mutable_currency_pattern();
}
inline const std::string& FormattingSymbolsArchive::_internal_currency_pattern() const {
  return currency_pattern_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_currency_pattern(const std::string& value) {
  _has_bits_[0] |= 0x08000000u;
  currency_pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_currency_pattern() {
  _has_bits_[0] |= 0x08000000u;
  return currency_pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_currency_pattern() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.currency_pattern)
  if (!_internal_has_currency_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x08000000u;
  return currency_pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_currency_pattern(std::string* currency_pattern) {
  if (currency_pattern != nullptr) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  currency_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.currency_pattern)
}

// optional string currency_code = 47;
inline bool FormattingSymbolsArchive::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FormattingSymbolsArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void FormattingSymbolsArchive::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x10000000u;
}
inline const std::string& FormattingSymbolsArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormattingSymbolsArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x10000000u;
 currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormattingSymbolsArchive.currency_code)
}
inline std::string* FormattingSymbolsArchive::mutable_currency_code() {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.currency_code)
  return _internal_mutable_currency_code();
}
inline const std::string& FormattingSymbolsArchive::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void FormattingSymbolsArchive::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x10000000u;
  currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormattingSymbolsArchive::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x10000000u;
  return currency_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormattingSymbolsArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TSK.FormattingSymbolsArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x10000000u;
  return currency_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattingSymbolsArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  currency_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormattingSymbolsArchive.currency_code)
}

// repeated .TSK.FormattingSymbolsArchive.CurrencySymbol currency_symbols = 48;
inline int FormattingSymbolsArchive::_internal_currency_symbols_size() const {
  return currency_symbols_.size();
}
inline int FormattingSymbolsArchive::currency_symbols_size() const {
  return _internal_currency_symbols_size();
}
inline void FormattingSymbolsArchive::clear_currency_symbols() {
  currency_symbols_.Clear();
}
inline ::TSK::FormattingSymbolsArchive_CurrencySymbol* FormattingSymbolsArchive::mutable_currency_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormattingSymbolsArchive.currency_symbols)
  return currency_symbols_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormattingSymbolsArchive_CurrencySymbol >*
FormattingSymbolsArchive::mutable_currency_symbols() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormattingSymbolsArchive.currency_symbols)
  return &currency_symbols_;
}
inline const ::TSK::FormattingSymbolsArchive_CurrencySymbol& FormattingSymbolsArchive::_internal_currency_symbols(int index) const {
  return currency_symbols_.Get(index);
}
inline const ::TSK::FormattingSymbolsArchive_CurrencySymbol& FormattingSymbolsArchive::currency_symbols(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormattingSymbolsArchive.currency_symbols)
  return _internal_currency_symbols(index);
}
inline ::TSK::FormattingSymbolsArchive_CurrencySymbol* FormattingSymbolsArchive::_internal_add_currency_symbols() {
  return currency_symbols_.Add();
}
inline ::TSK::FormattingSymbolsArchive_CurrencySymbol* FormattingSymbolsArchive::add_currency_symbols() {
  // @@protoc_insertion_point(field_add:TSK.FormattingSymbolsArchive.currency_symbols)
  return _internal_add_currency_symbols();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::FormattingSymbolsArchive_CurrencySymbol >&
FormattingSymbolsArchive::currency_symbols() const {
  // @@protoc_insertion_point(field_list:TSK.FormattingSymbolsArchive.currency_symbols)
  return currency_symbols_;
}

// -------------------------------------------------------------------

// DocumentSupportCollaborationState

// optional .TSP.Reference collaboration_command_history = 1;
inline bool DocumentSupportCollaborationState::_internal_has_collaboration_command_history() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || collaboration_command_history_ != nullptr);
  return value;
}
inline bool DocumentSupportCollaborationState::has_collaboration_command_history() const {
  return _internal_has_collaboration_command_history();
}
inline const ::TSP::Reference& DocumentSupportCollaborationState::_internal_collaboration_command_history() const {
  const ::TSP::Reference* p = collaboration_command_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportCollaborationState::collaboration_command_history() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportCollaborationState.collaboration_command_history)
  return _internal_collaboration_command_history();
}
inline void DocumentSupportCollaborationState::unsafe_arena_set_allocated_collaboration_command_history(
    ::TSP::Reference* collaboration_command_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_command_history_);
  }
  collaboration_command_history_ = collaboration_command_history;
  if (collaboration_command_history) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportCollaborationState.collaboration_command_history)
}
inline ::TSP::Reference* DocumentSupportCollaborationState::release_collaboration_command_history() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = collaboration_command_history_;
  collaboration_command_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportCollaborationState::unsafe_arena_release_collaboration_command_history() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportCollaborationState.collaboration_command_history)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = collaboration_command_history_;
  collaboration_command_history_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportCollaborationState::_internal_mutable_collaboration_command_history() {
  _has_bits_[0] |= 0x00000001u;
  if (collaboration_command_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    collaboration_command_history_ = p;
  }
  return collaboration_command_history_;
}
inline ::TSP::Reference* DocumentSupportCollaborationState::mutable_collaboration_command_history() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportCollaborationState.collaboration_command_history)
  return _internal_mutable_collaboration_command_history();
}
inline void DocumentSupportCollaborationState::set_allocated_collaboration_command_history(::TSP::Reference* collaboration_command_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_command_history_);
  }
  if (collaboration_command_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_command_history)->GetArena();
    if (message_arena != submessage_arena) {
      collaboration_command_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaboration_command_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collaboration_command_history_ = collaboration_command_history;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportCollaborationState.collaboration_command_history)
}

// optional .TSP.Reference collaboration_session_state = 2;
inline bool DocumentSupportCollaborationState::_internal_has_collaboration_session_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || collaboration_session_state_ != nullptr);
  return value;
}
inline bool DocumentSupportCollaborationState::has_collaboration_session_state() const {
  return _internal_has_collaboration_session_state();
}
inline const ::TSP::Reference& DocumentSupportCollaborationState::_internal_collaboration_session_state() const {
  const ::TSP::Reference* p = collaboration_session_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportCollaborationState::collaboration_session_state() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportCollaborationState.collaboration_session_state)
  return _internal_collaboration_session_state();
}
inline void DocumentSupportCollaborationState::unsafe_arena_set_allocated_collaboration_session_state(
    ::TSP::Reference* collaboration_session_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_session_state_);
  }
  collaboration_session_state_ = collaboration_session_state;
  if (collaboration_session_state) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportCollaborationState.collaboration_session_state)
}
inline ::TSP::Reference* DocumentSupportCollaborationState::release_collaboration_session_state() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = collaboration_session_state_;
  collaboration_session_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportCollaborationState::unsafe_arena_release_collaboration_session_state() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportCollaborationState.collaboration_session_state)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = collaboration_session_state_;
  collaboration_session_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportCollaborationState::_internal_mutable_collaboration_session_state() {
  _has_bits_[0] |= 0x00000002u;
  if (collaboration_session_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    collaboration_session_state_ = p;
  }
  return collaboration_session_state_;
}
inline ::TSP::Reference* DocumentSupportCollaborationState::mutable_collaboration_session_state() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportCollaborationState.collaboration_session_state)
  return _internal_mutable_collaboration_session_state();
}
inline void DocumentSupportCollaborationState::set_allocated_collaboration_session_state(::TSP::Reference* collaboration_session_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_session_state_);
  }
  if (collaboration_session_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_session_state)->GetArena();
    if (message_arena != submessage_arena) {
      collaboration_session_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaboration_session_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  collaboration_session_state_ = collaboration_session_state;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportCollaborationState.collaboration_session_state)
}

// -------------------------------------------------------------------

// DocumentSupportArchive

// optional .TSP.Reference command_history = 1;
inline bool DocumentSupportArchive::_internal_has_command_history() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || command_history_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_command_history() const {
  return _internal_has_command_history();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_command_history() const {
  const ::TSP::Reference* p = command_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::command_history() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.command_history)
  return _internal_command_history();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_command_history(
    ::TSP::Reference* command_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_history_);
  }
  command_history_ = command_history;
  if (command_history) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.command_history)
}
inline ::TSP::Reference* DocumentSupportArchive::release_command_history() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = command_history_;
  command_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_command_history() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.command_history)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = command_history_;
  command_history_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_command_history() {
  _has_bits_[0] |= 0x00000008u;
  if (command_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_history_ = p;
  }
  return command_history_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_command_history() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.command_history)
  return _internal_mutable_command_history();
}
inline void DocumentSupportArchive::set_allocated_command_history(::TSP::Reference* command_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_history_);
  }
  if (command_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_history)->GetArena();
    if (message_arena != submessage_arena) {
      command_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  command_history_ = command_history;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.command_history)
}

// optional uint32 undo_count = 4;
inline bool DocumentSupportArchive::_internal_has_undo_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DocumentSupportArchive::has_undo_count() const {
  return _internal_has_undo_count();
}
inline void DocumentSupportArchive::clear_undo_count() {
  undo_count_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentSupportArchive::_internal_undo_count() const {
  return undo_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentSupportArchive::undo_count() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.undo_count)
  return _internal_undo_count();
}
inline void DocumentSupportArchive::_internal_set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  undo_count_ = value;
}
inline void DocumentSupportArchive::set_undo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_undo_count(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentSupportArchive.undo_count)
}

// optional uint32 redo_count = 5;
inline bool DocumentSupportArchive::_internal_has_redo_count() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DocumentSupportArchive::has_redo_count() const {
  return _internal_has_redo_count();
}
inline void DocumentSupportArchive::clear_redo_count() {
  redo_count_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentSupportArchive::_internal_redo_count() const {
  return redo_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DocumentSupportArchive::redo_count() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.redo_count)
  return _internal_redo_count();
}
inline void DocumentSupportArchive::_internal_set_redo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  redo_count_ = value;
}
inline void DocumentSupportArchive::set_redo_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_redo_count(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentSupportArchive.redo_count)
}

// optional string undo_action_string = 6;
inline bool DocumentSupportArchive::_internal_has_undo_action_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DocumentSupportArchive::has_undo_action_string() const {
  return _internal_has_undo_action_string();
}
inline void DocumentSupportArchive::clear_undo_action_string() {
  undo_action_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DocumentSupportArchive::undo_action_string() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.undo_action_string)
  return _internal_undo_action_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentSupportArchive::set_undo_action_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 undo_action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.DocumentSupportArchive.undo_action_string)
}
inline std::string* DocumentSupportArchive::mutable_undo_action_string() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.undo_action_string)
  return _internal_mutable_undo_action_string();
}
inline const std::string& DocumentSupportArchive::_internal_undo_action_string() const {
  return undo_action_string_.Get();
}
inline void DocumentSupportArchive::_internal_set_undo_action_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  undo_action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentSupportArchive::_internal_mutable_undo_action_string() {
  _has_bits_[0] |= 0x00000001u;
  return undo_action_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentSupportArchive::release_undo_action_string() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.undo_action_string)
  if (!_internal_has_undo_action_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return undo_action_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentSupportArchive::set_allocated_undo_action_string(std::string* undo_action_string) {
  if (undo_action_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  undo_action_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), undo_action_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.undo_action_string)
}

// optional string redo_action_string = 7;
inline bool DocumentSupportArchive::_internal_has_redo_action_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DocumentSupportArchive::has_redo_action_string() const {
  return _internal_has_redo_action_string();
}
inline void DocumentSupportArchive::clear_redo_action_string() {
  redo_action_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DocumentSupportArchive::redo_action_string() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.redo_action_string)
  return _internal_redo_action_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentSupportArchive::set_redo_action_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 redo_action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.DocumentSupportArchive.redo_action_string)
}
inline std::string* DocumentSupportArchive::mutable_redo_action_string() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.redo_action_string)
  return _internal_mutable_redo_action_string();
}
inline const std::string& DocumentSupportArchive::_internal_redo_action_string() const {
  return redo_action_string_.Get();
}
inline void DocumentSupportArchive::_internal_set_redo_action_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  redo_action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentSupportArchive::_internal_mutable_redo_action_string() {
  _has_bits_[0] |= 0x00000002u;
  return redo_action_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentSupportArchive::release_redo_action_string() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.redo_action_string)
  if (!_internal_has_redo_action_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return redo_action_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentSupportArchive::set_allocated_redo_action_string(std::string* redo_action_string) {
  if (redo_action_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  redo_action_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redo_action_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.redo_action_string)
}

// optional .TSP.Reference web_state = 8;
inline bool DocumentSupportArchive::_internal_has_web_state() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || web_state_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_web_state() const {
  return _internal_has_web_state();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_web_state() const {
  const ::TSP::Reference* p = web_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::web_state() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.web_state)
  return _internal_web_state();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_web_state(
    ::TSP::Reference* web_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_state_);
  }
  web_state_ = web_state;
  if (web_state) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.web_state)
}
inline ::TSP::Reference* DocumentSupportArchive::release_web_state() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = web_state_;
  web_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_web_state() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.web_state)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = web_state_;
  web_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_web_state() {
  _has_bits_[0] |= 0x00000040u;
  if (web_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    web_state_ = p;
  }
  return web_state_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_web_state() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.web_state)
  return _internal_mutable_web_state();
}
inline void DocumentSupportArchive::set_allocated_web_state(::TSP::Reference* web_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_state_);
  }
  if (web_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_state)->GetArena();
    if (message_arena != submessage_arena) {
      web_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  web_state_ = web_state;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.web_state)
}

// optional bool is_in_collaboration_mode = 9 [default = false];
inline bool DocumentSupportArchive::_internal_has_is_in_collaboration_mode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DocumentSupportArchive::has_is_in_collaboration_mode() const {
  return _internal_has_is_in_collaboration_mode();
}
inline void DocumentSupportArchive::clear_is_in_collaboration_mode() {
  is_in_collaboration_mode_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool DocumentSupportArchive::_internal_is_in_collaboration_mode() const {
  return is_in_collaboration_mode_;
}
inline bool DocumentSupportArchive::is_in_collaboration_mode() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.is_in_collaboration_mode)
  return _internal_is_in_collaboration_mode();
}
inline void DocumentSupportArchive::_internal_set_is_in_collaboration_mode(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_in_collaboration_mode_ = value;
}
inline void DocumentSupportArchive::set_is_in_collaboration_mode(bool value) {
  _internal_set_is_in_collaboration_mode(value);
  // @@protoc_insertion_point(field_set:TSK.DocumentSupportArchive.is_in_collaboration_mode)
}

// optional string action_string_localization = 12;
inline bool DocumentSupportArchive::_internal_has_action_string_localization() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DocumentSupportArchive::has_action_string_localization() const {
  return _internal_has_action_string_localization();
}
inline void DocumentSupportArchive::clear_action_string_localization() {
  action_string_localization_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DocumentSupportArchive::action_string_localization() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.action_string_localization)
  return _internal_action_string_localization();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DocumentSupportArchive::set_action_string_localization(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 action_string_localization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.DocumentSupportArchive.action_string_localization)
}
inline std::string* DocumentSupportArchive::mutable_action_string_localization() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.action_string_localization)
  return _internal_mutable_action_string_localization();
}
inline const std::string& DocumentSupportArchive::_internal_action_string_localization() const {
  return action_string_localization_.Get();
}
inline void DocumentSupportArchive::_internal_set_action_string_localization(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  action_string_localization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DocumentSupportArchive::_internal_mutable_action_string_localization() {
  _has_bits_[0] |= 0x00000004u;
  return action_string_localization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DocumentSupportArchive::release_action_string_localization() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.action_string_localization)
  if (!_internal_has_action_string_localization()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return action_string_localization_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentSupportArchive::set_allocated_action_string_localization(std::string* action_string_localization) {
  if (action_string_localization != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_string_localization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_string_localization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.action_string_localization)
}

// optional .TSP.Reference collaboration_state = 13;
inline bool DocumentSupportArchive::_internal_has_collaboration_state() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || collaboration_state_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_collaboration_state() const {
  return _internal_has_collaboration_state();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_collaboration_state() const {
  const ::TSP::Reference* p = collaboration_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::collaboration_state() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.collaboration_state)
  return _internal_collaboration_state();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_collaboration_state(
    ::TSP::Reference* collaboration_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_state_);
  }
  collaboration_state_ = collaboration_state;
  if (collaboration_state) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.collaboration_state)
}
inline ::TSP::Reference* DocumentSupportArchive::release_collaboration_state() {
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = collaboration_state_;
  collaboration_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_collaboration_state() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.collaboration_state)
  _has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = collaboration_state_;
  collaboration_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_collaboration_state() {
  _has_bits_[0] |= 0x00000200u;
  if (collaboration_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    collaboration_state_ = p;
  }
  return collaboration_state_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_collaboration_state() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.collaboration_state)
  return _internal_mutable_collaboration_state();
}
inline void DocumentSupportArchive::set_allocated_collaboration_state(::TSP::Reference* collaboration_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_state_);
  }
  if (collaboration_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_state)->GetArena();
    if (message_arena != submessage_arena) {
      collaboration_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaboration_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  collaboration_state_ = collaboration_state;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.collaboration_state)
}

// optional .TSP.Reference command_selection_behavior_history = 2 [deprecated = true];
inline bool DocumentSupportArchive::_internal_has_command_selection_behavior_history() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || command_selection_behavior_history_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_command_selection_behavior_history() const {
  return _internal_has_command_selection_behavior_history();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_command_selection_behavior_history() const {
  const ::TSP::Reference* p = command_selection_behavior_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::command_selection_behavior_history() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.command_selection_behavior_history)
  return _internal_command_selection_behavior_history();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_command_selection_behavior_history(
    ::TSP::Reference* command_selection_behavior_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_selection_behavior_history_);
  }
  command_selection_behavior_history_ = command_selection_behavior_history;
  if (command_selection_behavior_history) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.command_selection_behavior_history)
}
inline ::TSP::Reference* DocumentSupportArchive::release_command_selection_behavior_history() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = command_selection_behavior_history_;
  command_selection_behavior_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_command_selection_behavior_history() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.command_selection_behavior_history)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = command_selection_behavior_history_;
  command_selection_behavior_history_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_command_selection_behavior_history() {
  _has_bits_[0] |= 0x00000010u;
  if (command_selection_behavior_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_selection_behavior_history_ = p;
  }
  return command_selection_behavior_history_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_command_selection_behavior_history() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.command_selection_behavior_history)
  return _internal_mutable_command_selection_behavior_history();
}
inline void DocumentSupportArchive::set_allocated_command_selection_behavior_history(::TSP::Reference* command_selection_behavior_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_selection_behavior_history_);
  }
  if (command_selection_behavior_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_selection_behavior_history)->GetArena();
    if (message_arena != submessage_arena) {
      command_selection_behavior_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_selection_behavior_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  command_selection_behavior_history_ = command_selection_behavior_history;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.command_selection_behavior_history)
}

// optional .TSP.Reference view_state = 3 [deprecated = true];
inline bool DocumentSupportArchive::_internal_has_view_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || view_state_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_view_state() const {
  return _internal_has_view_state();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_view_state() const {
  const ::TSP::Reference* p = view_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::view_state() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.view_state)
  return _internal_view_state();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_view_state(
    ::TSP::Reference* view_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_);
  }
  view_state_ = view_state;
  if (view_state) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.view_state)
}
inline ::TSP::Reference* DocumentSupportArchive::release_view_state() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = view_state_;
  view_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_view_state() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.view_state)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = view_state_;
  view_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_view_state() {
  _has_bits_[0] |= 0x00000020u;
  if (view_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    view_state_ = p;
  }
  return view_state_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_view_state() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.view_state)
  return _internal_mutable_view_state();
}
inline void DocumentSupportArchive::set_allocated_view_state(::TSP::Reference* view_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_);
  }
  if (view_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state)->GetArena();
    if (message_arena != submessage_arena) {
      view_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  view_state_ = view_state;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.view_state)
}

// optional .TSP.Reference collaboration_command_history = 10 [deprecated = true];
inline bool DocumentSupportArchive::_internal_has_collaboration_command_history() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || collaboration_command_history_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_collaboration_command_history() const {
  return _internal_has_collaboration_command_history();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_collaboration_command_history() const {
  const ::TSP::Reference* p = collaboration_command_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::collaboration_command_history() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.collaboration_command_history)
  return _internal_collaboration_command_history();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_collaboration_command_history(
    ::TSP::Reference* collaboration_command_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_command_history_);
  }
  collaboration_command_history_ = collaboration_command_history;
  if (collaboration_command_history) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.collaboration_command_history)
}
inline ::TSP::Reference* DocumentSupportArchive::release_collaboration_command_history() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = collaboration_command_history_;
  collaboration_command_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_collaboration_command_history() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.collaboration_command_history)
  _has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = collaboration_command_history_;
  collaboration_command_history_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_collaboration_command_history() {
  _has_bits_[0] |= 0x00000080u;
  if (collaboration_command_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    collaboration_command_history_ = p;
  }
  return collaboration_command_history_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_collaboration_command_history() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.collaboration_command_history)
  return _internal_mutable_collaboration_command_history();
}
inline void DocumentSupportArchive::set_allocated_collaboration_command_history(::TSP::Reference* collaboration_command_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_command_history_);
  }
  if (collaboration_command_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_command_history)->GetArena();
    if (message_arena != submessage_arena) {
      collaboration_command_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaboration_command_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  collaboration_command_history_ = collaboration_command_history;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.collaboration_command_history)
}

// optional .TSP.Reference collaboration_session_state = 11 [deprecated = true];
inline bool DocumentSupportArchive::_internal_has_collaboration_session_state() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || collaboration_session_state_ != nullptr);
  return value;
}
inline bool DocumentSupportArchive::has_collaboration_session_state() const {
  return _internal_has_collaboration_session_state();
}
inline const ::TSP::Reference& DocumentSupportArchive::_internal_collaboration_session_state() const {
  const ::TSP::Reference* p = collaboration_session_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSupportArchive::collaboration_session_state() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSupportArchive.collaboration_session_state)
  return _internal_collaboration_session_state();
}
inline void DocumentSupportArchive::unsafe_arena_set_allocated_collaboration_session_state(
    ::TSP::Reference* collaboration_session_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_session_state_);
  }
  collaboration_session_state_ = collaboration_session_state;
  if (collaboration_session_state) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSupportArchive.collaboration_session_state)
}
inline ::TSP::Reference* DocumentSupportArchive::release_collaboration_session_state() {
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = collaboration_session_state_;
  collaboration_session_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::unsafe_arena_release_collaboration_session_state() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSupportArchive.collaboration_session_state)
  _has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = collaboration_session_state_;
  collaboration_session_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSupportArchive::_internal_mutable_collaboration_session_state() {
  _has_bits_[0] |= 0x00000100u;
  if (collaboration_session_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    collaboration_session_state_ = p;
  }
  return collaboration_session_state_;
}
inline ::TSP::Reference* DocumentSupportArchive::mutable_collaboration_session_state() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSupportArchive.collaboration_session_state)
  return _internal_mutable_collaboration_session_state();
}
inline void DocumentSupportArchive::set_allocated_collaboration_session_state(::TSP::Reference* collaboration_session_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_session_state_);
  }
  if (collaboration_session_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaboration_session_state)->GetArena();
    if (message_arena != submessage_arena) {
      collaboration_session_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaboration_session_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  collaboration_session_state_ = collaboration_session_state;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSupportArchive.collaboration_session_state)
}

// -------------------------------------------------------------------

// ViewStateArchive

// required .TSP.Reference view_state_root = 1;
inline bool ViewStateArchive::_internal_has_view_state_root() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || view_state_root_ != nullptr);
  return value;
}
inline bool ViewStateArchive::has_view_state_root() const {
  return _internal_has_view_state_root();
}
inline const ::TSP::Reference& ViewStateArchive::_internal_view_state_root() const {
  const ::TSP::Reference* p = view_state_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ViewStateArchive::view_state_root() const {
  // @@protoc_insertion_point(field_get:TSK.ViewStateArchive.view_state_root)
  return _internal_view_state_root();
}
inline void ViewStateArchive::unsafe_arena_set_allocated_view_state_root(
    ::TSP::Reference* view_state_root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_root_);
  }
  view_state_root_ = view_state_root;
  if (view_state_root) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.ViewStateArchive.view_state_root)
}
inline ::TSP::Reference* ViewStateArchive::release_view_state_root() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = view_state_root_;
  view_state_root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* ViewStateArchive::unsafe_arena_release_view_state_root() {
  // @@protoc_insertion_point(field_release:TSK.ViewStateArchive.view_state_root)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = view_state_root_;
  view_state_root_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ViewStateArchive::_internal_mutable_view_state_root() {
  _has_bits_[0] |= 0x00000002u;
  if (view_state_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    view_state_root_ = p;
  }
  return view_state_root_;
}
inline ::TSP::Reference* ViewStateArchive::mutable_view_state_root() {
  // @@protoc_insertion_point(field_mutable:TSK.ViewStateArchive.view_state_root)
  return _internal_mutable_view_state_root();
}
inline void ViewStateArchive::set_allocated_view_state_root(::TSP::Reference* view_state_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_root_);
  }
  if (view_state_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state_root)->GetArena();
    if (message_arena != submessage_arena) {
      view_state_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_state_root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  view_state_root_ = view_state_root;
  // @@protoc_insertion_point(field_set_allocated:TSK.ViewStateArchive.view_state_root)
}

// optional int32 document_revision_sequence = 2;
inline bool ViewStateArchive::_internal_has_document_revision_sequence() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ViewStateArchive::has_document_revision_sequence() const {
  return _internal_has_document_revision_sequence();
}
inline void ViewStateArchive::clear_document_revision_sequence() {
  document_revision_sequence_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewStateArchive::_internal_document_revision_sequence() const {
  return document_revision_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewStateArchive::document_revision_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.ViewStateArchive.document_revision_sequence)
  return _internal_document_revision_sequence();
}
inline void ViewStateArchive::_internal_set_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  document_revision_sequence_ = value;
}
inline void ViewStateArchive::set_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_document_revision_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.ViewStateArchive.document_revision_sequence)
}

// optional string document_revision_identifier = 3;
inline bool ViewStateArchive::_internal_has_document_revision_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ViewStateArchive::has_document_revision_identifier() const {
  return _internal_has_document_revision_identifier();
}
inline void ViewStateArchive::clear_document_revision_identifier() {
  document_revision_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ViewStateArchive::document_revision_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.ViewStateArchive.document_revision_identifier)
  return _internal_document_revision_identifier();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ViewStateArchive::set_document_revision_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 document_revision_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.ViewStateArchive.document_revision_identifier)
}
inline std::string* ViewStateArchive::mutable_document_revision_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.ViewStateArchive.document_revision_identifier)
  return _internal_mutable_document_revision_identifier();
}
inline const std::string& ViewStateArchive::_internal_document_revision_identifier() const {
  return document_revision_identifier_.Get();
}
inline void ViewStateArchive::_internal_set_document_revision_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  document_revision_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ViewStateArchive::_internal_mutable_document_revision_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return document_revision_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ViewStateArchive::release_document_revision_identifier() {
  // @@protoc_insertion_point(field_release:TSK.ViewStateArchive.document_revision_identifier)
  if (!_internal_has_document_revision_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return document_revision_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewStateArchive::set_allocated_document_revision_identifier(std::string* document_revision_identifier) {
  if (document_revision_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  document_revision_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_revision_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.ViewStateArchive.document_revision_identifier)
}

// -------------------------------------------------------------------

// CommandArchive

// optional .TSP.Reference undoRedoState = 1 [deprecated = true];
inline bool CommandArchive::_internal_has_undoredostate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || undoredostate_ != nullptr);
  return value;
}
inline bool CommandArchive::has_undoredostate() const {
  return _internal_has_undoredostate();
}
inline const ::TSP::Reference& CommandArchive::_internal_undoredostate() const {
  const ::TSP::Reference* p = undoredostate_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandArchive::undoredostate() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.undoRedoState)
  return _internal_undoredostate();
}
inline void CommandArchive::unsafe_arena_set_allocated_undoredostate(
    ::TSP::Reference* undoredostate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undoredostate_);
  }
  undoredostate_ = undoredostate;
  if (undoredostate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandArchive.undoRedoState)
}
inline ::TSP::Reference* CommandArchive::release_undoredostate() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = undoredostate_;
  undoredostate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandArchive::unsafe_arena_release_undoredostate() {
  // @@protoc_insertion_point(field_release:TSK.CommandArchive.undoRedoState)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = undoredostate_;
  undoredostate_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandArchive::_internal_mutable_undoredostate() {
  _has_bits_[0] |= 0x00000001u;
  if (undoredostate_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    undoredostate_ = p;
  }
  return undoredostate_;
}
inline ::TSP::Reference* CommandArchive::mutable_undoredostate() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandArchive.undoRedoState)
  return _internal_mutable_undoredostate();
}
inline void CommandArchive::set_allocated_undoredostate(::TSP::Reference* undoredostate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undoredostate_);
  }
  if (undoredostate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undoredostate)->GetArena();
    if (message_arena != submessage_arena) {
      undoredostate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undoredostate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  undoredostate_ = undoredostate;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandArchive.undoRedoState)
}

// optional .TSP.Reference undoCollection = 2;
inline bool CommandArchive::_internal_has_undocollection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || undocollection_ != nullptr);
  return value;
}
inline bool CommandArchive::has_undocollection() const {
  return _internal_has_undocollection();
}
inline const ::TSP::Reference& CommandArchive::_internal_undocollection() const {
  const ::TSP::Reference* p = undocollection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandArchive::undocollection() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.undoCollection)
  return _internal_undocollection();
}
inline void CommandArchive::unsafe_arena_set_allocated_undocollection(
    ::TSP::Reference* undocollection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undocollection_);
  }
  undocollection_ = undocollection;
  if (undocollection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandArchive.undoCollection)
}
inline ::TSP::Reference* CommandArchive::release_undocollection() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undocollection_;
  undocollection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandArchive::unsafe_arena_release_undocollection() {
  // @@protoc_insertion_point(field_release:TSK.CommandArchive.undoCollection)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = undocollection_;
  undocollection_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandArchive::_internal_mutable_undocollection() {
  _has_bits_[0] |= 0x00000002u;
  if (undocollection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    undocollection_ = p;
  }
  return undocollection_;
}
inline ::TSP::Reference* CommandArchive::mutable_undocollection() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandArchive.undoCollection)
  return _internal_mutable_undocollection();
}
inline void CommandArchive::set_allocated_undocollection(::TSP::Reference* undocollection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(undocollection_);
  }
  if (undocollection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(undocollection)->GetArena();
    if (message_arena != submessage_arena) {
      undocollection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undocollection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  undocollection_ = undocollection;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandArchive.undoCollection)
}

// optional bool shadowed_by_transform = 3;
inline bool CommandArchive::_internal_has_shadowed_by_transform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandArchive::has_shadowed_by_transform() const {
  return _internal_has_shadowed_by_transform();
}
inline void CommandArchive::clear_shadowed_by_transform() {
  shadowed_by_transform_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CommandArchive::_internal_shadowed_by_transform() const {
  return shadowed_by_transform_;
}
inline bool CommandArchive::shadowed_by_transform() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.shadowed_by_transform)
  return _internal_shadowed_by_transform();
}
inline void CommandArchive::_internal_set_shadowed_by_transform(bool value) {
  _has_bits_[0] |= 0x00000004u;
  shadowed_by_transform_ = value;
}
inline void CommandArchive::set_shadowed_by_transform(bool value) {
  _internal_set_shadowed_by_transform(value);
  // @@protoc_insertion_point(field_set:TSK.CommandArchive.shadowed_by_transform)
}

// optional bool shadowed_by_commit = 4;
inline bool CommandArchive::_internal_has_shadowed_by_commit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandArchive::has_shadowed_by_commit() const {
  return _internal_has_shadowed_by_commit();
}
inline void CommandArchive::clear_shadowed_by_commit() {
  shadowed_by_commit_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CommandArchive::_internal_shadowed_by_commit() const {
  return shadowed_by_commit_;
}
inline bool CommandArchive::shadowed_by_commit() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.shadowed_by_commit)
  return _internal_shadowed_by_commit();
}
inline void CommandArchive::_internal_set_shadowed_by_commit(bool value) {
  _has_bits_[0] |= 0x00000008u;
  shadowed_by_commit_ = value;
}
inline void CommandArchive::set_shadowed_by_commit(bool value) {
  _internal_set_shadowed_by_commit(value);
  // @@protoc_insertion_point(field_set:TSK.CommandArchive.shadowed_by_commit)
}

// optional bool remote = 5;
inline bool CommandArchive::_internal_has_remote() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandArchive::has_remote() const {
  return _internal_has_remote();
}
inline void CommandArchive::clear_remote() {
  remote_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CommandArchive::_internal_remote() const {
  return remote_;
}
inline bool CommandArchive::remote() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.remote)
  return _internal_remote();
}
inline void CommandArchive::_internal_set_remote(bool value) {
  _has_bits_[0] |= 0x00000010u;
  remote_ = value;
}
inline void CommandArchive::set_remote(bool value) {
  _internal_set_remote(value);
  // @@protoc_insertion_point(field_set:TSK.CommandArchive.remote)
}

// optional bool should_hold_until_group_commit = 6;
inline bool CommandArchive::_internal_has_should_hold_until_group_commit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandArchive::has_should_hold_until_group_commit() const {
  return _internal_has_should_hold_until_group_commit();
}
inline void CommandArchive::clear_should_hold_until_group_commit() {
  should_hold_until_group_commit_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CommandArchive::_internal_should_hold_until_group_commit() const {
  return should_hold_until_group_commit_;
}
inline bool CommandArchive::should_hold_until_group_commit() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.should_hold_until_group_commit)
  return _internal_should_hold_until_group_commit();
}
inline void CommandArchive::_internal_set_should_hold_until_group_commit(bool value) {
  _has_bits_[0] |= 0x00000020u;
  should_hold_until_group_commit_ = value;
}
inline void CommandArchive::set_should_hold_until_group_commit(bool value) {
  _internal_set_should_hold_until_group_commit(value);
  // @@protoc_insertion_point(field_set:TSK.CommandArchive.should_hold_until_group_commit)
}

// optional bool server_originated = 7;
inline bool CommandArchive::_internal_has_server_originated() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandArchive::has_server_originated() const {
  return _internal_has_server_originated();
}
inline void CommandArchive::clear_server_originated() {
  server_originated_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CommandArchive::_internal_server_originated() const {
  return server_originated_;
}
inline bool CommandArchive::server_originated() const {
  // @@protoc_insertion_point(field_get:TSK.CommandArchive.server_originated)
  return _internal_server_originated();
}
inline void CommandArchive::_internal_set_server_originated(bool value) {
  _has_bits_[0] |= 0x00000040u;
  server_originated_ = value;
}
inline void CommandArchive::set_server_originated(bool value) {
  _internal_set_server_originated(value);
  // @@protoc_insertion_point(field_set:TSK.CommandArchive.server_originated)
}

// -------------------------------------------------------------------

// CommandGroupArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandGroupArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandGroupArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSK::CommandArchive& CommandGroupArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.CommandGroupArchive.super)
  return _internal_super();
}
inline void CommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandGroupArchive.super)
}
inline ::TSK::CommandArchive* CommandGroupArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.CommandGroupArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandGroupArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandGroupArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandGroupArchive.super)
  return _internal_mutable_super();
}
inline void CommandGroupArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandGroupArchive.super)
}

// repeated .TSP.Reference commands = 2;
inline int CommandGroupArchive::_internal_commands_size() const {
  return commands_.size();
}
inline int CommandGroupArchive::commands_size() const {
  return _internal_commands_size();
}
inline ::TSP::Reference* CommandGroupArchive::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CommandGroupArchive.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandGroupArchive::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CommandGroupArchive.commands)
  return &commands_;
}
inline const ::TSP::Reference& CommandGroupArchive::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::TSP::Reference& CommandGroupArchive::commands(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CommandGroupArchive.commands)
  return _internal_commands(index);
}
inline ::TSP::Reference* CommandGroupArchive::_internal_add_commands() {
  return commands_.Add();
}
inline ::TSP::Reference* CommandGroupArchive::add_commands() {
  // @@protoc_insertion_point(field_add:TSK.CommandGroupArchive.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandGroupArchive::commands() const {
  // @@protoc_insertion_point(field_list:TSK.CommandGroupArchive.commands)
  return commands_;
}

// optional .TSP.IndexSet process_results = 3;
inline bool CommandGroupArchive::_internal_has_process_results() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || process_results_ != nullptr);
  return value;
}
inline bool CommandGroupArchive::has_process_results() const {
  return _internal_has_process_results();
}
inline const ::TSP::IndexSet& CommandGroupArchive::_internal_process_results() const {
  const ::TSP::IndexSet* p = process_results_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& CommandGroupArchive::process_results() const {
  // @@protoc_insertion_point(field_get:TSK.CommandGroupArchive.process_results)
  return _internal_process_results();
}
inline void CommandGroupArchive::unsafe_arena_set_allocated_process_results(
    ::TSP::IndexSet* process_results) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_results_);
  }
  process_results_ = process_results;
  if (process_results) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandGroupArchive.process_results)
}
inline ::TSP::IndexSet* CommandGroupArchive::release_process_results() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = process_results_;
  process_results_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::IndexSet* CommandGroupArchive::unsafe_arena_release_process_results() {
  // @@protoc_insertion_point(field_release:TSK.CommandGroupArchive.process_results)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = process_results_;
  process_results_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* CommandGroupArchive::_internal_mutable_process_results() {
  _has_bits_[0] |= 0x00000004u;
  if (process_results_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArena());
    process_results_ = p;
  }
  return process_results_;
}
inline ::TSP::IndexSet* CommandGroupArchive::mutable_process_results() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandGroupArchive.process_results)
  return _internal_mutable_process_results();
}
inline void CommandGroupArchive::set_allocated_process_results(::TSP::IndexSet* process_results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_results_);
  }
  if (process_results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_results)->GetArena();
    if (message_arena != submessage_arena) {
      process_results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_results, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_results_ = process_results;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandGroupArchive.process_results)
}

// optional string action_string = 4;
inline bool CommandGroupArchive::_internal_has_action_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandGroupArchive::has_action_string() const {
  return _internal_has_action_string();
}
inline void CommandGroupArchive::clear_action_string() {
  action_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandGroupArchive::action_string() const {
  // @@protoc_insertion_point(field_get:TSK.CommandGroupArchive.action_string)
  return _internal_action_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandGroupArchive::set_action_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.CommandGroupArchive.action_string)
}
inline std::string* CommandGroupArchive::mutable_action_string() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandGroupArchive.action_string)
  return _internal_mutable_action_string();
}
inline const std::string& CommandGroupArchive::_internal_action_string() const {
  return action_string_.Get();
}
inline void CommandGroupArchive::_internal_set_action_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandGroupArchive::_internal_mutable_action_string() {
  _has_bits_[0] |= 0x00000001u;
  return action_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandGroupArchive::release_action_string() {
  // @@protoc_insertion_point(field_release:TSK.CommandGroupArchive.action_string)
  if (!_internal_has_action_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandGroupArchive::set_allocated_action_string(std::string* action_string) {
  if (action_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandGroupArchive.action_string)
}

// -------------------------------------------------------------------

// InducedCommandCollectionArchive

// required .TSK.CommandArchive super = 1;
inline bool InducedCommandCollectionArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InducedCommandCollectionArchive::has_super() const {
  return _internal_has_super();
}
inline void InducedCommandCollectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& InducedCommandCollectionArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InducedCommandCollectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.InducedCommandCollectionArchive.super)
  return _internal_super();
}
inline void InducedCommandCollectionArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.InducedCommandCollectionArchive.super)
}
inline ::TSK::CommandArchive* InducedCommandCollectionArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* InducedCommandCollectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.InducedCommandCollectionArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InducedCommandCollectionArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InducedCommandCollectionArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.InducedCommandCollectionArchive.super)
  return _internal_mutable_super();
}
inline void InducedCommandCollectionArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.InducedCommandCollectionArchive.super)
}

// optional .TSP.Reference inducing_command = 2;
inline bool InducedCommandCollectionArchive::_internal_has_inducing_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || inducing_command_ != nullptr);
  return value;
}
inline bool InducedCommandCollectionArchive::has_inducing_command() const {
  return _internal_has_inducing_command();
}
inline const ::TSP::Reference& InducedCommandCollectionArchive::_internal_inducing_command() const {
  const ::TSP::Reference* p = inducing_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& InducedCommandCollectionArchive::inducing_command() const {
  // @@protoc_insertion_point(field_get:TSK.InducedCommandCollectionArchive.inducing_command)
  return _internal_inducing_command();
}
inline void InducedCommandCollectionArchive::unsafe_arena_set_allocated_inducing_command(
    ::TSP::Reference* inducing_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inducing_command_);
  }
  inducing_command_ = inducing_command;
  if (inducing_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.InducedCommandCollectionArchive.inducing_command)
}
inline ::TSP::Reference* InducedCommandCollectionArchive::release_inducing_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = inducing_command_;
  inducing_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* InducedCommandCollectionArchive::unsafe_arena_release_inducing_command() {
  // @@protoc_insertion_point(field_release:TSK.InducedCommandCollectionArchive.inducing_command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = inducing_command_;
  inducing_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* InducedCommandCollectionArchive::_internal_mutable_inducing_command() {
  _has_bits_[0] |= 0x00000002u;
  if (inducing_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    inducing_command_ = p;
  }
  return inducing_command_;
}
inline ::TSP::Reference* InducedCommandCollectionArchive::mutable_inducing_command() {
  // @@protoc_insertion_point(field_mutable:TSK.InducedCommandCollectionArchive.inducing_command)
  return _internal_mutable_inducing_command();
}
inline void InducedCommandCollectionArchive::set_allocated_inducing_command(::TSP::Reference* inducing_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inducing_command_);
  }
  if (inducing_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inducing_command)->GetArena();
    if (message_arena != submessage_arena) {
      inducing_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inducing_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inducing_command_ = inducing_command;
  // @@protoc_insertion_point(field_set_allocated:TSK.InducedCommandCollectionArchive.inducing_command)
}

// repeated .TSP.Reference induced_commands = 3;
inline int InducedCommandCollectionArchive::_internal_induced_commands_size() const {
  return induced_commands_.size();
}
inline int InducedCommandCollectionArchive::induced_commands_size() const {
  return _internal_induced_commands_size();
}
inline ::TSP::Reference* InducedCommandCollectionArchive::mutable_induced_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.InducedCommandCollectionArchive.induced_commands)
  return induced_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
InducedCommandCollectionArchive::mutable_induced_commands() {
  // @@protoc_insertion_point(field_mutable_list:TSK.InducedCommandCollectionArchive.induced_commands)
  return &induced_commands_;
}
inline const ::TSP::Reference& InducedCommandCollectionArchive::_internal_induced_commands(int index) const {
  return induced_commands_.Get(index);
}
inline const ::TSP::Reference& InducedCommandCollectionArchive::induced_commands(int index) const {
  // @@protoc_insertion_point(field_get:TSK.InducedCommandCollectionArchive.induced_commands)
  return _internal_induced_commands(index);
}
inline ::TSP::Reference* InducedCommandCollectionArchive::_internal_add_induced_commands() {
  return induced_commands_.Add();
}
inline ::TSP::Reference* InducedCommandCollectionArchive::add_induced_commands() {
  // @@protoc_insertion_point(field_add:TSK.InducedCommandCollectionArchive.induced_commands)
  return _internal_add_induced_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
InducedCommandCollectionArchive::induced_commands() const {
  // @@protoc_insertion_point(field_list:TSK.InducedCommandCollectionArchive.induced_commands)
  return induced_commands_;
}

// optional .TSP.IndexSet indexes_of_processed_induced_commands = 4;
inline bool InducedCommandCollectionArchive::_internal_has_indexes_of_processed_induced_commands() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || indexes_of_processed_induced_commands_ != nullptr);
  return value;
}
inline bool InducedCommandCollectionArchive::has_indexes_of_processed_induced_commands() const {
  return _internal_has_indexes_of_processed_induced_commands();
}
inline const ::TSP::IndexSet& InducedCommandCollectionArchive::_internal_indexes_of_processed_induced_commands() const {
  const ::TSP::IndexSet* p = indexes_of_processed_induced_commands_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& InducedCommandCollectionArchive::indexes_of_processed_induced_commands() const {
  // @@protoc_insertion_point(field_get:TSK.InducedCommandCollectionArchive.indexes_of_processed_induced_commands)
  return _internal_indexes_of_processed_induced_commands();
}
inline void InducedCommandCollectionArchive::unsafe_arena_set_allocated_indexes_of_processed_induced_commands(
    ::TSP::IndexSet* indexes_of_processed_induced_commands) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexes_of_processed_induced_commands_);
  }
  indexes_of_processed_induced_commands_ = indexes_of_processed_induced_commands;
  if (indexes_of_processed_induced_commands) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.InducedCommandCollectionArchive.indexes_of_processed_induced_commands)
}
inline ::TSP::IndexSet* InducedCommandCollectionArchive::release_indexes_of_processed_induced_commands() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = indexes_of_processed_induced_commands_;
  indexes_of_processed_induced_commands_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::IndexSet* InducedCommandCollectionArchive::unsafe_arena_release_indexes_of_processed_induced_commands() {
  // @@protoc_insertion_point(field_release:TSK.InducedCommandCollectionArchive.indexes_of_processed_induced_commands)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::IndexSet* temp = indexes_of_processed_induced_commands_;
  indexes_of_processed_induced_commands_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* InducedCommandCollectionArchive::_internal_mutable_indexes_of_processed_induced_commands() {
  _has_bits_[0] |= 0x00000004u;
  if (indexes_of_processed_induced_commands_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArena());
    indexes_of_processed_induced_commands_ = p;
  }
  return indexes_of_processed_induced_commands_;
}
inline ::TSP::IndexSet* InducedCommandCollectionArchive::mutable_indexes_of_processed_induced_commands() {
  // @@protoc_insertion_point(field_mutable:TSK.InducedCommandCollectionArchive.indexes_of_processed_induced_commands)
  return _internal_mutable_indexes_of_processed_induced_commands();
}
inline void InducedCommandCollectionArchive::set_allocated_indexes_of_processed_induced_commands(::TSP::IndexSet* indexes_of_processed_induced_commands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexes_of_processed_induced_commands_);
  }
  if (indexes_of_processed_induced_commands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indexes_of_processed_induced_commands)->GetArena();
    if (message_arena != submessage_arena) {
      indexes_of_processed_induced_commands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indexes_of_processed_induced_commands, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  indexes_of_processed_induced_commands_ = indexes_of_processed_induced_commands;
  // @@protoc_insertion_point(field_set_allocated:TSK.InducedCommandCollectionArchive.indexes_of_processed_induced_commands)
}

// -------------------------------------------------------------------

// PropagatedCommandCollectionArchive

// required .TSK.CommandArchive super = 1;
inline bool PropagatedCommandCollectionArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool PropagatedCommandCollectionArchive::has_super() const {
  return _internal_has_super();
}
inline void PropagatedCommandCollectionArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& PropagatedCommandCollectionArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& PropagatedCommandCollectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.PropagatedCommandCollectionArchive.super)
  return _internal_super();
}
inline void PropagatedCommandCollectionArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.PropagatedCommandCollectionArchive.super)
}
inline ::TSK::CommandArchive* PropagatedCommandCollectionArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* PropagatedCommandCollectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.PropagatedCommandCollectionArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* PropagatedCommandCollectionArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* PropagatedCommandCollectionArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.PropagatedCommandCollectionArchive.super)
  return _internal_mutable_super();
}
inline void PropagatedCommandCollectionArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.PropagatedCommandCollectionArchive.super)
}

// required .TSP.Reference propagatable_command = 2;
inline bool PropagatedCommandCollectionArchive::_internal_has_propagatable_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || propagatable_command_ != nullptr);
  return value;
}
inline bool PropagatedCommandCollectionArchive::has_propagatable_command() const {
  return _internal_has_propagatable_command();
}
inline const ::TSP::Reference& PropagatedCommandCollectionArchive::_internal_propagatable_command() const {
  const ::TSP::Reference* p = propagatable_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropagatedCommandCollectionArchive::propagatable_command() const {
  // @@protoc_insertion_point(field_get:TSK.PropagatedCommandCollectionArchive.propagatable_command)
  return _internal_propagatable_command();
}
inline void PropagatedCommandCollectionArchive::unsafe_arena_set_allocated_propagatable_command(
    ::TSP::Reference* propagatable_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagatable_command_);
  }
  propagatable_command_ = propagatable_command;
  if (propagatable_command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.PropagatedCommandCollectionArchive.propagatable_command)
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::release_propagatable_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = propagatable_command_;
  propagatable_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::unsafe_arena_release_propagatable_command() {
  // @@protoc_insertion_point(field_release:TSK.PropagatedCommandCollectionArchive.propagatable_command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = propagatable_command_;
  propagatable_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::_internal_mutable_propagatable_command() {
  _has_bits_[0] |= 0x00000002u;
  if (propagatable_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    propagatable_command_ = p;
  }
  return propagatable_command_;
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::mutable_propagatable_command() {
  // @@protoc_insertion_point(field_mutable:TSK.PropagatedCommandCollectionArchive.propagatable_command)
  return _internal_mutable_propagatable_command();
}
inline void PropagatedCommandCollectionArchive::set_allocated_propagatable_command(::TSP::Reference* propagatable_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagatable_command_);
  }
  if (propagatable_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagatable_command)->GetArena();
    if (message_arena != submessage_arena) {
      propagatable_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propagatable_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  propagatable_command_ = propagatable_command;
  // @@protoc_insertion_point(field_set_allocated:TSK.PropagatedCommandCollectionArchive.propagatable_command)
}

// optional bool propagatable_command_process_result = 3 [default = false];
inline bool PropagatedCommandCollectionArchive::_internal_has_propagatable_command_process_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PropagatedCommandCollectionArchive::has_propagatable_command_process_result() const {
  return _internal_has_propagatable_command_process_result();
}
inline void PropagatedCommandCollectionArchive::clear_propagatable_command_process_result() {
  propagatable_command_process_result_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PropagatedCommandCollectionArchive::_internal_propagatable_command_process_result() const {
  return propagatable_command_process_result_;
}
inline bool PropagatedCommandCollectionArchive::propagatable_command_process_result() const {
  // @@protoc_insertion_point(field_get:TSK.PropagatedCommandCollectionArchive.propagatable_command_process_result)
  return _internal_propagatable_command_process_result();
}
inline void PropagatedCommandCollectionArchive::_internal_set_propagatable_command_process_result(bool value) {
  _has_bits_[0] |= 0x00000008u;
  propagatable_command_process_result_ = value;
}
inline void PropagatedCommandCollectionArchive::set_propagatable_command_process_result(bool value) {
  _internal_set_propagatable_command_process_result(value);
  // @@protoc_insertion_point(field_set:TSK.PropagatedCommandCollectionArchive.propagatable_command_process_result)
}

// required .TSP.Reference propagating_command = 4;
inline bool PropagatedCommandCollectionArchive::_internal_has_propagating_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || propagating_command_ != nullptr);
  return value;
}
inline bool PropagatedCommandCollectionArchive::has_propagating_command() const {
  return _internal_has_propagating_command();
}
inline const ::TSP::Reference& PropagatedCommandCollectionArchive::_internal_propagating_command() const {
  const ::TSP::Reference* p = propagating_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropagatedCommandCollectionArchive::propagating_command() const {
  // @@protoc_insertion_point(field_get:TSK.PropagatedCommandCollectionArchive.propagating_command)
  return _internal_propagating_command();
}
inline void PropagatedCommandCollectionArchive::unsafe_arena_set_allocated_propagating_command(
    ::TSP::Reference* propagating_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagating_command_);
  }
  propagating_command_ = propagating_command;
  if (propagating_command) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.PropagatedCommandCollectionArchive.propagating_command)
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::release_propagating_command() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = propagating_command_;
  propagating_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::unsafe_arena_release_propagating_command() {
  // @@protoc_insertion_point(field_release:TSK.PropagatedCommandCollectionArchive.propagating_command)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = propagating_command_;
  propagating_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::_internal_mutable_propagating_command() {
  _has_bits_[0] |= 0x00000004u;
  if (propagating_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    propagating_command_ = p;
  }
  return propagating_command_;
}
inline ::TSP::Reference* PropagatedCommandCollectionArchive::mutable_propagating_command() {
  // @@protoc_insertion_point(field_mutable:TSK.PropagatedCommandCollectionArchive.propagating_command)
  return _internal_mutable_propagating_command();
}
inline void PropagatedCommandCollectionArchive::set_allocated_propagating_command(::TSP::Reference* propagating_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagating_command_);
  }
  if (propagating_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propagating_command)->GetArena();
    if (message_arena != submessage_arena) {
      propagating_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propagating_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  propagating_command_ = propagating_command;
  // @@protoc_insertion_point(field_set_allocated:TSK.PropagatedCommandCollectionArchive.propagating_command)
}

// optional bool propagating_command_process_result = 5 [default = false];
inline bool PropagatedCommandCollectionArchive::_internal_has_propagating_command_process_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PropagatedCommandCollectionArchive::has_propagating_command_process_result() const {
  return _internal_has_propagating_command_process_result();
}
inline void PropagatedCommandCollectionArchive::clear_propagating_command_process_result() {
  propagating_command_process_result_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PropagatedCommandCollectionArchive::_internal_propagating_command_process_result() const {
  return propagating_command_process_result_;
}
inline bool PropagatedCommandCollectionArchive::propagating_command_process_result() const {
  // @@protoc_insertion_point(field_get:TSK.PropagatedCommandCollectionArchive.propagating_command_process_result)
  return _internal_propagating_command_process_result();
}
inline void PropagatedCommandCollectionArchive::_internal_set_propagating_command_process_result(bool value) {
  _has_bits_[0] |= 0x00000010u;
  propagating_command_process_result_ = value;
}
inline void PropagatedCommandCollectionArchive::set_propagating_command_process_result(bool value) {
  _internal_set_propagating_command_process_result(value);
  // @@protoc_insertion_point(field_set:TSK.PropagatedCommandCollectionArchive.propagating_command_process_result)
}

// -------------------------------------------------------------------

// FinalCommandPairArchive

// required .TSK.CommandArchive super = 1;
inline bool FinalCommandPairArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool FinalCommandPairArchive::has_super() const {
  return _internal_has_super();
}
inline void FinalCommandPairArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& FinalCommandPairArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& FinalCommandPairArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.FinalCommandPairArchive.super)
  return _internal_super();
}
inline void FinalCommandPairArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.FinalCommandPairArchive.super)
}
inline ::TSK::CommandArchive* FinalCommandPairArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* FinalCommandPairArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.FinalCommandPairArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* FinalCommandPairArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* FinalCommandPairArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.FinalCommandPairArchive.super)
  return _internal_mutable_super();
}
inline void FinalCommandPairArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.FinalCommandPairArchive.super)
}

// required .TSP.Reference command = 2;
inline bool FinalCommandPairArchive::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || command_ != nullptr);
  return value;
}
inline bool FinalCommandPairArchive::has_command() const {
  return _internal_has_command();
}
inline const ::TSP::Reference& FinalCommandPairArchive::_internal_command() const {
  const ::TSP::Reference* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FinalCommandPairArchive::command() const {
  // @@protoc_insertion_point(field_get:TSK.FinalCommandPairArchive.command)
  return _internal_command();
}
inline void FinalCommandPairArchive::unsafe_arena_set_allocated_command(
    ::TSP::Reference* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.FinalCommandPairArchive.command)
}
inline ::TSP::Reference* FinalCommandPairArchive::release_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FinalCommandPairArchive::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:TSK.FinalCommandPairArchive.command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FinalCommandPairArchive::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000002u;
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::TSP::Reference* FinalCommandPairArchive::mutable_command() {
  // @@protoc_insertion_point(field_mutable:TSK.FinalCommandPairArchive.command)
  return _internal_mutable_command();
}
inline void FinalCommandPairArchive::set_allocated_command(::TSP::Reference* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:TSK.FinalCommandPairArchive.command)
}

// optional bool command_process_result = 3 [default = false];
inline bool FinalCommandPairArchive::_internal_has_command_process_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FinalCommandPairArchive::has_command_process_result() const {
  return _internal_has_command_process_result();
}
inline void FinalCommandPairArchive::clear_command_process_result() {
  command_process_result_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FinalCommandPairArchive::_internal_command_process_result() const {
  return command_process_result_;
}
inline bool FinalCommandPairArchive::command_process_result() const {
  // @@protoc_insertion_point(field_get:TSK.FinalCommandPairArchive.command_process_result)
  return _internal_command_process_result();
}
inline void FinalCommandPairArchive::_internal_set_command_process_result(bool value) {
  _has_bits_[0] |= 0x00000008u;
  command_process_result_ = value;
}
inline void FinalCommandPairArchive::set_command_process_result(bool value) {
  _internal_set_command_process_result(value);
  // @@protoc_insertion_point(field_set:TSK.FinalCommandPairArchive.command_process_result)
}

// required .TSP.Reference final_command = 4;
inline bool FinalCommandPairArchive::_internal_has_final_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || final_command_ != nullptr);
  return value;
}
inline bool FinalCommandPairArchive::has_final_command() const {
  return _internal_has_final_command();
}
inline const ::TSP::Reference& FinalCommandPairArchive::_internal_final_command() const {
  const ::TSP::Reference* p = final_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& FinalCommandPairArchive::final_command() const {
  // @@protoc_insertion_point(field_get:TSK.FinalCommandPairArchive.final_command)
  return _internal_final_command();
}
inline void FinalCommandPairArchive::unsafe_arena_set_allocated_final_command(
    ::TSP::Reference* final_command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_command_);
  }
  final_command_ = final_command;
  if (final_command) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.FinalCommandPairArchive.final_command)
}
inline ::TSP::Reference* FinalCommandPairArchive::release_final_command() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = final_command_;
  final_command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* FinalCommandPairArchive::unsafe_arena_release_final_command() {
  // @@protoc_insertion_point(field_release:TSK.FinalCommandPairArchive.final_command)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = final_command_;
  final_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* FinalCommandPairArchive::_internal_mutable_final_command() {
  _has_bits_[0] |= 0x00000004u;
  if (final_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    final_command_ = p;
  }
  return final_command_;
}
inline ::TSP::Reference* FinalCommandPairArchive::mutable_final_command() {
  // @@protoc_insertion_point(field_mutable:TSK.FinalCommandPairArchive.final_command)
  return _internal_mutable_final_command();
}
inline void FinalCommandPairArchive::set_allocated_final_command(::TSP::Reference* final_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_command_);
  }
  if (final_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(final_command)->GetArena();
    if (message_arena != submessage_arena) {
      final_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  final_command_ = final_command;
  // @@protoc_insertion_point(field_set_allocated:TSK.FinalCommandPairArchive.final_command)
}

// optional bool final_command_process_result = 5 [default = false];
inline bool FinalCommandPairArchive::_internal_has_final_command_process_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FinalCommandPairArchive::has_final_command_process_result() const {
  return _internal_has_final_command_process_result();
}
inline void FinalCommandPairArchive::clear_final_command_process_result() {
  final_command_process_result_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FinalCommandPairArchive::_internal_final_command_process_result() const {
  return final_command_process_result_;
}
inline bool FinalCommandPairArchive::final_command_process_result() const {
  // @@protoc_insertion_point(field_get:TSK.FinalCommandPairArchive.final_command_process_result)
  return _internal_final_command_process_result();
}
inline void FinalCommandPairArchive::_internal_set_final_command_process_result(bool value) {
  _has_bits_[0] |= 0x00000010u;
  final_command_process_result_ = value;
}
inline void FinalCommandPairArchive::set_final_command_process_result(bool value) {
  _internal_set_final_command_process_result(value);
  // @@protoc_insertion_point(field_set:TSK.FinalCommandPairArchive.final_command_process_result)
}

// -------------------------------------------------------------------

// CommandContainerArchive

// repeated .TSP.Reference commands = 1;
inline int CommandContainerArchive::_internal_commands_size() const {
  return commands_.size();
}
inline int CommandContainerArchive::commands_size() const {
  return _internal_commands_size();
}
inline ::TSP::Reference* CommandContainerArchive::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CommandContainerArchive.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandContainerArchive::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CommandContainerArchive.commands)
  return &commands_;
}
inline const ::TSP::Reference& CommandContainerArchive::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::TSP::Reference& CommandContainerArchive::commands(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CommandContainerArchive.commands)
  return _internal_commands(index);
}
inline ::TSP::Reference* CommandContainerArchive::_internal_add_commands() {
  return commands_.Add();
}
inline ::TSP::Reference* CommandContainerArchive::add_commands() {
  // @@protoc_insertion_point(field_add:TSK.CommandContainerArchive.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandContainerArchive::commands() const {
  // @@protoc_insertion_point(field_list:TSK.CommandContainerArchive.commands)
  return commands_;
}

// -------------------------------------------------------------------

// ShuffleMappingArchive_Entry

// required uint32 from = 1;
inline bool ShuffleMappingArchive_Entry::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShuffleMappingArchive_Entry::has_from() const {
  return _internal_has_from();
}
inline void ShuffleMappingArchive_Entry::clear_from() {
  from_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive_Entry::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive_Entry::from() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.Entry.from)
  return _internal_from();
}
inline void ShuffleMappingArchive_Entry::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  from_ = value;
}
inline void ShuffleMappingArchive_Entry::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.Entry.from)
}

// required uint32 to = 2;
inline bool ShuffleMappingArchive_Entry::_internal_has_to() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShuffleMappingArchive_Entry::has_to() const {
  return _internal_has_to();
}
inline void ShuffleMappingArchive_Entry::clear_to() {
  to_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive_Entry::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive_Entry::to() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.Entry.to)
  return _internal_to();
}
inline void ShuffleMappingArchive_Entry::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  to_ = value;
}
inline void ShuffleMappingArchive_Entry::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.Entry.to)
}

// -------------------------------------------------------------------

// ShuffleMappingArchive

// required uint32 start_index = 1;
inline bool ShuffleMappingArchive::_internal_has_start_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_start_index() const {
  return _internal_has_start_index();
}
inline void ShuffleMappingArchive::clear_start_index() {
  start_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::_internal_start_index() const {
  return start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::start_index() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.start_index)
  return _internal_start_index();
}
inline void ShuffleMappingArchive::_internal_set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_index_ = value;
}
inline void ShuffleMappingArchive::set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.start_index)
}

// required uint32 end_index = 2;
inline bool ShuffleMappingArchive::_internal_has_end_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_end_index() const {
  return _internal_has_end_index();
}
inline void ShuffleMappingArchive::clear_end_index() {
  end_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::_internal_end_index() const {
  return end_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::end_index() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.end_index)
  return _internal_end_index();
}
inline void ShuffleMappingArchive::_internal_set_end_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  end_index_ = value;
}
inline void ShuffleMappingArchive::set_end_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_index(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.end_index)
}

// repeated .TSK.ShuffleMappingArchive.Entry entries = 3;
inline int ShuffleMappingArchive::_internal_entries_size() const {
  return entries_.size();
}
inline int ShuffleMappingArchive::entries_size() const {
  return _internal_entries_size();
}
inline void ShuffleMappingArchive::clear_entries() {
  entries_.Clear();
}
inline ::TSK::ShuffleMappingArchive_Entry* ShuffleMappingArchive::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.ShuffleMappingArchive.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::ShuffleMappingArchive_Entry >*
ShuffleMappingArchive::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.ShuffleMappingArchive.entries)
  return &entries_;
}
inline const ::TSK::ShuffleMappingArchive_Entry& ShuffleMappingArchive::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::TSK::ShuffleMappingArchive_Entry& ShuffleMappingArchive::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.entries)
  return _internal_entries(index);
}
inline ::TSK::ShuffleMappingArchive_Entry* ShuffleMappingArchive::_internal_add_entries() {
  return entries_.Add();
}
inline ::TSK::ShuffleMappingArchive_Entry* ShuffleMappingArchive::add_entries() {
  // @@protoc_insertion_point(field_add:TSK.ShuffleMappingArchive.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::ShuffleMappingArchive_Entry >&
ShuffleMappingArchive::entries() const {
  // @@protoc_insertion_point(field_list:TSK.ShuffleMappingArchive.entries)
  return entries_;
}

// optional bool is_vertical = 4 [default = true];
inline bool ShuffleMappingArchive::_internal_has_is_vertical() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_is_vertical() const {
  return _internal_has_is_vertical();
}
inline void ShuffleMappingArchive::clear_is_vertical() {
  is_vertical_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ShuffleMappingArchive::_internal_is_vertical() const {
  return is_vertical_;
}
inline bool ShuffleMappingArchive::is_vertical() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.is_vertical)
  return _internal_is_vertical();
}
inline void ShuffleMappingArchive::_internal_set_is_vertical(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_vertical_ = value;
}
inline void ShuffleMappingArchive::set_is_vertical(bool value) {
  _internal_set_is_vertical(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.is_vertical)
}

// optional bool is_move_operation = 5 [default = false];
inline bool ShuffleMappingArchive::_internal_has_is_move_operation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_is_move_operation() const {
  return _internal_has_is_move_operation();
}
inline void ShuffleMappingArchive::clear_is_move_operation() {
  is_move_operation_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ShuffleMappingArchive::_internal_is_move_operation() const {
  return is_move_operation_;
}
inline bool ShuffleMappingArchive::is_move_operation() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.is_move_operation)
  return _internal_is_move_operation();
}
inline void ShuffleMappingArchive::_internal_set_is_move_operation(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_move_operation_ = value;
}
inline void ShuffleMappingArchive::set_is_move_operation(bool value) {
  _internal_set_is_move_operation(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.is_move_operation)
}

// optional uint32 first_moved_index = 6 [default = 0];
inline bool ShuffleMappingArchive::_internal_has_first_moved_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_first_moved_index() const {
  return _internal_has_first_moved_index();
}
inline void ShuffleMappingArchive::clear_first_moved_index() {
  first_moved_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::_internal_first_moved_index() const {
  return first_moved_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::first_moved_index() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.first_moved_index)
  return _internal_first_moved_index();
}
inline void ShuffleMappingArchive::_internal_set_first_moved_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  first_moved_index_ = value;
}
inline void ShuffleMappingArchive::set_first_moved_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_moved_index(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.first_moved_index)
}

// optional uint32 destination_index_for_move = 7 [default = 0];
inline bool ShuffleMappingArchive::_internal_has_destination_index_for_move() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_destination_index_for_move() const {
  return _internal_has_destination_index_for_move();
}
inline void ShuffleMappingArchive::clear_destination_index_for_move() {
  destination_index_for_move_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::_internal_destination_index_for_move() const {
  return destination_index_for_move_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::destination_index_for_move() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.destination_index_for_move)
  return _internal_destination_index_for_move();
}
inline void ShuffleMappingArchive::_internal_set_destination_index_for_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  destination_index_for_move_ = value;
}
inline void ShuffleMappingArchive::set_destination_index_for_move(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_destination_index_for_move(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.destination_index_for_move)
}

// optional uint32 number_of_indexes_moved = 8 [default = 0];
inline bool ShuffleMappingArchive::_internal_has_number_of_indexes_moved() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShuffleMappingArchive::has_number_of_indexes_moved() const {
  return _internal_has_number_of_indexes_moved();
}
inline void ShuffleMappingArchive::clear_number_of_indexes_moved() {
  number_of_indexes_moved_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::_internal_number_of_indexes_moved() const {
  return number_of_indexes_moved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShuffleMappingArchive::number_of_indexes_moved() const {
  // @@protoc_insertion_point(field_get:TSK.ShuffleMappingArchive.number_of_indexes_moved)
  return _internal_number_of_indexes_moved();
}
inline void ShuffleMappingArchive::_internal_set_number_of_indexes_moved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  number_of_indexes_moved_ = value;
}
inline void ShuffleMappingArchive::set_number_of_indexes_moved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_indexes_moved(value);
  // @@protoc_insertion_point(field_set:TSK.ShuffleMappingArchive.number_of_indexes_moved)
}

// -------------------------------------------------------------------

// ProgressiveCommandGroupArchive

// required .TSK.CommandGroupArchive super = 1;
inline bool ProgressiveCommandGroupArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ProgressiveCommandGroupArchive::has_super() const {
  return _internal_has_super();
}
inline void ProgressiveCommandGroupArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandGroupArchive& ProgressiveCommandGroupArchive::_internal_super() const {
  const ::TSK::CommandGroupArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandGroupArchive&>(
      ::TSK::_CommandGroupArchive_default_instance_);
}
inline const ::TSK::CommandGroupArchive& ProgressiveCommandGroupArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.ProgressiveCommandGroupArchive.super)
  return _internal_super();
}
inline void ProgressiveCommandGroupArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandGroupArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.ProgressiveCommandGroupArchive.super)
}
inline ::TSK::CommandGroupArchive* ProgressiveCommandGroupArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandGroupArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandGroupArchive* ProgressiveCommandGroupArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.ProgressiveCommandGroupArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandGroupArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandGroupArchive* ProgressiveCommandGroupArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandGroupArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandGroupArchive* ProgressiveCommandGroupArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.ProgressiveCommandGroupArchive.super)
  return _internal_mutable_super();
}
inline void ProgressiveCommandGroupArchive::set_allocated_super(::TSK::CommandGroupArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.ProgressiveCommandGroupArchive.super)
}

// -------------------------------------------------------------------

// FormatStructArchive

// required uint32 format_type = 1;
inline bool FormatStructArchive::_internal_has_format_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FormatStructArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void FormatStructArchive::clear_format_type() {
  format_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_format_type() const {
  return format_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.format_type)
  return _internal_format_type();
}
inline void FormatStructArchive::_internal_set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  format_type_ = value;
}
inline void FormatStructArchive::set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.format_type)
}

// optional uint32 decimal_places = 2;
inline bool FormatStructArchive::_internal_has_decimal_places() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FormatStructArchive::has_decimal_places() const {
  return _internal_has_decimal_places();
}
inline void FormatStructArchive::clear_decimal_places() {
  decimal_places_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_decimal_places() const {
  return decimal_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::decimal_places() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.decimal_places)
  return _internal_decimal_places();
}
inline void FormatStructArchive::_internal_set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  decimal_places_ = value;
}
inline void FormatStructArchive::set_decimal_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimal_places(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.decimal_places)
}

// optional string currency_code = 3;
inline bool FormatStructArchive::_internal_has_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormatStructArchive::has_currency_code() const {
  return _internal_has_currency_code();
}
inline void FormatStructArchive::clear_currency_code() {
  currency_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FormatStructArchive::currency_code() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.currency_code)
  return _internal_currency_code();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_currency_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.currency_code)
}
inline std::string* FormatStructArchive::mutable_currency_code() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.currency_code)
  return _internal_mutable_currency_code();
}
inline const std::string& FormatStructArchive::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void FormatStructArchive::_internal_set_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_currency_code() {
  _has_bits_[0] |= 0x00000001u;
  return currency_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_currency_code() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.currency_code)
  if (!_internal_has_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return currency_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currency_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.currency_code)
}

// optional uint32 negative_style = 4;
inline bool FormatStructArchive::_internal_has_negative_style() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FormatStructArchive::has_negative_style() const {
  return _internal_has_negative_style();
}
inline void FormatStructArchive::clear_negative_style() {
  negative_style_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_negative_style() const {
  return negative_style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::negative_style() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.negative_style)
  return _internal_negative_style();
}
inline void FormatStructArchive::_internal_set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  negative_style_ = value;
}
inline void FormatStructArchive::set_negative_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_negative_style(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.negative_style)
}

// optional bool show_thousands_separator = 5;
inline bool FormatStructArchive::_internal_has_show_thousands_separator() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_show_thousands_separator() const {
  return _internal_has_show_thousands_separator();
}
inline void FormatStructArchive::clear_show_thousands_separator() {
  show_thousands_separator_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool FormatStructArchive::_internal_show_thousands_separator() const {
  return show_thousands_separator_;
}
inline bool FormatStructArchive::show_thousands_separator() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.show_thousands_separator)
  return _internal_show_thousands_separator();
}
inline void FormatStructArchive::_internal_set_show_thousands_separator(bool value) {
  _has_bits_[0] |= 0x00002000u;
  show_thousands_separator_ = value;
}
inline void FormatStructArchive::set_show_thousands_separator(bool value) {
  _internal_set_show_thousands_separator(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.show_thousands_separator)
}

// optional bool use_accounting_style = 6;
inline bool FormatStructArchive::_internal_has_use_accounting_style() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_use_accounting_style() const {
  return _internal_has_use_accounting_style();
}
inline void FormatStructArchive::clear_use_accounting_style() {
  use_accounting_style_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool FormatStructArchive::_internal_use_accounting_style() const {
  return use_accounting_style_;
}
inline bool FormatStructArchive::use_accounting_style() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.use_accounting_style)
  return _internal_use_accounting_style();
}
inline void FormatStructArchive::_internal_set_use_accounting_style(bool value) {
  _has_bits_[0] |= 0x00004000u;
  use_accounting_style_ = value;
}
inline void FormatStructArchive::set_use_accounting_style(bool value) {
  _internal_set_use_accounting_style(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.use_accounting_style)
}

// optional uint32 duration_style = 7;
inline bool FormatStructArchive::_internal_has_duration_style() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_style() const {
  return _internal_has_duration_style();
}
inline void FormatStructArchive::clear_duration_style() {
  duration_style_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_duration_style() const {
  return duration_style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::duration_style() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.duration_style)
  return _internal_duration_style();
}
inline void FormatStructArchive::_internal_set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  duration_style_ = value;
}
inline void FormatStructArchive::set_duration_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_style(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.duration_style)
}

// optional uint32 base = 8;
inline bool FormatStructArchive::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base() const {
  return _internal_has_base();
}
inline void FormatStructArchive::clear_base() {
  base_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_base() const {
  return base_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::base() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.base)
  return _internal_base();
}
inline void FormatStructArchive::_internal_set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  base_ = value;
}
inline void FormatStructArchive::set_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.base)
}

// optional uint32 base_places = 9;
inline bool FormatStructArchive::_internal_has_base_places() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base_places() const {
  return _internal_has_base_places();
}
inline void FormatStructArchive::clear_base_places() {
  base_places_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_base_places() const {
  return base_places_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::base_places() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.base_places)
  return _internal_base_places();
}
inline void FormatStructArchive::_internal_set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  base_places_ = value;
}
inline void FormatStructArchive::set_base_places(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_places(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.base_places)
}

// optional bool base_use_minus_sign = 10;
inline bool FormatStructArchive::_internal_has_base_use_minus_sign() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_base_use_minus_sign() const {
  return _internal_has_base_use_minus_sign();
}
inline void FormatStructArchive::clear_base_use_minus_sign() {
  base_use_minus_sign_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool FormatStructArchive::_internal_base_use_minus_sign() const {
  return base_use_minus_sign_;
}
inline bool FormatStructArchive::base_use_minus_sign() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.base_use_minus_sign)
  return _internal_base_use_minus_sign();
}
inline void FormatStructArchive::_internal_set_base_use_minus_sign(bool value) {
  _has_bits_[0] |= 0x00008000u;
  base_use_minus_sign_ = value;
}
inline void FormatStructArchive::set_base_use_minus_sign(bool value) {
  _internal_set_base_use_minus_sign(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.base_use_minus_sign)
}

// optional uint32 fraction_accuracy = 11;
inline bool FormatStructArchive::_internal_has_fraction_accuracy() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_fraction_accuracy() const {
  return _internal_has_fraction_accuracy();
}
inline void FormatStructArchive::clear_fraction_accuracy() {
  fraction_accuracy_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_fraction_accuracy() const {
  return fraction_accuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::fraction_accuracy() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.fraction_accuracy)
  return _internal_fraction_accuracy();
}
inline void FormatStructArchive::_internal_set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  fraction_accuracy_ = value;
}
inline void FormatStructArchive::set_fraction_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fraction_accuracy(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.fraction_accuracy)
}

// optional bool suppress_date_format = 12;
inline bool FormatStructArchive::_internal_has_suppress_date_format() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_suppress_date_format() const {
  return _internal_has_suppress_date_format();
}
inline void FormatStructArchive::clear_suppress_date_format() {
  suppress_date_format_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool FormatStructArchive::_internal_suppress_date_format() const {
  return suppress_date_format_;
}
inline bool FormatStructArchive::suppress_date_format() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.suppress_date_format)
  return _internal_suppress_date_format();
}
inline void FormatStructArchive::_internal_set_suppress_date_format(bool value) {
  _has_bits_[0] |= 0x00010000u;
  suppress_date_format_ = value;
}
inline void FormatStructArchive::set_suppress_date_format(bool value) {
  _internal_set_suppress_date_format(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.suppress_date_format)
}

// optional bool suppress_time_format = 13;
inline bool FormatStructArchive::_internal_has_suppress_time_format() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_suppress_time_format() const {
  return _internal_has_suppress_time_format();
}
inline void FormatStructArchive::clear_suppress_time_format() {
  suppress_time_format_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool FormatStructArchive::_internal_suppress_time_format() const {
  return suppress_time_format_;
}
inline bool FormatStructArchive::suppress_time_format() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.suppress_time_format)
  return _internal_suppress_time_format();
}
inline void FormatStructArchive::_internal_set_suppress_time_format(bool value) {
  _has_bits_[0] |= 0x20000000u;
  suppress_time_format_ = value;
}
inline void FormatStructArchive::set_suppress_time_format(bool value) {
  _internal_set_suppress_time_format(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.suppress_time_format)
}

// optional string date_time_format = 14;
inline bool FormatStructArchive::_internal_has_date_time_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormatStructArchive::has_date_time_format() const {
  return _internal_has_date_time_format();
}
inline void FormatStructArchive::clear_date_time_format() {
  date_time_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FormatStructArchive::date_time_format() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.date_time_format)
  return _internal_date_time_format();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_date_time_format(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.date_time_format)
}
inline std::string* FormatStructArchive::mutable_date_time_format() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.date_time_format)
  return _internal_mutable_date_time_format();
}
inline const std::string& FormatStructArchive::_internal_date_time_format() const {
  return date_time_format_.Get();
}
inline void FormatStructArchive::_internal_set_date_time_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_date_time_format() {
  _has_bits_[0] |= 0x00000002u;
  return date_time_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_date_time_format() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.date_time_format)
  if (!_internal_has_date_time_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return date_time_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_date_time_format(std::string* date_time_format) {
  if (date_time_format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  date_time_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_time_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.date_time_format)
}

// optional uint32 duration_unit_largest = 15;
inline bool FormatStructArchive::_internal_has_duration_unit_largest() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_unit_largest() const {
  return _internal_has_duration_unit_largest();
}
inline void FormatStructArchive::clear_duration_unit_largest() {
  duration_unit_largest_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_duration_unit_largest() const {
  return duration_unit_largest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::duration_unit_largest() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.duration_unit_largest)
  return _internal_duration_unit_largest();
}
inline void FormatStructArchive::_internal_set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  duration_unit_largest_ = value;
}
inline void FormatStructArchive::set_duration_unit_largest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_unit_largest(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.duration_unit_largest)
}

// optional uint32 duration_unit_smallest = 16;
inline bool FormatStructArchive::_internal_has_duration_unit_smallest() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_duration_unit_smallest() const {
  return _internal_has_duration_unit_smallest();
}
inline void FormatStructArchive::clear_duration_unit_smallest() {
  duration_unit_smallest_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_duration_unit_smallest() const {
  return duration_unit_smallest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::duration_unit_smallest() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.duration_unit_smallest)
  return _internal_duration_unit_smallest();
}
inline void FormatStructArchive::_internal_set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  duration_unit_smallest_ = value;
}
inline void FormatStructArchive::set_duration_unit_smallest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration_unit_smallest(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.duration_unit_smallest)
}

// optional uint32 custom_id = 17;
inline bool FormatStructArchive::_internal_has_custom_id() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_custom_id() const {
  return _internal_has_custom_id();
}
inline void FormatStructArchive::clear_custom_id() {
  custom_id_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_custom_id() const {
  return custom_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::custom_id() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.custom_id)
  return _internal_custom_id();
}
inline void FormatStructArchive::_internal_set_custom_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  custom_id_ = value;
}
inline void FormatStructArchive::set_custom_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_id(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.custom_id)
}

// optional string custom_format_string = 18;
inline bool FormatStructArchive::_internal_has_custom_format_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FormatStructArchive::has_custom_format_string() const {
  return _internal_has_custom_format_string();
}
inline void FormatStructArchive::clear_custom_format_string() {
  custom_format_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FormatStructArchive::custom_format_string() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.custom_format_string)
  return _internal_custom_format_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_custom_format_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 custom_format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.custom_format_string)
}
inline std::string* FormatStructArchive::mutable_custom_format_string() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.custom_format_string)
  return _internal_mutable_custom_format_string();
}
inline const std::string& FormatStructArchive::_internal_custom_format_string() const {
  return custom_format_string_.Get();
}
inline void FormatStructArchive::_internal_set_custom_format_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_format_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_custom_format_string() {
  _has_bits_[0] |= 0x00000004u;
  return custom_format_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_custom_format_string() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.custom_format_string)
  if (!_internal_has_custom_format_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return custom_format_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_custom_format_string(std::string* custom_format_string) {
  if (custom_format_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_format_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_format_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.custom_format_string)
}

// optional double scale_factor = 19;
inline bool FormatStructArchive::_internal_has_scale_factor() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_scale_factor() const {
  return _internal_has_scale_factor();
}
inline void FormatStructArchive::clear_scale_factor() {
  scale_factor_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double FormatStructArchive::_internal_scale_factor() const {
  return scale_factor_;
}
inline double FormatStructArchive::scale_factor() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.scale_factor)
  return _internal_scale_factor();
}
inline void FormatStructArchive::_internal_set_scale_factor(double value) {
  _has_bits_[0] |= 0x00200000u;
  scale_factor_ = value;
}
inline void FormatStructArchive::set_scale_factor(double value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.scale_factor)
}

// optional bool requires_fraction_replacement = 20;
inline bool FormatStructArchive::_internal_has_requires_fraction_replacement() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_requires_fraction_replacement() const {
  return _internal_has_requires_fraction_replacement();
}
inline void FormatStructArchive::clear_requires_fraction_replacement() {
  requires_fraction_replacement_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool FormatStructArchive::_internal_requires_fraction_replacement() const {
  return requires_fraction_replacement_;
}
inline bool FormatStructArchive::requires_fraction_replacement() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.requires_fraction_replacement)
  return _internal_requires_fraction_replacement();
}
inline void FormatStructArchive::_internal_set_requires_fraction_replacement(bool value) {
  _has_bits_[0] |= 0x40000000u;
  requires_fraction_replacement_ = value;
}
inline void FormatStructArchive::set_requires_fraction_replacement(bool value) {
  _internal_set_requires_fraction_replacement(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.requires_fraction_replacement)
}

// optional double control_minimum = 21;
inline bool FormatStructArchive::_internal_has_control_minimum() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_control_minimum() const {
  return _internal_has_control_minimum();
}
inline void FormatStructArchive::clear_control_minimum() {
  control_minimum_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double FormatStructArchive::_internal_control_minimum() const {
  return control_minimum_;
}
inline double FormatStructArchive::control_minimum() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.control_minimum)
  return _internal_control_minimum();
}
inline void FormatStructArchive::_internal_set_control_minimum(double value) {
  _has_bits_[0] |= 0x01000000u;
  control_minimum_ = value;
}
inline void FormatStructArchive::set_control_minimum(double value) {
  _internal_set_control_minimum(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.control_minimum)
}

// optional double control_maximum = 22;
inline bool FormatStructArchive::_internal_has_control_maximum() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_control_maximum() const {
  return _internal_has_control_maximum();
}
inline void FormatStructArchive::clear_control_maximum() {
  control_maximum_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double FormatStructArchive::_internal_control_maximum() const {
  return control_maximum_;
}
inline double FormatStructArchive::control_maximum() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.control_maximum)
  return _internal_control_maximum();
}
inline void FormatStructArchive::_internal_set_control_maximum(double value) {
  _has_bits_[0] |= 0x02000000u;
  control_maximum_ = value;
}
inline void FormatStructArchive::set_control_maximum(double value) {
  _internal_set_control_maximum(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.control_maximum)
}

// optional double control_increment = 23;
inline bool FormatStructArchive::_internal_has_control_increment() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_control_increment() const {
  return _internal_has_control_increment();
}
inline void FormatStructArchive::clear_control_increment() {
  control_increment_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double FormatStructArchive::_internal_control_increment() const {
  return control_increment_;
}
inline double FormatStructArchive::control_increment() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.control_increment)
  return _internal_control_increment();
}
inline void FormatStructArchive::_internal_set_control_increment(double value) {
  _has_bits_[0] |= 0x04000000u;
  control_increment_ = value;
}
inline void FormatStructArchive::set_control_increment(double value) {
  _internal_set_control_increment(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.control_increment)
}

// optional uint32 control_format_type = 24;
inline bool FormatStructArchive::_internal_has_control_format_type() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_control_format_type() const {
  return _internal_has_control_format_type();
}
inline void FormatStructArchive::clear_control_format_type() {
  control_format_type_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_control_format_type() const {
  return control_format_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::control_format_type() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.control_format_type)
  return _internal_control_format_type();
}
inline void FormatStructArchive::_internal_set_control_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  control_format_type_ = value;
}
inline void FormatStructArchive::set_control_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_control_format_type(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.control_format_type)
}

// optional uint32 slider_orientation = 25;
inline bool FormatStructArchive::_internal_has_slider_orientation() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_slider_orientation() const {
  return _internal_has_slider_orientation();
}
inline void FormatStructArchive::clear_slider_orientation() {
  slider_orientation_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_slider_orientation() const {
  return slider_orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::slider_orientation() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.slider_orientation)
  return _internal_slider_orientation();
}
inline void FormatStructArchive::_internal_set_slider_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  slider_orientation_ = value;
}
inline void FormatStructArchive::set_slider_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slider_orientation(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.slider_orientation)
}

// optional uint32 slider_position = 26;
inline bool FormatStructArchive::_internal_has_slider_position() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_slider_position() const {
  return _internal_has_slider_position();
}
inline void FormatStructArchive::clear_slider_position() {
  slider_position_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_slider_position() const {
  return slider_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::slider_position() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.slider_position)
  return _internal_slider_position();
}
inline void FormatStructArchive::_internal_set_slider_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  slider_position_ = value;
}
inline void FormatStructArchive::set_slider_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slider_position(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.slider_position)
}

// optional uint32 decimal_width = 27;
inline bool FormatStructArchive::_internal_has_decimal_width() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool FormatStructArchive::has_decimal_width() const {
  return _internal_has_decimal_width();
}
inline void FormatStructArchive::clear_decimal_width() {
  decimal_width_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_decimal_width() const {
  return decimal_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::decimal_width() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.decimal_width)
  return _internal_decimal_width();
}
inline void FormatStructArchive::_internal_set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  decimal_width_ = value;
}
inline void FormatStructArchive::set_decimal_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decimal_width(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.decimal_width)
}

// optional uint32 min_integer_width = 28;
inline bool FormatStructArchive::_internal_has_min_integer_width() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool FormatStructArchive::has_min_integer_width() const {
  return _internal_has_min_integer_width();
}
inline void FormatStructArchive::clear_min_integer_width() {
  min_integer_width_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_min_integer_width() const {
  return min_integer_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::min_integer_width() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.min_integer_width)
  return _internal_min_integer_width();
}
inline void FormatStructArchive::_internal_set_min_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  min_integer_width_ = value;
}
inline void FormatStructArchive::set_min_integer_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_integer_width(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.min_integer_width)
}

// optional uint32 num_nonspace_integer_digits = 29;
inline bool FormatStructArchive::_internal_has_num_nonspace_integer_digits() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool FormatStructArchive::has_num_nonspace_integer_digits() const {
  return _internal_has_num_nonspace_integer_digits();
}
inline void FormatStructArchive::clear_num_nonspace_integer_digits() {
  num_nonspace_integer_digits_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_num_nonspace_integer_digits() const {
  return num_nonspace_integer_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::num_nonspace_integer_digits() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.num_nonspace_integer_digits)
  return _internal_num_nonspace_integer_digits();
}
inline void FormatStructArchive::_internal_set_num_nonspace_integer_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  num_nonspace_integer_digits_ = value;
}
inline void FormatStructArchive::set_num_nonspace_integer_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_nonspace_integer_digits(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.num_nonspace_integer_digits)
}

// optional uint32 num_nonspace_decimal_digits = 30;
inline bool FormatStructArchive::_internal_has_num_nonspace_decimal_digits() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool FormatStructArchive::has_num_nonspace_decimal_digits() const {
  return _internal_has_num_nonspace_decimal_digits();
}
inline void FormatStructArchive::clear_num_nonspace_decimal_digits() {
  num_nonspace_decimal_digits_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_num_nonspace_decimal_digits() const {
  return num_nonspace_decimal_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::num_nonspace_decimal_digits() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.num_nonspace_decimal_digits)
  return _internal_num_nonspace_decimal_digits();
}
inline void FormatStructArchive::_internal_set_num_nonspace_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  num_nonspace_decimal_digits_ = value;
}
inline void FormatStructArchive::set_num_nonspace_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_nonspace_decimal_digits(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.num_nonspace_decimal_digits)
}

// optional uint32 index_from_right_last_integer = 31;
inline bool FormatStructArchive::_internal_has_index_from_right_last_integer() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool FormatStructArchive::has_index_from_right_last_integer() const {
  return _internal_has_index_from_right_last_integer();
}
inline void FormatStructArchive::clear_index_from_right_last_integer() {
  index_from_right_last_integer_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_index_from_right_last_integer() const {
  return index_from_right_last_integer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::index_from_right_last_integer() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.index_from_right_last_integer)
  return _internal_index_from_right_last_integer();
}
inline void FormatStructArchive::_internal_set_index_from_right_last_integer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  index_from_right_last_integer_ = value;
}
inline void FormatStructArchive::set_index_from_right_last_integer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index_from_right_last_integer(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.index_from_right_last_integer)
}

// repeated string interstitial_strings = 32;
inline int FormatStructArchive::_internal_interstitial_strings_size() const {
  return interstitial_strings_.size();
}
inline int FormatStructArchive::interstitial_strings_size() const {
  return _internal_interstitial_strings_size();
}
inline void FormatStructArchive::clear_interstitial_strings() {
  interstitial_strings_.Clear();
}
inline std::string* FormatStructArchive::add_interstitial_strings() {
  // @@protoc_insertion_point(field_add_mutable:TSK.FormatStructArchive.interstitial_strings)
  return _internal_add_interstitial_strings();
}
inline const std::string& FormatStructArchive::_internal_interstitial_strings(int index) const {
  return interstitial_strings_.Get(index);
}
inline const std::string& FormatStructArchive::interstitial_strings(int index) const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.interstitial_strings)
  return _internal_interstitial_strings(index);
}
inline std::string* FormatStructArchive::mutable_interstitial_strings(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.interstitial_strings)
  return interstitial_strings_.Mutable(index);
}
inline void FormatStructArchive::set_interstitial_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.interstitial_strings)
  interstitial_strings_.Mutable(index)->assign(value);
}
inline void FormatStructArchive::set_interstitial_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.interstitial_strings)
  interstitial_strings_.Mutable(index)->assign(std::move(value));
}
inline void FormatStructArchive::set_interstitial_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  interstitial_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.FormatStructArchive.interstitial_strings)
}
inline void FormatStructArchive::set_interstitial_strings(int index, const char* value, size_t size) {
  interstitial_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.FormatStructArchive.interstitial_strings)
}
inline std::string* FormatStructArchive::_internal_add_interstitial_strings() {
  return interstitial_strings_.Add();
}
inline void FormatStructArchive::add_interstitial_strings(const std::string& value) {
  interstitial_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.FormatStructArchive.interstitial_strings)
}
inline void FormatStructArchive::add_interstitial_strings(std::string&& value) {
  interstitial_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.FormatStructArchive.interstitial_strings)
}
inline void FormatStructArchive::add_interstitial_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  interstitial_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.FormatStructArchive.interstitial_strings)
}
inline void FormatStructArchive::add_interstitial_strings(const char* value, size_t size) {
  interstitial_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.FormatStructArchive.interstitial_strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FormatStructArchive::interstitial_strings() const {
  // @@protoc_insertion_point(field_list:TSK.FormatStructArchive.interstitial_strings)
  return interstitial_strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FormatStructArchive::mutable_interstitial_strings() {
  // @@protoc_insertion_point(field_mutable_list:TSK.FormatStructArchive.interstitial_strings)
  return &interstitial_strings_;
}

// optional .TSP.IndexSet inters_str_insertion_indexes = 33;
inline bool FormatStructArchive::_internal_has_inters_str_insertion_indexes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || inters_str_insertion_indexes_ != nullptr);
  return value;
}
inline bool FormatStructArchive::has_inters_str_insertion_indexes() const {
  return _internal_has_inters_str_insertion_indexes();
}
inline const ::TSP::IndexSet& FormatStructArchive::_internal_inters_str_insertion_indexes() const {
  const ::TSP::IndexSet* p = inters_str_insertion_indexes_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& FormatStructArchive::inters_str_insertion_indexes() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.inters_str_insertion_indexes)
  return _internal_inters_str_insertion_indexes();
}
inline void FormatStructArchive::unsafe_arena_set_allocated_inters_str_insertion_indexes(
    ::TSP::IndexSet* inters_str_insertion_indexes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inters_str_insertion_indexes_);
  }
  inters_str_insertion_indexes_ = inters_str_insertion_indexes;
  if (inters_str_insertion_indexes) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.FormatStructArchive.inters_str_insertion_indexes)
}
inline ::TSP::IndexSet* FormatStructArchive::release_inters_str_insertion_indexes() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::IndexSet* temp = inters_str_insertion_indexes_;
  inters_str_insertion_indexes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::IndexSet* FormatStructArchive::unsafe_arena_release_inters_str_insertion_indexes() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.inters_str_insertion_indexes)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::IndexSet* temp = inters_str_insertion_indexes_;
  inters_str_insertion_indexes_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* FormatStructArchive::_internal_mutable_inters_str_insertion_indexes() {
  _has_bits_[0] |= 0x00000020u;
  if (inters_str_insertion_indexes_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArena());
    inters_str_insertion_indexes_ = p;
  }
  return inters_str_insertion_indexes_;
}
inline ::TSP::IndexSet* FormatStructArchive::mutable_inters_str_insertion_indexes() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.inters_str_insertion_indexes)
  return _internal_mutable_inters_str_insertion_indexes();
}
inline void FormatStructArchive::set_allocated_inters_str_insertion_indexes(::TSP::IndexSet* inters_str_insertion_indexes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inters_str_insertion_indexes_);
  }
  if (inters_str_insertion_indexes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inters_str_insertion_indexes)->GetArena();
    if (message_arena != submessage_arena) {
      inters_str_insertion_indexes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inters_str_insertion_indexes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  inters_str_insertion_indexes_ = inters_str_insertion_indexes;
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.inters_str_insertion_indexes)
}

// optional uint32 num_hash_decimal_digits = 34;
inline bool FormatStructArchive::_internal_has_num_hash_decimal_digits() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool FormatStructArchive::has_num_hash_decimal_digits() const {
  return _internal_has_num_hash_decimal_digits();
}
inline void FormatStructArchive::clear_num_hash_decimal_digits() {
  num_hash_decimal_digits_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_num_hash_decimal_digits() const {
  return num_hash_decimal_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::num_hash_decimal_digits() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.num_hash_decimal_digits)
  return _internal_num_hash_decimal_digits();
}
inline void FormatStructArchive::_internal_set_num_hash_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  num_hash_decimal_digits_ = value;
}
inline void FormatStructArchive::set_num_hash_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_hash_decimal_digits(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.num_hash_decimal_digits)
}

// optional uint32 total_num_decimal_digits = 35;
inline bool FormatStructArchive::_internal_has_total_num_decimal_digits() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool FormatStructArchive::has_total_num_decimal_digits() const {
  return _internal_has_total_num_decimal_digits();
}
inline void FormatStructArchive::clear_total_num_decimal_digits() {
  total_num_decimal_digits_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_total_num_decimal_digits() const {
  return total_num_decimal_digits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::total_num_decimal_digits() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.total_num_decimal_digits)
  return _internal_total_num_decimal_digits();
}
inline void FormatStructArchive::_internal_set_total_num_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  total_num_decimal_digits_ = value;
}
inline void FormatStructArchive::set_total_num_decimal_digits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_num_decimal_digits(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.total_num_decimal_digits)
}

// optional bool is_complex = 36;
inline bool FormatStructArchive::_internal_has_is_complex() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FormatStructArchive::has_is_complex() const {
  return _internal_has_is_complex();
}
inline void FormatStructArchive::clear_is_complex() {
  is_complex_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool FormatStructArchive::_internal_is_complex() const {
  return is_complex_;
}
inline bool FormatStructArchive::is_complex() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.is_complex)
  return _internal_is_complex();
}
inline void FormatStructArchive::_internal_set_is_complex(bool value) {
  _has_bits_[0] |= 0x80000000u;
  is_complex_ = value;
}
inline void FormatStructArchive::set_is_complex(bool value) {
  _internal_set_is_complex(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.is_complex)
}

// optional bool contains_integer_token = 37;
inline bool FormatStructArchive::_internal_has_contains_integer_token() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool FormatStructArchive::has_contains_integer_token() const {
  return _internal_has_contains_integer_token();
}
inline void FormatStructArchive::clear_contains_integer_token() {
  contains_integer_token_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool FormatStructArchive::_internal_contains_integer_token() const {
  return contains_integer_token_;
}
inline bool FormatStructArchive::contains_integer_token() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.contains_integer_token)
  return _internal_contains_integer_token();
}
inline void FormatStructArchive::_internal_set_contains_integer_token(bool value) {
  _has_bits_[1] |= 0x00000001u;
  contains_integer_token_ = value;
}
inline void FormatStructArchive::set_contains_integer_token(bool value) {
  _internal_set_contains_integer_token(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.contains_integer_token)
}

// optional uint32 multiple_choice_list_initial_value = 38;
inline bool FormatStructArchive::_internal_has_multiple_choice_list_initial_value() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool FormatStructArchive::has_multiple_choice_list_initial_value() const {
  return _internal_has_multiple_choice_list_initial_value();
}
inline void FormatStructArchive::clear_multiple_choice_list_initial_value() {
  multiple_choice_list_initial_value_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_multiple_choice_list_initial_value() const {
  return multiple_choice_list_initial_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::multiple_choice_list_initial_value() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.multiple_choice_list_initial_value)
  return _internal_multiple_choice_list_initial_value();
}
inline void FormatStructArchive::_internal_set_multiple_choice_list_initial_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  multiple_choice_list_initial_value_ = value;
}
inline void FormatStructArchive::set_multiple_choice_list_initial_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multiple_choice_list_initial_value(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.multiple_choice_list_initial_value)
}

// optional uint32 multiple_choice_list_id = 39;
inline bool FormatStructArchive::_internal_has_multiple_choice_list_id() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool FormatStructArchive::has_multiple_choice_list_id() const {
  return _internal_has_multiple_choice_list_id();
}
inline void FormatStructArchive::clear_multiple_choice_list_id() {
  multiple_choice_list_id_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::_internal_multiple_choice_list_id() const {
  return multiple_choice_list_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FormatStructArchive::multiple_choice_list_id() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.multiple_choice_list_id)
  return _internal_multiple_choice_list_id();
}
inline void FormatStructArchive::_internal_set_multiple_choice_list_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  multiple_choice_list_id_ = value;
}
inline void FormatStructArchive::set_multiple_choice_list_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multiple_choice_list_id(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.multiple_choice_list_id)
}

// optional bool use_automatic_duration_units = 40;
inline bool FormatStructArchive::_internal_has_use_automatic_duration_units() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool FormatStructArchive::has_use_automatic_duration_units() const {
  return _internal_has_use_automatic_duration_units();
}
inline void FormatStructArchive::clear_use_automatic_duration_units() {
  use_automatic_duration_units_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool FormatStructArchive::_internal_use_automatic_duration_units() const {
  return use_automatic_duration_units_;
}
inline bool FormatStructArchive::use_automatic_duration_units() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.use_automatic_duration_units)
  return _internal_use_automatic_duration_units();
}
inline void FormatStructArchive::_internal_set_use_automatic_duration_units(bool value) {
  _has_bits_[1] |= 0x00000400u;
  use_automatic_duration_units_ = value;
}
inline void FormatStructArchive::set_use_automatic_duration_units(bool value) {
  _internal_set_use_automatic_duration_units(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.use_automatic_duration_units)
}

// optional .TSP.UUID custom_uid = 41;
inline bool FormatStructArchive::_internal_has_custom_uid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || custom_uid_ != nullptr);
  return value;
}
inline bool FormatStructArchive::has_custom_uid() const {
  return _internal_has_custom_uid();
}
inline const ::TSP::UUID& FormatStructArchive::_internal_custom_uid() const {
  const ::TSP::UUID* p = custom_uid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& FormatStructArchive::custom_uid() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.custom_uid)
  return _internal_custom_uid();
}
inline void FormatStructArchive::unsafe_arena_set_allocated_custom_uid(
    ::TSP::UUID* custom_uid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_uid_);
  }
  custom_uid_ = custom_uid;
  if (custom_uid) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.FormatStructArchive.custom_uid)
}
inline ::TSP::UUID* FormatStructArchive::release_custom_uid() {
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = custom_uid_;
  custom_uid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* FormatStructArchive::unsafe_arena_release_custom_uid() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.custom_uid)
  _has_bits_[0] &= ~0x00000040u;
  ::TSP::UUID* temp = custom_uid_;
  custom_uid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* FormatStructArchive::_internal_mutable_custom_uid() {
  _has_bits_[0] |= 0x00000040u;
  if (custom_uid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    custom_uid_ = p;
  }
  return custom_uid_;
}
inline ::TSP::UUID* FormatStructArchive::mutable_custom_uid() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.custom_uid)
  return _internal_mutable_custom_uid();
}
inline void FormatStructArchive::set_allocated_custom_uid(::TSP::UUID* custom_uid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_uid_);
  }
  if (custom_uid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_uid)->GetArena();
    if (message_arena != submessage_arena) {
      custom_uid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_uid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  custom_uid_ = custom_uid;
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.custom_uid)
}

// optional .TSK.CustomFormatArchive custom_format = 42;
inline bool FormatStructArchive::_internal_has_custom_format() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || custom_format_ != nullptr);
  return value;
}
inline bool FormatStructArchive::has_custom_format() const {
  return _internal_has_custom_format();
}
inline void FormatStructArchive::clear_custom_format() {
  if (custom_format_ != nullptr) custom_format_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TSK::CustomFormatArchive& FormatStructArchive::_internal_custom_format() const {
  const ::TSK::CustomFormatArchive* p = custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& FormatStructArchive::custom_format() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.custom_format)
  return _internal_custom_format();
}
inline void FormatStructArchive::unsafe_arena_set_allocated_custom_format(
    ::TSK::CustomFormatArchive* custom_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_);
  }
  custom_format_ = custom_format;
  if (custom_format) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.FormatStructArchive.custom_format)
}
inline ::TSK::CustomFormatArchive* FormatStructArchive::release_custom_format() {
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::CustomFormatArchive* temp = custom_format_;
  custom_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CustomFormatArchive* FormatStructArchive::unsafe_arena_release_custom_format() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.custom_format)
  _has_bits_[0] &= ~0x00000080u;
  ::TSK::CustomFormatArchive* temp = custom_format_;
  custom_format_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* FormatStructArchive::_internal_mutable_custom_format() {
  _has_bits_[0] |= 0x00000080u;
  if (custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArena());
    custom_format_ = p;
  }
  return custom_format_;
}
inline ::TSK::CustomFormatArchive* FormatStructArchive::mutable_custom_format() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.custom_format)
  return _internal_mutable_custom_format();
}
inline void FormatStructArchive::set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete custom_format_;
  }
  if (custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom_format);
    if (message_arena != submessage_arena) {
      custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  custom_format_ = custom_format;
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.custom_format)
}

// optional bool uses_plus_sign = 43;
inline bool FormatStructArchive::_internal_has_uses_plus_sign() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool FormatStructArchive::has_uses_plus_sign() const {
  return _internal_has_uses_plus_sign();
}
inline void FormatStructArchive::clear_uses_plus_sign() {
  uses_plus_sign_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool FormatStructArchive::_internal_uses_plus_sign() const {
  return uses_plus_sign_;
}
inline bool FormatStructArchive::uses_plus_sign() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.uses_plus_sign)
  return _internal_uses_plus_sign();
}
inline void FormatStructArchive::_internal_set_uses_plus_sign(bool value) {
  _has_bits_[1] |= 0x00000800u;
  uses_plus_sign_ = value;
}
inline void FormatStructArchive::set_uses_plus_sign(bool value) {
  _internal_set_uses_plus_sign(value);
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.uses_plus_sign)
}

// optional string bool_true_string = 44;
inline bool FormatStructArchive::_internal_has_bool_true_string() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FormatStructArchive::has_bool_true_string() const {
  return _internal_has_bool_true_string();
}
inline void FormatStructArchive::clear_bool_true_string() {
  bool_true_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FormatStructArchive::bool_true_string() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.bool_true_string)
  return _internal_bool_true_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_bool_true_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 bool_true_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.bool_true_string)
}
inline std::string* FormatStructArchive::mutable_bool_true_string() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.bool_true_string)
  return _internal_mutable_bool_true_string();
}
inline const std::string& FormatStructArchive::_internal_bool_true_string() const {
  return bool_true_string_.Get();
}
inline void FormatStructArchive::_internal_set_bool_true_string(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  bool_true_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_bool_true_string() {
  _has_bits_[0] |= 0x00000008u;
  return bool_true_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_bool_true_string() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.bool_true_string)
  if (!_internal_has_bool_true_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return bool_true_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_bool_true_string(std::string* bool_true_string) {
  if (bool_true_string != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bool_true_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bool_true_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.bool_true_string)
}

// optional string bool_false_string = 45;
inline bool FormatStructArchive::_internal_has_bool_false_string() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FormatStructArchive::has_bool_false_string() const {
  return _internal_has_bool_false_string();
}
inline void FormatStructArchive::clear_bool_false_string() {
  bool_false_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FormatStructArchive::bool_false_string() const {
  // @@protoc_insertion_point(field_get:TSK.FormatStructArchive.bool_false_string)
  return _internal_bool_false_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void FormatStructArchive::set_bool_false_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 bool_false_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.FormatStructArchive.bool_false_string)
}
inline std::string* FormatStructArchive::mutable_bool_false_string() {
  // @@protoc_insertion_point(field_mutable:TSK.FormatStructArchive.bool_false_string)
  return _internal_mutable_bool_false_string();
}
inline const std::string& FormatStructArchive::_internal_bool_false_string() const {
  return bool_false_string_.Get();
}
inline void FormatStructArchive::_internal_set_bool_false_string(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bool_false_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* FormatStructArchive::_internal_mutable_bool_false_string() {
  _has_bits_[0] |= 0x00000010u;
  return bool_false_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FormatStructArchive::release_bool_false_string() {
  // @@protoc_insertion_point(field_release:TSK.FormatStructArchive.bool_false_string)
  if (!_internal_has_bool_false_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return bool_false_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormatStructArchive::set_allocated_bool_false_string(std::string* bool_false_string) {
  if (bool_false_string != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bool_false_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bool_false_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.FormatStructArchive.bool_false_string)
}

// -------------------------------------------------------------------

// CustomFormatArchive_Condition

// required uint32 condition_type = 1;
inline bool CustomFormatArchive_Condition::_internal_has_condition_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomFormatArchive_Condition::has_condition_type() const {
  return _internal_has_condition_type();
}
inline void CustomFormatArchive_Condition::clear_condition_type() {
  condition_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomFormatArchive_Condition::_internal_condition_type() const {
  return condition_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomFormatArchive_Condition::condition_type() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.Condition.condition_type)
  return _internal_condition_type();
}
inline void CustomFormatArchive_Condition::_internal_set_condition_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  condition_type_ = value;
}
inline void CustomFormatArchive_Condition::set_condition_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_condition_type(value);
  // @@protoc_insertion_point(field_set:TSK.CustomFormatArchive.Condition.condition_type)
}

// optional float condition_value = 2;
inline bool CustomFormatArchive_Condition::_internal_has_condition_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomFormatArchive_Condition::has_condition_value() const {
  return _internal_has_condition_value();
}
inline void CustomFormatArchive_Condition::clear_condition_value() {
  condition_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CustomFormatArchive_Condition::_internal_condition_value() const {
  return condition_value_;
}
inline float CustomFormatArchive_Condition::condition_value() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.Condition.condition_value)
  return _internal_condition_value();
}
inline void CustomFormatArchive_Condition::_internal_set_condition_value(float value) {
  _has_bits_[0] |= 0x00000004u;
  condition_value_ = value;
}
inline void CustomFormatArchive_Condition::set_condition_value(float value) {
  _internal_set_condition_value(value);
  // @@protoc_insertion_point(field_set:TSK.CustomFormatArchive.Condition.condition_value)
}

// required .TSK.FormatStructArchive condition_format = 3;
inline bool CustomFormatArchive_Condition::_internal_has_condition_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || condition_format_ != nullptr);
  return value;
}
inline bool CustomFormatArchive_Condition::has_condition_format() const {
  return _internal_has_condition_format();
}
inline void CustomFormatArchive_Condition::clear_condition_format() {
  if (condition_format_ != nullptr) condition_format_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::FormatStructArchive& CustomFormatArchive_Condition::_internal_condition_format() const {
  const ::TSK::FormatStructArchive* p = condition_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CustomFormatArchive_Condition::condition_format() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.Condition.condition_format)
  return _internal_condition_format();
}
inline void CustomFormatArchive_Condition::unsafe_arena_set_allocated_condition_format(
    ::TSK::FormatStructArchive* condition_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_format_);
  }
  condition_format_ = condition_format;
  if (condition_format) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CustomFormatArchive.Condition.condition_format)
}
inline ::TSK::FormatStructArchive* CustomFormatArchive_Condition::release_condition_format() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = condition_format_;
  condition_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CustomFormatArchive_Condition::unsafe_arena_release_condition_format() {
  // @@protoc_insertion_point(field_release:TSK.CustomFormatArchive.Condition.condition_format)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::FormatStructArchive* temp = condition_format_;
  condition_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CustomFormatArchive_Condition::_internal_mutable_condition_format() {
  _has_bits_[0] |= 0x00000001u;
  if (condition_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    condition_format_ = p;
  }
  return condition_format_;
}
inline ::TSK::FormatStructArchive* CustomFormatArchive_Condition::mutable_condition_format() {
  // @@protoc_insertion_point(field_mutable:TSK.CustomFormatArchive.Condition.condition_format)
  return _internal_mutable_condition_format();
}
inline void CustomFormatArchive_Condition::set_allocated_condition_format(::TSK::FormatStructArchive* condition_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete condition_format_;
  }
  if (condition_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(condition_format);
    if (message_arena != submessage_arena) {
      condition_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  condition_format_ = condition_format;
  // @@protoc_insertion_point(field_set_allocated:TSK.CustomFormatArchive.Condition.condition_format)
}

// optional double condition_value_dbl = 4;
inline bool CustomFormatArchive_Condition::_internal_has_condition_value_dbl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomFormatArchive_Condition::has_condition_value_dbl() const {
  return _internal_has_condition_value_dbl();
}
inline void CustomFormatArchive_Condition::clear_condition_value_dbl() {
  condition_value_dbl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CustomFormatArchive_Condition::_internal_condition_value_dbl() const {
  return condition_value_dbl_;
}
inline double CustomFormatArchive_Condition::condition_value_dbl() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.Condition.condition_value_dbl)
  return _internal_condition_value_dbl();
}
inline void CustomFormatArchive_Condition::_internal_set_condition_value_dbl(double value) {
  _has_bits_[0] |= 0x00000008u;
  condition_value_dbl_ = value;
}
inline void CustomFormatArchive_Condition::set_condition_value_dbl(double value) {
  _internal_set_condition_value_dbl(value);
  // @@protoc_insertion_point(field_set:TSK.CustomFormatArchive.Condition.condition_value_dbl)
}

// -------------------------------------------------------------------

// CustomFormatArchive

// required string name = 1;
inline bool CustomFormatArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomFormatArchive::has_name() const {
  return _internal_has_name();
}
inline void CustomFormatArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomFormatArchive::name() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CustomFormatArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.CustomFormatArchive.name)
}
inline std::string* CustomFormatArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSK.CustomFormatArchive.name)
  return _internal_mutable_name();
}
inline const std::string& CustomFormatArchive::_internal_name() const {
  return name_.Get();
}
inline void CustomFormatArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CustomFormatArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomFormatArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSK.CustomFormatArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomFormatArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.CustomFormatArchive.name)
}

// required uint32 format_type_pre_bnc = 2;
inline bool CustomFormatArchive::_internal_has_format_type_pre_bnc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomFormatArchive::has_format_type_pre_bnc() const {
  return _internal_has_format_type_pre_bnc();
}
inline void CustomFormatArchive::clear_format_type_pre_bnc() {
  format_type_pre_bnc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomFormatArchive::_internal_format_type_pre_bnc() const {
  return format_type_pre_bnc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomFormatArchive::format_type_pre_bnc() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.format_type_pre_bnc)
  return _internal_format_type_pre_bnc();
}
inline void CustomFormatArchive::_internal_set_format_type_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  format_type_pre_bnc_ = value;
}
inline void CustomFormatArchive::set_format_type_pre_bnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_type_pre_bnc(value);
  // @@protoc_insertion_point(field_set:TSK.CustomFormatArchive.format_type_pre_bnc)
}

// required .TSK.FormatStructArchive default_format = 3;
inline bool CustomFormatArchive::_internal_has_default_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || default_format_ != nullptr);
  return value;
}
inline bool CustomFormatArchive::has_default_format() const {
  return _internal_has_default_format();
}
inline void CustomFormatArchive::clear_default_format() {
  if (default_format_ != nullptr) default_format_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSK::FormatStructArchive& CustomFormatArchive::_internal_default_format() const {
  const ::TSK::FormatStructArchive* p = default_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& CustomFormatArchive::default_format() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.default_format)
  return _internal_default_format();
}
inline void CustomFormatArchive::unsafe_arena_set_allocated_default_format(
    ::TSK::FormatStructArchive* default_format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_format_);
  }
  default_format_ = default_format;
  if (default_format) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CustomFormatArchive.default_format)
}
inline ::TSK::FormatStructArchive* CustomFormatArchive::release_default_format() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = default_format_;
  default_format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::FormatStructArchive* CustomFormatArchive::unsafe_arena_release_default_format() {
  // @@protoc_insertion_point(field_release:TSK.CustomFormatArchive.default_format)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::FormatStructArchive* temp = default_format_;
  default_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* CustomFormatArchive::_internal_mutable_default_format() {
  _has_bits_[0] |= 0x00000002u;
  if (default_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArena());
    default_format_ = p;
  }
  return default_format_;
}
inline ::TSK::FormatStructArchive* CustomFormatArchive::mutable_default_format() {
  // @@protoc_insertion_point(field_mutable:TSK.CustomFormatArchive.default_format)
  return _internal_mutable_default_format();
}
inline void CustomFormatArchive::set_allocated_default_format(::TSK::FormatStructArchive* default_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete default_format_;
  }
  if (default_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(default_format);
    if (message_arena != submessage_arena) {
      default_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  default_format_ = default_format;
  // @@protoc_insertion_point(field_set_allocated:TSK.CustomFormatArchive.default_format)
}

// repeated .TSK.CustomFormatArchive.Condition conditions = 4;
inline int CustomFormatArchive::_internal_conditions_size() const {
  return conditions_.size();
}
inline int CustomFormatArchive::conditions_size() const {
  return _internal_conditions_size();
}
inline void CustomFormatArchive::clear_conditions() {
  conditions_.Clear();
}
inline ::TSK::CustomFormatArchive_Condition* CustomFormatArchive::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CustomFormatArchive.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive_Condition >*
CustomFormatArchive::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CustomFormatArchive.conditions)
  return &conditions_;
}
inline const ::TSK::CustomFormatArchive_Condition& CustomFormatArchive::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::TSK::CustomFormatArchive_Condition& CustomFormatArchive::conditions(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.conditions)
  return _internal_conditions(index);
}
inline ::TSK::CustomFormatArchive_Condition* CustomFormatArchive::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::TSK::CustomFormatArchive_Condition* CustomFormatArchive::add_conditions() {
  // @@protoc_insertion_point(field_add:TSK.CustomFormatArchive.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive_Condition >&
CustomFormatArchive::conditions() const {
  // @@protoc_insertion_point(field_list:TSK.CustomFormatArchive.conditions)
  return conditions_;
}

// optional uint32 format_type = 5;
inline bool CustomFormatArchive::_internal_has_format_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomFormatArchive::has_format_type() const {
  return _internal_has_format_type();
}
inline void CustomFormatArchive::clear_format_type() {
  format_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomFormatArchive::_internal_format_type() const {
  return format_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomFormatArchive::format_type() const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatArchive.format_type)
  return _internal_format_type();
}
inline void CustomFormatArchive::_internal_set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  format_type_ = value;
}
inline void CustomFormatArchive::set_format_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:TSK.CustomFormatArchive.format_type)
}

// -------------------------------------------------------------------

// CustomFormatListArchive

// repeated .TSP.UUID uuids = 1;
inline int CustomFormatListArchive::_internal_uuids_size() const {
  return uuids_.size();
}
inline int CustomFormatListArchive::uuids_size() const {
  return _internal_uuids_size();
}
inline ::TSP::UUID* CustomFormatListArchive::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CustomFormatListArchive.uuids)
  return uuids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CustomFormatListArchive::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CustomFormatListArchive.uuids)
  return &uuids_;
}
inline const ::TSP::UUID& CustomFormatListArchive::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const ::TSP::UUID& CustomFormatListArchive::uuids(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatListArchive.uuids)
  return _internal_uuids(index);
}
inline ::TSP::UUID* CustomFormatListArchive::_internal_add_uuids() {
  return uuids_.Add();
}
inline ::TSP::UUID* CustomFormatListArchive::add_uuids() {
  // @@protoc_insertion_point(field_add:TSK.CustomFormatListArchive.uuids)
  return _internal_add_uuids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CustomFormatListArchive::uuids() const {
  // @@protoc_insertion_point(field_list:TSK.CustomFormatListArchive.uuids)
  return uuids_;
}

// repeated .TSK.CustomFormatArchive custom_formats = 2;
inline int CustomFormatListArchive::_internal_custom_formats_size() const {
  return custom_formats_.size();
}
inline int CustomFormatListArchive::custom_formats_size() const {
  return _internal_custom_formats_size();
}
inline void CustomFormatListArchive::clear_custom_formats() {
  custom_formats_.Clear();
}
inline ::TSK::CustomFormatArchive* CustomFormatListArchive::mutable_custom_formats(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CustomFormatListArchive.custom_formats)
  return custom_formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive >*
CustomFormatListArchive::mutable_custom_formats() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CustomFormatListArchive.custom_formats)
  return &custom_formats_;
}
inline const ::TSK::CustomFormatArchive& CustomFormatListArchive::_internal_custom_formats(int index) const {
  return custom_formats_.Get(index);
}
inline const ::TSK::CustomFormatArchive& CustomFormatListArchive::custom_formats(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CustomFormatListArchive.custom_formats)
  return _internal_custom_formats(index);
}
inline ::TSK::CustomFormatArchive* CustomFormatListArchive::_internal_add_custom_formats() {
  return custom_formats_.Add();
}
inline ::TSK::CustomFormatArchive* CustomFormatListArchive::add_custom_formats() {
  // @@protoc_insertion_point(field_add:TSK.CustomFormatListArchive.custom_formats)
  return _internal_add_custom_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CustomFormatArchive >&
CustomFormatListArchive::custom_formats() const {
  // @@protoc_insertion_point(field_list:TSK.CustomFormatListArchive.custom_formats)
  return custom_formats_;
}

// -------------------------------------------------------------------

// AnnotationAuthorArchive

// optional string name = 1;
inline bool AnnotationAuthorArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnnotationAuthorArchive::has_name() const {
  return _internal_has_name();
}
inline void AnnotationAuthorArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnnotationAuthorArchive::name() const {
  // @@protoc_insertion_point(field_get:TSK.AnnotationAuthorArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AnnotationAuthorArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.AnnotationAuthorArchive.name)
}
inline std::string* AnnotationAuthorArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSK.AnnotationAuthorArchive.name)
  return _internal_mutable_name();
}
inline const std::string& AnnotationAuthorArchive::_internal_name() const {
  return name_.Get();
}
inline void AnnotationAuthorArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AnnotationAuthorArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnnotationAuthorArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSK.AnnotationAuthorArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnnotationAuthorArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.AnnotationAuthorArchive.name)
}

// optional .TSP.Color color = 2;
inline bool AnnotationAuthorArchive::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool AnnotationAuthorArchive::has_color() const {
  return _internal_has_color();
}
inline const ::TSP::Color& AnnotationAuthorArchive::_internal_color() const {
  const ::TSP::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& AnnotationAuthorArchive::color() const {
  // @@protoc_insertion_point(field_get:TSK.AnnotationAuthorArchive.color)
  return _internal_color();
}
inline void AnnotationAuthorArchive::unsafe_arena_set_allocated_color(
    ::TSP::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.AnnotationAuthorArchive.color)
}
inline ::TSP::Color* AnnotationAuthorArchive::release_color() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* AnnotationAuthorArchive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:TSK.AnnotationAuthorArchive.color)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::TSP::Color* AnnotationAuthorArchive::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000004u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::TSP::Color* AnnotationAuthorArchive::mutable_color() {
  // @@protoc_insertion_point(field_mutable:TSK.AnnotationAuthorArchive.color)
  return _internal_mutable_color();
}
inline void AnnotationAuthorArchive::set_allocated_color(::TSP::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color)->GetArena();
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:TSK.AnnotationAuthorArchive.color)
}

// optional string public_id = 3;
inline bool AnnotationAuthorArchive::_internal_has_public_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnnotationAuthorArchive::has_public_id() const {
  return _internal_has_public_id();
}
inline void AnnotationAuthorArchive::clear_public_id() {
  public_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AnnotationAuthorArchive::public_id() const {
  // @@protoc_insertion_point(field_get:TSK.AnnotationAuthorArchive.public_id)
  return _internal_public_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AnnotationAuthorArchive::set_public_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 public_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.AnnotationAuthorArchive.public_id)
}
inline std::string* AnnotationAuthorArchive::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:TSK.AnnotationAuthorArchive.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& AnnotationAuthorArchive::_internal_public_id() const {
  return public_id_.Get();
}
inline void AnnotationAuthorArchive::_internal_set_public_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AnnotationAuthorArchive::_internal_mutable_public_id() {
  _has_bits_[0] |= 0x00000002u;
  return public_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnnotationAuthorArchive::release_public_id() {
  // @@protoc_insertion_point(field_release:TSK.AnnotationAuthorArchive.public_id)
  if (!_internal_has_public_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return public_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnnotationAuthorArchive::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.AnnotationAuthorArchive.public_id)
}

// optional bool is_public_author = 4;
inline bool AnnotationAuthorArchive::_internal_has_is_public_author() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AnnotationAuthorArchive::has_is_public_author() const {
  return _internal_has_is_public_author();
}
inline void AnnotationAuthorArchive::clear_is_public_author() {
  is_public_author_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AnnotationAuthorArchive::_internal_is_public_author() const {
  return is_public_author_;
}
inline bool AnnotationAuthorArchive::is_public_author() const {
  // @@protoc_insertion_point(field_get:TSK.AnnotationAuthorArchive.is_public_author)
  return _internal_is_public_author();
}
inline void AnnotationAuthorArchive::_internal_set_is_public_author(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_public_author_ = value;
}
inline void AnnotationAuthorArchive::set_is_public_author(bool value) {
  _internal_set_is_public_author(value);
  // @@protoc_insertion_point(field_set:TSK.AnnotationAuthorArchive.is_public_author)
}

// -------------------------------------------------------------------

// DeprecatedChangeAuthorArchive

// optional string name = 1;
inline bool DeprecatedChangeAuthorArchive::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeprecatedChangeAuthorArchive::has_name() const {
  return _internal_has_name();
}
inline void DeprecatedChangeAuthorArchive::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeprecatedChangeAuthorArchive::name() const {
  // @@protoc_insertion_point(field_get:TSK.DeprecatedChangeAuthorArchive.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void DeprecatedChangeAuthorArchive::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.DeprecatedChangeAuthorArchive.name)
}
inline std::string* DeprecatedChangeAuthorArchive::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TSK.DeprecatedChangeAuthorArchive.name)
  return _internal_mutable_name();
}
inline const std::string& DeprecatedChangeAuthorArchive::_internal_name() const {
  return name_.Get();
}
inline void DeprecatedChangeAuthorArchive::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* DeprecatedChangeAuthorArchive::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeprecatedChangeAuthorArchive::release_name() {
  // @@protoc_insertion_point(field_release:TSK.DeprecatedChangeAuthorArchive.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeprecatedChangeAuthorArchive::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.DeprecatedChangeAuthorArchive.name)
}

// optional .TSP.Color change_color = 2;
inline bool DeprecatedChangeAuthorArchive::_internal_has_change_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || change_color_ != nullptr);
  return value;
}
inline bool DeprecatedChangeAuthorArchive::has_change_color() const {
  return _internal_has_change_color();
}
inline const ::TSP::Color& DeprecatedChangeAuthorArchive::_internal_change_color() const {
  const ::TSP::Color* p = change_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& DeprecatedChangeAuthorArchive::change_color() const {
  // @@protoc_insertion_point(field_get:TSK.DeprecatedChangeAuthorArchive.change_color)
  return _internal_change_color();
}
inline void DeprecatedChangeAuthorArchive::unsafe_arena_set_allocated_change_color(
    ::TSP::Color* change_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_color_);
  }
  change_color_ = change_color;
  if (change_color) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DeprecatedChangeAuthorArchive.change_color)
}
inline ::TSP::Color* DeprecatedChangeAuthorArchive::release_change_color() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Color* temp = change_color_;
  change_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* DeprecatedChangeAuthorArchive::unsafe_arena_release_change_color() {
  // @@protoc_insertion_point(field_release:TSK.DeprecatedChangeAuthorArchive.change_color)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Color* temp = change_color_;
  change_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* DeprecatedChangeAuthorArchive::_internal_mutable_change_color() {
  _has_bits_[0] |= 0x00000002u;
  if (change_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    change_color_ = p;
  }
  return change_color_;
}
inline ::TSP::Color* DeprecatedChangeAuthorArchive::mutable_change_color() {
  // @@protoc_insertion_point(field_mutable:TSK.DeprecatedChangeAuthorArchive.change_color)
  return _internal_mutable_change_color();
}
inline void DeprecatedChangeAuthorArchive::set_allocated_change_color(::TSP::Color* change_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_color_);
  }
  if (change_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_color)->GetArena();
    if (message_arena != submessage_arena) {
      change_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  change_color_ = change_color;
  // @@protoc_insertion_point(field_set_allocated:TSK.DeprecatedChangeAuthorArchive.change_color)
}

// -------------------------------------------------------------------

// AnnotationAuthorStorageArchive

// repeated .TSP.Reference annotation_author = 1;
inline int AnnotationAuthorStorageArchive::_internal_annotation_author_size() const {
  return annotation_author_.size();
}
inline int AnnotationAuthorStorageArchive::annotation_author_size() const {
  return _internal_annotation_author_size();
}
inline ::TSP::Reference* AnnotationAuthorStorageArchive::mutable_annotation_author(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.AnnotationAuthorStorageArchive.annotation_author)
  return annotation_author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
AnnotationAuthorStorageArchive::mutable_annotation_author() {
  // @@protoc_insertion_point(field_mutable_list:TSK.AnnotationAuthorStorageArchive.annotation_author)
  return &annotation_author_;
}
inline const ::TSP::Reference& AnnotationAuthorStorageArchive::_internal_annotation_author(int index) const {
  return annotation_author_.Get(index);
}
inline const ::TSP::Reference& AnnotationAuthorStorageArchive::annotation_author(int index) const {
  // @@protoc_insertion_point(field_get:TSK.AnnotationAuthorStorageArchive.annotation_author)
  return _internal_annotation_author(index);
}
inline ::TSP::Reference* AnnotationAuthorStorageArchive::_internal_add_annotation_author() {
  return annotation_author_.Add();
}
inline ::TSP::Reference* AnnotationAuthorStorageArchive::add_annotation_author() {
  // @@protoc_insertion_point(field_add:TSK.AnnotationAuthorStorageArchive.annotation_author)
  return _internal_add_annotation_author();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
AnnotationAuthorStorageArchive::annotation_author() const {
  // @@protoc_insertion_point(field_list:TSK.AnnotationAuthorStorageArchive.annotation_author)
  return annotation_author_;
}

// -------------------------------------------------------------------

// SetAnnotationAuthorColorCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool SetAnnotationAuthorColorCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool SetAnnotationAuthorColorCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void SetAnnotationAuthorColorCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& SetAnnotationAuthorColorCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& SetAnnotationAuthorColorCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.SetAnnotationAuthorColorCommandArchive.super)
  return _internal_super();
}
inline void SetAnnotationAuthorColorCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.super)
}
inline ::TSK::CommandArchive* SetAnnotationAuthorColorCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* SetAnnotationAuthorColorCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.SetAnnotationAuthorColorCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* SetAnnotationAuthorColorCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* SetAnnotationAuthorColorCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.SetAnnotationAuthorColorCommandArchive.super)
  return _internal_mutable_super();
}
inline void SetAnnotationAuthorColorCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.super)
}

// optional .TSP.Reference annotation_author = 2;
inline bool SetAnnotationAuthorColorCommandArchive::_internal_has_annotation_author() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || annotation_author_ != nullptr);
  return value;
}
inline bool SetAnnotationAuthorColorCommandArchive::has_annotation_author() const {
  return _internal_has_annotation_author();
}
inline const ::TSP::Reference& SetAnnotationAuthorColorCommandArchive::_internal_annotation_author() const {
  const ::TSP::Reference* p = annotation_author_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& SetAnnotationAuthorColorCommandArchive::annotation_author() const {
  // @@protoc_insertion_point(field_get:TSK.SetAnnotationAuthorColorCommandArchive.annotation_author)
  return _internal_annotation_author();
}
inline void SetAnnotationAuthorColorCommandArchive::unsafe_arena_set_allocated_annotation_author(
    ::TSP::Reference* annotation_author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_author_);
  }
  annotation_author_ = annotation_author;
  if (annotation_author) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.annotation_author)
}
inline ::TSP::Reference* SetAnnotationAuthorColorCommandArchive::release_annotation_author() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = annotation_author_;
  annotation_author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* SetAnnotationAuthorColorCommandArchive::unsafe_arena_release_annotation_author() {
  // @@protoc_insertion_point(field_release:TSK.SetAnnotationAuthorColorCommandArchive.annotation_author)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = annotation_author_;
  annotation_author_ = nullptr;
  return temp;
}
inline ::TSP::Reference* SetAnnotationAuthorColorCommandArchive::_internal_mutable_annotation_author() {
  _has_bits_[0] |= 0x00000002u;
  if (annotation_author_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    annotation_author_ = p;
  }
  return annotation_author_;
}
inline ::TSP::Reference* SetAnnotationAuthorColorCommandArchive::mutable_annotation_author() {
  // @@protoc_insertion_point(field_mutable:TSK.SetAnnotationAuthorColorCommandArchive.annotation_author)
  return _internal_mutable_annotation_author();
}
inline void SetAnnotationAuthorColorCommandArchive::set_allocated_annotation_author(::TSP::Reference* annotation_author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_author_);
  }
  if (annotation_author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_author)->GetArena();
    if (message_arena != submessage_arena) {
      annotation_author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_author, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  annotation_author_ = annotation_author;
  // @@protoc_insertion_point(field_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.annotation_author)
}

// optional .TSP.Color color = 3;
inline bool SetAnnotationAuthorColorCommandArchive::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool SetAnnotationAuthorColorCommandArchive::has_color() const {
  return _internal_has_color();
}
inline const ::TSP::Color& SetAnnotationAuthorColorCommandArchive::_internal_color() const {
  const ::TSP::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& SetAnnotationAuthorColorCommandArchive::color() const {
  // @@protoc_insertion_point(field_get:TSK.SetAnnotationAuthorColorCommandArchive.color)
  return _internal_color();
}
inline void SetAnnotationAuthorColorCommandArchive::unsafe_arena_set_allocated_color(
    ::TSP::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.color)
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::release_color() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:TSK.SetAnnotationAuthorColorCommandArchive.color)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000004u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::mutable_color() {
  // @@protoc_insertion_point(field_mutable:TSK.SetAnnotationAuthorColorCommandArchive.color)
  return _internal_mutable_color();
}
inline void SetAnnotationAuthorColorCommandArchive::set_allocated_color(::TSP::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color)->GetArena();
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.color)
}

// optional .TSP.Color old_color = 4;
inline bool SetAnnotationAuthorColorCommandArchive::_internal_has_old_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || old_color_ != nullptr);
  return value;
}
inline bool SetAnnotationAuthorColorCommandArchive::has_old_color() const {
  return _internal_has_old_color();
}
inline const ::TSP::Color& SetAnnotationAuthorColorCommandArchive::_internal_old_color() const {
  const ::TSP::Color* p = old_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& SetAnnotationAuthorColorCommandArchive::old_color() const {
  // @@protoc_insertion_point(field_get:TSK.SetAnnotationAuthorColorCommandArchive.old_color)
  return _internal_old_color();
}
inline void SetAnnotationAuthorColorCommandArchive::unsafe_arena_set_allocated_old_color(
    ::TSP::Color* old_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_color_);
  }
  old_color_ = old_color;
  if (old_color) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.old_color)
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::release_old_color() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = old_color_;
  old_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::unsafe_arena_release_old_color() {
  // @@protoc_insertion_point(field_release:TSK.SetAnnotationAuthorColorCommandArchive.old_color)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Color* temp = old_color_;
  old_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::_internal_mutable_old_color() {
  _has_bits_[0] |= 0x00000008u;
  if (old_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    old_color_ = p;
  }
  return old_color_;
}
inline ::TSP::Color* SetAnnotationAuthorColorCommandArchive::mutable_old_color() {
  // @@protoc_insertion_point(field_mutable:TSK.SetAnnotationAuthorColorCommandArchive.old_color)
  return _internal_mutable_old_color();
}
inline void SetAnnotationAuthorColorCommandArchive::set_allocated_old_color(::TSP::Color* old_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_color_);
  }
  if (old_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_color)->GetArena();
    if (message_arena != submessage_arena) {
      old_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  old_color_ = old_color;
  // @@protoc_insertion_point(field_set_allocated:TSK.SetAnnotationAuthorColorCommandArchive.old_color)
}

// -------------------------------------------------------------------

// CommandSelectionBehaviorArchive

// optional .TSK.SelectionPathArchive archived_selection = 8;
inline bool CommandSelectionBehaviorArchive::_internal_has_archived_selection() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || archived_selection_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_archived_selection() const {
  return _internal_has_archived_selection();
}
inline void CommandSelectionBehaviorArchive::clear_archived_selection() {
  if (archived_selection_ != nullptr) archived_selection_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TSK::SelectionPathArchive& CommandSelectionBehaviorArchive::_internal_archived_selection() const {
  const ::TSK::SelectionPathArchive* p = archived_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& CommandSelectionBehaviorArchive::archived_selection() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.archived_selection)
  return _internal_archived_selection();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_selection(
    ::TSK::SelectionPathArchive* archived_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_selection_);
  }
  archived_selection_ = archived_selection;
  if (archived_selection) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandSelectionBehaviorArchive.archived_selection)
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::release_archived_selection() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::SelectionPathArchive* temp = archived_selection_;
  archived_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::unsafe_arena_release_archived_selection() {
  // @@protoc_insertion_point(field_release:TSK.CommandSelectionBehaviorArchive.archived_selection)
  _has_bits_[0] &= ~0x00000010u;
  ::TSK::SelectionPathArchive* temp = archived_selection_;
  archived_selection_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::_internal_mutable_archived_selection() {
  _has_bits_[0] |= 0x00000010u;
  if (archived_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    archived_selection_ = p;
  }
  return archived_selection_;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::mutable_archived_selection() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandSelectionBehaviorArchive.archived_selection)
  return _internal_mutable_archived_selection();
}
inline void CommandSelectionBehaviorArchive::set_allocated_archived_selection(::TSK::SelectionPathArchive* archived_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete archived_selection_;
  }
  if (archived_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(archived_selection);
    if (message_arena != submessage_arena) {
      archived_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  archived_selection_ = archived_selection;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandSelectionBehaviorArchive.archived_selection)
}

// optional .TSK.SelectionPathArchive archived_old_selection = 1;
inline bool CommandSelectionBehaviorArchive::_internal_has_archived_old_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || archived_old_selection_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_archived_old_selection() const {
  return _internal_has_archived_old_selection();
}
inline void CommandSelectionBehaviorArchive::clear_archived_old_selection() {
  if (archived_old_selection_ != nullptr) archived_old_selection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::SelectionPathArchive& CommandSelectionBehaviorArchive::_internal_archived_old_selection() const {
  const ::TSK::SelectionPathArchive* p = archived_old_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& CommandSelectionBehaviorArchive::archived_old_selection() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.archived_old_selection)
  return _internal_archived_old_selection();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_old_selection(
    ::TSK::SelectionPathArchive* archived_old_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_old_selection_);
  }
  archived_old_selection_ = archived_old_selection;
  if (archived_old_selection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandSelectionBehaviorArchive.archived_old_selection)
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::release_archived_old_selection() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::SelectionPathArchive* temp = archived_old_selection_;
  archived_old_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::unsafe_arena_release_archived_old_selection() {
  // @@protoc_insertion_point(field_release:TSK.CommandSelectionBehaviorArchive.archived_old_selection)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::SelectionPathArchive* temp = archived_old_selection_;
  archived_old_selection_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::_internal_mutable_archived_old_selection() {
  _has_bits_[0] |= 0x00000001u;
  if (archived_old_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    archived_old_selection_ = p;
  }
  return archived_old_selection_;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::mutable_archived_old_selection() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandSelectionBehaviorArchive.archived_old_selection)
  return _internal_mutable_archived_old_selection();
}
inline void CommandSelectionBehaviorArchive::set_allocated_archived_old_selection(::TSK::SelectionPathArchive* archived_old_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete archived_old_selection_;
  }
  if (archived_old_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(archived_old_selection);
    if (message_arena != submessage_arena) {
      archived_old_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_old_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  archived_old_selection_ = archived_old_selection;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandSelectionBehaviorArchive.archived_old_selection)
}

// optional .TSK.SelectionPathArchive archived_new_selection = 2;
inline bool CommandSelectionBehaviorArchive::_internal_has_archived_new_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || archived_new_selection_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_archived_new_selection() const {
  return _internal_has_archived_new_selection();
}
inline void CommandSelectionBehaviorArchive::clear_archived_new_selection() {
  if (archived_new_selection_ != nullptr) archived_new_selection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSK::SelectionPathArchive& CommandSelectionBehaviorArchive::_internal_archived_new_selection() const {
  const ::TSK::SelectionPathArchive* p = archived_new_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::SelectionPathArchive&>(
      ::TSK::_SelectionPathArchive_default_instance_);
}
inline const ::TSK::SelectionPathArchive& CommandSelectionBehaviorArchive::archived_new_selection() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.archived_new_selection)
  return _internal_archived_new_selection();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_archived_new_selection(
    ::TSK::SelectionPathArchive* archived_new_selection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(archived_new_selection_);
  }
  archived_new_selection_ = archived_new_selection;
  if (archived_new_selection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandSelectionBehaviorArchive.archived_new_selection)
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::release_archived_new_selection() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::SelectionPathArchive* temp = archived_new_selection_;
  archived_new_selection_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::unsafe_arena_release_archived_new_selection() {
  // @@protoc_insertion_point(field_release:TSK.CommandSelectionBehaviorArchive.archived_new_selection)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::SelectionPathArchive* temp = archived_new_selection_;
  archived_new_selection_ = nullptr;
  return temp;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::_internal_mutable_archived_new_selection() {
  _has_bits_[0] |= 0x00000002u;
  if (archived_new_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::SelectionPathArchive>(GetArena());
    archived_new_selection_ = p;
  }
  return archived_new_selection_;
}
inline ::TSK::SelectionPathArchive* CommandSelectionBehaviorArchive::mutable_archived_new_selection() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandSelectionBehaviorArchive.archived_new_selection)
  return _internal_mutable_archived_new_selection();
}
inline void CommandSelectionBehaviorArchive::set_allocated_archived_new_selection(::TSK::SelectionPathArchive* archived_new_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete archived_new_selection_;
  }
  if (archived_new_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(archived_new_selection);
    if (message_arena != submessage_arena) {
      archived_new_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, archived_new_selection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  archived_new_selection_ = archived_new_selection;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandSelectionBehaviorArchive.archived_new_selection)
}

// optional uint64 selection_flags = 3;
inline bool CommandSelectionBehaviorArchive::_internal_has_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_selection_flags() const {
  return _internal_has_selection_flags();
}
inline void CommandSelectionBehaviorArchive::clear_selection_flags() {
  selection_flags_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandSelectionBehaviorArchive::_internal_selection_flags() const {
  return selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandSelectionBehaviorArchive::selection_flags() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.selection_flags)
  return _internal_selection_flags();
}
inline void CommandSelectionBehaviorArchive::_internal_set_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  selection_flags_ = value;
}
inline void CommandSelectionBehaviorArchive::set_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_selection_flags(value);
  // @@protoc_insertion_point(field_set:TSK.CommandSelectionBehaviorArchive.selection_flags)
}

// optional uint64 additional_forward_selection_flags = 4;
inline bool CommandSelectionBehaviorArchive::_internal_has_additional_forward_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_additional_forward_selection_flags() const {
  return _internal_has_additional_forward_selection_flags();
}
inline void CommandSelectionBehaviorArchive::clear_additional_forward_selection_flags() {
  additional_forward_selection_flags_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandSelectionBehaviorArchive::_internal_additional_forward_selection_flags() const {
  return additional_forward_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandSelectionBehaviorArchive::additional_forward_selection_flags() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.additional_forward_selection_flags)
  return _internal_additional_forward_selection_flags();
}
inline void CommandSelectionBehaviorArchive::_internal_set_additional_forward_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  additional_forward_selection_flags_ = value;
}
inline void CommandSelectionBehaviorArchive::set_additional_forward_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_additional_forward_selection_flags(value);
  // @@protoc_insertion_point(field_set:TSK.CommandSelectionBehaviorArchive.additional_forward_selection_flags)
}

// optional uint64 additional_reverse_selection_flags = 5;
inline bool CommandSelectionBehaviorArchive::_internal_has_additional_reverse_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_additional_reverse_selection_flags() const {
  return _internal_has_additional_reverse_selection_flags();
}
inline void CommandSelectionBehaviorArchive::clear_additional_reverse_selection_flags() {
  additional_reverse_selection_flags_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandSelectionBehaviorArchive::_internal_additional_reverse_selection_flags() const {
  return additional_reverse_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandSelectionBehaviorArchive::additional_reverse_selection_flags() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.additional_reverse_selection_flags)
  return _internal_additional_reverse_selection_flags();
}
inline void CommandSelectionBehaviorArchive::_internal_set_additional_reverse_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  additional_reverse_selection_flags_ = value;
}
inline void CommandSelectionBehaviorArchive::set_additional_reverse_selection_flags(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_additional_reverse_selection_flags(value);
  // @@protoc_insertion_point(field_set:TSK.CommandSelectionBehaviorArchive.additional_reverse_selection_flags)
}

// optional .TSP.Reference forward_selection_path_transformer = 6;
inline bool CommandSelectionBehaviorArchive::_internal_has_forward_selection_path_transformer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || forward_selection_path_transformer_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_forward_selection_path_transformer() const {
  return _internal_has_forward_selection_path_transformer();
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::_internal_forward_selection_path_transformer() const {
  const ::TSP::Reference* p = forward_selection_path_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::forward_selection_path_transformer() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.forward_selection_path_transformer)
  return _internal_forward_selection_path_transformer();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_forward_selection_path_transformer(
    ::TSP::Reference* forward_selection_path_transformer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_selection_path_transformer_);
  }
  forward_selection_path_transformer_ = forward_selection_path_transformer;
  if (forward_selection_path_transformer) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandSelectionBehaviorArchive.forward_selection_path_transformer)
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::release_forward_selection_path_transformer() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = forward_selection_path_transformer_;
  forward_selection_path_transformer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::unsafe_arena_release_forward_selection_path_transformer() {
  // @@protoc_insertion_point(field_release:TSK.CommandSelectionBehaviorArchive.forward_selection_path_transformer)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = forward_selection_path_transformer_;
  forward_selection_path_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::_internal_mutable_forward_selection_path_transformer() {
  _has_bits_[0] |= 0x00000004u;
  if (forward_selection_path_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    forward_selection_path_transformer_ = p;
  }
  return forward_selection_path_transformer_;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::mutable_forward_selection_path_transformer() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandSelectionBehaviorArchive.forward_selection_path_transformer)
  return _internal_mutable_forward_selection_path_transformer();
}
inline void CommandSelectionBehaviorArchive::set_allocated_forward_selection_path_transformer(::TSP::Reference* forward_selection_path_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_selection_path_transformer_);
  }
  if (forward_selection_path_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_selection_path_transformer)->GetArena();
    if (message_arena != submessage_arena) {
      forward_selection_path_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_selection_path_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  forward_selection_path_transformer_ = forward_selection_path_transformer;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandSelectionBehaviorArchive.forward_selection_path_transformer)
}

// optional .TSP.Reference reverse_selection_path_transformer = 7;
inline bool CommandSelectionBehaviorArchive::_internal_has_reverse_selection_path_transformer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reverse_selection_path_transformer_ != nullptr);
  return value;
}
inline bool CommandSelectionBehaviorArchive::has_reverse_selection_path_transformer() const {
  return _internal_has_reverse_selection_path_transformer();
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::_internal_reverse_selection_path_transformer() const {
  const ::TSP::Reference* p = reverse_selection_path_transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::reverse_selection_path_transformer() const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.reverse_selection_path_transformer)
  return _internal_reverse_selection_path_transformer();
}
inline void CommandSelectionBehaviorArchive::unsafe_arena_set_allocated_reverse_selection_path_transformer(
    ::TSP::Reference* reverse_selection_path_transformer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_selection_path_transformer_);
  }
  reverse_selection_path_transformer_ = reverse_selection_path_transformer;
  if (reverse_selection_path_transformer) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandSelectionBehaviorArchive.reverse_selection_path_transformer)
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::release_reverse_selection_path_transformer() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = reverse_selection_path_transformer_;
  reverse_selection_path_transformer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::unsafe_arena_release_reverse_selection_path_transformer() {
  // @@protoc_insertion_point(field_release:TSK.CommandSelectionBehaviorArchive.reverse_selection_path_transformer)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = reverse_selection_path_transformer_;
  reverse_selection_path_transformer_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::_internal_mutable_reverse_selection_path_transformer() {
  _has_bits_[0] |= 0x00000008u;
  if (reverse_selection_path_transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    reverse_selection_path_transformer_ = p;
  }
  return reverse_selection_path_transformer_;
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::mutable_reverse_selection_path_transformer() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandSelectionBehaviorArchive.reverse_selection_path_transformer)
  return _internal_mutable_reverse_selection_path_transformer();
}
inline void CommandSelectionBehaviorArchive::set_allocated_reverse_selection_path_transformer(::TSP::Reference* reverse_selection_path_transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_selection_path_transformer_);
  }
  if (reverse_selection_path_transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverse_selection_path_transformer)->GetArena();
    if (message_arena != submessage_arena) {
      reverse_selection_path_transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverse_selection_path_transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reverse_selection_path_transformer_ = reverse_selection_path_transformer;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandSelectionBehaviorArchive.reverse_selection_path_transformer)
}

// repeated .TSP.Reference additional_selection_behaviors = 9;
inline int CommandSelectionBehaviorArchive::_internal_additional_selection_behaviors_size() const {
  return additional_selection_behaviors_.size();
}
inline int CommandSelectionBehaviorArchive::additional_selection_behaviors_size() const {
  return _internal_additional_selection_behaviors_size();
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::mutable_additional_selection_behaviors(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CommandSelectionBehaviorArchive.additional_selection_behaviors)
  return additional_selection_behaviors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CommandSelectionBehaviorArchive::mutable_additional_selection_behaviors() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CommandSelectionBehaviorArchive.additional_selection_behaviors)
  return &additional_selection_behaviors_;
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::_internal_additional_selection_behaviors(int index) const {
  return additional_selection_behaviors_.Get(index);
}
inline const ::TSP::Reference& CommandSelectionBehaviorArchive::additional_selection_behaviors(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CommandSelectionBehaviorArchive.additional_selection_behaviors)
  return _internal_additional_selection_behaviors(index);
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::_internal_add_additional_selection_behaviors() {
  return additional_selection_behaviors_.Add();
}
inline ::TSP::Reference* CommandSelectionBehaviorArchive::add_additional_selection_behaviors() {
  // @@protoc_insertion_point(field_add:TSK.CommandSelectionBehaviorArchive.additional_selection_behaviors)
  return _internal_add_additional_selection_behaviors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CommandSelectionBehaviorArchive::additional_selection_behaviors() const {
  // @@protoc_insertion_point(field_list:TSK.CommandSelectionBehaviorArchive.additional_selection_behaviors)
  return additional_selection_behaviors_;
}

// -------------------------------------------------------------------

// SelectionPathTransformerArchive

// repeated .TSP.Reference selection_transformers = 1;
inline int SelectionPathTransformerArchive::_internal_selection_transformers_size() const {
  return selection_transformers_.size();
}
inline int SelectionPathTransformerArchive::selection_transformers_size() const {
  return _internal_selection_transformers_size();
}
inline ::TSP::Reference* SelectionPathTransformerArchive::mutable_selection_transformers(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.SelectionPathTransformerArchive.selection_transformers)
  return selection_transformers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SelectionPathTransformerArchive::mutable_selection_transformers() {
  // @@protoc_insertion_point(field_mutable_list:TSK.SelectionPathTransformerArchive.selection_transformers)
  return &selection_transformers_;
}
inline const ::TSP::Reference& SelectionPathTransformerArchive::_internal_selection_transformers(int index) const {
  return selection_transformers_.Get(index);
}
inline const ::TSP::Reference& SelectionPathTransformerArchive::selection_transformers(int index) const {
  // @@protoc_insertion_point(field_get:TSK.SelectionPathTransformerArchive.selection_transformers)
  return _internal_selection_transformers(index);
}
inline ::TSP::Reference* SelectionPathTransformerArchive::_internal_add_selection_transformers() {
  return selection_transformers_.Add();
}
inline ::TSP::Reference* SelectionPathTransformerArchive::add_selection_transformers() {
  // @@protoc_insertion_point(field_add:TSK.SelectionPathTransformerArchive.selection_transformers)
  return _internal_add_selection_transformers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SelectionPathTransformerArchive::selection_transformers() const {
  // @@protoc_insertion_point(field_list:TSK.SelectionPathTransformerArchive.selection_transformers)
  return selection_transformers_;
}

// -------------------------------------------------------------------

// SelectionPathArchive

// repeated .TSP.Reference ordered_selections = 1;
inline int SelectionPathArchive::_internal_ordered_selections_size() const {
  return ordered_selections_.size();
}
inline int SelectionPathArchive::ordered_selections_size() const {
  return _internal_ordered_selections_size();
}
inline ::TSP::Reference* SelectionPathArchive::mutable_ordered_selections(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.SelectionPathArchive.ordered_selections)
  return ordered_selections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
SelectionPathArchive::mutable_ordered_selections() {
  // @@protoc_insertion_point(field_mutable_list:TSK.SelectionPathArchive.ordered_selections)
  return &ordered_selections_;
}
inline const ::TSP::Reference& SelectionPathArchive::_internal_ordered_selections(int index) const {
  return ordered_selections_.Get(index);
}
inline const ::TSP::Reference& SelectionPathArchive::ordered_selections(int index) const {
  // @@protoc_insertion_point(field_get:TSK.SelectionPathArchive.ordered_selections)
  return _internal_ordered_selections(index);
}
inline ::TSP::Reference* SelectionPathArchive::_internal_add_ordered_selections() {
  return ordered_selections_.Add();
}
inline ::TSP::Reference* SelectionPathArchive::add_ordered_selections() {
  // @@protoc_insertion_point(field_add:TSK.SelectionPathArchive.ordered_selections)
  return _internal_add_ordered_selections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
SelectionPathArchive::ordered_selections() const {
  // @@protoc_insertion_point(field_list:TSK.SelectionPathArchive.ordered_selections)
  return ordered_selections_;
}

// -------------------------------------------------------------------

// DocumentSelectionArchive

// optional .TSP.Reference document_root = 1;
inline bool DocumentSelectionArchive::_internal_has_document_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || document_root_ != nullptr);
  return value;
}
inline bool DocumentSelectionArchive::has_document_root() const {
  return _internal_has_document_root();
}
inline const ::TSP::Reference& DocumentSelectionArchive::_internal_document_root() const {
  const ::TSP::Reference* p = document_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentSelectionArchive::document_root() const {
  // @@protoc_insertion_point(field_get:TSK.DocumentSelectionArchive.document_root)
  return _internal_document_root();
}
inline void DocumentSelectionArchive::unsafe_arena_set_allocated_document_root(
    ::TSP::Reference* document_root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_root_);
  }
  document_root_ = document_root;
  if (document_root) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DocumentSelectionArchive.document_root)
}
inline ::TSP::Reference* DocumentSelectionArchive::release_document_root() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_root_;
  document_root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* DocumentSelectionArchive::unsafe_arena_release_document_root() {
  // @@protoc_insertion_point(field_release:TSK.DocumentSelectionArchive.document_root)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = document_root_;
  document_root_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentSelectionArchive::_internal_mutable_document_root() {
  _has_bits_[0] |= 0x00000001u;
  if (document_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    document_root_ = p;
  }
  return document_root_;
}
inline ::TSP::Reference* DocumentSelectionArchive::mutable_document_root() {
  // @@protoc_insertion_point(field_mutable:TSK.DocumentSelectionArchive.document_root)
  return _internal_mutable_document_root();
}
inline void DocumentSelectionArchive::set_allocated_document_root(::TSP::Reference* document_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_root_);
  }
  if (document_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_root)->GetArena();
    if (message_arena != submessage_arena) {
      document_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  document_root_ = document_root;
  // @@protoc_insertion_point(field_set_allocated:TSK.DocumentSelectionArchive.document_root)
}

// -------------------------------------------------------------------

// IdOperationArgs

// required .TSP.UUIDPath id_path = 1;
inline bool IdOperationArgs::_internal_has_id_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || id_path_ != nullptr);
  return value;
}
inline bool IdOperationArgs::has_id_path() const {
  return _internal_has_id_path();
}
inline const ::TSP::UUIDPath& IdOperationArgs::_internal_id_path() const {
  const ::TSP::UUIDPath* p = id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& IdOperationArgs::id_path() const {
  // @@protoc_insertion_point(field_get:TSK.IdOperationArgs.id_path)
  return _internal_id_path();
}
inline void IdOperationArgs::unsafe_arena_set_allocated_id_path(
    ::TSP::UUIDPath* id_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_);
  }
  id_path_ = id_path;
  if (id_path) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.IdOperationArgs.id_path)
}
inline ::TSP::UUIDPath* IdOperationArgs::release_id_path() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = id_path_;
  id_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUIDPath* IdOperationArgs::unsafe_arena_release_id_path() {
  // @@protoc_insertion_point(field_release:TSK.IdOperationArgs.id_path)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = id_path_;
  id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* IdOperationArgs::_internal_mutable_id_path() {
  _has_bits_[0] |= 0x00000001u;
  if (id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArena());
    id_path_ = p;
  }
  return id_path_;
}
inline ::TSP::UUIDPath* IdOperationArgs::mutable_id_path() {
  // @@protoc_insertion_point(field_mutable:TSK.IdOperationArgs.id_path)
  return _internal_mutable_id_path();
}
inline void IdOperationArgs::set_allocated_id_path(::TSP::UUIDPath* id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path_);
  }
  if (id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_path)->GetArena();
    if (message_arena != submessage_arena) {
      id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_path_ = id_path;
  // @@protoc_insertion_point(field_set_allocated:TSK.IdOperationArgs.id_path)
}

// -------------------------------------------------------------------

// AddIdOperationArgs

// required .TSK.IdOperationArgs super = 1;
inline bool AddIdOperationArgs::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AddIdOperationArgs::has_super() const {
  return _internal_has_super();
}
inline void AddIdOperationArgs::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::IdOperationArgs& AddIdOperationArgs::_internal_super() const {
  const ::TSK::IdOperationArgs* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::IdOperationArgs&>(
      ::TSK::_IdOperationArgs_default_instance_);
}
inline const ::TSK::IdOperationArgs& AddIdOperationArgs::super() const {
  // @@protoc_insertion_point(field_get:TSK.AddIdOperationArgs.super)
  return _internal_super();
}
inline void AddIdOperationArgs::unsafe_arena_set_allocated_super(
    ::TSK::IdOperationArgs* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.AddIdOperationArgs.super)
}
inline ::TSK::IdOperationArgs* AddIdOperationArgs::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::IdOperationArgs* AddIdOperationArgs::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.AddIdOperationArgs.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::IdOperationArgs* AddIdOperationArgs::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::IdOperationArgs>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::IdOperationArgs* AddIdOperationArgs::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.AddIdOperationArgs.super)
  return _internal_mutable_super();
}
inline void AddIdOperationArgs::set_allocated_super(::TSK::IdOperationArgs* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.AddIdOperationArgs.super)
}

// required int32 index = 2;
inline bool AddIdOperationArgs::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddIdOperationArgs::has_index() const {
  return _internal_has_index();
}
inline void AddIdOperationArgs::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddIdOperationArgs::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddIdOperationArgs::index() const {
  // @@protoc_insertion_point(field_get:TSK.AddIdOperationArgs.index)
  return _internal_index();
}
inline void AddIdOperationArgs::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void AddIdOperationArgs::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSK.AddIdOperationArgs.index)
}

// -------------------------------------------------------------------

// RemoveIdOperationArgs

// required .TSK.IdOperationArgs super = 1;
inline bool RemoveIdOperationArgs::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RemoveIdOperationArgs::has_super() const {
  return _internal_has_super();
}
inline void RemoveIdOperationArgs::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::IdOperationArgs& RemoveIdOperationArgs::_internal_super() const {
  const ::TSK::IdOperationArgs* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::IdOperationArgs&>(
      ::TSK::_IdOperationArgs_default_instance_);
}
inline const ::TSK::IdOperationArgs& RemoveIdOperationArgs::super() const {
  // @@protoc_insertion_point(field_get:TSK.RemoveIdOperationArgs.super)
  return _internal_super();
}
inline void RemoveIdOperationArgs::unsafe_arena_set_allocated_super(
    ::TSK::IdOperationArgs* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.RemoveIdOperationArgs.super)
}
inline ::TSK::IdOperationArgs* RemoveIdOperationArgs::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::IdOperationArgs* RemoveIdOperationArgs::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.RemoveIdOperationArgs.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::IdOperationArgs* RemoveIdOperationArgs::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::IdOperationArgs>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::IdOperationArgs* RemoveIdOperationArgs::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.RemoveIdOperationArgs.super)
  return _internal_mutable_super();
}
inline void RemoveIdOperationArgs::set_allocated_super(::TSK::IdOperationArgs* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.RemoveIdOperationArgs.super)
}

// required int32 index = 2;
inline bool RemoveIdOperationArgs::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RemoveIdOperationArgs::has_index() const {
  return _internal_has_index();
}
inline void RemoveIdOperationArgs::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveIdOperationArgs::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveIdOperationArgs::index() const {
  // @@protoc_insertion_point(field_get:TSK.RemoveIdOperationArgs.index)
  return _internal_index();
}
inline void RemoveIdOperationArgs::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void RemoveIdOperationArgs::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSK.RemoveIdOperationArgs.index)
}

// -------------------------------------------------------------------

// RearrangeIdOperationArgs

// required .TSK.IdOperationArgs super = 1;
inline bool RearrangeIdOperationArgs::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool RearrangeIdOperationArgs::has_super() const {
  return _internal_has_super();
}
inline void RearrangeIdOperationArgs::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::IdOperationArgs& RearrangeIdOperationArgs::_internal_super() const {
  const ::TSK::IdOperationArgs* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::IdOperationArgs&>(
      ::TSK::_IdOperationArgs_default_instance_);
}
inline const ::TSK::IdOperationArgs& RearrangeIdOperationArgs::super() const {
  // @@protoc_insertion_point(field_get:TSK.RearrangeIdOperationArgs.super)
  return _internal_super();
}
inline void RearrangeIdOperationArgs::unsafe_arena_set_allocated_super(
    ::TSK::IdOperationArgs* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.RearrangeIdOperationArgs.super)
}
inline ::TSK::IdOperationArgs* RearrangeIdOperationArgs::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::IdOperationArgs* RearrangeIdOperationArgs::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.RearrangeIdOperationArgs.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::IdOperationArgs* RearrangeIdOperationArgs::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::IdOperationArgs>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::IdOperationArgs* RearrangeIdOperationArgs::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.RearrangeIdOperationArgs.super)
  return _internal_mutable_super();
}
inline void RearrangeIdOperationArgs::set_allocated_super(::TSK::IdOperationArgs* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.RearrangeIdOperationArgs.super)
}

// required int32 from_index = 2;
inline bool RearrangeIdOperationArgs::_internal_has_from_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RearrangeIdOperationArgs::has_from_index() const {
  return _internal_has_from_index();
}
inline void RearrangeIdOperationArgs::clear_from_index() {
  from_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RearrangeIdOperationArgs::_internal_from_index() const {
  return from_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RearrangeIdOperationArgs::from_index() const {
  // @@protoc_insertion_point(field_get:TSK.RearrangeIdOperationArgs.from_index)
  return _internal_from_index();
}
inline void RearrangeIdOperationArgs::_internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  from_index_ = value;
}
inline void RearrangeIdOperationArgs::set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:TSK.RearrangeIdOperationArgs.from_index)
}

// required int32 to_index = 3;
inline bool RearrangeIdOperationArgs::_internal_has_to_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RearrangeIdOperationArgs::has_to_index() const {
  return _internal_has_to_index();
}
inline void RearrangeIdOperationArgs::clear_to_index() {
  to_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RearrangeIdOperationArgs::_internal_to_index() const {
  return to_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RearrangeIdOperationArgs::to_index() const {
  // @@protoc_insertion_point(field_get:TSK.RearrangeIdOperationArgs.to_index)
  return _internal_to_index();
}
inline void RearrangeIdOperationArgs::_internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  to_index_ = value;
}
inline void RearrangeIdOperationArgs::set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:TSK.RearrangeIdOperationArgs.to_index)
}

// -------------------------------------------------------------------

// IdPlacementOperationArgs

// required .TSK.IdOperationArgs super = 1;
inline bool IdPlacementOperationArgs::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool IdPlacementOperationArgs::has_super() const {
  return _internal_has_super();
}
inline void IdPlacementOperationArgs::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::IdOperationArgs& IdPlacementOperationArgs::_internal_super() const {
  const ::TSK::IdOperationArgs* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::IdOperationArgs&>(
      ::TSK::_IdOperationArgs_default_instance_);
}
inline const ::TSK::IdOperationArgs& IdPlacementOperationArgs::super() const {
  // @@protoc_insertion_point(field_get:TSK.IdPlacementOperationArgs.super)
  return _internal_super();
}
inline void IdPlacementOperationArgs::unsafe_arena_set_allocated_super(
    ::TSK::IdOperationArgs* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.IdPlacementOperationArgs.super)
}
inline ::TSK::IdOperationArgs* IdPlacementOperationArgs::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::IdOperationArgs* IdPlacementOperationArgs::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.IdPlacementOperationArgs.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::IdOperationArgs* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::IdOperationArgs* IdPlacementOperationArgs::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::IdOperationArgs>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::IdOperationArgs* IdPlacementOperationArgs::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.IdPlacementOperationArgs.super)
  return _internal_mutable_super();
}
inline void IdPlacementOperationArgs::set_allocated_super(::TSK::IdOperationArgs* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.IdPlacementOperationArgs.super)
}

// required int32 from_index = 2;
inline bool IdPlacementOperationArgs::_internal_has_from_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IdPlacementOperationArgs::has_from_index() const {
  return _internal_has_from_index();
}
inline void IdPlacementOperationArgs::clear_from_index() {
  from_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdPlacementOperationArgs::_internal_from_index() const {
  return from_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdPlacementOperationArgs::from_index() const {
  // @@protoc_insertion_point(field_get:TSK.IdPlacementOperationArgs.from_index)
  return _internal_from_index();
}
inline void IdPlacementOperationArgs::_internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  from_index_ = value;
}
inline void IdPlacementOperationArgs::set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:TSK.IdPlacementOperationArgs.from_index)
}

// required int32 to_index = 3;
inline bool IdPlacementOperationArgs::_internal_has_to_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IdPlacementOperationArgs::has_to_index() const {
  return _internal_has_to_index();
}
inline void IdPlacementOperationArgs::clear_to_index() {
  to_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdPlacementOperationArgs::_internal_to_index() const {
  return to_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IdPlacementOperationArgs::to_index() const {
  // @@protoc_insertion_point(field_get:TSK.IdPlacementOperationArgs.to_index)
  return _internal_to_index();
}
inline void IdPlacementOperationArgs::_internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  to_index_ = value;
}
inline void IdPlacementOperationArgs::set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:TSK.IdPlacementOperationArgs.to_index)
}

// -------------------------------------------------------------------

// NullCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool NullCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool NullCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void NullCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& NullCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& NullCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.NullCommandArchive.super)
  return _internal_super();
}
inline void NullCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.NullCommandArchive.super)
}
inline ::TSK::CommandArchive* NullCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* NullCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.NullCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* NullCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* NullCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.NullCommandArchive.super)
  return _internal_mutable_super();
}
inline void NullCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.NullCommandArchive.super)
}

// -------------------------------------------------------------------

// GroupCommitCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool GroupCommitCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool GroupCommitCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void GroupCommitCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& GroupCommitCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GroupCommitCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.GroupCommitCommandArchive.super)
  return _internal_super();
}
inline void GroupCommitCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.GroupCommitCommandArchive.super)
}
inline ::TSK::CommandArchive* GroupCommitCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* GroupCommitCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.GroupCommitCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GroupCommitCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* GroupCommitCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.GroupCommitCommandArchive.super)
  return _internal_mutable_super();
}
inline void GroupCommitCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.GroupCommitCommandArchive.super)
}

// -------------------------------------------------------------------

// UpgradeDocPostProcessingCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool UpgradeDocPostProcessingCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool UpgradeDocPostProcessingCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void UpgradeDocPostProcessingCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& UpgradeDocPostProcessingCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& UpgradeDocPostProcessingCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.UpgradeDocPostProcessingCommandArchive.super)
  return _internal_super();
}
inline void UpgradeDocPostProcessingCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.UpgradeDocPostProcessingCommandArchive.super)
}
inline ::TSK::CommandArchive* UpgradeDocPostProcessingCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* UpgradeDocPostProcessingCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.UpgradeDocPostProcessingCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* UpgradeDocPostProcessingCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* UpgradeDocPostProcessingCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.UpgradeDocPostProcessingCommandArchive.super)
  return _internal_mutable_super();
}
inline void UpgradeDocPostProcessingCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.UpgradeDocPostProcessingCommandArchive.super)
}

// -------------------------------------------------------------------

// InducedCommandCollectionCommitCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InducedCommandCollectionCommitCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool InducedCommandCollectionCommitCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void InducedCommandCollectionCommitCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& InducedCommandCollectionCommitCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InducedCommandCollectionCommitCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.InducedCommandCollectionCommitCommandArchive.super)
  return _internal_super();
}
inline void InducedCommandCollectionCommitCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.InducedCommandCollectionCommitCommandArchive.super)
}
inline ::TSK::CommandArchive* InducedCommandCollectionCommitCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* InducedCommandCollectionCommitCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.InducedCommandCollectionCommitCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InducedCommandCollectionCommitCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* InducedCommandCollectionCommitCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.InducedCommandCollectionCommitCommandArchive.super)
  return _internal_mutable_super();
}
inline void InducedCommandCollectionCommitCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.InducedCommandCollectionCommitCommandArchive.super)
}

// -------------------------------------------------------------------

// ExecuteTestBetweenRollbackAndReapplyCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ExecuteTestBetweenRollbackAndReapplyCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ExecuteTestBetweenRollbackAndReapplyCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& ExecuteTestBetweenRollbackAndReapplyCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ExecuteTestBetweenRollbackAndReapplyCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive.super)
  return _internal_super();
}
inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive.super)
}
inline ::TSK::CommandArchive* ExecuteTestBetweenRollbackAndReapplyCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ExecuteTestBetweenRollbackAndReapplyCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ExecuteTestBetweenRollbackAndReapplyCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ExecuteTestBetweenRollbackAndReapplyCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive.super)
  return _internal_mutable_super();
}
inline void ExecuteTestBetweenRollbackAndReapplyCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive.super)
}

// -------------------------------------------------------------------

// ChangeDocumentPackageTypeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ChangeDocumentPackageTypeCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool ChangeDocumentPackageTypeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void ChangeDocumentPackageTypeCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& ChangeDocumentPackageTypeCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeDocumentPackageTypeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.ChangeDocumentPackageTypeCommandArchive.super)
  return _internal_super();
}
inline void ChangeDocumentPackageTypeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.ChangeDocumentPackageTypeCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeDocumentPackageTypeCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* ChangeDocumentPackageTypeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.ChangeDocumentPackageTypeCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeDocumentPackageTypeCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* ChangeDocumentPackageTypeCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.ChangeDocumentPackageTypeCommandArchive.super)
  return _internal_mutable_super();
}
inline void ChangeDocumentPackageTypeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.ChangeDocumentPackageTypeCommandArchive.super)
}

// required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType new_package_type = 2;
inline bool ChangeDocumentPackageTypeCommandArchive::_internal_has_new_package_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeDocumentPackageTypeCommandArchive::has_new_package_type() const {
  return _internal_has_new_package_type();
}
inline void ChangeDocumentPackageTypeCommandArchive::clear_new_package_type() {
  new_package_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::_internal_new_package_type() const {
  return static_cast< ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType >(new_package_type_);
}
inline ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::new_package_type() const {
  // @@protoc_insertion_point(field_get:TSK.ChangeDocumentPackageTypeCommandArchive.new_package_type)
  return _internal_new_package_type();
}
inline void ChangeDocumentPackageTypeCommandArchive::_internal_set_new_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value) {
  assert(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  new_package_type_ = value;
}
inline void ChangeDocumentPackageTypeCommandArchive::set_new_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value) {
  _internal_set_new_package_type(value);
  // @@protoc_insertion_point(field_set:TSK.ChangeDocumentPackageTypeCommandArchive.new_package_type)
}

// required .TSK.ChangeDocumentPackageTypeCommandArchive.PackageType old_package_type = 3;
inline bool ChangeDocumentPackageTypeCommandArchive::_internal_has_old_package_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChangeDocumentPackageTypeCommandArchive::has_old_package_type() const {
  return _internal_has_old_package_type();
}
inline void ChangeDocumentPackageTypeCommandArchive::clear_old_package_type() {
  old_package_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::_internal_old_package_type() const {
  return static_cast< ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType >(old_package_type_);
}
inline ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType ChangeDocumentPackageTypeCommandArchive::old_package_type() const {
  // @@protoc_insertion_point(field_get:TSK.ChangeDocumentPackageTypeCommandArchive.old_package_type)
  return _internal_old_package_type();
}
inline void ChangeDocumentPackageTypeCommandArchive::_internal_set_old_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value) {
  assert(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  old_package_type_ = value;
}
inline void ChangeDocumentPackageTypeCommandArchive::set_old_package_type(::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType value) {
  _internal_set_old_package_type(value);
  // @@protoc_insertion_point(field_set:TSK.ChangeDocumentPackageTypeCommandArchive.old_package_type)
}

// -------------------------------------------------------------------

// CreateLocalStorageSnapshotCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool CreateLocalStorageSnapshotCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CreateLocalStorageSnapshotCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void CreateLocalStorageSnapshotCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TSK::CommandArchive& CreateLocalStorageSnapshotCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CreateLocalStorageSnapshotCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.CreateLocalStorageSnapshotCommandArchive.super)
  return _internal_super();
}
inline void CreateLocalStorageSnapshotCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CreateLocalStorageSnapshotCommandArchive.super)
}
inline ::TSK::CommandArchive* CreateLocalStorageSnapshotCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CreateLocalStorageSnapshotCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.CreateLocalStorageSnapshotCommandArchive.super)
  _has_bits_[0] &= ~0x00000002u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CreateLocalStorageSnapshotCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000002u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CreateLocalStorageSnapshotCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.CreateLocalStorageSnapshotCommandArchive.super)
  return _internal_mutable_super();
}
inline void CreateLocalStorageSnapshotCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.CreateLocalStorageSnapshotCommandArchive.super)
}

// optional string snapshot_id = 2;
inline bool CreateLocalStorageSnapshotCommandArchive::_internal_has_snapshot_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateLocalStorageSnapshotCommandArchive::has_snapshot_id() const {
  return _internal_has_snapshot_id();
}
inline void CreateLocalStorageSnapshotCommandArchive::clear_snapshot_id() {
  snapshot_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateLocalStorageSnapshotCommandArchive::snapshot_id() const {
  // @@protoc_insertion_point(field_get:TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id)
  return _internal_snapshot_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CreateLocalStorageSnapshotCommandArchive::set_snapshot_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id)
}
inline std::string* CreateLocalStorageSnapshotCommandArchive::mutable_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id)
  return _internal_mutable_snapshot_id();
}
inline const std::string& CreateLocalStorageSnapshotCommandArchive::_internal_snapshot_id() const {
  return snapshot_id_.Get();
}
inline void CreateLocalStorageSnapshotCommandArchive::_internal_set_snapshot_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snapshot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CreateLocalStorageSnapshotCommandArchive::_internal_mutable_snapshot_id() {
  _has_bits_[0] |= 0x00000001u;
  return snapshot_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateLocalStorageSnapshotCommandArchive::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id)
  if (!_internal_has_snapshot_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snapshot_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateLocalStorageSnapshotCommandArchive::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.CreateLocalStorageSnapshotCommandArchive.snapshot_id)
}

// -------------------------------------------------------------------

// BlockDiffsAtCurrentRevisionCommand

// required .TSK.CommandArchive super = 1;
inline bool BlockDiffsAtCurrentRevisionCommand::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool BlockDiffsAtCurrentRevisionCommand::has_super() const {
  return _internal_has_super();
}
inline void BlockDiffsAtCurrentRevisionCommand::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& BlockDiffsAtCurrentRevisionCommand::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& BlockDiffsAtCurrentRevisionCommand::super() const {
  // @@protoc_insertion_point(field_get:TSK.BlockDiffsAtCurrentRevisionCommand.super)
  return _internal_super();
}
inline void BlockDiffsAtCurrentRevisionCommand::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.BlockDiffsAtCurrentRevisionCommand.super)
}
inline ::TSK::CommandArchive* BlockDiffsAtCurrentRevisionCommand::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* BlockDiffsAtCurrentRevisionCommand::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.BlockDiffsAtCurrentRevisionCommand.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* BlockDiffsAtCurrentRevisionCommand::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* BlockDiffsAtCurrentRevisionCommand::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.BlockDiffsAtCurrentRevisionCommand.super)
  return _internal_mutable_super();
}
inline void BlockDiffsAtCurrentRevisionCommand::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.BlockDiffsAtCurrentRevisionCommand.super)
}

// -------------------------------------------------------------------

// RangeAddress

// repeated uint64 address_identifier = 1;
inline int RangeAddress::_internal_address_identifier_size() const {
  return address_identifier_.size();
}
inline int RangeAddress::address_identifier_size() const {
  return _internal_address_identifier_size();
}
inline void RangeAddress::clear_address_identifier() {
  address_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RangeAddress::_internal_address_identifier(int index) const {
  return address_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RangeAddress::address_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.RangeAddress.address_identifier)
  return _internal_address_identifier(index);
}
inline void RangeAddress::set_address_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.RangeAddress.address_identifier)
}
inline void RangeAddress::_internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_identifier_.Add(value);
}
inline void RangeAddress::add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_address_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.RangeAddress.address_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RangeAddress::_internal_address_identifier() const {
  return address_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RangeAddress::address_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.RangeAddress.address_identifier)
  return _internal_address_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RangeAddress::_internal_mutable_address_identifier() {
  return &address_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RangeAddress::mutable_address_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.RangeAddress.address_identifier)
  return _internal_mutable_address_identifier();
}

// repeated uint32 range_list = 2;
inline int RangeAddress::_internal_range_list_size() const {
  return range_list_.size();
}
inline int RangeAddress::range_list_size() const {
  return _internal_range_list_size();
}
inline void RangeAddress::clear_range_list() {
  range_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeAddress::_internal_range_list(int index) const {
  return range_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RangeAddress::range_list(int index) const {
  // @@protoc_insertion_point(field_get:TSK.RangeAddress.range_list)
  return _internal_range_list(index);
}
inline void RangeAddress::set_range_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  range_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.RangeAddress.range_list)
}
inline void RangeAddress::_internal_add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  range_list_.Add(value);
}
inline void RangeAddress::add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_range_list(value);
  // @@protoc_insertion_point(field_add:TSK.RangeAddress.range_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RangeAddress::_internal_range_list() const {
  return range_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RangeAddress::range_list() const {
  // @@protoc_insertion_point(field_list:TSK.RangeAddress.range_list)
  return _internal_range_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RangeAddress::_internal_mutable_range_list() {
  return &range_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RangeAddress::mutable_range_list() {
  // @@protoc_insertion_point(field_mutable_list:TSK.RangeAddress.range_list)
  return _internal_mutable_range_list();
}

// -------------------------------------------------------------------

// Operation

// optional .TSK.Operation.OperationType type = 1 [default = ReplaceRange];
inline bool Operation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Operation::has_type() const {
  return _internal_has_type();
}
inline void Operation::clear_type() {
  type_ = 6;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::TSK::Operation_OperationType Operation::_internal_type() const {
  return static_cast< ::TSK::Operation_OperationType >(type_);
}
inline ::TSK::Operation_OperationType Operation::type() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.type)
  return _internal_type();
}
inline void Operation::_internal_set_type(::TSK::Operation_OperationType value) {
  assert(::TSK::Operation_OperationType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void Operation::set_type(::TSK::Operation_OperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.type)
}

// optional bool noop = 2 [default = false];
inline bool Operation::_internal_has_noop() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation::has_noop() const {
  return _internal_has_noop();
}
inline void Operation::clear_noop() {
  noop_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Operation::_internal_noop() const {
  return noop_;
}
inline bool Operation::noop() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.noop)
  return _internal_noop();
}
inline void Operation::_internal_set_noop(bool value) {
  _has_bits_[0] |= 0x00000001u;
  noop_ = value;
}
inline void Operation::set_noop(bool value) {
  _internal_set_noop(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.noop)
}

// repeated fixed64 address_identifier = 3 [packed = true];
inline int Operation::_internal_address_identifier_size() const {
  return address_identifier_.size();
}
inline int Operation::address_identifier_size() const {
  return _internal_address_identifier_size();
}
inline void Operation::clear_address_identifier() {
  address_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Operation::_internal_address_identifier(int index) const {
  return address_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Operation::address_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.Operation.address_identifier)
  return _internal_address_identifier(index);
}
inline void Operation::set_address_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.Operation.address_identifier)
}
inline void Operation::_internal_add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  address_identifier_.Add(value);
}
inline void Operation::add_address_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_address_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.Operation.address_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Operation::_internal_address_identifier() const {
  return address_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Operation::address_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.Operation.address_identifier)
  return _internal_address_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Operation::_internal_mutable_address_identifier() {
  return &address_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Operation::mutable_address_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.Operation.address_identifier)
  return _internal_mutable_address_identifier();
}

// optional uint64 insert_length = 4 [default = 1];
inline bool Operation::_internal_has_insert_length() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Operation::has_insert_length() const {
  return _internal_has_insert_length();
}
inline void Operation::clear_insert_length() {
  insert_length_ = PROTOBUF_ULONGLONG(1);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Operation::_internal_insert_length() const {
  return insert_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Operation::insert_length() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.insert_length)
  return _internal_insert_length();
}
inline void Operation::_internal_set_insert_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  insert_length_ = value;
}
inline void Operation::set_insert_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_insert_length(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.insert_length)
}

// optional bool preserve_lower_priority_location = 5 [default = false];
inline bool Operation::_internal_has_preserve_lower_priority_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operation::has_preserve_lower_priority_location() const {
  return _internal_has_preserve_lower_priority_location();
}
inline void Operation::clear_preserve_lower_priority_location() {
  preserve_lower_priority_location_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Operation::_internal_preserve_lower_priority_location() const {
  return preserve_lower_priority_location_;
}
inline bool Operation::preserve_lower_priority_location() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.preserve_lower_priority_location)
  return _internal_preserve_lower_priority_location();
}
inline void Operation::_internal_set_preserve_lower_priority_location(bool value) {
  _has_bits_[0] |= 0x00000002u;
  preserve_lower_priority_location_ = value;
}
inline void Operation::set_preserve_lower_priority_location(bool value) {
  _internal_set_preserve_lower_priority_location(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.preserve_lower_priority_location)
}

// repeated uint32 range_list = 6 [packed = true];
inline int Operation::_internal_range_list_size() const {
  return range_list_.size();
}
inline int Operation::range_list_size() const {
  return _internal_range_list_size();
}
inline void Operation::clear_range_list() {
  range_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::_internal_range_list(int index) const {
  return range_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::range_list(int index) const {
  // @@protoc_insertion_point(field_get:TSK.Operation.range_list)
  return _internal_range_list(index);
}
inline void Operation::set_range_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  range_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.Operation.range_list)
}
inline void Operation::_internal_add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  range_list_.Add(value);
}
inline void Operation::add_range_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_range_list(value);
  // @@protoc_insertion_point(field_add:TSK.Operation.range_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Operation::_internal_range_list() const {
  return range_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Operation::range_list() const {
  // @@protoc_insertion_point(field_list:TSK.Operation.range_list)
  return _internal_range_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Operation::_internal_mutable_range_list() {
  return &range_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Operation::mutable_range_list() {
  // @@protoc_insertion_point(field_mutable_list:TSK.Operation.range_list)
  return _internal_mutable_range_list();
}

// optional uint32 transform_behavior = 7 [default = 7];
inline bool Operation::_internal_has_transform_behavior() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Operation::has_transform_behavior() const {
  return _internal_has_transform_behavior();
}
inline void Operation::clear_transform_behavior() {
  transform_behavior_ = 7u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::_internal_transform_behavior() const {
  return transform_behavior_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::transform_behavior() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.transform_behavior)
  return _internal_transform_behavior();
}
inline void Operation::_internal_set_transform_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  transform_behavior_ = value;
}
inline void Operation::set_transform_behavior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transform_behavior(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.transform_behavior)
}

// optional uint32 property_id = 8;
inline bool Operation::_internal_has_property_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Operation::has_property_id() const {
  return _internal_has_property_id();
}
inline void Operation::clear_property_id() {
  property_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::_internal_property_id() const {
  return property_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Operation::property_id() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.property_id)
  return _internal_property_id();
}
inline void Operation::_internal_set_property_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  property_id_ = value;
}
inline void Operation::set_property_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_property_id(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.property_id)
}

// optional int32 from_index = 9 [default = -1];
inline bool Operation::_internal_has_from_index() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Operation::has_from_index() const {
  return _internal_has_from_index();
}
inline void Operation::clear_from_index() {
  from_index_ = -1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_from_index() const {
  return from_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::from_index() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.from_index)
  return _internal_from_index();
}
inline void Operation::_internal_set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  from_index_ = value;
}
inline void Operation::set_from_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.from_index)
}

// optional int32 to_index = 10 [default = -1];
inline bool Operation::_internal_has_to_index() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Operation::has_to_index() const {
  return _internal_has_to_index();
}
inline void Operation::clear_to_index() {
  to_index_ = -1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_to_index() const {
  return to_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::to_index() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.to_index)
  return _internal_to_index();
}
inline void Operation::_internal_set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  to_index_ = value;
}
inline void Operation::set_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.to_index)
}

// optional bool dominating = 11 [default = false];
inline bool Operation::_internal_has_dominating() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Operation::has_dominating() const {
  return _internal_has_dominating();
}
inline void Operation::clear_dominating() {
  dominating_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Operation::_internal_dominating() const {
  return dominating_;
}
inline bool Operation::dominating() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.dominating)
  return _internal_dominating();
}
inline void Operation::_internal_set_dominating(bool value) {
  _has_bits_[0] |= 0x00000004u;
  dominating_ = value;
}
inline void Operation::set_dominating(bool value) {
  _internal_set_dominating(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.dominating)
}

// optional int32 object_count = 12 [default = -1];
inline bool Operation::_internal_has_object_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Operation::has_object_count() const {
  return _internal_has_object_count();
}
inline void Operation::clear_object_count() {
  object_count_ = -1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_object_count() const {
  return object_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::object_count() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.object_count)
  return _internal_object_count();
}
inline void Operation::_internal_set_object_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  object_count_ = value;
}
inline void Operation::set_object_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_count(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.object_count)
}

// optional int32 object_counter_space = 13 [default = 0];
inline bool Operation::_internal_has_object_counter_space() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Operation::has_object_counter_space() const {
  return _internal_has_object_counter_space();
}
inline void Operation::clear_object_counter_space() {
  object_counter_space_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::_internal_object_counter_space() const {
  return object_counter_space_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Operation::object_counter_space() const {
  // @@protoc_insertion_point(field_get:TSK.Operation.object_counter_space)
  return _internal_object_counter_space();
}
inline void Operation::_internal_set_object_counter_space(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  object_counter_space_ = value;
}
inline void Operation::set_object_counter_space(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_object_counter_space(value);
  // @@protoc_insertion_point(field_set:TSK.Operation.object_counter_space)
}

// -------------------------------------------------------------------

// OperationTransformer

// required bool higher_priority = 1;
inline bool OperationTransformer::_internal_has_higher_priority() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationTransformer::has_higher_priority() const {
  return _internal_has_higher_priority();
}
inline void OperationTransformer::clear_higher_priority() {
  higher_priority_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OperationTransformer::_internal_higher_priority() const {
  return higher_priority_;
}
inline bool OperationTransformer::higher_priority() const {
  // @@protoc_insertion_point(field_get:TSK.OperationTransformer.higher_priority)
  return _internal_higher_priority();
}
inline void OperationTransformer::_internal_set_higher_priority(bool value) {
  _has_bits_[0] |= 0x00000001u;
  higher_priority_ = value;
}
inline void OperationTransformer::set_higher_priority(bool value) {
  _internal_set_higher_priority(value);
  // @@protoc_insertion_point(field_set:TSK.OperationTransformer.higher_priority)
}

// repeated .TSK.Operation operations = 2;
inline int OperationTransformer::_internal_operations_size() const {
  return operations_.size();
}
inline int OperationTransformer::operations_size() const {
  return _internal_operations_size();
}
inline void OperationTransformer::clear_operations() {
  operations_.Clear();
}
inline ::TSK::Operation* OperationTransformer::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.OperationTransformer.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >*
OperationTransformer::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationTransformer.operations)
  return &operations_;
}
inline const ::TSK::Operation& OperationTransformer::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::TSK::Operation& OperationTransformer::operations(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationTransformer.operations)
  return _internal_operations(index);
}
inline ::TSK::Operation* OperationTransformer::_internal_add_operations() {
  return operations_.Add();
}
inline ::TSK::Operation* OperationTransformer::add_operations() {
  // @@protoc_insertion_point(field_add:TSK.OperationTransformer.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >&
OperationTransformer::operations() const {
  // @@protoc_insertion_point(field_list:TSK.OperationTransformer.operations)
  return operations_;
}

// -------------------------------------------------------------------

// TransformerEntry

// required uint64 sequence = 1;
inline bool TransformerEntry::_internal_has_sequence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransformerEntry::has_sequence() const {
  return _internal_has_sequence();
}
inline void TransformerEntry::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransformerEntry::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransformerEntry::sequence() const {
  // @@protoc_insertion_point(field_get:TSK.TransformerEntry.sequence)
  return _internal_sequence();
}
inline void TransformerEntry::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sequence_ = value;
}
inline void TransformerEntry::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.TransformerEntry.sequence)
}

// required double creation_time = 2;
inline bool TransformerEntry::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransformerEntry::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void TransformerEntry::clear_creation_time() {
  creation_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TransformerEntry::_internal_creation_time() const {
  return creation_time_;
}
inline double TransformerEntry::creation_time() const {
  // @@protoc_insertion_point(field_get:TSK.TransformerEntry.creation_time)
  return _internal_creation_time();
}
inline void TransformerEntry::_internal_set_creation_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  creation_time_ = value;
}
inline void TransformerEntry::set_creation_time(double value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:TSK.TransformerEntry.creation_time)
}

// required .TSK.OperationTransformer transformer = 3;
inline bool TransformerEntry::_internal_has_transformer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || transformer_ != nullptr);
  return value;
}
inline bool TransformerEntry::has_transformer() const {
  return _internal_has_transformer();
}
inline void TransformerEntry::clear_transformer() {
  if (transformer_ != nullptr) transformer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::OperationTransformer& TransformerEntry::_internal_transformer() const {
  const ::TSK::OperationTransformer* p = transformer_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::OperationTransformer&>(
      ::TSK::_OperationTransformer_default_instance_);
}
inline const ::TSK::OperationTransformer& TransformerEntry::transformer() const {
  // @@protoc_insertion_point(field_get:TSK.TransformerEntry.transformer)
  return _internal_transformer();
}
inline void TransformerEntry::unsafe_arena_set_allocated_transformer(
    ::TSK::OperationTransformer* transformer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformer_);
  }
  transformer_ = transformer;
  if (transformer) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.TransformerEntry.transformer)
}
inline ::TSK::OperationTransformer* TransformerEntry::release_transformer() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::OperationTransformer* temp = transformer_;
  transformer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::OperationTransformer* TransformerEntry::unsafe_arena_release_transformer() {
  // @@protoc_insertion_point(field_release:TSK.TransformerEntry.transformer)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::OperationTransformer* temp = transformer_;
  transformer_ = nullptr;
  return temp;
}
inline ::TSK::OperationTransformer* TransformerEntry::_internal_mutable_transformer() {
  _has_bits_[0] |= 0x00000001u;
  if (transformer_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::OperationTransformer>(GetArena());
    transformer_ = p;
  }
  return transformer_;
}
inline ::TSK::OperationTransformer* TransformerEntry::mutable_transformer() {
  // @@protoc_insertion_point(field_mutable:TSK.TransformerEntry.transformer)
  return _internal_mutable_transformer();
}
inline void TransformerEntry::set_allocated_transformer(::TSK::OperationTransformer* transformer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transformer_;
  }
  if (transformer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transformer);
    if (message_arena != submessage_arena) {
      transformer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transformer_ = transformer;
  // @@protoc_insertion_point(field_set_allocated:TSK.TransformerEntry.transformer)
}

// -------------------------------------------------------------------

// OutgoingCommandQueueItem

// optional .TSP.Reference command = 1;
inline bool OutgoingCommandQueueItem::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || command_ != nullptr);
  return value;
}
inline bool OutgoingCommandQueueItem::has_command() const {
  return _internal_has_command();
}
inline const ::TSP::Reference& OutgoingCommandQueueItem::_internal_command() const {
  const ::TSP::Reference* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& OutgoingCommandQueueItem::command() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItem.command)
  return _internal_command();
}
inline void OutgoingCommandQueueItem::unsafe_arena_set_allocated_command(
    ::TSP::Reference* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OutgoingCommandQueueItem.command)
}
inline ::TSP::Reference* OutgoingCommandQueueItem::release_command() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* OutgoingCommandQueueItem::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueueItem.command)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* OutgoingCommandQueueItem::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000002u;
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::TSP::Reference* OutgoingCommandQueueItem::mutable_command() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItem.command)
  return _internal_mutable_command();
}
inline void OutgoingCommandQueueItem::set_allocated_command(::TSP::Reference* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueueItem.command)
}

// optional string serialized_json_without_data_base64_encoded_string = 2;
inline bool OutgoingCommandQueueItem::_internal_has_serialized_json_without_data_base64_encoded_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutgoingCommandQueueItem::has_serialized_json_without_data_base64_encoded_string() const {
  return _internal_has_serialized_json_without_data_base64_encoded_string();
}
inline void OutgoingCommandQueueItem::clear_serialized_json_without_data_base64_encoded_string() {
  serialized_json_without_data_base64_encoded_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutgoingCommandQueueItem::serialized_json_without_data_base64_encoded_string() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string)
  return _internal_serialized_json_without_data_base64_encoded_string();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void OutgoingCommandQueueItem::set_serialized_json_without_data_base64_encoded_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serialized_json_without_data_base64_encoded_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string)
}
inline std::string* OutgoingCommandQueueItem::mutable_serialized_json_without_data_base64_encoded_string() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string)
  return _internal_mutable_serialized_json_without_data_base64_encoded_string();
}
inline const std::string& OutgoingCommandQueueItem::_internal_serialized_json_without_data_base64_encoded_string() const {
  return serialized_json_without_data_base64_encoded_string_.Get();
}
inline void OutgoingCommandQueueItem::_internal_set_serialized_json_without_data_base64_encoded_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_json_without_data_base64_encoded_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* OutgoingCommandQueueItem::_internal_mutable_serialized_json_without_data_base64_encoded_string() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_json_without_data_base64_encoded_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutgoingCommandQueueItem::release_serialized_json_without_data_base64_encoded_string() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string)
  if (!_internal_has_serialized_json_without_data_base64_encoded_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serialized_json_without_data_base64_encoded_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutgoingCommandQueueItem::set_allocated_serialized_json_without_data_base64_encoded_string(std::string* serialized_json_without_data_base64_encoded_string) {
  if (serialized_json_without_data_base64_encoded_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_json_without_data_base64_encoded_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_json_without_data_base64_encoded_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_string)
}

// optional .TSP.DataReference serialized_json_without_data_base64_encoded_data = 4;
inline bool OutgoingCommandQueueItem::_internal_has_serialized_json_without_data_base64_encoded_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || serialized_json_without_data_base64_encoded_data_ != nullptr);
  return value;
}
inline bool OutgoingCommandQueueItem::has_serialized_json_without_data_base64_encoded_data() const {
  return _internal_has_serialized_json_without_data_base64_encoded_data();
}
inline const ::TSP::DataReference& OutgoingCommandQueueItem::_internal_serialized_json_without_data_base64_encoded_data() const {
  const ::TSP::DataReference* p = serialized_json_without_data_base64_encoded_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& OutgoingCommandQueueItem::serialized_json_without_data_base64_encoded_data() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_data)
  return _internal_serialized_json_without_data_base64_encoded_data();
}
inline void OutgoingCommandQueueItem::unsafe_arena_set_allocated_serialized_json_without_data_base64_encoded_data(
    ::TSP::DataReference* serialized_json_without_data_base64_encoded_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serialized_json_without_data_base64_encoded_data_);
  }
  serialized_json_without_data_base64_encoded_data_ = serialized_json_without_data_base64_encoded_data;
  if (serialized_json_without_data_base64_encoded_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_data)
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::release_serialized_json_without_data_base64_encoded_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = serialized_json_without_data_base64_encoded_data_;
  serialized_json_without_data_base64_encoded_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::unsafe_arena_release_serialized_json_without_data_base64_encoded_data() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_data)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = serialized_json_without_data_base64_encoded_data_;
  serialized_json_without_data_base64_encoded_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::_internal_mutable_serialized_json_without_data_base64_encoded_data() {
  _has_bits_[0] |= 0x00000004u;
  if (serialized_json_without_data_base64_encoded_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    serialized_json_without_data_base64_encoded_data_ = p;
  }
  return serialized_json_without_data_base64_encoded_data_;
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::mutable_serialized_json_without_data_base64_encoded_data() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_data)
  return _internal_mutable_serialized_json_without_data_base64_encoded_data();
}
inline void OutgoingCommandQueueItem::set_allocated_serialized_json_without_data_base64_encoded_data(::TSP::DataReference* serialized_json_without_data_base64_encoded_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(serialized_json_without_data_base64_encoded_data_);
  }
  if (serialized_json_without_data_base64_encoded_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serialized_json_without_data_base64_encoded_data)->GetArena();
    if (message_arena != submessage_arena) {
      serialized_json_without_data_base64_encoded_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serialized_json_without_data_base64_encoded_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  serialized_json_without_data_base64_encoded_data_ = serialized_json_without_data_base64_encoded_data;
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_data)
}

// repeated .TSK.OutgoingCommandQueueItemUUIDToDataMapEntry uuid_to_data_map_entries = 3;
inline int OutgoingCommandQueueItem::_internal_uuid_to_data_map_entries_size() const {
  return uuid_to_data_map_entries_.size();
}
inline int OutgoingCommandQueueItem::uuid_to_data_map_entries_size() const {
  return _internal_uuid_to_data_map_entries_size();
}
inline void OutgoingCommandQueueItem::clear_uuid_to_data_map_entries() {
  uuid_to_data_map_entries_.Clear();
}
inline ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* OutgoingCommandQueueItem::mutable_uuid_to_data_map_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItem.uuid_to_data_map_entries)
  return uuid_to_data_map_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >*
OutgoingCommandQueueItem::mutable_uuid_to_data_map_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OutgoingCommandQueueItem.uuid_to_data_map_entries)
  return &uuid_to_data_map_entries_;
}
inline const ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry& OutgoingCommandQueueItem::_internal_uuid_to_data_map_entries(int index) const {
  return uuid_to_data_map_entries_.Get(index);
}
inline const ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry& OutgoingCommandQueueItem::uuid_to_data_map_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItem.uuid_to_data_map_entries)
  return _internal_uuid_to_data_map_entries(index);
}
inline ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* OutgoingCommandQueueItem::_internal_add_uuid_to_data_map_entries() {
  return uuid_to_data_map_entries_.Add();
}
inline ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry* OutgoingCommandQueueItem::add_uuid_to_data_map_entries() {
  // @@protoc_insertion_point(field_add:TSK.OutgoingCommandQueueItem.uuid_to_data_map_entries)
  return _internal_add_uuid_to_data_map_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OutgoingCommandQueueItemUUIDToDataMapEntry >&
OutgoingCommandQueueItem::uuid_to_data_map_entries() const {
  // @@protoc_insertion_point(field_list:TSK.OutgoingCommandQueueItem.uuid_to_data_map_entries)
  return uuid_to_data_map_entries_;
}

// repeated .TSP.DataReference large_data_list = 5;
inline int OutgoingCommandQueueItem::_internal_large_data_list_size() const {
  return large_data_list_.size();
}
inline int OutgoingCommandQueueItem::large_data_list_size() const {
  return _internal_large_data_list_size();
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::mutable_large_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItem.large_data_list)
  return large_data_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
OutgoingCommandQueueItem::mutable_large_data_list() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OutgoingCommandQueueItem.large_data_list)
  return &large_data_list_;
}
inline const ::TSP::DataReference& OutgoingCommandQueueItem::_internal_large_data_list(int index) const {
  return large_data_list_.Get(index);
}
inline const ::TSP::DataReference& OutgoingCommandQueueItem::large_data_list(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItem.large_data_list)
  return _internal_large_data_list(index);
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::_internal_add_large_data_list() {
  return large_data_list_.Add();
}
inline ::TSP::DataReference* OutgoingCommandQueueItem::add_large_data_list() {
  // @@protoc_insertion_point(field_add:TSK.OutgoingCommandQueueItem.large_data_list)
  return _internal_add_large_data_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
OutgoingCommandQueueItem::large_data_list() const {
  // @@protoc_insertion_point(field_list:TSK.OutgoingCommandQueueItem.large_data_list)
  return large_data_list_;
}

// -------------------------------------------------------------------

// OutgoingCommandQueueItemUUIDToDataMapEntry

// required .TSP.UUID uuid = 1;
inline bool OutgoingCommandQueueItemUUIDToDataMapEntry::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || uuid_ != nullptr);
  return value;
}
inline bool OutgoingCommandQueueItemUUIDToDataMapEntry::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& OutgoingCommandQueueItemUUIDToDataMapEntry::_internal_uuid() const {
  const ::TSP::UUID* p = uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& OutgoingCommandQueueItemUUIDToDataMapEntry::uuid() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.uuid)
  return _internal_uuid();
}
inline void OutgoingCommandQueueItemUUIDToDataMapEntry::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  uuid_ = uuid;
  if (uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.uuid)
}
inline ::TSP::UUID* OutgoingCommandQueueItemUUIDToDataMapEntry::release_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* OutgoingCommandQueueItemUUIDToDataMapEntry::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = uuid_;
  uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* OutgoingCommandQueueItemUUIDToDataMapEntry::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    uuid_ = p;
  }
  return uuid_;
}
inline ::TSP::UUID* OutgoingCommandQueueItemUUIDToDataMapEntry::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.uuid)
  return _internal_mutable_uuid();
}
inline void OutgoingCommandQueueItemUUIDToDataMapEntry::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid)->GetArena();
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.uuid)
}

// required .TSP.DataReference data = 2;
inline bool OutgoingCommandQueueItemUUIDToDataMapEntry::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool OutgoingCommandQueueItemUUIDToDataMapEntry::has_data() const {
  return _internal_has_data();
}
inline const ::TSP::DataReference& OutgoingCommandQueueItemUUIDToDataMapEntry::_internal_data() const {
  const ::TSP::DataReference* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& OutgoingCommandQueueItemUUIDToDataMapEntry::data() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.data)
  return _internal_data();
}
inline void OutgoingCommandQueueItemUUIDToDataMapEntry::unsafe_arena_set_allocated_data(
    ::TSP::DataReference* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.data)
}
inline ::TSP::DataReference* OutgoingCommandQueueItemUUIDToDataMapEntry::release_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* OutgoingCommandQueueItemUUIDToDataMapEntry::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.data)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* OutgoingCommandQueueItemUUIDToDataMapEntry::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::TSP::DataReference* OutgoingCommandQueueItemUUIDToDataMapEntry::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.data)
  return _internal_mutable_data();
}
inline void OutgoingCommandQueueItemUUIDToDataMapEntry::set_allocated_data(::TSP::DataReference* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.data)
}

// -------------------------------------------------------------------

// CollaborationDocumentSessionState_AcknowledgementObserverEntry

// required .TSP.UUID command_identifier = 1;
inline bool CollaborationDocumentSessionState_AcknowledgementObserverEntry::_internal_has_command_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || command_identifier_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState_AcknowledgementObserverEntry::has_command_identifier() const {
  return _internal_has_command_identifier();
}
inline const ::TSP::UUID& CollaborationDocumentSessionState_AcknowledgementObserverEntry::_internal_command_identifier() const {
  const ::TSP::UUID* p = command_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaborationDocumentSessionState_AcknowledgementObserverEntry::command_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.command_identifier)
  return _internal_command_identifier();
}
inline void CollaborationDocumentSessionState_AcknowledgementObserverEntry::unsafe_arena_set_allocated_command_identifier(
    ::TSP::UUID* command_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_identifier_);
  }
  command_identifier_ = command_identifier;
  if (command_identifier) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.command_identifier)
}
inline ::TSP::UUID* CollaborationDocumentSessionState_AcknowledgementObserverEntry::release_command_identifier() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = command_identifier_;
  command_identifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState_AcknowledgementObserverEntry::unsafe_arena_release_command_identifier() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.command_identifier)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = command_identifier_;
  command_identifier_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState_AcknowledgementObserverEntry::_internal_mutable_command_identifier() {
  _has_bits_[0] |= 0x00000001u;
  if (command_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    command_identifier_ = p;
  }
  return command_identifier_;
}
inline ::TSP::UUID* CollaborationDocumentSessionState_AcknowledgementObserverEntry::mutable_command_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.command_identifier)
  return _internal_mutable_command_identifier();
}
inline void CollaborationDocumentSessionState_AcknowledgementObserverEntry::set_allocated_command_identifier(::TSP::UUID* command_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_identifier_);
  }
  if (command_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      command_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_identifier_ = command_identifier;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.command_identifier)
}

// repeated .TSP.Reference acknowledgement_observers = 2;
inline int CollaborationDocumentSessionState_AcknowledgementObserverEntry::_internal_acknowledgement_observers_size() const {
  return acknowledgement_observers_.size();
}
inline int CollaborationDocumentSessionState_AcknowledgementObserverEntry::acknowledgement_observers_size() const {
  return _internal_acknowledgement_observers_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState_AcknowledgementObserverEntry::mutable_acknowledgement_observers(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.acknowledgement_observers)
  return acknowledgement_observers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState_AcknowledgementObserverEntry::mutable_acknowledgement_observers() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.acknowledgement_observers)
  return &acknowledgement_observers_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState_AcknowledgementObserverEntry::_internal_acknowledgement_observers(int index) const {
  return acknowledgement_observers_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState_AcknowledgementObserverEntry::acknowledgement_observers(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.acknowledgement_observers)
  return _internal_acknowledgement_observers(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState_AcknowledgementObserverEntry::_internal_add_acknowledgement_observers() {
  return acknowledgement_observers_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState_AcknowledgementObserverEntry::add_acknowledgement_observers() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.acknowledgement_observers)
  return _internal_add_acknowledgement_observers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState_AcknowledgementObserverEntry::acknowledgement_observers() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.acknowledgement_observers)
  return acknowledgement_observers_;
}

// -------------------------------------------------------------------

// CollaborationDocumentSessionState

// repeated string collaborator_ids = 1;
inline int CollaborationDocumentSessionState::_internal_collaborator_ids_size() const {
  return collaborator_ids_.size();
}
inline int CollaborationDocumentSessionState::collaborator_ids_size() const {
  return _internal_collaborator_ids_size();
}
inline void CollaborationDocumentSessionState::clear_collaborator_ids() {
  collaborator_ids_.Clear();
}
inline std::string* CollaborationDocumentSessionState::add_collaborator_ids() {
  // @@protoc_insertion_point(field_add_mutable:TSK.CollaborationDocumentSessionState.collaborator_ids)
  return _internal_add_collaborator_ids();
}
inline const std::string& CollaborationDocumentSessionState::_internal_collaborator_ids(int index) const {
  return collaborator_ids_.Get(index);
}
inline const std::string& CollaborationDocumentSessionState::collaborator_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.collaborator_ids)
  return _internal_collaborator_ids(index);
}
inline std::string* CollaborationDocumentSessionState::mutable_collaborator_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.collaborator_ids)
  return collaborator_ids_.Mutable(index);
}
inline void CollaborationDocumentSessionState::set_collaborator_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.CollaborationDocumentSessionState.collaborator_ids)
  collaborator_ids_.Mutable(index)->assign(value);
}
inline void CollaborationDocumentSessionState::set_collaborator_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.CollaborationDocumentSessionState.collaborator_ids)
  collaborator_ids_.Mutable(index)->assign(std::move(value));
}
inline void CollaborationDocumentSessionState::set_collaborator_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collaborator_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.CollaborationDocumentSessionState.collaborator_ids)
}
inline void CollaborationDocumentSessionState::set_collaborator_ids(int index, const char* value, size_t size) {
  collaborator_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.CollaborationDocumentSessionState.collaborator_ids)
}
inline std::string* CollaborationDocumentSessionState::_internal_add_collaborator_ids() {
  return collaborator_ids_.Add();
}
inline void CollaborationDocumentSessionState::add_collaborator_ids(const std::string& value) {
  collaborator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.collaborator_ids)
}
inline void CollaborationDocumentSessionState::add_collaborator_ids(std::string&& value) {
  collaborator_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.collaborator_ids)
}
inline void CollaborationDocumentSessionState::add_collaborator_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  collaborator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.CollaborationDocumentSessionState.collaborator_ids)
}
inline void CollaborationDocumentSessionState::add_collaborator_ids(const char* value, size_t size) {
  collaborator_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.CollaborationDocumentSessionState.collaborator_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CollaborationDocumentSessionState::collaborator_ids() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.collaborator_ids)
  return collaborator_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CollaborationDocumentSessionState::mutable_collaborator_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.collaborator_ids)
  return &collaborator_ids_;
}

// repeated .TSP.Reference rsvp_command_queue_items = 3;
inline int CollaborationDocumentSessionState::_internal_rsvp_command_queue_items_size() const {
  return rsvp_command_queue_items_.size();
}
inline int CollaborationDocumentSessionState::rsvp_command_queue_items_size() const {
  return _internal_rsvp_command_queue_items_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_rsvp_command_queue_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.rsvp_command_queue_items)
  return rsvp_command_queue_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState::mutable_rsvp_command_queue_items() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.rsvp_command_queue_items)
  return &rsvp_command_queue_items_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_rsvp_command_queue_items(int index) const {
  return rsvp_command_queue_items_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::rsvp_command_queue_items(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.rsvp_command_queue_items)
  return _internal_rsvp_command_queue_items(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_add_rsvp_command_queue_items() {
  return rsvp_command_queue_items_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::add_rsvp_command_queue_items() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.rsvp_command_queue_items)
  return _internal_add_rsvp_command_queue_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState::rsvp_command_queue_items() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.rsvp_command_queue_items)
  return rsvp_command_queue_items_;
}

// repeated .TSP.Reference collaborator_cursor_transformer_entries = 4;
inline int CollaborationDocumentSessionState::_internal_collaborator_cursor_transformer_entries_size() const {
  return collaborator_cursor_transformer_entries_.size();
}
inline int CollaborationDocumentSessionState::collaborator_cursor_transformer_entries_size() const {
  return _internal_collaborator_cursor_transformer_entries_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_collaborator_cursor_transformer_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.collaborator_cursor_transformer_entries)
  return collaborator_cursor_transformer_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState::mutable_collaborator_cursor_transformer_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.collaborator_cursor_transformer_entries)
  return &collaborator_cursor_transformer_entries_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_collaborator_cursor_transformer_entries(int index) const {
  return collaborator_cursor_transformer_entries_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::collaborator_cursor_transformer_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.collaborator_cursor_transformer_entries)
  return _internal_collaborator_cursor_transformer_entries(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_add_collaborator_cursor_transformer_entries() {
  return collaborator_cursor_transformer_entries_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::add_collaborator_cursor_transformer_entries() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.collaborator_cursor_transformer_entries)
  return _internal_add_collaborator_cursor_transformer_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState::collaborator_cursor_transformer_entries() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.collaborator_cursor_transformer_entries)
  return collaborator_cursor_transformer_entries_;
}

// repeated .TSP.Reference acknowledged_commands_pending_resume_process_diffs = 5;
inline int CollaborationDocumentSessionState::_internal_acknowledged_commands_pending_resume_process_diffs_size() const {
  return acknowledged_commands_pending_resume_process_diffs_.size();
}
inline int CollaborationDocumentSessionState::acknowledged_commands_pending_resume_process_diffs_size() const {
  return _internal_acknowledged_commands_pending_resume_process_diffs_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_acknowledged_commands_pending_resume_process_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.acknowledged_commands_pending_resume_process_diffs)
  return acknowledged_commands_pending_resume_process_diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState::mutable_acknowledged_commands_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.acknowledged_commands_pending_resume_process_diffs)
  return &acknowledged_commands_pending_resume_process_diffs_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_acknowledged_commands_pending_resume_process_diffs(int index) const {
  return acknowledged_commands_pending_resume_process_diffs_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::acknowledged_commands_pending_resume_process_diffs(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.acknowledged_commands_pending_resume_process_diffs)
  return _internal_acknowledged_commands_pending_resume_process_diffs(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_add_acknowledged_commands_pending_resume_process_diffs() {
  return acknowledged_commands_pending_resume_process_diffs_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::add_acknowledged_commands_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.acknowledged_commands_pending_resume_process_diffs)
  return _internal_add_acknowledged_commands_pending_resume_process_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState::acknowledged_commands_pending_resume_process_diffs() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.acknowledged_commands_pending_resume_process_diffs)
  return acknowledged_commands_pending_resume_process_diffs_;
}

// repeated .TSP.Reference unprocessed_commands_pending_resume_process_diffs = 6;
inline int CollaborationDocumentSessionState::_internal_unprocessed_commands_pending_resume_process_diffs_size() const {
  return unprocessed_commands_pending_resume_process_diffs_.size();
}
inline int CollaborationDocumentSessionState::unprocessed_commands_pending_resume_process_diffs_size() const {
  return _internal_unprocessed_commands_pending_resume_process_diffs_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_unprocessed_commands_pending_resume_process_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.unprocessed_commands_pending_resume_process_diffs)
  return unprocessed_commands_pending_resume_process_diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState::mutable_unprocessed_commands_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.unprocessed_commands_pending_resume_process_diffs)
  return &unprocessed_commands_pending_resume_process_diffs_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_unprocessed_commands_pending_resume_process_diffs(int index) const {
  return unprocessed_commands_pending_resume_process_diffs_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::unprocessed_commands_pending_resume_process_diffs(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.unprocessed_commands_pending_resume_process_diffs)
  return _internal_unprocessed_commands_pending_resume_process_diffs(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_add_unprocessed_commands_pending_resume_process_diffs() {
  return unprocessed_commands_pending_resume_process_diffs_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::add_unprocessed_commands_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.unprocessed_commands_pending_resume_process_diffs)
  return _internal_add_unprocessed_commands_pending_resume_process_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState::unprocessed_commands_pending_resume_process_diffs() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.unprocessed_commands_pending_resume_process_diffs)
  return unprocessed_commands_pending_resume_process_diffs_;
}

// repeated .TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry command_acknowledgement_observer_entries = 7;
inline int CollaborationDocumentSessionState::_internal_command_acknowledgement_observer_entries_size() const {
  return command_acknowledgement_observer_entries_.size();
}
inline int CollaborationDocumentSessionState::command_acknowledgement_observer_entries_size() const {
  return _internal_command_acknowledgement_observer_entries_size();
}
inline void CollaborationDocumentSessionState::clear_command_acknowledgement_observer_entries() {
  command_acknowledgement_observer_entries_.Clear();
}
inline ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* CollaborationDocumentSessionState::mutable_command_acknowledgement_observer_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.command_acknowledgement_observer_entries)
  return command_acknowledgement_observer_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >*
CollaborationDocumentSessionState::mutable_command_acknowledgement_observer_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.command_acknowledgement_observer_entries)
  return &command_acknowledgement_observer_entries_;
}
inline const ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry& CollaborationDocumentSessionState::_internal_command_acknowledgement_observer_entries(int index) const {
  return command_acknowledgement_observer_entries_.Get(index);
}
inline const ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry& CollaborationDocumentSessionState::command_acknowledgement_observer_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.command_acknowledgement_observer_entries)
  return _internal_command_acknowledgement_observer_entries(index);
}
inline ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* CollaborationDocumentSessionState::_internal_add_command_acknowledgement_observer_entries() {
  return command_acknowledgement_observer_entries_.Add();
}
inline ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry* CollaborationDocumentSessionState::add_command_acknowledgement_observer_entries() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.command_acknowledgement_observer_entries)
  return _internal_add_command_acknowledgement_observer_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::CollaborationDocumentSessionState_AcknowledgementObserverEntry >&
CollaborationDocumentSessionState::command_acknowledgement_observer_entries() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.command_acknowledgement_observer_entries)
  return command_acknowledgement_observer_entries_;
}

// repeated .TSP.Reference transformer_from_unprocessed_command_operations_entries = 8;
inline int CollaborationDocumentSessionState::_internal_transformer_from_unprocessed_command_operations_entries_size() const {
  return transformer_from_unprocessed_command_operations_entries_.size();
}
inline int CollaborationDocumentSessionState::transformer_from_unprocessed_command_operations_entries_size() const {
  return _internal_transformer_from_unprocessed_command_operations_entries_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_transformer_from_unprocessed_command_operations_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.transformer_from_unprocessed_command_operations_entries)
  return transformer_from_unprocessed_command_operations_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState::mutable_transformer_from_unprocessed_command_operations_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.transformer_from_unprocessed_command_operations_entries)
  return &transformer_from_unprocessed_command_operations_entries_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_transformer_from_unprocessed_command_operations_entries(int index) const {
  return transformer_from_unprocessed_command_operations_entries_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::transformer_from_unprocessed_command_operations_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.transformer_from_unprocessed_command_operations_entries)
  return _internal_transformer_from_unprocessed_command_operations_entries(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_add_transformer_from_unprocessed_command_operations_entries() {
  return transformer_from_unprocessed_command_operations_entries_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::add_transformer_from_unprocessed_command_operations_entries() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.transformer_from_unprocessed_command_operations_entries)
  return _internal_add_transformer_from_unprocessed_command_operations_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState::transformer_from_unprocessed_command_operations_entries() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.transformer_from_unprocessed_command_operations_entries)
  return transformer_from_unprocessed_command_operations_entries_;
}

// optional int32 mailbox_request_document_revision_sequence = 10;
inline bool CollaborationDocumentSessionState::_internal_has_mailbox_request_document_revision_sequence() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CollaborationDocumentSessionState::has_mailbox_request_document_revision_sequence() const {
  return _internal_has_mailbox_request_document_revision_sequence();
}
inline void CollaborationDocumentSessionState::clear_mailbox_request_document_revision_sequence() {
  mailbox_request_document_revision_sequence_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollaborationDocumentSessionState::_internal_mailbox_request_document_revision_sequence() const {
  return mailbox_request_document_revision_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollaborationDocumentSessionState::mailbox_request_document_revision_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_sequence)
  return _internal_mailbox_request_document_revision_sequence();
}
inline void CollaborationDocumentSessionState::_internal_set_mailbox_request_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mailbox_request_document_revision_sequence_ = value;
}
inline void CollaborationDocumentSessionState::set_mailbox_request_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mailbox_request_document_revision_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_sequence)
}

// optional .TSP.UUID mailbox_request_document_revision_identifier = 11;
inline bool CollaborationDocumentSessionState::_internal_has_mailbox_request_document_revision_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mailbox_request_document_revision_identifier_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState::has_mailbox_request_document_revision_identifier() const {
  return _internal_has_mailbox_request_document_revision_identifier();
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::_internal_mailbox_request_document_revision_identifier() const {
  const ::TSP::UUID* p = mailbox_request_document_revision_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::mailbox_request_document_revision_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_identifier)
  return _internal_mailbox_request_document_revision_identifier();
}
inline void CollaborationDocumentSessionState::unsafe_arena_set_allocated_mailbox_request_document_revision_identifier(
    ::TSP::UUID* mailbox_request_document_revision_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mailbox_request_document_revision_identifier_);
  }
  mailbox_request_document_revision_identifier_ = mailbox_request_document_revision_identifier;
  if (mailbox_request_document_revision_identifier) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_identifier)
}
inline ::TSP::UUID* CollaborationDocumentSessionState::release_mailbox_request_document_revision_identifier() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = mailbox_request_document_revision_identifier_;
  mailbox_request_document_revision_identifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::unsafe_arena_release_mailbox_request_document_revision_identifier() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_identifier)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = mailbox_request_document_revision_identifier_;
  mailbox_request_document_revision_identifier_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::_internal_mutable_mailbox_request_document_revision_identifier() {
  _has_bits_[0] |= 0x00000001u;
  if (mailbox_request_document_revision_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    mailbox_request_document_revision_identifier_ = p;
  }
  return mailbox_request_document_revision_identifier_;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::mutable_mailbox_request_document_revision_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_identifier)
  return _internal_mutable_mailbox_request_document_revision_identifier();
}
inline void CollaborationDocumentSessionState::set_allocated_mailbox_request_document_revision_identifier(::TSP::UUID* mailbox_request_document_revision_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mailbox_request_document_revision_identifier_);
  }
  if (mailbox_request_document_revision_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mailbox_request_document_revision_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      mailbox_request_document_revision_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mailbox_request_document_revision_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mailbox_request_document_revision_identifier_ = mailbox_request_document_revision_identifier;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_identifier)
}

// optional bool last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue = 12 [default = false];
inline bool CollaborationDocumentSessionState::_internal_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CollaborationDocumentSessionState::has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const {
  return _internal_has_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue();
}
inline void CollaborationDocumentSessionState::clear_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() {
  last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CollaborationDocumentSessionState::_internal_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const {
  return last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_;
}
inline bool CollaborationDocumentSessionState::last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue)
  return _internal_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue();
}
inline void CollaborationDocumentSessionState::_internal_set_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(bool value) {
  _has_bits_[0] |= 0x00000080u;
  last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue_ = value;
}
inline void CollaborationDocumentSessionState::set_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(bool value) {
  _internal_set_last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue(value);
  // @@protoc_insertion_point(field_set:TSK.CollaborationDocumentSessionState.last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue)
}

// optional int32 last_command_send_marker_sequence = 13;
inline bool CollaborationDocumentSessionState::_internal_has_last_command_send_marker_sequence() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CollaborationDocumentSessionState::has_last_command_send_marker_sequence() const {
  return _internal_has_last_command_send_marker_sequence();
}
inline void CollaborationDocumentSessionState::clear_last_command_send_marker_sequence() {
  last_command_send_marker_sequence_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollaborationDocumentSessionState::_internal_last_command_send_marker_sequence() const {
  return last_command_send_marker_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollaborationDocumentSessionState::last_command_send_marker_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.last_command_send_marker_sequence)
  return _internal_last_command_send_marker_sequence();
}
inline void CollaborationDocumentSessionState::_internal_set_last_command_send_marker_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  last_command_send_marker_sequence_ = value;
}
inline void CollaborationDocumentSessionState::set_last_command_send_marker_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_command_send_marker_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.CollaborationDocumentSessionState.last_command_send_marker_sequence)
}

// optional .TSP.UUID last_command_send_marker_identifier = 14;
inline bool CollaborationDocumentSessionState::_internal_has_last_command_send_marker_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || last_command_send_marker_identifier_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState::has_last_command_send_marker_identifier() const {
  return _internal_has_last_command_send_marker_identifier();
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::_internal_last_command_send_marker_identifier() const {
  const ::TSP::UUID* p = last_command_send_marker_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::last_command_send_marker_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.last_command_send_marker_identifier)
  return _internal_last_command_send_marker_identifier();
}
inline void CollaborationDocumentSessionState::unsafe_arena_set_allocated_last_command_send_marker_identifier(
    ::TSP::UUID* last_command_send_marker_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_command_send_marker_identifier_);
  }
  last_command_send_marker_identifier_ = last_command_send_marker_identifier;
  if (last_command_send_marker_identifier) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.last_command_send_marker_identifier)
}
inline ::TSP::UUID* CollaborationDocumentSessionState::release_last_command_send_marker_identifier() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = last_command_send_marker_identifier_;
  last_command_send_marker_identifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::unsafe_arena_release_last_command_send_marker_identifier() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.last_command_send_marker_identifier)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = last_command_send_marker_identifier_;
  last_command_send_marker_identifier_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::_internal_mutable_last_command_send_marker_identifier() {
  _has_bits_[0] |= 0x00000002u;
  if (last_command_send_marker_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    last_command_send_marker_identifier_ = p;
  }
  return last_command_send_marker_identifier_;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::mutable_last_command_send_marker_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.last_command_send_marker_identifier)
  return _internal_mutable_last_command_send_marker_identifier();
}
inline void CollaborationDocumentSessionState::set_allocated_last_command_send_marker_identifier(::TSP::UUID* last_command_send_marker_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_command_send_marker_identifier_);
  }
  if (last_command_send_marker_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_command_send_marker_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      last_command_send_marker_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_command_send_marker_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_command_send_marker_identifier_ = last_command_send_marker_identifier;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.last_command_send_marker_identifier)
}

// repeated .TSP.Reference skipped_acknowledged_commands_pending_resume_process_diffs = 15;
inline int CollaborationDocumentSessionState::_internal_skipped_acknowledged_commands_pending_resume_process_diffs_size() const {
  return skipped_acknowledged_commands_pending_resume_process_diffs_.size();
}
inline int CollaborationDocumentSessionState::skipped_acknowledged_commands_pending_resume_process_diffs_size() const {
  return _internal_skipped_acknowledged_commands_pending_resume_process_diffs_size();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_skipped_acknowledged_commands_pending_resume_process_diffs(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.skipped_acknowledged_commands_pending_resume_process_diffs)
  return skipped_acknowledged_commands_pending_resume_process_diffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
CollaborationDocumentSessionState::mutable_skipped_acknowledged_commands_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_mutable_list:TSK.CollaborationDocumentSessionState.skipped_acknowledged_commands_pending_resume_process_diffs)
  return &skipped_acknowledged_commands_pending_resume_process_diffs_;
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_skipped_acknowledged_commands_pending_resume_process_diffs(int index) const {
  return skipped_acknowledged_commands_pending_resume_process_diffs_.Get(index);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::skipped_acknowledged_commands_pending_resume_process_diffs(int index) const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.skipped_acknowledged_commands_pending_resume_process_diffs)
  return _internal_skipped_acknowledged_commands_pending_resume_process_diffs(index);
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_add_skipped_acknowledged_commands_pending_resume_process_diffs() {
  return skipped_acknowledged_commands_pending_resume_process_diffs_.Add();
}
inline ::TSP::Reference* CollaborationDocumentSessionState::add_skipped_acknowledged_commands_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_add:TSK.CollaborationDocumentSessionState.skipped_acknowledged_commands_pending_resume_process_diffs)
  return _internal_add_skipped_acknowledged_commands_pending_resume_process_diffs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
CollaborationDocumentSessionState::skipped_acknowledged_commands_pending_resume_process_diffs() const {
  // @@protoc_insertion_point(field_list:TSK.CollaborationDocumentSessionState.skipped_acknowledged_commands_pending_resume_process_diffs)
  return skipped_acknowledged_commands_pending_resume_process_diffs_;
}

// optional .TSP.UUID last_too_old_command_identifier = 16;
inline bool CollaborationDocumentSessionState::_internal_has_last_too_old_command_identifier() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || last_too_old_command_identifier_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState::has_last_too_old_command_identifier() const {
  return _internal_has_last_too_old_command_identifier();
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::_internal_last_too_old_command_identifier() const {
  const ::TSP::UUID* p = last_too_old_command_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::last_too_old_command_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.last_too_old_command_identifier)
  return _internal_last_too_old_command_identifier();
}
inline void CollaborationDocumentSessionState::unsafe_arena_set_allocated_last_too_old_command_identifier(
    ::TSP::UUID* last_too_old_command_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_too_old_command_identifier_);
  }
  last_too_old_command_identifier_ = last_too_old_command_identifier;
  if (last_too_old_command_identifier) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.last_too_old_command_identifier)
}
inline ::TSP::UUID* CollaborationDocumentSessionState::release_last_too_old_command_identifier() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = last_too_old_command_identifier_;
  last_too_old_command_identifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::unsafe_arena_release_last_too_old_command_identifier() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.last_too_old_command_identifier)
  _has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = last_too_old_command_identifier_;
  last_too_old_command_identifier_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::_internal_mutable_last_too_old_command_identifier() {
  _has_bits_[0] |= 0x00000004u;
  if (last_too_old_command_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    last_too_old_command_identifier_ = p;
  }
  return last_too_old_command_identifier_;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::mutable_last_too_old_command_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.last_too_old_command_identifier)
  return _internal_mutable_last_too_old_command_identifier();
}
inline void CollaborationDocumentSessionState::set_allocated_last_too_old_command_identifier(::TSP::UUID* last_too_old_command_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_too_old_command_identifier_);
  }
  if (last_too_old_command_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_too_old_command_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      last_too_old_command_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_too_old_command_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_too_old_command_identifier_ = last_too_old_command_identifier;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.last_too_old_command_identifier)
}

// optional .TSP.Reference unprocessed_operation_entries_pending_resume_process_diffs = 17;
inline bool CollaborationDocumentSessionState::_internal_has_unprocessed_operation_entries_pending_resume_process_diffs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || unprocessed_operation_entries_pending_resume_process_diffs_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState::has_unprocessed_operation_entries_pending_resume_process_diffs() const {
  return _internal_has_unprocessed_operation_entries_pending_resume_process_diffs();
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_unprocessed_operation_entries_pending_resume_process_diffs() const {
  const ::TSP::Reference* p = unprocessed_operation_entries_pending_resume_process_diffs_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::unprocessed_operation_entries_pending_resume_process_diffs() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.unprocessed_operation_entries_pending_resume_process_diffs)
  return _internal_unprocessed_operation_entries_pending_resume_process_diffs();
}
inline void CollaborationDocumentSessionState::unsafe_arena_set_allocated_unprocessed_operation_entries_pending_resume_process_diffs(
    ::TSP::Reference* unprocessed_operation_entries_pending_resume_process_diffs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unprocessed_operation_entries_pending_resume_process_diffs_);
  }
  unprocessed_operation_entries_pending_resume_process_diffs_ = unprocessed_operation_entries_pending_resume_process_diffs;
  if (unprocessed_operation_entries_pending_resume_process_diffs) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.unprocessed_operation_entries_pending_resume_process_diffs)
}
inline ::TSP::Reference* CollaborationDocumentSessionState::release_unprocessed_operation_entries_pending_resume_process_diffs() {
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = unprocessed_operation_entries_pending_resume_process_diffs_;
  unprocessed_operation_entries_pending_resume_process_diffs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationDocumentSessionState::unsafe_arena_release_unprocessed_operation_entries_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.unprocessed_operation_entries_pending_resume_process_diffs)
  _has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = unprocessed_operation_entries_pending_resume_process_diffs_;
  unprocessed_operation_entries_pending_resume_process_diffs_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs() {
  _has_bits_[0] |= 0x00000008u;
  if (unprocessed_operation_entries_pending_resume_process_diffs_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    unprocessed_operation_entries_pending_resume_process_diffs_ = p;
  }
  return unprocessed_operation_entries_pending_resume_process_diffs_;
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_unprocessed_operation_entries_pending_resume_process_diffs() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.unprocessed_operation_entries_pending_resume_process_diffs)
  return _internal_mutable_unprocessed_operation_entries_pending_resume_process_diffs();
}
inline void CollaborationDocumentSessionState::set_allocated_unprocessed_operation_entries_pending_resume_process_diffs(::TSP::Reference* unprocessed_operation_entries_pending_resume_process_diffs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unprocessed_operation_entries_pending_resume_process_diffs_);
  }
  if (unprocessed_operation_entries_pending_resume_process_diffs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unprocessed_operation_entries_pending_resume_process_diffs)->GetArena();
    if (message_arena != submessage_arena) {
      unprocessed_operation_entries_pending_resume_process_diffs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unprocessed_operation_entries_pending_resume_process_diffs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  unprocessed_operation_entries_pending_resume_process_diffs_ = unprocessed_operation_entries_pending_resume_process_diffs;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.unprocessed_operation_entries_pending_resume_process_diffs)
}

// optional .TSP.Reference send_pending_command_queue = 18;
inline bool CollaborationDocumentSessionState::_internal_has_send_pending_command_queue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || send_pending_command_queue_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState::has_send_pending_command_queue() const {
  return _internal_has_send_pending_command_queue();
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::_internal_send_pending_command_queue() const {
  const ::TSP::Reference* p = send_pending_command_queue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CollaborationDocumentSessionState::send_pending_command_queue() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.send_pending_command_queue)
  return _internal_send_pending_command_queue();
}
inline void CollaborationDocumentSessionState::unsafe_arena_set_allocated_send_pending_command_queue(
    ::TSP::Reference* send_pending_command_queue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_pending_command_queue_);
  }
  send_pending_command_queue_ = send_pending_command_queue;
  if (send_pending_command_queue) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.send_pending_command_queue)
}
inline ::TSP::Reference* CollaborationDocumentSessionState::release_send_pending_command_queue() {
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = send_pending_command_queue_;
  send_pending_command_queue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* CollaborationDocumentSessionState::unsafe_arena_release_send_pending_command_queue() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.send_pending_command_queue)
  _has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = send_pending_command_queue_;
  send_pending_command_queue_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CollaborationDocumentSessionState::_internal_mutable_send_pending_command_queue() {
  _has_bits_[0] |= 0x00000010u;
  if (send_pending_command_queue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    send_pending_command_queue_ = p;
  }
  return send_pending_command_queue_;
}
inline ::TSP::Reference* CollaborationDocumentSessionState::mutable_send_pending_command_queue() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.send_pending_command_queue)
  return _internal_mutable_send_pending_command_queue();
}
inline void CollaborationDocumentSessionState::set_allocated_send_pending_command_queue(::TSP::Reference* send_pending_command_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_pending_command_queue_);
  }
  if (send_pending_command_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_pending_command_queue)->GetArena();
    if (message_arena != submessage_arena) {
      send_pending_command_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_pending_command_queue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  send_pending_command_queue_ = send_pending_command_queue;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.send_pending_command_queue)
}

// optional uint64 count_of_send_pending_command_queue_items_moved_from_rsvp_queue = 19 [default = 0];
inline bool CollaborationDocumentSessionState::_internal_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CollaborationDocumentSessionState::has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const {
  return _internal_has_count_of_send_pending_command_queue_items_moved_from_rsvp_queue();
}
inline void CollaborationDocumentSessionState::clear_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() {
  count_of_send_pending_command_queue_items_moved_from_rsvp_queue_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollaborationDocumentSessionState::_internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const {
  return count_of_send_pending_command_queue_items_moved_from_rsvp_queue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CollaborationDocumentSessionState::count_of_send_pending_command_queue_items_moved_from_rsvp_queue() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.count_of_send_pending_command_queue_items_moved_from_rsvp_queue)
  return _internal_count_of_send_pending_command_queue_items_moved_from_rsvp_queue();
}
inline void CollaborationDocumentSessionState::_internal_set_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  count_of_send_pending_command_queue_items_moved_from_rsvp_queue_ = value;
}
inline void CollaborationDocumentSessionState::set_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count_of_send_pending_command_queue_items_moved_from_rsvp_queue(value);
  // @@protoc_insertion_point(field_set:TSK.CollaborationDocumentSessionState.count_of_send_pending_command_queue_items_moved_from_rsvp_queue)
}

// optional .TSP.UUID last_enqueued_document_load_command_identifier = 20;
inline bool CollaborationDocumentSessionState::_internal_has_last_enqueued_document_load_command_identifier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || last_enqueued_document_load_command_identifier_ != nullptr);
  return value;
}
inline bool CollaborationDocumentSessionState::has_last_enqueued_document_load_command_identifier() const {
  return _internal_has_last_enqueued_document_load_command_identifier();
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::_internal_last_enqueued_document_load_command_identifier() const {
  const ::TSP::UUID* p = last_enqueued_document_load_command_identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaborationDocumentSessionState::last_enqueued_document_load_command_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.CollaborationDocumentSessionState.last_enqueued_document_load_command_identifier)
  return _internal_last_enqueued_document_load_command_identifier();
}
inline void CollaborationDocumentSessionState::unsafe_arena_set_allocated_last_enqueued_document_load_command_identifier(
    ::TSP::UUID* last_enqueued_document_load_command_identifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_enqueued_document_load_command_identifier_);
  }
  last_enqueued_document_load_command_identifier_ = last_enqueued_document_load_command_identifier;
  if (last_enqueued_document_load_command_identifier) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CollaborationDocumentSessionState.last_enqueued_document_load_command_identifier)
}
inline ::TSP::UUID* CollaborationDocumentSessionState::release_last_enqueued_document_load_command_identifier() {
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = last_enqueued_document_load_command_identifier_;
  last_enqueued_document_load_command_identifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::unsafe_arena_release_last_enqueued_document_load_command_identifier() {
  // @@protoc_insertion_point(field_release:TSK.CollaborationDocumentSessionState.last_enqueued_document_load_command_identifier)
  _has_bits_[0] &= ~0x00000020u;
  ::TSP::UUID* temp = last_enqueued_document_load_command_identifier_;
  last_enqueued_document_load_command_identifier_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::_internal_mutable_last_enqueued_document_load_command_identifier() {
  _has_bits_[0] |= 0x00000020u;
  if (last_enqueued_document_load_command_identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    last_enqueued_document_load_command_identifier_ = p;
  }
  return last_enqueued_document_load_command_identifier_;
}
inline ::TSP::UUID* CollaborationDocumentSessionState::mutable_last_enqueued_document_load_command_identifier() {
  // @@protoc_insertion_point(field_mutable:TSK.CollaborationDocumentSessionState.last_enqueued_document_load_command_identifier)
  return _internal_mutable_last_enqueued_document_load_command_identifier();
}
inline void CollaborationDocumentSessionState::set_allocated_last_enqueued_document_load_command_identifier(::TSP::UUID* last_enqueued_document_load_command_identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_enqueued_document_load_command_identifier_);
  }
  if (last_enqueued_document_load_command_identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_enqueued_document_load_command_identifier)->GetArena();
    if (message_arena != submessage_arena) {
      last_enqueued_document_load_command_identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_enqueued_document_load_command_identifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  last_enqueued_document_load_command_identifier_ = last_enqueued_document_load_command_identifier;
  // @@protoc_insertion_point(field_set_allocated:TSK.CollaborationDocumentSessionState.last_enqueued_document_load_command_identifier)
}

// -------------------------------------------------------------------

// NativeContentDescription

// optional string app_name = 1;
inline bool NativeContentDescription::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NativeContentDescription::has_app_name() const {
  return _internal_has_app_name();
}
inline void NativeContentDescription::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NativeContentDescription::app_name() const {
  // @@protoc_insertion_point(field_get:TSK.NativeContentDescription.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NativeContentDescription::set_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.NativeContentDescription.app_name)
}
inline std::string* NativeContentDescription::mutable_app_name() {
  // @@protoc_insertion_point(field_mutable:TSK.NativeContentDescription.app_name)
  return _internal_mutable_app_name();
}
inline const std::string& NativeContentDescription::_internal_app_name() const {
  return app_name_.Get();
}
inline void NativeContentDescription::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NativeContentDescription::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000001u;
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NativeContentDescription::release_app_name() {
  // @@protoc_insertion_point(field_release:TSK.NativeContentDescription.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NativeContentDescription::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.NativeContentDescription.app_name)
}

// optional string app_version = 2;
inline bool NativeContentDescription::_internal_has_app_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NativeContentDescription::has_app_version() const {
  return _internal_has_app_version();
}
inline void NativeContentDescription::clear_app_version() {
  app_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NativeContentDescription::app_version() const {
  // @@protoc_insertion_point(field_get:TSK.NativeContentDescription.app_version)
  return _internal_app_version();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NativeContentDescription::set_app_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.NativeContentDescription.app_version)
}
inline std::string* NativeContentDescription::mutable_app_version() {
  // @@protoc_insertion_point(field_mutable:TSK.NativeContentDescription.app_version)
  return _internal_mutable_app_version();
}
inline const std::string& NativeContentDescription::_internal_app_version() const {
  return app_version_.Get();
}
inline void NativeContentDescription::_internal_set_app_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NativeContentDescription::_internal_mutable_app_version() {
  _has_bits_[0] |= 0x00000002u;
  return app_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NativeContentDescription::release_app_version() {
  // @@protoc_insertion_point(field_release:TSK.NativeContentDescription.app_version)
  if (!_internal_has_app_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return app_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NativeContentDescription::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.NativeContentDescription.app_version)
}

// optional string document_id = 3;
inline bool NativeContentDescription::_internal_has_document_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NativeContentDescription::has_document_id() const {
  return _internal_has_document_id();
}
inline void NativeContentDescription::clear_document_id() {
  document_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NativeContentDescription::document_id() const {
  // @@protoc_insertion_point(field_get:TSK.NativeContentDescription.document_id)
  return _internal_document_id();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void NativeContentDescription::set_document_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 document_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.NativeContentDescription.document_id)
}
inline std::string* NativeContentDescription::mutable_document_id() {
  // @@protoc_insertion_point(field_mutable:TSK.NativeContentDescription.document_id)
  return _internal_mutable_document_id();
}
inline const std::string& NativeContentDescription::_internal_document_id() const {
  return document_id_.Get();
}
inline void NativeContentDescription::_internal_set_document_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  document_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* NativeContentDescription::_internal_mutable_document_id() {
  _has_bits_[0] |= 0x00000004u;
  return document_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NativeContentDescription::release_document_id() {
  // @@protoc_insertion_point(field_release:TSK.NativeContentDescription.document_id)
  if (!_internal_has_document_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return document_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NativeContentDescription::set_allocated_document_id(std::string* document_id) {
  if (document_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  document_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.NativeContentDescription.document_id)
}

// repeated .TSP.Reference drawable_descriptions = 4;
inline int NativeContentDescription::_internal_drawable_descriptions_size() const {
  return drawable_descriptions_.size();
}
inline int NativeContentDescription::drawable_descriptions_size() const {
  return _internal_drawable_descriptions_size();
}
inline ::TSP::Reference* NativeContentDescription::mutable_drawable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.NativeContentDescription.drawable_descriptions)
  return drawable_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
NativeContentDescription::mutable_drawable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:TSK.NativeContentDescription.drawable_descriptions)
  return &drawable_descriptions_;
}
inline const ::TSP::Reference& NativeContentDescription::_internal_drawable_descriptions(int index) const {
  return drawable_descriptions_.Get(index);
}
inline const ::TSP::Reference& NativeContentDescription::drawable_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:TSK.NativeContentDescription.drawable_descriptions)
  return _internal_drawable_descriptions(index);
}
inline ::TSP::Reference* NativeContentDescription::_internal_add_drawable_descriptions() {
  return drawable_descriptions_.Add();
}
inline ::TSP::Reference* NativeContentDescription::add_drawable_descriptions() {
  // @@protoc_insertion_point(field_add:TSK.NativeContentDescription.drawable_descriptions)
  return _internal_add_drawable_descriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
NativeContentDescription::drawable_descriptions() const {
  // @@protoc_insertion_point(field_list:TSK.NativeContentDescription.drawable_descriptions)
  return drawable_descriptions_;
}

// -------------------------------------------------------------------

// StructuredTextImportSettings

// required .TSK.StructuredTextImportType type = 1;
inline bool StructuredTextImportSettings::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_type() const {
  return _internal_has_type();
}
inline void StructuredTextImportSettings::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSK::StructuredTextImportType StructuredTextImportSettings::_internal_type() const {
  return static_cast< ::TSK::StructuredTextImportType >(type_);
}
inline ::TSK::StructuredTextImportType StructuredTextImportSettings::type() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.type)
  return _internal_type();
}
inline void StructuredTextImportSettings::_internal_set_type(::TSK::StructuredTextImportType value) {
  assert(::TSK::StructuredTextImportType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void StructuredTextImportSettings::set_type(::TSK::StructuredTextImportType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.type)
}

// required int32 starting_row = 2;
inline bool StructuredTextImportSettings::_internal_has_starting_row() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_starting_row() const {
  return _internal_has_starting_row();
}
inline void StructuredTextImportSettings::clear_starting_row() {
  starting_row_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StructuredTextImportSettings::_internal_starting_row() const {
  return starting_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StructuredTextImportSettings::starting_row() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.starting_row)
  return _internal_starting_row();
}
inline void StructuredTextImportSettings::_internal_set_starting_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  starting_row_ = value;
}
inline void StructuredTextImportSettings::set_starting_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starting_row(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.starting_row)
}

// repeated string decimal_separators = 3;
inline int StructuredTextImportSettings::_internal_decimal_separators_size() const {
  return decimal_separators_.size();
}
inline int StructuredTextImportSettings::decimal_separators_size() const {
  return _internal_decimal_separators_size();
}
inline void StructuredTextImportSettings::clear_decimal_separators() {
  decimal_separators_.Clear();
}
inline std::string* StructuredTextImportSettings::add_decimal_separators() {
  // @@protoc_insertion_point(field_add_mutable:TSK.StructuredTextImportSettings.decimal_separators)
  return _internal_add_decimal_separators();
}
inline const std::string& StructuredTextImportSettings::_internal_decimal_separators(int index) const {
  return decimal_separators_.Get(index);
}
inline const std::string& StructuredTextImportSettings::decimal_separators(int index) const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.decimal_separators)
  return _internal_decimal_separators(index);
}
inline std::string* StructuredTextImportSettings::mutable_decimal_separators(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.StructuredTextImportSettings.decimal_separators)
  return decimal_separators_.Mutable(index);
}
inline void StructuredTextImportSettings::set_decimal_separators(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.decimal_separators)
  decimal_separators_.Mutable(index)->assign(value);
}
inline void StructuredTextImportSettings::set_decimal_separators(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.decimal_separators)
  decimal_separators_.Mutable(index)->assign(std::move(value));
}
inline void StructuredTextImportSettings::set_decimal_separators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  decimal_separators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.StructuredTextImportSettings.decimal_separators)
}
inline void StructuredTextImportSettings::set_decimal_separators(int index, const char* value, size_t size) {
  decimal_separators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.StructuredTextImportSettings.decimal_separators)
}
inline std::string* StructuredTextImportSettings::_internal_add_decimal_separators() {
  return decimal_separators_.Add();
}
inline void StructuredTextImportSettings::add_decimal_separators(const std::string& value) {
  decimal_separators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.decimal_separators)
}
inline void StructuredTextImportSettings::add_decimal_separators(std::string&& value) {
  decimal_separators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.decimal_separators)
}
inline void StructuredTextImportSettings::add_decimal_separators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  decimal_separators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.StructuredTextImportSettings.decimal_separators)
}
inline void StructuredTextImportSettings::add_decimal_separators(const char* value, size_t size) {
  decimal_separators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.StructuredTextImportSettings.decimal_separators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StructuredTextImportSettings::decimal_separators() const {
  // @@protoc_insertion_point(field_list:TSK.StructuredTextImportSettings.decimal_separators)
  return decimal_separators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StructuredTextImportSettings::mutable_decimal_separators() {
  // @@protoc_insertion_point(field_mutable_list:TSK.StructuredTextImportSettings.decimal_separators)
  return &decimal_separators_;
}

// repeated string thousands_separators = 4;
inline int StructuredTextImportSettings::_internal_thousands_separators_size() const {
  return thousands_separators_.size();
}
inline int StructuredTextImportSettings::thousands_separators_size() const {
  return _internal_thousands_separators_size();
}
inline void StructuredTextImportSettings::clear_thousands_separators() {
  thousands_separators_.Clear();
}
inline std::string* StructuredTextImportSettings::add_thousands_separators() {
  // @@protoc_insertion_point(field_add_mutable:TSK.StructuredTextImportSettings.thousands_separators)
  return _internal_add_thousands_separators();
}
inline const std::string& StructuredTextImportSettings::_internal_thousands_separators(int index) const {
  return thousands_separators_.Get(index);
}
inline const std::string& StructuredTextImportSettings::thousands_separators(int index) const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.thousands_separators)
  return _internal_thousands_separators(index);
}
inline std::string* StructuredTextImportSettings::mutable_thousands_separators(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.StructuredTextImportSettings.thousands_separators)
  return thousands_separators_.Mutable(index);
}
inline void StructuredTextImportSettings::set_thousands_separators(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.thousands_separators)
  thousands_separators_.Mutable(index)->assign(value);
}
inline void StructuredTextImportSettings::set_thousands_separators(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.thousands_separators)
  thousands_separators_.Mutable(index)->assign(std::move(value));
}
inline void StructuredTextImportSettings::set_thousands_separators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  thousands_separators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.StructuredTextImportSettings.thousands_separators)
}
inline void StructuredTextImportSettings::set_thousands_separators(int index, const char* value, size_t size) {
  thousands_separators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.StructuredTextImportSettings.thousands_separators)
}
inline std::string* StructuredTextImportSettings::_internal_add_thousands_separators() {
  return thousands_separators_.Add();
}
inline void StructuredTextImportSettings::add_thousands_separators(const std::string& value) {
  thousands_separators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.thousands_separators)
}
inline void StructuredTextImportSettings::add_thousands_separators(std::string&& value) {
  thousands_separators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.thousands_separators)
}
inline void StructuredTextImportSettings::add_thousands_separators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  thousands_separators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.StructuredTextImportSettings.thousands_separators)
}
inline void StructuredTextImportSettings::add_thousands_separators(const char* value, size_t size) {
  thousands_separators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.StructuredTextImportSettings.thousands_separators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StructuredTextImportSettings::thousands_separators() const {
  // @@protoc_insertion_point(field_list:TSK.StructuredTextImportSettings.thousands_separators)
  return thousands_separators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StructuredTextImportSettings::mutable_thousands_separators() {
  // @@protoc_insertion_point(field_mutable_list:TSK.StructuredTextImportSettings.thousands_separators)
  return &thousands_separators_;
}

// optional bool transpose_rows_and_columns = 5;
inline bool StructuredTextImportSettings::_internal_has_transpose_rows_and_columns() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_transpose_rows_and_columns() const {
  return _internal_has_transpose_rows_and_columns();
}
inline void StructuredTextImportSettings::clear_transpose_rows_and_columns() {
  transpose_rows_and_columns_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool StructuredTextImportSettings::_internal_transpose_rows_and_columns() const {
  return transpose_rows_and_columns_;
}
inline bool StructuredTextImportSettings::transpose_rows_and_columns() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.transpose_rows_and_columns)
  return _internal_transpose_rows_and_columns();
}
inline void StructuredTextImportSettings::_internal_set_transpose_rows_and_columns(bool value) {
  _has_bits_[0] |= 0x00000010u;
  transpose_rows_and_columns_ = value;
}
inline void StructuredTextImportSettings::set_transpose_rows_and_columns(bool value) {
  _internal_set_transpose_rows_and_columns(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.transpose_rows_and_columns)
}

// repeated string delimiters = 6;
inline int StructuredTextImportSettings::_internal_delimiters_size() const {
  return delimiters_.size();
}
inline int StructuredTextImportSettings::delimiters_size() const {
  return _internal_delimiters_size();
}
inline void StructuredTextImportSettings::clear_delimiters() {
  delimiters_.Clear();
}
inline std::string* StructuredTextImportSettings::add_delimiters() {
  // @@protoc_insertion_point(field_add_mutable:TSK.StructuredTextImportSettings.delimiters)
  return _internal_add_delimiters();
}
inline const std::string& StructuredTextImportSettings::_internal_delimiters(int index) const {
  return delimiters_.Get(index);
}
inline const std::string& StructuredTextImportSettings::delimiters(int index) const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.delimiters)
  return _internal_delimiters(index);
}
inline std::string* StructuredTextImportSettings::mutable_delimiters(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.StructuredTextImportSettings.delimiters)
  return delimiters_.Mutable(index);
}
inline void StructuredTextImportSettings::set_delimiters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.delimiters)
  delimiters_.Mutable(index)->assign(value);
}
inline void StructuredTextImportSettings::set_delimiters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.delimiters)
  delimiters_.Mutable(index)->assign(std::move(value));
}
inline void StructuredTextImportSettings::set_delimiters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delimiters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.StructuredTextImportSettings.delimiters)
}
inline void StructuredTextImportSettings::set_delimiters(int index, const char* value, size_t size) {
  delimiters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.StructuredTextImportSettings.delimiters)
}
inline std::string* StructuredTextImportSettings::_internal_add_delimiters() {
  return delimiters_.Add();
}
inline void StructuredTextImportSettings::add_delimiters(const std::string& value) {
  delimiters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.delimiters)
}
inline void StructuredTextImportSettings::add_delimiters(std::string&& value) {
  delimiters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.delimiters)
}
inline void StructuredTextImportSettings::add_delimiters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delimiters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.StructuredTextImportSettings.delimiters)
}
inline void StructuredTextImportSettings::add_delimiters(const char* value, size_t size) {
  delimiters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.StructuredTextImportSettings.delimiters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StructuredTextImportSettings::delimiters() const {
  // @@protoc_insertion_point(field_list:TSK.StructuredTextImportSettings.delimiters)
  return delimiters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StructuredTextImportSettings::mutable_delimiters() {
  // @@protoc_insertion_point(field_mutable_list:TSK.StructuredTextImportSettings.delimiters)
  return &delimiters_;
}

// repeated string text_qualifiers = 7;
inline int StructuredTextImportSettings::_internal_text_qualifiers_size() const {
  return text_qualifiers_.size();
}
inline int StructuredTextImportSettings::text_qualifiers_size() const {
  return _internal_text_qualifiers_size();
}
inline void StructuredTextImportSettings::clear_text_qualifiers() {
  text_qualifiers_.Clear();
}
inline std::string* StructuredTextImportSettings::add_text_qualifiers() {
  // @@protoc_insertion_point(field_add_mutable:TSK.StructuredTextImportSettings.text_qualifiers)
  return _internal_add_text_qualifiers();
}
inline const std::string& StructuredTextImportSettings::_internal_text_qualifiers(int index) const {
  return text_qualifiers_.Get(index);
}
inline const std::string& StructuredTextImportSettings::text_qualifiers(int index) const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.text_qualifiers)
  return _internal_text_qualifiers(index);
}
inline std::string* StructuredTextImportSettings::mutable_text_qualifiers(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.StructuredTextImportSettings.text_qualifiers)
  return text_qualifiers_.Mutable(index);
}
inline void StructuredTextImportSettings::set_text_qualifiers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.text_qualifiers)
  text_qualifiers_.Mutable(index)->assign(value);
}
inline void StructuredTextImportSettings::set_text_qualifiers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.text_qualifiers)
  text_qualifiers_.Mutable(index)->assign(std::move(value));
}
inline void StructuredTextImportSettings::set_text_qualifiers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_qualifiers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.StructuredTextImportSettings.text_qualifiers)
}
inline void StructuredTextImportSettings::set_text_qualifiers(int index, const char* value, size_t size) {
  text_qualifiers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.StructuredTextImportSettings.text_qualifiers)
}
inline std::string* StructuredTextImportSettings::_internal_add_text_qualifiers() {
  return text_qualifiers_.Add();
}
inline void StructuredTextImportSettings::add_text_qualifiers(const std::string& value) {
  text_qualifiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.text_qualifiers)
}
inline void StructuredTextImportSettings::add_text_qualifiers(std::string&& value) {
  text_qualifiers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.StructuredTextImportSettings.text_qualifiers)
}
inline void StructuredTextImportSettings::add_text_qualifiers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_qualifiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.StructuredTextImportSettings.text_qualifiers)
}
inline void StructuredTextImportSettings::add_text_qualifiers(const char* value, size_t size) {
  text_qualifiers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.StructuredTextImportSettings.text_qualifiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StructuredTextImportSettings::text_qualifiers() const {
  // @@protoc_insertion_point(field_list:TSK.StructuredTextImportSettings.text_qualifiers)
  return text_qualifiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StructuredTextImportSettings::mutable_text_qualifiers() {
  // @@protoc_insertion_point(field_mutable_list:TSK.StructuredTextImportSettings.text_qualifiers)
  return &text_qualifiers_;
}

// optional bool collapse_consecutive = 8;
inline bool StructuredTextImportSettings::_internal_has_collapse_consecutive() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_collapse_consecutive() const {
  return _internal_has_collapse_consecutive();
}
inline void StructuredTextImportSettings::clear_collapse_consecutive() {
  collapse_consecutive_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool StructuredTextImportSettings::_internal_collapse_consecutive() const {
  return collapse_consecutive_;
}
inline bool StructuredTextImportSettings::collapse_consecutive() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.collapse_consecutive)
  return _internal_collapse_consecutive();
}
inline void StructuredTextImportSettings::_internal_set_collapse_consecutive(bool value) {
  _has_bits_[0] |= 0x00000020u;
  collapse_consecutive_ = value;
}
inline void StructuredTextImportSettings::set_collapse_consecutive(bool value) {
  _internal_set_collapse_consecutive(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.collapse_consecutive)
}

// optional .TSP.IndexSet column_offsets = 9;
inline bool StructuredTextImportSettings::_internal_has_column_offsets() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || column_offsets_ != nullptr);
  return value;
}
inline bool StructuredTextImportSettings::has_column_offsets() const {
  return _internal_has_column_offsets();
}
inline const ::TSP::IndexSet& StructuredTextImportSettings::_internal_column_offsets() const {
  const ::TSP::IndexSet* p = column_offsets_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& StructuredTextImportSettings::column_offsets() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.column_offsets)
  return _internal_column_offsets();
}
inline void StructuredTextImportSettings::unsafe_arena_set_allocated_column_offsets(
    ::TSP::IndexSet* column_offsets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_offsets_);
  }
  column_offsets_ = column_offsets;
  if (column_offsets) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.StructuredTextImportSettings.column_offsets)
}
inline ::TSP::IndexSet* StructuredTextImportSettings::release_column_offsets() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::IndexSet* temp = column_offsets_;
  column_offsets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::IndexSet* StructuredTextImportSettings::unsafe_arena_release_column_offsets() {
  // @@protoc_insertion_point(field_release:TSK.StructuredTextImportSettings.column_offsets)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::IndexSet* temp = column_offsets_;
  column_offsets_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* StructuredTextImportSettings::_internal_mutable_column_offsets() {
  _has_bits_[0] |= 0x00000001u;
  if (column_offsets_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArena());
    column_offsets_ = p;
  }
  return column_offsets_;
}
inline ::TSP::IndexSet* StructuredTextImportSettings::mutable_column_offsets() {
  // @@protoc_insertion_point(field_mutable:TSK.StructuredTextImportSettings.column_offsets)
  return _internal_mutable_column_offsets();
}
inline void StructuredTextImportSettings::set_allocated_column_offsets(::TSP::IndexSet* column_offsets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_offsets_);
  }
  if (column_offsets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column_offsets)->GetArena();
    if (message_arena != submessage_arena) {
      column_offsets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column_offsets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_offsets_ = column_offsets;
  // @@protoc_insertion_point(field_set_allocated:TSK.StructuredTextImportSettings.column_offsets)
}

// optional bool automatic_delimiters = 10;
inline bool StructuredTextImportSettings::_internal_has_automatic_delimiters() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_automatic_delimiters() const {
  return _internal_has_automatic_delimiters();
}
inline void StructuredTextImportSettings::clear_automatic_delimiters() {
  automatic_delimiters_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool StructuredTextImportSettings::_internal_automatic_delimiters() const {
  return automatic_delimiters_;
}
inline bool StructuredTextImportSettings::automatic_delimiters() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.automatic_delimiters)
  return _internal_automatic_delimiters();
}
inline void StructuredTextImportSettings::_internal_set_automatic_delimiters(bool value) {
  _has_bits_[0] |= 0x00000040u;
  automatic_delimiters_ = value;
}
inline void StructuredTextImportSettings::set_automatic_delimiters(bool value) {
  _internal_set_automatic_delimiters(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.automatic_delimiters)
}

// optional bool automatic_offsets = 11;
inline bool StructuredTextImportSettings::_internal_has_automatic_offsets() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_automatic_offsets() const {
  return _internal_has_automatic_offsets();
}
inline void StructuredTextImportSettings::clear_automatic_offsets() {
  automatic_offsets_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool StructuredTextImportSettings::_internal_automatic_offsets() const {
  return automatic_offsets_;
}
inline bool StructuredTextImportSettings::automatic_offsets() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.automatic_offsets)
  return _internal_automatic_offsets();
}
inline void StructuredTextImportSettings::_internal_set_automatic_offsets(bool value) {
  _has_bits_[0] |= 0x00000080u;
  automatic_offsets_ = value;
}
inline void StructuredTextImportSettings::set_automatic_offsets(bool value) {
  _internal_set_automatic_offsets(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.automatic_offsets)
}

// optional uint64 source_encoding = 12;
inline bool StructuredTextImportSettings::_internal_has_source_encoding() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StructuredTextImportSettings::has_source_encoding() const {
  return _internal_has_source_encoding();
}
inline void StructuredTextImportSettings::clear_source_encoding() {
  source_encoding_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportSettings::_internal_source_encoding() const {
  return source_encoding_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StructuredTextImportSettings::source_encoding() const {
  // @@protoc_insertion_point(field_get:TSK.StructuredTextImportSettings.source_encoding)
  return _internal_source_encoding();
}
inline void StructuredTextImportSettings::_internal_set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  source_encoding_ = value;
}
inline void StructuredTextImportSettings::set_source_encoding(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_source_encoding(value);
  // @@protoc_insertion_point(field_set:TSK.StructuredTextImportSettings.source_encoding)
}

// -------------------------------------------------------------------

// OperationStorageCommandOperationsEntry

// optional bool command_identifier_same_as_revision_identifier = 1;
inline bool OperationStorageCommandOperationsEntry::_internal_has_command_identifier_same_as_revision_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperationStorageCommandOperationsEntry::has_command_identifier_same_as_revision_identifier() const {
  return _internal_has_command_identifier_same_as_revision_identifier();
}
inline void OperationStorageCommandOperationsEntry::clear_command_identifier_same_as_revision_identifier() {
  command_identifier_same_as_revision_identifier_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OperationStorageCommandOperationsEntry::_internal_command_identifier_same_as_revision_identifier() const {
  return command_identifier_same_as_revision_identifier_;
}
inline bool OperationStorageCommandOperationsEntry::command_identifier_same_as_revision_identifier() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageCommandOperationsEntry.command_identifier_same_as_revision_identifier)
  return _internal_command_identifier_same_as_revision_identifier();
}
inline void OperationStorageCommandOperationsEntry::_internal_set_command_identifier_same_as_revision_identifier(bool value) {
  _has_bits_[0] |= 0x00000002u;
  command_identifier_same_as_revision_identifier_ = value;
}
inline void OperationStorageCommandOperationsEntry::set_command_identifier_same_as_revision_identifier(bool value) {
  _internal_set_command_identifier_same_as_revision_identifier(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageCommandOperationsEntry.command_identifier_same_as_revision_identifier)
}

// repeated fixed64 command_identifier = 2 [packed = true];
inline int OperationStorageCommandOperationsEntry::_internal_command_identifier_size() const {
  return command_identifier_.size();
}
inline int OperationStorageCommandOperationsEntry::command_identifier_size() const {
  return _internal_command_identifier_size();
}
inline void OperationStorageCommandOperationsEntry::clear_command_identifier() {
  command_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorageCommandOperationsEntry::_internal_command_identifier(int index) const {
  return command_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorageCommandOperationsEntry::command_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageCommandOperationsEntry.command_identifier)
  return _internal_command_identifier(index);
}
inline void OperationStorageCommandOperationsEntry::set_command_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  command_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageCommandOperationsEntry.command_identifier)
}
inline void OperationStorageCommandOperationsEntry::_internal_add_command_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  command_identifier_.Add(value);
}
inline void OperationStorageCommandOperationsEntry::add_command_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_command_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.OperationStorageCommandOperationsEntry.command_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorageCommandOperationsEntry::_internal_command_identifier() const {
  return command_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorageCommandOperationsEntry::command_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorageCommandOperationsEntry.command_identifier)
  return _internal_command_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorageCommandOperationsEntry::_internal_mutable_command_identifier() {
  return &command_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorageCommandOperationsEntry::mutable_command_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorageCommandOperationsEntry.command_identifier)
  return _internal_mutable_command_identifier();
}

// repeated .TSK.Operation operations = 3;
inline int OperationStorageCommandOperationsEntry::_internal_operations_size() const {
  return operations_.size();
}
inline int OperationStorageCommandOperationsEntry::operations_size() const {
  return _internal_operations_size();
}
inline void OperationStorageCommandOperationsEntry::clear_operations() {
  operations_.Clear();
}
inline ::TSK::Operation* OperationStorageCommandOperationsEntry::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorageCommandOperationsEntry.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >*
OperationStorageCommandOperationsEntry::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorageCommandOperationsEntry.operations)
  return &operations_;
}
inline const ::TSK::Operation& OperationStorageCommandOperationsEntry::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::TSK::Operation& OperationStorageCommandOperationsEntry::operations(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageCommandOperationsEntry.operations)
  return _internal_operations(index);
}
inline ::TSK::Operation* OperationStorageCommandOperationsEntry::_internal_add_operations() {
  return operations_.Add();
}
inline ::TSK::Operation* OperationStorageCommandOperationsEntry::add_operations() {
  // @@protoc_insertion_point(field_add:TSK.OperationStorageCommandOperationsEntry.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::Operation >&
OperationStorageCommandOperationsEntry::operations() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorageCommandOperationsEntry.operations)
  return operations_;
}

// optional bool server_originated = 4;
inline bool OperationStorageCommandOperationsEntry::_internal_has_server_originated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OperationStorageCommandOperationsEntry::has_server_originated() const {
  return _internal_has_server_originated();
}
inline void OperationStorageCommandOperationsEntry::clear_server_originated() {
  server_originated_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OperationStorageCommandOperationsEntry::_internal_server_originated() const {
  return server_originated_;
}
inline bool OperationStorageCommandOperationsEntry::server_originated() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageCommandOperationsEntry.server_originated)
  return _internal_server_originated();
}
inline void OperationStorageCommandOperationsEntry::_internal_set_server_originated(bool value) {
  _has_bits_[0] |= 0x00000004u;
  server_originated_ = value;
}
inline void OperationStorageCommandOperationsEntry::set_server_originated(bool value) {
  _internal_set_server_originated(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageCommandOperationsEntry.server_originated)
}

// optional uint64 coalesced_command_entry_count = 5;
inline bool OperationStorageCommandOperationsEntry::_internal_has_coalesced_command_entry_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationStorageCommandOperationsEntry::has_coalesced_command_entry_count() const {
  return _internal_has_coalesced_command_entry_count();
}
inline void OperationStorageCommandOperationsEntry::clear_coalesced_command_entry_count() {
  coalesced_command_entry_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorageCommandOperationsEntry::_internal_coalesced_command_entry_count() const {
  return coalesced_command_entry_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorageCommandOperationsEntry::coalesced_command_entry_count() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageCommandOperationsEntry.coalesced_command_entry_count)
  return _internal_coalesced_command_entry_count();
}
inline void OperationStorageCommandOperationsEntry::_internal_set_coalesced_command_entry_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  coalesced_command_entry_count_ = value;
}
inline void OperationStorageCommandOperationsEntry::set_coalesced_command_entry_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coalesced_command_entry_count(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageCommandOperationsEntry.coalesced_command_entry_count)
}

// -------------------------------------------------------------------

// OperationStorageEntry

// repeated fixed64 document_revision_identifier = 1 [packed = true];
inline int OperationStorageEntry::_internal_document_revision_identifier_size() const {
  return document_revision_identifier_.size();
}
inline int OperationStorageEntry::document_revision_identifier_size() const {
  return _internal_document_revision_identifier_size();
}
inline void OperationStorageEntry::clear_document_revision_identifier() {
  document_revision_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorageEntry::_internal_document_revision_identifier(int index) const {
  return document_revision_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorageEntry::document_revision_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntry.document_revision_identifier)
  return _internal_document_revision_identifier(index);
}
inline void OperationStorageEntry::set_document_revision_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  document_revision_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntry.document_revision_identifier)
}
inline void OperationStorageEntry::_internal_add_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  document_revision_identifier_.Add(value);
}
inline void OperationStorageEntry::add_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_document_revision_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.OperationStorageEntry.document_revision_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorageEntry::_internal_document_revision_identifier() const {
  return document_revision_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorageEntry::document_revision_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorageEntry.document_revision_identifier)
  return _internal_document_revision_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorageEntry::_internal_mutable_document_revision_identifier() {
  return &document_revision_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorageEntry::mutable_document_revision_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorageEntry.document_revision_identifier)
  return _internal_mutable_document_revision_identifier();
}

// optional int32 document_revision_sequence_delta = 2;
inline bool OperationStorageEntry::_internal_has_document_revision_sequence_delta() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationStorageEntry::has_document_revision_sequence_delta() const {
  return _internal_has_document_revision_sequence_delta();
}
inline void OperationStorageEntry::clear_document_revision_sequence_delta() {
  document_revision_sequence_delta_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntry::_internal_document_revision_sequence_delta() const {
  return document_revision_sequence_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntry::document_revision_sequence_delta() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntry.document_revision_sequence_delta)
  return _internal_document_revision_sequence_delta();
}
inline void OperationStorageEntry::_internal_set_document_revision_sequence_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  document_revision_sequence_delta_ = value;
}
inline void OperationStorageEntry::set_document_revision_sequence_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_document_revision_sequence_delta(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntry.document_revision_sequence_delta)
}

// repeated .TSK.OperationStorageCommandOperationsEntry command_operation_entries = 3;
inline int OperationStorageEntry::_internal_command_operation_entries_size() const {
  return command_operation_entries_.size();
}
inline int OperationStorageEntry::command_operation_entries_size() const {
  return _internal_command_operation_entries_size();
}
inline void OperationStorageEntry::clear_command_operation_entries() {
  command_operation_entries_.Clear();
}
inline ::TSK::OperationStorageCommandOperationsEntry* OperationStorageEntry::mutable_command_operation_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorageEntry.command_operation_entries)
  return command_operation_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageCommandOperationsEntry >*
OperationStorageEntry::mutable_command_operation_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorageEntry.command_operation_entries)
  return &command_operation_entries_;
}
inline const ::TSK::OperationStorageCommandOperationsEntry& OperationStorageEntry::_internal_command_operation_entries(int index) const {
  return command_operation_entries_.Get(index);
}
inline const ::TSK::OperationStorageCommandOperationsEntry& OperationStorageEntry::command_operation_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntry.command_operation_entries)
  return _internal_command_operation_entries(index);
}
inline ::TSK::OperationStorageCommandOperationsEntry* OperationStorageEntry::_internal_add_command_operation_entries() {
  return command_operation_entries_.Add();
}
inline ::TSK::OperationStorageCommandOperationsEntry* OperationStorageEntry::add_command_operation_entries() {
  // @@protoc_insertion_point(field_add:TSK.OperationStorageEntry.command_operation_entries)
  return _internal_add_command_operation_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageCommandOperationsEntry >&
OperationStorageEntry::command_operation_entries() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorageEntry.command_operation_entries)
  return command_operation_entries_;
}

// optional double first_entry_creation_time = 4;
inline bool OperationStorageEntry::_internal_has_first_entry_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OperationStorageEntry::has_first_entry_creation_time() const {
  return _internal_has_first_entry_creation_time();
}
inline void OperationStorageEntry::clear_first_entry_creation_time() {
  first_entry_creation_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OperationStorageEntry::_internal_first_entry_creation_time() const {
  return first_entry_creation_time_;
}
inline double OperationStorageEntry::first_entry_creation_time() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntry.first_entry_creation_time)
  return _internal_first_entry_creation_time();
}
inline void OperationStorageEntry::_internal_set_first_entry_creation_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  first_entry_creation_time_ = value;
}
inline void OperationStorageEntry::set_first_entry_creation_time(double value) {
  _internal_set_first_entry_creation_time(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntry.first_entry_creation_time)
}

// optional int32 creation_time_diff_bucket = 5;
inline bool OperationStorageEntry::_internal_has_creation_time_diff_bucket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperationStorageEntry::has_creation_time_diff_bucket() const {
  return _internal_has_creation_time_diff_bucket();
}
inline void OperationStorageEntry::clear_creation_time_diff_bucket() {
  creation_time_diff_bucket_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntry::_internal_creation_time_diff_bucket() const {
  return creation_time_diff_bucket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntry::creation_time_diff_bucket() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntry.creation_time_diff_bucket)
  return _internal_creation_time_diff_bucket();
}
inline void OperationStorageEntry::_internal_set_creation_time_diff_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  creation_time_diff_bucket_ = value;
}
inline void OperationStorageEntry::set_creation_time_diff_bucket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_creation_time_diff_bucket(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntry.creation_time_diff_bucket)
}

// -------------------------------------------------------------------

// OperationStorageEntryArray

// optional .TSP.LargeArray large_array = 1;
inline bool OperationStorageEntryArray::_internal_has_large_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_ != nullptr);
  return value;
}
inline bool OperationStorageEntryArray::has_large_array() const {
  return _internal_has_large_array();
}
inline const ::TSP::LargeArray& OperationStorageEntryArray::_internal_large_array() const {
  const ::TSP::LargeArray* p = large_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArray&>(
      ::TSP::_LargeArray_default_instance_);
}
inline const ::TSP::LargeArray& OperationStorageEntryArray::large_array() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntryArray.large_array)
  return _internal_large_array();
}
inline void OperationStorageEntryArray::unsafe_arena_set_allocated_large_array(
    ::TSP::LargeArray* large_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  large_array_ = large_array;
  if (large_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OperationStorageEntryArray.large_array)
}
inline ::TSP::LargeArray* OperationStorageEntryArray::release_large_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArray* OperationStorageEntryArray::unsafe_arena_release_large_array() {
  // @@protoc_insertion_point(field_release:TSK.OperationStorageEntryArray.large_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArray* temp = large_array_;
  large_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeArray* OperationStorageEntryArray::_internal_mutable_large_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArray>(GetArena());
    large_array_ = p;
  }
  return large_array_;
}
inline ::TSP::LargeArray* OperationStorageEntryArray::mutable_large_array() {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorageEntryArray.large_array)
  return _internal_mutable_large_array();
}
inline void OperationStorageEntryArray::set_allocated_large_array(::TSP::LargeArray* large_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_);
  }
  if (large_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array)->GetArena();
    if (message_arena != submessage_arena) {
      large_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_ = large_array;
  // @@protoc_insertion_point(field_set_allocated:TSK.OperationStorageEntryArray.large_array)
}

// -------------------------------------------------------------------

// OperationStorageEntryArraySegment

// optional .TSP.LargeArraySegment large_array_segment = 1;
inline bool OperationStorageEntryArraySegment::_internal_has_large_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_array_segment_ != nullptr);
  return value;
}
inline bool OperationStorageEntryArraySegment::has_large_array_segment() const {
  return _internal_has_large_array_segment();
}
inline const ::TSP::LargeArraySegment& OperationStorageEntryArraySegment::_internal_large_array_segment() const {
  const ::TSP::LargeArraySegment* p = large_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeArraySegment&>(
      ::TSP::_LargeArraySegment_default_instance_);
}
inline const ::TSP::LargeArraySegment& OperationStorageEntryArraySegment::large_array_segment() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntryArraySegment.large_array_segment)
  return _internal_large_array_segment();
}
inline void OperationStorageEntryArraySegment::unsafe_arena_set_allocated_large_array_segment(
    ::TSP::LargeArraySegment* large_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  large_array_segment_ = large_array_segment;
  if (large_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OperationStorageEntryArraySegment.large_array_segment)
}
inline ::TSP::LargeArraySegment* OperationStorageEntryArraySegment::release_large_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeArraySegment* OperationStorageEntryArraySegment::unsafe_arena_release_large_array_segment() {
  // @@protoc_insertion_point(field_release:TSK.OperationStorageEntryArraySegment.large_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeArraySegment* temp = large_array_segment_;
  large_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeArraySegment* OperationStorageEntryArraySegment::_internal_mutable_large_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeArraySegment>(GetArena());
    large_array_segment_ = p;
  }
  return large_array_segment_;
}
inline ::TSP::LargeArraySegment* OperationStorageEntryArraySegment::mutable_large_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorageEntryArraySegment.large_array_segment)
  return _internal_mutable_large_array_segment();
}
inline void OperationStorageEntryArraySegment::set_allocated_large_array_segment(::TSP::LargeArraySegment* large_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment_);
  }
  if (large_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_array_segment)->GetArena();
    if (message_arena != submessage_arena) {
      large_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_array_segment_ = large_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSK.OperationStorageEntryArraySegment.large_array_segment)
}

// repeated .TSK.OperationStorageEntry elements = 2;
inline int OperationStorageEntryArraySegment::_internal_elements_size() const {
  return elements_.size();
}
inline int OperationStorageEntryArraySegment::elements_size() const {
  return _internal_elements_size();
}
inline void OperationStorageEntryArraySegment::clear_elements() {
  elements_.Clear();
}
inline ::TSK::OperationStorageEntry* OperationStorageEntryArraySegment::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorageEntryArraySegment.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >*
OperationStorageEntryArraySegment::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorageEntryArraySegment.elements)
  return &elements_;
}
inline const ::TSK::OperationStorageEntry& OperationStorageEntryArraySegment::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::TSK::OperationStorageEntry& OperationStorageEntryArraySegment::elements(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntryArraySegment.elements)
  return _internal_elements(index);
}
inline ::TSK::OperationStorageEntry* OperationStorageEntryArraySegment::_internal_add_elements() {
  return elements_.Add();
}
inline ::TSK::OperationStorageEntry* OperationStorageEntryArraySegment::add_elements() {
  // @@protoc_insertion_point(field_add:TSK.OperationStorageEntryArraySegment.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >&
OperationStorageEntryArraySegment::elements() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorageEntryArraySegment.elements)
  return elements_;
}

// optional int32 last_document_revision_sequence_before_segment = 3;
inline bool OperationStorageEntryArraySegment::_internal_has_last_document_revision_sequence_before_segment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperationStorageEntryArraySegment::has_last_document_revision_sequence_before_segment() const {
  return _internal_has_last_document_revision_sequence_before_segment();
}
inline void OperationStorageEntryArraySegment::clear_last_document_revision_sequence_before_segment() {
  last_document_revision_sequence_before_segment_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntryArraySegment::_internal_last_document_revision_sequence_before_segment() const {
  return last_document_revision_sequence_before_segment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntryArraySegment::last_document_revision_sequence_before_segment() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntryArraySegment.last_document_revision_sequence_before_segment)
  return _internal_last_document_revision_sequence_before_segment();
}
inline void OperationStorageEntryArraySegment::_internal_set_last_document_revision_sequence_before_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  last_document_revision_sequence_before_segment_ = value;
}
inline void OperationStorageEntryArraySegment::set_last_document_revision_sequence_before_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_document_revision_sequence_before_segment(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntryArraySegment.last_document_revision_sequence_before_segment)
}

// optional int32 last_document_revision_sequence = 4;
inline bool OperationStorageEntryArraySegment::_internal_has_last_document_revision_sequence() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OperationStorageEntryArraySegment::has_last_document_revision_sequence() const {
  return _internal_has_last_document_revision_sequence();
}
inline void OperationStorageEntryArraySegment::clear_last_document_revision_sequence() {
  last_document_revision_sequence_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntryArraySegment::_internal_last_document_revision_sequence() const {
  return last_document_revision_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorageEntryArraySegment::last_document_revision_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntryArraySegment.last_document_revision_sequence)
  return _internal_last_document_revision_sequence();
}
inline void OperationStorageEntryArraySegment::_internal_set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  last_document_revision_sequence_ = value;
}
inline void OperationStorageEntryArraySegment::set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_document_revision_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntryArraySegment.last_document_revision_sequence)
}

// optional double segment_first_entry_creation_time = 5;
inline bool OperationStorageEntryArraySegment::_internal_has_segment_first_entry_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OperationStorageEntryArraySegment::has_segment_first_entry_creation_time() const {
  return _internal_has_segment_first_entry_creation_time();
}
inline void OperationStorageEntryArraySegment::clear_segment_first_entry_creation_time() {
  segment_first_entry_creation_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double OperationStorageEntryArraySegment::_internal_segment_first_entry_creation_time() const {
  return segment_first_entry_creation_time_;
}
inline double OperationStorageEntryArraySegment::segment_first_entry_creation_time() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorageEntryArraySegment.segment_first_entry_creation_time)
  return _internal_segment_first_entry_creation_time();
}
inline void OperationStorageEntryArraySegment::_internal_set_segment_first_entry_creation_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  segment_first_entry_creation_time_ = value;
}
inline void OperationStorageEntryArraySegment::set_segment_first_entry_creation_time(double value) {
  _internal_set_segment_first_entry_creation_time(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorageEntryArraySegment.segment_first_entry_creation_time)
}

// -------------------------------------------------------------------

// OperationStorage

// required .TSP.Reference entries = 1;
inline bool OperationStorage::_internal_has_entries() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entries_ != nullptr);
  return value;
}
inline bool OperationStorage::has_entries() const {
  return _internal_has_entries();
}
inline const ::TSP::Reference& OperationStorage::_internal_entries() const {
  const ::TSP::Reference* p = entries_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& OperationStorage::entries() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.entries)
  return _internal_entries();
}
inline void OperationStorage::unsafe_arena_set_allocated_entries(
    ::TSP::Reference* entries) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entries_);
  }
  entries_ = entries;
  if (entries) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OperationStorage.entries)
}
inline ::TSP::Reference* OperationStorage::release_entries() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = entries_;
  entries_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Reference* OperationStorage::unsafe_arena_release_entries() {
  // @@protoc_insertion_point(field_release:TSK.OperationStorage.entries)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = entries_;
  entries_ = nullptr;
  return temp;
}
inline ::TSP::Reference* OperationStorage::_internal_mutable_entries() {
  _has_bits_[0] |= 0x00000001u;
  if (entries_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArena());
    entries_ = p;
  }
  return entries_;
}
inline ::TSP::Reference* OperationStorage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorage.entries)
  return _internal_mutable_entries();
}
inline void OperationStorage::set_allocated_entries(::TSP::Reference* entries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entries_);
  }
  if (entries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entries)->GetArena();
    if (message_arena != submessage_arena) {
      entries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entries, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entries_ = entries;
  // @@protoc_insertion_point(field_set_allocated:TSK.OperationStorage.entries)
}

// required uint64 operation_count = 2;
inline bool OperationStorage::_internal_has_operation_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OperationStorage::has_operation_count() const {
  return _internal_has_operation_count();
}
inline void OperationStorage::clear_operation_count() {
  operation_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::_internal_operation_count() const {
  return operation_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::operation_count() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.operation_count)
  return _internal_operation_count();
}
inline void OperationStorage::_internal_set_operation_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  operation_count_ = value;
}
inline void OperationStorage::set_operation_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_operation_count(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.operation_count)
}

// optional int32 last_document_revision_sequence = 3;
inline bool OperationStorage::_internal_has_last_document_revision_sequence() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OperationStorage::has_last_document_revision_sequence() const {
  return _internal_has_last_document_revision_sequence();
}
inline void OperationStorage::clear_last_document_revision_sequence() {
  last_document_revision_sequence_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorage::_internal_last_document_revision_sequence() const {
  return last_document_revision_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorage::last_document_revision_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.last_document_revision_sequence)
  return _internal_last_document_revision_sequence();
}
inline void OperationStorage::_internal_set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_document_revision_sequence_ = value;
}
inline void OperationStorage::set_last_document_revision_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_document_revision_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.last_document_revision_sequence)
}

// repeated fixed64 last_document_revision_identifier = 4 [packed = true];
inline int OperationStorage::_internal_last_document_revision_identifier_size() const {
  return last_document_revision_identifier_.size();
}
inline int OperationStorage::last_document_revision_identifier_size() const {
  return _internal_last_document_revision_identifier_size();
}
inline void OperationStorage::clear_last_document_revision_identifier() {
  last_document_revision_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::_internal_last_document_revision_identifier(int index) const {
  return last_document_revision_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::last_document_revision_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.last_document_revision_identifier)
  return _internal_last_document_revision_identifier(index);
}
inline void OperationStorage::set_last_document_revision_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  last_document_revision_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.last_document_revision_identifier)
}
inline void OperationStorage::_internal_add_last_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  last_document_revision_identifier_.Add(value);
}
inline void OperationStorage::add_last_document_revision_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_last_document_revision_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.OperationStorage.last_document_revision_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorage::_internal_last_document_revision_identifier() const {
  return last_document_revision_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorage::last_document_revision_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorage.last_document_revision_identifier)
  return _internal_last_document_revision_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorage::_internal_mutable_last_document_revision_identifier() {
  return &last_document_revision_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorage::mutable_last_document_revision_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorage.last_document_revision_identifier)
  return _internal_mutable_last_document_revision_identifier();
}

// optional int32 last_unskippable_document_revision_before_entries_sequence = 5;
inline bool OperationStorage::_internal_has_last_unskippable_document_revision_before_entries_sequence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OperationStorage::has_last_unskippable_document_revision_before_entries_sequence() const {
  return _internal_has_last_unskippable_document_revision_before_entries_sequence();
}
inline void OperationStorage::clear_last_unskippable_document_revision_before_entries_sequence() {
  last_unskippable_document_revision_before_entries_sequence_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorage::_internal_last_unskippable_document_revision_before_entries_sequence() const {
  return last_unskippable_document_revision_before_entries_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorage::last_unskippable_document_revision_before_entries_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.last_unskippable_document_revision_before_entries_sequence)
  return _internal_last_unskippable_document_revision_before_entries_sequence();
}
inline void OperationStorage::_internal_set_last_unskippable_document_revision_before_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  last_unskippable_document_revision_before_entries_sequence_ = value;
}
inline void OperationStorage::set_last_unskippable_document_revision_before_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_unskippable_document_revision_before_entries_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.last_unskippable_document_revision_before_entries_sequence)
}

// repeated fixed64 last_unskippable_document_revision_before_entries_identifier = 6 [packed = true];
inline int OperationStorage::_internal_last_unskippable_document_revision_before_entries_identifier_size() const {
  return last_unskippable_document_revision_before_entries_identifier_.size();
}
inline int OperationStorage::last_unskippable_document_revision_before_entries_identifier_size() const {
  return _internal_last_unskippable_document_revision_before_entries_identifier_size();
}
inline void OperationStorage::clear_last_unskippable_document_revision_before_entries_identifier() {
  last_unskippable_document_revision_before_entries_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::_internal_last_unskippable_document_revision_before_entries_identifier(int index) const {
  return last_unskippable_document_revision_before_entries_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::last_unskippable_document_revision_before_entries_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.last_unskippable_document_revision_before_entries_identifier)
  return _internal_last_unskippable_document_revision_before_entries_identifier(index);
}
inline void OperationStorage::set_last_unskippable_document_revision_before_entries_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  last_unskippable_document_revision_before_entries_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.last_unskippable_document_revision_before_entries_identifier)
}
inline void OperationStorage::_internal_add_last_unskippable_document_revision_before_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  last_unskippable_document_revision_before_entries_identifier_.Add(value);
}
inline void OperationStorage::add_last_unskippable_document_revision_before_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_last_unskippable_document_revision_before_entries_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.OperationStorage.last_unskippable_document_revision_before_entries_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorage::_internal_last_unskippable_document_revision_before_entries_identifier() const {
  return last_unskippable_document_revision_before_entries_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorage::last_unskippable_document_revision_before_entries_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorage.last_unskippable_document_revision_before_entries_identifier)
  return _internal_last_unskippable_document_revision_before_entries_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorage::_internal_mutable_last_unskippable_document_revision_before_entries_identifier() {
  return &last_unskippable_document_revision_before_entries_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorage::mutable_last_unskippable_document_revision_before_entries_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorage.last_unskippable_document_revision_before_entries_identifier)
  return _internal_mutable_last_unskippable_document_revision_before_entries_identifier();
}

// optional int32 last_unskippable_document_revision_in_entries_sequence = 7;
inline bool OperationStorage::_internal_has_last_unskippable_document_revision_in_entries_sequence() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OperationStorage::has_last_unskippable_document_revision_in_entries_sequence() const {
  return _internal_has_last_unskippable_document_revision_in_entries_sequence();
}
inline void OperationStorage::clear_last_unskippable_document_revision_in_entries_sequence() {
  last_unskippable_document_revision_in_entries_sequence_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorage::_internal_last_unskippable_document_revision_in_entries_sequence() const {
  return last_unskippable_document_revision_in_entries_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationStorage::last_unskippable_document_revision_in_entries_sequence() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.last_unskippable_document_revision_in_entries_sequence)
  return _internal_last_unskippable_document_revision_in_entries_sequence();
}
inline void OperationStorage::_internal_set_last_unskippable_document_revision_in_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  last_unskippable_document_revision_in_entries_sequence_ = value;
}
inline void OperationStorage::set_last_unskippable_document_revision_in_entries_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_unskippable_document_revision_in_entries_sequence(value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.last_unskippable_document_revision_in_entries_sequence)
}

// repeated fixed64 last_unskippable_document_revision_in_entries_identifier = 8 [packed = true];
inline int OperationStorage::_internal_last_unskippable_document_revision_in_entries_identifier_size() const {
  return last_unskippable_document_revision_in_entries_identifier_.size();
}
inline int OperationStorage::last_unskippable_document_revision_in_entries_identifier_size() const {
  return _internal_last_unskippable_document_revision_in_entries_identifier_size();
}
inline void OperationStorage::clear_last_unskippable_document_revision_in_entries_identifier() {
  last_unskippable_document_revision_in_entries_identifier_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::_internal_last_unskippable_document_revision_in_entries_identifier(int index) const {
  return last_unskippable_document_revision_in_entries_identifier_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OperationStorage::last_unskippable_document_revision_in_entries_identifier(int index) const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.last_unskippable_document_revision_in_entries_identifier)
  return _internal_last_unskippable_document_revision_in_entries_identifier(index);
}
inline void OperationStorage::set_last_unskippable_document_revision_in_entries_identifier(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  last_unskippable_document_revision_in_entries_identifier_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSK.OperationStorage.last_unskippable_document_revision_in_entries_identifier)
}
inline void OperationStorage::_internal_add_last_unskippable_document_revision_in_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  last_unskippable_document_revision_in_entries_identifier_.Add(value);
}
inline void OperationStorage::add_last_unskippable_document_revision_in_entries_identifier(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_last_unskippable_document_revision_in_entries_identifier(value);
  // @@protoc_insertion_point(field_add:TSK.OperationStorage.last_unskippable_document_revision_in_entries_identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorage::_internal_last_unskippable_document_revision_in_entries_identifier() const {
  return last_unskippable_document_revision_in_entries_identifier_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
OperationStorage::last_unskippable_document_revision_in_entries_identifier() const {
  // @@protoc_insertion_point(field_list:TSK.OperationStorage.last_unskippable_document_revision_in_entries_identifier)
  return _internal_last_unskippable_document_revision_in_entries_identifier();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorage::_internal_mutable_last_unskippable_document_revision_in_entries_identifier() {
  return &last_unskippable_document_revision_in_entries_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
OperationStorage::mutable_last_unskippable_document_revision_in_entries_identifier() {
  // @@protoc_insertion_point(field_mutable_list:TSK.OperationStorage.last_unskippable_document_revision_in_entries_identifier)
  return _internal_mutable_last_unskippable_document_revision_in_entries_identifier();
}

// optional .TSP.IndexSet days_with_an_entry = 9;
inline bool OperationStorage::_internal_has_days_with_an_entry() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || days_with_an_entry_ != nullptr);
  return value;
}
inline bool OperationStorage::has_days_with_an_entry() const {
  return _internal_has_days_with_an_entry();
}
inline const ::TSP::IndexSet& OperationStorage::_internal_days_with_an_entry() const {
  const ::TSP::IndexSet* p = days_with_an_entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::IndexSet&>(
      ::TSP::_IndexSet_default_instance_);
}
inline const ::TSP::IndexSet& OperationStorage::days_with_an_entry() const {
  // @@protoc_insertion_point(field_get:TSK.OperationStorage.days_with_an_entry)
  return _internal_days_with_an_entry();
}
inline void OperationStorage::unsafe_arena_set_allocated_days_with_an_entry(
    ::TSP::IndexSet* days_with_an_entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(days_with_an_entry_);
  }
  days_with_an_entry_ = days_with_an_entry;
  if (days_with_an_entry) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OperationStorage.days_with_an_entry)
}
inline ::TSP::IndexSet* OperationStorage::release_days_with_an_entry() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = days_with_an_entry_;
  days_with_an_entry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::IndexSet* OperationStorage::unsafe_arena_release_days_with_an_entry() {
  // @@protoc_insertion_point(field_release:TSK.OperationStorage.days_with_an_entry)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::IndexSet* temp = days_with_an_entry_;
  days_with_an_entry_ = nullptr;
  return temp;
}
inline ::TSP::IndexSet* OperationStorage::_internal_mutable_days_with_an_entry() {
  _has_bits_[0] |= 0x00000002u;
  if (days_with_an_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::IndexSet>(GetArena());
    days_with_an_entry_ = p;
  }
  return days_with_an_entry_;
}
inline ::TSP::IndexSet* OperationStorage::mutable_days_with_an_entry() {
  // @@protoc_insertion_point(field_mutable:TSK.OperationStorage.days_with_an_entry)
  return _internal_mutable_days_with_an_entry();
}
inline void OperationStorage::set_allocated_days_with_an_entry(::TSP::IndexSet* days_with_an_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(days_with_an_entry_);
  }
  if (days_with_an_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(days_with_an_entry)->GetArena();
    if (message_arena != submessage_arena) {
      days_with_an_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, days_with_an_entry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  days_with_an_entry_ = days_with_an_entry;
  // @@protoc_insertion_point(field_set_allocated:TSK.OperationStorage.days_with_an_entry)
}

// -------------------------------------------------------------------

// OutgoingCommandQueue

// optional .TSP.LargeObjectArray large_object_array = 1;
inline bool OutgoingCommandQueue::_internal_has_large_object_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_object_array_ != nullptr);
  return value;
}
inline bool OutgoingCommandQueue::has_large_object_array() const {
  return _internal_has_large_object_array();
}
inline const ::TSP::LargeObjectArray& OutgoingCommandQueue::_internal_large_object_array() const {
  const ::TSP::LargeObjectArray* p = large_object_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeObjectArray&>(
      ::TSP::_LargeObjectArray_default_instance_);
}
inline const ::TSP::LargeObjectArray& OutgoingCommandQueue::large_object_array() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueue.large_object_array)
  return _internal_large_object_array();
}
inline void OutgoingCommandQueue::unsafe_arena_set_allocated_large_object_array(
    ::TSP::LargeObjectArray* large_object_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_);
  }
  large_object_array_ = large_object_array;
  if (large_object_array) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OutgoingCommandQueue.large_object_array)
}
inline ::TSP::LargeObjectArray* OutgoingCommandQueue::release_large_object_array() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArray* temp = large_object_array_;
  large_object_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeObjectArray* OutgoingCommandQueue::unsafe_arena_release_large_object_array() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueue.large_object_array)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArray* temp = large_object_array_;
  large_object_array_ = nullptr;
  return temp;
}
inline ::TSP::LargeObjectArray* OutgoingCommandQueue::_internal_mutable_large_object_array() {
  _has_bits_[0] |= 0x00000001u;
  if (large_object_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeObjectArray>(GetArena());
    large_object_array_ = p;
  }
  return large_object_array_;
}
inline ::TSP::LargeObjectArray* OutgoingCommandQueue::mutable_large_object_array() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueue.large_object_array)
  return _internal_mutable_large_object_array();
}
inline void OutgoingCommandQueue::set_allocated_large_object_array(::TSP::LargeObjectArray* large_object_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_);
  }
  if (large_object_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array)->GetArena();
    if (message_arena != submessage_arena) {
      large_object_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_object_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_object_array_ = large_object_array;
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueue.large_object_array)
}

// -------------------------------------------------------------------

// OutgoingCommandQueueSegment

// optional .TSP.LargeObjectArraySegment large_object_array_segment = 1;
inline bool OutgoingCommandQueueSegment::_internal_has_large_object_array_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || large_object_array_segment_ != nullptr);
  return value;
}
inline bool OutgoingCommandQueueSegment::has_large_object_array_segment() const {
  return _internal_has_large_object_array_segment();
}
inline const ::TSP::LargeObjectArraySegment& OutgoingCommandQueueSegment::_internal_large_object_array_segment() const {
  const ::TSP::LargeObjectArraySegment* p = large_object_array_segment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::LargeObjectArraySegment&>(
      ::TSP::_LargeObjectArraySegment_default_instance_);
}
inline const ::TSP::LargeObjectArraySegment& OutgoingCommandQueueSegment::large_object_array_segment() const {
  // @@protoc_insertion_point(field_get:TSK.OutgoingCommandQueueSegment.large_object_array_segment)
  return _internal_large_object_array_segment();
}
inline void OutgoingCommandQueueSegment::unsafe_arena_set_allocated_large_object_array_segment(
    ::TSP::LargeObjectArraySegment* large_object_array_segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment_);
  }
  large_object_array_segment_ = large_object_array_segment;
  if (large_object_array_segment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.OutgoingCommandQueueSegment.large_object_array_segment)
}
inline ::TSP::LargeObjectArraySegment* OutgoingCommandQueueSegment::release_large_object_array_segment() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArraySegment* temp = large_object_array_segment_;
  large_object_array_segment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::LargeObjectArraySegment* OutgoingCommandQueueSegment::unsafe_arena_release_large_object_array_segment() {
  // @@protoc_insertion_point(field_release:TSK.OutgoingCommandQueueSegment.large_object_array_segment)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::LargeObjectArraySegment* temp = large_object_array_segment_;
  large_object_array_segment_ = nullptr;
  return temp;
}
inline ::TSP::LargeObjectArraySegment* OutgoingCommandQueueSegment::_internal_mutable_large_object_array_segment() {
  _has_bits_[0] |= 0x00000001u;
  if (large_object_array_segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::LargeObjectArraySegment>(GetArena());
    large_object_array_segment_ = p;
  }
  return large_object_array_segment_;
}
inline ::TSP::LargeObjectArraySegment* OutgoingCommandQueueSegment::mutable_large_object_array_segment() {
  // @@protoc_insertion_point(field_mutable:TSK.OutgoingCommandQueueSegment.large_object_array_segment)
  return _internal_mutable_large_object_array_segment();
}
inline void OutgoingCommandQueueSegment::set_allocated_large_object_array_segment(::TSP::LargeObjectArraySegment* large_object_array_segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment_);
  }
  if (large_object_array_segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_object_array_segment)->GetArena();
    if (message_arena != submessage_arena) {
      large_object_array_segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_object_array_segment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  large_object_array_segment_ = large_object_array_segment;
  // @@protoc_insertion_point(field_set_allocated:TSK.OutgoingCommandQueueSegment.large_object_array_segment)
}

// -------------------------------------------------------------------

// DataReferenceRecord_ContainerUUIDToReferencedDataPair

// required .TSP.UUID container_uuid = 1;
inline bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_has_container_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || container_uuid_ != nullptr);
  return value;
}
inline bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::has_container_uuid() const {
  return _internal_has_container_uuid();
}
inline const ::TSP::UUID& DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_container_uuid() const {
  const ::TSP::UUID* p = container_uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& DataReferenceRecord_ContainerUUIDToReferencedDataPair::container_uuid() const {
  // @@protoc_insertion_point(field_get:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.container_uuid)
  return _internal_container_uuid();
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::unsafe_arena_set_allocated_container_uuid(
    ::TSP::UUID* container_uuid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_uuid_);
  }
  container_uuid_ = container_uuid;
  if (container_uuid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.container_uuid)
}
inline ::TSP::UUID* DataReferenceRecord_ContainerUUIDToReferencedDataPair::release_container_uuid() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = container_uuid_;
  container_uuid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::UUID* DataReferenceRecord_ContainerUUIDToReferencedDataPair::unsafe_arena_release_container_uuid() {
  // @@protoc_insertion_point(field_release:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.container_uuid)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = container_uuid_;
  container_uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_mutable_container_uuid() {
  _has_bits_[0] |= 0x00000001u;
  if (container_uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArena());
    container_uuid_ = p;
  }
  return container_uuid_;
}
inline ::TSP::UUID* DataReferenceRecord_ContainerUUIDToReferencedDataPair::mutable_container_uuid() {
  // @@protoc_insertion_point(field_mutable:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.container_uuid)
  return _internal_mutable_container_uuid();
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::set_allocated_container_uuid(::TSP::UUID* container_uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_uuid_);
  }
  if (container_uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_uuid)->GetArena();
    if (message_arena != submessage_arena) {
      container_uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_uuid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  container_uuid_ = container_uuid;
  // @@protoc_insertion_point(field_set_allocated:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.container_uuid)
}

// required .TSP.DataReference referenced_data = 2;
inline bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_has_referenced_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || referenced_data_ != nullptr);
  return value;
}
inline bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::has_referenced_data() const {
  return _internal_has_referenced_data();
}
inline const ::TSP::DataReference& DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_referenced_data() const {
  const ::TSP::DataReference* p = referenced_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& DataReferenceRecord_ContainerUUIDToReferencedDataPair::referenced_data() const {
  // @@protoc_insertion_point(field_get:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.referenced_data)
  return _internal_referenced_data();
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::unsafe_arena_set_allocated_referenced_data(
    ::TSP::DataReference* referenced_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referenced_data_);
  }
  referenced_data_ = referenced_data;
  if (referenced_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.referenced_data)
}
inline ::TSP::DataReference* DataReferenceRecord_ContainerUUIDToReferencedDataPair::release_referenced_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = referenced_data_;
  referenced_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::DataReference* DataReferenceRecord_ContainerUUIDToReferencedDataPair::unsafe_arena_release_referenced_data() {
  // @@protoc_insertion_point(field_release:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.referenced_data)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = referenced_data_;
  referenced_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_mutable_referenced_data() {
  _has_bits_[0] |= 0x00000002u;
  if (referenced_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArena());
    referenced_data_ = p;
  }
  return referenced_data_;
}
inline ::TSP::DataReference* DataReferenceRecord_ContainerUUIDToReferencedDataPair::mutable_referenced_data() {
  // @@protoc_insertion_point(field_mutable:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.referenced_data)
  return _internal_mutable_referenced_data();
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::set_allocated_referenced_data(::TSP::DataReference* referenced_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(referenced_data_);
  }
  if (referenced_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(referenced_data)->GetArena();
    if (message_arena != submessage_arena) {
      referenced_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referenced_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referenced_data_ = referenced_data;
  // @@protoc_insertion_point(field_set_allocated:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.referenced_data)
}

// required uint32 reference_count = 3;
inline bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_has_reference_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataReferenceRecord_ContainerUUIDToReferencedDataPair::has_reference_count() const {
  return _internal_has_reference_count();
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::clear_reference_count() {
  reference_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_reference_count() const {
  return reference_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataReferenceRecord_ContainerUUIDToReferencedDataPair::reference_count() const {
  // @@protoc_insertion_point(field_get:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.reference_count)
  return _internal_reference_count();
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::_internal_set_reference_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  reference_count_ = value;
}
inline void DataReferenceRecord_ContainerUUIDToReferencedDataPair::set_reference_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reference_count(value);
  // @@protoc_insertion_point(field_set:TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.reference_count)
}

// -------------------------------------------------------------------

// DataReferenceRecord

// repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair added_container_uuid_to_referenced_data_pairs = 1;
inline int DataReferenceRecord::_internal_added_container_uuid_to_referenced_data_pairs_size() const {
  return added_container_uuid_to_referenced_data_pairs_.size();
}
inline int DataReferenceRecord::added_container_uuid_to_referenced_data_pairs_size() const {
  return _internal_added_container_uuid_to_referenced_data_pairs_size();
}
inline void DataReferenceRecord::clear_added_container_uuid_to_referenced_data_pairs() {
  added_container_uuid_to_referenced_data_pairs_.Clear();
}
inline ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* DataReferenceRecord::mutable_added_container_uuid_to_referenced_data_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.DataReferenceRecord.added_container_uuid_to_referenced_data_pairs)
  return added_container_uuid_to_referenced_data_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >*
DataReferenceRecord::mutable_added_container_uuid_to_referenced_data_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TSK.DataReferenceRecord.added_container_uuid_to_referenced_data_pairs)
  return &added_container_uuid_to_referenced_data_pairs_;
}
inline const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& DataReferenceRecord::_internal_added_container_uuid_to_referenced_data_pairs(int index) const {
  return added_container_uuid_to_referenced_data_pairs_.Get(index);
}
inline const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& DataReferenceRecord::added_container_uuid_to_referenced_data_pairs(int index) const {
  // @@protoc_insertion_point(field_get:TSK.DataReferenceRecord.added_container_uuid_to_referenced_data_pairs)
  return _internal_added_container_uuid_to_referenced_data_pairs(index);
}
inline ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* DataReferenceRecord::_internal_add_added_container_uuid_to_referenced_data_pairs() {
  return added_container_uuid_to_referenced_data_pairs_.Add();
}
inline ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* DataReferenceRecord::add_added_container_uuid_to_referenced_data_pairs() {
  // @@protoc_insertion_point(field_add:TSK.DataReferenceRecord.added_container_uuid_to_referenced_data_pairs)
  return _internal_add_added_container_uuid_to_referenced_data_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >&
DataReferenceRecord::added_container_uuid_to_referenced_data_pairs() const {
  // @@protoc_insertion_point(field_list:TSK.DataReferenceRecord.added_container_uuid_to_referenced_data_pairs)
  return added_container_uuid_to_referenced_data_pairs_;
}

// repeated .TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair removed_container_uuid_to_referenced_data_pairs = 2;
inline int DataReferenceRecord::_internal_removed_container_uuid_to_referenced_data_pairs_size() const {
  return removed_container_uuid_to_referenced_data_pairs_.size();
}
inline int DataReferenceRecord::removed_container_uuid_to_referenced_data_pairs_size() const {
  return _internal_removed_container_uuid_to_referenced_data_pairs_size();
}
inline void DataReferenceRecord::clear_removed_container_uuid_to_referenced_data_pairs() {
  removed_container_uuid_to_referenced_data_pairs_.Clear();
}
inline ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* DataReferenceRecord::mutable_removed_container_uuid_to_referenced_data_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.DataReferenceRecord.removed_container_uuid_to_referenced_data_pairs)
  return removed_container_uuid_to_referenced_data_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >*
DataReferenceRecord::mutable_removed_container_uuid_to_referenced_data_pairs() {
  // @@protoc_insertion_point(field_mutable_list:TSK.DataReferenceRecord.removed_container_uuid_to_referenced_data_pairs)
  return &removed_container_uuid_to_referenced_data_pairs_;
}
inline const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& DataReferenceRecord::_internal_removed_container_uuid_to_referenced_data_pairs(int index) const {
  return removed_container_uuid_to_referenced_data_pairs_.Get(index);
}
inline const ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair& DataReferenceRecord::removed_container_uuid_to_referenced_data_pairs(int index) const {
  // @@protoc_insertion_point(field_get:TSK.DataReferenceRecord.removed_container_uuid_to_referenced_data_pairs)
  return _internal_removed_container_uuid_to_referenced_data_pairs(index);
}
inline ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* DataReferenceRecord::_internal_add_removed_container_uuid_to_referenced_data_pairs() {
  return removed_container_uuid_to_referenced_data_pairs_.Add();
}
inline ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair* DataReferenceRecord::add_removed_container_uuid_to_referenced_data_pairs() {
  // @@protoc_insertion_point(field_add:TSK.DataReferenceRecord.removed_container_uuid_to_referenced_data_pairs)
  return _internal_add_removed_container_uuid_to_referenced_data_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::DataReferenceRecord_ContainerUUIDToReferencedDataPair >&
DataReferenceRecord::removed_container_uuid_to_referenced_data_pairs() const {
  // @@protoc_insertion_point(field_list:TSK.DataReferenceRecord.removed_container_uuid_to_referenced_data_pairs)
  return removed_container_uuid_to_referenced_data_pairs_;
}

// repeated .TSP.DataReference unbounded_referenced_datas = 3;
inline int DataReferenceRecord::_internal_unbounded_referenced_datas_size() const {
  return unbounded_referenced_datas_.size();
}
inline int DataReferenceRecord::unbounded_referenced_datas_size() const {
  return _internal_unbounded_referenced_datas_size();
}
inline ::TSP::DataReference* DataReferenceRecord::mutable_unbounded_referenced_datas(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.DataReferenceRecord.unbounded_referenced_datas)
  return unbounded_referenced_datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >*
DataReferenceRecord::mutable_unbounded_referenced_datas() {
  // @@protoc_insertion_point(field_mutable_list:TSK.DataReferenceRecord.unbounded_referenced_datas)
  return &unbounded_referenced_datas_;
}
inline const ::TSP::DataReference& DataReferenceRecord::_internal_unbounded_referenced_datas(int index) const {
  return unbounded_referenced_datas_.Get(index);
}
inline const ::TSP::DataReference& DataReferenceRecord::unbounded_referenced_datas(int index) const {
  // @@protoc_insertion_point(field_get:TSK.DataReferenceRecord.unbounded_referenced_datas)
  return _internal_unbounded_referenced_datas(index);
}
inline ::TSP::DataReference* DataReferenceRecord::_internal_add_unbounded_referenced_datas() {
  return unbounded_referenced_datas_.Add();
}
inline ::TSP::DataReference* DataReferenceRecord::add_unbounded_referenced_datas() {
  // @@protoc_insertion_point(field_add:TSK.DataReferenceRecord.unbounded_referenced_datas)
  return _internal_add_unbounded_referenced_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::DataReference >&
DataReferenceRecord::unbounded_referenced_datas() const {
  // @@protoc_insertion_point(field_list:TSK.DataReferenceRecord.unbounded_referenced_datas)
  return unbounded_referenced_datas_;
}

// -------------------------------------------------------------------

// CommandAssetChunkArchive

// required .TSK.CommandArchive super = 1;
inline bool CommandAssetChunkArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool CommandAssetChunkArchive::has_super() const {
  return _internal_has_super();
}
inline void CommandAssetChunkArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TSK::CommandArchive& CommandAssetChunkArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& CommandAssetChunkArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.CommandAssetChunkArchive.super)
  return _internal_super();
}
inline void CommandAssetChunkArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.CommandAssetChunkArchive.super)
}
inline ::TSK::CommandArchive* CommandAssetChunkArchive::release_super() {
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* CommandAssetChunkArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.CommandAssetChunkArchive.super)
  _has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* CommandAssetChunkArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000004u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* CommandAssetChunkArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandAssetChunkArchive.super)
  return _internal_mutable_super();
}
inline void CommandAssetChunkArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandAssetChunkArchive.super)
}

// optional string digest = 2;
inline bool CommandAssetChunkArchive::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandAssetChunkArchive::has_digest() const {
  return _internal_has_digest();
}
inline void CommandAssetChunkArchive::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandAssetChunkArchive::digest() const {
  // @@protoc_insertion_point(field_get:TSK.CommandAssetChunkArchive.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandAssetChunkArchive::set_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.CommandAssetChunkArchive.digest)
}
inline std::string* CommandAssetChunkArchive::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandAssetChunkArchive.digest)
  return _internal_mutable_digest();
}
inline const std::string& CommandAssetChunkArchive::_internal_digest() const {
  return digest_.Get();
}
inline void CommandAssetChunkArchive::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandAssetChunkArchive::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000001u;
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandAssetChunkArchive::release_digest() {
  // @@protoc_insertion_point(field_release:TSK.CommandAssetChunkArchive.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return digest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandAssetChunkArchive::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandAssetChunkArchive.digest)
}

// optional string asset_chunk = 3;
inline bool CommandAssetChunkArchive::_internal_has_asset_chunk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandAssetChunkArchive::has_asset_chunk() const {
  return _internal_has_asset_chunk();
}
inline void CommandAssetChunkArchive::clear_asset_chunk() {
  asset_chunk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandAssetChunkArchive::asset_chunk() const {
  // @@protoc_insertion_point(field_get:TSK.CommandAssetChunkArchive.asset_chunk)
  return _internal_asset_chunk();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CommandAssetChunkArchive::set_asset_chunk(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 asset_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.CommandAssetChunkArchive.asset_chunk)
}
inline std::string* CommandAssetChunkArchive::mutable_asset_chunk() {
  // @@protoc_insertion_point(field_mutable:TSK.CommandAssetChunkArchive.asset_chunk)
  return _internal_mutable_asset_chunk();
}
inline const std::string& CommandAssetChunkArchive::_internal_asset_chunk() const {
  return asset_chunk_.Get();
}
inline void CommandAssetChunkArchive::_internal_set_asset_chunk(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  asset_chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CommandAssetChunkArchive::_internal_mutable_asset_chunk() {
  _has_bits_[0] |= 0x00000002u;
  return asset_chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandAssetChunkArchive::release_asset_chunk() {
  // @@protoc_insertion_point(field_release:TSK.CommandAssetChunkArchive.asset_chunk)
  if (!_internal_has_asset_chunk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return asset_chunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandAssetChunkArchive::set_allocated_asset_chunk(std::string* asset_chunk) {
  if (asset_chunk != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  asset_chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_chunk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.CommandAssetChunkArchive.asset_chunk)
}

// required int64 asset_chunk_length = 4;
inline bool CommandAssetChunkArchive::_internal_has_asset_chunk_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandAssetChunkArchive::has_asset_chunk_length() const {
  return _internal_has_asset_chunk_length();
}
inline void CommandAssetChunkArchive::clear_asset_chunk_length() {
  asset_chunk_length_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandAssetChunkArchive::_internal_asset_chunk_length() const {
  return asset_chunk_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandAssetChunkArchive::asset_chunk_length() const {
  // @@protoc_insertion_point(field_get:TSK.CommandAssetChunkArchive.asset_chunk_length)
  return _internal_asset_chunk_length();
}
inline void CommandAssetChunkArchive::_internal_set_asset_chunk_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  asset_chunk_length_ = value;
}
inline void CommandAssetChunkArchive::set_asset_chunk_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_asset_chunk_length(value);
  // @@protoc_insertion_point(field_set:TSK.CommandAssetChunkArchive.asset_chunk_length)
}

// required int64 resume_position = 5;
inline bool CommandAssetChunkArchive::_internal_has_resume_position() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommandAssetChunkArchive::has_resume_position() const {
  return _internal_has_resume_position();
}
inline void CommandAssetChunkArchive::clear_resume_position() {
  resume_position_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandAssetChunkArchive::_internal_resume_position() const {
  return resume_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandAssetChunkArchive::resume_position() const {
  // @@protoc_insertion_point(field_get:TSK.CommandAssetChunkArchive.resume_position)
  return _internal_resume_position();
}
inline void CommandAssetChunkArchive::_internal_set_resume_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  resume_position_ = value;
}
inline void CommandAssetChunkArchive::set_resume_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resume_position(value);
  // @@protoc_insertion_point(field_set:TSK.CommandAssetChunkArchive.resume_position)
}

// required int64 materialized_length = 6;
inline bool CommandAssetChunkArchive::_internal_has_materialized_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommandAssetChunkArchive::has_materialized_length() const {
  return _internal_has_materialized_length();
}
inline void CommandAssetChunkArchive::clear_materialized_length() {
  materialized_length_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandAssetChunkArchive::_internal_materialized_length() const {
  return materialized_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommandAssetChunkArchive::materialized_length() const {
  // @@protoc_insertion_point(field_get:TSK.CommandAssetChunkArchive.materialized_length)
  return _internal_materialized_length();
}
inline void CommandAssetChunkArchive::_internal_set_materialized_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  materialized_length_ = value;
}
inline void CommandAssetChunkArchive::set_materialized_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_materialized_length(value);
  // @@protoc_insertion_point(field_set:TSK.CommandAssetChunkArchive.materialized_length)
}

// -------------------------------------------------------------------

// AssetUploadStatusCommandArchive_AssetUploadStatusInfo

// optional string digest = 1;
inline bool AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_has_digest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AssetUploadStatusCommandArchive_AssetUploadStatusInfo::has_digest() const {
  return _internal_has_digest();
}
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::clear_digest() {
  digest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AssetUploadStatusCommandArchive_AssetUploadStatusInfo::digest() const {
  // @@protoc_insertion_point(field_get:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::set_digest(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest)
}
inline std::string* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest)
  return _internal_mutable_digest();
}
inline const std::string& AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_digest() const {
  return digest_.Get();
}
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_mutable_digest() {
  _has_bits_[0] |= 0x00000001u;
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AssetUploadStatusCommandArchive_AssetUploadStatusInfo::release_digest() {
  // @@protoc_insertion_point(field_release:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest)
  if (!_internal_has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return digest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.digest)
}

// optional .TSP.DataUploadStatus upload_status = 2;
inline bool AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_has_upload_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AssetUploadStatusCommandArchive_AssetUploadStatusInfo::has_upload_status() const {
  return _internal_has_upload_status();
}
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::clear_upload_status() {
  upload_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::TSP::DataUploadStatus AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_upload_status() const {
  return static_cast< ::TSP::DataUploadStatus >(upload_status_);
}
inline ::TSP::DataUploadStatus AssetUploadStatusCommandArchive_AssetUploadStatusInfo::upload_status() const {
  // @@protoc_insertion_point(field_get:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.upload_status)
  return _internal_upload_status();
}
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::_internal_set_upload_status(::TSP::DataUploadStatus value) {
  assert(::TSP::DataUploadStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  upload_status_ = value;
}
inline void AssetUploadStatusCommandArchive_AssetUploadStatusInfo::set_upload_status(::TSP::DataUploadStatus value) {
  _internal_set_upload_status(value);
  // @@protoc_insertion_point(field_set:TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.upload_status)
}

// -------------------------------------------------------------------

// AssetUploadStatusCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool AssetUploadStatusCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AssetUploadStatusCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void AssetUploadStatusCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& AssetUploadStatusCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& AssetUploadStatusCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.AssetUploadStatusCommandArchive.super)
  return _internal_super();
}
inline void AssetUploadStatusCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.AssetUploadStatusCommandArchive.super)
}
inline ::TSK::CommandArchive* AssetUploadStatusCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* AssetUploadStatusCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.AssetUploadStatusCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* AssetUploadStatusCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* AssetUploadStatusCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.AssetUploadStatusCommandArchive.super)
  return _internal_mutable_super();
}
inline void AssetUploadStatusCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.AssetUploadStatusCommandArchive.super)
}

// repeated .TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo info_list = 2;
inline int AssetUploadStatusCommandArchive::_internal_info_list_size() const {
  return info_list_.size();
}
inline int AssetUploadStatusCommandArchive::info_list_size() const {
  return _internal_info_list_size();
}
inline void AssetUploadStatusCommandArchive::clear_info_list() {
  info_list_.Clear();
}
inline ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* AssetUploadStatusCommandArchive::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.AssetUploadStatusCommandArchive.info_list)
  return info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >*
AssetUploadStatusCommandArchive::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:TSK.AssetUploadStatusCommandArchive.info_list)
  return &info_list_;
}
inline const ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo& AssetUploadStatusCommandArchive::_internal_info_list(int index) const {
  return info_list_.Get(index);
}
inline const ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo& AssetUploadStatusCommandArchive::info_list(int index) const {
  // @@protoc_insertion_point(field_get:TSK.AssetUploadStatusCommandArchive.info_list)
  return _internal_info_list(index);
}
inline ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* AssetUploadStatusCommandArchive::_internal_add_info_list() {
  return info_list_.Add();
}
inline ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo* AssetUploadStatusCommandArchive::add_info_list() {
  // @@protoc_insertion_point(field_add:TSK.AssetUploadStatusCommandArchive.info_list)
  return _internal_add_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::AssetUploadStatusCommandArchive_AssetUploadStatusInfo >&
AssetUploadStatusCommandArchive::info_list() const {
  // @@protoc_insertion_point(field_list:TSK.AssetUploadStatusCommandArchive.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// AssetUnmaterializedOnServerCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool AssetUnmaterializedOnServerCommandArchive::_internal_has_super() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || super_ != nullptr);
  return value;
}
inline bool AssetUnmaterializedOnServerCommandArchive::has_super() const {
  return _internal_has_super();
}
inline void AssetUnmaterializedOnServerCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TSK::CommandArchive& AssetUnmaterializedOnServerCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& AssetUnmaterializedOnServerCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSK.AssetUnmaterializedOnServerCommandArchive.super)
  return _internal_super();
}
inline void AssetUnmaterializedOnServerCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super_);
  }
  super_ = super;
  if (super) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.AssetUnmaterializedOnServerCommandArchive.super)
}
inline ::TSK::CommandArchive* AssetUnmaterializedOnServerCommandArchive::release_super() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSK::CommandArchive* AssetUnmaterializedOnServerCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSK.AssetUnmaterializedOnServerCommandArchive.super)
  _has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = super_;
  super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* AssetUnmaterializedOnServerCommandArchive::_internal_mutable_super() {
  _has_bits_[0] |= 0x00000001u;
  if (super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArena());
    super_ = p;
  }
  return super_;
}
inline ::TSK::CommandArchive* AssetUnmaterializedOnServerCommandArchive::mutable_super() {
  // @@protoc_insertion_point(field_mutable:TSK.AssetUnmaterializedOnServerCommandArchive.super)
  return _internal_mutable_super();
}
inline void AssetUnmaterializedOnServerCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete super_;
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(super);
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSK.AssetUnmaterializedOnServerCommandArchive.super)
}

// repeated string digest_list = 2;
inline int AssetUnmaterializedOnServerCommandArchive::_internal_digest_list_size() const {
  return digest_list_.size();
}
inline int AssetUnmaterializedOnServerCommandArchive::digest_list_size() const {
  return _internal_digest_list_size();
}
inline void AssetUnmaterializedOnServerCommandArchive::clear_digest_list() {
  digest_list_.Clear();
}
inline std::string* AssetUnmaterializedOnServerCommandArchive::add_digest_list() {
  // @@protoc_insertion_point(field_add_mutable:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  return _internal_add_digest_list();
}
inline const std::string& AssetUnmaterializedOnServerCommandArchive::_internal_digest_list(int index) const {
  return digest_list_.Get(index);
}
inline const std::string& AssetUnmaterializedOnServerCommandArchive::digest_list(int index) const {
  // @@protoc_insertion_point(field_get:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  return _internal_digest_list(index);
}
inline std::string* AssetUnmaterializedOnServerCommandArchive::mutable_digest_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  return digest_list_.Mutable(index);
}
inline void AssetUnmaterializedOnServerCommandArchive::set_digest_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  digest_list_.Mutable(index)->assign(value);
}
inline void AssetUnmaterializedOnServerCommandArchive::set_digest_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  digest_list_.Mutable(index)->assign(std::move(value));
}
inline void AssetUnmaterializedOnServerCommandArchive::set_digest_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  digest_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
}
inline void AssetUnmaterializedOnServerCommandArchive::set_digest_list(int index, const char* value, size_t size) {
  digest_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
}
inline std::string* AssetUnmaterializedOnServerCommandArchive::_internal_add_digest_list() {
  return digest_list_.Add();
}
inline void AssetUnmaterializedOnServerCommandArchive::add_digest_list(const std::string& value) {
  digest_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
}
inline void AssetUnmaterializedOnServerCommandArchive::add_digest_list(std::string&& value) {
  digest_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
}
inline void AssetUnmaterializedOnServerCommandArchive::add_digest_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  digest_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
}
inline void AssetUnmaterializedOnServerCommandArchive::add_digest_list(const char* value, size_t size) {
  digest_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AssetUnmaterializedOnServerCommandArchive::digest_list() const {
  // @@protoc_insertion_point(field_list:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  return digest_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AssetUnmaterializedOnServerCommandArchive::mutable_digest_list() {
  // @@protoc_insertion_point(field_mutable_list:TSK.AssetUnmaterializedOnServerCommandArchive.digest_list)
  return &digest_list_;
}

// -------------------------------------------------------------------

// PencilAnnotationUIState

// optional .TSK.PencilAnnotationUIState.PencilAnnotationToolType current_tool_type = 1 [default = Pen];
inline bool PencilAnnotationUIState::_internal_has_current_tool_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PencilAnnotationUIState::has_current_tool_type() const {
  return _internal_has_current_tool_type();
}
inline void PencilAnnotationUIState::clear_current_tool_type() {
  current_tool_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::TSK::PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::_internal_current_tool_type() const {
  return static_cast< ::TSK::PencilAnnotationUIState_PencilAnnotationToolType >(current_tool_type_);
}
inline ::TSK::PencilAnnotationUIState_PencilAnnotationToolType PencilAnnotationUIState::current_tool_type() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.current_tool_type)
  return _internal_current_tool_type();
}
inline void PencilAnnotationUIState::_internal_set_current_tool_type(::TSK::PencilAnnotationUIState_PencilAnnotationToolType value) {
  assert(::TSK::PencilAnnotationUIState_PencilAnnotationToolType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  current_tool_type_ = value;
}
inline void PencilAnnotationUIState::set_current_tool_type(::TSK::PencilAnnotationUIState_PencilAnnotationToolType value) {
  _internal_set_current_tool_type(value);
  // @@protoc_insertion_point(field_set:TSK.PencilAnnotationUIState.current_tool_type)
}

// optional .TSP.Color pen_tool_color = 2;
inline bool PencilAnnotationUIState::_internal_has_pen_tool_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pen_tool_color_ != nullptr);
  return value;
}
inline bool PencilAnnotationUIState::has_pen_tool_color() const {
  return _internal_has_pen_tool_color();
}
inline const ::TSP::Color& PencilAnnotationUIState::_internal_pen_tool_color() const {
  const ::TSP::Color* p = pen_tool_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& PencilAnnotationUIState::pen_tool_color() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.pen_tool_color)
  return _internal_pen_tool_color();
}
inline void PencilAnnotationUIState::unsafe_arena_set_allocated_pen_tool_color(
    ::TSP::Color* pen_tool_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pen_tool_color_);
  }
  pen_tool_color_ = pen_tool_color;
  if (pen_tool_color) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.PencilAnnotationUIState.pen_tool_color)
}
inline ::TSP::Color* PencilAnnotationUIState::release_pen_tool_color() {
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Color* temp = pen_tool_color_;
  pen_tool_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* PencilAnnotationUIState::unsafe_arena_release_pen_tool_color() {
  // @@protoc_insertion_point(field_release:TSK.PencilAnnotationUIState.pen_tool_color)
  _has_bits_[0] &= ~0x00000001u;
  ::TSP::Color* temp = pen_tool_color_;
  pen_tool_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* PencilAnnotationUIState::_internal_mutable_pen_tool_color() {
  _has_bits_[0] |= 0x00000001u;
  if (pen_tool_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    pen_tool_color_ = p;
  }
  return pen_tool_color_;
}
inline ::TSP::Color* PencilAnnotationUIState::mutable_pen_tool_color() {
  // @@protoc_insertion_point(field_mutable:TSK.PencilAnnotationUIState.pen_tool_color)
  return _internal_mutable_pen_tool_color();
}
inline void PencilAnnotationUIState::set_allocated_pen_tool_color(::TSP::Color* pen_tool_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pen_tool_color_);
  }
  if (pen_tool_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pen_tool_color)->GetArena();
    if (message_arena != submessage_arena) {
      pen_tool_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pen_tool_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pen_tool_color_ = pen_tool_color;
  // @@protoc_insertion_point(field_set_allocated:TSK.PencilAnnotationUIState.pen_tool_color)
}

// optional float pen_tool_opacity = 3;
inline bool PencilAnnotationUIState::_internal_has_pen_tool_opacity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PencilAnnotationUIState::has_pen_tool_opacity() const {
  return _internal_has_pen_tool_opacity();
}
inline void PencilAnnotationUIState::clear_pen_tool_opacity() {
  pen_tool_opacity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PencilAnnotationUIState::_internal_pen_tool_opacity() const {
  return pen_tool_opacity_;
}
inline float PencilAnnotationUIState::pen_tool_opacity() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.pen_tool_opacity)
  return _internal_pen_tool_opacity();
}
inline void PencilAnnotationUIState::_internal_set_pen_tool_opacity(float value) {
  _has_bits_[0] |= 0x00000008u;
  pen_tool_opacity_ = value;
}
inline void PencilAnnotationUIState::set_pen_tool_opacity(float value) {
  _internal_set_pen_tool_opacity(value);
  // @@protoc_insertion_point(field_set:TSK.PencilAnnotationUIState.pen_tool_opacity)
}

// optional float pen_tool_width = 4;
inline bool PencilAnnotationUIState::_internal_has_pen_tool_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PencilAnnotationUIState::has_pen_tool_width() const {
  return _internal_has_pen_tool_width();
}
inline void PencilAnnotationUIState::clear_pen_tool_width() {
  pen_tool_width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PencilAnnotationUIState::_internal_pen_tool_width() const {
  return pen_tool_width_;
}
inline float PencilAnnotationUIState::pen_tool_width() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.pen_tool_width)
  return _internal_pen_tool_width();
}
inline void PencilAnnotationUIState::_internal_set_pen_tool_width(float value) {
  _has_bits_[0] |= 0x00000010u;
  pen_tool_width_ = value;
}
inline void PencilAnnotationUIState::set_pen_tool_width(float value) {
  _internal_set_pen_tool_width(value);
  // @@protoc_insertion_point(field_set:TSK.PencilAnnotationUIState.pen_tool_width)
}

// optional .TSP.Color highlighter_tool_color = 5;
inline bool PencilAnnotationUIState::_internal_has_highlighter_tool_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || highlighter_tool_color_ != nullptr);
  return value;
}
inline bool PencilAnnotationUIState::has_highlighter_tool_color() const {
  return _internal_has_highlighter_tool_color();
}
inline const ::TSP::Color& PencilAnnotationUIState::_internal_highlighter_tool_color() const {
  const ::TSP::Color* p = highlighter_tool_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Color&>(
      ::TSP::_Color_default_instance_);
}
inline const ::TSP::Color& PencilAnnotationUIState::highlighter_tool_color() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.highlighter_tool_color)
  return _internal_highlighter_tool_color();
}
inline void PencilAnnotationUIState::unsafe_arena_set_allocated_highlighter_tool_color(
    ::TSP::Color* highlighter_tool_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlighter_tool_color_);
  }
  highlighter_tool_color_ = highlighter_tool_color;
  if (highlighter_tool_color) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSK.PencilAnnotationUIState.highlighter_tool_color)
}
inline ::TSP::Color* PencilAnnotationUIState::release_highlighter_tool_color() {
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Color* temp = highlighter_tool_color_;
  highlighter_tool_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TSP::Color* PencilAnnotationUIState::unsafe_arena_release_highlighter_tool_color() {
  // @@protoc_insertion_point(field_release:TSK.PencilAnnotationUIState.highlighter_tool_color)
  _has_bits_[0] &= ~0x00000002u;
  ::TSP::Color* temp = highlighter_tool_color_;
  highlighter_tool_color_ = nullptr;
  return temp;
}
inline ::TSP::Color* PencilAnnotationUIState::_internal_mutable_highlighter_tool_color() {
  _has_bits_[0] |= 0x00000002u;
  if (highlighter_tool_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Color>(GetArena());
    highlighter_tool_color_ = p;
  }
  return highlighter_tool_color_;
}
inline ::TSP::Color* PencilAnnotationUIState::mutable_highlighter_tool_color() {
  // @@protoc_insertion_point(field_mutable:TSK.PencilAnnotationUIState.highlighter_tool_color)
  return _internal_mutable_highlighter_tool_color();
}
inline void PencilAnnotationUIState::set_allocated_highlighter_tool_color(::TSP::Color* highlighter_tool_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlighter_tool_color_);
  }
  if (highlighter_tool_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(highlighter_tool_color)->GetArena();
    if (message_arena != submessage_arena) {
      highlighter_tool_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, highlighter_tool_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  highlighter_tool_color_ = highlighter_tool_color;
  // @@protoc_insertion_point(field_set_allocated:TSK.PencilAnnotationUIState.highlighter_tool_color)
}

// optional float highlighter_tool_opacity = 6;
inline bool PencilAnnotationUIState::_internal_has_highlighter_tool_opacity() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PencilAnnotationUIState::has_highlighter_tool_opacity() const {
  return _internal_has_highlighter_tool_opacity();
}
inline void PencilAnnotationUIState::clear_highlighter_tool_opacity() {
  highlighter_tool_opacity_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PencilAnnotationUIState::_internal_highlighter_tool_opacity() const {
  return highlighter_tool_opacity_;
}
inline float PencilAnnotationUIState::highlighter_tool_opacity() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.highlighter_tool_opacity)
  return _internal_highlighter_tool_opacity();
}
inline void PencilAnnotationUIState::_internal_set_highlighter_tool_opacity(float value) {
  _has_bits_[0] |= 0x00000020u;
  highlighter_tool_opacity_ = value;
}
inline void PencilAnnotationUIState::set_highlighter_tool_opacity(float value) {
  _internal_set_highlighter_tool_opacity(value);
  // @@protoc_insertion_point(field_set:TSK.PencilAnnotationUIState.highlighter_tool_opacity)
}

// optional float highlighter_tool_width = 7;
inline bool PencilAnnotationUIState::_internal_has_highlighter_tool_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PencilAnnotationUIState::has_highlighter_tool_width() const {
  return _internal_has_highlighter_tool_width();
}
inline void PencilAnnotationUIState::clear_highlighter_tool_width() {
  highlighter_tool_width_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PencilAnnotationUIState::_internal_highlighter_tool_width() const {
  return highlighter_tool_width_;
}
inline float PencilAnnotationUIState::highlighter_tool_width() const {
  // @@protoc_insertion_point(field_get:TSK.PencilAnnotationUIState.highlighter_tool_width)
  return _internal_highlighter_tool_width();
}
inline void PencilAnnotationUIState::_internal_set_highlighter_tool_width(float value) {
  _has_bits_[0] |= 0x00000040u;
  highlighter_tool_width_ = value;
}
inline void PencilAnnotationUIState::set_highlighter_tool_width(float value) {
  _internal_set_highlighter_tool_width(value);
  // @@protoc_insertion_point(field_set:TSK.PencilAnnotationUIState.highlighter_tool_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSK

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType>() {
  return ::TSK::ChangeDocumentPackageTypeCommandArchive_PackageType_descriptor();
}
template <> struct is_proto_enum< ::TSK::Operation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSK::Operation_OperationType>() {
  return ::TSK::Operation_OperationType_descriptor();
}
template <> struct is_proto_enum< ::TSK::PencilAnnotationUIState_PencilAnnotationToolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSK::PencilAnnotationUIState_PencilAnnotationToolType>() {
  return ::TSK::PencilAnnotationUIState_PencilAnnotationToolType_descriptor();
}
template <> struct is_proto_enum< ::TSK::StructuredTextImportType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSK::StructuredTextImportType>() {
  return ::TSK::StructuredTextImportType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSKArchives_2eproto
